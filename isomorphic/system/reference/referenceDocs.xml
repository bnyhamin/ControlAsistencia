<?xml version='1.0' encoding='UTF-8'?>
<docItems>
<docItem ref="method:Layout.getMember" flags="" description="&amp;#010 Given a numerical index or a member ID, return a pointer to the appropriate member.&amp;#010 &lt;p&gt;&amp;#010 If passed a member Canvas, just returns it.&amp;#010&amp;#010" name="getMember" type="method" definingClass="class:Layout">
<seeAlso ref="method:Layout.getMemberNumber">
</seeAlso>
<params description="identifier for the required member" optional="false" name="memberID" type="string | number | Canvas">
</params>
<returns description="member widget" type="Canvas"></returns>
</docItem>
<docItem ref="attr:ComboBoxItem.pickListProperties" flags="IRA" description="If specified this properties block will be applied to the pickList created for this&amp;#010 Form Item." name="pickListProperties" valueType="object" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:UploadItem.setValue" flags="" description=" Attempting to set the value for an upload form item is disallowed for security reasons.&amp;#010 Therefore this method will just log a warning, and not modify the value of the item.&amp;#010" name="setValue" type="method" definingClass="class:UploadItem">
</docItem>
<docItem ref="method:ResultSet.sortByProperty" flags="" description=" Sort this ResultSet by a property of each record.&amp;#010 &lt;P&gt;&amp;#010 Sorting is performed on the client for a ResultSet that has a full cache for the current&amp;#010 filter criteria.  Otherwise, sorting is performed by the server, and changing the sort order&amp;#010 will invalidate the cache.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; normalizers are not supported by ResultSets in &quot;paged&quot; mode, although valueMaps&amp;#010 in the DataSource are respected by the SQLDataSource.&amp;#010&amp;#010" name="sortByProperty" type="method" definingClass="class:ResultSet">
<params description="name of the property to sort by" optional="false" name="property" type="string">
</params>
<params description="true == sort ascending, false == sort descending" optional="false" name="up" type="boolean">
</params>
<params description="May be specified as a function, with signature &amp;#010              &lt;code&gt;normalize(item, propertyName, context)&lt;/code&gt;, where &lt;code&gt;item&lt;/code&gt; is&amp;#010              a pointer to the item in the array, &lt;code&gt;propertyName&lt;/code&gt; is the &amp;#010              property by which the array is being sorted, and &lt;code&gt;context&lt;/code&gt; is the&amp;#010              arbitrary context passed into this method. Normalizer function should return&amp;#010              the value normalized for sorting.&lt;br&gt;&amp;#010              May also be specified as a ValueMap which maps property values to sortable values." optional="true" name="normalizer" type="function or ValueMap">
</params>
<params description="Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function" optional="true" name="context" type="any">
</params>
<returns description="the list itself" type="List"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="method:ListGrid.getDragTrackerIcon" flags="" description=" Return an icon to display as a drag tracker when the user drags some record.&lt;br&gt;&amp;#010 Default implementation: &amp;#010 If ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')} is specified for the title field of this grid &amp;#010 (see ${isc.DocUtils.linkForRef('method:ListGrid.getTitleField')}), the appropriate value icon will be displayed.&amp;#010 If no appropriate valueIcon can be found, the icon will be derived from&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.trackerImage')}.&lt;br&gt;&amp;#010 If multiple records are selected, only the first record is examined for valueIcons.&amp;#010 &lt;p&gt;&amp;#010 Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to &lt;code&gt;&quot;icon&quot;&lt;/code&gt;. &amp;#010" name="getDragTrackerIcon" type="method" definingClass="class:ListGrid">
<params description="Records being dragged" optional="false" name="records" type="Array of ListGridRecord">
</params>
<returns description="Image URL of icon to display" type="string"></returns>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="attr:FormItem.startRow" flags="IRW" description="Whether this item should always start a new row in the form layout." name="startRow" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FormItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="attr:ToolbarItem.buttonProperties" flags="IRA" description="Default properties for this toolbar's buttons." name="buttonProperties" valueType="object" defaultValue="null" type="attr" definingClass="class:ToolbarItem">
</docItem>
<docItem ref="method:ListGrid.freezeField" flags="" description=" Freeze the indicated field, so that it remains in place and visible when horizontal&amp;#010 scrolling occurs.&amp;#010&amp;#010" name="freezeField" type="method" definingClass="class:ListGrid">
<params optional="false" name="field" type="ListGridField or colNum or ListGridField.name">
</params>
    <groups>frozenFields</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeLongerThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;lengthRange&lt;/code&gt; type validator&amp;#010 returns false becaues the value passed in has fewer than &lt;code&gt;validator.min&lt;/code&gt; characters.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeLongerThan" valueType="string" defaultValue="&quot;Must be more than ${min} characters&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:MenuItem.iconWidth" flags="IR" description="The width applied to this item's icon.  The default of &lt;code&gt;16&lt;/code&gt; can be changed&amp;#010 for all MenuItems by overriding ${isc.DocUtils.linkForRef('attr:Menu.iconWidth')}." name="iconWidth" valueType="number" defaultValue="16" type="attr" definingClass="object:MenuItem">
    <groups>menuIcons</groups>
</docItem>
<docItem ref="method:Button.getTitle" flags="A" description=" Return the title - text/HTML drawn inside the component.&amp;#010 &lt;p&gt;&amp;#010 Default is to simply return this.title.&amp;#010" name="getTitle" type="method" definingClass="class:Button">
<returns description="HTML for the title" type="string"></returns>
</docItem>
<docItem ref="classMethod:XMLTools.loadXML" flags="" description=" Load an XML document from the origin server or from a foreign server by relaying through the&amp;#010 origin server.  An asynchronous callback provides both the XML document and raw text of the&amp;#010 response.&amp;#010 &lt;P&gt;&amp;#010 Relaying through the origin server requires that the ISC HttpProxyServlet be installed and&amp;#010 accessible.&amp;#010 &amp;#010" name="loadXML" type="classMethod" definingClass="class:XMLTools">
<params description="URL to load the schema from" optional="false" name="URL" type="URL">
</params>
<params description="callback to fire when the XML is loaded.  Signature is                             callback(xmlDoc, xmlText)" optional="false" name="callback" type="callback">
</params>
<params description="additional properties to set on the RPCRequest                                         that will be issued" optional="true" name="requestProperties" type="RPCRequest">
</params>
</docItem>
<docItem ref="attr:Img.src" flags="IRW" description="The base filename for the image.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;img.state&lt;/code&gt; is set, it's value will be appended to the URL before the&amp;#010 file extension.  &amp;#010 &lt;P&gt;&amp;#010 For example, given an &lt;code&gt;src&lt;/code&gt; of &quot;findIcon.gif&quot; and a state of&amp;#010 &quot;Disabled&quot;, the resulting image name would be &quot;findIcon_Disabled.gif&quot;.  Compound states&amp;#010 such as &quot;Selected&quot;, &quot;Focused&quot; and &quot;Over&quot; or &quot;Down&quot; will have an intervening underscore,&amp;#010 resulting in, for example, &lt;code&gt;&quot;findIcon_Selected_Down.gif&quot;&lt;/code&gt;." name="src" valueType="SCImgURL" defaultValue="&quot;blank.gif&quot;" type="attr" definingClass="class:Img">
    <setter>setSrc</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ImgButton.iconAlign" flags="IR" description="If this button is showing an icon should it be right or left aligned?" name="iconAlign" valueType="string" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DynamicForm.showInlineErrors" flags="IRW" description="Should field errors be written into the form next to the appropriate form items?" name="showInlineErrors" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="method:DynamicForm.setError" deprecated="This method has been deprecated as of SmartClient release 5.7.  Use ${isc.DocUtils.linkForRef('method:DynamicForm.addFieldErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')} instead" flags="A" description="          Sets error message(s) for the specified itemName to the error string or array of&amp;#010          strings. You must call form.markForRedraw() to display the new error message(s).&lt;br&gt;&amp;#010          &lt;b&gt;Note:&lt;/b&gt; you can call this multiple times for an individual itemName&amp;#010			 which will result in an array of errors being remembered.&amp;#010&amp;#010" name="setError" type="method" definingClass="class:DynamicForm">
<params description="name of the item to set" optional="false" name="itemName" type="string">
</params>
<params description="error message string or array of strings" optional="false" name="errorMessage" type="string|array">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="method:ListGrid.setData" flags="" description=" Initialize the data object with the given array. Observes methods of the data object&amp;#010 so that when the data changes, the listGrid will redraw automatically.&amp;#010" name="setData" type="method" definingClass="class:ListGrid">
<params description="data to show in the list" optional="false" name="newData" type="List of ListGridRecord">
</params>
    <groups>data</groups>
</docItem>
<docItem ref="attr:TreeGrid.showRoot" flags="IR" description="Specifies whether the root node should be displayed in the treeGrid.&amp;#010 &lt;P&gt;&amp;#010 This property is only available for &quot;children&quot; modelType trees, hence is not allowed for&amp;#010 trees that load data from the server dynamically via ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')}.  &amp;#010 &lt;P&gt;&amp;#010 To get the equivalent of a visible &quot;root&quot; node in a tree that loads data dynamically,&amp;#010 add a singular, top-level parent to the data.  However, note that this top-level parent&amp;#010 will technically be the only child of root, and the implicit root object will be&amp;#010 returned by ${isc.DocUtils.linkForRef('method:Tree.getRoot','this.data.getRoot()')}." name="showRoot" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
    <groups>treeField</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.showAllOptions" flags="IR" description="If true, even non-matching options will be shown, with configurable &amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.separatorRows','separator rows')} in between.  Not valid for&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource','databound pickLists')}." name="showAllOptions" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:Canvas.getScrollTop" flags="A" description=" Get the number of pixels this Canvas is scrolled from its top edge.&amp;#010" name="getScrollTop" type="method" definingClass="class:Canvas">
<returns description="scrollTop" type="number"></returns>
    <groups>positioning</groups>
    <groups>scrolling</groups>
</docItem>
<docItem ref="attr:ListGrid.dataPageSize" flags="IRW" description="When using data paging, how many records to fetch at a time.  The value of this&amp;#010 attribute is passed on to the auto-constructed ${isc.DocUtils.linkForRef('class:ResultSet')} object for this&amp;#010 component.  In effect, this gives you control over the ${isc.DocUtils.linkForRef('attr:ResultSet.resultSize')}&amp;#010 attribute for this component." name="dataPageSize" valueType="integer" defaultValue="75" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ResultSet.resultSize">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('databoundFetch')}</examples>
    <groups>performance</groups>
</docItem>
<docItem ref="group:ancestry" description="Parent/child relationships" name="ancestry" type="group">
    <refs>type:DisplayNodeType</refs>
</docItem>
<docItem ref="group:menuBasic" name="menuBasic" type="group">
    <refs>method:MenuItem.action</refs>
    <refs>attr:MenuItem.title</refs>
    <refs>attr:MenuItem.submenu</refs>
    <refs>attr:MenuItem.isSeparator</refs>
    <refs>attr:MenuItem.enabled</refs>
</docItem>
<docItem ref="method:GridRenderer.getRowHeight" flags="" description=" Return the height this row should be.  Default is this.cellHeight. &amp;#010&amp;#010" name="getRowHeight" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number" optional="false" name="rowNum" type="number">
</params>
<returns description="height in pixels" type="number"></returns>
</docItem>
<docItem ref="attr:PickList.filterLocally" flags="IRA" description="If &lt;code&gt;filterLocally&lt;/code&gt; is set for this item, and this item is showing options &amp;#010 from a dataSource, fetch the entire set of options from the server, and use these values&amp;#010 to map the item value to the appropriate display value. Also use &lt;code&gt;&quot;local&quot;&lt;/code&gt;&amp;#010 type filtering on drop down list of options.&lt;br&gt;&amp;#010 This means data will only be fetched once from the server, and then filtered on the&amp;#010 client." name="filterLocally" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:PickList">
<seeAlso ref="attr:FormItem.filterLocally">
</seeAlso>
</docItem>
<docItem ref="attr:RestDataSource.fetchDataURL" flags="IR" description="Custom dataURL for fetch type operations" name="fetchDataURL" valueType="string" defaultValue="null" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:ListGrid.sortDirection" flags="IRW" description="Specifies the current sorting direction of this listGrid. See SortDirection&amp;#010          type for details." name="sortDirection" valueType="SortDirection" defaultValue="Array.ASCENDING" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('sort')}</examples>
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:ResultTree.disableCacheSync" flags="IRA" description="By default when the data of this ResultSet's dataSource is modified, the ResultSet will&amp;#010 be updated to display these changes.&amp;#010 Set this flag to true to disable this behavior." name="disableCacheSync" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ResultTree">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.lengthRange" flags="IR" description="This validator type applies to string values only.  If the value is a string value&amp;#010  validation will fail if the strings length falls outside the range specified by &amp;#010  &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;.&lt;br&gt;&amp;#010  Note that non-string values will always pass validation by this validator type.&lt;br&gt;&amp;#010 Note that the &lt;code&gt;errorMessage&lt;/code&gt; for this validator will be evaluated as&amp;#010 a dynamicString - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="lengthRange" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="method:ListGrid.getEditValues" flags="" description=" Returns the current set of unsaved edits for a given row being edited.&amp;#010&amp;#010" name="getEditValues" type="method" definingClass="class:ListGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="valuesID" type="number | Object">
</params>
<returns description="Current editValues object for the row.  This contains the current                     edit values in {fieldName1:value1, fieldName2:value2} format." type="object"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:OperationBinding.operationType" flags="IR" description="Which operationType this operationBinding is for.  This property is only settable on an operationBinding, not&amp;#010 a DataSource as a whole." name="operationType" valueType="DSOperationType" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:RPCRequest.useXmlHttpRequest" deprecated="As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}.  If you specify a value for this property, it will take precedence over ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}." flags="IRWA" description="Selects the default http transport for this RPCRequest.  If set to true, this request will use&amp;#010 XMLHttpRequest for the transport to the server.  If set to false it will use a hidden frame.  If&amp;#010 left unset, the transport mechanism is determined from the RPCManager default set in &amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.useXmlHttpRequest')}&amp;#010 &lt;p&gt;&amp;#010 If you're using queueing, note that all requests in the queue must use the same transport.&amp;#010 If you attempt to send a request via a different transport than those that are currently on&amp;#010 the queue, it will be sent to the server separately, ahead of the queue, and a warning will&amp;#010 be logged to the Developer Console.&amp;#010 &lt;p&gt;&amp;#010 If you specify &lt;code&gt;true&lt;/code&gt; for this attribute and XMLHttp is not available, a warning&amp;#010 will be logged to the Developer Console and RPCManager will attempt to use the frames&amp;#010 transport for this request.  Note that some features like&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} requre the XMLHttp transport and will not work if the&amp;#010 XMLHttp transport is unavailable (this can happen if the end user is using Internet Explorer&amp;#010 and has disabled ActiveX).  You can query the availability of XMLHttp by calling&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')}" name="useXmlHttpRequest" valueType="boolean" defaultValue="RPCManager.useXmlHttpRequest" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.useXmlHttpRequest">
</seeAlso>
<seeAlso ref="classMethod:RPCManager.xmlHttpRequestAvailable">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.getHoverHTML" flags="" description=" If &lt;code&gt;this.showHover&lt;/code&gt; is true, when the user holds the mouse over this Canvas for&amp;#010 long enough to trigger a hover event, a hover canvas is shown by default. This method returns&amp;#010 the contents of that hover canvas. Default implementation returns &lt;code&gt;this.prompt&lt;/code&gt; -&amp;#010 override for custom hover HTML. Note that returning &lt;code&gt;null&lt;/code&gt; or an empty string will&amp;#010 suppress the hover canvas altogether.&amp;#010" name="getHoverHTML" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:ListGridField.suppressValueIcon" flags="IRW" description="If this field has a valueIcons property specified, setting this property to true will &amp;#010 prevent the valueIcon being written out into this field's cells." name="suppressValueIcon" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
<seeAlso ref="attr:ListGridField.showValueIconOnly">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:ResultSet.dropCacheOnUpdate" flags="IRA" description="Whether to discard all cached rows when a modification operation (add, update, remove)&amp;#010 occurs on the ResultSet's DataSource.&amp;#010 &lt;P&gt;&amp;#010 A ResultSet that has a complete cache for the current filter criteria can potentially&amp;#010 incorporate a newly created or updated row based on the data that the server returns&amp;#010 when a modification operation completes.  However this is not always possible for&amp;#010 ResultSets that show some types of joins, or when the server cannot easily return update&amp;#010 data.  In this case set &lt;code&gt;dropCacheOnUpdate&lt;/code&gt; to cause the cache to be&amp;#010 discarded when an update occurs.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;dropCacheOnUpdate&lt;/code&gt; can be set either directly on a ResultSet, or on a&amp;#010 DataSource in order to affect all ResultSets on that DataSource." name="dropCacheOnUpdate" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ResultSet">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="group:validtion" name="validtion" type="group">
    <refs>method:ListGrid.clearRowErrors</refs>
</docItem>
<docItem ref="attr:TreeNode.parentId" flags="IR" description="For trees with modelType &quot;parent&quot;, this property specifies unique parent ID of this node.&amp;#010 The unique ID of a node, together with the unique ID of its parent is used by&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.linkNodes')} to link a list of nodes into a tree.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}." name="parentId" valueType="String or Number" defaultValue="null" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:TreeNode.id">
</seeAlso>
<seeAlso ref="method:Tree.linkNodes">
</seeAlso>
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<seeAlso ref="attr:Tree.parentIdField">
</seeAlso>
</docItem>
<docItem ref="classMethod:Page.getScreenWidth" flags="" description="		Get the width of the user's screen, in pixels.&amp;#010" name="getScreenWidth" type="classMethod" definingClass="class:Page">
</docItem>
<docItem ref="attr:Canvas.edgeCenterBackgroundColor" flags="IR" description="Background color for the center section only.  Can be used as a surrogate background&amp;#010 color for the decorated Canvas, if the Canvas is set to partially overlap the edges and&amp;#010 hence can't show a background color itself without occluding media." name="edgeCenterBackgroundColor" valueType="Color" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:GridRenderer.showAllRows" flags="IRA" description="Whether all rows should be drawn all at once, or only rows visible in the viewport.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Drawing all rows causes longer initial rendering time, but allows smoother vertical scrolling.&amp;#010 With a very large number of rows, showAllRows will become too slow." name="showAllRows" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>performance</groups>
</docItem>
<docItem ref="attr:TabSet.tabBarThickness" flags="IRW" description="Thickness of tabBar, applies to either orientation (specifies height for horizontal,&amp;#010 width for vertical orientation).  Note that overriding this value for TabSets that are&amp;#010 skinned with images generally means providing new media for the borders." name="tabBarThickness" valueType="number" defaultValue="21" type="attr" definingClass="class:TabSet">
    <groups>tabBar</groups>
</docItem>
<docItem ref="method:Tree.getParent" flags="" description="&amp;#010 Returns the parent of this node.&amp;#010&amp;#010" name="getParent" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="parent of this node" type="node"></returns>
</docItem>
<docItem ref="method:Canvas.mouseOut" flags="A" description="&amp;#010 Executed when the mouse leaves this widget.  No default implementation.&amp;#010&amp;#010" name="mouseOut" type="method" definingClass="class:Canvas">
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customMouseEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:StatefulCanvas.setAutoFit" flags="" description=" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn&amp;#010 autoFit on or off. When autoFit is set to &lt;code&gt;false&lt;/code&gt;, canvas will be resized to&amp;#010 it's previously specified size.&amp;#010" name="setAutoFit" type="method" definingClass="class:StatefulCanvas">
<params description="New autoFit setting." optional="false" name="autoFit" type="boolean">
</params>
</docItem>
<docItem ref="attr:DynamicForm.cancelParamValue" flags="IRW" description="The value of the special field sent to the server as part of ${isc.DocUtils.linkForRef('method:DynamicForm.cancel')}" name="cancelParamValue" valueType="String" defaultValue="&quot;cancel&quot;" type="attr" definingClass="class:DynamicForm">
</docItem>
<docItem ref="method:Layout.setLayoutMargin" flags="" description=" Method to force a reflow of the layout after directly assigning a value to any of the&amp;#010 layout*Margin properties. Takes no arguments.&amp;#010&amp;#010" name="setLayoutMargin" type="method" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="attr:FormItem.showDisabled" flags="IRWA" description="When this item is disabled, should it be re-styled to indicate its disabled state?" name="showDisabled" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Selection.deselectAll" flags="" description="			Deselect ALL records of the list&amp;#010" name="deselectAll" type="method" definingClass="class:Selection">
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.ungroupText" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.isGrouped','this.isGrouped')} is true, this&amp;#010 attribute will be shown as the title for the menu item to ungroup the grid." name="ungroupText" valueType="string" defaultValue="&quot;Ungroup&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="group:shadow" name="shadow" type="group">
    <refs>method:Canvas.setShowShadow</refs>
    <refs>attr:Canvas.showShadow</refs>
    <refs>attr:Canvas.shadowDepth</refs>
    <refs>attr:Canvas.shadowOffset</refs>
    <refs>attr:Canvas.shadowSoftness</refs>
    <refs>attr:Canvas.shadowImage</refs>
</docItem>
<docItem ref="attr:DataSource.showLocalFieldsOnly" flags="IR" description="For a DataSource that inherits ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from another DataSource &amp;#010 (via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}), indicates that only the fields listed in this DataSource&amp;#010 should be shown.  All other inherited parent fields will be marked &quot;hidden:true&quot;." name="showLocalFieldsOnly" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>fields</groups>
</docItem>
<docItem ref="method:ImgButton.setIcon" flags="" description=" Change the icon being shown next to the title text.&amp;#010" name="setIcon" type="method" definingClass="class:ImgButton">
<params description="URL of new icon" optional="false" name="icon" type="URL">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGrid.booleanImageHeight" flags="IRWA" description="Height for the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} and the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanFalseImage')}" name="booleanImageHeight" valueType="number" defaultValue="16" type="attr" definingClass="class:ListGrid">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="type:PromptStyle" name="PromptStyle" type="type">
<values description="Displays a centered modal prompt with text specified by                 ${isc.DocUtils.linkForRef('attr:RPCRequest.prompt')}" value="&quot;dialog&quot;"></values>
<values description="Changes the current cursor to the style specified by                 ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}" value="&quot;cursor&quot;"></values>
</docItem>
<docItem ref="class:XJSONDataSource" description="A DataSource preconfigured to use the ${isc.DocUtils.linkForRef('type:RPCTransport','&quot;scriptInclude&quot;')} transport&amp;#010 for cross-domain calls to JSON services, such as those provided&amp;#010 by &lt;a href='http://developer.yahoo.net/common/json.html#callbackparam' onclick=&quot;window.open('http://developer.yahoo.net/common/json.html#callbackparam');return false;&quot;&gt;Yahoo&lt;/a&gt;.&amp;#010 &lt;P&gt;&amp;#010 To use this DataSource, provide the URL of the service as ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}, and&amp;#010 provide ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} that describe the structure of the part of the&amp;#010 returned data that you would like to use.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.recordXPath')} and ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} can be used to extract&amp;#010 data from the structure returned by the service.&amp;#010 &lt;P&gt;&amp;#010 This XJSONDataSource is really a subclass of DataSource with just a few property settings:&amp;#010 &lt;pre&gt;&amp;#010    dataFormat : &quot;json&quot;,&amp;#010    dataTransport : &quot;scriptInclude&quot;&amp;#010    callbackParam : &quot;callback&quot;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you use this DataSource to contact Yahoo web services, remember to include&amp;#010 output=json in the dataURL, as well as a&amp;#010 &lt;a href='http://developer.yahoo.net/' onclick=&quot;window.open('http://developer.yahoo.net/');return false;&quot;&gt;Yahoo developer ID&lt;/a&gt;." name="XJSONDataSource" type="class">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <examples>${isc.DocUtils.linkForExampleId('jsonYahooWebServices')}</examples>
</docItem>
<docItem ref="attr:SelectItem.optionDataSource" flags="IRA" description="If set, this FormItem will derive data to show in the PickList by fetching records from&amp;#010 the specified &lt;code&gt;optionDataSource&lt;/code&gt;.  The fetched data will be used as a&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in&amp;#010 the loaded records, to derive one valueMap entry per record loaded from the&amp;#010 optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by&amp;#010 setting ${isc.DocUtils.linkForRef('attr:SelectItem.pickListFields')}.&amp;#010 &lt;P&gt;&amp;#010 The data will be retrieved via a &quot;fetch&quot; operation on the DataSource, passing the &amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.optionFilterContext')} (if set) as DSRequest properties.&amp;#010 &lt;P&gt;&amp;#010 The fetch will be triggered when the pickList is first shown, or, you can set&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is&amp;#010 first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually &amp;#010 trigger a fetch.&amp;#010 &lt;P&gt;&amp;#010 Data paging is automatically enabled if the optionDataSource supports it.  As the&amp;#010 pickList is scrolled by the user, requests for additional data will be automatically&amp;#010 issued.&amp;#010 &lt;P&gt;&amp;#010 For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,&amp;#010 with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.&amp;#010 If your dataSource is not capable of filtering results by search criteria (eg the&amp;#010 dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:SelectItem.filterLocally')} to have the&amp;#010 entire dataset loaded up front and filtering performed in the browser.  This disables&amp;#010 data paging.&amp;#010 &lt;P&gt;&amp;#010 Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}&amp;#010 behaviors, eg, fetching individual display values before the pickList is shown.&amp;#010 &lt;P&gt;&amp;#010 Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is &lt;b&gt;also&lt;/b&gt; specified&amp;#010 for the field (either directly in the form item or as part of the field definition in&amp;#010 the dataSource), it will be preferred to the data derived from the optionDataSource for&amp;#010 whatever mappings are present." name="optionDataSource" valueType="DataSource | String" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="attr:RadioGroupItem.vertical" flags="IRW" description="True == display options vertically, false == display in a single row" name="vertical" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RadioGroupItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.listEndEditAction" flags="IRWA" description="If the user is editing the last record in this listGrid, and attempts to navigate &amp;#010 beyond the last row either by tabbing off the last editable field, or using the down&amp;#010 arrow key, this property determines what action to take:&lt;ul&gt;&amp;#010 &lt;li&gt;&quot;next&quot;: start editing a new record at the end of the list.&amp;#010 &lt;li&gt;&quot;done&quot;: hide the editor&amp;#010 &lt;li&gt;&quot;stop&quot;: leave focus in the cell being edited&amp;#010 &lt;/ul&gt;" name="listEndEditAction" valueType="RowEndEditAction" defaultValue="&quot;stop&quot;" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('enterNewRows')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:TabSet.showPaneContainerEdges" flags="IRWA" description="Should the paneContainer for this tabset show ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}." name="showPaneContainerEdges" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:TreeGrid.folderClosed" flags="" description="&amp;#010 This method is called when a folder is closed either via the user manipulating the&amp;#010 expand/collapse control in the UI or via ${isc.DocUtils.linkForRef('method:TreeGrid.closeFolder')}.  You can return&amp;#010 &lt;code&gt;false&lt;/code&gt; to cancel the close.&amp;#010&amp;#010" name="folderClosed" type="method" definingClass="class:TreeGrid">
<params description="the folder (record) that is being closed" optional="false" name="node" type="TreeNode">
</params>
<returns description="false to cancel the close, true to all it to proceed" type="boolean"></returns>
</docItem>
<docItem ref="method:List.first" flags="" description=" Return the first item in this list&amp;#010&amp;#010" name="first" type="method" definingClass="interface:List">
<returns description="first item in the list" type="any"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="classMethod:RPCManager.clearTransaction" flags="A" description=" Erase all client-side record of a transaction, such that any response from the server&amp;#010 will be ignored.&amp;#010 &lt;P&gt;&amp;#010 A transaction means a batch of one or more RPCRequests that have already been sent to&amp;#010 the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')}.&amp;#010&amp;#010" name="clearTransaction" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="group:relogin">
</seeAlso>
<params description="id of the transaction to be cleared" optional="false" name="transactionNum" type="id">
</params>
</docItem>
<docItem ref="method:ListGrid.focusInFilterEditor" flags="" description=" If the filter editor (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')}) is visible for this grid, &amp;#010 this method will explictly put focus into the specified field in the filter editor.&amp;#010" name="focusInFilterEditor" type="method" definingClass="class:ListGrid">
<params description="Name of the field to put focus into. If unspecified focus will go                             to the first field in the editor" optional="true" name="fieldName" type="String">
</params>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="method:ListGrid.unsort" flags="" description=" Turn sorting off, typically because data has changed and is no longer sorted.&amp;#010 &lt;p&gt;&amp;#010 Calling &lt;code&gt;unsort()&lt;/code&gt; disables visual indication of which column is the sort column,&amp;#010 and calls &lt;code&gt;unsort()&lt;/code&gt; on the underlying dataset.&amp;#010 &lt;P&gt;&amp;#010 Note that a grid viewing a paged dataset may not be able to support &lt;code&gt;unsort()&lt;/code&gt;&amp;#010 because the sort order is what establishes the row numbering that allows data to be&amp;#010 fetched in batches.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;unsort()&lt;/code&gt; is automatically called when records are dropped or value of the&amp;#010 sorted column is changed.&amp;#010&amp;#010" name="unsort" type="method" definingClass="class:ListGrid">
    <groups>sorting</groups>
</docItem>
<docItem ref="method:CubeGrid.enableHiliting" flags="" description="&amp;#010      enable / disable all hilites&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="enableHiliting" type="method" definingClass="class:CubeGrid">
<params description="new enabled state to apply - if null, defaults to true" optional="true" name="enable" type="boolean">
</params>
    <groups>hiliting</groups>
</docItem>
<docItem ref="attr:DynamicForm.wrapItemTitles" flags="IRW" description="Whether titles for form items should wrap.  If not specified, titles will wrap by&amp;#010 default.  Can be overridden for individual items via ${isc.DocUtils.linkForRef('attr:FormItem.wrapTitle')}" name="wrapItemTitles" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="type:ObjectLiteral" description="An &quot;Object literal&quot; is JavaScript shorthand for defining a JavaScript Object with a set&amp;#010 of properties.  For example, code like this:&amp;#010 &lt;pre&gt;&amp;#010    var request = {&amp;#010        actionURL : &quot;/foo.do&quot;,&amp;#010        showPrompt:false&amp;#010    };&lt;/pre&gt;&amp;#010 .. is equivalent to ..&amp;#010 &lt;pre&gt;&amp;#010    var request = new Object();&amp;#010    request.actionURL = &quot;/foo.do&quot;;&amp;#010    request.showPrompt = false;&lt;/pre&gt;&amp;#010 In situations where a set of ${isc.DocUtils.linkForRef('type:Properties','properties')} may be passed to a&amp;#010 method, the Object literal notation is much more compact.  For example:&amp;#010 &lt;pre&gt;&amp;#010    isc.RPCManager.sendRequest({&amp;#010        actionURL : &quot;/foo.do&quot;,&amp;#010        showPrompt:false&amp;#010    });&lt;/pre&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; if you have a 'trailing comma' in an object literal, like so:&amp;#010 &lt;pre&gt;&amp;#010    var request = {&amp;#010        actionURL : &quot;/foo.do&quot;,&amp;#010        showPrompt:false, // TRAILING COMMA&amp;#010    };&lt;/pre&gt;&amp;#010 This is considered a syntax error by Internet Explorer, but not by Firefox.  This is by&amp;#010 far the #1 cause of Internet Explorer-specific errors that do not occur in other&amp;#010 browsers.  Pay special attention to this error, and, if you can, install the&amp;#010 JSSyntaxScannerFilter into your development environment (as described in the&amp;#010 ${isc.DocUtils.linkForRef('group:iscInstall','deployment instructions')})." name="ObjectLiteral" type="type">
</docItem>
<docItem ref="attr:GridRenderer.emptyMessageStyle" flags="IRW" description="The CSS style name applied to the emptyMessage string if displayed." name="emptyMessageStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:GridRenderer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:CubeGrid.dataSource" flags="IR" description="Name of the DataSource to use to fetch CubeGrid data.&amp;#010 &lt;p&gt;&amp;#010 The DataSource should have a field named after each facetId.  The CubeGrid will submit&amp;#010 requests for data as DataSource &quot;fetch&quot; operations that request &amp;#010 ${isc.DocUtils.linkForRef('object:CellRecord','cellRecords')} only for currently visible area&amp;#010 (including ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio','drawAheadRatio')}).  The ${isc.DocUtils.linkForRef('type:Criteria')} passed&amp;#010 in each fetch operation will be a set of facetValues that corresponds to a rectangular&amp;#010 swath of cells the CubeGrid needs data for, for example:&lt;pre&gt;&amp;#010      { region:&quot;west&quot;, product:[&quot;chair&quot;, &quot;table&quot;], timePeriod:&quot;Q1 2004&quot; }&amp;#010 &lt;/pre&gt;&amp;#010 Note that in the criteria above, the Array value for the &quot;product&quot; facet indicates the&amp;#010 CubeGrid needs cellRecords for both the &quot;chair&quot; and &quot;table&quot; facetValues.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.fixedFacetValues')}, if any, are always sent in each &quot;fetch&quot; operation.&amp;#010 &lt;P&gt;&amp;#010 Scrolling, expanding/collapsing tree facets, pivoting, and changing the currently&amp;#010 visibile facets may all trigger data requests.&amp;#010 &lt;P&gt;&amp;#010 The CubeGrid will generally attempt to fetch a minimal set of data to fill the viewport,&amp;#010 sending multiple fetch operations in a batch (via ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','queueing')})&amp;#010 which minimally describe newly revealed areas without specifying each individual cell.&amp;#010 The CubeGrid will automatically handle being provided &lt;i&gt;more&lt;/i&gt; data than was asked&amp;#010 for, so server-side fetch-ahead policies can be implemented without any client-side&amp;#010 customization.&amp;#010 &lt;P&gt;&amp;#010 Note that the ${isc.DocUtils.linkForRef('attr:DataSource.serverType','SQL connector')} shipped with the SmartClient&amp;#010 SDK is capable of responding to the CubeGrid's data requests without writing any custom&amp;#010 server code." name="dataSource" valueType="string" defaultValue="null" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="classMethod:Log.setPriority" flags="" description=" Set the priority of messages that will be visible for this log category.&amp;#010 &lt;P&gt;&amp;#010 After calling setPriority, any messages logged to the given category whose priority is&amp;#010 below the specified priority will not appear in the Log.&amp;#010&amp;#010" name="setPriority" type="classMethod" definingClass="class:Log">
<seeAlso ref="classMethod:Log.isEnabledFor" description="to check whether a category would allow a log at a given priority"></seeAlso>
<params description="category name" optional="false" name="category" type="String">
</params>
<params description="priority level to set" optional="false" name="priority" type="LogPriority">
</params>
<params description="Optional ISC class or instance - if passed the priority will be set for logging &amp;#010      occurring on the class or instance only." optional="true" name="object" type="Class or Instance object">
</params>
</docItem>
<docItem ref="attr:Menu.submenuImage" flags="IRWA" description="Default image to use for the submenu indicator. Valid src, width and height must be&amp;#010 specified. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.&lt;br&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:Menu.submenuDirection')} is set to &lt;code&gt;&quot;left&quot;&lt;/code&gt;, the image src will have&amp;#010 the suffix &lt;code&gt;&quot;_left&quot;&lt;/code&gt; appended to it." name="submenuImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="method:Canvas.resizeBy" flags="" description="			Resizes the widget, adding deltaX to its width and deltaY to its height (moves the right&amp;#010          and/or bottom sides of the widget).&amp;#010" name="resizeBy" type="method" definingClass="class:Canvas">
<params description="amount to resize horizontally (may be negative)" optional="true" name="deltaX" type="number">
</params>
<params description="amount to resize vertically (may be negative)" optional="true" name="deltaY" type="number">
</params>
<returns description="whether the component actually changed size" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('resize')}</examples>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Array.first" flags="" description=" Return the first item in this list&amp;#010&amp;#010" name="first" type="method" definingClass="object:Array">
<returns description="first item in the list" type="any"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:RestDataSource.removeDataURL" flags="IR" description="dataURL for fetch type operations" name="removeDataURL" valueType="string" defaultValue="null" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:FormItem.suppressValueIcon" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is set, this property may be set to prevent the value&amp;#010 icons from showing up next to the form items value" name="suppressValueIcon" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:RPCRequest.serverOutputAsString" flags="IRWA" description="Setting this flag makes the body of the HTTP response available as a String in the&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} as ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}.  This means that you can, for&amp;#010 example, load the contents of static files off your webserver into a string for processing&amp;#010 on the client with no server support.  The ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')} must be in the same&amp;#010 domain as the current page for this to work.&amp;#010 &lt;p&gt;&amp;#010 This feature relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.&amp;#010 &lt;p&gt;&amp;#010 Generally this API is used for either ${isc.DocUtils.linkForRef('group:nonJavaBackend','non-Java backends')} &amp;#010 or for advanced usage such as content that requires processing before it can be used in&amp;#010 SmartClient components (such as client-side web scraping).  Note that SmartClient provides&amp;#010 higher-level APIs for loading common types of data, see eg ${isc.DocUtils.linkForRef('class:HTMLFlow')} for HTML content,&amp;#010 ${isc.DocUtils.linkForRef('class:ViewLoader')} for loading SmartClient components, ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXML')} for loading&amp;#010 XML, ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} for loading &lt;a href='http://www.json.org/' onclick=&quot;window.open('http://www.json.org/');return false;&quot;&gt;JSON&lt;/a&gt;, and&amp;#010 ${isc.DocUtils.linkForRef('class:DataSource')} for loading structured data in various formats." name="serverOutputAsString" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="object:groupNode" description="An auto-generated subclass of ${isc.DocUtils.linkForRef('object:TreeNode')} representing the group nodes&amp;#010 in a grouped listgrid." name="groupNode" type="object">
    <treeLocation>Client Reference/Grids/ListGrid</treeLocation>
    <attrs>attr:groupNode.groupMembers</attrs>
    <attrs>attr:groupNode.groupTitle</attrs>
    <attrs>attr:groupNode.groupValue</attrs>
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.disable" flags="" description=" Disables this widget and any children and peers of this widget.&amp;#010" name="disable" type="method" definingClass="class:Canvas">
    <groups>enable</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.filterWithValue" flags="RA" description="Read-only property set by the ComboBoxItem to indicate whether we should use the &amp;#010 current typed-in value as part of the filter criteria returned by &amp;#010 ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.  You can check this flag in order to&amp;#010 mimic the ComboBoxItem's default behavior if you provide a custom implementation of&amp;#010 &lt;code&gt;getPickListFilterCriteria()&lt;/code&gt;." name="filterWithValue" valueType="boolean" defaultValue="varies" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="classAttr:RPCManager.defaultPrompt" flags="IRW" description="If showPrompt is enabled for a given transaction, this is the defaultPrompt to be shown&amp;#010 to the user in a modal dialog while the transaction occurs.&amp;#010 May be overridden at the request level via ${isc.DocUtils.linkForRef('attr:RPCRequest.prompt')}.&lt;br&gt;&amp;#010 More targetted default prompts are also supported for certain code-paths. See the following &amp;#010 set of properties for details:&lt;ul&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('classAttr:RPCManager.removeDataPrompt')}&lt;/li&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('classAttr:RPCManager.saveDataPrompt')}&lt;/li&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('classAttr:RPCManager.fetchDataPrompt')}&lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="defaultPrompt" valueType="string" defaultValue="&quot;Contacting Server...&quot;" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="classAttr:RPCManager.showPrompt">
</seeAlso>
<seeAlso ref="classAttr:RPCManager.promptStyle">
</seeAlso>
<seeAlso ref="classAttr:RPCManager.promptCursor">
</seeAlso>
<seeAlso ref="attr:RPCRequest.showPrompt">
</seeAlso>
<seeAlso ref="attr:RPCRequest.prompt">
</seeAlso>
<seeAlso ref="attr:RPCRequest.promptStyle">
</seeAlso>
<seeAlso ref="attr:RPCRequest.promptCursor">
</seeAlso>
    <groups>rpcPrompt</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="group:mouseEvents" name="mouseEvents" type="group">
    <refs>classMethod:EventHandler.getTarget</refs>
    <refs>classMethod:EventHandler.getDragTarget</refs>
    <refs>classMethod:EventHandler.getX</refs>
    <refs>classMethod:EventHandler.getY</refs>
    <refs>classMethod:EventHandler.leftButtonDown</refs>
    <refs>classMethod:EventHandler.rightButtonDown</refs>
</docItem>
<docItem ref="attr:Splitbar.vSrc" flags="IR" description="Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true and &amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset." name="vSrc" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Splitbar">
<seeAlso ref="attr:StretchImg.src">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:StatefulCanvas.deselect" flags="" description=" Deselect this object.&amp;#010" name="deselect" type="method" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectFacetValue" flags="" description="&amp;#010  deselect the header for a given facet value&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectFacetValue" type="method" definingClass="class:CubeGrid">
<params description="ID of facet" optional="false" name="facetId" type="string">
</params>
<params description="ID of facetValue to select" optional="false" name="facetValueId" type="string">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:TabSet.tabIconClick" flags="" description=" Method fired when the user clicks the icon for a tab, as specified via ${isc.DocUtils.linkForRef('attr:Tab.icon')}.&lt;br&gt;&amp;#010 Default behavior will fire &lt;code&gt;icon.click()&lt;/code&gt; if specified, with a single parameter &quot;tab&quot;.&amp;#010" name="tabIconClick" type="method" definingClass="class:TabSet">
<params description="with click handler being fired" optional="false" name="tab" type="Tab">
</params>
</docItem>
<docItem ref="attr:TextAreaItem.height" flags="IRW" description="default height of this item" name="height" valueType="number" defaultValue="100" type="attr" definingClass="class:TextAreaItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:GridRenderer.setColumnWidths" flags="" description="&amp;#010 Sets the width of all columns in the grid.&amp;#010&amp;#010" name="setColumnWidths" type="method" definingClass="class:GridRenderer">
<params description="array of new widths - one for each column." optional="false" name="newWidths" type="Array">
</params>
</docItem>
<docItem ref="attr:RichTextItem.startRow" flags="IRW" description="By default RichTextItems take up an entire row" name="startRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RichTextItem">
</docItem>
<docItem ref="attr:DataSource.inheritsFrom" flags="IR" description="ID of another DataSource this DataSource inherits its ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from.&amp;#010 &lt;P&gt;&amp;#010 Local fields (fields defined in this DataSource) are added to inherited fields &amp;#010 to form the full set of fields.  Fields with the same name are merged in the same way&amp;#010 that ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','databound component fields')} are merged with&amp;#010 DataSource fields.&amp;#010 &lt;P&gt;&amp;#010 The default order of the combined fields is new local fields first (including any fields&amp;#010 present in the parent DataSource which the local DataSource re-declares), then parent&amp;#010 fields.  You can set ${isc.DocUtils.linkForRef('attr:DataSource.useParentFieldOrder')} to instead use the parent's field&amp;#010 order, with new local fields appearing last.  You can set ${isc.DocUtils.linkForRef('attr:DataSource.showLocalFieldsOnly')} to&amp;#010 have all non-local fields hidden.&amp;#010 &lt;P&gt;&amp;#010 Note that &lt;b&gt;only fields are inherited&lt;/b&gt; - other properties such as dataURL and&amp;#010 dataFormat are not.&amp;#010 &lt;P&gt;&amp;#010 This feature can be used for:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;creating a customized view (eg, only certain fields shown) which will be used by&amp;#010 multiple ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')}.&amp;#010 &lt;li&gt;adding presentation-specific attributes to metadata that has been automatically&amp;#010 derived from ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','XML Schema')} or other metadata formats&amp;#010 &lt;li&gt;modelling object subclassing and extension in server-side code and storage systems&amp;#010 &lt;li&gt;modelling relational database joins, and the equivalents in other systems&amp;#010 &lt;li&gt;creating hooks for others to customize your application in a maintainable way.  For&amp;#010 example, if you have a dataSource &quot;employee&quot;, you can create a dataSource&amp;#010 &quot;customizedEmployee&quot; which inherits from &quot;employee&quot; but does not initially define any&amp;#010 fields, and bind all ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')} to&amp;#010 &quot;customizedEmployee&quot;.  Customizations of fields (including appearance changes, field&amp;#010 order, new fields, hiding of fields, and custom validation rules) can be added to&amp;#010 &quot;customizedEmployee&quot;, so that they are kept separtely from the original field data and&amp;#010 have the best possible chance of working with future versions of the &quot;employee&quot;&amp;#010 dataSource.&amp;#010 &lt;/ul&gt;" name="inheritsFrom" valueType="DataSource ID" defaultValue="null" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('schemaChaining')}</examples>
    <groups>fields</groups>
</docItem>
<docItem ref="attr:FacetValue.isMinimizeValue" flags="IR" description="Used to determine which facetValue is to be shown when the facet is minimized.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('attr:CubeGrid.canMinimizeFacets')}." name="isMinimizeValue" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="method:DynamicForm.saveData" flags="" description="&amp;#010 Validate and then save the form's current values to the ${isc.DocUtils.linkForRef('class:DataSource')} this form is&amp;#010 bound to.&amp;#010 &lt;p&gt;&amp;#010 If client-side validators are defined, they are executed first, and if any errors are&amp;#010 found the save is aborted and the form will show the errors.&amp;#010 &lt;p&gt;&amp;#010 If client-side validation passes, a ${isc.DocUtils.linkForRef('class:DSRequest')} will be sent, exactly as though&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.addData')} or ${isc.DocUtils.linkForRef('method:DataSource.updateData')} had been called with &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','the form's values')} as data.  The&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')} will be either &quot;update&quot; or &quot;add&quot; depending&amp;#010 on whether values were initially provided via &lt;code&gt;editRecord()&lt;/code&gt; or&amp;#010 &lt;code&gt;editNew()&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 On either a client-side or server-side validation failure, validation errors will be&amp;#010 displayed in the form.  Visible items within a DynamicForms will be redrawn to display&amp;#010 errors. Validation failure occuring on hidden items, or DataSource fields with no &amp;#010 associated form items may be handled via ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}&amp;#010 or ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.validationURL','validationURL')} can be set to do validation against a&amp;#010 different URL from where the form will ultimately save, as part of an incremental&amp;#010 upgrade strategy for Struts and Struts-like applications.&amp;#010&amp;#010" name="saveData" type="method" definingClass="class:DynamicForm">
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('addOperation')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:SectionStack.setSectionTitle" flags="" description=" Changes the title of a SectionHeader.&amp;#010&amp;#010" name="setSectionTitle" type="method" definingClass="class:SectionStack">
<params description="ID or index of the section whose title you want to change" optional="false" name="section" type="String or Number">
</params>
<params description="new title for the SectionHeader" optional="false" name="newTitle" type="String">
</params>
</docItem>
<docItem ref="attr:ServerObject.lookupStyle" flags="IR" description="Specifies the mechanism for locating the class instance on which to invoke the method.&amp;#010 Valid values are as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&quot;spring&quot;: For use with the &lt;a href='http://springframework.com' onclick=&quot;window.open('http://springframework.com');return false;&quot;&gt;Spring framework&lt;/a&gt;.&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.bean')} contains the name of the bean to invoke.  Which application context&amp;#010 is used can be configured via web.xml (see the example web.xml in the SDK).&amp;#010 &lt;li&gt;&quot;new&quot;: A new instance of the class specified by ${isc.DocUtils.linkForRef('attr:ServerObject.className')} will be&amp;#010 created and the DMI method will be invoked on that instance (unless the specified method is&amp;#010 static, in which case no instance is created, but the class specified by&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.className')} is still used).&amp;#010 &lt;li&gt;&quot;factory&quot;: A custom factory provides the class instance on which the DMI method is to be&amp;#010 invoked.  In this case, ${isc.DocUtils.linkForRef('attr:ServerObject.className')} specifies the className of the factory&amp;#010 that will provide the instance on which the DMI method is to be invoked.  The class&amp;#010 specified by ${isc.DocUtils.linkForRef('attr:ServerObject.className')} must provide exactly one method named&amp;#010 &lt;code&gt;create&lt;/code&gt; that must return the class instance on which you wish the DMI method to&amp;#010 be invoked.  Like the DMI methods, the &lt;code&gt;create&lt;/code&gt; can request a standard set of&amp;#010 values as arguments.  See ${isc.DocUtils.linkForRef('class:DMI')} for a list of available values.&amp;#010 &lt;li&gt; &quot;attribute&quot;: The instance on which the DMI method is to be invoked is looked up in the&amp;#010 scope defined by ${isc.DocUtils.linkForRef('attr:ServerObject.attributeScope')} via the attribute name specified in&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.attributeName')}.&amp;#010 &lt;/ul&gt;" name="lookupStyle" valueType="&quot;new&quot;|&quot;factory&quot;|&quot;attribute&quot;|&quot;spring&quot;" defaultValue="&quot;new&quot;" type="attr" definingClass="class:ServerObject">
<seeAlso ref="attr:ServerObject.className">
</seeAlso>
<seeAlso ref="attr:ServerObject.attributeName">
</seeAlso>
<seeAlso ref="attr:ServerObject.attributeScope">
</seeAlso>
</docItem>
<docItem ref="attr:RPCRequest.httpHeaders" flags="IRW" description="HTTP headers to send, as a Object mapping Header name -&gt; Header value, eg&lt;br&gt;&amp;#010 { &quot;Content-Type&quot; : &quot;text/xml&quot; }&amp;#010 &lt;P&gt;&amp;#010 Valid with the xmlHttpRequest ${isc.DocUtils.linkForRef('attr:RPCRequest.transport','transport')} only." name="httpHeaders" valueType="Object" defaultValue="null" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="attr:ListGridField.validators" flags="IRW" description="Array of ${isc.DocUtils.linkForRef('class:Validator')} objects for this field.  When the user edits cells in&amp;#010 this field, these validators will be applied to the edited value.&lt;br&gt;&amp;#010 Note: for databound listGrids, this property may be specified on the &amp;#010 ${isc.DocUtils.linkForRef('class:DataSourceField')}, enabling both client and server side validation." name="validators" valueType="array of Validator" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="class:Validator">
</seeAlso>
<seeAlso ref="attr:ListGridField.required">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dataValidation')}</examples>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="method:ListGrid.cellContextClick" flags="" description=" Called when a cell receives a contextclick event.&amp;#010&amp;#010" name="cellContextClick" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('cellClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="group:eclipseIntegration" title="Eclipse Integration" description="If you're developing with Eclipse, you can use the SmartClient personality for Eclipse ATF&amp;#010    (&lt;a href='http://eclipse.org/atf' onclick=&quot;window.open('http://eclipse.org/atf');return false;&quot;&gt;Ajax Toolkit Framework&lt;/a&gt;).  Here's how to set it up:&amp;#010    &lt;p&gt;&amp;#010    1. If you haven't already, download and install ATF from &amp;#010      &lt;a href='http://www.eclipse.org/atf/downloads/index.php' onclick=&quot;window.open('http://www.eclipse.org/atf/downloads/index.php');return false;&quot;&gt;http://www.eclipse.org/atf/downloads/index.php&lt;/a&gt;.&amp;#010      The SmartClient personality has been tested against the ATF 0.1 Milestone Build, but is&amp;#010      also known to work with later releases.&lt;p&gt;&amp;#010    2. Download the SmartClient personality: &amp;#010        &lt;a href='http://smartclient.com/product/SmartClient_ATF_Personality_1.0.zip' onclick=&quot;window.open('http://smartclient.com/product/SmartClient_ATF_Personality_1.0.zip');return false;&quot;&gt;SmartClient_ATF_Personality_1.0.zip&lt;/a&gt;&lt;p&gt;&amp;#010    3. Unzip the above archive into your eclipse installation directory.  This will create&amp;#010    three directories under the plugins directory: &lt;i&gt;com.smartClient.core_1.0.0,&amp;#010    com.smartClient.runtime_1.0.0, com.smartClient.ui_1.0.0&lt;/i&gt;.&lt;p&gt;&amp;#010    4. For the next step, you will need to have downloaded and unzipped a copy of the&amp;#010    SmartClient Evaluation SDK, available from&amp;#010    &lt;a href='http://smartclient.com/product/download.jsp' onclick=&quot;window.open('http://smartclient.com/product/download.jsp');return false;&quot;&gt;http://smartclient.com/product/download.jsp&lt;/a&gt;.  You can of course also use&amp;#010    any other licensed copy of SmartClient.  From the SDK, copy the &lt;i&gt;isomorphic&lt;/i&gt;&amp;#010    directory from smartclientRuntime into the&amp;#010    &lt;i&gt;eclipse/plugins/com.smartClient.runtime_1.0.0/resources&lt;/i&gt; directory.&amp;#010    &lt;p&gt;&amp;#010    You're all set.  When you next start Eclipse, you'll be able to select ATF-&gt;SmartClient as&amp;#010    a new Project Facet during project creation or add it as a facet to an existing project.&amp;#010    You can then create new SmartClient Applications by right-clicking on your project and&amp;#010    selecting New-&gt;Other-&gt;SmartClient-&gt;SmartClient Application.  And you'll be able to use the&amp;#010    provided snippets to quickly create components.  If you have any problems, please post to&amp;#010    the &lt;a href='http://forums.smartclient.com' onclick=&quot;window.open('http://forums.smartclient.com');return false;&quot;&gt;forums&lt;/a&gt;." name="eclipseIntegration" type="group">
</docItem>
<docItem ref="method:CubeGrid.disableHilite" flags="" description="&amp;#010      disable a hilite&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="disableHilite" type="method" definingClass="class:CubeGrid">
<params description="ID of hilite to disable" optional="false" name="hiliteID" type="string">
</params>
    <groups>hiliting</groups>
</docItem>
<docItem ref="method:SectionItem.expandSection" flags="" description=" Expands a section, showing all the items contained within the section.&amp;#010" name="expandSection" type="method" definingClass="class:SectionItem">
</docItem>
<docItem ref="attr:DynamicForm.saveOnEnter" flags="IRW" description="If &lt;code&gt;true&lt;/code&gt;, when the user hits the Enter key while focussed in a text-item in&amp;#010 this form, we automatically submit the form to the server using the &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} method." name="saveOnEnter" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="type:XMLElement" description="An XMLElement represents one complete XML tag, including any subelements contained between&amp;#010 the start and end tags.&amp;#010 &lt;P&gt;&amp;#010 XMLElement is a native object supplied directly by the browser.  The SmartClient-supported&amp;#010 interfaces for this object include methods that take an XMLElement as an argument (such as&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}).  If you want to retrieve XML data and display it in a&amp;#010 SmartClient component, read about ${isc.DocUtils.linkForRef('group:clientDataIntegration','XML Data Binding')}.  To&amp;#010 extract data as JavaScript Objects from XML, see ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  Direct&amp;#010 manipulation of XMLElements objects is subject to cross-browser inconsistencies, bugs,&amp;#010 memory leaks and performance issues." name="XMLElement" type="type">
</docItem>
<docItem ref="attr:DataSourceField.rootValue" flags="IR" description="For a field that is a foreignKey establishing a tree relationship, what value indicates a&amp;#010 root-level node.  Defaults to null." name="rootValue" valueType="any" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <examples>${isc.DocUtils.linkForExampleId('treeLoadXML')}</examples>
    <groups>dataSourceRelations</groups>
</docItem>
<docItem ref="attr:Canvas.canDrop" flags="IRWA" description="Indicates that this object can be dropped on top of other widgets. Only valid if &amp;#010      canDrag or canDragReposition is true." name="canDrop" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classMethod:Page.goBack" flags="" description=" Go back in the browser's history.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 If the history is empty and the window.opener is set, we assume we're a child window and just&amp;#010 close the window.&amp;#010&amp;#010" name="goBack" type="classMethod" definingClass="class:Page">
</docItem>
<docItem ref="attr:ListGrid.showEmptyMessage" flags="IRW" description="Indicates whether the text of the emptyMessage property should be displayed if no data is&amp;#010 available." name="showEmptyMessage" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.emptyMessage">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('emptyGrid')}</examples>
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="class:DSResponse" description="Response sent by the server in response to a ${isc.DocUtils.linkForRef('class:DSRequest','DataSource request')}.  Contains&amp;#010 all the properties available on the basic ${isc.DocUtils.linkForRef('class:RPCResponse')}, in addition to the&amp;#010 properties listed here." name="DSResponse" type="class">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:DSResponse.clientContext</attrs>
    <attrs>attr:DSResponse.data</attrs>
    <attrs>attr:DSResponse.status</attrs>
    <attrs>attr:DSResponse.errors</attrs>
    <attrs>attr:DSResponse.startRow</attrs>
    <attrs>attr:DSResponse.endRow</attrs>
    <attrs>attr:DSResponse.totalRows</attrs>
    <attrs>attr:DSResponse.invalidateCache</attrs>
</docItem>
<docItem ref="group:dataType" name="dataType" type="group">
    <refs>attr:DataSourceField.required</refs>
    <refs>attr:DataSourceField.valueMap</refs>
    <refs>attr:DataSourceField.validators</refs>
    <refs>attr:DataSourceField.length</refs>
    <refs>attr:SimpleType.valueMap</refs>
</docItem>
<docItem ref="attr:TabSet.rightEdgeSizes" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeSizes&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeSizes&lt;/code&gt;, &lt;code&gt;topEdgeSizes&lt;/code&gt; and &lt;code&gt;bottomEdgeSizes&lt;/code&gt; &amp;#010 propertes allow the sizes of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="rightEdgeSizes" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:MenuButton.title" flags="IRW" description="Default title for the button." name="title" valueType="string" defaultValue="&quot;Show Menu&quot;" type="attr" definingClass="class:MenuButton">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="group:defaults" name="defaults" type="group">
</docItem>
<docItem ref="method:ActiveXControl.getPluginHandle" flags="" description="  Returns a handle to the element for this ISC ActiveX control object.&amp;#010&amp;#010" name="getPluginHandle" type="method" definingClass="class:ActiveXControl">
</docItem>
<docItem ref="classMethod:Page.getAppDir" flags="" description=" Returns the base URL of the application, which is the page URL minus the last non-directory &amp;#010 path component.  For example, if the page is loaded from&amp;#010 &lt;code&gt;http://foo.com/bar/zoo.jsp&lt;/code&gt;, appDir will be &lt;code&gt;http://foo.com/bar/&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 If other page-wide URLs such as ${isc.DocUtils.linkForRef('classMethod:Page.setIsomorphicDir')} are specified as&amp;#010 relative paths, they are considered relative to this URL.&amp;#010&amp;#010" name="getAppDir" type="classMethod" definingClass="class:Page">
<returns description="URL for page-specific files." type="string"></returns>
    <groups>files</groups>
</docItem>
<docItem ref="attr:Layout.members" flags="IRW" description="An array of canvases that will be contained within this layout. You can set the&amp;#010 following properties on these canvases (in addition to the standard component&amp;#010 properties):&amp;#010 &lt;ul&gt;&amp;#010  &lt;li&gt;layoutAlign--specifies the member's alignment along the breadth axis; valid&amp;#010  values are &quot;top&quot;, &quot;center&quot; and &quot;bottom&quot; for a horizontal layout and &quot;left&quot;, &quot;center&quot;&amp;#010  and &quot;right&quot; for a vertical layout (see ${isc.DocUtils.linkForRef('attr:Layout.defaultLayoutAlign')} for default&amp;#010  implementation.)&amp;#010  &lt;li&gt;showResizeBar--set to true to show a resize bar (default is false)&amp;#010 &lt;/ul&gt;&amp;#010 Height and width settings found on members are interpreted by the Layout according to&amp;#010 the ${isc.DocUtils.linkForRef('attr:Layout.vPolicy','layout policy')}." name="members" valueType="array" defaultValue="null" type="attr" definingClass="class:Layout">
    <getter>getMembers</getter>
</docItem>
<docItem ref="attr:ListGridRecord.canAcceptDrop" flags="IR" description="When set to &lt;code&gt;false&lt;/code&gt;, other records cannot be dropped on (i.e., inserted&amp;#010 via drag and drop) immediately before this record." name="canAcceptDrop" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
</docItem>
<docItem ref="attr:TreeGrid.animateFolderSpeed" flags="IRW" description="When animating folder opening / closing, this property designates the speed of the&amp;#010 animation in pixels shown (or hidden) per second. Takes presidence over the &amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.animateFolderTime')} property, which allows the developer to specify a&amp;#010 duration for the animation rather than a speed." name="animateFolderSpeed" valueType="number" defaultValue="500" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.animateFolderTime">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('animateTree')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="method:ListGrid.resizeField" flags="A" description=" Resize a particular field to a new width.&amp;#010&amp;#010" name="resizeField" type="method" definingClass="class:ListGrid">
<params description="Number of the field to resize" optional="false" name="fieldNum" type="number">
</params>
<params description="New width of the field" optional="false" name="newWidth" type="number">
</params>
</docItem>
<docItem ref="attr:Flashlet.classID" flags="IR" description="This attribute specifies the clsid of the outer &amp;lt;object&amp;gt; tag.&amp;#010  &lt;p&gt;&amp;#010  The default classID is: &quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot;&amp;#010  &lt;p&gt;" name="classID" valueType="string" defaultValue="see below" type="attr" definingClass="class:Flashlet">
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_LOGIN_REQUIRED" flags="R" description="Indicates that a login is required before this RPCRequest can proceed." name="STATUS_LOGIN_REQUIRED" valueType="integer" defaultValue="-7" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="attr:DataSourceField.inapplicable" flags="IR" description="For use in ${isc.DocUtils.linkForRef('group:componentSchema')}, a field ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom','inherited')} from&amp;#010 another schema can be redeclared with this property set in order to indicate that the&amp;#010 property should not be used.&amp;#010 &lt;P&gt;&amp;#010 This is primarily used to influence ${isc.DocUtils.linkForRef('group:visualBuilder')}.  For simple type properties,&amp;#010 this avoids the property appearing in the Component Editor.  &amp;#010 &lt;P&gt;&amp;#010 For fields that hold subcomponents, this prevents inappropriate drag and drop.  For example,&amp;#010 a custom class called &lt;code&gt;MyDialog&lt;/code&gt; may automatically create a series of children,&amp;#010 and not allow arbitrary other children to be added.  In this case, the inherited property&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.children')} should be marked inapplicable in order to prevent arbitrary&amp;#010 components being dropped onto a &lt;code&gt;MyDialog&lt;/code&gt; instance." name="inapplicable" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentSchema</groups>
</docItem>
<docItem ref="group:title" name="title" type="group">
    <refs>attr:FormItem.showTitle</refs>
    <refs>attr:FormItem.titleOrientation</refs>
    <refs>attr:FormItem.titleAlign</refs>
    <refs>attr:FormItem.wrapTitle</refs>
    <refs>attr:FormItem.titleStyle</refs>
    <refs>attr:FormItem.titleClassName</refs>
    <refs>attr:FormItem.titleErrorClassName</refs>
</docItem>
<docItem ref="classMethod:RPCManager.xmlHttpRequestAvailable" flags="" description="&amp;#010 Returns true if the XMLHttpRequest object is available, false otherwise.  See&amp;#010 ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information on when XMLHttpRequest parser may&amp;#010 not available and what features are&amp;#010 impacted as a result.&amp;#010&amp;#010" name="xmlHttpRequestAvailable" type="classMethod" definingClass="class:RPCManager">
<returns description="true if XMLHttpRequest is available, false otherwise." type="boolean"></returns>
</docItem>
<docItem ref="method:CubeGrid.removeFacet" flags="" description="&amp;#010 Remove a facet from the current view, using a fixed value from that facet.  For example, remove&amp;#010 the &quot;months&quot; facet from the view, collapsing to just January, or total for all months.&amp;#010&amp;#010" name="removeFacet" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.addFacet">
</seeAlso>
<seeAlso ref="attr:CubeGrid.fixedFacetValues">
</seeAlso>
<params description="facetId to remove" optional="false" name="facetId" type="id">
</params>
<params description="New fixed value for the facet, to be added to cubeGrid.fixedFacetValues.  Default is the&amp;#010     rollup value for the facet." optional="true" name="fixedFacetValueId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="type:clickMaskMode" description="Passed as a parameter to ${isc.DocUtils.linkForRef('method:Canvas.showClickMask')} to determine the masks behavior&amp;#010 when clicked." name="clickMaskMode" type="type">
<values description="When the mask recieves a click, it will fire its click action,                   and cancel the event, leaving the clickMask up." value="&quot;hard&quot;"></values>
<values description="When the mask recieves a click, it will fire its click action,                   then dismiss the clickMask and allow the event to proceed to its target." value="&quot;soft&quot;"></values>
    <groups>clickMask</groups>
</docItem>
<docItem ref="attr:WSRequest.data" flags="IR" description="Data to be serialized to XML to form the SOAP body." name="data" valueType="any" defaultValue="null" type="attr" definingClass="class:WSRequest">
</docItem>
<docItem ref="type:Encoding" description="Form encodying types - these translate to Form ENCTYPE parameters." name="Encoding" type="type">
<values description="normal form encoding (&quot;application/x-www-form-urlencoded&quot;)" value="DynamicForm.NORMAL"></values>
<values description="form encoding for forms with INPUT file elements, that is, forms                              that upload files (&quot;multipart/form-data&quot;)" value="DynamicForm.MULTIPART"></values>
    <groups>submitting</groups>
</docItem>
<docItem ref="attr:Canvas.accessKey" flags="IRWA" description="If specified this governs the accessKey for the widget.&amp;#010 This should be set to a character - when a user hits Alt+[accessKey], or in Mozilla&amp;#010 Firefox 2.0 and above, Shift+Alt+[accessKey], focus will be given to the widget in&amp;#010 question." name="accessKey" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setAccessKey</setter>
    <groups>focus</groups>
</docItem>
<docItem ref="method:ListGrid.getRowErrors" flags="" description="  Returns any currently stored validation errors for this row in the following format:&lt;br&gt;&amp;#010  &amp;nbsp;&amp;nbsp;&lt;code&gt;{fieldName:[array of error messages], ...}&lt;/code&gt;&amp;#010" name="getRowErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellErrors">
</seeAlso>
<params description="index of row to check for validation errors." optional="false" name="rowNum" type="number">
</params>
<returns description="object showing validation error arrays by field for the row passed in                       - if no validation errors stored for the row, null is returned." type="object"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:DataBoundComponent.showComplexFields" flags="IRWA" description="Whether to show fields of of non-atomic type when when a DataBoundComponent is given a&amp;#010 DataSource but no &lt;code&gt;component.fields&lt;/code&gt;.&amp;#010 &lt;p&gt;&amp;#010 If true, the component will show fields that declare a complex type, for example, a&amp;#010 field 'shippingAddress' that declares type 'Address', where 'Address' is the ID of a&amp;#010 DataSource that declares the fields of a shipping address (city, street name, etc).&amp;#010 &lt;P&gt;&amp;#010 Such fields may need custom formatters or editors in order to create a usable interface,&amp;#010 for example, an Address field in a ListGrid might use a custom formatter to combine the&amp;#010 relevant fields of an address into one column, and might use a pop-up dialog for&amp;#010 editing." name="showComplexFields" valueType="boolean" defaultValue="true" type="attr" definingClass="interface:DataBoundComponent">
    <groups>databinding</groups>
</docItem>
<docItem ref="method:PickList.getValueFieldName" flags="" description=" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.&amp;#010 If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.&amp;#010" name="getValueFieldName" type="method" definingClass="interface:PickList">
<returns description="fieldName to use a &quot;value field&quot; in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}" type="string"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="method:SelectItem.defaultDynamicValue" flags="A" description=" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:SelectItem.defaultValue')} when no value is&amp;#010 provided for this item. To default to the first option use&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} instead.&amp;#010" name="defaultDynamicValue" type="method" definingClass="class:SelectItem">
</docItem>
<docItem ref="method:DynamicForm.setAction" flags="" description=" Sets the ${isc.DocUtils.linkForRef('attr:DynamicForm.action','action')} for this form.&amp;#010" name="setAction" type="method" definingClass="class:DynamicForm">
<params description="New action URL" optional="false" name="action" type="URL">
</params>
</docItem>
<docItem ref="method:ListGrid.chartColumn" flags="" description=" Chart a single column of data, with each cell value labelled by a value from another&amp;#010 column.&amp;#010&amp;#010" name="chartColumn" type="method" definingClass="class:ListGrid">
<params description="name of the ListGridField to use as a data" optional="false" name="dataColumn" type="String">
</params>
<params description="name of the ListGridField to use as labels for data" optional="false" name="labelColumn" type="String">
</params>
<params description="properties to pass to the created chart" optional="true" name="chartProperties" type="Chart Properties">
</params>
<returns description="created Chart instance" type="Chart"></returns>
</docItem>
<docItem ref="attr:ListGrid.isSeparatorProperty" flags="IRW" description="If &lt;code&gt;record[this.isSeparatorProperty]&lt;/code&gt; is set for some record, the &amp;#010 record will be displayed as a simple separator row." name="isSeparatorProperty" valueType="string" defaultValue="&quot;isSeparator&quot;" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="method:Number.stringify" flags="" description="&amp;#010 Return this number as a string padded out to digits length.&amp;#010&amp;#010" name="stringify" type="method" definingClass="object:Number">
<params description="Number of digits to pad to.  (Default is 2)" optional="true" name="digits" defaultValue="2" type="number"></params>
<returns description="Padded string version of the number" type="string"></returns>
    <examples>var str = myNumberVar.stringify(2);</examples>
    <groups>stringProcessing</groups>
</docItem>
<docItem ref="attr:TreeGrid.customIconProperty" flags="IRW" description="This property allows the developer to customize the icon displayed next to a node.&amp;#010 Set &lt;code&gt;node[grid.customIconProperty]&lt;/code&gt; to the URL of the desired icon to display and&amp;#010 it will be shown instead of the standard ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')} for this row.&lt;br&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:TreeGrid.showCustomIconOpen')} and/or ${isc.DocUtils.linkForRef('attr:TreeGrid.showCustomIconDrop')} &amp;#010 is true for this grid, customized icons for folder nodes will be appended with the &amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} or ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} suffixes on state change &amp;#010 as with the standard ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for this treeGrid.  Also note that for&amp;#010 custom folder icons, the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} will never be appened." name="customIconProperty" valueType="String" defaultValue="&quot;icon&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="method:Img.setSrc" flags="" description=" Changes the URL of this image and redraws it.&amp;#010 &lt;P&gt;&amp;#010 Does nothing if the src has not changed - if &lt;code&gt;src&lt;/code&gt; has not changed but other&amp;#010 state has changed such that the image needs updating, call ${isc.DocUtils.linkForRef('method:Img.resetSrc')} instead.&amp;#010&amp;#010" name="setSrc" type="method" definingClass="class:Img">
<params description="new URL for the image" optional="false" name="URL" type="URL">
</params>
    <examples>${isc.DocUtils.linkForExampleId('loadImages')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.align" flags="IRW" description="Alignment of this item in its cell" name="align" valueType="Alignment" defaultValue="Canvas.LEFT" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:FormItem.change" flags="" description=" Called when a FormItem's value is about to change as the result of user interaction.  This&amp;#010 method fires after the user performed an action that would change the value of this field,&amp;#010 but before the element itself is changed.  Returning false cancels the change.&amp;#010 &lt;p&gt;&amp;#010 Note that if you ask the form for the current value in this handler, you will get the old&amp;#010 value because the change has not yet been commited.  The new value is available as a&amp;#010 parameter to this method.&amp;#010&amp;#010" name="change" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
<params description="The new value of the form item" optional="false" name="value" type="any">
</params>
<params description="The previous value of the form item" optional="false" name="oldValue" type="any">
</params>
<returns description="In your handler, return false to cancel the change, true to allow the change" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('fieldEnableDisable')}</examples>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="method:Tree.openAll" flags="" description="&amp;#010 Open all nodes under a particular node.&amp;#010&amp;#010" name="openAll" type="method" definingClass="class:Tree">
<params description="node from which to open folders (if not specified, the root                              node is used)" optional="true" name="node" type="TreeNode">
</params>
    <examples>${isc.DocUtils.linkForExampleId('parentLinking')}</examples>
</docItem>
<docItem ref="attr:BlurbItem.clipValue" flags="IRW" description="If true, text that exceeds the specified size of the form item will be clipped" name="clipValue" valueType="boolean" defaultValue="false" type="attr" definingClass="class:BlurbItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Dialog.closeClick" flags="" description=" Handles a click on the close button of this window. The default implementation&amp;#010 hides the window and returns false to cancel bubbling.  Override this method if you want&amp;#010 other actions to be taken.&amp;#010" name="closeClick" type="method" definingClass="class:Dialog">
    <groups>buttons</groups>
</docItem>
<docItem ref="attr:Canvas.disabledCursor" flags="IRWA" description="Specifies the cursor image to display when the mouse pointer is&amp;#010      over this widget if this widget is disabled. It corresponds to the CSS cursor &amp;#010      attribute. See Cursor type for different cursors." name="disabledCursor" valueType="Cursor" defaultValue="Canvas.DEFAULT" type="attr" definingClass="class:Canvas">
    <groups>cues</groups>
</docItem>
<docItem ref="group:CompoundFormItem_skinning" description="When skinning basic FormItems like SelectItem and TextItem, consider that compound form&amp;#010 items like DateItem and ComboBox reuse simpler items like SelectItem and TextItem, so adding&amp;#010 a border to SelectItem would also apply a border to each select item within DateItem.&lt;br&gt;&amp;#010 To avoid such side-effects, if you want to add styling to all SelectItems used in your &amp;#010 application, you can create an application-specific subclass like MySelectItem and apply &amp;#010 properties there.&lt;br&gt;" name="CompoundFormItem_skinning" type="group">
</docItem>
<docItem ref="attr:DynamicForm.showErrorIcons" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorIcons" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeShorterThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;lengthRange&lt;/code&gt; type validator&amp;#010 returns false becaues the value passed in has more than &lt;code&gt;validator.max&lt;/code&gt; characters.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeShorterThan" valueType="string" defaultValue="&quot;Must be less than ${max} characters&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Array.sortByProperty" flags="" description=" Sort a list of objects by a given property of each item.&amp;#010 &lt;P&gt;&amp;#010 The optional normalizer, if passed as a function, is called for each item in the List, and&amp;#010 should return whatever value should be used for sorting, which does not have to agree with&amp;#010 the property value. By passing a normalizer function you can achieve any kind of sorting&amp;#010 you'd like, including sorting by multiple properties.&amp;#010 &lt;P&gt;&amp;#010 NOTE: string sort is case INsensitive by default&amp;#010&amp;#010" name="sortByProperty" type="method" definingClass="object:Array">
<params description="name of the property to sort by" optional="false" name="property" type="string">
</params>
<params description="true == sort ascending, false == sort descending" optional="false" name="up" type="boolean">
</params>
<params description="May be specified as a function, with signature &amp;#010              &lt;code&gt;normalize(item, propertyName, context)&lt;/code&gt;, where &lt;code&gt;item&lt;/code&gt; is&amp;#010              a pointer to the item in the array, &lt;code&gt;propertyName&lt;/code&gt; is the &amp;#010              property by which the array is being sorted, and &lt;code&gt;context&lt;/code&gt; is the&amp;#010              arbitrary context passed into this method. Normalizer function should return&amp;#010              the value normalized for sorting.&lt;br&gt;&amp;#010              May also be specified as a ValueMap which maps property values to sortable values." optional="true" name="normalizer" type="function or ValueMap">
</params>
<params description="Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function" optional="true" name="context" type="any">
</params>
<returns description="the list itself" type="List"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="type:DragDataAction" description="What do we do with data that's been dropped into another list?" name="DragDataAction" type="type">
<values description="Don't do anything, resulting in the same data being in both lists." value="&quot;none&quot;"></values>
<values description="Copy the data leaving the original in our list." value="ListGrid.COPY"></values>
<values description="Remove the data from this list so it can be moved into the other list." value="ListGrid.MOVE"></values>
    <groups>drag</groups>
</docItem>
<docItem ref="method:ResultSet.invalidateCache" flags="A" description=" Manually invalidate this ResultSet's cache.&amp;#010 &lt;P&gt;&amp;#010 Generally a ResultSet will observe and incorporate updates to the DataSource that provides it's&amp;#010 records, but when this is not possible, &lt;code&gt;invalidateCache()&lt;/code&gt; allows manual cache&amp;#010 invalidation.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;invalidateCache()&lt;/code&gt; fires &lt;code&gt;dataChanged()&lt;/code&gt;, which may cause components which&amp;#010 as using this ResultSet to request new data for display, triggering server fetches.&amp;#010" name="invalidateCache" type="method" definingClass="class:ResultSet">
</docItem>
<docItem ref="method:Menu.showContextMenu" flags="" description=" Show this menu as a context menu, that is, immediately adjacent to the current mouse position.&amp;#010&amp;#010" name="showContextMenu" type="method" definingClass="class:Menu">
<returns description="false == stop processing this event" type="boolean"></returns>
    <groups>visibility</groups>
</docItem>
<docItem ref="attr:Window.hiliteHeaderSrc" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Window.showHeaderBackground')} is true, this governs the URL of the image to &amp;#010 use in the header's highlighted state when the window is ${isc.DocUtils.linkForRef('method:Window.flash','flashed')}" name="hiliteHeaderSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]Window/headerGradient_hilite.gif&quot; | null" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:GridRenderer.showHover" flags="RW" description="If true, and canHover is also true, when the user hovers over a cell, hover text will pop up&amp;#010 next to the mouse.  The contents of the hover is determined by ${isc.DocUtils.linkForRef('method:GridRenderer.cellHoverHTML')}." name="showHover" valueType="boolean" defaultValue="null" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.canHover">
</seeAlso>
<seeAlso ref="method:GridRenderer.cellHoverHTML">
</seeAlso>
    <groups>events</groups>
</docItem>
<docItem ref="method:GridRenderer.cellContextClick" flags="A" description=" Called when a cell receives a contextclick event.&amp;#010&amp;#010" name="cellContextClick" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="class:ValidatorTypes" description="The set of standard validator types available on all fields.&lt;br&gt;&amp;#010  To make use of some standard validator type for a field in a DataSource, or &amp;#010  DynamicForm instance, specify the &lt;code&gt;validators&lt;/code&gt; property to an array &amp;#010  containing a validator definition where the &lt;code&gt;type&lt;/code&gt; property is set to &amp;#010  the appropriate type.  &amp;#010  A custom error message can be specified for any validator type by setting the&amp;#010  &lt;code&gt;errorMessage&lt;/code&gt; property on the validator definition object, and some&amp;#010  validator types make use of additional properties on the validator definition &amp;#010  object such as &lt;code&gt;max&lt;/code&gt; or &lt;code&gt;min&lt;/code&gt;.&lt;br&gt;&amp;#010  For example, to make use of the &lt;code&gt;integerRange&lt;/code&gt; validator type:&lt;br&gt;&lt;br&gt;&lt;code&gt;&amp;#010  &amp;nbsp;&amp;nbsp;field:{&lt;br&gt;&amp;#010  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;validators:[&lt;br&gt;&amp;#010  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{type:&quot;integerRange&quot;, min:1, max:100}&lt;br&gt;&amp;#010  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br&gt;&amp;#010  &amp;nbsp;&amp;nbsp;}&amp;#010  &lt;/code&gt;&lt;br&gt;&lt;br&gt;" name="ValidatorTypes" type="class">
    <classAttrs>classAttr:ValidatorTypes.isBoolean</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.isString</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.isInteger</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.isFloat</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.requiredIf</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.matchesField</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.isOneOf</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.integerRange</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.lengthRange</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.contains</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.doesntContain</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.substringCount</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.regexp</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.mask</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.dateRange</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.floatRange</classAttrs>
    <classAttrs>classAttr:ValidatorTypes.floatPrecision</classAttrs>
    <treeLocation>Client Reference/Forms/Validator</treeLocation>
</docItem>
<docItem ref="method:GridRenderer.cellSelectionChanged" flags="A" description=" Called when (cell-based) selection changes within this grid.&amp;#010&amp;#010" name="cellSelectionChanged" type="method" definingClass="class:GridRenderer">
<params description="Array of cells whos selected state was modified." optional="false" name="cellList" type="array">
</params>
<returns description="Returning false will prevent the GridRenderer styling from being updated                      to reflect the selection change." type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:GridRenderer.rowHover" flags="A" description=" Called when the mouse hovers over a row if this.canHover is true. &amp;#010  Returning false will suppress the hover text from being shown if this.showHover is true.&amp;#010&amp;#010" name="rowHover" type="method" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.canHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event (default behavior of showing the hover)" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:ListGrid.shrinkForFreeze" flags="IRWA" description="If this list grid is showing any ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','frozen')} fields, and a horizontal&amp;#010 scrollbar is visible at the bottom of the liquid columns, should an equivalent scrollbar gap&amp;#010 be left visible below the frozen columns?&lt;br&gt;&amp;#010 Note that if set to &lt;code&gt;true&lt;/code&gt; any backgroundColor or border applied to the ListGrid&amp;#010 will show up below the bottom row of the frozen column(s)." name="shrinkForFreeze" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <groups>frozenFields</groups>
</docItem>
<docItem ref="method:Date.getShortMonthName" flags="" description=" Return the abbreviated (up to 3 chars) name of the month for this date (Jan, Feb, etc)&amp;#010 To modify the value returned by this method, set ${isc.DocUtils.linkForRef('classAttr:Date.shortMonthNames')}&amp;#010" name="getShortMonthName" type="method" definingClass="class:Date">
<params description="Number of characters to return (Defaults to 3, can't be                                  longer than 3)" optional="false" name="length" type="number">
</params>
<returns description="Abbreviated month name (3 character string)" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:ListGridField.frozen" flags="IR" description="Whether this field should be &quot;frozen&quot; for the purposes of horizontal scrolling.  See&amp;#010 ${isc.DocUtils.linkForRef('group:frozenFields')}." name="frozen" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>frozenFields</groups>
</docItem>
<docItem ref="method:Canvas.setBackgroundImage" flags="" description="			Sets the background to an image file given by newImage. This URL should be given as a&amp;#010          string relative to the image directory for the page (./images by default).&amp;#010" name="setBackgroundImage" type="method" definingClass="class:Canvas">
<params description="new URL (local to Page image directory) for background image" optional="false" name="newImage" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setPadding" flags="" description=" Set the CSS padding of this component, in pixels.  Padding provides space between the border&amp;#010 and the component's contents.&amp;#010 &lt;P&gt;&amp;#010 This property sets the same thickness of padding on every side.  Differing per-side&amp;#010 padding can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.&amp;#010 &lt;P&gt;&amp;#010" name="setPadding" type="method" definingClass="class:Canvas">
<params description="new padding in pixels" optional="false" name="newPadding" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:StretchImgButton.setAutoFit" flags="" description=" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn&amp;#010 autoFit on or off. When autoFit is set to &lt;code&gt;false&lt;/code&gt;, canvas will be resized to&amp;#010 it's previously specified size.&amp;#010" name="setAutoFit" type="method" definingClass="class:StretchImgButton">
<params description="New autoFit setting." optional="false" name="autoFit" type="boolean">
</params>
</docItem>
<docItem ref="attr:ListGrid.titleField" flags="IRW" description="Best field to use for a user-visible title for an individual record from this grid.&amp;#010 If ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is non null, this property may be specified on the &amp;#010 dataSource instead.&amp;#010 &lt;p&gt;&amp;#010 If not explicitly set, titleField looks for fields named &quot;title&quot;, &quot;name&quot;, and &quot;id&quot; &amp;#010 in that order.  If a field exists with one of those names, it becomes the titleField.  &amp;#010 If not, then the first field is designated as the titleField." name="titleField" valueType="string" defaultValue="see below" type="attr" definingClass="class:ListGrid">
    <getter>getTitleField</getter>
</docItem>
<docItem ref="attr:DynamicForm.hiliteRequiredFields" flags="IRW" description="Indicates whether the titles of required items in this form should use the special&amp;#010 prefix and suffix specified by the next two properties, instead of the standard&amp;#010 prefix and suffix." name="hiliteRequiredFields" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="attr:ListGridField.align" flags="IRW" description="Horizontal alignment for field. By default this property effects both the column header&amp;#010 and the cells in this column, but a separate alignment for cells may be specified via&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.cellAlign')}.&amp;#010 &lt;P&gt;&amp;#010 Valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt;, &lt;code&gt;&quot;right&quot;&lt;/code&gt; or &lt;code&gt;&quot;center&quot;&lt;/code&gt;.&amp;#010 If unset, fields will default to being left-aligned. If this field is editable, the&amp;#010 alignment of cells in the body will also be reflected in any editors for the field." name="align" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.mouseStillDownDelay" flags="IRWA" description="Amount of time (in msec) between 'mouseStillDown' events for this object" name="mouseStillDownDelay" valueType="number" defaultValue="100" type="attr" definingClass="class:Canvas">
    <groups>events</groups>
</docItem>
<docItem ref="attr:FacetValue.title" flags="IRW" description="user-visible title of this facetValue.  Shown on the field header." name="title" valueType="String" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="attr:ListGrid.canReorderRecords" flags="IRW" description="Indicates whether records can be reordered by dragging within this listGrid." name="canReorderRecords" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridRecord.canDrag">
</seeAlso>
<seeAlso ref="attr:ListGridRecord.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragListMove')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('gridsDragReorder')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:DateChooser.baseWeekdayStyle" flags="IRW" description="Base css style applied to weekdays. Will have &quot;Over&quot;, &quot;Selected&quot; and &quot;Down&quot;&amp;#010 suffix appended as the user interacts with buttons.  Defaults to ${isc.DocUtils.linkForRef('attr:DateChooser.baseButtonStyle')}." name="baseWeekdayStyle" valueType="string" defaultValue="null" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:DataSourceField.foreignKey" flags="IR" description="Declares that this field holds values that can be matched to values from another DataSource&amp;#010 field, to create a relationship between records from different DataSources or even records&amp;#010 within the same DataSource.&amp;#010 &lt;p&gt;&amp;#010 The format of &lt;code&gt;foreignKey&lt;/code&gt; is&amp;#010 &lt;code&gt;&amp;lt;dataSourceId&amp;gt;.&amp;lt;fieldName&amp;gt;&lt;/code&gt;.&lt;br&gt;&amp;#010 For a foreignKey within the same dataSource, you can omit the &lt;code&gt;dataSourceId&lt;/code&gt;&amp;#010 and just specify &lt;code&gt;&amp;lt;fieldName&amp;gt;&lt;/code&gt;.&lt;br&gt;&amp;#010 For example, to create a tree relationship within a DataSource:&amp;#010 &lt;pre&gt;&amp;#010   DataSource.create({&amp;#010     ID:&quot;supplyItem&quot;,&amp;#010     fields : [&amp;#010       {name:&quot;itemId&quot;, type:&quot;sequence&quot;, primaryKey:true},&amp;#010       {name:&quot;parentId&quot;, type:&quot;integer&quot;, foreignKey:&quot;itemId&quot;},&amp;#010       ...&amp;#010     ]&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;foreignKey&lt;/code&gt; declarations also allow other automatic behaviors by&amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, such as ${isc.DocUtils.linkForRef('method:ListGrid.fetchRelatedData')}." name="foreignKey" valueType="String" defaultValue="false" type="attr" definingClass="class:DataSourceField">
    <groups>dataSourceRelations</groups>
</docItem>
<docItem ref="attr:MenuItem.isSeparator" flags="IR" description="When set to &lt;code&gt;true&lt;/code&gt;, this menu item shows a horizontal separator instead of&amp;#010 the ${isc.DocUtils.linkForRef('attr:MenuItem.title')} text.  Typically specified as the only property of a menu item,&amp;#010 since the separator will not respond to mouse events." name="isSeparator" valueType="boolean" defaultValue="false" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
    <groups>menuBasic</groups>
</docItem>
<docItem ref="object:Browser" description="Object containing flags indicating basic attributes of the browser." name="Browser" type="object">
    <classAttrs>classAttr:Browser.isSupported</classAttrs>
    <treeLocation>Client Reference/Foundation</treeLocation>
</docItem>
<docItem ref="method:TabSet.getTabPane" flags="" description=" Returns the pane for a given tab.&amp;#010&amp;#010" name="getTabPane" type="method" definingClass="class:TabSet">
<params optional="false" name="tab" type="object | number | ID | Tab">
</params>
<returns description="the tab pane" type="Canvas"></returns>
</docItem>
<docItem ref="method:GridRenderer.cellOut" flags="A" description=" Called when the mouse pointer leaves a cell&amp;#010&amp;#010" name="cellOut" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:DataSource.applyFilter" flags="" description=" Returns records in the passed Array that match the provided filter&amp;#010 ${isc.DocUtils.linkForRef('type:Criteria','criteria')}.&amp;#010 &lt;P&gt;&amp;#010 By default:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; any criteria that do not correspond to a DataSource field are ignored&amp;#010 &lt;li&gt; any null or empty string criteria are ignored&amp;#010 &lt;li&gt; all other criteria are passed to ${isc.DocUtils.linkForRef('method:DataSource.fieldMatchesFilter')}&amp;#010 &lt;/ul&gt;&amp;#010 This method is called by ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')} to provide filtering when a&amp;#010 ResultSet has a complete cache and filtering can be performed client-side.  You may want&amp;#010 to override this method in order to mimic the filtering behavior that your server performs.&amp;#010&amp;#010" name="applyFilter" type="method" definingClass="class:DataSource">
<params description="the list of rows" optional="false" name="data" type="Array">
</params>
<params description="the filter criteria" optional="false" name="criteria" type="Criteria">
</params>
<params description="dataSource request properties" optional="false" name="requestProperties" type="DSRequest Properties">
</params>
<returns description="the list of matching rows" type="Array"></returns>
</docItem>
<docItem ref="object:Array" description="Generic extensions to JavaScript Arrays.  You can call these on any Array.&amp;#010 &lt;P&gt;&amp;#010 JavaScript's native Array is retrofitted to support the &lt;code&gt;List&lt;/code&gt; API." name="Array" type="object">
    <methods>method:Array.get</methods>
    <methods>method:Array.getLength</methods>
    <methods>method:Array.isEmpty</methods>
    <methods>method:Array.first</methods>
    <methods>method:Array.last</methods>
    <methods>method:Array.indexOf</methods>
    <methods>method:Array.lastIndexOf</methods>
    <methods>method:Array.contains</methods>
    <methods>method:Array.containsAll</methods>
    <methods>method:Array.intersect</methods>
    <methods>method:Array.equals</methods>
    <methods>method:Array.getItems</methods>
    <methods>method:Array.getRange</methods>
    <methods>method:Array.duplicate</methods>
    <methods>method:Array.set</methods>
    <methods>method:Array.addAt</methods>
    <methods>method:Array.removeAt</methods>
    <methods>method:Array.add</methods>
    <methods>method:Array.addList</methods>
    <methods>method:Array.setLength</methods>
    <methods>method:Array.addListAt</methods>
    <methods>method:Array.remove</methods>
    <methods>method:Array.removeList</methods>
    <methods>method:Array.dataChanged</methods>
    <methods>method:Array.getProperty</methods>
    <methods>method:Array.getValueMap</methods>
    <methods>method:Array.map</methods>
    <methods>method:Array.setProperty</methods>
    <methods>method:Array.clearProperty</methods>
    <methods>method:Array.getUniqueItems</methods>
    <methods>method:Array.findIndex</methods>
    <methods>method:Array.findNextIndex</methods>
    <methods>method:Array.find</methods>
    <methods>method:Array.containsProperty</methods>
    <methods>method:Array.findAll</methods>
    <methods>method:Array.slide</methods>
    <methods>method:Array.slideRange</methods>
    <methods>method:Array.makeIndex</methods>
    <methods>method:Array.sortByProperty</methods>
    <methods>method:Array.unsort</methods>
    <methods>method:Array.max</methods>
    <methods>method:Array.min</methods>
    <methods>method:Array.sum</methods>
    <methods>method:Array.and</methods>
    <methods>method:Array.or</methods>
    <classAttrs>classAttr:Array.LOADING</classAttrs>
    <classMethods>classMethod:Array.compareAscending</classMethods>
    <classMethods>classMethod:Array.compareDescending</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
    <implementsInterfaces>List</implementsInterfaces>
<seeAlso ref="interface:List">
</seeAlso>
</docItem>
<docItem ref="method:Button.deselect" flags="" description=" Select this object.&amp;#010" name="deselect" type="method" definingClass="class:Button">
    <groups>state</groups>
</docItem>
<docItem ref="attr:DataBoundComponent.showHiddenFields" flags="IRW" description="Whether to show fields marked &lt;code&gt;hidden:true&lt;/code&gt; when a DataBoundComponent is given a&amp;#010 DataSource but no &lt;code&gt;component.fields&lt;/code&gt;.&amp;#010 &lt;p&gt;&amp;#010 The &lt;code&gt;hidden&lt;/code&gt; property is used on DataSource fields to mark fields that are&amp;#010 never of meaning to an end user." name="showHiddenFields" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:DataBoundComponent">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:BlurbItem.textBoxStyle" flags="IRW" description="Base css style for this item." name="textBoxStyle" valueType="CSSStyleName" defaultValue="&quot;staticTextItem&quot;" type="attr" definingClass="class:BlurbItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Window.setTitle" flags="" description="          Sets the title text that appears in the window header; the header will be redrawn&amp;#010          if necessary.&amp;#010" name="setTitle" type="method" definingClass="class:Window">
<params description="new title" optional="false" name="newTitle" defaultValue="null" type="string"></params>
    <groups>header</groups>
</docItem>
<docItem ref="method:TreeGrid.toggleFolder" flags="" description="          Opens the folder specified by node if it's closed, and closes it if it's open.&amp;#010          TreeGrid will redraw if there's a change in the folder's open/closed state.&amp;#010&amp;#010" name="toggleFolder" type="method" definingClass="class:TreeGrid">
<params description="node to toggle" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="attr:ListGrid.generateDoubleClickOnSpace" flags="IRWA" description="If true, when the user navigates to a cell using arrow keys and hits Space, &amp;#010 the cell will respond to a double click event." name="generateDoubleClickOnSpace" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="method:TreeGrid.folderClick" flags="" description="&amp;#010 This method is called when a folder record is clicked on.&amp;#010&amp;#010" name="folderClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.nodeClick">
</seeAlso>
<params description="The TreeGrid on which folderClick() occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The folder (record) that was clicked" optional="false" name="folder" type="TreeNode">
</params>
<params description="Index of the row where the click occurred." optional="false" name="recordNum" type="number">
</params>
</docItem>
<docItem ref="attr:StatefulCanvas.align" flags="IRW" description="Horizontal alignment of this component's title." name="align" valueType="Alignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:StatefulCanvas">
    <groups>appearance</groups>
</docItem>
<docItem ref="object:TreeGridField" description="An object literal with a particular set of properties used to configure the display of&amp;#010 and interaction with the columns of a ${isc.DocUtils.linkForRef('class:TreeGrid')}.&amp;#010 ${isc.DocUtils.linkForRef('class:TreeGrid')} is a subclass of ${isc.DocUtils.linkForRef('class:ListGrid')} and as a result, for all fields except&amp;#010 the field containing the ${isc.DocUtils.linkForRef('class:Tree')} itself (specified by&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGridField.treeField')}, all properties settable on&amp;#010 ${isc.DocUtils.linkForRef('object:ListGridField')} apply to TreeGridField as well.&amp;#010 &lt;p&gt;&amp;#010 This class documents just those properties that are specific to TreeGridFields - see&amp;#010 ${isc.DocUtils.linkForRef('object:ListGridField')} for the set of inherited properties." name="TreeGridField" type="object">
    <treeLocation>Client Reference/Grids/TreeGrid</treeLocation>
    <attrs>attr:TreeGridField.treeField</attrs>
<seeAlso ref="object:ListGridField">
</seeAlso>
<seeAlso ref="attr:TreeGrid.fields">
</seeAlso>
<seeAlso ref="method:ListGrid.setFields">
</seeAlso>
</docItem>
<docItem ref="attr:DSResponse.endRow" flags="R" description="End row of returned server results, when using paged result fetching&amp;#010 &lt;p&gt;&amp;#010 Note that startRow and endRow are zero-based - the first record is row zero." name="endRow" valueType="number" defaultValue="null" type="attr" definingClass="class:DSResponse">
    <groups>paging</groups>
</docItem>
<docItem ref="attr:ListGridRecord.linkText" flags="IRW" description="The HTML to display in this row for fields with fieldType set to link. This overrides&amp;#010  ${isc.DocUtils.linkForRef('attr:ListGridField.linkText')}." name="linkText" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
<seeAlso ref="type:ListGridFieldType">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
<seeAlso ref="attr:ListGridField.linkText">
</seeAlso>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:FormItem.height" flags="IRW" description="Default height of this item." name="height" valueType="number" defaultValue="20" type="attr" definingClass="class:FormItem">
    <examples>${isc.DocUtils.linkForExampleId('formLayoutFilling')}</examples>
    <groups>formLayout</groups>
</docItem>
<docItem ref="attr:TreeGrid.connectorImage" flags="IR" description="The base filename of the opener icon for the folder node when 'showConnectors' is true&amp;#010 for this TreeGrid.&lt;br&gt;&amp;#010 The opener icon is displayed beside the folder icon in the Tree column for all nodes if&amp;#010 showConnectors is true, and can be used to display both folder-toggling controls and &amp;#010 hierachy connector lines for the tree.&amp;#010 Clicking on this icon for a folder with child nodes will toggle the open state of the &amp;#010 folder.&lt;br&gt;&amp;#010 The filenames for these icons are assembled from this base filename and the state of the&amp;#010 node, as follows:&lt;br&gt;&amp;#010 Assume the connectorImage is set to &lt;code&gt;{baseName}.{extension}&lt;/code&gt;&lt;br&gt;&amp;#010 The full set of images to be displayed is:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_single[_rtl].{extension}&lt;/code&gt;: node with no children, where the &amp;#010      previous row in the treeGrid doesn't contain a sibling or parent of this node, and&amp;#010      the next row in the treeGrid doesn't contain a sibling of this node.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_start[_rtl].{extension}&lt;/code&gt;:  node with no children, where the &amp;#010      previous row in the treeGrid doesn't contain a sibling or parent of this node.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_end[_rtl].{extension}&lt;/code&gt;:  node with no children, where the &amp;#010      next row in the treeGrid doesn't contain a sibling of this node.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_middle[_rtl].{extension}&lt;/code&gt;:  node with no children, where the &amp;#010      next row in the treeGrid does contain a sibling of this node, and the previous row&amp;#010      in the treeGrid contains either this node's parent, or a sibling of this node.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_opened_single[_rtl].{extension}&lt;/code&gt; opened folder node with &amp;#010      children where the previous row in the tree grid is not a sibling of this node, or&amp;#010      this node's parent.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_opened_end[_rtl].{extension}&lt;/code&gt; opened folder node with&amp;#010      children where the previous row in the tree grid is either a sibling of this node, &amp;#010      or this node's parent.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_closed_single[_rtl].{extension}&lt;/code&gt; closed folder node with&amp;#010      children where the previous row in the treeGrid doesn't contain a sibling or parent &amp;#010      of this node, and the next row in the treeGrid doesn't contain a sibling of this node.&amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_closed_start[_rtl].{extension}&lt;/code&gt; closed filder with children, where the &amp;#010      previous row in the treeGrid doesn't contain a sibling or parent of this node.      &amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_closed_end[_rtl].{extension}&lt;/code&gt; closed folder with children, where the &amp;#010      next row in the treeGrid doesn't contain a sibling of this node.     &amp;#010 &lt;li&gt;&lt;code&gt;{baseName}_closed_middle[_rtl].{extension}&lt;/code&gt; closed folder with children, where the &amp;#010      next row in the treeGrid does contain a sibling of this node, and the previous row&amp;#010      in the treeGrid contains either this node's parent, or a sibling of this node.    &amp;#010 &lt;/ul&gt;           &amp;#010 (Note '[_rtl]' means that &quot;_rtl&quot; will be attached if isRTL() is true for this widget)." name="connectorImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]connector.gif&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="group:loadXMLSchemaTag" title="&amp;lt;isomorphic:loadXMLSchema&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 Load an XML Schema (.xsd) file and create a ${isc.DocUtils.linkForRef('class:SchemaSet')} object representing the loaded&amp;#010 definitions. This tag works just like ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}, except it's&amp;#010 synchronous and the result is server-cacheable.&amp;#010 &lt;p&gt;&amp;#010 Note that this JSP tag must be surrounded by &amp;lt;SCRIPT&amp;gt; tags in the JSP because it&amp;#010 generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be&amp;#010 used in a JSP that is included from your main page in order to create separate&amp;#010 cacheability.  For example:&lt;pre&gt;&amp;#010     &amp;lt;SCRIPT SRC=&quot;myXMLSchemaDefinitions.jsp&quot;&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;url&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: URL or URI&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the URL or URI of the XML Schema file to fetch and translate.  This&amp;#010 can be either a remote URL - e.g: &lt;code&gt;http://host:port/schemaFile.xsd&lt;/code&gt; or a relative&amp;#010 or absolute URI to a file local to this container - e.g: &lt;code&gt;/some/schemaFile.xsd&lt;/code&gt;&amp;#010 or &lt;code&gt;../some/schemaFile.xsd&lt;/code&gt;.  If the url is a remote URL, then an HTTP request&amp;#010 will be made for the file.  If it is local, it will be fetched from disk using standard&amp;#010 Servlet APIs (&lt;code&gt;ServletContext.getResourceAsStream()&lt;/code&gt;).&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;cache&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Integer (number of seconds to cache result)&amp;#010 &lt;i&gt;default value&lt;/i&gt;: 3600 (1 hour)&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the number of seconds for which the fetched XML Schema is cacheable&amp;#010 on the server.  Fetching a XML Schema file from a remote server can cause a significant&amp;#010 delay in JSP processing, and XML Schema files rarely change outside of a development&amp;#010 environment.  Set this value to zero to disable caching." name="loadXMLSchemaTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="classMethod:XMLTools.loadXMLSchema">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:TreeGrid.getSelectedPaths" flags="" description=" Returns a snapshot of the current selection within this treeGrid as &amp;#010 a ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:TreeGrid.setSelectedPaths')} to reset this grid's selection&amp;#010 the current state (assuming the same data is present in the grid).&lt;br&gt;&amp;#010" name="getSelectedPaths" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.setSelectedPaths">
</seeAlso>
<returns description="current state of this grid's selection" type="listGridSelectedState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:DynamicForm.requiredTitlePrefix" flags="IRW" description="The string prepended to the title of every required item in this form if&amp;#010 highlightRequiredFields is true." name="requiredTitlePrefix" valueType="string" defaultValue="&quot;&lt;B&gt;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="group:facetExpansion" name="facetExpansion" type="group">
    <refs>attr:CubeGrid.canCollapseFacets</refs>
    <refs>attr:CubeGrid.canMinimizeFacets</refs>
</docItem>
<docItem ref="method:WebService.callOperation" flags="" description=" Invoke a web service operation.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;data&lt;/code&gt; parameter will be serialized to XML to form the input message for&amp;#010 the operation, as described by ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.  Namespacing,&amp;#010 element ordering, and SOAP encoding rules are automatically followed.  If the web&amp;#010 service you are trying to contact requires a complicated nested structure, consider&amp;#010 using ${isc.DocUtils.linkForRef('attr:WSRequest.useFlatFields')} to simplify the required JavaScript input data.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;resultType&lt;/code&gt; selects what part of the message should be decoded to&amp;#010 JavaScript and made available as the &quot;data&quot; variable in the callback.  The&amp;#010 &lt;code&gt;resultType&lt;/code&gt; parameter can be either:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; an XPath.  &quot;data&quot; will be always be an Array, containing the selected elements as&amp;#010 decoded by ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  All properties will have String value.&amp;#010 &lt;li&gt; the name of an XML Schema type found somewhere in the response.  You can use the&amp;#010 WSDL tab of the Developer Console to analyze the WSDL file for an appropriate type name.&amp;#010 &quot;data&quot; will be an Array, containing the decoded elements as decoded by&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}.  In this case, since the XML Schema type of the&amp;#010 selected data is known, properties will have correct type (eg &quot;date&quot; fields will&amp;#010 have JavaScript Date objects)&amp;#010 &lt;li&gt; null.  &quot;data&quot; will an Object representing the entire &amp;lt;SOAP:Body&amp;gt; as decoded&amp;#010 to JavaScript.  As above, properties will have correct type.&amp;#010 &lt;/ul&gt;&amp;#010 In the callback, you also receive the XML document returned by the web service as&amp;#010 &quot;xmlDoc&quot;.&amp;#010 &lt;P&gt;&amp;#010 NOTE: &lt;code&gt;callOperation()&lt;/code&gt; is appropriate for simple operations that do not&amp;#010 involve DataBound Components, such as logging into a web service, or retrieving simple&amp;#010 String data.  &lt;code&gt;callOperation()&lt;/code&gt; can also be used to retrieve small, read-only&amp;#010 datasets such as the option list for a SelectItem, but only if the dataset is guaranteed&amp;#010 to remain small enough for paging to be unnecessary.  For any larger datasets or&amp;#010 anything that will be edited, DataSource integration is more appropriate.&amp;#010&amp;#010" name="callOperation" type="method" definingClass="class:WebService">
<params description="Name of the operation to invoke" optional="false" name="operationName" type="String">
</params>
<params description="data to serialize as XML to form the inbound message of                                  the operation" optional="false" name="data" type="Object">
</params>
<params description="Type, Element name, or XPath that                                  should be selected from the result" optional="false" name="resultType" type="Type or ElementName or XPath">
</params>
<params description="Callback to invoke on completion.  Signature                                  callback(data, xmlDoc, rpcResponse, wsRequest)" optional="false" name="callback" type="Callback">
</params>
<params description="Additional properties for the WSRequest, such                                      as HTTPHeaders" optional="false" name="requestProperties" type="WSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('wsdlOperation')}</examples>
    <groups>webService</groups>
</docItem>
<docItem ref="method:FormItem.enable" flags="" description=" Set this item to be enabled at runtime.&amp;#010" name="enable" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.disabled">
</seeAlso>
    <groups>enable</groups>
</docItem>
<docItem ref="attr:TabBar.breadth" flags="IRW" description="Breadth of the tabBar (including baseline breadth)" name="breadth" valueType="number" defaultValue="21" type="attr" definingClass="class:TabBar">
</docItem>
<docItem ref="method:ListGrid.getFilterEditorValueMap" flags="A" description="&amp;#010  If we're showing the filter (query-by-example) row for this ListGrid, this method is&amp;#010  used to determine the valueMap to display in the filter row for this field.&amp;#010  Default implementation will return the field.filterEditorValueMap if specified, or&amp;#010  field.valueMap.&amp;#010&amp;#010" name="getFilterEditorValueMap" type="method" definingClass="class:ListGrid">
<params description="field definition field for which we need a valueMap" optional="false" name="field" type="ListGridField">
</params>
<returns description="ValueMap for the edit field (or null if no valueMap required)" type="ValueMap"></returns>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:Label.contents" flags="IRW" description="The contents of a canvas or label widget. Any HTML string is acceptable." name="contents" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:Label">
    <setter>setContents</setter>
<seeAlso ref="attr:Label.dynamicContents">
</seeAlso>
    <groups>contents</groups>
</docItem>
<docItem ref="method:Canvas.setShowResizeBar" flags="" description=" When this Canvas is included as a member in a Layout, dynamically updates whether a &amp;#010 resizeBar should be shown after this member in the layout, to allow it to be resized.&amp;#010" name="setShowResizeBar" type="method" definingClass="class:Canvas">
<params description="setting for this.showResizeBar" optional="false" name="show" type="boolean">
</params>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="method:CubeGrid.selectAllFacetValues" flags="" description="&amp;#010 select/deselect all headers in a headerBar (specified by facetId) or&amp;#010 all headerBars (if no facetId)&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectAllFacetValues" type="method" definingClass="class:CubeGrid">
<params description="ID of facet - if null, selects all headerbars' headers" optional="true" name="facetId" type="string">
</params>
<params description="new selection state - if null defaults to true" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGridField.valueIconSize" flags="IRW" description="Default width and height of value icons in this field.&amp;#010 Takes precidence over valueIconWidth, valueIconHeight and valueIconSize specified at&amp;#010 the ListGrid level.&amp;#010 Can be overridden via ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')} and {ListGridField.valueIconHeight}" name="valueIconSize" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.valueIconSize">
</seeAlso>
<seeAlso ref="attr:ListGridField.valueIconWidth">
</seeAlso>
<seeAlso ref="attr:ListGridField.valueIconHeight">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:TreeGrid.recordDoubleClick" flags="" description="&amp;#010 Handle a doubleClick on a tree node - override of ListGrid stringMethod of same name.  If&amp;#010 the node is a folder, this implementation calls ${isc.DocUtils.linkForRef('method:TreeGrid.toggleFolder')} on it.  If&amp;#010 the node is a leaf, calls ${isc.DocUtils.linkForRef('method:TreeGrid.openLeaf')} on it.&amp;#010 &amp;#010" name="recordDoubleClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:ListGrid.recordDoubleClick">
</seeAlso>
</docItem>
<docItem ref="method:TreeGrid.folderDrop" flags="A" description="&amp;#010 This method processes the drop on a folder in the TreeGrid.  The default implementation&amp;#010 works as follows:&amp;#010 &lt;P&gt;&amp;#010 If the nodes originate in this tree and the ${isc.DocUtils.linkForRef('attr:TreeGrid.dragDataAction')} is &quot;none&quot; or&amp;#010 &quot;move&quot;, then the nodes are simply reordered in this TreeGrid.  Otherwise (if&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.dragDataAction')} is &quot;copy&quot; or &quot;none&quot;), this method calls&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} on the &lt;code&gt;sourceWidget&lt;/code&gt; and adds the returned&amp;#010 rows to this TreeGrid.&amp;#010 &lt;P&gt;&amp;#010 In either case, the new row(s) appear in the &lt;code&gt;folder&lt;/code&gt; at the &lt;code&gt;index&lt;/code&gt;&amp;#010 specified by the arguments of the same name.&amp;#010 &lt;P&gt;&amp;#010 For dataBound treeGrids, folderDrop() will initiate ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}&amp;#010 to update remote datasets.  For nodes moved within the tree, an &quot;update&quot; operation will&amp;#010 be submitted to update the ${isc.DocUtils.linkForRef('attr:Tree.parentIdField','parentId')} field of the moved node(s).  For&amp;#010 nodes added to a tree, &quot;add&quot; DataSource requests will be submitted with the dropped&amp;#010 node(s) as dsRequest.data.&amp;#010 &lt;P&gt;&amp;#010 As a special case, if the &lt;code&gt;sourceWidget&lt;/code&gt; is also databound, and a &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} relationship is declared from the&amp;#010 &lt;code&gt;sourceWidget&lt;/code&gt;'s DataSource to this TreeGrid's DataSource, the interaction will&amp;#010 be treated as a &quot;drag recategorization&quot; use case such as files being placed in folders,&amp;#010 employees being assigned to teams, etc.  &quot;update&quot; DSRequests will be submitted that&amp;#010 change the foreignKey field in the dropped records to point to the tree folder that was the&amp;#010 target of the drop.  In this case no change will be made to the Tree data as such, only to&amp;#010 the dropped records. &amp;#010&amp;#010" name="folderDrop" type="method" definingClass="class:TreeGrid">
<params description="List of nodes being dropped" optional="false" name="nodes" type="List of TreeNode">
</params>
<params description="The folder being dropped on" optional="false" name="folder" type="TreeNode">
</params>
<params description="Within the folder being dropped on, the index at which the drop is                        occurring." optional="false" name="index" type="integer">
</params>
<params description="The component that is the source of the nodes (where the nodes                              were dragged from)." optional="false" name="sourceWidget" type="Canvas">
</params>
    <examples>${isc.DocUtils.linkForExampleId('treeDropEvents')}</examples>
</docItem>
<docItem ref="method:ListGrid.getSelection" flags="" description=" Returns all selected records, as an Array.&amp;#010&amp;#010" name="getSelection" type="method" definingClass="class:ListGrid">
<returns description="list of records, empty list if nothing selected" type="Array of ListGridRecord"></returns>
    <examples>${isc.DocUtils.linkForExampleId('databoundRemove')}</examples>
    <groups>selection</groups>
</docItem>
<docItem ref="method:DateChooser.getData" flags="" description=" Get the current value of the picker.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('method:DateChooser.dataChanged')} for how to respond to the user picking a date.&amp;#010&amp;#010" name="getData" type="method" definingClass="class:DateChooser">
<returns description="current date" type="Date"></returns>
</docItem>
<docItem ref="attr:CubeGrid.alternateRecordStyles" flags="IRW" description="Whether alternating rows should be drawn in alternating styles, in order to create a &quot;ledger&quot;&amp;#010	effect for easier reading.  If enabled, the cell style for alternate rows will have &quot;Dark&quot;&amp;#010	appended to it." name="alternateRecordStyles" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="group:iscServer" title="SmartClient Server Summary" description="The SmartClient Server is a set of Java libraries, servlets and tools that provide the key&amp;#010 server-side components needed to build a complete application in the modern web&amp;#010 architecture.&amp;#010 &lt;P&gt;&amp;#010 The SmartClient Server can be ${isc.DocUtils.linkForRef('group:iscInstall','integrated')} into any pre-existing Java&amp;#010 application, and is designed to rapidly connect SmartClient visual components to&amp;#010 pre-existing Java business logic or persistence engines.  SmartClient's Ajax request&amp;#010 processing facilities can be easily integrated into Struts Actions,&amp;#010 ${isc.DocUtils.linkForRef('group:springIntegration','Spring controllers')}, or custom servlets and JSPs.&amp;#010 &lt;P&gt;&amp;#010 Alternatively, the SmartClient Server provides a complete SQL and Hibernate-based&amp;#010 persistence engine for new applications, with out-of-the-box servlets for processing Ajax&amp;#010 data requests.&amp;#010 &lt;P&gt;&amp;#010 The SmartClient Server is optional, and SmartClient's client-side Ajax engine can be&amp;#010 integrated with any server that provides HTTP access, using XML, JSON, SOAP or proprietary&amp;#010 data protocols.  However any server in a modern web application will be required to provide&amp;#010 most or all of the features of the SmartClient Server (described below), and the SmartClient&amp;#010 Server represents a best-of-breed implementation of these facilities with a long history of&amp;#010 high-volume production deployments.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Server enforcement of ${isc.DocUtils.linkForRef('class:Validator','Validators')}&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Data passed from the browser can be automatically validated by the SmartClient Server.&amp;#010 In contrast, when using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')},&amp;#010 data arrives as HTTP params or XML messages, and you must parse values into the correct&amp;#010 types (eg java.util.Date) and validate them, or use a server framework that does so.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;High Speed Data Delivery / Data Compression&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The SmartClient Server delivers data to and from the browser using a proprietary, maximally&amp;#010 efficient protocol, providing simple Java APIs for sending and receiving data.&amp;#010 &lt;P&gt;&amp;#010 SmartClient's data protocol is:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; automatically compressed: provides 6-8x improvement in bandwidth utilization&amp;#010 &lt;li&gt; efficient on the server: high speed data serialization for any Java Object&amp;#010 &lt;li&gt; efficient in the browser: faster than ordinary XML or JSON data delivery&amp;#010 &lt;li&gt; minimal: facilities for ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields','trimming')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','extracting')} only the data you want the browser to see&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Transparent upload support&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 SmartClient provides special client and server-side support for ${isc.DocUtils.linkForRef('group:upload','file&amp;#010 upload')}, which allows single and multiple-file HTTP uploads to be performed as a background&amp;#010 Ajax request without reloading the page or launching sub-windows.&amp;#010 &lt;P&gt;&amp;#010 Uploaded files arrive at the SmartClient server as Java InputStreams accessible from the&amp;#010 DSRequest object, and can optionally be automatically stored via SmartClient's SQL&amp;#010 subsystem.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Transparent Queuing / &quot;Batch&quot; Operations&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Any request transmitted to the SmartClient Server can be combined into a &quot;queue&quot; transmitted&amp;#010 as a single HTTP request, with in-order execution for all queued operations. &amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','startQueue()')} starts a queue and&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue','sendQueue()')} transmits it; queueing is transparent to the code&amp;#010 that initiates the individual requests.  This enables:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; re-use of data access operations across different screens&amp;#010 &lt;li&gt; easy implementation of transaction boundaries&amp;#010 &lt;li&gt; simplified saving and loading of screens with complex, master-detail views&amp;#010 &lt;li&gt; guaranteed in-order processing of operations&amp;#010 &lt;li&gt; more efficient network usage&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Visual Builder&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('group:visualBuilder','Visual Builder')} is included with the SmartClient Server, and uses&amp;#010 server features such as automatic SQL binding to provide a rapid prototyping environment.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Automatic Bi-directional Java &amp;lt; - &amp;gt; JavaScript serialization and translation&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Provides a powerful, type-safe ${isc.DocUtils.linkForRef('attr:RPCRequest.data','data transmission mechanism')} for moving&amp;#010 data between a Java server and the browser. &amp;#010 &lt;P&gt;&amp;#010 Any Java objects, including Java Beans, POJOs, Java Collections, XML DOMs and all Java&amp;#010 primitives, with any level of nesting, can be automatically serialized and delivered as&amp;#010 JavaScript Objects to the SmartClient client-side components.&amp;#010 &lt;P&gt;&amp;#010 JavaScript Objects existing in the browser can likewise be automatically transmitted to a&amp;#010 Java Server and translated to Java Objects, with any level of nesting and automatic&amp;#010 preservation of primitive types.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Rich, Standardized Request / Response protocol&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The SmartClient Server provides a standardized request and response protocol designed for&amp;#010 data-oriented &quot;CRUD&quot; operations (create, retrieve, update, delete).&amp;#010 &lt;P&gt;&amp;#010 This standardized protocol automatically handles ${isc.DocUtils.linkForRef('class:DSRequest','request metadata')} (paging&amp;#010 parameters, requested sort order, original values of data being modified) and&amp;#010 ${isc.DocUtils.linkForRef('class:DSResponse','response metadata')} (error handling, cache management, session expiration etc).&amp;#010 &lt;P&gt;&amp;#010 Similar to the impact of Struts on early web applications, this standardized protocol avoids&amp;#010 developers in different groups inventing their own incompatible and redundant&amp;#010 request/response protocols, and allows developers to more easily learn code they didn't&amp;#010 author.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Bi-directional XPath binding to Java Objects&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Most UI designs do not directly reflect the underlying Object model and so some degree of&amp;#010 translation is necessary in order to populate UI components with data and apply user changes&amp;#010 to the Java Object model.  This is often accomplished with brittle, difficult to understand&amp;#010 data translation code sprinkled throughout the system, done in a different way for every&amp;#010 screen or component.&amp;#010 &lt;P&gt;&amp;#010 SmartClient provides a standard, ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','XPath-based approach')} to&amp;#010 adapting any Java-based Object model to the requirements of the UI design.  Data relevant to&amp;#010 the application UI is centrally extracted in the server-side ${isc.DocUtils.linkForRef('class:DataSource')} layer, so&amp;#010 that all UI components have a consistent, unified view of the data model for both loading&amp;#010 &lt;b&gt;and&lt;/b&gt; saving data.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Broadest possible browser support&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The SmartClient Server can compensate for facilities &amp;#010 ${isc.DocUtils.linkForRef('group:platformDependencies','missing or disabled in certain browsers')},&amp;#010 including ActiveX being disabled in IE6 and missing XML support in some versions&amp;#010 of Apple's Safari browser.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Transparent Proxying&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendProxied','Proxying')} allows SmartClient applications to access web&amp;#010 services, RSS feeds, HTML content and other data services in a secure manner regardless of&amp;#010 where they are located: across the enterprise or publicly available.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Optional ${isc.DocUtils.linkForRef('group:networkPerformance','Network Performance')} Module&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Provides:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; compressed delivery of SmartClient runtime, application logic and other assets such as CSS&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('class:FileLoader','background download')} of SmartClient and other assets for zero&amp;#010 user-perceived load time&amp;#010 &lt;li&gt; on-the-fly stripping, combining and obfuscation of JavaScript (application code and data)&amp;#010 &lt;li&gt; browser cache control&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Optional Messaging Module (aka server push)&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The ${isc.DocUtils.linkForDocNode('messaging', 'Messaging')} module allows the server to &quot;push&quot; messages to the client, without&amp;#010 client polling, for real-time monitoring/dashboarding applications." name="iscServer" type="group">
    <treeLocation>Java Server Reference</treeLocation>
</docItem>
<docItem ref="method:Class.map" flags="" description="&amp;#010 Call &lt;code&gt;method&lt;/code&gt; on each item in &lt;code&gt;argsList&lt;/code&gt; and return the Array of results.&amp;#010&amp;#010" name="map" type="method" definingClass="class:Class">
<params description="Name of the method on this instance which should be called on each element of the Array" optional="false" name="methodName" type="string">
</params>
<params description="Array of items to call the method on" optional="false" name="items" type="Array">
</params>
<returns description="Array of results, one per element in the passed &quot;items&quot; Array" type="Array"></returns>
</docItem>
<docItem ref="type:ListGridFieldType" description="ListGrids format data for viewing and editing based on the &lt;i&gt;type&lt;/i&gt; attribute of the&amp;#010 field.  This table describes how the ListGrid deals with the various built-in types." name="ListGridFieldType" type="type">
<values description="Simple text rendering for view.  For editing a text entry field is shown. If the length of the field (as specified by the ${isc.DocUtils.linkForRef('attr:DataSourceField.length')}&amp;#010 attribute) is larger than the value specified by ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorThreshold')}, a&amp;#010 text input icon is shown that, when clicked on (or field is focused in) opens a larger&amp;#010 editor that expands outside the boundaries of the cell (textarea by default, but&amp;#010 overrideable via ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorType')})." value="&quot;text&quot;"></values>
<values description="For viewing and editing a checkbox is shown with a check mark for the &lt;code&gt;true&lt;/code&gt; value and no check mark for the &lt;code&gt;false&lt;/code&gt; value.  See&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} for customization." value="&quot;boolean&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt;.  Consider setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorType','editorType')} to use a ${isc.DocUtils.linkForRef('class:SpinnerItem')}." value="&quot;integer&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt;.  Consider setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorType','editorType')} to use a ${isc.DocUtils.linkForRef('class:SpinnerItem')}." value="&quot;float&quot;"></values>
<values description="Expected to contain &lt;code&gt;Date&lt;/code&gt; type data. Dates will be formatted using&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')} if specified, otherwise ${isc.DocUtils.linkForRef('attr:ListGrid.dateFormatter')}.&amp;#010 If both these attributes are unset, dates are formatted using the standard &amp;#010 ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat','short display format')} for dates.&lt;br&gt;&amp;#010 For editing, by default a ${isc.DocUtils.linkForRef('class:DateItem')} is used with ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} set&amp;#010 to true, providing textual date entry plus a pop-up date picker. The&amp;#010 ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')} and ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')}&amp;#010 for the editor will be picked up from the ListGridField, if specified." value="&quot;date&quot;"></values>
<values description="Expected to contain Time data encoded in javascript &lt;code&gt;Date&lt;/code&gt; objects.&amp;#010 Times will be formatted using ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')} if specified, &amp;#010 otherwise ${isc.DocUtils.linkForRef('attr:ListGrid.timeFormatter')}.&lt;br&gt;&amp;#010 If both these attributes are unset, times are formatted using the standard &amp;#010 ${isc.DocUtils.linkForRef('classAttr:Time.shortDisplayFormat','short display format')} for times.&lt;br&gt;&amp;#010 For editing, by default a ${isc.DocUtils.linkForRef('class:TimeItem')} is used. The&amp;#010 ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat','displayFormat')} for the editor will be picked up from &amp;#010 the ListGridField, if specified." value="&quot;time&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt;" value="&quot;sequence&quot;"></values>
<values description="For viewing, the field value is rendered as a clickable html link (using an HTML anchor tag: &amp;lt;A&amp;gt;).  The target URL is the value of the field, which&amp;#010 is also default display value. You can override the display value by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridRecord.linkText')} or ${isc.DocUtils.linkForRef('attr:ListGridField.linkText')}.&lt;BR&gt;&amp;#010 Clicking the link opens the URL in a new window by default.  To change this behavior,&amp;#010 you can set &lt;code&gt;field.target&lt;/code&gt;, which works indentically to the &quot;target&quot;&amp;#010 attribute on an HTML anchor (&amp;lt;A&amp;gt;) tag.&lt;br&gt;&amp;#010 In inline edit mode, this type works like a text field.&lt;br&gt;&amp;#010 To create a link not covered by this feature, consider using&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue')} along with ${isc.DocUtils.linkForRef('method:Canvas.linkHTML')}, or simply&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getCellStyle','styling the field')} to look like a link, and providing&amp;#010 interactivity via ${isc.DocUtils.linkForRef('method:ListGridField.recordClick','field.recordClick()')}." value="&quot;link&quot;"></values>
<values description="For viewing, a thumbnail image is rendered in the field.  The URL of the image is the value of the field. If this URL is not absolute, it is assumed to be relative&amp;#010 to ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} if specified. The size of the image is controlled by&amp;#010  ${isc.DocUtils.linkForRef('attr:ListGridField.imageSize')}, ${isc.DocUtils.linkForRef('attr:ListGridField.imageWidth')},&amp;#010  ${isc.DocUtils.linkForRef('attr:ListGridField.imageHeight')} (and by the similarly-named global default&amp;#010  attributes on the ListGrid itself).&lt;br&gt;&amp;#010  You can also specify&amp;#010  the following attributes on the field: &lt;code&gt;activeAreaHTML&lt;/code&gt;, and&amp;#010  &lt;code&gt;extraStuff&lt;/code&gt; - these are passed to ${isc.DocUtils.linkForRef('method:Canvas.imgHTML')} to generate the&amp;#010  final URL." value="&quot;image&quot;"></values>
<values description="For viewing, the grid renders a 'view' icon (looking glass) followed by a 'download' icon and then the name of the file is displayed in text.  If the user clicks the&amp;#010 'view' icon, a new browser window is opened and the file is streamed to that browser&amp;#010 instance.  For images and other file types with known handlers, the content is typically&amp;#010 displayed inline - otherwise the browser will ask the user how to handle the content.  If the&amp;#010 download icon is clicked, the browser opens a 'Save' dialog.  There is no inline editing mode&amp;#010 for this field type." value="&quot;binary&quot;"></values>
<values description="Same as &lt;code&gt;binary&lt;/code&gt;" value="&quot;imageFile&quot;"></values>
<seeAlso ref="attr:ListGridField.type">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('gridsDataTypes')}</examples>
</docItem>
<docItem ref="attr:SimpleType.name" flags="IR" description="Name of the type, used to refer to the type from ${isc.DocUtils.linkForRef('attr:DataSourceField.name','field.name')}." name="name" valueType="identifier" defaultValue="null" type="attr" definingClass="class:SimpleType">
</docItem>
<docItem ref="attr:ImgSplitbar.canDrag" flags="IRW" description="&lt;code&gt;canDrag&lt;/code&gt; set to true to allow dragging of the split bar. Dragging the&amp;#010 Splitbar will resize it's ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}" name="canDrag" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgSplitbar">
</docItem>
<docItem ref="attr:ImgTab.align" flags="IRW" description="Alignment of title text" name="align" valueType="Alignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:ImgTab">
    <groups>positioning</groups>
</docItem>
<docItem ref="method:SectionItem.collapseSection" flags="" description=" Collapse a sectionItem, and hide all the items within the section (not including&amp;#010 the header).&amp;#010" name="collapseSection" type="method" definingClass="class:SectionItem">
</docItem>
<docItem ref="method:GridRenderer.getCellStyle" flags="" description=" Return the CSS class for a cell. By default this method has the following implementation:&lt;br&gt;&amp;#010 - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) &amp;#010   if defined.&lt;br&gt;&amp;#010 - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the &amp;#010   state of the record.&lt;br&gt;&amp;#010 The state of the record is indicated by adding a suffix to the base style.&amp;#010 There are four independant boolean states, which are combined in the order given:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt;&quot;Disabled&quot; : whether the cell is disabled; enable by setting the &quot;enabled&quot; flag on record&amp;#010     returned by getCellRecord&amp;#010 &lt;li&gt;&quot;Selected&quot; : whether cell is selected; enable by passing a Selection object as &quot;selection&quot;&amp;#010 &lt;li&gt;&quot;Over&quot; : mouse is over this cell; enable with showRollovers&amp;#010 &lt;li&gt;&quot;Dark&quot; : alternating color bands; enable with alternateRowStyles&amp;#010 &lt;/ol&gt;&amp;#010 For example, with a baseStyle of &quot;myCell&quot;, a cell which is selected, which the mouse is over,&amp;#010 and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.&amp;#010 &lt;p&gt;&amp;#010 Cell Styles customizable by:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;attaching a custom style to a record by setting &amp;#010    &lt;code&gt;record[this.recordCustomStyleProperty]&lt;/code&gt; to some valid CSS style name.  &amp;#010 &lt;li&gt;modifying the base style returned by getBaseStyle() [see that method for further &amp;#010     documentation on this]&amp;#010 &lt;li&gt;overriding this function&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="getCellStyle" type="method" definingClass="class:GridRenderer">
<params description="record object for this row and column" optional="false" name="record" type="object">
</params>
<params description="number of the row" optional="false" name="rowNum" type="number">
</params>
<params description="number of the column" optional="false" name="colNum" type="number">
</params>
<returns description="CSS style for this cell" type="CSSStyleName"></returns>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:menuKeys" name="menuKeys" type="group">
    <refs>attr:MenuItem.keys</refs>
    <refs>attr:MenuItem.keyTitle</refs>
</docItem>
<docItem ref="method:Canvas.setDragTracker" flags="" description=" If ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to &lt;code&gt;&quot;tracker&quot;&lt;/code&gt;, this method will be called&amp;#010 (if defined), when the user starts to drag this widget. It is an opportunity to update the&amp;#010 drag tracker to display something relative to this canvas.  Typical implementation will&amp;#010 be to call ${isc.DocUtils.linkForRef('classMethod:EventHandler.setDragTracker')}, passing in the desired custom tracker HTML &amp;#010 as a string&amp;#010" name="setDragTracker" type="method" definingClass="class:Canvas">
<returns description="Return false to suppress bubbling, and prevent &lt;code&gt;setDragTracker()&lt;/code&gt;                      from being called on this widget's ancestors." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dragTracker')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classMethod:Date.create" flags="" description="  Create a new &lt;code&gt;Date&lt;/code&gt; object - synonym for &lt;code&gt;new Date(arguments)&lt;/code&gt;&amp;#010" name="create" type="classMethod" definingClass="class:Date">
<returns description="Date object" type="Date"></returns>
</docItem>
<docItem ref="classMethod:RPCManager.startQueue" flags="" description="&amp;#010 Start queuing requests.  When queuing requests, an HTTP request will not be sent to&amp;#010 the server until RPCManager.sendQueue() is called.&amp;#010 &lt;p&gt;&amp;#010 All requests in a given queue must go to the same actionURL and use the same transport&amp;#010 (XMLHttp or frames).  If a request specifies a different actionURL or transport than&amp;#010 that of the requests currently on the queue, it will be sent to the server separately,&amp;#010 ahead of the queue, and a warning will be logged to the Developer Console.&amp;#010 &lt;p&gt;&amp;#010 Note that the server must process all requests sent as part of the queue before any&amp;#010 response is sent to the client.  You should avoid batching a request that will take a&amp;#010 long time to process on the server with any other requests because it will delay the&amp;#010 response of all requests in the queue.&amp;#010&amp;#010" name="startQueue" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="classMethod:RPCManager.sendQueue">
</seeAlso>
<params description="whether queuing should be enabled, default true.  Passing false                      will disable queuing but not send the queue yet, so that any&amp;#010                      queued requests will be sent along with the next&amp;#010                      send()/sendRequest()" optional="true" name="shouldQueue">
</params>
<returns description="whether queuing was already enabled before we called" type="boolean"></returns>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:Canvas.snapResizeToGrid" flags="IRW" description="Causes this canvas to snap to its parent's grid when resizing.&amp;#010 Note that this value defaults to the Canvas's &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} value if undefined." name="snapResizeToGrid" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:FormItem.showIcons" flags="IRWA" description="Set to false to suppress writing out any ${isc.DocUtils.linkForRef('attr:FormItem.icons')} for this item." name="showIcons" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:ServerObject.ID" flags="IR" description="You can optionally specify an ID on the ServerObject config block - in which case you can&amp;#010 use that value as the &quot;className&quot; argument when calling ${isc.DocUtils.linkForRef('classMethod:DMI.call')}.  This allows you to&amp;#010 hide the name of the server-side class used as the factory or implementer of the DMI from&amp;#010 the browser as a security precaution." name="ID" valueType="String" defaultValue="null" type="attr" definingClass="class:ServerObject">
<seeAlso ref="attr:ServerObject.className">
</seeAlso>
<seeAlso ref="classMethod:DMI.call">
</seeAlso>
</docItem>
<docItem ref="attr:StretchImgButton.iconSize" flags="IR" description="Size in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;iconWidth&lt;/code&gt; and &lt;code&gt;iconHeight&lt;/code&gt; properties can be used to&amp;#010 configure width and height separately." name="iconSize" valueType="integer" defaultValue="16" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:toolbar" name="toolbar" type="group">
    <refs>attr:Dialog.showToolbar</refs>
</docItem>
<docItem ref="method:TreeGrid.getNodeTitle" flags="" description="&amp;#010 Returns the title to show for a node in the tree column.  If the field specifies the&amp;#010 &lt;code&gt;name&lt;/code&gt; attribute, then the current &lt;code&gt;node[field.name]&lt;/code&gt; is returned.&amp;#010 Otherwise, the result of calling ${isc.DocUtils.linkForRef('method:Tree.getTitle')} on the node is called.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 You can override this method to return a custom title for node titles in the tree column.&amp;#010&amp;#010" name="getNodeTitle" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:Tree.getTitle">
</seeAlso>
<params description="The node for which the title is being requested." optional="false" name="node" type="TreeNode">
</params>
<params description="The index of the node." optional="false" name="recordNum" type="Number">
</params>
<params description="The field for which the title is being requested." optional="false" name="field" type="DSField">
</params>
<returns description="the title to display." type="HTML"></returns>
</docItem>
<docItem ref="classMethod:Validator.addValidators" flags="A" description="  Add several new validator types at once, as though ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')} were called&amp;#010  several times.&amp;#010 &amp;#010" name="addValidators" type="classMethod" definingClass="class:Validator">
<seeAlso ref="classMethod:Validator.addValidator">
</seeAlso>
<params description="Set of validators to add.  This parameter should      be a JavaScript object where the property names are validator type names, and the&amp;#010      property values are condition functions or expressions, for example:&lt;br&gt;&amp;#010      &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;{type1:condition1, type2:condition2}&lt;/code&gt;&lt;br&gt;." optional="false" name="newValidators" type="object">
</params>
    <groups>validation</groups>
</docItem>
<docItem ref="method:Selection.deselectRange" flags="" description="			Deselect range of records from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;, non-inclusive&amp;#010&amp;#010" name="deselectRange" type="method" definingClass="class:Selection">
<params description="start index to select" optional="false" name="start" type="number">
</params>
<params description="end index (non-inclusive)" optional="false" name="end" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:TreeGrid.getExtraIcon" flags="A" description=" Get an additional icon to show between the open icon and folder/node icon for a particular &amp;#010 node.&amp;#010&amp;#010" name="getExtraIcon" type="method" definingClass="class:TreeGrid">
<params description="tree node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="URL for the extra icon (null if none required)" type="URL"></returns>
</docItem>
<docItem ref="attr:ListGrid.fastCellUpdates" flags="I" description="Whether to speed up dynamic styling at the expense of slightly slower drawing.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;fastCellUpdates&lt;/code&gt; speeds up the dynamic styling system used by rollovers,&amp;#010 selections, and custom styling that calls ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCellStyle')}, at&amp;#010 the cost of slightly slower draw() and redraw() times." name="fastCellUpdates" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <groups>performance</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.floatPrecision" flags="IR" description="Tests whether the value for this field is a floating point number with the &amp;#010  appropriate number of decimal places - specified in &lt;code&gt;validator.precision&lt;/code&gt;&amp;#010  If the value is of higher precision, if &lt;code&gt;validator.roundToPrecision&lt;/code&gt; &amp;#010  is specified, the value will be rounded to the specified number of decimal places&amp;#010  and validation will pass, otherwise validation will fail." name="floatPrecision" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:ListGrid.fieldVisibilitySubmenuTitle" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canPickFields','this.canPickFields')} is true, this&amp;#010 attribute will be shown as the title for the menu item which contains a submenu with items &amp;#010 allowing the user to show and hide fields in the grid." name="fieldVisibilitySubmenuTitle" valueType="string" defaultValue="&quot;Columns&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Window.headerSrc" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Window.showHeaderBackground')} is &lt;code&gt;true&lt;/code&gt;, this property provides&amp;#010 the URL of the background image for the header." name="headerSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]Window/headerGradient.gif&quot; | null" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="method:Array.clearProperty" flags="" description=" Delete property in each item in this array.&amp;#010" name="clearProperty" type="method" definingClass="object:Array">
<params description="name of the property to clear" optional="false" name="property" type="string">
</params>
    <groups>iteration</groups>
</docItem>
<docItem ref="attr:FacetValue.width" flags="IR" description="Width of the cube grid facet value in pixels" name="width" valueType="number" defaultValue="facet.width" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="attr:ListGrid.isGrouped" flags="R" description="True if this listgrid is grouped, false otherwise" name="isGrouped" valueType="Boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:TabSet.tabBarPosition" flags="IR" description="Which side of the TabSet the TabBar should appear on." name="tabBarPosition" valueType="Side" defaultValue="Canvas.TOP" type="attr" definingClass="class:TabSet">
    <examples>${isc.DocUtils.linkForExampleId('tabsOrientation')}</examples>
    <groups>tabBar</groups>
</docItem>
<docItem ref="attr:Tree.pathDelim" flags="IRWA" description="Specifies the delimiter between node names.  The pathDelim is used to construct a unique&amp;#010 path to each node. A path can be obtained for any node by calling&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getPath')} and can be used to find any node in the tree by calling&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.find')}.  Note that you can also hand-construct a path - in other words&amp;#010 you are not required to call ${isc.DocUtils.linkForRef('method:Tree.getPath')} in order to later use&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.find')} to retrieve it.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The pathDelim can be any character or sequence of characters, but must be a unique string&amp;#010 with respect to the text that can appear in the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} that's used&amp;#010 for naming the nodes.  So for example, if you have the following tree:&amp;#010 &lt;pre&gt;&amp;#010 one&amp;#010   two&amp;#010     three/four&amp;#010 &lt;/pre&gt;&amp;#010 Then you will be unable to find the &lt;code&gt;three/four&lt;/code&gt; node using&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.find')} if your tree is using the default pathDelim of /.&amp;#010 In such a case, you can use a different pathDelim for the tree.  For example if you used |&amp;#010 for the path delim, then you can find the &lt;code&gt;three/four&lt;/code&gt; node in the tree above by&amp;#010 calling &lt;code&gt;tree.find(&quot;one|two|three/four&quot;)&lt;/code&gt;.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The pathDelim is used only by ${isc.DocUtils.linkForRef('method:Tree.getPath')} and ${isc.DocUtils.linkForRef('method:Tree.find')} and&amp;#010 does not affect any aspect of the tree structure or other forms of tree navigation (such as&amp;#010 via ${isc.DocUtils.linkForRef('method:Tree.getChildren')})." name="pathDelim" valueType="string" defaultValue="&quot;/&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:Tree.nameProperty">
</seeAlso>
<seeAlso ref="method:Tree.find">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.leaveScrollbarGap" flags="IRW" description="Whether to leave a gap for the vertical scrollbar, even when it's not present.&amp;#010 &lt;P&gt;&amp;#010 Note that if leaveScrollbarGap is false and vertical scrolling is introduced, fields&amp;#010 will be resized to fit the smaller body area if possible, in order to avoid horizontal&amp;#010 scrolling also being required." name="leaveScrollbarGap" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('autofitRows')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.completeOnTab" flags="IRW" description="If true, when the pickList is showing, the user can select the current value by hitting&amp;#010 the &lt;code&gt;Tab&lt;/code&gt; key." name="completeOnTab" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:FormItem.blurItem" flags="" description="			Takes focus from this form item's focusable element.&amp;#010" name="blurItem" type="method" definingClass="class:FormItem">
    <groups>eventHandling</groups>
    <groups>focus</groups>
</docItem>
<docItem ref="attr:TabSet.symmetricEdges" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 this property determines whether the same edge media will be used regardless of the tab&amp;#010 bar position, or whether different media should be used (necessary if the edge appearance is&amp;#010 not symmetrical on all sides).&amp;#010 &lt;P&gt;&amp;#010 If this property is set to false the paneContainer edge image URLs will be prefixed with&amp;#010 the tabBarPosition of the tabSet - for example &lt;code&gt;&quot;[SKIN]edge_top_T.gif&quot;&lt;/code&gt; rather&amp;#010 than just &lt;code&gt;&quot;[SKIN]edge_T.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 When &lt;code&gt;symmetricEdges&lt;/code&gt; is false, custom edge sizes for the pane container may be&amp;#010 specified via ${isc.DocUtils.linkForRef('attr:TabSet.topEdgeSizes')} et al, and custom edge offsets via &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.topEdgeOffsets')} et al." name="symmetricEdges" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:DataSourceField.multiple" flags="IR" description="Indicates that this field should always be Array-valued.  If the value derived from&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','XML or JSON data')} is singular, it will be wrapped in an Array.&amp;#010 &lt;P&gt;&amp;#010 Specifically for XML serialization and deserialization, &lt;code&gt;multiple:true&lt;/code&gt; behaves&amp;#010 similarly to the &amp;#010 &lt;a href='http://www.google.com/search?hl=en&amp;q=soap+array' onclick=&quot;window.open('http://www.google.com/search?hl=en&amp;q=soap+array');return false;&quot;&gt;SOAP array idiom&lt;/a&gt;, that is,&amp;#010 there will be a &quot;wrapper element&quot; named after the field name, whose contents will be several&amp;#010 elements of the specified ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')}.  &amp;#010 &lt;P&gt;&amp;#010 For example, ${isc.DocUtils.linkForRef('attr:Layout.members')} is declared with &lt;code&gt;type:&quot;Canvas&quot;,&amp;#010 multiple:true&lt;/code&gt;.  The correct XML format is thus:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;VLayout&amp;gt;&amp;#010     &amp;lt;members&amp;gt;&amp;#010         &amp;lt;Canvas ID=&quot;myCanvas&quot; ... /&amp;gt;&amp;#010         &amp;lt;ListGrid ID=&quot;myGrid&quot; .../&amp;gt;&amp;#010         &amp;lt;Toolstrip ID=&quot;myToolStrip&quot; ... /&amp;gt;&amp;#010     &amp;lt;/members&amp;gt;&amp;#010 &amp;lt;/VLayout&amp;gt;&amp;#010 &lt;/pre&gt;" name="multiple" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>xmlSerialize</groups>
    <groups>componentSchema</groups>
</docItem>
<docItem ref="attr:ListGrid.canDragRecordsOut" flags="IRW" description="Indicates whether records can be dragged from this listGrid and dropped elsewhere." name="canDragRecordsOut" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridRecord.canDrag">
</seeAlso>
<seeAlso ref="attr:ListGridRecord.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragListMove')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="classMethod:Page.unregisterKey" flags="" description=" Clears an action registered to fire on a specific a keyPress event via the ${isc.DocUtils.linkForRef('classMethod:Page.registerKey')}&amp;#010 method. &amp;#010" name="unregisterKey" type="classMethod" definingClass="class:Page">
<seeAlso ref="classMethod:Page.registerKey">
</seeAlso>
<params description="Name of key to clear registry enties for." optional="false" name="actionID" type="KeyName">
</params>
<params description="target specified when the action was registered for the key." optional="true" name="target" type="object">
</params>
    <groups>KeyRegistry</groups>
</docItem>
<docItem ref="attr:RichTextEditor.controlGroups" flags="IRA" description="An array of control group names (strings) specifying which groups of controls should &amp;#010  be included in the editor toolbar.&lt;br&gt;&amp;#010  For each control group name, this[controlGroupName] should be defined as an array of &amp;#010  ${isc.DocUtils.linkForRef('type:ControlName')}s, allowing the controlGroup to be customized." name="controlGroups" valueType="array" defaultValue="[&quot;fontControls&quot;, &quot;formatControls&quot;, &quot;styleControls&quot;, &quot;colorControls&quot;]" type="attr" definingClass="class:RichTextEditor">
    <examples>${isc.DocUtils.linkForExampleId('RichTextEditor')}</examples>
</docItem>
<docItem ref="attr:Window.modalMask" flags="R" description="A ScreenSpan instance used to darken the rest of a page when a modal window is&amp;#010 active. To use, set ${isc.DocUtils.linkForRef('attr:Window.showModalMask')} to true, add a CSS style &amp;#010 &quot;modalMask&quot; to the active skin (generally with background-color set), &amp;#010 and adjust ${isc.DocUtils.linkForRef('attr:Window.modalMaskOpacity')}." name="modalMask" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
    <groups>modal</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Log.logIsDebugEnabled" flags="" description=" Check whether a message logged at &quot;debug&quot; priority would be visible in the log.&amp;#010 &lt;P&gt;&amp;#010 As with logDebug, category is defaulted to the current className.  Use this method to avoid&amp;#010 putting together expensive log messages if they will never appear in the log.&amp;#010&amp;#010" name="logIsDebugEnabled" type="method" definingClass="class:Log">
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem exampleConfig="ValuesManager.xml" type="class" ref="class:ValuesManager" description="The ValuesManager manages data from multiple member forms.&amp;#010 &lt;P&gt;&amp;#010 If a single logical form needs to be separated into multiple DynamicForm instances for&amp;#010 Layout purposes (for example, spanning one logical form across multiple Tabs), a&amp;#010 ValuesManager can be used to make the forms act as one logical form, supporting all&amp;#010 value-related APIs otherwise called on DynamicForm directly.&amp;#010 &lt;P&gt;&amp;#010 A ValuesManager has no visual representation - it is strictly a logical entity, and the&amp;#010 member forms provide the user interface.  You can initialize a ValuesManager with a set of&amp;#010 member forms (by setting ${isc.DocUtils.linkForRef('attr:ValuesManager.members')} at init) or add and remove member&amp;#010 forms dynamically.&amp;#010 &lt;P&gt;&amp;#010 Calling ${isc.DocUtils.linkForRef('method:ValuesManager.setValues')} on a ValuesManager will automatically route new&amp;#010 field values to whichever member form is showing an editor for that field.  Likewise,&amp;#010 calling ${isc.DocUtils.linkForRef('method:ValuesManager.validate')} will validate all member forms, and&amp;#010 ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')} will initiate a save operation which aggregates values from&amp;#010 all member forms.&amp;#010 &lt;P&gt;&amp;#010 Like a DynamicForm, a ValuesManager can be databound by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ValuesManager.dataSource')}.  In this case all member forms must also be bound to the&amp;#010 same DataSource.&amp;#010 &lt;P&gt;&amp;#010 In general, when working with a ValuesManager and its member forms, call APIs on the&amp;#010 ValuesManager whenever you are dealing with values that span multiple forms, and only call&amp;#010 APIs on member forms that are specific to that form or its fields.&amp;#010 &lt;P&gt;&amp;#010 Note that, just as a DynamicForm can track values that are not shown in any FormItem, a&amp;#010 ValuesManager may track values for which there is no FormItem in any member form.  However,&amp;#010 when using a ValuesManager these extra values are only allowed on the ValuesManager itself.&amp;#010 Member forms will not track values for which they do not have FormItems." name="ValuesManager">
    <methods>method:ValuesManager.setDataSource</methods>
    <methods>method:ValuesManager.getDataSource</methods>
    <methods>method:ValuesManager.validate</methods>
    <methods>method:ValuesManager.getValidatedValues</methods>
    <methods>method:ValuesManager.setErrors</methods>
    <methods>method:ValuesManager.addFieldErrors</methods>
    <methods>method:ValuesManager.setFieldErrors</methods>
    <methods>method:ValuesManager.clearErrors</methods>
    <methods>method:ValuesManager.clearFieldErrors</methods>
    <methods>method:ValuesManager.getErrors</methods>
    <methods>method:ValuesManager.getFieldErrors</methods>
    <methods>method:ValuesManager.hasErrors</methods>
    <methods>method:ValuesManager.hasFieldErrors</methods>
    <methods>method:ValuesManager.showErrors</methods>
    <methods>method:ValuesManager.showFieldErrors</methods>
    <methods>method:ValuesManager.getValues</methods>
    <methods>method:ValuesManager.setValues</methods>
    <methods>method:ValuesManager.clearValues</methods>
    <methods>method:ValuesManager.getMemberValues</methods>
    <methods>method:ValuesManager.setMemberValues</methods>
    <methods>method:ValuesManager.rememberValues</methods>
    <methods>method:ValuesManager.resetValues</methods>
    <methods>method:ValuesManager.valuesHaveChanged</methods>
    <methods>method:ValuesManager.getValue</methods>
    <methods>method:ValuesManager.setValue</methods>
    <methods>method:ValuesManager.addMember</methods>
    <methods>method:ValuesManager.addMembers</methods>
    <methods>method:ValuesManager.removeMember</methods>
    <methods>method:ValuesManager.removeMembers</methods>
    <methods>method:ValuesManager.getMembers</methods>
    <methods>method:ValuesManager.getMember</methods>
    <methods>method:ValuesManager.getMemberForField</methods>
    <methods>method:ValuesManager.getItem</methods>
    <methods>method:ValuesManager.handleHiddenValidationErrors</methods>
    <methods>method:ValuesManager.editNewRecord</methods>
    <methods>method:ValuesManager.editRecord</methods>
    <methods>method:ValuesManager.editSelectedData</methods>
    <methods>method:ValuesManager.saveData</methods>
    <methods>method:ValuesManager.submit</methods>
    <methods>method:ValuesManager.cancel</methods>
    <methods>method:ValuesManager.filterData</methods>
    <methods>method:ValuesManager.fetchData</methods>
    <treeLocation>Client Reference/Forms</treeLocation>
    <attrs>attr:ValuesManager.dataSource</attrs>
    <attrs>attr:ValuesManager.members</attrs>
    <attrs>attr:ValuesManager.unknownErrorMessage</attrs>
    <attrs>attr:ValuesManager.disableValidation</attrs>
    <examples>${isc.DocUtils.linkForExampleId('formSplitting')}</examples>
</docItem>
<docItem ref="method:Array.setLength" flags="" description=" Set the length of this list.&amp;#010 &lt;P&gt;&amp;#010 If the length of the list is shortened, any elements past the new length of the list are removed.&amp;#010 If the length is increased, all positions past the old length have the value&amp;#010 &lt;code&gt;undefined&lt;/code&gt;.&amp;#010&amp;#010" name="setLength" type="method" definingClass="object:Array">
<params description="new length" optional="false" name="length" type="number">
</params>
    <groups>modification</groups>
</docItem>
<docItem ref="method:ListGridField.cellChanged" flags="" description="  Callback fired when field changes value as the result of a cell edit.  Fired only on&amp;#010  successful save of edit, when the new value doesn't match the value before editing.&lt;br&gt;&amp;#010  &lt;p&gt;&amp;#010  Same signature as ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')}, but defined on a per-field basis.&amp;#010&amp;#010" name="cellChanged" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.cellChanged">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="method:FormItem.itemHoverHTML" flags="A" description="  If defined, this method should return the HTML to display in a hover canvas when the &amp;#010  user holds the mousepointer over this item.  Return null to suppress the hover &amp;#010  canvas altogether.&lt;br&gt;&amp;#010  If not defined, &lt;code&gt;dynamicForm.itemHoverHTML()&lt;/code&gt; will be evaluated to &amp;#010  determine hover content instead.&amp;#010&amp;#010" name="itemHoverHTML" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.prompt">
</seeAlso>
<seeAlso ref="method:FormItem.itemHover">
</seeAlso>
<seeAlso ref="method:FormItem.titleHoverHTML">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('itemHoverHTML')}</examples>
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:StretchImg.setState" flags="" description=" Set the specified image's state to newState and update the displayed image given by&amp;#010 whichPart, or set the state for all images to newState and update the displayed images&amp;#010 if whichPart is not provided.&amp;#010" name="setState" type="method" definingClass="class:StretchImg">
<params description="name for the new state (&quot;off&quot;, &quot;down&quot;, etc)" optional="false" name="newState" type="string">
</params>
<params description="name of the piece to set (&quot;start&quot;, &quot;stretch&quot; or &quot;end&quot;)											if not specified, sets them all" optional="true" name="whichPart" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ResultTree.dataArrived" flags="" description=" This callback fires whenever the resultTree receives new nodes from the server, after&amp;#010 the new nodes have been integrated into the tree.&amp;#010 &amp;#010" name="dataArrived" type="method" definingClass="class:ResultTree">
<params description="The parentNode for which children were just loaded" optional="false" name="parentNode" type="TreeNode">
</params>
</docItem>
<docItem ref="classMethod:Class.setProperties" flags="" description="	Apply a set of properties to a class object, calling the appropriate setter class methods if&amp;#010	any are found.&amp;#010&amp;#010" name="setProperties" type="classMethod" definingClass="class:Class">
<params description="objects with properties to add (think named parameters).										all the properties of each argument will be applied one after another&amp;#010										so later properties will override" optional="true" name="arguments 0-N" type="object">
</params>
</docItem>
<docItem ref="attr:DynamicForm.method" flags="IRW" description="The mechanism by which form data is sent to the action URL. See FormMethod type&amp;#010 for details.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this is used only in the very rare case that a form is used to submit data&amp;#010 directly to a URL.  Normal server contact is through &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}." name="method" valueType="FormMethod" defaultValue="DynamicForm.POST" type="attr" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="classMethod:RPCManager.resendTransaction" flags="A" description=" Resend a transaction to the server.&amp;#010 &lt;P&gt;&amp;#010 A transaction means a batch of one or more RPCRequests that have already been sent to&amp;#010 the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')}.&amp;#010 &lt;P&gt;&amp;#010 This is typically used as part of ${isc.DocUtils.linkForRef('group:relogin','Relogin')} handling to resend a&amp;#010 request that encountered a session timeout.&amp;#010&amp;#010" name="resendTransaction" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="group:relogin">
</seeAlso>
<params description="id of the transaction to be re-sent" optional="false" name="transactionNum" type="id">
</params>
</docItem>
<docItem ref="method:ActiveXControl.getPluginID" flags="" description="  Returns the ID for this ISC ActiveX control object.&amp;#010  If the &lt;code&gt;id&lt;/code&gt; property was specified for the object, that will be used, otherwise &amp;#010  the ID will be auto-generated.&amp;#010" name="getPluginID" type="method" definingClass="class:ActiveXControl">
</docItem>
<docItem ref="attr:DetailViewer.data" flags="IRW" description="A single record object or an array of them, specifying data. Note that DetailViewers do&amp;#010 not observe changes to the data array (in other words they will not automatically&amp;#010 re-draw when the data provided via this property is altered)." name="data" valueType="Array of DetailViewerRecord" defaultValue="null" type="attr" definingClass="class:DetailViewer">
    <setter>setData</setter>
    <groups>basics</groups>
</docItem>
<docItem ref="attr:FormItemIcon.neverDisable" flags="IRWA" description="If &lt;code&gt;icon.neverDisable&lt;/code&gt; is true, when this form item is disabled, the &amp;#010  icon will remain enabled. &amp;#010  Note that disabling the entire form will disable all items, together with their &amp;#010  icons including those marked as neverDisable - this property only has an effect &amp;#010  if the form is enabled and a specific item is disabled within it." name="neverDisable" valueType="boolean" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
    <groups>formIcons</groups>
</docItem>
<docItem ref="classAttr:RPCManager.defaultTransport" flags="IRW" description="Selects the transport use for RPC requests by default.  You can override this setting on&amp;#010 a per-request basis by setting ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}." name="defaultTransport" valueType="RPCTransport" defaultValue="&quot;xmlHttpRequest&quot;" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="attr:RPCRequest.transport">
</seeAlso>
</docItem>
<docItem ref="class:ImgSplitbar" description="Subclass of the ${isc.DocUtils.linkForRef('class:Img')} class. As with the ${isc.DocUtils.linkForRef('class:Splitbar')} class, &amp;#010  widgets of this class can be displayed as a resize-bar for widgets &amp;#010  in Layouts where showResizeBar is set to true. Provides a different appearance from&amp;#010  the &lt;code&gt;Splitbar&lt;/code&gt; class.&lt;br&gt;&amp;#010  To specify the resizeBar class for some layout, use the ${isc.DocUtils.linkForRef('attr:Layout.resizeBarClass')}&amp;#010  property." name="ImgSplitbar" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:ImgSplitbar.target</attrs>
    <attrs>attr:ImgSplitbar.vertical</attrs>
    <attrs>attr:ImgSplitbar.canDrag</attrs>
    <attrs>attr:ImgSplitbar.canCollapse</attrs>
    <attrs>attr:ImgSplitbar.skinImgDir</attrs>
    <attrs>attr:ImgSplitbar.src</attrs>
    <attrs>attr:ImgSplitbar.hSrc</attrs>
    <attrs>attr:ImgSplitbar.vSrc</attrs>
<seeAlso ref="class:Layout">
</seeAlso>
<seeAlso ref="class:Splitbar">
</seeAlso>
</docItem>
<docItem ref="method:ValuesManager.getDataSource" flags="A" description=" Returns the dataSource for this valuesManager.  Will return null if this is not a &amp;#010 data-bound valuesManager instance.&amp;#010" name="getDataSource" type="method" definingClass="class:ValuesManager">
<returns description="Datasource object for this valuesManager." type="DataSource"></returns>
</docItem>
<docItem ref="method:GridRenderer.getCellValue" flags="" description=" Return the HTML to display in this cell.  Implementing this is required to get a non-empty&amp;#010 grid.&amp;#010&amp;#010" name="getCellValue" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="HTML to display in this cell" type="string"></returns>
</docItem>
<docItem ref="classMethod:Validator.addValidator" flags="A" description=" Add a new validator type that can be specified as ${isc.DocUtils.linkForRef('attr:Validator.type')} anywhere&amp;#010 validators are declared, such as ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.validators')}.&amp;#010 &lt;br&gt;&amp;#010 The &lt;code&gt;condition&lt;/code&gt; argument should be a method of the same signature as&amp;#010 ${isc.DocUtils.linkForRef('method:Validator.condition')}.&amp;#010&amp;#010" name="addValidator" type="classMethod" definingClass="class:Validator">
<seeAlso ref="classMethod:Validator.addValidators">
</seeAlso>
<params description="type name for the new validator" optional="false" name="type" type="String">
</params>
<params description="function or expression to evaluate to determine whether                                 validation was successful" optional="false" name="condition" type="StringMethod">
</params>
    <groups>validation</groups>
</docItem>
<docItem ref="attr:ImgButton.autoFit" flags="IRW" description="If true, ignore the specified size of this widget and always size just large&amp;#010 enough to accomodate the title.  If &lt;code&gt;setWidth()&lt;/code&gt; is explicitly called on an&amp;#010 autoFit:true button, autoFit will be reset to &lt;code&gt;false&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for StretchImgButton instances, autoFit will occur horizontally only, as &amp;#010 unpredictable vertical sizing is likely to distort the media. If you do want vertical &amp;#010 auto-fit, this can be achieved by simply setting a small height, and having &amp;#010 overflow:&quot;visible&quot;" name="autoFit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <setter>setAutoFit</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ListGrid.showField" flags="" description=" Force a field to be shown.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: If a field.showIf expression exists, it will be destroyed.&amp;#010&amp;#010" name="showField" type="method" definingClass="class:ListGrid">
<params description="field to show" optional="false" name="field" type="field name or ListGridField">
</params>
<params description="If passed, don't resize non-explicitly sized columns                                       to fill the available space." optional="true" name="suppressRelayout" type="boolean">
</params>
    <examples>${isc.DocUtils.linkForExampleId('columnOrder')}</examples>
</docItem>
<docItem ref="attr:SelectItem.defaultToFirstOption" flags="IRW" description="Select the first option as the default value for this SelectItem. If options are derived from&amp;#010 a dataSource, the first value returned by the server will be used, otherwise the first&amp;#010 value in the valueMap. If enabled, this setting overrides ${isc.DocUtils.linkForRef('attr:SelectItem.defaultValue')} and&amp;#010 ${isc.DocUtils.linkForRef('method:SelectItem.defaultDynamicValue')}." name="defaultToFirstOption" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="attr:SectionHeader.icon" flags="IRA" description="Base filename of the icon that represents open and closed states. The default settings&amp;#010 also change the icon for disabled sections, so a total of four images are required&amp;#010 (opened, closed, Disabled_opened, Disabled_closed)." name="icon" valueType="SCImgURL" defaultValue="&quot;[SKIN]SectionHeader/opener.gif&quot;" type="attr" definingClass="class:SectionHeader">
</docItem>
<docItem ref="classMethod:Log.clearPriority" flags="" description=" Clear the priority setting for a particular category, so that the category's effective&amp;#010 priority returns to &lt;code&gt;Log.defaultPriority&lt;/code&gt;&lt;br&gt;&amp;#010 If the optional second parameter is passed, the specific priority setting for the &amp;#010 category on that object will be cleared, so logs in that category on that object will&amp;#010 be logged at the global priority level for the category.&amp;#010&amp;#010" name="clearPriority" type="classMethod" definingClass="class:Log">
<params description="category name" optional="false" name="category" type="String">
</params>
<params description="Optional instance or class object - if passed                                        clear logging priority for the appropriate category&amp;#010                                        on that object." optional="true" name="object" type="Class or Instance object">
</params>
</docItem>
<docItem ref="attr:PickList.pickListWidth" flags="IRW" description="Default width to show the pickList.&amp;#010 If not specified, the width of this form item's element will be used instead." name="pickListWidth" valueType="number" defaultValue="null" type="attr" definingClass="interface:PickList">
    <examples>${isc.DocUtils.linkForExampleId('listComboBox')}</examples>
</docItem>
<docItem ref="attr:Label.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:DataSource.addData" flags="" description=" Perform an &quot;add&quot; DataSource operation against this DataSource, to create a new DataSource&amp;#010 record.&amp;#010&amp;#010" name="addData" type="method" definingClass="class:DataSource">
<params description="new record" optional="false" name="newRecord" type="Object">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on                                                       the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="method:ListGrid.selectRecord" flags="" description="&amp;#010  Select/deselect a records passed in explicitly, or by index.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectRecord" type="method" definingClass="class:ListGrid">
<params description="record (or row number) to select" optional="false" name="record" type="ListGridRecord | number">
</params>
<params description="new selection state (if null, defaults to true)" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="classMethod:FileLoader.loadJSFiles" flags="" description="&amp;#010 Loads the specified JS files into the context of the current page.&amp;#010&amp;#010" name="loadJSFiles" type="classMethod" definingClass="class:FileLoader">
<params description="List of URLs pointing to JS files to load.  This can either be a                                string with comma separated URLs or an Array of URLs." optional="false" name="URLs" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified URLs                                      has completed loading." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="class:ImgTab" description="Specialized StretchImgButton used by TabSet/TabBar for tabs" name="ImgTab" type="class">
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:ImgTab.capSize</attrs>
    <attrs>attr:ImgTab.skinImgDir</attrs>
    <attrs>attr:ImgTab.baseStyle</attrs>
    <attrs>attr:ImgTab.titleStyle</attrs>
    <attrs>attr:ImgTab.src</attrs>
    <attrs>attr:ImgTab.showRollOver</attrs>
    <attrs>attr:ImgTab.showFocus</attrs>
    <attrs>attr:ImgTab.showFocused</attrs>
    <attrs>attr:ImgTab.align</attrs>
</docItem>
<docItem ref="attr:DataSourceField.group" flags="IR" description="For use in ${isc.DocUtils.linkForRef('group:componentSchema')}, indicates what group to place the property in when&amp;#010 editing in Visual Builder." name="group" valueType="string" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentSchema</groups>
</docItem>
<docItem ref="method:FormItem.click" flags="" description=" Called when this FormItem is clicked on.&amp;#010 &lt;P&gt;&amp;#010 Note: &lt;code&gt;click()&lt;/code&gt; is available on StaticTextItem, BlurbItems, ButtonItem, and&amp;#010 derivatives.  Other form items (such as HiddenItem) do not support &lt;code&gt;click()&lt;/code&gt;.&amp;#010&amp;#010" name="click" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="group:eventBubbling" name="eventBubbling" type="group">
</docItem>
<docItem ref="attr:FormItemIcon.width" flags="IRW" description="If set, this property determines the width of this icon in px.&amp;#010      If unset the form item's &lt;code&gt;iconWidth&lt;/code&gt; property will be used instead." name="width" valueType="number" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.iconWidth">
</seeAlso>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Scrollbar.trackEndWidth" flags="IRWA" description="The minimum pixel width of the track end segments (if enabled with showTrackEnds)." name="trackEndWidth" valueType="number" defaultValue="12" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:ImgButton.state" description="Current &quot;state&quot; of this widget. StatefulCanvases will have a different appearance based&amp;#010 on their current state. By default this is handled by changing the css className applied to&amp;#010 the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is&amp;#010 done.&lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the &amp;#010 appearance may also be updated by changing the src of the rendered image. See&amp;#010 ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL &amp;#010 is modified to reflect the state of the widget in this case." name="state" valueType="State" defaultValue="&quot;&quot;" definingClass="class:ImgButton">
    <getter>getState</getter>
    <setter>setState</setter>
<seeAlso ref="type:State">
</seeAlso>
<seeAlso ref="group:state">
</seeAlso>
    <groups>state</groups>
</docItem>
<docItem ref="method:ValuesManager.saveData" flags="" description="&amp;#010 Validate and then save the form's current values to the ${isc.DocUtils.linkForRef('class:DataSource')} this form is&amp;#010 bound to.&amp;#010 &lt;p&gt;&amp;#010 If client-side validators are defined, they are executed first, and if any errors are&amp;#010 found the save is aborted and the form will show the errors.&amp;#010 &lt;p&gt;&amp;#010 If client-side validation passes, a ${isc.DocUtils.linkForRef('class:DSRequest')} will be sent, exactly as though&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.addData')} or ${isc.DocUtils.linkForRef('method:DataSource.updateData')} had been called with &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','the form's values')} as data.  The&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')} will be either &quot;update&quot; or &quot;add&quot; depending&amp;#010 on whether values were initially provided via &lt;code&gt;editRecord()&lt;/code&gt; or&amp;#010 &lt;code&gt;editNew()&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 On either a client-side or server-side validation failure, validation errors will be&amp;#010 displayed in the form.  Visible items within a DynamicForms will be redrawn to display&amp;#010 errors. Validation failure occuring on hidden items, or DataSource fields with no &amp;#010 associated form items may be handled via ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}&amp;#010 or ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.validationURL','validationURL')} can be set to do validation against a&amp;#010 different URL from where the form will ultimately save, as part of an incremental&amp;#010 upgrade strategy for Struts and Struts-like applications.&amp;#010&amp;#010" name="saveData" type="method" definingClass="class:ValuesManager">
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('addOperation')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="group:formIcons" name="formIcons" type="group">
    <refs>method:FormItemIcon.click</refs>
    <refs>method:FormItemIcon.keyPress</refs>
    <refs>method:FormItem.iconClick</refs>
    <refs>method:FormItem.iconKeyPress</refs>
    <refs>object:FormItemIcon</refs>
    <refs>attr:FormItem.icons</refs>
    <refs>attr:FormItem.defaultIconSrc</refs>
    <refs>attr:FormItem.showOverIcons</refs>
    <refs>attr:FormItem.showFocusedIcons</refs>
    <refs>attr:FormItem.iconVAlign</refs>
    <refs>attr:FormItem.iconHeight</refs>
    <refs>attr:FormItem.iconWidth</refs>
    <refs>attr:FormItem.showIcons</refs>
    <refs>attr:FormItemIcon.src</refs>
    <refs>attr:FormItemIcon.showOver</refs>
    <refs>attr:FormItemIcon.showFocused</refs>
    <refs>attr:FormItemIcon.showFocusedWithIcon</refs>
    <refs>attr:FormItemIcon.neverDisable</refs>
    <refs>attr:FormItemIcon.width</refs>
    <refs>attr:FormItemIcon.height</refs>
    <refs>attr:TextAreaItem.iconVAlign</refs>
</docItem>
<docItem ref="method:Progressbar.getLength" flags="" description=" Returns the current width of a horizontal progressbar, or height of a vertical progressbar.&amp;#010&amp;#010" name="getLength" type="method" definingClass="class:Progressbar">
<returns description="the length of the progressbar" type="number"></returns>
</docItem>
<docItem ref="method:Log.setDefaultLogPriority" flags="" description=" Set the default priority of logging for messages logged on this Class or Instance object.&amp;#010 All categories for which there is no explicit, instance level logging priority set will&amp;#010 log at this level on this object.&lt;br&gt;  &amp;#010 To set the default visible log priority across the entire page, use&amp;#010 &lt;code&gt;isc.Log.setDefaultPriority()&lt;/code&gt; instead.&amp;#010" name="setDefaultLogPriority" type="method" definingClass="class:Log">
<seeAlso ref="classMethod:Log.setPriority">
</seeAlso>
<params description="Category for which the log priority will be updated. If not                          all logs on this canvas will be logged at the priority passed in." optional="false" name="category" type="string">
</params>
<params description="priority level" optional="false" name="priority" type="LogPriority">
</params>
</docItem>
<docItem ref="attr:TabBar.baseLineCapSize" flags="IR" description="Set ${isc.DocUtils.linkForRef('attr:StretchImg.capSize')} for the ${isc.DocUtils.linkForRef('group:baseLine')} stretchImg." name="baseLineCapSize" valueType="number" defaultValue="2" type="attr" definingClass="class:TabBar">
    <groups>baseLine</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DetailViewerField.type" flags="IR" description="Specifies the type of this DetailViewerField.  By default (value is &lt;code&gt;null&lt;/code&gt;)&amp;#010 the field shows a field title on the left and the field value on the right.  There are&amp;#010 two special values for this attribute:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&quot;header&quot; - If you specify type &quot;header&quot;, the field spans both the field name and&amp;#010 field value columns and contains text defined in the ${isc.DocUtils.linkForRef('attr:DetailViewerField.value')}&amp;#010 attribute with the style specifed by ${isc.DocUtils.linkForRef('attr:DetailViewer.headerStyle')}.  You can use this&amp;#010 field type as a titled separator.&amp;#010 &lt;li&gt;&quot;separator&quot; - If you specify type &quot;separator&quot;, the field spans both the field name&amp;#010 and the field value columns with no text, and is styled using the style specified via&amp;#010 ${isc.DocUtils.linkForRef('attr:DetailViewer.separatorStyle')}.  The height of the separator field can be controlled&amp;#010 via ${isc.DocUtils.linkForRef('attr:DetailViewerField.height')}.&amp;#010 &lt;/ul&gt;" name="type" valueType="String" defaultValue="null" type="attr" definingClass="object:DetailViewerField">
</docItem>
<docItem ref="classAttr:ValidatorTypes.isOneOf" flags="IR" description="Tests whether the value for this field matches any value from an arbitrary&amp;#010 list of acceptable values.  The set of acceptable values is specified via&amp;#010 the &lt;code&gt;list&lt;/code&gt; property on the validator, which should be set to an array of&amp;#010 values. If validator.list is not supplied, the valueMap for the field will be used.&amp;#010 If there is no valueMap, not providing validator.list is an error." name="isOneOf" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="method:TabSet.scrollBack" flags="" description=" If there is not enough space to display all the tabs in this tabSet, this method will &amp;#010 scroll the previous tab (that first tab that is clipped at the beginning of the tab-bar) &amp;#010 into view.&amp;#010" name="scrollBack" type="method" definingClass="class:TabSet">
</docItem>
<docItem ref="method:Button.setBaseStyle" flags="" description=" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010" name="setBaseStyle" type="method" definingClass="class:Button">
<params description="new base style" optional="false" name="style" type="className">
</params>
</docItem>
<docItem ref="attr:ListGrid.loadingMessage" flags="IR" description="If you have a databound listGrid and you scroll out of the currently loaded dataset, by&amp;#010 default you will see blank rows until the server returns the data for those rows.  The&amp;#010 loadingMessage attribute allows you to specify arbitrary html that will be shown in each&amp;#010 such &quot;blank&quot; record while the data for that record is loading." name="loadingMessage" valueType="string" defaultValue="&quot;\&amp;nbsp;&quot;" type="attr" definingClass="class:ListGrid">
    <groups>emptyMessage</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Array.max" flags="" description="&amp;#010 			Returns the largest number in the array, skipping non-numeric values.&amp;#010&amp;#010			If the start and/or end are given, searches the specified subset of the list.&amp;#010&amp;#010" name="max" type="method" definingClass="object:Array">
<params description="optional start index (default is 0)" optional="true" name="start" type="number">
</params>
<params description="optional end index (default is list.length)" optional="true" name="end" type="number">
</params>
<returns description="maximum of all items in the list, or null if all values are non-numeric" type="number"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="method:Array.getUniqueItems" flags="" description=" Return a list of each unique item in this list exactly once.&amp;#010 &lt;P&gt;&amp;#010 Returns in the same order they were found in the list.&amp;#010 &lt;P&gt;&amp;#010 Usage example:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;uniqueList = myArray.getProperty(&quot;foo&quot;).getUniqueItems();&amp;#010&amp;#010" name="getUniqueItems" type="method" definingClass="object:Array">
<returns description="list of each unique item in the list" type="array"></returns>
    <groups>subset</groups>
</docItem>
<docItem ref="method:CubeGrid.facetRemoved" flags="" description=" Notification fired when a facet is removed.&amp;#010 &amp;#010" name="facetRemoved" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.facetAdded" description="&lt;br&gt;&lt;i&gt;methodType&lt;/i&gt;  handler"></seeAlso>
<params description="facetId that was removed" optional="false" name="facetId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="method:Array.map" flags="" description=" Return an array where the value of item &lt;code&gt;i&lt;/code&gt; is the result of calling the provided&amp;#010 function on item &lt;code&gt;i&lt;/code&gt; in this array.&amp;#010 &lt;P&gt;&amp;#010 The function to call can either be provided directly as a function object, in which case it&amp;#010 is invoked with the item as the first argument, or can be provided as the String name of a&amp;#010 method present on each item, which will be invoked.  In the latter case, if any item is null&amp;#010 or lacks the named method, null will be returned for that item.&amp;#010 &lt;P&gt;&amp;#010 Examples:&lt;PRE&gt;&amp;#010    // line up widgets at 20 pixels from page edge&amp;#010    [widget1, widget2].map(&quot;setPageLeft&quot;, 20);&amp;#010&amp;#010    // find furthest right widget&amp;#010    [widget1, widget2].map(&quot;getPageRight&quot;).max();&amp;#010 &lt;/PRE&gt;&amp;#010 &amp;#010" name="map" type="method" definingClass="object:Array">
<params description="function object, or name of method" optional="false" name="method" type="string or function">
</params>
<params description="arguments to pass to the function or method                                           invoked on each item" optional="true" name="(arguments 1-N)" type="any">
</params>
<returns description="array of returned values" type="array"></returns>
    <groups>iteration</groups>
</docItem>
<docItem ref="method:Canvas.getSnapTo" flags="" description=" Return the snapTo value of this object&amp;#010" name="getSnapTo" type="method" definingClass="class:Canvas">
<returns description="snapTo" type="string"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="classMethod:Hover.show" flags="" description=" Displays a standard Hover canvas containing the specified HTML content.&lt;br&gt;&amp;#010 This method may also be called to modify the content of the hover if it is already showing.&amp;#010 Call ${isc.DocUtils.linkForRef('classMethod:Hover.hide')} to hide the canvas again.&lt;br&gt;&amp;#010 A common use case for calling this method is to asynchronously fetch detail data from the&amp;#010 server about some component, and display it in the Hover canvas when the data is returned.&amp;#010 Note that in this case you will typically need to verify that the user is still hovering &amp;#010 over the component in question before calling Hover.show() - if the user has moved the mouse &amp;#010 off the component, the information will not apply to whatever is now under the mouse. &amp;#010 Suggested approaches for handling this are to either use a ${isc.DocUtils.linkForRef('method:Canvas.mouseOut')} handler&amp;#010 to track when the user moves off the component, or checking ${isc.DocUtils.linkForRef('classMethod:EventHandler.getTarget')}&amp;#010 as part of the asynchronous callback&amp;#010 &lt;p&gt;&amp;#010 The default Hover canvas position will be based on the mouse pointer position, adjusted by&amp;#010 ${isc.DocUtils.linkForRef('classAttr:Hover.leftOffset')} and ${isc.DocUtils.linkForRef('classAttr:Hover.topOffset')}. If this position would render the&amp;#010 Hover canvas partially clipped, it will be automatically modified to ensure the Hover &amp;#010 is entirely visible.&amp;#010" name="show" type="classMethod" definingClass="class:Hover">
<params description="contents for the hover" optional="false" name="contents" type="html">
</params>
<params description="object containing attributes for managing the hover canvas'   appearance. Valid properties include:&lt;ul&gt;&amp;#010  &lt;li&gt;left, top, width, height&amp;#010  &lt;li&gt;baseStyle&amp;#010  &lt;li&gt;opacity&amp;#010  &lt;li&gt;wrap&amp;#010  &lt;li&gt;moveWithMouse [overrides ${isc.DocUtils.linkForRef('classAttr:Hover.moveWithMouse')}]&amp;#010 &lt;/ul&gt;" optional="false" name="properties" type="object">
</params>
</docItem>
<docItem ref="attr:MenuButton.showMenuButtonImage" flags="IRW" description="show menu button image (up / down arrowhead) for this menu button" name="showMenuButtonImage" valueType="boolean" defaultValue="true" type="attr" definingClass="class:MenuButton">
    <setter>setShowMenuButtonImage</setter>
</docItem>
<docItem ref="method:Date.setFormatter" deprecated="As of SmartClient 5.5 use the static methods              ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')} and &amp;#010              ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')} to set default formatters for all dates" flags="" description="  Set the formatter for this date object to the method name passed in.  After this call&amp;#010  wherever appropriate SmartClient components will use this formatter function to return &amp;#010  the date as a string.&amp;#010" name="setFormatter" type="method" definingClass="class:Date">
<params description="name of a date formatter method on this Date" optional="false" name="functionName" type="string">
</params>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:ListGrid.cellClick" flags="" description=" Called when a cell receives a click event.&amp;#010&amp;#010" name="cellClick" type="method" definingClass="class:ListGrid">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('cellClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Slider.value" flags="IRW" description="The slider value. This value should lie between the minValue and maxValue and increases as&amp;#010 the thumb is moved up (for a vertical slider) or right (for a horizontal slider) unless&amp;#010 flipValues is set to true." name="value" valueType="float" defaultValue="1" type="attr" definingClass="class:Slider">
    <getter>getValue</getter>
    <setter>setValue</setter>
<seeAlso ref="attr:Slider.minValue">
</seeAlso>
<seeAlso ref="attr:Slider.maxValue">
</seeAlso>
<seeAlso ref="attr:Slider.flipValues">
</seeAlso>
<seeAlso ref="attr:Slider.showValue">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.scrollByPercent" flags="" description="  Scroll this widget by some percentage of scroll size in either (or both) direction(s).&amp;#010&amp;#010" name="scrollByPercent" type="method" definingClass="class:Canvas">
<params description="Percentage to scroll horizontally. Will accept either                                      a numeric percent value, or a string like &quot;10%&quot;." optional="false" name="dX" type="number | string">
</params>
<params description="Percentage to scroll horizontally. Will accept either                                      a numeric percent value, or a string like &quot;10%&quot;." optional="false" name="dY" type="number | string">
</params>
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:Canvas.getVSnapOrigin" flags="" description=" Get an offset to be used when calculating snap positioning. Returns 0 by default.&amp;#010&amp;#010" name="getVSnapOrigin" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getVSnapPosition">
</seeAlso>
<params description="the child that is being snapped" optional="true" name="snapChild" type="Canvas">
</params>
<returns description="The offset to use when snapping" type="integer"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:FacetValue.collapsed" flags="IR" description="For tree facets, initial collapse state for this node.  Defaults to facet.collapsed" name="collapsed" valueType="boolean" defaultValue="facet.collapsed" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="attr:MenuItem.enabled" flags="IR" description="Affects the visual style and interactivity of the menu item.  If set to&amp;#010 &lt;code&gt;false&lt;/code&gt;, the menu item will not respond to mouse rollovers or clicks.&amp;#010 &lt;p&gt;&amp;#010 If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.enableIf')} instead." name="enabled" valueType="boolean" defaultValue="true" type="attr" definingClass="object:MenuItem">
    <groups>menuBasic</groups>
</docItem>
<docItem ref="attr:Canvas.hoverDelay" flags="IRW" description="If &lt;code&gt;this.canHover&lt;/code&gt; is true, how long should the mouse be kept over this&amp;#010 widget before the hover event is fired" name="hoverDelay" valueType="number" defaultValue="300" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canHover">
</seeAlso>
<seeAlso ref="method:Canvas.hover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:ResultSet.find" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.find')}.  Checks only loaded rows and will not trigger a fetch.&amp;#010" name="find" type="method" definingClass="class:ResultSet">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="first matching object or null if not found" type="Object"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="attr:FormItem.form" flags="R" description="A Read-Only pointer to this formItem's DynamicForm widget." name="form" valueType="DynamicForm" defaultValue="null" type="attr" definingClass="class:FormItem">
</docItem>
<docItem flags="IRW" type="attr" ref="attr:StretchImgButton.title" description="The text title to display in this button." name="title" valueType="string" defaultValue="varies" definingClass="class:StretchImgButton">
    <getter>getTitle</getter>
    <setter>setTitle</setter>
    <groups>basics</groups>
</docItem>
<docItem ref="method:HTMLFlow.setContentsURL" flags="" description=" Change the URL this component loads content from.  Triggers a fetch for content from the new&amp;#010 URL.&amp;#010 &lt;p&gt;&amp;#010 Can also be called with no arguments to reload content from the existing ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')}.&amp;#010 &lt;P&gt;&amp;#010 This feature relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.&amp;#010&amp;#010" name="setContentsURL" type="method" definingClass="class:HTMLFlow">
<params description="URL to retrieve contents from" optional="true" name="url" type="URL">
</params>
<params description="Parameters to send to the contentsURL.  Merged with                            &lt;code&gt;component.contentsURLParams&lt;/code&gt; if both are set." optional="true" name="params" type="Object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('loadHtmlPages')}</examples>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:ToolStripResizer.skinImgDir" flags="IR" description="Path to resizer image." name="skinImgDir" valueType="SCImgURL" defaultValue="&quot;images/ToolStrip/&quot;" type="attr" definingClass="class:ToolStripResizer">
</docItem>
<docItem ref="attr:Canvas.scrollbarSize" flags="IRWA" description="How thick should we make the scrollbars for this canvas.&lt;br&gt;&amp;#010			NOTE: has no effect if showCustomScrollbars is false." name="scrollbarSize" valueType="number" defaultValue="16" type="attr" definingClass="class:Canvas">
    <getter>getScrollbarSize</getter>
<seeAlso ref="method:Canvas.getScrollbarSize">
</seeAlso>
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:FormItem.setLeft" flags="A" description=" For a form with ${isc.DocUtils.linkForRef('attr:DynamicForm.itemLayout','itemLayout')}:&quot;absolute&quot; only, set the left&amp;#010 coordinate of this form item.&amp;#010 &lt;P&gt;&amp;#010 Causes the form to redraw.&amp;#010" name="setLeft" type="method" definingClass="class:FormItem">
</docItem>
<docItem ref="classAttr:Dialog.LOGIN_TITLE" flags="IRW" description="Default title for the dialog displayed by ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.&amp;#010 A custom title can alternatively be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="LOGIN_TITLE" valueType="HTML" defaultValue="&quot;Please log in&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="classMethod:RPCManager.sendRequest" flags="" description="&amp;#010 Send the passed &lt;code&gt;RPCRequest&lt;/code&gt; to the server.  If queuing is in effect, this queues&amp;#010 the request instead.&amp;#010&amp;#010" name="sendRequest" type="classMethod" definingClass="class:RPCManager">
<params description="RPCRequest to send to the server" optional="false" name="rpcRequest" type="RPCRequest Properties">
</params>
</docItem>
<docItem ref="classMethod:RPCManager.loginRequired" flags="" description=" Called when a session timeout is encountered while trying to do a background RPC.  See&amp;#010 ${isc.DocUtils.linkForRef('group:relogin','Relogin')}.&amp;#010 &lt;P&gt;&amp;#010 The transaction with the passed &lt;code&gt;transactionId&lt;/code&gt; is suspended, and should either&amp;#010 be ${isc.DocUtils.linkForRef('classMethod:RPCManager.clearTransaction','cleared')} or ${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction','resent')}&amp;#010 after the user has been re-authenticated.  &amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;rpcRequest&lt;/code&gt; parameter can be used to determine whether the suspended&amp;#010 transaction can simply be dropped (eg, it's periodic polling request).&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;rpcResponse&lt;/code&gt; parameter has rpcResponse.data set to the raw text of the&amp;#010 response that triggered &lt;code&gt;loginRequired()&lt;/code&gt;.  Some very advanced relogin strategies&amp;#010 may need to inspect the raw response to get information needed for re-authentication.&amp;#010&amp;#010" name="loginRequired" type="classMethod" definingClass="class:RPCManager">
<params description="id of the transaction" optional="false" name="transactionNum" type="id">
</params>
<params description="first RPCRequest of the transaction" optional="false" name="rpcRequest" type="RPCRequest">
</params>
<params description="RPCResponse containing the session timeout response that                                  caused loginRequired() to be invoked" optional="false" name="rpcResponse" type="RPCResponse">
</params>
    <groups>relogin</groups>
</docItem>
<docItem ref="attr:ListGridField.inputFormat" flags="IRWA" description="For fields of type &lt;code&gt;&quot;date&quot;&lt;/code&gt;, if this is an editable listGrid, this property &amp;#010 allows you to specify the ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} applied to the editor &amp;#010 for this field." name="inputFormat" valueType="DateInputFormat" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.displayFormat">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.keyPress" flags="A" description="&amp;#010 Executed when a key is pressed and released on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}:&amp;#010 true). &amp;#010 &lt;P&gt;&amp;#010 Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that&amp;#010 was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine&amp;#010 whether modifier keys were down.&amp;#010&amp;#010" name="keyPress" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canFocus">
</seeAlso>
<returns description="false to suppress native behavior in response to the keyPress, and prevent                    this event from bubbling to this widget's parent, or true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('keyboardEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:StatefulCanvas.setDisabled" flags="A" description=" Enable or disable this object&amp;#010" name="setDisabled" type="method" definingClass="class:StatefulCanvas">
<params description="true if this widget is to be disabled" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
    <groups>state</groups>
</docItem>
<docItem ref="method:CubeGrid.facetLabelOut" flags="" description="    StringMethod handler fired when mouseout occurs over a facet label&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetLabelOut" type="method" definingClass="class:CubeGrid">
<params description="ID of the appropriate facet" optional="false" name="facetId" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="method:Selection.deselect" flags="" description="			Deselect a particular item&amp;#010" name="deselect" type="method" definingClass="class:Selection">
<params description="object to select" optional="false" name="item" type="object">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:MenuButton.menuAnimationEffect" flags="IRWA" description="Allows you to specify an animation effect to apply to the menu when it is being shown.&amp;#010 Valid options are &quot;none&quot; (no animation), &quot;fade&quot;, &quot;slide&quot; and &quot;wipe&quot;.&amp;#010 If unspecified falls through to &lt;code&gt;menu.showAnimationEffect&lt;/code&gt;" name="menuAnimationEffect" valueType="string" defaultValue="null" type="attr" definingClass="class:MenuButton">
</docItem>
<docItem ref="type:Selected" name="Selected" type="type">
<values description="StatefulCanvas should show focused state" value="StatefulCanvas.FOCUSED"></values>
<values description="StatefulCanvas is selected" value="StatefulCanvas.SELECTED"></values>
<values description="StatefulCanvas is not selected" value="StatefulCanvas.UNSELECTED"></values>
    <groups>state</groups>
</docItem>
<docItem ref="attr:DateChooser.alternateStyleSuffix" flags="IRW" description="The text appended to the style name when using ${isc.DocUtils.linkForRef('attr:DateChooser.alternateWeekStyles')}." name="alternateStyleSuffix" valueType="string" defaultValue="&quot;Dark&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:FormItem.focusInItem" flags="" description="			Move the keyboard focus into this item's focusable element&amp;#010" name="focusInItem" type="method" definingClass="class:FormItem">
    <groups>eventHandling</groups>
    <groups>focus</groups>
</docItem>
<docItem ref="method:Class.observe" flags="" description=" Take an arbitrary action whenever a method is called on an instance.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 When you observe some method of another object, eg:&lt;br&gt;&amp;#010			&lt;code&gt;thisObject.observe(thatObject, &quot;someMethod&quot;, &quot;observer.foo()&quot;)&lt;/code&gt;&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 When &lt;code&gt;thatObject.someMethod()&lt;/code&gt; is called,&lt;br&gt;&amp;#010			&lt;code&gt;thisObject.foo()&lt;/code&gt; &lt;br&gt;&amp;#010 will be called automatically, after the observed method completes.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Action is typically a string expression.  Available variables:&amp;#010 &lt;ul&gt;&amp;#010    &lt;li&gt; observed: target of the observation, that is, object passed to observe()&amp;#010    &lt;li&gt; observer: object that observes, that is, object that observe() was called on&amp;#010    &lt;li&gt; returnVal: return value of observed function&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 An unlimited number of observers can observe any message, they will all be notified&amp;#010 automatically in the order that the observations were set up.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTES: &amp;#010 - observation also works on JavaScript Array objects&amp;#010 - a method may trigger an observation of itself by another object, either through code &amp;#010   within the method itself or within an observer's action.  In this case the observation&amp;#010   will be set up, but the new observation action will not fire as part of this thread.&amp;#010   When the method is called again in the future the newly added observer will be fired.&amp;#010&amp;#010&amp;#010" name="observe" type="method" definingClass="class:Class">
<seeAlso ref="method:Class.ignore">
</seeAlso>
<params description="object to observe" optional="false" name="object" type="object">
</params>
<params description="name of the method to observe" optional="false" name="methodName" type="string">
</params>
<params description="String for the function to call.										In this string, &amp;#010											&lt;code&gt;observer&lt;/code&gt; is the object that is observing, &amp;#010											&lt;code&gt;this&lt;/code&gt; is the object that is being observed&amp;#010&amp;#010										If &lt;code&gt;action&lt;/code&gt; is not specified, &amp;#010											&lt;code&gt;observer.methodName()&lt;/code&gt; will be called." optional="true" name="action" type="string">
</params>
<returns description="true == observation set up, false == observation not set up" type="boolean"></returns>
    <groups>observation</groups>
</docItem>
<docItem ref="method:ListGrid.getRecord" flags="A" description=" Return the pointer to a particular record by record number.&amp;#010 Synonym for ${isc.DocUtils.linkForRef('method:ListGrid.getCellRecord')}.&amp;#010" name="getRecord" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellRecord">
</seeAlso>
<seeAlso ref="method:ListGrid.getEditedRecord">
</seeAlso>
<params description="row index of record to return." optional="false" name="recordNum" type="number">
</params>
<returns description="Record object for the row." type="ListGridRecord"></returns>
</docItem>
<docItem ref="attr:MenuItem.dynamicTitle" flags="IR" description="A string of script that is evaluated to a string value for the item's title property&amp;#010 whenever the menu is shown or a shortcut key is pressed.&amp;#010 &lt;p&gt;&amp;#010 If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.title')} instead." name="dynamicTitle" valueType="expression" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('menuDynamicItems')}</examples>
    <groups>dynamicMenuItem</groups>
</docItem>
<docItem ref="attr:TabSet.rightEdgeOffsets" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeOffsets&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeOffsets&lt;/code&gt;, &lt;code&gt;topEdgeOffsets&lt;/code&gt; and &lt;code&gt;bottomEdgeOffsets&lt;/code&gt; &amp;#010 propertes allow the offsets of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="rightEdgeOffsets" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:Window.closeButton" flags="R" description="Button show in the header that will close this Window by calling ${isc.DocUtils.linkForRef('method:Window.closeClick')}." name="closeButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:ListGrid.canPickFields" flags="IRW" description="Indicates whether the field picker item and submenu should be present in the header&amp;#010 context menu" name="canPickFields" valueType="Boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:TabSet.showPartialEdges" flags="IRA" description="If the paneContainer for this tab set is showing ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}, setting this&amp;#010 attribute to &lt;code&gt;true&lt;/code&gt; will set the paneContainer to show&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.customEdges','customEdges')} for the three sides opposing the tabBarPosition." name="showPartialEdges" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:DataBoundComponent.useAllDataSourceFields" flags="IRW" description="If true, the set of fields given by the &quot;default binding&quot; (see &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}) is used, with any fields specified in&amp;#010 &lt;code&gt;component.fields&lt;/code&gt; acting as overrides that can suppress or modify the&amp;#010 display of individual fields, without having to list the entire set of fields that&amp;#010 should be shown.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;component.fields&lt;/code&gt; contains fields that are not found in the DataSource,&amp;#010 they will be shown after the most recently referred to DataSource field.  If the new&amp;#010 fields appear first, they will be shown first.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForExampleId('validationFieldBinding', 'This example')} shows a mixture of component&amp;#010 fields and DataSource fields, and how they interact for validation." name="useAllDataSourceFields" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:DataBoundComponent">
    <examples>${isc.DocUtils.linkForExampleId('validationFieldBinding')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:Canvas.snapAxis" flags="IRW" description="Describes which axes to apply snap-to-grid to.&amp;#010 Valid values are Canvas.HORIZONTAL, Canvas.VERTICAL and Canvas.BOTH" name="snapAxis" valueType="string" defaultValue="Canvas.BOTH" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.snapResizeToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapResizeToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:TabSet.scrollerHSrc" flags="IR" description="If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, this property governs the base&amp;#010 URL for the tab bar back and forward scroller button images for horizontal tab bars [IE for&amp;#010 tab sets with ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} set to &quot;top&quot; or &quot;bottom&quot;].&amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} will be used instead.&amp;#010 &lt;P&gt;&amp;#010 To get the path to the image to display, this base URL will be modified as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If appropriate a state suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; or &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; will be&amp;#010     appended.&lt;/li&gt;&amp;#010 &lt;li&gt;A suffix of &lt;code&gt;&quot;forward&quot;&lt;/code&gt; or &lt;code&gt;&quot;back&quot;&lt;/code&gt; will be appended for the&amp;#010     forward or backward scrolling button.&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 For example - if the scrollerHSrc is set to &lt;code&gt;&quot;[SKIN]hscroll.gif&quot;&lt;/code&gt;, the image&amp;#010 displayed for the back-scroller button on a tabSet with &lt;code&gt;tabBarPosition&lt;/code&gt; set to&amp;#010 &quot;top&quot; and &lt;code&gt;symmetricScroller&lt;/code&gt; set to true would be one of &amp;#010 &lt;code&gt;&quot;[SKIN]hscroll_back.gif&quot;&lt;/code&gt;, &lt;code&gt;&quot;[SKIN]hscroll_Down_back.gif&quot;&lt;/code&gt;,&amp;#010 and &lt;code&gt;&quot;[SKIN]hscroll_Disabled_back.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for best results the media should be sized to match the scroller button sizes, &amp;#010 determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}." name="scrollerHSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]hscroll.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricScroller">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="method:Canvas.setClassName" deprecated="As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('method:Canvas.setStyleName')} instead." flags="A" description=" Sets the CSS class for this widget&amp;#010" name="setClassName" type="method" definingClass="class:Canvas">
<params description="new CSS class name (must be defined previously)" optional="false" name="newClass" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:dynamicLoading" name="dynamicLoading" type="group">
</docItem>
<docItem ref="attr:MenuButton.showMenuBelow" flags="IRW" description="The menu drops down below the menu button.&amp;#010			Set to false if the menu should appear above the menu button." name="showMenuBelow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:MenuButton">
    <setter>setShowMenuBelow</setter>
</docItem>
<docItem ref="attr:TextAreaItem.width" flags="IRW" description="default width of this item" name="width" valueType="number" defaultValue="150" type="attr" definingClass="class:TextAreaItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:RestDataSource.xmlRecordXPath" flags="IR" description="&lt;code&gt;recordXPath&lt;/code&gt; mapping to the data node of XML returned by the server.&amp;#010 Applies if this.dataFormat is set to &lt;code&gt;&quot;xml&quot;&lt;/code&gt;.&lt;br&gt;&amp;#010 The default value will pick up data from a response structured as follows:&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;response&amp;gt;&amp;#010    &amp;lt;status&amp;gt;0&amp;lt;/status&amp;gt;&amp;#010    &amp;lt;data&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;field1&amp;gt;value&amp;lt;/field1&amp;gt;&amp;#010          &amp;lt;field2&amp;gt;value&amp;lt;/field2&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;field1&amp;gt;value&amp;lt;/field1&amp;gt;&amp;#010          &amp;lt;field2&amp;gt;value&amp;lt;/field2&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010    &amp;lt;/data&amp;gt;&amp;#010 &amp;lt;/response&amp;gt;&amp;#010 &lt;/pre&gt;" name="xmlRecordXPath" valueType="string" defaultValue="&quot;/response/data/*&quot;" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:DynamicForm.titleOrientation" flags="IRW" description="Default orientation for titles for items in this form.  ${isc.DocUtils.linkForRef('type:TitleOrientation')}&amp;#010 lists valid options.&amp;#010 &lt;P&gt;&amp;#010 Note that titles on the left or right take up a cell in tabular&amp;#010 ${isc.DocUtils.linkForRef('group:formLayout','form layouts')}, but titles on top do not." name="titleOrientation" valueType="TitleOrientation" defaultValue="&quot;left&quot;" type="attr" definingClass="class:DynamicForm">
    <examples>${isc.DocUtils.linkForExampleId('formLayoutTitles')}</examples>
    <groups>formTitles</groups>
</docItem>
<docItem ref="attr:TabSet.paneContainerClassName" flags="IRW" description="CSS style used for the paneContainer." name="paneContainerClassName" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem type="class" ref="class:ComboBoxItem" description="The Combobox is a text input field which can show a list of options via a drop-down&amp;#010 PickList.&amp;#010 &lt;p&gt;&amp;#010 The set of options will be filtered based on the current value in the text field, so only&amp;#010 options that match what has been typed so far will be displayed.&amp;#010 The set of options can be derived from a ValueMap or dynamically retrieved from a&amp;#010 dataSource.  See the ${isc.DocUtils.linkForRef('interface:PickList')} interface for further settings.&amp;#010 &lt;P&gt;&amp;#010 Note that to select the first option as a default value for the item,&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} may be set." name="ComboBoxItem">
    <methods>method:ComboBoxItem.defaultDynamicValue</methods>
    <methods>method:ComboBoxItem.fetchData</methods>
    <methods>method:ComboBoxItem.getDisplayFieldName</methods>
    <methods>method:ComboBoxItem.getValueFieldName</methods>
    <methods>method:ComboBoxItem.getSelectedRecord</methods>
    <methods>method:ComboBoxItem.getPickListFilterCriteria</methods>
    <methods>method:ComboBoxItem.getClientPickListData</methods>
    <methods>method:ComboBoxItem.filterClientPickListData</methods>
    <methods>method:ComboBoxItem.dataArrived</methods>
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:ComboBoxItem.defaultValue</attrs>
    <attrs>attr:ComboBoxItem.defaultToFirstOption</attrs>
    <attrs>attr:ComboBoxItem.showPickerIcon</attrs>
    <attrs>attr:ComboBoxItem.pickerIconWidth</attrs>
    <attrs>attr:ComboBoxItem.pickerIconHeight</attrs>
    <attrs>attr:ComboBoxItem.pickerIconSrc</attrs>
    <attrs>attr:ComboBoxItem.showPickListOnKeypress</attrs>
    <attrs>attr:ComboBoxItem.completeOnTab</attrs>
    <attrs>attr:ComboBoxItem.optionDataSource</attrs>
    <attrs>attr:ComboBoxItem.pickListFields</attrs>
    <attrs>attr:ComboBoxItem.optionFilterContext</attrs>
    <attrs>attr:ComboBoxItem.displayField</attrs>
    <attrs>attr:ComboBoxItem.valueField</attrs>
    <attrs>attr:ComboBoxItem.filterLocally</attrs>
    <attrs>attr:ComboBoxItem.pickListCriteria</attrs>
    <attrs>attr:ComboBoxItem.showOptionsFromDataSource</attrs>
    <attrs>attr:ComboBoxItem.pickListProperties</attrs>
    <attrs>attr:ComboBoxItem.autoFetchData</attrs>
    <attrs>attr:ComboBoxItem.filterWithValue</attrs>
    <attrs>attr:ComboBoxItem.textMatchStyle</attrs>
    <attrs>attr:ComboBoxItem.showAllOptions</attrs>
    <attrs>attr:ComboBoxItem.separatorRows</attrs>
    <implementsInterfaces>PickList</implementsInterfaces>
<seeAlso ref="interface:PickList">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('listComboBox')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('listComboBox')}</examples>
</docItem>
<docItem ref="group:enable" title="Enabling and Disabling" description="Disabled components do not respond to mouse or keyboard events, and change appearance to&amp;#010 indicate they are disabled." name="enable" type="group">
    <refs>method:FormItem.setDisabled</refs>
    <refs>method:FormItem.isDisabled</refs>
    <refs>method:FormItem.enable</refs>
    <refs>method:FormItem.disable</refs>
    <refs>method:StatefulCanvas.setDisabled</refs>
    <refs>method:Button.setDisabled</refs>
    <refs>method:ImgButton.setDisabled</refs>
    <refs>method:StretchImgButton.setDisabled</refs>
    <refs>method:Canvas.setEnabled</refs>
    <refs>method:Canvas.setDisabled</refs>
    <refs>method:Canvas.enable</refs>
    <refs>method:Canvas.disable</refs>
    <refs>method:Canvas.isDisabled</refs>
    <refs>method:Canvas.isEnabled</refs>
    <refs>attr:Canvas.disabled</refs>
    <refs>attr:Canvas.enabled</refs>
</docItem>
<docItem ref="method:CubeGrid.hiliteCell" flags="" description="&amp;#010      apply a hilite to a specific cell.&amp;#010      Note: can be called either as &amp;#010          hiliteCell(cellObject, hiliteID) or &amp;#010          hiliteCell(row, column, hiliteID)&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="hiliteCell" type="method" definingClass="class:CubeGrid">
<params description="cell to hilite / row of cell to hilite" optional="false" name="cellObj" type="cell object | row number">
</params>
<params description="hilite ID / column of cell to hilite" optional="false" name="hiliteID" type="string | column number">
</params>
<params description="optional third parameter - hilite ID." optional="true" name="" type="string">
</params>
<returns description="true if the cell was successfully hilited." type="boolean"></returns>
    <groups>hiliting</groups>
</docItem>
<docItem ref="method:ComboBoxItem.getPickListFilterCriteria" flags="A" description=" Returns filter criteria for options displayed for this item.  &amp;#010 &lt;P&gt;&amp;#010 The criteria returned by this method are used to decide which options should appear in&amp;#010 the drop-down ${isc.DocUtils.linkForRef('interface:PickList')} shown by this ComboBox.&amp;#010 &lt;P&gt;&amp;#010 While the user is typing in a value, this method will return the typed-in value as part&amp;#010 of the criteria, so that only matching values are shown.  Matching is determined by the&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.textMatchStyle','textMatchStyle')}.  &amp;#010 &lt;P&gt;&amp;#010 If the user explicitly shows the down-down pickList, via either clicking on the drop&amp;#010 down icon or use the &lt;i&gt;Ctrl+Arrow Down&lt;/i&gt; key combo, the typed in value is ignored for&amp;#010 filtering.&amp;#010 &lt;P&gt;&amp;#010 If included in the criteria, the typed in value will be included as a value for the &amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.displayField','displayField')} (or for the&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.valueField','valueField')} if &lt;code&gt;this.displayField&lt;/code&gt; is&amp;#010 unspecified).&amp;#010 &lt;P&gt;&amp;#010 Static criteria, specified via ${isc.DocUtils.linkForRef('attr:ComboBoxItem.pickListCriteria','pickListCriteria')},&amp;#010 will always be included.&amp;#010 &lt;P&gt;&amp;#010 If you are implementing your own &lt;code&gt;getPickListFilterCriteria()&lt;/code&gt; the&amp;#010 &lt;b&gt;read-only&lt;/b&gt; property ${isc.DocUtils.linkForRef('attr:ComboBoxItem.filterWithValue','this.filterWithValue')} can&amp;#010 be read to determine whether the ComboBox would ordinarily ignore the typed-in value for&amp;#010 filtering.  Note that in addition to cases where the user explicitly shows the pickList,&amp;#010 &lt;code&gt;filterWithValue&lt;/code&gt; will also be &lt;code&gt;true&lt;/code&gt; during a call to &amp;#010 ${isc.DocUtils.linkForRef('method:ComboBoxItem.fetchData')} on a databound comboBox.&amp;#010    &amp;#010" name="getPickListFilterCriteria" type="method" definingClass="class:ComboBoxItem">
<returns description="criteria to be used for databound or local filtering" type="Criteria"></returns>
</docItem>
<docItem ref="method:GridRenderer.rowDoubleClick" flags="A" description=" Called when a row receives a double click event.&amp;#010&amp;#010" name="rowDoubleClick" type="method" definingClass="class:GridRenderer">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:CanvasItem.canvas" flags="IRW" description="The canvas that will be displayed inside this item.  You can pass an instance you've &amp;#010 already created, or its global ID as a String.  If none is passed, one will be &amp;#010 auto-created using the overrideable defaults: ${isc.DocUtils.linkForRef('attr:CanvasItem.canvasProperties')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:CanvasItem.canvasConstructor')}" name="canvas" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:CanvasItem">
</docItem>
<docItem ref="attr:DataSource.testData" flags="IR" description="For a client-only DataSource, a set of records to use as a dataset, specified as an&amp;#010 Array of JavaScript Objects.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','this discussion')} for ways to populate a&amp;#010 client-only DataSource with test data." name="testData" valueType="Array of Object" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="attr:DataSource.clientOnly">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('localDataSource')}</examples>
    <groups>clientOnlyDataSources</groups>
</docItem>
<docItem ref="type:ControlName" description="&lt;code&gt;ControlNames&lt;/code&gt; are strings used to specify which UI controls should appear&amp;#010  in the editor toolbar.&lt;br&gt;" name="ControlName" type="type">
<values description="A button to make the current selection bold." value="&quot;boldSelection&quot;"></values>
<values description="A button to make the current selection italic." value="&quot;italicSelection&quot;"></values>
<values description="A button to make the current selection underlined." value="&quot;underlineSelection&quot;"></values>
<values description="A select item allowing the user to change the font of the current                     text selection." value="&quot;fontSelector&quot;"></values>
<values description="A select item allowing the user to change the font                       size of the current text selection." value="&quot;fontSizeSelector&quot;"></values>
<values description="A button to left-align the selected text." value="&quot;alignLeft&quot;"></values>
<values description="A button to right-align the selected text." value="&quot;alignRight&quot;"></values>
<values description="A button to center the selected text" value="&quot;alignCenter&quot;"></values>
<values description="A button to justify the selected line of text." value="&quot;justify&quot;"></values>
<values description="A color-picker allowing the user to set the text color" value="&quot;color&quot;"></values>
<values description="A color picker allowing the user to set the text background  color" value="&quot;backgroundColor&quot;"></values>
</docItem>
<docItem ref="attr:ListGrid.editOnFocus" flags="IRWA" description="Should we start editing when this widget recieves focus (if this ListGrid supports&amp;#010 editing)?&amp;#010 &lt;P&gt;&amp;#010 Note that this property being set to true will cause editing to occur on a single&amp;#010 click, even if ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent')} is &lt;code&gt;&quot;doubleClick&quot;&lt;/code&gt;, because single clicking&amp;#010 the grid will place keyboard focus there automatically." name="editOnFocus" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="method:Canvas.mouseMove" flags="A" description="&amp;#010 Executed when the mouse moves within this widget.  No default implementation.&amp;#010&amp;#010" name="mouseMove" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customMouseEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="attr:Scrollbar.showCorner" flags="IRWA" description="If true, displays a corner piece at the bottom end of a vertical scrollbar, or the&amp;#010          right end of a horizontal scrollbar. This is typically set only when both horizontal&amp;#010          and vertical scrollbars are displayed and about the same corner." name="showCorner" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Scrollbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:LayoutSpacer" description="Add a LayoutSpacer to a Layout to take up space just like a normal member, without actually&amp;#010 drawing anything.  Semantically equivalent to using an empty canvas, but higher performance&amp;#010 for this particular use case." name="LayoutSpacer" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
</docItem>
<docItem ref="attr:Window.bodyConstructor" flags="IRWA" description="The name of the widget class (as a string) to use for the body. If unset the appropriate&amp;#010 constructor type will be determined as follows:&lt;br&gt;&amp;#010 - if ${isc.DocUtils.linkForRef('attr:Window.items')} is defined as an array of widgets, and ${isc.DocUtils.linkForRef('attr:Window.contentLayout')} &amp;#010   is not set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;, bodyConstructor defaults to a ${isc.DocUtils.linkForRef('class:VLayout')}&lt;br&gt;&amp;#010 - if ${isc.DocUtils.linkForRef('attr:Window.src')} is set, bodyConstructor defaults to an ${isc.DocUtils.linkForRef('class:HTMLFlow')}&lt;br&gt;&amp;#010 - otherwise bodyConstructor will default to a simple ${isc.DocUtils.linkForRef('class:Canvas')}&lt;br&gt;&amp;#010 Note that if this property is overridden for some window, the specified constructor &amp;#010 should be a subclass of one of these defaults to ensure the window renders out as &amp;#010 expected." name="bodyConstructor" valueType="string" defaultValue="null" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="method:ValuesManager.rememberValues" flags="A" description="			Make a snapshot of the current set of values, so we can reset to them later.&amp;#010			Creates a new object, then adds all non-method properties of values&amp;#010			to the new object.  Use &lt;code&gt;resetValues()&lt;/code&gt; to revert to these values.&amp;#010          Note that this method is automatically called when the values for this form are&amp;#010          set programmatically via a call to ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.&amp;#010&amp;#010" name="rememberValues" type="method" definingClass="class:ValuesManager">
<returns description="copy of current form values" type="object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:Menu.autoDraw" flags="IRWA" description="Menus will not draw on initialization, until they're explicitly show()n" name="autoDraw" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="attr:TreeGrid.data" flags="IRW" description="A ${isc.DocUtils.linkForRef('class:Tree')} object containing of nested ${isc.DocUtils.linkForRef('object:TreeNode')}s to &amp;#010 display as rows in this TreeGrid.  &amp;#010 The &lt;code&gt;data&lt;/code&gt; property will typically not be explicitly specified for &amp;#010 databound TreeGrids, where the data is returned from the server via databound component&amp;#010 methods such as &lt;code&gt;fetchData()&lt;/code&gt;" name="data" valueType="Tree" defaultValue="null" type="attr" definingClass="class:TreeGrid">
    <setter>setData</setter>
    <groups>data</groups>
</docItem>
<docItem ref="group:errorIcon" name="errorIcon" type="group">
    <refs>attr:FormItem.errorIconHeight</refs>
    <refs>attr:FormItem.errorIconWidth</refs>
    <refs>attr:FormItem.errorIconSrc</refs>
    <refs>attr:FormItem.showErrorIcon</refs>
</docItem>
<docItem ref="method:ListGrid.chartData" flags="" description=" Chart the data in this listGrid as a multi-series chart.&amp;#010 &lt;P&gt;&amp;#010 Each row provides a series of data.  Each series of data is labelled by a value from one&amp;#010 column, called the &lt;code&gt;labelField&lt;/code&gt;.  &amp;#010 &lt;P&gt;&amp;#010 For example, cell values are sales figures, and fields are &quot;Product&quot;, &quot;August&quot;,&amp;#010 &quot;September&quot;, &quot;October&quot;.  In this case each row gives a series: sales figures for each of 3&amp;#010 months.  The &lt;code&gt;labelField&lt;/code&gt; in this case is the &quot;Product&quot; field, meaning each row&amp;#010 represents sales figures for each of 3 months for a particular product.  This dataset&amp;#010 can be charted via any multi-series chart: stacked or clustered bar or column chart, line&amp;#010 chart with multiple lines, or area chart (stacked lines).&amp;#010 &lt;P&gt;&amp;#010 By default, all visible fields other than the label field are assumed to be labels for&amp;#010 series values, but an explicit list of fields can be provided as &lt;code&gt;dataFields&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 By default, all data is charted if all data is loaded, otherwise, data visible in the&amp;#010 viewport is charted.  An explicit set of rows can be provided via &lt;code&gt;dataRows&lt;/code&gt;.&amp;#010 &amp;#010" name="chartData" type="method" definingClass="class:ListGrid">
<params description="name of the field" optional="false" name="labelField" type="String">
</params>
<params description="optional list of fields to use as labels.  By      default, all fields are used." optional="true" name="dataFields" type="Array of String">
</params>
<params description="set of records to chart.  Can be obtained by eg      ${isc.DocUtils.linkForRef('method:ResultSet.getRange','grid.data.getRange()')}." optional="true" name="dataRows" type="Array of ListGridRecord">
</params>
<params description="properties to pass to the created chart" optional="true" name="chartProperties" type="Chart Properties">
</params>
<params description="if true, use the labelField as the &quot;first&quot; set of labels,      for example, as the bar labels in a stacked bar chart, whereas the second set of labels&amp;#010      would appear as the legend." optional="true" name="labelFieldFirst" type="boolean">
</params>
<returns description="created Chart instance" type="Chart"></returns>
    <examples>${isc.DocUtils.linkForExampleId('gridCharting')}</examples>
</docItem>
<docItem ref="attr:DateChooser.showCancelButton" flags="IRW" description="Determines whether the &quot;Cancel&quot; button will be displayed." name="showCancelButton" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:FormItem.top" flags="IRWA" description="Top coordinate of this item in pixels.  Applies only when the containing DynamicForm&amp;#010 sets &lt;code&gt;itemLayout:&quot;absolute&quot;&lt;/code&gt;." name="top" valueType="integer" defaultValue="0" type="attr" definingClass="class:FormItem">
    <setter>setTop</setter>
</docItem>
<docItem ref="attr:FormItem.hint" flags="IRWA" description="Specifies &quot;hint&quot; string to show next to the form item to indicate something to the user.&amp;#010 This string generally appears to the right of the form item." name="hint" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.hintStyle">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('formHints')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:List.addList" flags="" description=" Add a list of items to this array.&amp;#010 &lt;P&gt;&amp;#010 Note: you can specify that a subset range be added by passing start and end indices&amp;#010&amp;#010" name="addList" type="method" definingClass="interface:List">
<params description="list of items to add" optional="false" name="list" type="array">
</params>
<params description="optional start index in list" optional="true" name="listStartRow" type="number">
</params>
<params description="optional end index in list (non-inclusive)" optional="true" name="listEndRow" type="number">
</params>
<returns description="list of items that were added" type="list"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="method:Canvas.showNextTo" flags="" description=" Show this widget next to another widget.&amp;#010" name="showNextTo" type="method" definingClass="class:Canvas">
<params description="Canvas to show next to" optional="false" name="otherWidget" type="Canvas">
</params>
<params description="which side to show on, defaults to &quot;right&quot;" optional="true" name="side" type="String">
</params>
</docItem>
<docItem ref="classMethod:Page.isRTL" flags="" description="&amp;#010 Return whether the page text direction is right to left.  If you set &quot;DIR=RTL&quot; in the BODY tag of&amp;#010 the page, then this method will return true.  If you set &quot;DIR=LTR&quot; then this method will return&amp;#010 false.&amp;#010    &amp;#010" name="isRTL" type="classMethod" definingClass="class:Page">
<returns description="true if Page text direction is RTL, false otherwise" type="boolean"></returns>
</docItem>
<docItem ref="method:GridRenderer.getCellCSSText" flags="A" description=" Return CSS text for styling this cell, which will be applied in addition to the CSS class&amp;#010 for the cell, as overrides.&amp;#010 &lt;p&gt;&amp;#010 &quot;CSS text&quot; means semicolon-separated style settings, suitable for inclusion in a CSS&amp;#010 stylesheet or in a STYLE attribute of an HTML element.&amp;#010&amp;#010" name="getCellCSSText" type="method" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.getCellStyle">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="CSS text for this cell" type="string"></returns>
</docItem>
<docItem ref="method:Scrollbar.setScrollTarget" flags="" description="          Sets or clears the scrollbar's scrollTarget. If no argument is provided, then the&amp;#010          scrollTarget will be set to the scrollbar itself.&amp;#010&amp;#010" name="setScrollTarget" type="method" definingClass="class:Scrollbar">
<params description="target canvas to be scrolled" optional="true" name="newTarget" type="Canvas">
</params>
    <groups>scroll</groups>
</docItem>
<docItem ref="attr:ServerObject.dropExtraFields" flags="IR" description="By default, for DMI DSResponses, DSResponse.data is filtered on the server to just the set&amp;#010 of fields defined on the DataSource.  This behavior can be overridden in several ways - see&amp;#010 the overview in ${isc.DocUtils.linkForRef('class:DMI')} for details.  The value of this attribute overrides&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')}." name="dropExtraFields" valueType="Boolean" defaultValue="null" type="attr" definingClass="class:ServerObject">
</docItem>
<docItem ref="method:FormItemIcon.click" flags="" description="      StringMethod action to fire when this icon is clicked&amp;#010      If unset the form item's &lt;code&gt;iconClick&lt;/code&gt; method will be fired instead (if&amp;#010      specified).&amp;#010" name="click" type="method" definingClass="object:FormItemIcon">
<params description="The Dynamic Form to which this icon's item belongs." optional="false" name="form" type="DynamicForm">
</params>
<params description="The Form Item containing this icon" optional="false" name="item" type="FormItem">
</params>
<params description="A pointer to the form item icon clicked" optional="false" name="icon" type="FormItemIcon">
</params>
    <examples>${isc.DocUtils.linkForExampleId('formIcons')}</examples>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:ListGrid.longTextEditorType" flags="IRW" description="When the length of the field specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} exceeds &amp;#010 &lt;code&gt;this.longTextEditorThreshold&lt;/code&gt; show an edit field of this type&amp;#010 rather than the standard text field when the field enters inline edit mode." name="longTextEditorType" valueType="string" defaultValue="&quot;PopUpTextAreaItem&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Canvas.keepInParentRect" flags="IRWA" description="Constrains drag-resizing and drag-repositioning of this canvas to either the rect of its&amp;#010 parent (if set to true) or an arbitrary rect (if set to a [Left,Top,Width,Height] rect&amp;#010 array).  If this canvas has no parent, constrains dragging to within the browser window.&amp;#010 &lt;p&gt;&amp;#010 Affects target and outline dragAppearance, not tracker.&amp;#010 &lt;p&gt;&amp;#010 Note: keepInParentRect affects only user drag interactions, not programmatic moves." name="keepInParentRect" valueType="boolean or rect" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:SectionStack.headerHeight" flags="IR" description="Height of headers for sections." name="headerHeight" valueType="Number" defaultValue="20" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="classMethod:isA.RegularExpression" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a Regular Expression (RegExp) object?&amp;#010&amp;#010" name="RegularExpression" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Boolean" type="boolean"></returns>
</docItem>
<docItem ref="attr:ActiveXControl.codeBase" flags="IR" description="Specifies the URL from which to load the ActiveX control." name="codeBase" valueType="URL" defaultValue="null" type="attr" definingClass="class:ActiveXControl">
</docItem>
<docItem ref="attr:DataBoundComponent.dataPageSize" flags="IRW" description="When using data paging, how many records to fetch at a time.  The value of this&amp;#010 attribute is passed on to the auto-constructed ${isc.DocUtils.linkForRef('class:ResultSet')} object for this&amp;#010 component.  In effect, this gives you control over the ${isc.DocUtils.linkForRef('attr:ResultSet.resultSize')}&amp;#010 attribute for this component." name="dataPageSize" valueType="number" defaultValue="75" type="attr" definingClass="interface:DataBoundComponent">
<seeAlso ref="attr:ResultSet.resultSize">
</seeAlso>
    <groups>databinding</groups>
</docItem>
<docItem ref="method:Array.addAt" flags="" description=" Add a single item to this array at a specific position in the list, sliding other items over&amp;#010 to fit.&amp;#010&amp;#010" name="addAt" type="method" definingClass="object:Array">
<params description="object to add" optional="false" name="obj" type="object">
</params>
<params description="position in the list to add at" optional="false" name="pos" type="number">
</params>
<returns description="object that was added" type="object"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:ListGrid.skinImgDir" flags="IRWA" description="Where do 'skin' images (those provided with the class) live?" name="skinImgDir" valueType="URL" defaultValue="&quot;images/ListGrid/&quot;" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
    <groups>images</groups>
</docItem>
<docItem ref="attr:FacetValue.align" flags="IR" description="Default alignment for facet label title, and cells for this facetValue.&amp;#010 Can be overridden by setting titleAlign or cellAlign on the facetValue." name="align" valueType="alignEnum" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="attr:RestDataSource.addDataURL" flags="IR" description="Custom dataURL for add type operations" name="addDataURL" valueType="string" defaultValue="null" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem flags="IRW" type="attr" ref="attr:TreeGrid.nodeIcon" description="The filename of the default icon for all leaf nodes in this treeGrid. To specify a &amp;#010 custom image for an individual node, set the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')} directly on&amp;#010 the node." name="nodeIcon" valueType="SCImgURL" defaultValue="&quot;[SKIN]file.gif&quot;" definingClass="class:TreeGrid">
    <setter>setNodeIcon</setter>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="classMethod:Timer.setTimeout" flags="" description="    &amp;#010 Execute an action in a given amount of time.  This method wraps the native setTimeout() method,&amp;#010 correcting for browser-specific memory leaks.&amp;#010&amp;#010" name="setTimeout" type="classMethod" definingClass="class:Timer">
<seeAlso ref="classMethod:Timer.clear">
</seeAlso>
<params description="Function to be called when delay has elapsed. &amp;#010				     Can also be a string representation of an expression.&amp;#010	    			 Passing a string is preferred." optional="false" name="action" type="string expression or function">
</params>
<params description="Time until action is executed (in milliseconds). If not specified, the                       default is 100 milliseconds." optional="false" name="delay" type="number">
</params>
<returns description="Reference to the timerEvent created. Note that this reference is provided 							 only so that it can be used as an argument for Timer.clear()." type="timerEvent"></returns>
</docItem>
<docItem ref="attr:Facet.titleAlign" flags="IR" description="Alignment of facet label title" name="titleAlign" valueType="alignEnum" defaultValue="cubeGrid.facetTitleAlign" type="attr" definingClass="class:Facet">
<seeAlso ref="attr:CubeGrid.facetTitleAlign">
</seeAlso>
</docItem>
<docItem ref="class:MultiFilePicker" description="The MultiFilePicker is a pop-up picker used by the ${isc.DocUtils.linkForRef('class:MultiFileItem')} to allow the user to&amp;#010 enter several files for upload." name="MultiFilePicker" type="class">
    <treeLocation>Client Reference/Forms/Form Items/MultiFileItem</treeLocation>
    <groups>upload</groups>
</docItem>
<docItem ref="method:Layout.removeMember" flags="" description="&amp;#010 Removes the specified member from the layout. If it has a resize bar, the bar will be&amp;#010 destroyed.&amp;#010&amp;#010" name="removeMember" type="method" definingClass="class:Layout">
<params description="the canvas to be removed from the layout" optional="false" name="member" type="canvas">
</params>
</docItem>
<docItem ref="method:StretchImgButton.getTitle" flags="A" description=" Return the title - text/HTML drawn inside the component.&amp;#010 &lt;p&gt;&amp;#010 Default is to simply return this.title.&amp;#010" name="getTitle" type="method" definingClass="class:StretchImgButton">
<returns description="HTML for the title" type="string"></returns>
</docItem>
<docItem ref="attr:StretchImgButton.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ToolStripSeparator.hSrc" flags="IRW" description="Image for horizontally oriented separator (for vertical toolstrips)." name="hSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]hseparator.png&quot;" type="attr" definingClass="class:ToolStripSeparator">
</docItem>
<docItem ref="attr:Layout.overflow" flags="IR" description="Normal ${isc.DocUtils.linkForRef('type:Overflow')} settings can be used on layouts, for example, an&amp;#010 overflow:auto Layout will scroll if members exceed its specified size, whereas an&amp;#010 overflow:visible Layout will grow to accomodate members." name="overflow" valueType="Overflow" defaultValue="&quot;visible&quot;" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="method:DynamicForm.getErrors" flags="" description=" Returns the current set of validation errors for this form.&amp;#010" name="getErrors" type="method" definingClass="class:DynamicForm">
<returns description="Errors are returned as an object of the format&lt;br&gt; &lt;code&gt;{fieldName:errors, fieldName:errors}&lt;/code&gt;&lt;br&gt;&amp;#010 where each &lt;code&gt;errors&lt;/code&gt; object will be either an error message string or an array&amp;#010 of error message strings." type="object"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="method:Canvas.animateResize" flags="" description=" Animate a resize of this canvas from its current size to the specified size&amp;#010" name="animateResize" type="method" definingClass="class:Canvas">
<params description="new width (or null for unchanged)" optional="false" name="width" type="number">
</params>
<params description="new height (or null for unchanged)" optional="false" name="height" type="number">
</params>
<params description="When the resize completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation" optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated resize" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration effect to apply to the resize" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateResize')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:StretchImgButton.capSize" flags="IRW" description="How big are the end pieces by default" name="capSize" valueType="number" defaultValue="12" type="attr" definingClass="class:StretchImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.initialCriteria" flags="IR" description="Criteria to be used when ${isc.DocUtils.linkForRef('attr:ListGrid.autoFetchData')} is set." name="initialCriteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:GridRenderer.scrollRedrawDelay" flags="IRW" description="While drag scrolling in an incrementally rendered grid, time in milliseconds to wait&amp;#010 before redrawing, after the last mouse movement by the user." name="scrollRedrawDelay" valueType="integer" defaultValue="75" type="attr" definingClass="class:GridRenderer">
    <groups>performance</groups>
</docItem>
<docItem ref="attr:ListGridRecord.enabled" flags="IR" description="Affects the visual style and interactivity of the record.  If set to &lt;code&gt;false&lt;/code&gt;&amp;#010 the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the&amp;#010 mouse moves over it, nor will it respond to mouse clicks." name="enabled" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
    <examples>${isc.DocUtils.linkForExampleId('disabledRows')}</examples>
</docItem>
<docItem ref="attr:Label.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DSRequest.resultSet" flags="R" description="For advanced use in integrating dataset paging with web services,&amp;#010 the ResultSet that issued this &quot;fetch&quot; DSRequest is automatically made available as the&amp;#010 &lt;code&gt;resultSet&lt;/code&gt; property.&amp;#010 &lt;P&gt;&amp;#010 This property can only be read.  There is no meaning to setting this property&amp;#010 yourself." name="resultSet" valueType="ResultSet" defaultValue="{}" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="classAttr:Date.shortDayNames" flags="IRWA" description="This property may be set to an array of names of days of the week. &lt;br&gt;&amp;#010 For example:&amp;#010 &lt;pre&gt;&amp;#010 [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]&amp;#010 &lt;/pre&gt;&amp;#010 The appropriate day name will then be returned from ${isc.DocUtils.linkForRef('method:Date.getShortDayName')}, and may &amp;#010 be used whenever SmartClient components display day-names (for example in the &amp;#010 ${isc.DocUtils.linkForRef('class:DateItem','DateItem class')}).&lt;br&gt;&amp;#010 Note: For US based applications the first item in the array should be the name for Sunday, &amp;#010 then Monday, Tuesday, etc. For browsers with different locales this may vary. &amp;#010 To determine the first day for some locale, you can run the following code:&amp;#010 &lt;pre&gt;&amp;#010    alert(new Date(2000, 0, 2).getDay());&amp;#010 &lt;/pre&gt;&amp;#010 You should see an alert with a number between zero and 6. This represents the numerical&amp;#010 'day' value for Sunday for your browser's locale, since Jan 2nd 2000 was a Sunday. &amp;#010 Therefore if this code alerted the number 6, Sunday should appear last in your list &amp;#010 of day-names, and Monday first." name="shortDayNames" valueType="Array" defaultValue="null" type="classAttr" definingClass="class:Date">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:DynamicForm.fetchData" flags="" description=" Retrieve data that matches the provided criteria, and edit the first record returned&amp;#010 &amp;#010" name="fetchData" type="method" definingClass="class:DynamicForm">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:Window.headerStyle" flags="IRWA" description="Style for the Window header." name="headerStyle" valueType="CSSStyleName" defaultValue="&quot;WindowHeader&quot;" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:ListGrid.headerButtonConstructor" flags="IR" description="Widget class for this ListGrid's header buttons. If unset constructor will be &amp;#010 picked up directly standard ${isc.DocUtils.linkForRef('class:Toolbar')} button constructor." name="headerButtonConstructor" valueType="Class" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DateChooser.nextYearIconHeight" flags="IRW" description="Height of the icon for the next year button" name="nextYearIconHeight" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:SectionStack.animateSections" flags="IRW" description="If true, sections are animated during expand/collapse and addition/removal of&amp;#010 SectionItems is likewise animated." name="animateSections" valueType="boolean" defaultValue="null" type="attr" definingClass="class:SectionStack">
    <examples>${isc.DocUtils.linkForExampleId('animateSections')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="method:List.containsAll" flags="" description=" Return whether this list contains all the item in the specified list.&amp;#010&amp;#010" name="containsAll" type="method" definingClass="interface:List">
<params description="items to look for" optional="false" name="list" type="List">
</params>
<returns description="whether all items were found" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:ListGridField.editorValueIconHeight" flags="IRW" description="When some cell in this field is being edited, setting this property will specify the&amp;#010 height for value icons in the cell's editor. If unset, the editor's valueIcon width and&amp;#010 height will be determined in the same way as it would be for a static cell." name="editorValueIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:CubeGrid.cellAlign" flags="IRW" description="default align for cell values (in body)" name="cellAlign" valueType="alignEnum" defaultValue="&quot;center&quot;" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="method:Tree.getFolders" flags="" description="&amp;#010 Returns all the first-level folders of a node.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getFolders" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="List of immediate children that are folders" type="List"></returns>
</docItem>
<docItem ref="method:Canvas.getScrollWidth" flags="A" description=" Returns the scrollable width of the widget's contents, including children, ignoring&amp;#010 clipping.&amp;#010" name="getScrollWidth" type="method" definingClass="class:Canvas">
<returns description="the scrollable width of the widget's contents" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="classMethod:isc.showLoginDialog" flags="" description=" Handle a complete login interaction with a typical login dialog asking for username and&amp;#010 password credentials.&amp;#010 &lt;P&gt;&amp;#010 As with other convenience methods that show Dialogs, such as ${isc.DocUtils.linkForRef('classMethod:isc.warn')},&amp;#010 the dialog is shown and the function immediately returns.  When the user responds, the&amp;#010 provided callback function is called.&amp;#010 &lt;P&gt;&amp;#010 If the user clicks the &quot;Log in&quot; button, the credentials entered by the user are passed to&amp;#010 the provided &quot;loginFunc&quot; as an Object with properties &quot;username&quot; and &quot;password&quot; (NOTE: both&amp;#010 property names are all lowercase), as the variable &quot;credentials&quot;.  For example:&amp;#010 &lt;pre&gt;{ username: &quot;barney&quot;, password: &quot;rUbbL3&quot; }&lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 The &quot;loginFunc&quot; should then attempt to log in by whatever means is necessary.  The second&amp;#010 parameter to the loginFunc, &quot;dialogCallback&quot;, is a function, which must be called &lt;i&gt;whether&amp;#010 login succeeds or fails&lt;/i&gt; with a true/false value indicating whether login succeeded.&amp;#010 &lt;P&gt;&amp;#010 If the login dialog is dismissable (settable as properties.dismissable, default false) and&amp;#010 the user dismisses it, the loginFunc will be fired with null for the credentials.&amp;#010 &lt;P&gt;&amp;#010 The following code shows typical usage.  This code assumes you have created a global&amp;#010 function sendCredentials() that send credentials to some authentication system and fires a&amp;#010 callback function with the result:&amp;#010 &lt;pre&gt;&amp;#010 isc.showLoginDialog(function (credentials, dialogCallback) {&amp;#010     if (credentials == null) return; // dismissed&amp;#010&amp;#010     // send credentials    &amp;#010     sendCredentials(credentials, function (loginSucceeded) {&amp;#010         // report success or failure&amp;#010         dialogCallback(loginSucceeded);&amp;#010     })&amp;#010 })&amp;#010 &lt;/pre&gt;&amp;#010 The login dialog has several built-in behaviors:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; keyboard focus is automatically placed in the username field&amp;#010 &lt;li&gt; hitting enter in the username field proceeds to the password field&amp;#010 &lt;li&gt; hitting enter in the password field submits (fires the provided callback)&amp;#010 &lt;/ul&gt;&amp;#010 In addition to normal properties supported by Dialog/Window, the following special&amp;#010 properties can be passed:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;username&lt;/code&gt;: initial value for the username field&amp;#010 &lt;li&gt;&lt;code&gt;password&lt;/code&gt;: initial value for the password field&amp;#010 &lt;li&gt;&lt;code&gt;usernameTitle&lt;/code&gt;: title for the username field&amp;#010 &lt;li&gt;&lt;code&gt;passwordTitle&lt;/code&gt;: title for the password field&amp;#010 &lt;li&gt;&lt;code&gt;errorMessage&lt;/code&gt;: default error message on login failure&amp;#010 &lt;li&gt;&lt;code&gt;loginButtonTitle&lt;/code&gt;: title for the login button&amp;#010 &lt;li&gt;&lt;code&gt;dismissable&lt;/code&gt;: whether the dialog can be dismissed, default false&amp;#010 &lt;li&gt;&lt;code&gt;errorStyle&lt;/code&gt;: CSS style for the error message, if shown&amp;#010 &lt;/ul&gt;&amp;#010 See below for links to the default values for these properties.&amp;#010&amp;#010" name="showLoginDialog" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.LOGIN_TITLE">
</seeAlso>
<seeAlso ref="classAttr:Dialog.USERNAME_TITLE">
</seeAlso>
<seeAlso ref="classAttr:Dialog.PASSWORD_TITLE">
</seeAlso>
<seeAlso ref="classAttr:Dialog.LOGIN_BUTTON_TITLE">
</seeAlso>
<seeAlso ref="classAttr:Dialog.LOGIN_ERROR_MESSAGE">
</seeAlso>
<params description="Function to call to attempt login.  Recieves parameters                                      &quot;credentials&quot; and &quot;dialogCallback&quot;, described above" optional="false" name="loginFunc" type="Callback">
</params>
<params description="additional properties for the Dialog" optional="true" name="properties" type="Dialog properties">
</params>
    <groups>Prompting</groups>
</docItem>
<docItem ref="method:Array.min" flags="" description="          &amp;#010 			Returns the smallest number in the array, skipping non-numeric values.&amp;#010&amp;#010			If the start and/or end are given, searches the specified subset of the list.&amp;#010&amp;#010" name="min" type="method" definingClass="object:Array">
<params description="optional start index (default is 0)" optional="true" name="start" type="number">
</params>
<params description="optional end index (default is list.length)" optional="true" name="end" type="number">
</params>
<returns description="minimum of all items in the list, or null if all values are non-numeric" type="number"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="method:ListGrid.getCellAlign" flags="" description=" Return the horizontal alignment for cell contents. Default implementation returns &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.cellAlign')} if specified, otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.align')}.&amp;#010&amp;#010" name="getCellAlign" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<params description="this cell's record" optional="false" name="record" type="listGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="Horizontal alignment of cell contents: 'right', 'center', or 'left'" type="string"></returns>
</docItem>
<docItem ref="method:Canvas.parentResized" flags="" description=" Fires when the interior size of the parent changes, including parent resize and&amp;#010 scrollbar introduction or removal &amp;#010 &lt;p&gt;&amp;#010 This method allows a child to implement a layout policy that can be used within any &amp;#010 parent, such as a Resizer component that always snaps to the parent's&amp;#010 bottom-right corner.  The default implementation of this method applies a child's&amp;#010 percent sizes, if any, or implements layout based on the ${isc.DocUtils.linkForRef('attr:Canvas.snapTo')} property&amp;#010" name="parentResized" type="method" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:FormItem.endRow" flags="IRW" description="Whether this item should end the row it's in in the form layout" name="endRow" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FormItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="method:Button.action" flags="" description=" This property contains the default 'action' for the Button to fire when activated.&amp;#010" name="action" type="method" definingClass="class:Button">
</docItem>
<docItem ref="group:serverDataIntegration" title="Server DataSource Integration" description="Server Data Integration means:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; You ${isc.DocUtils.linkForRef('group:iscInstall','install')} the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Java&amp;#010 Server')} into any J2SE/J2EE environment&amp;#010 &lt;li&gt; You ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create DataSources')} in either XML or JavaScript,&amp;#010 possibly on-the-fly from ${isc.DocUtils.linkForRef('group:metadataImport','existing metadata')}.  &amp;#010 &lt;li&gt; When you bind ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable UI components')} to these&amp;#010 DataSources, the ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} issued by these components will be&amp;#010 transmitted to the server using a proprietary HTTP-based protocol, and the DataSource&amp;#010 responses likewise sent back via a proprietary protocol&amp;#010 &lt;li&gt; You will use SmartClient server APIs to receive the request data as Java Objects, and&amp;#010 you will provide response data as Java Objects&amp;#010 &lt;/ul&gt;&amp;#010 This approach is in contrast to &amp;#010 ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side Data Integration')}, which does not require the&amp;#010 SmartClient server, and in which client-side DataSources are configured to directly send and&amp;#010 receive HTTP messages containing XML, JSON or other content.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Handling DataSource Requests&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 Client-side ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} will send&amp;#010 ${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')} to the ISC server as background communications transparent to&amp;#010 the user.  Integrating SmartClient's DataSource layer with your data model is a matter of&amp;#010 handling these DSRequests and sending back DSResponses, in order to fulfill the 4 basic&amp;#010 operations of the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Protocol')}.&amp;#010 &lt;P&gt;&amp;#010 There are two approaches for routing inbound dsRequests to your business logic:&amp;#010 &lt;dl&gt;&amp;#010 &lt;dt&gt;RPCManager dispatch&lt;/dt&gt;&amp;#010 &lt;dd&gt;inbound requests are handled by a single dispatcher implemented as a Java servlet or&amp;#010 .jsp.  The ${isc.DocUtils.linkForRef('class:RPCManager')} is used to retrieve requests and provide responses&lt;/dd&gt;&amp;#010 &lt;dt&gt;${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation')}&lt;/dt&gt;&amp;#010 &lt;dd&gt;XML declarations route requests to existing business logic methods.  Inbound request&amp;#010 data is adapted to method parameters, and method return values are delivered as&amp;#010 responses&lt;/dd&gt;&amp;#010 &lt;/dl&gt;&amp;#010 &lt;P&gt;&amp;#010 Which approach you use is largely a matter of preference.  Direct Method Invocation (DMI)&amp;#010 may allow simple integration without writing any SmartClient-specific server code.&amp;#010 RPCManager dispatch integration provides an earlier point of control, allowing logic that&amp;#010 applies across different DataSource operations to be shared more easily.&amp;#010 &lt;P&gt;&amp;#010 Whether using RPCManager dispatch or DMI request routing, you must return data which, &amp;#010 translated to JavaScript via the rules described in com.isomorphic.js.JSTranslater.toJS(),&amp;#010 matches the ${isc.DocUtils.linkForRef('group:dataSourceOperations','response data required for the operationType')}.&amp;#010 &lt;P&gt;&amp;#010 For example, for a &quot;fetch&quot; request, your return data should translate to an Array of&amp;#010 JavaScript objects.  Your backend may be capable of returning data in a number of ways - you&amp;#010 should compare each format you can readily retrieve against the capabilities of the&amp;#010 JSTranslater.  Common options are to pass an XML document fragment or a Collection of Java&amp;#010 Beans/POJOs directly to DSResponse.setData().&amp;#010 &lt;p&gt;&amp;#010 For &quot;update&quot; and &quot;add&quot; DataSource requests, the inbound data is intended to be permanently&amp;#010 stored.  If you are using a DataSource specified in XML format, you can run the validators&amp;#010 you declared in the DataSource by calling the DSRequest.validate() method.  Assuming the&amp;#010 declared validation is passed, you can run custom validation logic, if any, and finally&amp;#010 create or update objects in your object model.  If you are using Beans/POJOs, the method&amp;#010 DataSource.applyProperties(map, bean) is an easy way to apply the validated values to an&amp;#010 Object tree or XML structure.&amp;#010 &lt;P&gt;&amp;#010 For more information on the DMI subsystem, see the ${isc.DocUtils.linkForRef('class:DMI')} class and the &amp;#010 &lt;a href='/examples/server_integration/#customDataSourceIntegrationDMI' onclick=&quot;window.open('/examples/server_integration/#customDataSourceIntegrationDMI');return false;&quot;&gt;DMI example&lt;/a&gt; in&amp;#010 the SDK.&amp;#010 &lt;P&gt;&amp;#010 Note that, as you continue to integrate your prototype with your backend, you can use a&amp;#010 mixture of DataSources that have been fully integrated with your backend and DataSources&amp;#010 that are either running in &quot;client-only&quot; mode (see ${isc.DocUtils.linkForRef('group:clientOnlyDataSources')}) or&amp;#010 that use ISC's built-in SQL connectivity (see ${isc.DocUtils.linkForRef('group:sqlDataSource')}).&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;RPCManager dispatch&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The basic flow of logic for handling DataSource requests using RPCManager dispatch is:&amp;#010 &lt;P&gt;&amp;#010 &lt;table class=&quot;normal&quot; border=1&gt;&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;1. Get current list of requests from the client.&lt;/td&gt;&amp;#010 &lt;td&gt;rpcManager.getRequests()&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;2. Determine operation type (Fetch, Add, Update, Remove) for a single request.&lt;/td&gt;&amp;#010 &lt;td&gt;dsRequest.getOperationType()&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;3. Get inbound values (Add, Update) and/or criteria (Fetch, Update, Remove) for this&amp;#010 request.&lt;/td&gt;&amp;#010 &lt;td&gt;dsRequest.getFieldValue()&lt;br&gt;&amp;#010 dsRequest.getValues()&lt;br&gt; &amp;#010 dsRequest.getCriteria()&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;4. Business logic, validation, calls to data and service tiers... anything you can code.&amp;#010 &lt;/td&gt;&amp;#010 &lt;td&gt;&lt;b&gt;execute custom logic&lt;/b&gt;&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;5. Set status and data for the response.&lt;/td&gt;&amp;#010 &lt;td&gt;dsResponse.setStatus()&lt;br&gt;&amp;#010 dsResponse.setData()&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010&amp;#010 &lt;tr&gt;&amp;#010 &lt;td&gt;6. Send response to the client.&lt;/td&gt;&amp;#010 &lt;td&gt;rpcManager.send()&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010 &lt;/table&gt;&amp;#010 &lt;P&gt;&amp;#010 For more information, see the ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}, and the &amp;#010 &lt;a href='/examples/server_integration/#customDataSourceIntegration' onclick=&quot;window.open('/examples/server_integration/#customDataSourceIntegration');return false;&quot;&gt;RPCManager example&lt;/a&gt;." name="serverDataIntegration" type="group">
    <treeLocation>Concepts/Client-Server Integration</treeLocation>
    <treeLocation>Java Server Reference</treeLocation>
    <refs>attr:DataSource.dataFormat</refs>
    <refs>attr:DataSource.requestProperties</refs>
    <refs>attr:DataSource.serverType</refs>
    <refs>attr:DataSource.tableName</refs>
    <refs>attr:DataSource.dbName</refs>
    <refs>attr:DataSource.serverObject</refs>
    <refs>attr:OperationBinding.requestProperties</refs>
    <refs>type:DSDataFormat</refs>
    <refs>type:DSServerType</refs>
</docItem>
<docItem ref="attr:TreeGrid.customIconOpenProperty" flags="IRWA" description="For folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),&amp;#010 this property allows the developer to specify on a per-node basis whether a&amp;#010 open state icon should be displayed when the folder is open.&amp;#010 Set &lt;code&gt;node[treeGrid.customIconOpenProperty]&lt;/code&gt; to true to show the open state&amp;#010 icons, or false to suppress this.&lt;br&gt;&amp;#010 If not specified this this behavior is determined by &lt;code&gt;treeGrid.showCustomIconOpen&lt;/code&gt;&amp;#010 for this node." name="customIconOpenProperty" valueType="string" defaultValue="&quot;showOpenIcon&quot;" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.customIconProperty">
</seeAlso>
<seeAlso ref="attr:TreeGrid.showCustomIconOpen">
</seeAlso>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:Window.resizer" flags="R" description="ImgButton-based resizer, shown in the footer." name="resizer" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:DataBoundComponent.useFlatFields" flags="IR" description="The &lt;code&gt;useFlatFields&lt;/code&gt; flag causes all simple type fields anywhere in a nested&amp;#010 set of DataSources to be exposed as a flat list for form binding.  &amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;useFlatFields&lt;/code&gt; is typically used with imported metadata, such as &amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','XML Schema')} from a &amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL','WSDL-described web servce')}, as a means of eliminating levels of XML&amp;#010 nesting that aren't meaningful in a user interface, without the cumbersome and fragile&amp;#010 process of mapping form fields to XML structures.&amp;#010 &lt;P&gt;&amp;#010 For example, having called ${isc.DocUtils.linkForRef('method:WebService.getInputDS')} to retrieve the input message&amp;#010 schema for a web service operation whose input message looks like this:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;FindServices&amp;gt;&amp;#010     &amp;lt;searchFor&amp;gt;search text&amp;lt;/searchFor&amp;gt;&amp;#010     &amp;lt;Options&amp;gt;&amp;#010         &amp;lt;caseSensitive&amp;gt;false&amp;lt;/caseSensitive&amp;gt;&amp;#010     &amp;lt;/Options&amp;gt;&amp;#010     &amp;lt;IncludeInSearch&amp;gt;&amp;#010         &amp;lt;serviceName&amp;gt;true&amp;lt;/serviceName&amp;gt;&amp;#010         &amp;lt;documentation&amp;gt;true&amp;lt;/documentation&amp;gt;&amp;#010         &amp;lt;keywords&amp;gt;true&amp;lt;/keywords&amp;gt;&amp;#010     &amp;lt;/IncludeInSearch&amp;gt;&amp;#010 &amp;lt;/FindServices&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Setting &lt;code&gt;useFlatFields&lt;/code&gt; on a ${isc.DocUtils.linkForRef('class:DynamicForm')} that is bound to this input&amp;#010 message schema would result in 5 ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} reflecting the 5 simple type&amp;#010 fields in the message.&amp;#010 &lt;P&gt;&amp;#010 For this form, the result of ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')} might look&amp;#010 like:&amp;#010 &lt;P&gt;&amp;#010 &lt;pre&gt;{&amp;#010    searchFor: &quot;search text&quot;,&amp;#010    caseSensitive: false,&amp;#010    serviceName: true,&amp;#010    documentation : true,&amp;#010    keywords : true&amp;#010 }&lt;/pre&gt;&amp;#010 When contacting a ${isc.DocUtils.linkForRef('class:WebService','WSDL web service')}, these values can be automatically&amp;#010 mapped to the structure of the input message for a web service operation by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:WSRequest.useFlatFields')} (for use with ${isc.DocUtils.linkForRef('method:WebService.callOperation')}) or by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')} (for use with a ${isc.DocUtils.linkForRef('class:DataSource')} that is&amp;#010 ${isc.DocUtils.linkForRef('group:wsdlBinding','bound to a WSDL web service')} via&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')}).  &amp;#010 &lt;P&gt;&amp;#010 Using these two facilities in conjunction (component.useFlatFields and&amp;#010 request.useFlatFields) allows gratuitous nesting to be consistently bypassed in both the user&amp;#010 presentation and in the actual XML messaging.&amp;#010 &lt;P&gt;&amp;#010 You can also set ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} to automatically enable &amp;#010 &quot;flattened&quot; XML serialization (request.useFlatFields) for all DataSource requests of a&amp;#010 particular operationType.&amp;#010 &lt;P&gt;&amp;#010 Note that &lt;code&gt;useFlatFields&lt;/code&gt; is not generally recommended for use with structures&amp;#010 where multiple simple type fields exist with the same name, however if used with such a&amp;#010 structure, the first field to use a given name wins.  &quot;first&quot; means the first field&amp;#010 encountered in a depth first search.  &quot;wins&quot; means only the first field will be present as a&amp;#010 field when data binding." name="useFlatFields" valueType="boolean" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
</docItem>
<docItem ref="method:Img.setImageType" flags="" description=" Change the style of image rendering.&amp;#010&amp;#010" name="setImageType" type="method" definingClass="class:Img">
<params description="new style of image rendering" optional="false" name="imageType" type="ImageStyle">
</params>
</docItem>
<docItem ref="classAttr:Page.defaultUnsupportedBrowserURL" flags="IRWA" description="On a call to &lt;code&gt;Page.checkBrowserAndRedirect()&lt;/code&gt;, if no explicit URL&amp;#010      is passed in, and the browser is not supported by ISC, redirect to this URL." name="defaultUnsupportedBrowserURL" valueType="URL" defaultValue="&quot;[SKIN]/unsupported_browser.html&quot;" type="classAttr" definingClass="class:Page">
<seeAlso ref="classMethod:Page.checkBrowserAndRedirect">
</seeAlso>
    <groups>files</groups>
</docItem>
<docItem ref="classMethod:isc.clearPrompt" flags="" description="&amp;#010	Clear the modal prompt being shown to the user.&amp;#010&amp;#010" name="clearPrompt" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Prompt">
</seeAlso>
    <groups>Prompting</groups>
</docItem>
<docItem ref="group:compression" title="Compression" description="Compression helps reduce the sizes of various data fetched from the server.  Most modern web&amp;#010 browsers can handle compressed responses of certain content types. The time it takes to&amp;#010 decompress these responses on a client system is negligible compared to the time saved&amp;#010 by reducing the number of bits on the wire, especially for slow connections.&amp;#010 &lt;p&gt;&amp;#010 If you're not using the SmartClient Java back-end, there are several compression solutions&amp;#010 available, depending on your server of choice.  Microsoft's IIS has built-in compression&amp;#010 capability, please check the reference manual for details.  If you're using Apache, you can&amp;#010 use &lt;a href='http://sourceforge.net/projects/mod-gzip/' onclick=&quot;window.open('http://sourceforge.net/projects/mod-gzip/');return false;&quot;&gt;mod_gzip&lt;/a&gt; or &amp;#010 use &lt;a href='http://httpd.apache.org/docs/2.0/mod/mod_deflate.html' onclick=&quot;window.open('http://httpd.apache.org/docs/2.0/mod/mod_deflate.html');return false;&quot;&gt;mod_deflate&lt;/a&gt;.  Some&amp;#010 servlet containers also natively support dynamic compression.&amp;#010 &lt;p&gt;&amp;#010 The SmartClient Java back-end supports two types of response compression:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Pre-compressed static content served via the ISC FileDownload servlet.&amp;#010 &lt;li&gt;On-the-fly compression of arbitrary content using the CompressionFilter.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;u&gt;Serving pre-compressed files&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 To serve pre-compressed static content via FileDownload, register the FileDownload servlet&amp;#010 in your web.xml as follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileDownload&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;servlet-class&amp;gt;com.isomorphic.servlet.FileDownload&amp;lt;/servlet-class&amp;gt;&amp;#010     &amp;lt;/servlet&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Then map any resource that you want to serve compressed to the FileDownload servlet in your&amp;#010 web.xml.  Typically, you'll want to serve all SmartClient modules compressed.  You can do so&amp;#010 by adding the following servlet-mapping directive to your web.xml:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet-mapping&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileDownload&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;url-pattern&amp;gt;/isomorphic/system/modules/*&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/servlet-mapping&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Finally, you'll need to create pre-compressed versions of your files alongside the&amp;#010 uncompressed versions.  If you're using the FileAssembler mechanism, it can create&amp;#010 pre-compressed files for you automatically.  For all other files, you can use any program&amp;#010 that uses the gzip encoding.  The compressed file must have exactly the same filename as the&amp;#010 uncompressed version, with a '.gz' extension.  Note that it's important that both the&amp;#010 compressed and uncompressed versions be present alongside each other because there are cases&amp;#010 where serving compressed content is not possible (for example HTTP 1.0 requests) - for those&amp;#010 situations it's important that the uncompressed files be available to be served to the&amp;#010 client.  The FileDownload filter automatically detects whether or not compression is&amp;#010 possible.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;Dynamic Compression&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Dynamic Compression requires the optional Network Performance module.  To use Dynamic&amp;#010 Compression, register the CompressionFilter filter in your web.xml as follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;filter&amp;gt;&amp;#010         &amp;lt;filter-name&amp;gt;CompressionFilter&amp;lt;/filter-name&amp;gt;&amp;#010         &amp;lt;filter-class&amp;gt;com.isomorphic.servlet.CompressionFilter&amp;lt;/filter-class&amp;gt;&amp;#010     &amp;lt;/filter&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Then map any resource that you want dynamically compressed to this filter.  Note that the&amp;#010 CompressionFilter knows the mime types that are compressible and will automatically ignore&amp;#010 any stream that sets a content-encoding header, and it automatically figures out if the&amp;#010 current request is an include or forward (and doesn't compress in that case), so it's safe&amp;#010 to simply map it to all resources as follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;filter-mapping&amp;gt;&amp;#010         &amp;lt;filter-name&amp;gt;CompressionFilter&amp;lt;/filter-name&amp;gt;&amp;#010         &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/filter-mapping&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 You can register the CompressionFilter anywhere in your filter chain, but be aware that&amp;#010 if any filters in front wrap and inspect the HttpServletResponse output stream, they will&amp;#010 be inspecting the compressed response.  Filters are typically applied in the order in which&amp;#010 they are listed in web.xml. &amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;Compressable mime types and compatibility&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The FileDownload servlet and CompressionFilter filter can serve the following mime-types&amp;#010 compressed: text/html, text/xml, application/x-javascript, text/javascript, text/ecmascript,&amp;#010 image/svg+xml.  If your files are not being compressed, make sure your servlet container&amp;#010 has a mime type mapping that identifies it as one of the above file types.&amp;#010 &lt;p&gt;&amp;#010 Compression for the mime types listed above is supported on all browsers supported by&amp;#010 SmartClient.  There is one exception: compression of javascript files for IE versions older&amp;#010 than IE6 Service Pack 2 requires that the CompressionFilter be registerd to dynamically&amp;#010 compress the page that loads these javascript files." name="compression" type="group">
    <treeLocation>Optional Modules/Network Performance</treeLocation>
</docItem>
<docItem ref="attr:ListGridRecord.canDrag" flags="IR" description="When set to &lt;code&gt;false&lt;/code&gt;, this record cannot be dragged. If canDrag is false for&amp;#010 any record in the current selection, none of the records will be draggable." name="canDrag" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
</docItem>
<docItem ref="attr:Canvas.animateScrollAcceleration" flags="IRWA" description="Default acceleration function for performing an animated scroll.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateScrollAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:HeaderItem.defaultValue" flags="IRW" description="Header text" name="defaultValue" valueType="String" defaultValue="&quot;Header&quot;" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Window.footer" flags="R" description="Optional footer for the window, providing space for a resizer and status bar." name="footer" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:SectionHeader.baseStyle" flags="IRA" description="CSS class for the section header." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;sectionHeader&quot;" type="attr" definingClass="class:SectionHeader">
</docItem>
<docItem ref="attr:ListGridField.valueIcons" flags="IRW" description="This property is a mapping between data values and URLs of icons to display.&amp;#010 If specified, for every cell in this field where the data value matches an entry in&amp;#010 the valueIcons map, an icon with the appropriate URL will be displayed.&lt;br&gt;&amp;#010 By default any editors displayed for this field will have the same valueIcons object&amp;#010 applied to them. This may be overridden by explicitly setting &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueIcons')}.&lt;br&gt;&amp;#010 Note that the following attributes related to valueIcon styling will also be picked up&amp;#010 by the editor from the ListGridField object unless explicitly specified via the&amp;#010 equivalent &lt;code&gt;editor_&lt;/code&gt; attributes:&lt;br&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')}&lt;br&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconHeight')}&lt;br&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}&lt;br&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconLeftPadding')}&lt;br&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconRightPadding')}&lt;br&gt;            &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')}&lt;br&gt;    &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLSuffix')}" name="valueIcons" valueType="object" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:DataSource.dataTransport" flags="IR" description="Transport to use for all operations on this DataSource. Defaults to&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  This would typically only be set to&amp;#010 enable &quot;scriptInclude&quot; transport for contacting ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} web&amp;#010 services hosted on servers other than the origin server.&amp;#010 &lt;p&gt;&amp;#010 When using the &quot;scriptInclude&quot; transport, be sure to set ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.callbackParam')} to match the name of the query parameter name expected&amp;#010 by your JSON service provider." name="dataTransport" valueType="RPCTransport" defaultValue="RPCManager.defaultTransport" type="attr" definingClass="class:DataSource">
<seeAlso ref="type:RPCTransport">
</seeAlso>
<seeAlso ref="attr:DataSource.callbackParam">
</seeAlso>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="class:ServerObject" description="The ServerObject tells the ISC server how to find or create a server-side object involved in&amp;#010 ${isc.DocUtils.linkForRef('class:DMI')} (Direct Method Invocation).  &amp;#010 &lt;p&gt;&amp;#010 A ServerObject declaration appears in the XML definition of a ${isc.DocUtils.linkForRef('class:DataSource')} (for&amp;#010 responding to ${isc.DocUtils.linkForRef('class:DSRequest')}s) or in an Application configuration file (.app.xml) for&amp;#010 responding to ${isc.DocUtils.linkForRef('class:RPCRequest')}s." name="ServerObject" type="class">
    <treeLocation>Client Reference/RPC</treeLocation>
    <attrs>attr:ServerObject.lookupStyle</attrs>
    <attrs>attr:ServerObject.className</attrs>
    <attrs>attr:ServerObject.ID</attrs>
    <attrs>attr:ServerObject.bean</attrs>
    <attrs>attr:ServerObject.attributeName</attrs>
    <attrs>attr:ServerObject.attributeScope</attrs>
    <attrs>attr:ServerObject.visibleMethods</attrs>
    <attrs>attr:ServerObject.dropExtraFields</attrs>
<seeAlso ref="class:DMI">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="group:jsStringTag" title="&amp;lt;isomorphic:jsString&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt;JavaScript&amp;#010 &lt;p&gt;&amp;#010 This tag takes everything in its body and outputs a correctly-escaped JavaScript string.&amp;#010 This is useful for capturing HTML for display in a Canvas or Label, for example.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;var&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Any legal egal JavaScript variable name&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 If specified, the escaped string is assigned to a newly created variable of the specified&amp;#010 name.  e.g: var foo = &quot;bar&quot;;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;filename&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: webRoot-relative path to file&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 If specified, the resulting string contents is loaded from the specified file instead of&amp;#010 from the tag body." name="jsStringTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:ValuesManager.hasErrors" flags="" description=" Are there any errors associated with any fields in this valuesManager?&amp;#010" name="hasErrors" type="method" definingClass="class:ValuesManager">
<returns description="returns true if there are any oustanding validation errors, false                   otherwise." type="boolean"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="method:Slider.setValue" flags="" description=" Sets the slider value to newValue and moves the slider thumb to the appropriate position for this&amp;#010 value. Sends the 'sliderMove' event to the sliderTarget.&amp;#010&amp;#010" name="setValue" type="method" definingClass="class:Slider">
<params description="the new value" optional="false" name="newValue" type="float">
</params>
<params description="do not animate the slider thumb to the new value" optional="false" name="noAnimation" type="boolean">
</params>
</docItem>
<docItem ref="class:Label" description="Labels display a small amount of ${isc.DocUtils.linkForRef('attr:Label.align','alignable')} ${isc.DocUtils.linkForRef('attr:Label.contents','text')}&amp;#010 with optional ${isc.DocUtils.linkForRef('attr:Label.icon','icon')} and ${isc.DocUtils.linkForRef('attr:Label.autoFit','autoFit')}.&amp;#010 &lt;P&gt;&amp;#010 For a general-purpose container for HTML content, use ${isc.DocUtils.linkForRef('class:HTMLFlow')} or ${isc.DocUtils.linkForRef('class:HTMLPane')}&amp;#010 instead." name="Label" type="class">
    <methods>method:Label.setIconOrientation</methods>
    <methods>method:Label.setIcon</methods>
    <methods>method:Label.setContents</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:Label.contents</attrs>
    <attrs>attr:Label.dynamicContents</attrs>
    <attrs>attr:Label.align</attrs>
    <attrs>attr:Label.valign</attrs>
    <attrs>attr:Label.wrap</attrs>
    <attrs>attr:Label.autoFit</attrs>
    <attrs>attr:Label.icon</attrs>
    <attrs>attr:Label.iconSize</attrs>
    <attrs>attr:Label.iconWidth</attrs>
    <attrs>attr:Label.iconHeight</attrs>
    <attrs>attr:Label.iconOrientation</attrs>
    <attrs>attr:Label.iconAlign</attrs>
    <attrs>attr:Label.iconSpacing</attrs>
    <attrs>attr:Label.showDisabledIcon</attrs>
    <attrs>attr:Label.showRollOverIcon</attrs>
    <attrs>attr:Label.showFocusedIcon</attrs>
    <attrs>attr:Label.showDownIcon</attrs>
    <attrs>attr:Label.showSelectedIcon</attrs>
    <examples>${isc.DocUtils.linkForExampleId('label')}</examples>
</docItem>
<docItem ref="attr:ListGrid.emptyMessageStyle" flags="IRW" description="The CSS style name applied to the ${isc.DocUtils.linkForRef('attr:ListGrid.emptyMessage')} if displayed." name="emptyMessageStyle" valueType="CSSStyleName" defaultValue="&quot;emptyMessage&quot;" type="attr" definingClass="class:ListGrid">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="classMethod:isc.defineClass" flags="" description=" Shortcut for &lt;code&gt;isc.ClassFactory.defineClass()&lt;/code&gt;.&amp;#010" name="defineClass" type="classMethod" definingClass="class:isc">
<seeAlso ref="classMethod:ClassFactory.defineClass">
</seeAlso>
<params description="Name for the new class." optional="false" name="className" type="string">
</params>
<params description="Optional SuperClass Class object or name" optional="true" name="superClass" type="Class">
</params>
<returns description="Returns the new Class object." type="Class"></returns>
</docItem>
<docItem ref="method:ListGrid.saveAllEdits" flags="" description=" Save a number of outstanding edits for this ListGrid. If no rows are specifed, all &amp;#010 outstanding edits will be saved&amp;#010" name="saveAllEdits" type="method" definingClass="class:ListGrid">
<params description="optionally specify which rows to save" optional="true" name="rows" type="array of numbers">
</params>
<params description="If specified this callback will be fired on a successful save  of the specified rows." optional="true" name="saveCallback" type="callback">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Canvas.enable" flags="" description=" Enables this widget and any children / peers of this widget.&amp;#010" name="enable" type="method" definingClass="class:Canvas">
    <groups>enable</groups>
</docItem>
<docItem ref="attr:DynamicForm.unknownErrorMessage" flags="IRW" description="The error message for a failed validator that does not specify its own errorMessage." name="unknownErrorMessage" valueType="string" defaultValue="&quot;Invalid value&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Validator.stopIfFalse" flags="IR" description="Normally, all validators defined for a field will be run even if one of the validators has&amp;#010 already failed.  However, if &lt;code&gt;stopIfFalse&lt;/code&gt; is set, validation will not proceed&amp;#010 beyond this validator if the check fails.&amp;#010 &lt;P&gt;&amp;#010 This is useful to prevent expensive validators from being run unnecessarily, or to allow&amp;#010 custom validators that don't need to be robust about handling every conceivable type of&amp;#010 value." name="stopIfFalse" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Validator">
</docItem>
<docItem ref="attr:RPCRequest.contentType" flags="IRW" description="Valid with the xmlHttpRequest transport only and only when&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} is set to &quot;POST&quot;." name="contentType" valueType="String" defaultValue="&quot;application/x-www-form-urlencoded&quot;" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="attr:Facet.isTree" flags="IR" description="Marks this facet as a hierarchical facet.&amp;#010 &lt;P&gt;&amp;#010 If set, ${isc.DocUtils.linkForRef('attr:Facet.values','facet.value')} will be linked as for a&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.modelType','modelType:&quot;parent&quot;')} Tree, using&amp;#010 ${isc.DocUtils.linkForRef('attr:FacetValue.id','facetValue.id')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FacetValue.parentId','facetValue.parentId')}.&amp;#010 Expand/collapse controls will be shown allowing navigation of the facet's values.&amp;#010 &lt;P&gt;&amp;#010 The CubeGrid's ${isc.DocUtils.linkForRef('attr:CubeGrid.dataSource','load on demand')} system automatically avoids&amp;#010 fetching data for facetValues that are not currently visible due to the expand/collapse&amp;#010 state of a tree facet.&amp;#010 &lt;P&gt;&amp;#010 Initial open/close state can be controlled via&amp;#010 ${isc.DocUtils.linkForRef('attr:Facet.collapsed','facet.collapsed')} and ${isc.DocUtils.linkForRef('attr:FacetValue.collapsed')}." name="isTree" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="method:ComboBoxItem.fetchData" flags="" description=" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).&lt;br&gt;&amp;#010 Performs a fetch type operation on this item's DataSource to retrieve the set of valid&amp;#010 options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.&amp;#010" name="fetchData" type="method" definingClass="class:ComboBoxItem">
<params description="Callback to fire when the fetch completes. Callback will               fire with 2 parameters: &lt;code&gt;item&lt;/code&gt; a pointer to the form item and&amp;#010              &lt;code&gt;dsResponse&lt;/code&gt; the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server." optional="false" name="callback" type="callback">
</params>
<params description="properties to apply to the              dsRequest for this fetch." optional="false" name="requestProperties" type="dsRequest properties">
</params>
</docItem>
<docItem ref="attr:Menu.autoDismiss" flags="IRW" description="When true, when a menu item is chosen (via mouse click or keyboard), the menu is not &amp;#010		automatically hidden, staying in place for further interactivity" name="autoDismiss" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="attr:Validator.clientOnly" flags="IR" description="Indicates this validator runs on the client only.&amp;#010 &lt;p&gt;&amp;#010 Normally, if the server is trying to run validators and finds a validator that it can't&amp;#010 execute, for safety reasons validation is considered to have failed.  Use this flag to&amp;#010 explicitly mark a validator that only needs to run on the client." name="clientOnly" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Validator">
</docItem>
<docItem ref="attr:RowSpacerItem.startRow" flags="IRW" description="these items are in a row by themselves by default" name="startRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RowSpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DynamicForm.setValues" flags="" description=" Sets the values of the entire form, as an Object containing the values of the form as&amp;#010 properties, where each propertyName is the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and&amp;#010 each property value is the value held by that form item.&amp;#010 &lt;P&gt;&amp;#010 Any ${isc.DocUtils.linkForRef('class:FormItem')} for which a value is not provided will revert to its&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue','defaultValue')}.  To cause all FormItems to revert to default&amp;#010 values, pass null.&amp;#010 &lt;P&gt;&amp;#010 This method also calls ${isc.DocUtils.linkForRef('method:DynamicForm.rememberValues')} so that a subsequent later call to&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.resetValues')} will revert to the passed values.&amp;#010&amp;#010" name="setValues" type="method" definingClass="class:DynamicForm">
<params description="values for the form, or null to reset all items to default values" optional="true" name="newData" type="Object">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="method:FormItem.isDisabled" flags="A" description="  Is this item disabled?&amp;#010" name="isDisabled" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.disabled">
</seeAlso>
<returns description="disabledtrue if this item is be disabled" type="boolean"></returns>
    <groups>enable</groups>
</docItem>
<docItem ref="attr:GridRenderer.canSelectOnRightMouse" flags="RW" description="If true, rightMouseDown events will fire 'selectOnRightMouseDown()' for the appropriate cells." name="canSelectOnRightMouse" valueType="boolean" defaultValue="true" type="attr" definingClass="class:GridRenderer">
    <groups>events</groups>
</docItem>
<docItem ref="attr:DataSourceField.validators" flags="IR" description="Validators to be applied to this field.&amp;#010 &lt;p&gt;&amp;#010 Validators are applied whenever there is an attempt to save changes to a field.&amp;#010 &lt;p&gt;&amp;#010 For the available set of built-in validators, and how to define a custom validator, see the&amp;#010 ${isc.DocUtils.linkForRef('class:Validator')} class." name="validators" valueType="Array of Validator" defaultValue="null" type="attr" definingClass="class:DataSourceField">
<seeAlso ref="class:Validator">
</seeAlso>
    <groups>dataType</groups>
    <groups>validation</groups>
</docItem>
<docItem ref="method:Class.ignore" flags="A" description="		Stop observing a method on some other object.&amp;#010&amp;#010" name="ignore" type="method" definingClass="class:Class">
<seeAlso ref="method:Class.observe">
</seeAlso>
<params description="object to observe" optional="false" name="object" type="object">
</params>
<params description="name of the method to observe" optional="false" name="methodName" type="string">
</params>
<returns description="true == observation stopped, false == no change made" type="boolean"></returns>
    <groups>observation</groups>
</docItem>
<docItem ref="attr:CubeGrid.canResizeColumns" flags="IRW" description="If true, body columns can be resized via the innermost column headers." name="canResizeColumns" valueType="boolean" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:GridRenderer.alternateRowFrequency" flags="IRW" description="The number of consecutive rows to draw in the same style before alternating, when&amp;#010 alternateRowStyles is true." name="alternateRowFrequency" valueType="number" defaultValue="1" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="method:String.contains" flags="" description="			Returns true if this string contains the specified substring.&amp;#010" name="contains" type="method" definingClass="class:String">
<params description="string to look for" optional="false" name="substring" type="String">
</params>
<returns description="true == this string contains the substring" type="boolean"></returns>
    <groups>stringProcessing</groups>
</docItem>
<docItem ref="attr:OperationBinding.callbackParam" flags="IR" description="Applies only to dataFormat: &quot;json&quot;.  Specifies the name of the query parameter that&amp;#010 tells your JSON service what function to call as part of the response for this operation.&amp;#010 &lt;P&gt;&amp;#010 Typically set once for the DataSource as a whole via ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')}." name="callbackParam" valueType="String" defaultValue="&quot;callback&quot;" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="attr:DataSource.callbackParam">
</seeAlso>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:CubeGrid.canMinimizeColumns" flags="IRW" description="If true, allow columns in the grid body to be minimized (reduced to the width of the&amp;#010 minimize control) by clicking on a minimize control in the innermost column headers." name="canMinimizeColumns" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem type="class" ref="class:HTMLFlow" description="Use the HTMLFlow component to display HTML content that should expand to its natural size&amp;#010 without scrolling.  &amp;#010 &lt;p&gt;&amp;#010 HTML content can be loaded and reloaded from a URL via the property&amp;#010 &lt;code&gt;contentsURL&lt;/code&gt;.  This method of loading is for simple HTML content&amp;#010 only; SmartClient components should be loaded via the ${isc.DocUtils.linkForRef('class:ViewLoader')} class.&amp;#010 &lt;P&gt;&amp;#010 NOTE: Since the size of an HTMLFlow component is determined by its HTML contents, this&amp;#010 component will draw at varying sizes if given content of varying size.  When using HTMLFlow&amp;#010 components within a Layout, consider what will happen if the HTMLFlow renders at various&amp;#010 sizes.  An HTMLFlow which can expand should be placed in a container where other components&amp;#010 can render smaller, where the container is allowed to scroll, or where there is padding to&amp;#010 expand into." name="HTMLFlow">
    <methods>method:HTMLFlow.setContentsURL</methods>
    <methods>method:HTMLFlow.loadingContent</methods>
    <methods>method:HTMLFlow.handleError</methods>
    <methods>method:HTMLFlow.transformHTML</methods>
    <methods>method:HTMLFlow.contentLoaded</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:HTMLFlow.contents</attrs>
    <attrs>attr:HTMLFlow.dynamicContents</attrs>
    <attrs>attr:HTMLFlow.contentsURL</attrs>
    <attrs>attr:HTMLFlow.loadingMessage</attrs>
    <attrs>attr:HTMLFlow.contentsURLParams</attrs>
    <attrs>attr:HTMLFlow.httpMethod</attrs>
    <attrs>attr:HTMLFlow.contentsType</attrs>
    <attrs>attr:HTMLFlow.evalScriptBlocks</attrs>
    <attrs>attr:HTMLFlow.captureSCComponents</attrs>
    <examples>${isc.DocUtils.linkForExampleId('htmlFlow')}</examples>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:DynamicForm.valuesManager" flags="IA" description="If set at init time, this dynamicForm will be created as a member form for the&amp;#010 specified valuesManager.  To update the valuesManager to which a form belongs after init&amp;#010 use &lt;code&gt;valuesManager.addMember(form)&lt;/code&gt; and &amp;#010 &lt;code&gt;valuesManager.removeMember(form)&lt;/code&gt;" name="valuesManager" valueType="ValuesManager instance or global ID" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="class:ValuesManager">
</seeAlso>
    <groups>formValuesManager</groups>
</docItem>
<docItem ref="type:RPCTransport" description="SmartClient supports multiple RPC transports for maximum compatibility and feature richness.&amp;#010 All of transports use HTTP as the underlying protocol, but use different mechanisms for&amp;#010 sending the HTTP request and processing the response.  The transport is typically&amp;#010 auto-selected for by based on the feature being used and the current browser settings.  For&amp;#010 advanced use cases, ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')} and ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} are&amp;#010 exposed as override points.&amp;#010 &lt;p&gt;" name="RPCTransport" type="type">
<values description="Uses the XMLHttpRequest object to make the request to the server. Note that in some browsers with certain configurations, this transport may not be&amp;#010 available.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.  This transport is&amp;#010 not useful with file uploads.  Cannot be used to target cross-domain URLs directly." value="&quot;xmlHttpRequest&quot;"></values>
<values description="Write a SCRIPT tag into the DOM with a SRC attribute that targets an arbitrary URL.  This transport is the only one that allows direct cross-domain URL&amp;#010 access.  &amp;#010 &lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} to work, the server being contacted must support the ability&amp;#010 to generate JavaScript code in the response that will call a JavaScript function generated&amp;#010 by SmartClient.  SmartClient passes the name of the function to call via a URL parameter,&amp;#010 which can be controlled with ${isc.DocUtils.linkForRef('attr:RPCRequest.callbackParam')}." value="&quot;scriptInclude&quot;"></values>
<values description="Available with SmartClient Server only.  An HTML form is dynamically assembled that targets a hidden IFRAME.  This mechanism is supported on all&amp;#010 browsers and cannot be disabled by end users.  &amp;#010 &lt;P&gt;&amp;#010 If using the SmartClient Server and using &amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side data integration')}, the &quot;hiddenFrame&quot; transport&amp;#010 is automatically used for all RPCManager and DataSource requests if the &quot;xmlHttpRequest&quot;&amp;#010 transport is not available.&amp;#010 &lt;P&gt;&amp;#010 Cannot be used to target cross-domain URLs directly." value="&quot;hiddenFrame&quot;"></values>
</docItem>
<docItem ref="attr:Tree.defaultNodeTitle" flags="IRW" description="Title assigned to nodes without a ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')} value or a&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} value." name="defaultNodeTitle" valueType="string" defaultValue="&quot;Untitled&quot;" type="attr" definingClass="class:Tree">
</docItem>
<docItem exampleConfig="HStack.xml" ref="class:HStack" description="A subclass of Layout that simply stacks members on the horizontal axis without trying to&amp;#010 manage their width.  On the vertical axis, any members that do not have explict heights will&amp;#010 be sized to match the height of the stack." name="HStack" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
<seeAlso ref="attr:Layout.hPolicy">
</seeAlso>
</docItem>
<docItem ref="method:ListGrid.getEditCol" flags="" description="&amp;#010  Returns the index of the column being edited.&amp;#010&amp;#010" name="getEditCol" type="method" definingClass="class:ListGrid">
<returns description="Index of the current edit column" type="number"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Layout.drop" flags="A" description=" Layouts have built-in handling of component drag and drop.  See the discussion in&amp;#010 ${isc.DocUtils.linkForRef('class:Layout')} on how it works.  If you override this builtin implementation of drop() and&amp;#010 you're using the built-in dropLine via ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')}:true, be sure to call&amp;#010 ${isc.DocUtils.linkForRef('method:Layout.hideDropLine')} to hide the dropLine after doing your custom drop() handling.&amp;#010&amp;#010" name="drop" type="method" definingClass="class:Layout">
<seeAlso ref="class:Layout">
</seeAlso>
</docItem>
<docItem ref="attr:EdgedCanvas.centerBackgroundColor" flags="IR" description="Background color for the center section only.  Can be used as a surrogate background&amp;#010 color for the decorated Canvas, if the Canvas is set to partially overlap the edges and&amp;#010 hence can't show a background color itself without occluding media." name="centerBackgroundColor" valueType="cssColor" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="group:prompt" name="prompt" type="group">
</docItem>
<docItem ref="method:ListGrid.clearRowErrors" flags="" description="  Clear any stored validation errors for some row&amp;#010" name="clearRowErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.setRowErrors">
</seeAlso>
<params description="index of row to clear validation error for" optional="false" name="rowNum" type="number">
</params>
    <groups>validtion</groups>
</docItem>
<docItem ref="method:ListGrid.displayHeaderContextMenu" flags="" description=" If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')} is &lt;code&gt;true&lt;/code&gt; this method is fired&amp;#010 when the user right-clicks on the header for this grid.&lt;br&gt;&amp;#010 Default implementation will display a menu with entries derived from&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getHeaderContextMenuItems')} for the appropriate column.&amp;#010" name="displayHeaderContextMenu" type="method" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.showHeaderContextMenu">
</seeAlso>
<params description="which button in the header recieved the right-click event                         (may be the sorter button)" optional="false" name="target" type="Canvas">
</params>
<params description="Optional 2-element array specifying position at which the menu should                           be shown. If this is not passed in the menu will be shown at the&amp;#010                           mouseEvent position (default context menu behavior)." optional="true" name="position" type="Array">
</params>
    <groups>gridHeader</groups>
</docItem>
<docItem ref="attr:DetailViewer.showEmptyField" flags="IRWA" description="Whether to show the field when the value is null" name="showEmptyField" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.scrollToRight" flags="" description=" Horizontally scrolls the content of the widget to the end of its content&amp;#010&amp;#010" name="scrollToRight" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectAll" flags="" description="&amp;#010  deselect all cells and facetValues&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectAll" type="method" definingClass="class:CubeGrid">
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ImgSplitbar.canCollapse" flags="IRW" description="If this property is true, a click on the Splitbar will collapse its &amp;#010 ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}, hiding it and shifting the Splitbar and other members&amp;#010 of the layout across to fill the newly available space. If the target is already hidden&amp;#010 a click will expand it again (showing it at it's normal size)." name="canCollapse" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgSplitbar">
</docItem>
<docItem ref="group:cacheSync" name="cacheSync" type="group">
    <refs>attr:DSResponse.invalidateCache</refs>
    <refs>attr:ResultSet.initialData</refs>
    <refs>attr:ResultSet.initialLength</refs>
    <refs>attr:ResultSet.allRows</refs>
    <refs>attr:ResultSet.updateCacheFromRequest</refs>
    <refs>attr:ResultSet.dropCacheOnUpdate</refs>
    <refs>attr:ResultSet.disableCacheSync</refs>
    <refs>attr:ResultSet.neverDropUpdatedRows</refs>
    <refs>attr:ResultSet.updatePartialCache</refs>
    <refs>attr:ResultTree.updateCacheFromRequest</refs>
    <refs>attr:ResultTree.disableCacheSync</refs>
</docItem>
<docItem ref="method:Layout.showMember" flags="" description=" Show the specified member, firing the specified callback when the hide is complete.&amp;#010 &lt;P&gt;&amp;#010 Members can always be directly shown via &lt;code&gt;member.show()&lt;/code&gt;, but if&amp;#010 ${isc.DocUtils.linkForRef('attr:Layout.animateMembers','animation')} is enabled, animation will only occur if showMember() is&amp;#010 called to show the member.&amp;#010&amp;#010" name="showMember" type="method" definingClass="class:Layout">
<params description="Member to show" optional="false" name="member" type="Canvas">
</params>
<params description="action to fire when the member has been shown" optional="false" name="callback" type="Callback">
</params>
</docItem>
<docItem ref="group:submitting" description="Direct submission of forms to a target URL&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; directly submitting forms is only done for specialized purposes, such as&amp;#010 integration with certain legacy systems.  Normal form usage contacts the server via &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}, through the RPCManager system." name="submitting" type="group">
    <refs>method:DynamicForm.submitForm</refs>
    <refs>method:DynamicForm.submitValues</refs>
    <refs>method:SearchForm.search</refs>
    <refs>method:DynamicForm.cancel</refs>
    <refs>method:ValuesManager.cancel</refs>
    <refs>attr:DynamicForm.action</refs>
    <refs>attr:DynamicForm.target</refs>
    <refs>attr:DynamicForm.method</refs>
    <refs>attr:DynamicForm.encoding</refs>
    <refs>attr:DynamicForm.canSubmit</refs>
    <refs>attr:DynamicForm.saveOnEnter</refs>
    <refs>type:FormMethod</refs>
    <refs>type:Encoding</refs>
</docItem>
<docItem ref="attr:SelectOtherItem.separatorTitle" flags="IRW" description="title for the separator between normal items and the Other... value" name="separatorTitle" valueType="string" defaultValue="&quot;--------------------&quot;" type="attr" definingClass="class:SelectOtherItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.groupBy" flags="" description=" Display the current set of records grouped by their values for the given field or&amp;#010 fields. With no arguments, disables all grouping.&amp;#010 &lt;P&gt;&amp;#010 Grouping tranforms the current dataset into a Tree on the fly, then provides a familiar tree&amp;#010 interface for exploring the grouped data.&amp;#010 &lt;P&gt;&amp;#010 Grouping works automatically with any dataset, providing simple default grouping based on&amp;#010 each field's declared type.  However, you can use the&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue','field.getGroupValue()')} API to control how records are&amp;#010 grouped, and the ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle','field.getGroupTitle()')} API to control&amp;#010 how groups are titled.&amp;#010 &lt;P&gt;&amp;#010 Grouping can be performed programmatically via this API, or you can set&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canGroupBy','grid.canGroupBy:true')} to enable menus that allow the user to performing&amp;#010 grouping. To group a grid automatically, instantiate the grid with a&amp;#010  ${isc.DocUtils.linkForRef('attr:ListGrid.groupByField')} setting.&amp;#010 &lt;P&gt;&amp;#010 While grouped, the automatically created Tree is available as&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.groupTree','grid.groupTree')} and the original dataset is availabe as&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.originalData','grid.originalData')}.&amp;#010&amp;#010" name="groupBy" type="method" definingClass="class:ListGrid">
<params description="name of fields to group by" optional="true" name="arguments 0-N" type="String">
</params>
    <examples>${isc.DocUtils.linkForExampleId('dynamicGrouping')}</examples>
</docItem>
<docItem ref="attr:TreeGrid.showCustomIconOpen" flags="IRWA" description="Should folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),&amp;#010 show open state images when the folder is opened.&amp;#010 If true, the ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} will be appended to the image URL&amp;#010 (so &lt;code&gt;&quot;customFolder.gif&quot;&lt;/code&gt; might be replaced with &amp;#010 &lt;code&gt;&quot;customFolder_open.gif&quot;&lt;/code&gt;).&lt;br&gt;&amp;#010 &lt;b&gt;Note&lt;/b&gt; that we never append the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} to custom folder icons.&lt;br&gt;&amp;#010 Can be overridden at the node level via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconOpenProperty')} property." name="showCustomIconOpen" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:Layout.layoutLeftMargin" flags="IRW" description="Space outside of all members, on the left-hand side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;setLayoutMargin()&lt;/code&gt; if changed on the fly." name="layoutLeftMargin" valueType="integer" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="method:Class.getClass" flags="" description="	&amp;#010	Gets a pointer to the class object for this instance&amp;#010&amp;#010" name="getClass" type="method" definingClass="class:Class">
<returns description="Class object that was used to construct this object" type="Class"></returns>
</docItem>
<docItem ref="attr:Splitbar.skinImgDir" flags="IR" description="Default directory for skin images (those defined by the class), relative to the&amp;#010 Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}." name="skinImgDir" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>images</groups>
</docItem>
<docItem ref="group:filterEditor" name="filterEditor" type="group">
    <refs>method:ListGrid.focusInFilterEditor</refs>
    <refs>method:ListGrid.filterByEditor</refs>
    <refs>method:ListGrid.setShowFilterEditor</refs>
    <refs>method:ListGrid.getFilterEditorValueMap</refs>
    <refs>method:ListGrid.getFilterEditorType</refs>
    <refs>attr:ListGridField.canFilter</refs>
    <refs>attr:ListGridField.filterEditorValueMap</refs>
    <refs>attr:ListGridField.filterEditorType</refs>
    <refs>attr:ListGridField.defaultFilterValue</refs>
    <refs>attr:ListGridField.filterEditorProperties</refs>
    <refs>attr:ListGridField.filterOnKeypress</refs>
    <refs>attr:ListGrid.showFilterEditor</refs>
    <refs>attr:ListGrid.filterEditorHeight</refs>
    <refs>attr:ListGrid.filterByCell</refs>
    <refs>attr:ListGrid.filterOnKeypress</refs>
</docItem>
<docItem ref="attr:RPCRequest.promptCursor" flags="IRW" description="Controls the cursor shown when ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')} is set to&amp;#010 &lt;code&gt;&quot;cursor&quot;&lt;/code&gt; for this request only. Defaults to ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptCursor')}.&amp;#010 &lt;p&gt;&amp;#010 In Safari, IE 5.5 and Firefox 1.0 the default value is &quot;wait&quot;, on all other platforms it is&amp;#010 &quot;progress&quot;.  The reason for this split is that the above-mentioned browsers do not support&amp;#010 CSS2.1 - which is required for the &quot;progress&quot; cursor type." name="promptCursor" valueType="String" defaultValue="browser-dependent" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.promptCursor">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="method:Canvas.updateHover" flags="A" description=" If this canvas is currently showing a hover (see ${isc.DocUtils.linkForRef('method:Canvas.handleHover')}), this method&amp;#010 can be called to update the contents of the hover. Has no effect if the hover canvas is not&amp;#010 showing for this widget.&amp;#010" name="updateHover" type="method" definingClass="class:Canvas">
<params description="Option to specify new HTML for the hover. If not passed, the result   of ${isc.DocUtils.linkForRef('method:Canvas.getHoverHTML','this.getHoverHTML()')} will be used instead. Note that if the&amp;#010   hover HTML is empty the hover will be hidden." optional="true" name="hoverHTML" type="string">
</params>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:ListGrid.bodyBackgroundColor" flags="IRW" description="Background color applied to the ListGrid body (that is, the area of the grid where&amp;#010 data values are rendered).&lt;br&gt;&amp;#010 Note that this will typically not be visible to the user unless there are few enough&amp;#010 rows that there is visible space in the body below the last row. To style data cells,&amp;#010 override ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle')} instead." name="bodyBackgroundColor" valueType="string" defaultValue="&quot;white&quot;" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setLeft" flags="" description="			Set the left coordinate of this object, relative to its enclosing context, in pixels.&amp;#010			NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()&amp;#010          instead&amp;#010" name="setLeft" type="method" definingClass="class:Canvas">
<params description="new left coordinate" optional="false" name="left" type="number">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:Selection.select" flags="" description="			Select a particular item&amp;#010" name="select" type="method" definingClass="class:Selection">
<params description="object to select" optional="false" name="item" type="object">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:FormItem.editorType" flags="IR" description="Name of the FormItem to use for editing, eg &quot;TextItem&quot; or &quot;SelectItem&quot;.&amp;#010 &lt;P&gt;&amp;#010 The type of FormItem to use for editing is normally derived automatically from&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.type','field.type')}, which is the data type of the field, by the rules&amp;#010 explained ${isc.DocUtils.linkForRef('type:FormItemType','here')}." name="editorType" valueType="FormItem class" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="type:FormItemType">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:EventHandler.setDragTracker" flags="" description=" Set the HTML for the drag tracker that follows the mouse during a drag and drop interaction.&amp;#010 &lt;P&gt;&amp;#010 Your canvas can use this routine to set the drag tracker to whatever HTML you want like so:&amp;#010 &lt;pre&gt;&amp;#010    dragStart : function () {&amp;#010        isc.EventHandler.setDragTracker('Your contents here');&amp;#010    }&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="setDragTracker" type="classMethod" definingClass="class:EventHandler">
<params description="HTML for the tracker" optional="false" name="html" type="string">
</params>
<params description="new width for the tracker" optional="true" name="newWidth" type="number">
</params>
<params description="new height for the tracker" optional="true" name="newHeight" type="number">
</params>
<params description="x-offset for the tracker" optional="true" name="offsetX" type="number">
</params>
<params description="y-offset for the tracker" optional="true" name="offsetY" type="number">
</params>
<params description="Opportunity to pass in a free-form set of properties                                       for the dragTracker" optional="true" name="properties" type="object">
</params>
    <groups>dragDrop</groups>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="attr:ListGrid.headerBarStyle" flags="IR" description="Set the CSS style used for the header as a whole." name="headerBarStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.percentBox" flags="IRA" description="Governs the model to be used when sizing canvases with percentage width or height, or &amp;#010 positioning widgets with a specified ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')}.&amp;#010 &lt;P&gt;&amp;#010 Only  effects widgets with a a specified ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')}, or &amp;#010 widgets that have ${isc.DocUtils.linkForRef('attr:Canvas.snapTo')} set and are peers of some &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','other canvas')}.&amp;#010 &lt;P&gt;&amp;#010 Determins whether the coordinates used for sizing (for percentage sized widgets) and&amp;#010 positioning (if &lt;code&gt;snapTo&lt;/code&gt; is set) should be relative to the visible size or the&amp;#010 viewport size of the percentSource or masterElement widget." name="percentBox" valueType="PercentBoxModel" defaultValue="&quot;visible&quot;" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Tree.getParents" flags="" description="&amp;#010 Given a node, return an array of the node's parents with the immediate parent first.  The&amp;#010 node itself is not included in the result.  For example, for the following tree:&amp;#010 &lt;pre&gt;&amp;#010 root&amp;#010   foo&amp;#010     bar&amp;#010 &lt;/pre&gt;&amp;#010 Calling &lt;code&gt;tree.getParents(bar)&lt;/code&gt; would return: &lt;code&gt;[foo, root]&lt;/code&gt;.  Note that&amp;#010 the returned array will contain references to the nodes, not the names.&amp;#010&amp;#010" name="getParents" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="array of node's parents" type="Array"></returns>
</docItem>
<docItem ref="attr:StatefulCanvas.iconWidth" flags="IR" description="Width in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ListGrid.removeSelectedData" flags="" description=" Remove the currently selected records from this component.&amp;#010 If this is a databound grid, the records will be removed directly from the DataSource.&amp;#010 &lt;P&gt;&amp;#010 If no records are selected, no action is taken. The grid will automatically be&amp;#010 updated if the record deletion succeeds.&amp;#010&amp;#010" name="removeSelectedData" type="method" definingClass="class:ListGrid">
<params description="callback to fire when the data has been removed" optional="true" name="callback" type="callback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('removeOperation')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:ListGrid.validateByCell" flags="IRW" description="Whether client-side validation checks should be performed when the user moves between&amp;#010 cells in the current edit row.  If unset, defaults to ${isc.DocUtils.linkForRef('attr:ListGrid.editByCell')}.&lt;br&gt;&amp;#010 Note that if false validation occurs on row-transition rather than cell transitions.&amp;#010 Validation also always occurs when a row is to be saved." name="validateByCell" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="group:editing">
</seeAlso>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:Canvas.snapHGap" flags="IRW" description="The horizontal grid size to use, in pixels, when snap-to-grid is enabled." name="snapHGap" valueType="number" defaultValue="20" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.snapResizeToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapResizeToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:GridRenderer.getEventColumn" flags="" description=" Returns the column number of the most recent mouse event.&amp;#010" name="getEventColumn" type="method" definingClass="class:GridRenderer">
<params description="optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event" optional="false" name="x" type="number">
</params>
<returns description="column number, or -2 if beyond last drawn column" type="number"></returns>
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="group:debug" description="Support for debugging and logging" name="debug" type="group">
    <refs>method:Log.getCallTrace</refs>
    <refs>method:Log.getStackTrace</refs>
    <refs>method:Log.echoLeaf</refs>
    <refs>method:Log.echo</refs>
    <refs>method:Log.echoAll</refs>
    <refs>class:Log</refs>
    <refs>classMethod:Log.show</refs>
    <refs>classMethod:Log.traceMethod</refs>
    <refs>classMethod:Log.timeMethod</refs>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.snapTo" description="Position this widget such that it is aligned with (&quot;snapped to&quot;) an edge of its &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')} (if specified), or its&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}.&amp;#010 &lt;P&gt;&amp;#010 Note that this property also impacts the sizing of this widget. If this widgets size&amp;#010 is specifed as a percent value, and has no explicit&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.percentSource')}, sizing will be calculated based on the size of the &amp;#010 masterElement when snapTo is set.&amp;#010 &lt;P&gt;&amp;#010 Possible values: BR, BL, TR, TL, R, L, B, T where B=Bottom, T=Top, L=Left, R=right" name="snapTo" valueType="String" defaultValue="null" definingClass="class:Canvas">
    <getter>getSnapTo</getter>
    <setter>setSnapTo</setter>
<seeAlso ref="attr:Canvas.snapEdge">
</seeAlso>
<seeAlso ref="attr:Canvas.percentBox">
</seeAlso>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DataSource.dataFormat" flags="IR" description="Indicates the format to be used for HTTP requests and responses when&amp;#010 fulfilling DSRequests (eg ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} is called)." name="dataFormat" valueType="DSDataFormat" defaultValue="&quot;iscServer&quot;" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('jsonDataSource')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('simpleJSON')}</examples>
    <groups>clientDataIntegration</groups>
    <groups>serverDataIntegration</groups>
</docItem>
<docItem ref="attr:Canvas.edgeCursorMap" flags="IRWA" description="Cursor to use when over each edge of a Canvas that is drag resizable.&amp;#010 &lt;P&gt;&amp;#010 To disable drag resize cursors, set the edgeCursorMap property to null." name="edgeCursorMap" valueType="object" defaultValue="{...}" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.resizeFrom">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Canvas.hoverWidth" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:Canvas.showHover','this.showHover')} is true, this property can be used to customize the&amp;#010 width of the hover canvas shown." name="hoverWidth" valueType="measure" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('customHovers')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:Array.lastIndexOf" flags="" description=" Return the position in the list of the last instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking before that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="lastIndexOf" type="method" definingClass="object:Array">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="last index to consider" optional="true" name="pos" type="number">
</params>
<params description="earliest index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:FormItem.iconWidth" flags="IRWA" description="Default width for form item icons" name="iconWidth" valueType="number" defaultValue="20" type="attr" definingClass="class:FormItem">
    <getter>getIconWidth</getter>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:DSRequest.resultTree" flags="R" description="For advanced use in integrating trees that &amp;#010 ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','load data on demand')} with web services,&amp;#010 the ResultTree that issued this &quot;fetch&quot; DSRequest is automatically made available as the&amp;#010 &lt;code&gt;resultTree&lt;/code&gt; property.&amp;#010 &lt;P&gt;&amp;#010 This property can only be read.  There is no meaning to setting this property&amp;#010 yourself." name="resultTree" valueType="ResultTree" defaultValue="{}" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="attr:ValuesManager.members" flags="IRW" description="The set of member forms for this valuesManager.  These can be specified at init time via&amp;#010 the &lt;code&gt;members&lt;/code&gt; property, or updated at runtime via &lt;code&gt;addMember()&lt;/code&gt; and&amp;#010 &lt;code&gt;removeMember()&lt;/code&gt;.&lt;br&gt;&amp;#010 Note: Alternatively a form can be initialized as a member of a valuesManager by setting&amp;#010 the &lt;code&gt;valuesManager&lt;/code&gt; property of the form to a pre-defined valuesManager&amp;#010 instance." name="members" valueType="Array" defaultValue="null" type="attr" definingClass="class:ValuesManager">
    <getter>getMembers</getter>
<seeAlso ref="method:ValuesManager.addMember">
</seeAlso>
<seeAlso ref="method:ValuesManager.removeMember">
</seeAlso>
</docItem>
<docItem ref="method:DynamicForm.submitValues" flags="" description=" Triggered when a SubmitItem is included in the form is submitted and gets pressed.&amp;#010 &amp;#010" name="submitValues" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
<params description="the form values" optional="false" name="values" type="object">
</params>
<params description="the form being submitted" optional="false" name="form" type="DynamicForm">
</params>
    <groups>submitting</groups>
</docItem>
<docItem ref="method:StatefulCanvas.select" flags="" description=" Select this object.&amp;#010" name="select" type="method" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="object:CellRecord" description="A CellRecord represents the data for one cell of the body area.&amp;#010 &lt;P&gt;&amp;#010 Each CellRecord should be an object that minimally has a property named after each&amp;#010 visible facetId with the value being a facetValueId from that facet, and also a value&amp;#010 for ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty')}.&amp;#010 &lt;P&gt;&amp;#010 Cell records can contain any other properties desired, such as cell ids, or values for&amp;#010 facets not initially shown." name="CellRecord" type="object">
    <treeLocation>Optional Modules/Analytics/CubeGrid</treeLocation>
    <attrs>attr:CellRecord.enabled</attrs>
    <requiresModules>Analytics</requiresModules>
</docItem>
<docItem ref="attr:DynamicForm.itemLayout" flags="IRWA" description="Layout style to use with this form.  &amp;#010 &lt;P&gt;&amp;#010 The default of &quot;table&quot; uses a tabular layout similar to HTML tables, but with much more&amp;#010 powerful control over sizing, item visibility and reflow, overflow handling, etc.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;itemLayout:&quot;absolute&quot;&lt;/code&gt; allows absolute positioning of every form item.  This&amp;#010 provides maximum flexibility in placement, with the following limitations:&lt;ul&gt;&amp;#010 &lt;li&gt; titles, which normally take up an adjacent cell, are not shown.  Use&amp;#010      StaticTextItems to show titles&amp;#010 &lt;li&gt; no automatic reflow when showing or hiding items.  ${isc.DocUtils.linkForRef('method:FormItem.setLeft')}&amp;#010      and ${isc.DocUtils.linkForRef('method:FormItem.setTop')} can be used for manual reflow.&amp;#010 &lt;li&gt; only pixel and percent sizes are allowed, no &quot;*&quot;.  Percent widths mean percentage&amp;#010      of the overall form size rather than the column size&amp;#010 &lt;li&gt; with different font styling or internationalized titles, items may overlap that did&amp;#010      not overlap in the skin used at design time&amp;#010 &lt;/ul&gt;" name="itemLayout" valueType="FormLayoutType" defaultValue="&quot;table&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formLayout</groups>
</docItem>
<docItem ref="attr:DateChooser.prevYearIcon" flags="IRW" description="Icon for the previous year button" name="prevYearIcon" valueType="URL" defaultValue="&quot;[SKIN]doubleArrow_left.gif&quot;" type="attr" definingClass="class:DateChooser">
<seeAlso ref="attr:DateChooser.showDoubleYearIcon">
</seeAlso>
</docItem>
<docItem ref="method:TreeGrid.openLeaf" flags="A" description=" Executed when a leaf node receives a 'doubleClick' event. This handler must be&amp;#010 specified as a function, whose single parameter is a reference to the relevant leaf node in&amp;#010 the tree's data.&lt;br&gt;&amp;#010 See the ListGrid Widget Class for inherited recordClick and recordDoubleClick events.&amp;#010&amp;#010" name="openLeaf" type="method" definingClass="class:TreeGrid">
<seeAlso ref="class:ListGrid">
</seeAlso>
<params description="node to open" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="classMethod:XMLTools.selectObjects" flags="A" description=" Applies an XPath expression to JavaScript objects, returning matching objects.&amp;#010 &lt;P&gt;&amp;#010 Both child and attribute names are interpreted as property names, and array access notation&amp;#010 can be used to select elements from Arrays.  For example:&lt;pre&gt;&amp;#010     var results = {&amp;#010        searchResults:[&amp;#010            { title:&quot;Page One&quot;, relevance:6.3 },&amp;#010            { title:&quot;Page Two&quot;, relevance:5.2, &amp;#010              summary: &quot;Summary of Page One&quot; }&amp;#010        ]&amp;#010     };&amp;#010&amp;#010     // returns the &quot;searchResults&quot; two-item Array&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults&quot;);&amp;#010&amp;#010     // returns the first item under &quot;searchResults&quot;, in an Array (NOTE: in XPath, Array&amp;#010     // index starts at 1, not 0)&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults[1]&quot;);&amp;#010&amp;#010     // returns [&quot;Page One&quot;]&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults[1]/title&quot;);&amp;#010&amp;#010     // also returns [&quot;Page One&quot;]&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults[1]@title&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 A limited form of XPath &quot;predicates&quot;, that is, expressions with brackets that filter&amp;#010 returned objects, is allowed.  A predicate can be either:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; a number only, eg [5], for Array access&amp;#010 &lt;li&gt; the XPath function call &quot;last()&quot;, eg [last()], to retrieve the last item&amp;#010 &lt;li&gt; a property name (*without* any leading &quot;@&quot;), meaning that the property contains a value&amp;#010      that is considered &quot;true&quot; in JavaScript.  For example: [summary]&amp;#010 &lt;li&gt; a property name, comparison operator, and either a number or String literal, for&amp;#010      example, [name = &quot;bob&quot;].  In this case the property can also be the XPath function&amp;#010      position(), for example, [position() &gt; 5]&amp;#010 &lt;/ul&gt;&amp;#010 Some examples of using simple predicates with the sample data above:&amp;#010 &lt;pre&gt;&amp;#010     // returns an Array with only the first result&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults[relevance &gt; 5.5]&quot;);&amp;#010 &amp;#010     // return an Array with only the second result, since the first has no summary&amp;#010     isc.XMLTools.selectObjects(results, &quot;/searchResults[summary]&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Details of the XPath -&gt; Objects mapping:&amp;#010 &lt;ul&gt; &amp;#010 &lt;li&gt; JavaScript Object properties are considered element children, and text children do not&amp;#010      exist (in the XML model, text children exist *between* element children, but nothing&amp;#010      exists between JavaScript properties)&amp;#010 &lt;li&gt; The contents of Array-valued properties are considered immediate element children (this&amp;#010      is consistent with the predicate &quot;[5]&quot; acting like Array access)&amp;#010 &lt;li&gt; &quot;*&quot; in XML selects all element children, so &quot;*&quot; in Object XPath selects the values of&amp;#010      all properties, that is, ${isc.DocUtils.linkForRef('classMethod:isc.getValues','isc.getValues(object)')}, except&amp;#010      that Array-valued properties are &quot;flattened&quot; into the returned list.&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="selectObjects" type="classMethod" definingClass="class:XMLTools">
<params description="Object to select results from" optional="false" name="object" type="Object">
</params>
<params description="XPath expression" optional="false" name="xPath" type="String">
</params>
<returns description="Array of matching objects, or null for no match" type="Array"></returns>
</docItem>
<docItem ref="method:ListGrid.getSelectedState" flags="" description=" Returns a snapshot of the current selection within this listGrid as &amp;#010 a ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setSelectedState')} to reset this grid's selection&amp;#010 the current state (assuming the same data is present in the grid).&lt;br&gt;&amp;#010" name="getSelectedState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.setSelectedState">
</seeAlso>
<returns description="current state of this grid's selection" type="listGridSelectedState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:Tree.rootValue" flags="IR" description="If you are using the &quot;parent&quot; modelType and did not specify a root node via ${isc.DocUtils.linkForRef('attr:Tree.root')}&amp;#010 with an id (${isc.DocUtils.linkForRef('attr:Tree.idField')}), then you can provide the root node's id via this property.&amp;#010 See the example in ${isc.DocUtils.linkForRef('attr:Tree.data')} for more info." name="rootValue" valueType="string|number" defaultValue="null" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:Tree.data">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="attr:TabSet.pickerButtonSize" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, this property governs the size of tab-picker&amp;#010 button. Applied as the width of buttons if the tabBar is horizontal, or the height&amp;#010 if tabBar is vertical. Note that the other dimension is determined by&amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness','this.tabBarThickness')}" name="pickerButtonSize" valueType="number" defaultValue="16" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="attr:Splitbar.canCollapse" flags="IRW" description="If this property is true, a click on the Splitbar will collapse its &amp;#010 ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}, hiding it and shifting the Splitbar and other members&amp;#010 of the layout across to fill the newly available space. If the target is already hidden&amp;#010 a click will expand it again (showing it at it's normal size)." name="canCollapse" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Splitbar">
</docItem>
<docItem ref="group:event" name="event" type="group">
</docItem>
<docItem ref="method:DynamicForm.focusInItem" flags="" description=" Move the keyboard focus into a particular item.&amp;#010" name="focusInItem" type="method" definingClass="class:DynamicForm">
<params description="Item (or reference to) item to focus in." optional="false" name="itemName" type="number|itemName|formItem">
</params>
    <groups>eventHandling</groups>
    <groups>focus</groups>
</docItem>
<docItem ref="group:dateFormatting" name="dateFormatting" type="group">
    <refs>method:Date.getShortDayName</refs>
    <refs>method:Date.getShortMonthName</refs>
    <refs>method:Date.getShortYear</refs>
    <refs>method:Date.toDateStamp</refs>
    <refs>method:Date.toNormalDate</refs>
    <refs>method:Date.toShortDate</refs>
    <refs>method:Date.toUSShortDate</refs>
    <refs>method:Date.toUSShortDateTime</refs>
    <refs>method:Date.toEuropeanShortDate</refs>
    <refs>method:Date.toEuropeanShortDateTime</refs>
    <refs>method:Date.toJapanShortDate</refs>
    <refs>method:Date.toJapanShortDateTime</refs>
    <refs>method:Date.toSerializeableDate</refs>
    <refs>method:Date.setFormatter</refs>
    <refs>method:Date.toPrettyString</refs>
    <refs>classMethod:Date.parseInput</refs>
    <refs>classMethod:Date.setNormalDisplayFormat</refs>
    <refs>classMethod:Date.setShortDisplayFormat</refs>
</docItem>
<docItem ref="group:grouping" name="grouping" type="group">
    <refs>attr:groupNode.groupMembers</refs>
    <refs>attr:groupNode.groupTitle</refs>
    <refs>attr:groupNode.groupValue</refs>
    <refs>attr:ListGrid.originalData</refs>
    <refs>attr:ListGrid.groupTree</refs>
    <refs>attr:ListGrid.groupStartOpen</refs>
    <refs>attr:ListGrid.groupNodeStyle</refs>
    <refs>attr:ListGrid.groupIcon</refs>
    <refs>attr:ListGrid.groupIconSize</refs>
    <refs>attr:ListGrid.groupIndentSize</refs>
    <refs>attr:ListGrid.groupLeadingIndent</refs>
    <refs>attr:ListGrid.canGroupBy</refs>
    <refs>attr:ListGrid.groupByMaxRecords</refs>
    <refs>attr:ListGrid.isGrouped</refs>
    <refs>attr:ListGrid.nullGroupTitle</refs>
    <refs>attr:ListGrid.groupByField</refs>
</docItem>
<docItem ref="classMethod:Page.getScrollHeight" flags="" description="		Get the height of the window contents as they have been drawn.&amp;#010		If the page scrolls, this may be larger than the page.getHeight().&amp;#010" name="getScrollHeight" type="classMethod" definingClass="class:Page">
<returns description="height of the page as drawn" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ListGrid.setEditValue" flags="A" description="&amp;#010  Modifies a field value being tracked as an unsaved user edit.&lt;P&gt;&amp;#010  Use for suggested or reformatted values for edits that remain unsaved.&amp;#010&amp;#010" name="setEditValue" type="method" definingClass="class:ListGrid">
<params description="Row number (or edit values ID)" optional="false" name="rowNum" type="number">
</params>
<params description="Column number of cell, or name of field                                           having editValue updated" optional="false" name="colNum" type="number | string">
</params>
<params description="New value for the appropriate field." optional="false" name="value" type="any">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:CubeGrid.simpleDeselect" flags="IRW" description="If true, clicking on the existing selection causes it to be entirely deselected." name="simpleDeselect" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:Splitbar.src" flags="IR" description="The base URL for the image. &amp;#010 &lt;P&gt;&amp;#010 As with ${isc.DocUtils.linkForRef('attr:Img.src')}, the ${isc.DocUtils.linkForRef('type:State')} of the component is added to this URL.  Then,&amp;#010 the image segment name as specified by ${isc.DocUtils.linkForRef('attr:StretchImg.items')} is added.&amp;#010 &lt;P&gt;&amp;#010 For example, for a stretchImg in &quot;Over&quot; state with a &lt;code&gt;src&lt;/code&gt; of &quot;button.png&quot;&amp;#010 and a segment name of &quot;stretch&quot;, the resulting URL would be &quot;button_Over_stretch.png&quot;." name="src" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Splitbar">
<seeAlso ref="attr:StretchImg.hSrc">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:dataSourceRelations" title="Relations" description="Properties for declaring relations between DataSource and within DataSources, such as&amp;#010 master-detail relationship (a SalesOrder contains 0 or more OrderItems) and tree&amp;#010 relationships (records can be linked by a parentId field)." name="dataSourceRelations" type="group">
    <refs>attr:DataSourceField.primaryKey</refs>
    <refs>attr:DataSourceField.foreignKey</refs>
    <refs>attr:DataSourceField.childrenProperty</refs>
    <refs>attr:DataSourceField.rootValue</refs>
    <refs>attr:DataSource.childrenField</refs>
<seeAlso ref="attr:DataSourceField.foreignKey">
</seeAlso>
</docItem>
<docItem ref="attr:RPCRequest.evalVars" flags="IRWA" description="If you've set ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} : true, then the property values of this object&amp;#010 will be available in the evaluation scope of the result under the variable names&amp;#010 specified by the property names. &amp;#010 &lt;p&gt;&amp;#010 So e.g. if evalVars is: &lt;code&gt;{foo: &quot;bar&quot;}&lt;/code&gt; then a reference to the&amp;#010 variable &lt;code&gt;foo&lt;/code&gt; in the result will evaluate to &lt;code&gt;&quot;bar&quot;&lt;/code&gt;." name="evalVars" valueType="Object" defaultValue="null" type="attr" definingClass="class:RPCRequest">
    <groups>viewLoading</groups>
</docItem>
<docItem ref="classMethod:Log.show" flags="" description=" Open the Developer Console.&amp;#010 &lt;P&gt;&amp;#010 The Developer Console should &lt;b&gt;always&lt;/b&gt; be open while developing any ISC-enabled&amp;#010 application, because ISC logs many important errors and warnings to the Developer Console.&amp;#010 &lt;P&gt;&amp;#010 In Internet Explorer, the Developer Console is able to log a stack trace for every JS error,&amp;#010 including errors that occur in non-ISC code.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you have the Microsoft JavaScript Debugger installed, ISC will be unable to log&amp;#010 stack traces on JS errors until you go to Tools-&gt;Internet Options-&gt;Advanced Tab and check&amp;#010 &quot;Disable script debugging&quot;.  The ability to see stack traces in the Developer Console is&amp;#010 generally much more useful for debugging ISC-based applications than the generic Javascript&amp;#010 Debugging facilities.&amp;#010 &amp;#010" name="show" type="classMethod" definingClass="class:Log">
    <groups>debug</groups>
</docItem>
<docItem ref="classAttr:Array.LOADING" flags="A" description="Marker value returned by Lists that manage remote datasets, indicating the requested data is&amp;#010 being loaded." name="LOADING" valueType="String" defaultValue="&quot;loading&quot;" type="classAttr" definingClass="object:Array">
</docItem>
<docItem ref="attr:Toolbar.canResizeItems" flags="IRWA" description="If true, items (buttons) can be resized by dragging on them." name="canResizeItems" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Toolbar">
    <groups>dragndrop</groups>
</docItem>
<docItem ref="attr:MenuButton.menuButtonImage" flags="IRWA" description="Image for menu button indicating that the button expands a menu.  This image is shown&amp;#010 for menus expanding down from the button.   Menu direction is controlled by&amp;#010 ${isc.DocUtils.linkForRef('attr:MenuButton.showMenuBelow')}." name="menuButtonImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]menu_button.gif&quot;" type="attr" definingClass="class:MenuButton">
<seeAlso ref="attr:MenuButton.menuButtonImageUp">
</seeAlso>
</docItem>
<docItem ref="type:PageEvent" description="Events registerable via ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')}" name="PageEvent" type="type">
<values description="Fires repeatedly (every 10 ms by default) when the system is idle (i.e.,&amp;#010        not busy running other scripts) after the page is loaded." value="&quot;idle&quot;"></values>
<values description="Fires when the page has finished loading. It corresponds to the&amp;#010        browser 'load' event normally handled by window.onload." value="&quot;load&quot;"></values>
<values description="Fires when the page is exited or unloaded. It corresponds to the&amp;#010        browser 'unload' event normally handled by window.onunload." value="&quot;unload&quot;"></values>
<values description="Fires when the browser window is resized by the user. It corresponds&amp;#010        to the browser 'resize' event normally handled by window.onresize." value="&quot;resize&quot;"></values>
<values description="Fires when the left mouse button is pressed on the Page." value="&quot;mouseDown&quot;"></values>
<values description="Fires when the right mouse button is pressed on the Page." value="&quot;rightMouseDown&quot;"></values>
<values description="Fires when the mouse moves on the Page." value="&quot;mouseMove&quot;"></values>
<values description="Fires when the left mouse button released on the Page." value="&quot;mouseUp&quot;"></values>
<values description="Fires when the user clicks the mouse on the Page." value="&quot;cick&quot;"></values>
<values description="Fires when the uesr double-clicks on the Page." value="&quot;doubleClick&quot;"></values>
<values description="Fires when the right mouse button is clicked on the page.  If your event handler&amp;#010        for this event returns false, the native browser context menu will be suppressed.&lt;br&gt;&amp;#010        Note: On the Macintosh platform, &lt;code&gt;Command+Click&lt;/code&gt; may be used instead&amp;#010        of right-button click to trigger a context menu event.&lt;br&gt;&amp;#010        On the Opera browser, &lt;code&gt;Ctrl+Shift+Click&lt;/code&gt; should be used instead of&amp;#010        right-button click." value="&quot;showContextMenu&quot;"></values>
<values description="Fires when a user presses a key on the keyboard. &amp;#010 see classMethod:Page.setEvent()&amp;#010 see classMethod:Page.clearEvent()" value="&quot;keyPress&quot;"></values>
</docItem>
<docItem ref="method:Canvas.intersects" flags="" description="			Returns true if the rectangles of this widget and the specified widget overlap.&amp;#010" name="intersects" type="method" definingClass="class:Canvas">
<params description="other canvas to test for intersection" optional="false" name="other" type="canvas">
</params>
<returns description="true if this canvas intersects other; false otherwise" type="boolean"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:PickList.pickListBaseStyle" flags="IR" description="Base Style for pickList cells.  As with ListGrid Cells, will have 'over', 'selected'&amp;#010 and 'disabled' appended on changes of state for the cells." name="pickListBaseStyle" valueType="string" defaultValue="&quot;pickListCell&quot;" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="method:ValuesManager.getMemberForField" flags="" description=" Given a fieldName, this method will find the member form containing an item for that&amp;#010 field. If no member form is found, returns null.&amp;#010" name="getMemberForField" type="method" definingClass="class:ValuesManager">
<params description="fieldName to check" optional="false" name="fieldName" type="string">
</params>
<returns description="member form containing an item for the fieldName, or null." type="DynamicForm"></returns>
    <groups>members</groups>
</docItem>
<docItem ref="attr:Progressbar.vertical" flags="IRW" description="Indicates whether this is a vertical or horizontal progressbar." name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Progressbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.editEvent" flags="IRW" description="Event that will trigger inline editing, see ${isc.DocUtils.linkForRef('type:ListGridEditEvent')} for options.&amp;#010 &lt;P&gt;&amp;#010 Note this setting has no effect unless ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')} has been set to enable editing.&amp;#010 &lt;P&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:ListGrid.editOnFocus')} and ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}." name="editEvent" valueType="ListGridEditEvent" defaultValue="&quot;doubleClick&quot;" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('editByRow')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="group:widgetEvents" name="widgetEvents" type="group">
    <refs>method:Canvas.showContextMenu</refs>
    <refs>method:Canvas.hideContextMenu</refs>
    <refs>method:Canvas.mouseOver</refs>
    <refs>method:Canvas.mouseDown</refs>
    <refs>method:Canvas.rightMouseDown</refs>
    <refs>method:Canvas.mouseStillDown</refs>
    <refs>method:Canvas.mouseMove</refs>
    <refs>method:Canvas.mouseOut</refs>
    <refs>method:Canvas.mouseUp</refs>
    <refs>method:Canvas.click</refs>
    <refs>method:Canvas.doubleClick</refs>
    <refs>method:Canvas.mouseWheel</refs>
    <refs>method:Canvas.dragRepositionStart</refs>
    <refs>method:Canvas.dragRepositionMove</refs>
    <refs>method:Canvas.dragRepositionStop</refs>
    <refs>method:Canvas.dragStart</refs>
    <refs>method:Canvas.dragMove</refs>
    <refs>method:Canvas.dragStop</refs>
    <refs>method:Canvas.dropOver</refs>
    <refs>method:Canvas.dropMove</refs>
    <refs>method:Canvas.dropOut</refs>
    <refs>method:Canvas.drop</refs>
    <refs>method:Canvas.keyDown</refs>
    <refs>method:Canvas.keyUp</refs>
    <refs>method:Canvas.keyPress</refs>
</docItem>
<docItem ref="method:ListGrid.setSelectedState" flags="" description=" Reset this grid's selection to match the ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getSelectedState')}.&amp;#010&amp;#010" name="setSelectedState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getSelectedState">
</seeAlso>
<params description="Object describing the desired selection state of                                              the grid" optional="false" name="selectedState" type="listGridSelectedState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="method:Layout.reflowNow" flags="A" description=" Layout members according to current settings, immediately.&amp;#010 &lt;br&gt;&amp;#010 Generally, when changes occur that require a layout to reflow (such as members being shown&amp;#010 or hidden), the Layout will reflow only after a delay, so that multiple changes cause only&amp;#010 one reflow.  To remove this delay for cases where it is not helpful, reflowNow() can be&amp;#010 called.&amp;#010" name="reflowNow" type="method" definingClass="class:Layout">
</docItem>
<docItem ref="attr:TreeGrid.openerImage" flags="IR" description="The base filename of the opener icon for the folder node when 'showConnectors' is false&amp;#010 for this TreeGrid.&lt;br&gt;&amp;#010 The opener icon is displayed beside the folder icon in the Tree column for folder nodes.&amp;#010 Clicking on this icon will toggle the open state of the folder.&lt;br&gt;&amp;#010 The filenames for these icons are assembled from this base filename and the state of the&amp;#010 node, as follows:&lt;br&gt;&amp;#010 If the openerImage is set to &lt;code&gt;{baseName}.{extension}&lt;/code&gt;, &amp;#010 &lt;code&gt;{baseName}_opened.{extension}&lt;/code&gt; will be displayed next to opened folders, and&amp;#010 &lt;code&gt;{baseName}_closed.{extension}&lt;/code&gt; will be displayed next to closed folders, or&amp;#010 if this page is in RTL mode, &lt;code&gt;{baseName}_opened_rtl.{extension}&lt;/code&gt; and&amp;#010 &lt;code&gt;{baseName}_closed_rtl.{extension}&lt;/code&gt; will be used." name="openerImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]opener.gif&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="group:hiliting" name="hiliting" type="group">
    <refs>method:CubeGrid.enableHilite</refs>
    <refs>method:CubeGrid.disableHilite</refs>
    <refs>method:CubeGrid.enableHiliting</refs>
    <refs>method:CubeGrid.disableHiliting</refs>
    <refs>method:CubeGrid.hiliteCell</refs>
    <refs>method:CubeGrid.hiliteCellList</refs>
    <refs>method:CubeGrid.hiliteFacetValue</refs>
</docItem>
<docItem ref="attr:ImgButton.selected" flags="IRW" description="Whether this component is selected.  For some components, selection affects appearance." name="selected" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <setter>setSelected</setter>
    <groups>state</groups>
</docItem>
<docItem ref="attr:ValuesManager.disableValidation" flags="IRWA" description="If set to true, client-side validators will not run on the form when validate() is&amp;#010 called.  Server-side validatiors (if any) will still run on attempted save." name="disableValidation" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ValuesManager">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
    <groups>validation</groups>
</docItem>
<docItem ref="interface:List" description="An interface for an ordered collection of items.&amp;#010 &lt;P&gt;&amp;#010 This is the interface that is expected by list-oriented display components such as the&amp;#010 ListGrid.  The JavaScript native Array object is retrofitted to support the List interface.&amp;#010 Also, a valid List can be created by mixing the List interface into any class that supports:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; for read-only support: get(position), getLength()&amp;#010 &lt;li&gt; for modifiable support: set(position), addAt(object, position), removeAt(position)&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 NOTE: this interface is compatible with the java.util.List interface, except that:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; for removal by index, removeAt() must be called instead of remove().  In Java, remove()&amp;#010 is an overloaded method that takes either an int or Object, whereas in JavaScript, a&amp;#010 Number is an Object.&amp;#010 &lt;li&gt; Iterators don't exist.&amp;#010 &lt;/ul&gt; &amp;#010 Some methods from the Java List interface have been omitted from the documentation to avoid&amp;#010 redundancy." name="List" type="interface">
    <methods>method:List.get</methods>
    <methods>method:List.getLength</methods>
    <methods>method:List.isEmpty</methods>
    <methods>method:List.first</methods>
    <methods>method:List.last</methods>
    <methods>method:List.indexOf</methods>
    <methods>method:List.lastIndexOf</methods>
    <methods>method:List.findIndex</methods>
    <methods>method:List.findNextIndex</methods>
    <methods>method:List.find</methods>
    <methods>method:List.findAll</methods>
    <methods>method:List.contains</methods>
    <methods>method:List.containsAll</methods>
    <methods>method:List.intersect</methods>
    <methods>method:List.equals</methods>
    <methods>method:List.getItems</methods>
    <methods>method:List.getRange</methods>
    <methods>method:List.duplicate</methods>
    <methods>method:List.set</methods>
    <methods>method:List.addAt</methods>
    <methods>method:List.removeAt</methods>
    <methods>method:List.add</methods>
    <methods>method:List.addList</methods>
    <methods>method:List.setLength</methods>
    <methods>method:List.addListAt</methods>
    <methods>method:List.remove</methods>
    <methods>method:List.removeList</methods>
    <methods>method:List.sort</methods>
    <methods>method:List.sortByProperty</methods>
    <methods>method:List.getValueMap</methods>
    <methods>method:List.dataChanged</methods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="classMethod:EventHandler.leftButtonDown" flags="" description="			Returns true if the left mouse button is being pressed.&amp;#010&amp;#010" name="leftButtonDown" type="classMethod" platformNotes="Mac:		Macintosh platform generally has only one mouse button - ISC considers it to be the &quot;left&quot;&amp;#010		mouse button, so this method will return true if the mouse is down on a single-button mouse Mac." definingClass="class:EventHandler">
<returns description="true == left button is down, false == up" type="boolean"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="method:Canvas.dropOver" flags="A" description="&amp;#010 Executed when the compatible dragged object is first moved over this drop target. Your&amp;#010 implementation can use this to show a custom visual indication that the object can be&amp;#010 dropped here.&amp;#010&amp;#010" name="dropOver" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customDrag')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:CubeGrid.getEditValues" flags="" description=" Returns the current set of unsaved edits for a given row being edited.&amp;#010&amp;#010" name="getEditValues" type="method" definingClass="class:CubeGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="valuesID" type="number | Object">
</params>
<params description="colNum of the record being edited. Only required if valuesID                         is passed in as a rowNum." optional="false" name="colNum" type="number">
</params>
<returns description="Current editValues object for the row.  This contains the current                     edit values in {fieldName1:value1, fieldName2:value2} format." type="object"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Selection.selectRange" flags="" description="			Select range of records from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;, non-inclusive.&amp;#010" name="selectRange" type="method" definingClass="class:Selection">
<params description="start index to select" optional="false" name="start" type="number">
</params>
<params description="end index (non-inclusive)" optional="false" name="end" type="number">
</params>
<params description="optional new selection state to set.  True means                                      selected, false means unselected.  Defaults to true." optional="true" name="newState" type="boolean">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonConstructor" flags="IRA" description="Constrocutor for the  ${isc.DocUtils.linkForRef('attr:ListGrid.headerMenuButton')}. If unset a standard &quot;Button&quot; will&amp;#010 be rendered out. Note that this property may be overridden by different skins." name="headerMenuButtonConstructor" valueType="className" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="classMethod:Page.setAppImgDir" flags="" description=" Specify the directory for app-specific images.&amp;#010 &lt;P&gt;&amp;#010 This becomes the default location where any SmartClient component will load images from&amp;#010 unless the special &quot;[SKIN]&quot; prefix is used to indicate that an image is part of a skin.&amp;#010 &lt;P&gt;&amp;#010 Default is &quot;[APP]images/&quot;&amp;#010&amp;#010" name="setAppImgDir" type="classMethod" definingClass="class:Page">
<params description="New imgDir URL." optional="true" name="URL" type="string">
</params>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="method:ListGrid.hasChanges" flags="" description=" Whether the grid as a whole has any unsaved edits, in any row.&amp;#010" name="hasChanges" type="method" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Layout.hPolicy" flags="IRWA" description="Sizing policy applied to members on horizonal axis" name="hPolicy" valueType="LayoutPolicy" defaultValue="&quot;fill&quot;" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="attr:ListGrid.canResizeFields" flags="IRW" description="Indicates whether fields in this listGrid can be resized by dragging header&amp;#010          fields." name="canResizeFields" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('columnSize')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:Window.showFooter" flags="IRW" description="If true, show a footer for this Window, including resizer, statusBar, etc.&amp;#010 This setting is commonly overridden for skinning purposes." name="showFooter" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <examples>${isc.DocUtils.linkForExampleId('windowFooter')}</examples>
    <groups>appearance</groups>
    <groups>footer</groups>
</docItem>
<docItem ref="type:XMLDocument" description="XMLDocument is the &quot;parsed&quot; or object form of XML, which allows XML to be navigated as&amp;#010 a tree of nodes with attributes, namespaces and other metadata, as opposed to being&amp;#010 manipulated as just a String.&amp;#010 &lt;P&gt; &amp;#010 XMLDocument is a native object supplied directly by the browser.  The SmartClient-supported&amp;#010 interfaces for this object are methods that take an XMLDocument as an argument (such as&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}).  If you want to retrieve XML data and display it in a&amp;#010 SmartClient component, read about ${isc.DocUtils.linkForRef('group:clientDataIntegration','XML Data Binding')}.  To&amp;#010 extract data as JavaScript Objects from XML, see ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  Direct&amp;#010 manipulation of XMLDocument is subject to cross-browser inconsistencies, bugs, memory leaks&amp;#010 and performance issues." name="XMLDocument" type="type">
</docItem>
<docItem ref="method:Canvas.setPercentSource" flags="A" description=" Setter method for the ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')} attribute.&amp;#010" name="setPercentSource" type="method" definingClass="class:Canvas">
<params description="eterNew percent source (if ommitted existing                                      percentSource will just be cleared)." optional="true" name="sourceWidget" type="Canvas">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DynamicForm.rightTitlePrefix" flags="IRW" description="The string prepended to the title of an item in this form if its&amp;#010          titleOrientation property is set to &quot;right&quot;." name="rightTitlePrefix" valueType="string" defaultValue="&quot;:&amp;nbsp;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:SectionStack.getVisibleSections" flags="" description="&amp;#010 Returns the list of currently visible sections.  The list items are section IDs.&amp;#010&amp;#010" name="getVisibleSections" type="method" definingClass="class:SectionStack">
<returns description="list of hidden sections" type="List"></returns>
</docItem>
<docItem ref="group:componentBinding" title="Component Binding" description="Properties that control how a DataBound Component binds to this DataSource" name="componentBinding" type="group">
    <refs>attr:DataSourceField.title</refs>
    <refs>attr:DataSourceField.canEdit</refs>
    <refs>attr:DataSourceField.editorType</refs>
    <refs>attr:DataSourceField.hidden</refs>
    <refs>attr:DataSourceField.detail</refs>
</docItem>
<docItem ref="classMethod:EventHandler.getKey" flags="" description="			Return the name of the key for the event passed in.&amp;#010			Note that this is only set reliably for keyboard events.&amp;#010&amp;#010" name="getKey" type="classMethod" definingClass="class:EventHandler">
<returns description="Key Name" type="KeyName"></returns>
    <groups>keyboardEvents</groups>
</docItem>
<docItem ref="attr:ListGridField.baseStyle" flags="IRW" description="Custom base style to apply to all cells in this field instead of ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle')}&amp;#010  To override the baseStyle at the row level, use &amp;#010  ${isc.DocUtils.linkForRef('attr:ListGrid.recordBaseStyleProperty','record[listGrid.recordBaseStyleProperty]')}&amp;#010  instead." name="baseStyle" valueType="cssClass" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.recordBaseStyleProperty">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('gridCells')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ImgButton.setState" flags="" description=" Set the 'state' of this object, this changes it's appearance.&amp;#010&amp;#010" name="setState" type="method" definingClass="class:ImgButton">
<seeAlso ref="method:ImgButton.setDisabled" description="which also affects state values."></seeAlso>
<params description="new state" optional="false" name="newState" type="State">
</params>
    <groups>state</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.animateAcceleration" flags="IRWA" description="Default acceleration effect to apply to all animations on this Canvas.&amp;#010 Can be overridden by setting animationAcceleration for specific animations or by passing&amp;#010 an acceleration function directly into the appropriate method." name="animateAcceleration" valueType="AnimationEffect" defaultValue="&quot;smoothEnd&quot;" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:CubeGrid.cellSelectionChanged" flags="" description="&amp;#010      Handler/Notification function for cell selection change&amp;#010      May update header button styles.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="cellSelectionChanged" type="method" definingClass="class:CubeGrid">
<params description="array of cells with new selection state" optional="false" name="cellList" type="Array of cells">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.refreshFields" flags="" description=" Re-evaluates ${isc.DocUtils.linkForRef('attr:ListGridField.showIf')} for each field, dynamically showing and &amp;#010 hiding the appropriate set of fields&amp;#010" name="refreshFields" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:ListGridField.imageURLSuffix" flags="IRWA" description="If any cells in this field are showing a value icon (see: ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')})&amp;#010 or this is has ${isc.DocUtils.linkForRef('type:ListGridFieldType')} set to &lt;code&gt;&quot;image&quot;&lt;/code&gt;, this the value&amp;#010 of this property will be appended to the end of the URL for the icon displayed.&lt;br&gt;&amp;#010 Typical usage might be to append a file type such as &lt;code&gt;&quot;.gif&quot;&lt;/code&gt; to the&amp;#010 filename of the image.&lt;br&gt;&amp;#010 For editable fields, this property will also be passed through to any editors as&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.imageURLSuffix')}." name="imageURLSuffix" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <examples>${isc.DocUtils.linkForExampleId('imageType')}</examples>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:StretchImgButton.labelVPad" flags="IRW" description="The padding for a StretchImgButton's label is determined as follows.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;labelHPad&lt;/code&gt; is set it will specify the horizontal padding applied to the&amp;#010 label. Similarly if &lt;code&gt;labelVPad&lt;/code&gt; is set it will specify the vertical padding&amp;#010 for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.&amp;#010 &lt;P&gt;&amp;#010 Otherwise &lt;code&gt;labelLengthPad&lt;/code&gt; can be set to specify the label padding along the&amp;#010 length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,&amp;#010 otherwise vertical padding), and &amp;#010 &lt;code&gt;labelBreadthPad&lt;/code&gt; can be set to specify the label padding along the other axis.&amp;#010 &lt;P&gt;&amp;#010 Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and&amp;#010 will be set to zero on the breadth axis.&amp;#010 &lt;P&gt;&amp;#010 So by default the label will be sized to match the center image of the StretchImgButton, but&amp;#010 these settings allow the label to partially or wholly overlap the caps." name="labelVPad" valueType="number" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="attr:StretchImgButton.labelLengthPad" flags="IRW" description="The padding for a StretchImgButton's label is determined as follows.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;labelHPad&lt;/code&gt; is set it will specify the horizontal padding applied to the&amp;#010 label. Similarly if &lt;code&gt;labelVPad&lt;/code&gt; is set it will specify the vertical padding&amp;#010 for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.&amp;#010 &lt;P&gt;&amp;#010 Otherwise &lt;code&gt;labelLengthPad&lt;/code&gt; can be set to specify the label padding along the&amp;#010 length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,&amp;#010 otherwise vertical padding), and &amp;#010 &lt;code&gt;labelBreadthPad&lt;/code&gt; can be set to specify the label padding along the other axis.&amp;#010 &lt;P&gt;&amp;#010 Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and&amp;#010 will be set to zero on the breadth axis.&amp;#010 &lt;P&gt;&amp;#010 So by default the label will be sized to match the center image of the StretchImgButton, but&amp;#010 these settings allow the label to partially or wholly overlap the caps." name="labelLengthPad" valueType="number" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:Array.remove" flags="" description=" Remove first instance of the passed object from this array, sliding other items around to&amp;#010 fill gaps.&amp;#010&amp;#010" name="remove" type="method" definingClass="object:Array">
<params description="item to remove" optional="false" name="obj" type="any">
</params>
<returns description="true if a matching object was found and removed, false if no matching object was found and the list remains unchanged." type="boolean"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="method:Canvas.scrollToLeft" flags="" description=" Horizontally scrolls the content of the widget to 0&amp;#010&amp;#010" name="scrollToLeft" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:ImgButton.select" flags="" description=" Select this object.&amp;#010" name="select" type="method" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:Chart.title" flags="IR" description="Title for the chart as a whole." name="title" valueType="String" defaultValue="null" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="method:GridRenderer.refreshCellStyle" flags="" description=" Refresh the styling of an individual cell without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cell's CSS class and CSS text will be refreshed, to the current values returned by&amp;#010 getCellStyle() and getCellCSSText() respectively.&amp;#010 &lt;P&gt;&amp;#010 The cell's contents (as returned by getCellValue()) will &lt;b&gt;not&lt;/b&gt; be refreshed.  To&amp;#010 refresh both styling and contents, call refreshCell() instead.&amp;#010&amp;#010" name="refreshCellStyle" type="method" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.refreshCell" description="to update cell contents too"></seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
<params description="column number of cell to refresh" optional="false" name="colNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setCursor" flags="" description="			Sets the cursor for this widget to cursor. See the cursor property&amp;#010          for possible values.&amp;#010" name="setCursor" type="method" definingClass="class:Canvas">
<params description="new cursor" optional="false" name="newCursor" type="Cursor">
</params>
    <groups>cues</groups>
</docItem>
<docItem ref="group:subset" name="subset" type="group">
    <refs>method:Array.getUniqueItems</refs>
</docItem>
<docItem ref="method:List.isEmpty" flags="" description=" Return whether or not this array is empty&amp;#010&amp;#010" name="isEmpty" type="method" definingClass="interface:List">
<returns description="true == this array is empty, false == some items in the array" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:SectionStack.addItem" flags="" description=" Add a canvas as an item to a section.&amp;#010" name="addItem" type="method" definingClass="class:SectionStack">
<params description="ID or index of the section to add item to" optional="false" name="section" type="String or Number">
</params>
<params description="Item to insert into the section" optional="false" name="item" type="Canvas">
</params>
<params description="Index into section to insert item" optional="false" name="index" type="Number">
</params>
</docItem>
<docItem ref="attr:Canvas.animateScrollTime" flags="IRWA" description="Default time for performing an animated scroll.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateScrollTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="group:buttonIcon" title="Button Icon" description="Control over optional icons shown in Buttons, Labels and other contexts" name="buttonIcon" type="group">
    <refs>method:StatefulCanvas.setIconOrientation</refs>
    <refs>method:StatefulCanvas.setIcon</refs>
    <refs>method:Button.setIconOrientation</refs>
    <refs>method:Button.setIcon</refs>
    <refs>method:Button.iconClick</refs>
    <refs>method:Label.setIconOrientation</refs>
    <refs>method:Label.setIcon</refs>
    <refs>method:ImgButton.setIconOrientation</refs>
    <refs>method:ImgButton.setIcon</refs>
    <refs>method:StretchImgButton.setIconOrientation</refs>
    <refs>method:StretchImgButton.setIcon</refs>
    <refs>method:StretchImgButton.iconClick</refs>
    <refs>attr:ListGridField.iconSpacing</refs>
    <refs>attr:ListGridField.showDisabledIcon</refs>
    <refs>attr:ListGridField.showRollOverIcon</refs>
    <refs>attr:ListGridField.showFocusedIcon</refs>
    <refs>attr:ListGridField.showDownIcon</refs>
    <refs>attr:ListGridField.showSelectedIcon</refs>
    <refs>attr:StatefulCanvas.icon</refs>
    <refs>attr:StatefulCanvas.iconSize</refs>
    <refs>attr:StatefulCanvas.iconWidth</refs>
    <refs>attr:StatefulCanvas.iconHeight</refs>
    <refs>attr:StatefulCanvas.iconOrientation</refs>
    <refs>attr:StatefulCanvas.iconSpacing</refs>
    <refs>attr:StatefulCanvas.showDisabledIcon</refs>
    <refs>attr:StatefulCanvas.showRollOverIcon</refs>
    <refs>attr:StatefulCanvas.showDownIcon</refs>
    <refs>attr:StatefulCanvas.showSelectedIcon</refs>
    <refs>attr:StatefulCanvas.showFocusedIcon</refs>
    <refs>attr:Button.icon</refs>
    <refs>attr:Button.iconSize</refs>
    <refs>attr:Button.iconWidth</refs>
    <refs>attr:Button.iconHeight</refs>
    <refs>attr:Button.iconOrientation</refs>
    <refs>attr:Button.iconAlign</refs>
    <refs>attr:Button.iconSpacing</refs>
    <refs>attr:Button.showDisabledIcon</refs>
    <refs>attr:Button.showRollOverIcon</refs>
    <refs>attr:Button.showFocusedIcon</refs>
    <refs>attr:Button.showDownIcon</refs>
    <refs>attr:Button.showSelectedIcon</refs>
    <refs>attr:Label.icon</refs>
    <refs>attr:Label.iconSize</refs>
    <refs>attr:Label.iconWidth</refs>
    <refs>attr:Label.iconHeight</refs>
    <refs>attr:Label.iconOrientation</refs>
    <refs>attr:Label.iconAlign</refs>
    <refs>attr:Label.iconSpacing</refs>
    <refs>attr:Label.showDisabledIcon</refs>
    <refs>attr:Label.showRollOverIcon</refs>
    <refs>attr:Label.showFocusedIcon</refs>
    <refs>attr:Label.showDownIcon</refs>
    <refs>attr:Label.showSelectedIcon</refs>
    <refs>attr:ImgButton.icon</refs>
    <refs>attr:ImgButton.iconSize</refs>
    <refs>attr:ImgButton.iconWidth</refs>
    <refs>attr:ImgButton.iconHeight</refs>
    <refs>attr:ImgButton.iconOrientation</refs>
    <refs>attr:ImgButton.iconAlign</refs>
    <refs>attr:ImgButton.iconSpacing</refs>
    <refs>attr:ImgButton.showDisabledIcon</refs>
    <refs>attr:ImgButton.showRollOverIcon</refs>
    <refs>attr:ImgButton.showFocusedIcon</refs>
    <refs>attr:ImgButton.showDownIcon</refs>
    <refs>attr:ImgButton.showSelectedIcon</refs>
    <refs>attr:StretchImgButton.icon</refs>
    <refs>attr:StretchImgButton.iconSize</refs>
    <refs>attr:StretchImgButton.iconWidth</refs>
    <refs>attr:StretchImgButton.iconHeight</refs>
    <refs>attr:StretchImgButton.iconOrientation</refs>
    <refs>attr:StretchImgButton.iconAlign</refs>
    <refs>attr:StretchImgButton.iconSpacing</refs>
    <refs>attr:StretchImgButton.showDisabledIcon</refs>
    <refs>attr:StretchImgButton.showRollOverIcon</refs>
    <refs>attr:StretchImgButton.showFocusedIcon</refs>
    <refs>attr:StretchImgButton.showDownIcon</refs>
    <refs>attr:StretchImgButton.showSelectedIcon</refs>
</docItem>
<docItem ref="attr:Tree.nameProperty" flags="IRW" description="Name of the property that holds the 'name' of a node for the purpose of calculating the path&amp;#010 to the node.  By default this is set to ${isc.DocUtils.linkForRef('attr:TreeNode.name')}.  If the value of the&amp;#010 nameProperty of a node (e.g. node.name) is not a string, it will be converted to a string by&amp;#010 the Tree via &quot;&quot;+value." name="nameProperty" valueType="string" defaultValue="&quot;name&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:TreeNode.name">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="attr:StretchImgButton.hiliteAccessKey" flags="IRW" description="If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the&amp;#010 specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user&amp;#010 it will be modified to include HTML to underline the accessKey.&lt;br&gt;&amp;#010 Note that this property may cause titles that include HTML (rather than simple strings)&amp;#010 to be inappropriately modified, so should be disabled if your title string includes&amp;#010 HTML characters." name="hiliteAccessKey" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:CubeGrid.getFacetValuesRow" flags="" description=" Get the index of the first row in the grid that matches the specified FacetValueMap.&lt;br&gt;&amp;#010 The facetValues passed in should contain values for at least one row facet. If values are &amp;#010 sparse (values not specified for every row facet), the first row matching the specified&amp;#010 facet values will be returned.&amp;#010" name="getFacetValuesRow" type="method" definingClass="class:CubeGrid">
<params description="facet values to find" optional="false" name="facetValues" type="facetValueMap">
</params>
<returns description="index of first row in the grid that matches the facet values passed in." type="integer"></returns>
</docItem>
<docItem ref="method:ListGrid.selectionChanged" flags="" description=" Called when (row-based) selection changes within this grid. Note this method fires for&amp;#010 each record for which selection is modified - so when a user clicks inside a grid this&amp;#010 method will typically fire twice (once for the old record being deselected, and once for&amp;#010 the new record being selected).&amp;#010&amp;#010" name="selectionChanged" type="method" definingClass="class:ListGrid">
<params description="record for which selection changed" optional="false" name="record" type="object">
</params>
<params description="New selection state (true for selected, false for unselected)" optional="false" name="state" type="boolean">
</params>
    <examples>${isc.DocUtils.linkForExampleId('multipleSelect')}</examples>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Canvas.dragRepositionCursor" flags="IRWA" description="Cursor to switch to if the mouse is over a widget that is drag repositionable." name="dragRepositionCursor" valueType="Cursor" defaultValue="Canvas.MOVE" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:StretchImg.vSrc" flags="IRW" description="Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true and &amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset." name="vSrc" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StretchImg">
<seeAlso ref="attr:StretchImg.src">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:clientOnlyDataSources" title="Client Only DataSources" description="For prototyping purposes, a &quot;client-only&quot; DataSource can be created that has no permanent&amp;#010 storage and never contacts the server, instead using a set of test data to respond to&amp;#010 requests in the same manner as a server-based DataSource might.&amp;#010 &lt;P&gt;&amp;#010 The client-side interface to a client-only DataSource is identical to a server-based&amp;#010 DataSource, including asynchronous responses, so that a client-only DataSource can be&amp;#010 replaced by a server-based DataSource without code changes.  The only difference is that&amp;#010 changes to records belonging to the DataSource persist only until the page is reloaded.&amp;#010 &lt;p&gt;&amp;#010 Client-only DataSources allow you to create a complete prototype application in an .html&amp;#010 file that does not require a server.&amp;#010 &lt;p&gt;&amp;#010 The &lt;code&gt;clientOnly&lt;/code&gt; property is specified to create a client-only DataSource, and&amp;#010 the &lt;code&gt;testData&lt;/code&gt; property should contain the test dataset, as an Array of Objects,&amp;#010 one per DataSource record.  For example:&amp;#010 &lt;pre&gt;&amp;#010   isc.DataSource.create({&amp;#010       ID:&quot;supplyItem&quot;,&amp;#010       fields: ...,&amp;#010       clientOnly:true,&amp;#010       testData:[&amp;#010          {itemName:&quot;Pencil&quot;, cost:5.50},&amp;#010          ...&amp;#010       ]&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 If you have existing test data in XML, you can use the XML-&gt;JS translation engine to load it&amp;#010 into a client-only DataSource, like so:&amp;#010 &lt;pre&gt;&amp;#010   isc.DataSource.create({&amp;#010     ID:&quot;solutions&quot;,&amp;#010     fields: ...,&amp;#010     clientOnly : true,&amp;#010     testData : &amp;#010         &amp;lt;isomorphic:XML filename=&quot;shared/ds/test_data/solutions.data.xml&quot;/&amp;gt;&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 Another useful practice is to specify both the DataSource and it's test data in XML, so that&amp;#010 the ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')} can later be used to import the DataSource and&amp;#010 its test data into a SQL DataBase.  An idiom for accomplishing this is:&amp;#010 &lt;pre&gt;&amp;#010   &amp;lt;isomorphic:loadDS name=&quot;solutions&quot;/&amp;gt;&amp;#010   isc.DataSource.getDataSource(&quot;solutions&quot;).addProperties({&amp;#010     clientOnly : true,&amp;#010     testData : &amp;#010        &amp;lt;isomorphic:XML filename=&quot;shared/ds/test_data/solutions.data.xml&quot;/&amp;gt;&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 Finally, if you specify your DataSource as &lt;code&gt;clientOnly: true&lt;/code&gt;, omit testData&amp;#010 entirely, and provide either a ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} or a &lt;code&gt;testFileName&lt;/code&gt;, the&amp;#010 DataSource will lazily make a one-time fetch against the specified data file the first time&amp;#010 an operation is called on it.  From then on, the DataSource will work against the local&amp;#010 cache created from this initial request.  This is a quick way to prototype against some test&amp;#010 data that may eventually be returned from an arbitrary back-end." name="clientOnlyDataSources" type="group">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <refs>attr:DataSource.clientOnly</refs>
    <refs>attr:DataSource.testData</refs>
</docItem>
<docItem ref="method:Canvas.doubleClick" flags="A" description="&amp;#010 Executed when the left mouse button is clicked twice in rapid succession (within&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.doubleClickDelay')} by default) in this object.&amp;#010&amp;#010" name="doubleClick" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.doubleClickDelay">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="type:SortDirection" name="SortDirection" type="type">
<values description="Sort in ascending order (eg: A-Z, larger items later in the list)" value="&quot;ascending&quot;"></values>
<values description="Sort in descending order (eg: Z-A, larger items earlier in the list)" value="&quot;descending&quot;"></values>
    <groups>sorting</groups>
</docItem>
<docItem ref="group:sizing" description="Width and height of an object" name="sizing" type="group">
    <refs>method:ListGrid.setHeaderHeight</refs>
    <refs>method:FormItem.getIconHeight</refs>
    <refs>method:FormItem.getIconWidth</refs>
    <refs>method:Canvas.setRect</refs>
    <refs>method:Canvas.getWidth</refs>
    <refs>method:Canvas.setWidth</refs>
    <refs>method:Canvas.getHeight</refs>
    <refs>method:Canvas.setHeight</refs>
    <refs>method:Canvas.getRight</refs>
    <refs>method:Canvas.setRight</refs>
    <refs>method:Canvas.getBottom</refs>
    <refs>method:Canvas.setBottom</refs>
    <refs>method:Canvas.getScrollWidth</refs>
    <refs>method:Canvas.getScrollHeight</refs>
    <refs>method:Canvas.getViewportWidth</refs>
    <refs>method:Canvas.getViewportHeight</refs>
    <refs>method:Canvas.getInnerHeight</refs>
    <refs>method:Canvas.getInnerWidth</refs>
    <refs>method:Canvas.getInnerContentHeight</refs>
    <refs>method:Canvas.getInnerContentWidth</refs>
    <refs>method:Canvas.getVisibleWidth</refs>
    <refs>method:Canvas.getVisibleHeight</refs>
    <refs>method:Canvas.resizeBy</refs>
    <refs>method:Canvas.setPercentSource</refs>
    <refs>method:Canvas.layoutChildren</refs>
    <refs>method:Canvas.resizeTo</refs>
    <refs>method:Canvas.parentResized</refs>
    <refs>method:Canvas.setOverflow</refs>
    <refs>method:Canvas.adjustForContent</refs>
    <refs>classMethod:Page.resizeTo</refs>
    <refs>classMethod:Page.getWidth</refs>
    <refs>classMethod:Page.getHeight</refs>
    <refs>classMethod:Page.getScrollWidth</refs>
    <refs>classMethod:Page.getScrollHeight</refs>
    <refs>classMethod:Page.getScrollLeft</refs>
    <refs>classMethod:Page.getScrollTop</refs>
    <refs>attr:GridRenderer.fixedColumnWidths</refs>
    <refs>attr:GridRenderer.autoFit</refs>
    <refs>attr:ListGrid.bodyOverflow</refs>
    <refs>attr:ListGrid.headerHeight</refs>
    <refs>attr:Menu.defaultWidth</refs>
    <refs>attr:Menu.cellHeight</refs>
    <refs>attr:StatefulCanvas.autoFit</refs>
    <refs>attr:Button.autoFit</refs>
    <refs>attr:Img.size</refs>
    <refs>attr:Label.wrap</refs>
    <refs>attr:Label.autoFit</refs>
    <refs>attr:ToolStrip.height</refs>
    <refs>attr:ImgButton.autoFit</refs>
    <refs>attr:StretchImgButton.autoFit</refs>
    <refs>attr:Canvas.width</refs>
    <refs>attr:Canvas.height</refs>
    <refs>attr:Canvas.defaultWidth</refs>
    <refs>attr:Canvas.defaultHeight</refs>
    <refs>attr:Canvas.minWidth</refs>
    <refs>attr:Canvas.maxWidth</refs>
    <refs>attr:Canvas.minHeight</refs>
    <refs>attr:Canvas.maxHeight</refs>
    <refs>attr:Canvas.overflow</refs>
    <refs>attr:Canvas.percentSource</refs>
    <refs>attr:Canvas.percentBox</refs>
    <refs>attr:Canvas.snapTo</refs>
    <refs>attr:Canvas.snapEdge</refs>
    <refs>attr:Canvas.snapOffsetLeft</refs>
    <refs>attr:Canvas.snapOffsetTop</refs>
    <refs>type:Overflow</refs>
</docItem>
<docItem ref="attr:ListGrid.cellHeight" flags="IRW" description="The default height of each row in pixels." name="cellHeight" valueType="number" defaultValue="20" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:GridRenderer.getRowHeight">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('multilineValues')}</examples>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:DetailViewer.recordsPerBlock" flags="IRW" description="The number of records to display in a block. A block is a horizontal row on a page&amp;#010          containing one or more records, as specified by the value of recordsPerBlock. The&amp;#010          height of a block is equal to the height of a single record. The default setting of&amp;#010          1 causes each record to appear by itself in a vertical row. Setting recordsPerBlock&amp;#010          to 2 would cause records to appear side by side in groups of two.&amp;#010          Use a value of &quot;*&quot; to indicate all records." name="recordsPerBlock" valueType="number" defaultValue="1" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="group:labels" name="labels" type="group">
    <refs>attr:DetailViewer.labelPrefix</refs>
    <refs>attr:DetailViewer.labelSuffix</refs>
    <refs>attr:DetailViewer.wrapLabel</refs>
</docItem>
<docItem ref="attr:Canvas.position" flags="IRWA" description="Absolute or relative, corresponding to the &quot;absolute&quot; (with respect to parent) or&amp;#010 &quot;relative&quot; (with respect to document flow) values for the CSS position attribute. &amp;#010 &lt;P&gt;&amp;#010 Defaults to &quot;absolute&quot; unless ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} has been set, in which case&amp;#010 &quot;relative&quot; is used.&amp;#010 &lt;P&gt;&amp;#010 For best consistency and flexibility across browsers, all SmartClient layout managers&amp;#010 use absolute positioning.  Relative positioning should be used only as a short-term&amp;#010 integration scenario while incrementally upgrading existing applications.  &amp;#010 &lt;P&gt;&amp;#010 When relative positioning is used, only the outermost SmartClient component should have&amp;#010 position:&quot;relative&quot; set, none of it's children should." name="position" valueType="Positioning" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('inlineComponents')}</examples>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:CubeGrid.makeChart" flags="" description=" Chart the portion of the dataset indicated by &lt;code&gt;fixedFacetValues&lt;/code&gt;, for all &amp;#010 values of the &lt;code&gt;variableFacets&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 One, two or more variableFacets may be passed.  Two variable facets for a column chart will&amp;#010 result in ${isc.DocUtils.linkForRef('attr:Chart.stacked','stacking')} or clustering.  Three facets or more may be&amp;#010 supported by some ${isc.DocUtils.linkForRef('attr:CubeGrid.chartType','chartTypes')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.chartConstructor','charting engines')}.&amp;#010 &amp;#010" name="makeChart" type="method" definingClass="class:CubeGrid">
<params description="set of facet values to hold constant.  Pass null to                                         chart the entire dataset." optional="false" name="fixedFacetValues" type="FacetValueMap">
</params>
<params description="set of facets to be charted" optional="false" name="variableFacets" type="Array of FacetIds">
</params>
<params description="properties to pass through to the created                        ${isc.DocUtils.linkForRef('interface:Chart')}" optional="false" name="chartProperties" type="Chart properties">
</params>
<returns description="created chart instance" type="Chart"></returns>
</docItem>
<docItem ref="attr:SectionStackSection.resizeable" flags="I" description="If set to false, then the items in this section will not be resized by sectionHeader&amp;#010 repositioning.  You may also set this flag directly on any of the items in any section to&amp;#010 cause that item to not be resizeable." name="resizeable" valueType="boolean" defaultValue="null" type="attr" definingClass="object:SectionStackSection">
    <examples>${isc.DocUtils.linkForExampleId('resizeSections')}</examples>
</docItem>
<docItem ref="method:MenuButton.setShowMenuBelow" flags="" description=" Setter for the 'showMenuButtonBelow' property - determines whether the menu will be&amp;#010 shown above or below the menubutton.&amp;#010" name="setShowMenuBelow" type="method" definingClass="class:MenuButton">
<params description="True if the menu should be shown below the menubutton." optional="false" name="below" type="boolean">
</params>
</docItem>
<docItem ref="method:PickList.getPickListFilterCriteria" flags="A" description=" Returns a set of filter criteria to be applied to the data displayed in the pickList when&amp;#010 it is shown.&amp;#010 &lt;P&gt;&amp;#010 If this is a databound item the criteria will be passed as criteria to&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.fetchData')}.  Otherwise an equivalent client-side filter will be&amp;#010 performed on the data returned by ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.&amp;#010 &lt;P&gt;&amp;#010 By default returns ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} if specified, otherwise an empty &amp;#010 set of criteria so all records will be displayed.&amp;#010&amp;#010" name="getPickListFilterCriteria" type="method" definingClass="interface:PickList">
<returns description="criteria to be used for databound or local filtering" type="Criteria"></returns>
</docItem>
<docItem ref="method:Array.equals" flags="" description=" Return whether this list is equal to another list.&amp;#010 &lt;P&gt;&amp;#010 Two lists are equal only if they have the same length and all contained items are in the same&amp;#010 order and are also equal.&amp;#010&amp;#010" name="equals" type="method" definingClass="object:Array">
<params description="list to check for equality" optional="false" name="list" type="List">
</params>
<returns description="whether the specified list is equal to this list" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:Tab.pickerTitle" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true for this TabSet, if set this property will determine&amp;#010 the title of the picker menu item for this tab. If unset, ${isc.DocUtils.linkForRef('attr:Tab.title')} will be used&amp;#010 instead" name="pickerTitle" valueType="HTML" defaultValue="null" type="attr" definingClass="object:Tab">
<seeAlso ref="attr:TabSet.showTabPicker">
</seeAlso>
<seeAlso ref="attr:Tab.title">
</seeAlso>
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="attr:CubeGrid.defaultFacetWidth" flags="IRW" description="default width of inner column headers" name="defaultFacetWidth" valueType="number" defaultValue="100" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="method:ListGrid.hasErrors" flags="" description=" Does this grid currently have errors associated with editValues for any row in the grid.&amp;#010" name="hasErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.rowHasErrors">
</seeAlso>
<seeAlso ref="method:ListGrid.cellHasErrors">
</seeAlso>
<returns description="true if there are unresolved errors, false otherwise" type="boolean"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="method:ListGrid.rowEditorExit" flags="A" description=" Callback fired when the user attempts to navigate away from the current edit row, &amp;#010 or complete the current edit.&amp;#010 &lt;P&gt;&amp;#010 Return false from this method to cancel the default behavior (Saving / cancelling the&amp;#010 current edit / moving to the next edit cell).&amp;#010&amp;#010" name="rowEditorExit" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.editorExit">
</seeAlso>
<params description="How was the edit completion fired?" optional="false" name="editCompletionEvent" type="EditCompletionEvent">
</params>
<params description="record for the cell being edited" optional="false" name="record" type="ListGridRecord">
</params>
<params description="new values for the record [Note that fields that have                                 not been edited will not be included in this object]" optional="false" name="newValues" type="object">
</params>
<params description="row number for the row being left" optional="false" name="rowNum" type="number">
</params>
<returns description="Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus&amp;#010                      in this edit cell." type="boolean"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:ValuesManager.cancel" flags="" description="&amp;#010 This method exists for clean integration with existing server frameworks that have a 'cancel'&amp;#010 feature which typically clears session state associated with the form.  When this method is&amp;#010 called, an RPC is sent to the server with a parameter named&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamName')} with the value&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamValue')}.&lt;p&gt;&amp;#010&amp;#010 Note that no other form data is sent.  By default the current top-level page is replaced with the&amp;#010 reply.  If you wish to ignore the server reply instead, call this method like this:&amp;#010 &lt;pre&gt;&amp;#010 dynamicFormInstance.cancel({ignoreTimeout: true, target: null});&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cancel" type="method" definingClass="class:ValuesManager">
<params description="additional properties to set on the RPCRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>submitting</groups>
</docItem>
<docItem ref="method:Label.setIconOrientation" flags="" description=" Changes the orientation of the icon relative to the text of the button.&amp;#010&amp;#010" name="setIconOrientation" type="method" definingClass="class:Label">
<params description="The new orientation of the icon relative to the text of the button." optional="false" name="orientation" type="&quot;left&quot; or &quot;right&quot;">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:List.findAll" flags="" description=" Find all objects where property == value in the object.&amp;#010 &lt;P&gt;&amp;#010 Pass an Object as the &lt;code&gt;propertyName&lt;/code&gt; argument to match multiple properties.&amp;#010&amp;#010" name="findAll" type="method" definingClass="interface:List">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="all matching Objects or null if none found" type="Array"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="method:DOMGrid.setRootElement" flags="" description=" Set the root element (or document) to view in the tree.&amp;#010" name="setRootElement" type="method" definingClass="class:DOMGrid">
<params description="new root element" optional="false" name="rootElement" type="DOMElement">
</params>
</docItem>
<docItem ref="method:CubeGrid.getEditedRecord" flags="" description=" Returns the combination of unsaved edits (if any) and original values (if any) for a given&amp;#010 cell being edited.&amp;#010 &lt;P&gt;&amp;#010 The returned value is never null, and can be freely modified.&amp;#010&amp;#010" name="getEditedRecord" type="method" definingClass="class:CubeGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="valuesID" type="number | Object">
</params>
<params description="colNum of the record being edited. Only required if the records                          rowNum is passed in as the first parameter" optional="true" name="colNum" type="number">
</params>
<returns description="A copy of the record with unsaved edits included" type="Object"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:ListGridField.getFieldTitle" flags="" description=" If your derivation of the field title is more complex than specifying a static string,&amp;#010 you can specify a getFieldTitle() method on your field to return the title string.&amp;#010 Otherwise you can use the ${isc.DocUtils.linkForRef('attr:ListGridField.title')} attribute on the field to specify the title.&amp;#010 &lt;P&gt;&amp;#010 You can use ${isc.DocUtils.linkForRef('method:ListGrid.setFieldProperties','setFieldProperties()')} to dynamically&amp;#010 update the title.&amp;#010&amp;#010" name="getFieldTitle" type="method" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.title">
</seeAlso>
<params description="pointer back to the ListGrid" optional="false" name="viewer" type="ListGrid">
</params>
<params description="index of this field in the grid's fields array." optional="false" name="fieldNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Tree.addList" flags="" description="&amp;#010 Add a list of nodes to some parent.&amp;#010&amp;#010" name="addList" type="method" definingClass="class:Tree">
<seeAlso ref="group:sharingNodes">
</seeAlso>
<params description="The list of nodes to add" optional="false" name="nodeList" type="List of TreeNode">
</params>
<params description="Parent of the node being added.  You can pass                                          in either the ${isc.DocUtils.linkForRef('object:TreeNode')} itself, or a path to&amp;#010	                                        the node (as a String), in which case a&amp;#010	                                        ${isc.DocUtils.linkForRef('method:Tree.find')} is performed to find&amp;#010	                                        the node." optional="false" name="parent" type="String or TreeNode">
</params>
<params description="Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list." optional="true" name="position" type="number">
</params>
<returns description="List of added nodes." type="List"></returns>
</docItem>
<docItem ref="group:viewLoading" name="viewLoading" type="group">
    <refs>method:ViewLoader.setViewURL</refs>
    <refs>class:ViewLoader</refs>
    <refs>attr:RPCRequest.evalResult</refs>
    <refs>attr:RPCRequest.evalVars</refs>
    <refs>attr:ViewLoader.loadingMessage</refs>
</docItem>
<docItem ref="attr:ListGrid.booleanTrueImage" flags="IRWA" description="Image to display for a true value in a boolean field.&amp;#010 &lt;P&gt;&amp;#010 To turn this off explicitly set ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} to true.&amp;#010 &lt;P&gt;" name="booleanTrueImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]checked.png&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.booleanFalseImage">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:PickTreeItem.displayField" flags="IR" description="Specifies an alternative field from which display values should be retrieved for this&amp;#010 item.&lt;br&gt;&amp;#010 If this item is not databound (${isc.DocUtils.linkForRef('attr:PickTreeItem.dataSource')} is unset), this is&amp;#010 implemented by picking up the value of the specified field from the&amp;#010 ${isc.DocUtils.linkForRef('attr:PickTreeItem.valueTree')}.&lt;br&gt;&amp;#010 Otherwise this item will attempt to map its underlying value to a display value&amp;#010 by retrieving a record from the ${isc.DocUtils.linkForRef('attr:PickTreeItem.dataSource')} where the &amp;#010 ${isc.DocUtils.linkForRef('attr:PickTreeItem.valueField')} matches this item's value, and displaying the &amp;#010 &lt;code&gt;displayField&lt;/code&gt; value from that record.&lt;br&gt;" name="displayField" valueType="string" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
</docItem>
<docItem ref="method:DynamicForm.getField" flags="" description="    Synonym for dynamicForm.getItem()&amp;#010&amp;#010" name="getField" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.getItem">
</seeAlso>
<params description="name of the item you're looking for" optional="false" name="itemName" type="string">
</params>
<returns description="FormItem object or null if not found" type="object"></returns>
    <groups>items</groups>
</docItem>
<docItem ref="classMethod:EventHandler.rightButtonDown" flags="" description="			Returns true if the right mouse button is being pressed.&amp;#010&amp;#010" name="rightButtonDown" type="classMethod" platformNotes="Mac:		Macintosh platform generally has only one mouse button, and the&amp;#010		control key being held down serves the same purpose of the &amp;#010		right mouse button on Windows.  This is taken into account automatically.&lt;br&gt;&amp;#010      Opera: &amp;#010      The Opera browser does not pass right mouse button events to JavaScript code by default&amp;#010      (the user must explictly enable this bahavior via a menu item). Therefore we &amp;#010      treat &lt;b&gt;Shift+Ctrl+Click&lt;/b&gt; as a context click in Opera." definingClass="class:EventHandler">
<returns description="true == right button is down, false == up" type="boolean"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ListGrid.setRowErrors" flags="" description=" Set the validation errors for some row (replacing any pre-existant validation errors)&amp;#010" name="setRowErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getRowErrors">
</seeAlso>
<seeAlso ref="method:ListGrid.setFieldError">
</seeAlso>
<params description="row to add validation error for" optional="false" name="rowNum" type="number">
</params>
<params description="validation errors for the row in the format                           &lt;code&gt;{fieldName:errorMessage, ...}&lt;/code&gt; &lt;br&gt;or &lt;br&gt;&amp;#010                          &lt;code&gt;{fieldName:[errorMessage1, errorMessage2], ...}&lt;/code&gt;" optional="false" name="errors" type="object">
</params>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:ListGrid.valueIconLeftPadding" flags="IRW" description="How much padding should there be on the left of valueIcons by default&amp;#010 Can be overridden at the field level" name="valueIconLeftPadding" valueType="number" defaultValue="2" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:ListGridField.displayFormat" flags="IRWA" description="For fields of type &lt;code&gt;&quot;date&quot;&lt;/code&gt;, set this property to a valid&amp;#010 ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to specify how the date should be formatted.&lt;br&gt;&amp;#010 For fields of type &lt;code&gt;&quot;time&quot;&lt;/code&gt;, set this property to a valid &amp;#010 ${isc.DocUtils.linkForRef('type:timeFormatter','timeFormatter')} to specify how the time should be formatted.&lt;br&gt;&amp;#010 If unset, display format may be set at the listGrid level via ${isc.DocUtils.linkForRef('attr:ListGrid.dateFormatter')}&amp;#010 or ${isc.DocUtils.linkForRef('attr:ListGrid.timeFormatter')}.&amp;#010 &lt;p&gt;&amp;#010 If this field is editable the displayFormat will also be passed to the editor created&amp;#010 to edit this field.  For dates you may also need to set ${isc.DocUtils.linkForRef('attr:ListGridField.inputFormat')}." name="displayFormat" valueType="varies" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.inputFormat">
</seeAlso>
<seeAlso ref="attr:ListGrid.dateFormatter">
</seeAlso>
<seeAlso ref="attr:ListGrid.timeFormatter">
</seeAlso>
</docItem>
<docItem ref="attr:Toolbar.buttons" flags="IRW" description="An array of button object initializers. See the Button Widget Class for standard&amp;#010 button properties. The following additional properties can also be specified for&amp;#010 button sizing and positioning on the toolbar itself:&lt;br&gt;&lt;br&gt;&amp;#010 &lt;ul&gt;&lt;li&gt;width--Specifies the width of this button as an absolute number of pixels, a&amp;#010 named property of the toolbar that specifies an absolute number of pixels, a&amp;#010 percentage of the remaining space (e.g. '60%'), or &quot;*&quot; (default) to allocate an&amp;#010 equal portion of the remaining space.&amp;#010 &lt;li&gt;height--Specifies the height of this button.&amp;#010 &lt;li&gt;extraSpace--Specifies an optional amount of extra space, in pixels, to separate&amp;#010 this button from the next button in the toolbar.&lt;/ul&gt;" name="buttons" valueType="array" defaultValue="null" type="attr" definingClass="class:Toolbar">
<seeAlso ref="class:Button">
</seeAlso>
</docItem>
<docItem ref="method:WebService.getSoapMessage" flags="A" description=" Return the SOAP message that will be formed from this WSRequest.&amp;#010 &amp;#010" name="getSoapMessage" type="method" definingClass="class:WebService">
<params description="web service request object" optional="false" name="wsRequest" type="WSRequest">
</params>
<returns description="SOAP message" type="String"></returns>
</docItem>
<docItem ref="attr:DSRequest.useFlatHeaderFields" flags="IRW" description="Cause the ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields','useFlatFields')} XML serialization behavior to be used&amp;#010 for &lt;b&gt;all&lt;/b&gt; soap headers in the request.  See also ${isc.DocUtils.linkForRef('attr:DSRequest.headerData')}." name="useFlatHeaderFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DSRequest">
    <groups>flatFields</groups>
</docItem>
<docItem ref="attr:Window.src" flags="IRW" description="A URL to load as content for the Window's body.  If specified, this&amp;#010 attribute will take precedence over the items attribute.&amp;#010 &lt;P&gt;&amp;#010 Note that setting window.src is essentially a shortcut for setting ${isc.DocUtils.linkForRef('attr:Window.items')}&amp;#010 to a single HTMLflow with a specified ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL','contentsURL')}." name="src" valueType="string" defaultValue="null" type="attr" definingClass="class:Window">
    <setter>setSrc</setter>
<seeAlso ref="attr:Window.contentsType">
</seeAlso>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem deprecated="In favor or ${isc.DocUtils.linkForRef('attr:Canvas.styleName')} as of SmartClient release 5.5" flags="IRW" type="attr" ref="attr:Canvas.className" description="The CSS class applied to this widget as a whole." name="className" valueType="CSSStyleName" defaultValue="&quot;normal&quot;" definingClass="class:Canvas">
    <setter>setClassName</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSource.resultSetClass" flags="IRA" description="Class for ResultSets used by this datasource.  If null, defaults to using&amp;#010 ${isc.DocUtils.linkForRef('class:ResultSet')}.&amp;#010 &lt;P&gt;&amp;#010 This can be set to a custom subclass of ResultSet that, for example, hangs onto to extra&amp;#010 information necessary for integration with web services." name="resultSetClass" valueType="Class Object" defaultValue="null" type="attr" definingClass="class:DataSource">
</docItem>
<docItem ref="attr:DataSourceField.canEdit" flags="IR" description="Whether this field can ever be edited by the user.  If set to &lt;code&gt;false&lt;/code&gt;, no&amp;#010 DataBound component will ever try to offer an editing interface for this field." name="canEdit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentBinding</groups>
</docItem>
<docItem ref="method:ValuesManager.editSelectedData" flags="" description="&amp;#010 Edit the record selected in the specified selection component (typically a&amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid')}).&amp;#010 &lt;P&gt;&amp;#010 Updates the values of this editor to match the selected record's values.&amp;#010 &lt;P&gt;&amp;#010 If this form has a dataSource, then saving via ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')} will use the &amp;#010 &quot;update&quot; operation type.&amp;#010&amp;#010" name="editSelectedData" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected&amp;#010     record(s) is/are to be edited" optional="false" name="selectionComponent" type="ListGrid or ID">
</params>
    <examples>${isc.DocUtils.linkForExampleId('updateOperation')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:ListGrid.setFieldProperties" flags="" description=" Set properties for a particular field, such as the title.&amp;#010 &lt;P&gt;&amp;#010 NOTE: to resize a field, use resizeField() instead.&amp;#010&amp;#010" name="setFieldProperties" type="method" definingClass="class:ListGrid">
<params description="name of the field, or index." optional="false" name="fieldNum" type="number or String">
</params>
<params description="properties to apply to the header" optional="false" name="properties" type="Button Properties">
</params>
</docItem>
<docItem ref="method:Img.resetSrc" flags="A" description=" Refresh the image being shown.  Call this when the ${isc.DocUtils.linkForRef('attr:Img.src')} attribute has not changed, but&amp;#010 other state that affects the image URL (such as being selected) has changed.&amp;#010&amp;#010" name="resetSrc" type="method" definingClass="class:Img">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Array.duplicate" flags="A" description=" Return an Array that is a shallow copy of the list, that is, containing the same items.&amp;#010&amp;#010" name="duplicate" type="method" definingClass="object:Array">
<returns description="new array, pointing to the same items" type="Array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:ImgButton.showTitle" flags="IRWA" description="Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be &amp;#010 displayed for this component.&lt;br&gt;&amp;#010 Applies to Image-based components only, where the title will be rendered out in a label&amp;#010 floating over the component" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
</docItem>
<docItem ref="attr:FormItem.name" flags="IRW" description="Name for this form field.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The FormItem's name determines the name of the property it edits within the form." name="name" valueType="identifer" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>basics</groups>
</docItem>
<docItem ref="method:ListGrid.setFieldState" flags="" description=" Sets some presentation properties (visibility and width) of the listGrid fields based on the&amp;#010 ${isc.DocUtils.linkForRef('type:listGridFieldState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to ${isc.DocUtils.linkForRef('method:ListGrid.getFieldState')}.&amp;#010&amp;#010" name="setFieldState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getFieldState">
</seeAlso>
<params description="state to apply to the listGrid's fields." optional="false" name="fieldState" type="listGridFieldState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:TextItem.width" flags="IRW" description="Default width for fields." name="width" valueType="number" defaultValue="150" type="attr" definingClass="class:TextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:EventHandler.getY" flags="" description="			Return the page-relative Y (vertical) coordinate of an event.&amp;#010&amp;#010" name="getY" type="classMethod" definingClass="class:EventHandler">
<returns description="y-coordinate in page coordinate space" type="number"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="method:MenuItem.click" flags="" description=" Executed when this menu item is clicked by the user. The click handler must be specified&amp;#010 as a function or string of script.  Return false to suppress the ${isc.DocUtils.linkForRef('method:Menu.itemClick')}&amp;#010 handler if specified.&amp;#010&amp;#010" name="click" type="method" definingClass="object:MenuItem">
<params description="for a menu shown as a context menu, the Canvas the menu was shown                        on.  Otherwise the ${isc.DocUtils.linkForRef('class:Menu')} instance of which this&amp;#010                        ${isc.DocUtils.linkForRef('object:MenuItem')} is a member." optional="false" name="target" type="Canvas">
</params>
<params description="The ${isc.DocUtils.linkForRef('object:MenuItem')} that was clicked on." optional="false" name="item" type="MenuItem">
</params>
<params description="The ${isc.DocUtils.linkForRef('class:Menu')} instance of which this ${isc.DocUtils.linkForRef('object:MenuItem')} is a                          member." optional="false" name="menu" type="Menu">
</params>
<params description="Index of the column the user clicked. May be null if the                          user activated the menu via a keyboard event." optional="true" name="colNum" type="number">
</params>
    <groups>menuItemEvents</groups>
</docItem>
<docItem ref="classMethod:Time.setNormalDisplayFormat" flags="" description=" Sets the default format for strings returned by ${isc.DocUtils.linkForRef('classMethod:Time.toTime')}.&amp;#010" name="setNormalDisplayFormat" type="classMethod" definingClass="class:Time">
<params description="Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or&amp;#010  a string designating a standard formatter" optional="false" name="formatter" type="timeFormatter|function">
</params>
</docItem>
<docItem ref="attr:TreeGrid.canDropOnLeaves" flags="IRWA" description="Whether drops are allowed on leaf nodes.&amp;#010 &lt;P&gt;&amp;#010 Dropping is ordinarily not allowed on leaf nodes unless ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')} is&amp;#010 set.  &amp;#010 &lt;P&gt;&amp;#010 The default action for a drop on a leaf node is to place the node in that leaf's parent&amp;#010 folder.  This can be customized by overriding ${isc.DocUtils.linkForRef('method:TreeGrid.folderDrop')}." name="canDropOnLeaves" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
</docItem>
<docItem ref="method:Canvas.getHSnapOrigin" flags="" description=" Get an offset to be used when calculating snap positioning. Returns 0 by default.&amp;#010&amp;#010" name="getHSnapOrigin" type="method" definingClass="class:Canvas">
    <seeAlso>canvas.canvas.getHSnapPosition</seeAlso>
<params description="the child that is being snapped" optional="true" name="snapChild" type="Canvas">
</params>
<returns description="The offset to use when snapping" type="integer"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:SectionStack.reorderSection" deprecated="As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('method:SectionStack.moveSection')}." flags="" description="&amp;#010 Reorder the sections by shifting the specified section to a new position&amp;#010&amp;#010" name="reorderSection" type="method" definingClass="class:SectionStack">
<params description="Section to move.  You can pass the position                       of the section in the SectionStack or the ID of the section." optional="false" name="section" type="position|sectionId">
</params>
<params description="new position index for the section." optional="false" name="position" type="number">
</params>
</docItem>
<docItem ref="method:StatefulCanvas.setIconOrientation" flags="" description=" Changes the orientation of the icon relative to the text of the button.&amp;#010&amp;#010" name="setIconOrientation" type="method" definingClass="class:StatefulCanvas">
<params description="The new orientation of the icon relative to the text of the button." optional="false" name="orientation" type="&quot;left&quot; or &quot;right&quot;">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:CubeGrid.getFacet" flags="" description=" Get a facet definition by facetId.  Constant time.&amp;#010&amp;#010" name="getFacet" type="method" definingClass="class:CubeGrid">
<seeAlso ref="class:Facet">
</seeAlso>
<params description="the id of the facet to retrieve" optional="false" name="facetId" type="String">
</params>
<returns description="the Facet if found, or null" type="Facet"></returns>
</docItem>
<docItem ref="attr:SelectItem.showOptionsFromDataSource" flags="IRWA" description="If this item is part of a databound form, and has a specified &lt;code&gt;valueMap&lt;/code&gt;&amp;#010 by default we show the valueMap options in the pickList for the item.&amp;#010 Setting this property to true will ensure that the options displayed in our pickList&amp;#010 are derived from the form's &lt;code&gt;dataSource&lt;/code&gt;." name="showOptionsFromDataSource" valueType="boolean" defaultValue="null" type="attr" definingClass="class:SelectItem">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:Splitbar.target" flags="R" description="When a &lt;code&gt;Splitbar&lt;/code&gt; is created by a layout, the &lt;code&gt;target&lt;/code&gt; property&amp;#010 of the Splitbar will be a pointer to the member for which it is acting as a resizeBar.&amp;#010 The Splitbar will be positioned next to its target, and will resize it on drag completion." name="target" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Splitbar">
</docItem>
<docItem ref="attr:Canvas.edgeShowCenter" flags="IR" description="Whether to show media in the center section, that is, behind the decorated Canvas." name="edgeShowCenter" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('corners')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:Toolbar.canAcceptDrop" flags="IRWA" description="If true, items (buttons) can be dropped into this toolbar, and the toolbar will&amp;#010 show a drop line at the drop location.  Override drop() to decide what happens when the&amp;#010 item is dropped." name="canAcceptDrop" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Toolbar">
    <groups>dragndrop</groups>
</docItem>
<docItem ref="method:List.find" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}, but returns the object itself instead of its index.&amp;#010&amp;#010" name="find" type="method" definingClass="interface:List">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="first matching object or null if not found" type="Object"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="attr:ListGridField.canSort" flags="IRW" description="Enables or disables sorting by this column. If false, neither interactive&amp;#010  nor scripted (via the sort() method) instructions will sort the listGrid by this&amp;#010  column." name="canSort" valueType="boolean" defaultValue="true" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.sort">
</seeAlso>
<seeAlso ref="attr:ListGrid.canSort">
</seeAlso>
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:ListGrid.dragTrackerMode" flags="IRA" description="When records are being dragged from within a ListGrid, what sort of drag-tracker&amp;#010 should be displayed?&lt;br&gt;&amp;#010 Note that if multiple records are being dragged the displayed tracker will be&amp;#010 based on the first selected record." name="dragTrackerMode" valueType="DragTrackerMode" defaultValue="&quot;icon&quot;" type="attr" definingClass="class:ListGrid">
    <groups>dragTracker</groups>
</docItem>
<docItem ref="method:StretchImgButton.setBaseStyle" flags="" description=" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010" name="setBaseStyle" type="method" definingClass="class:StretchImgButton">
<params description="new base style" optional="false" name="style" type="className">
</params>
</docItem>
<docItem ref="attr:TreeGrid.separateFolders" flags="IR" description="Specifies whether folders and leaves should be segregated in the treeGrid display.&amp;#010          With separateFolders:true and sortDirection:&quot;descending&quot;, folders are displayed&amp;#010          before their sibling leaves; with sortDirection:&quot;ascending&quot;, leaves are displayed&amp;#010          before their sibling folders." name="separateFolders" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
    <groups>treeField</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.valueField" flags="IRW" description="If this form item maps data values to display values by retrieving the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property &amp;#010 denotes the the field to use as the underlying data value in records from the &amp;#010 optionDataSource.&lt;br&gt;&amp;#010 If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item." name="valueField" valueType="string" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
    <getter>FormItem.getValueFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:Img.name" flags="IA" description="The value of this attribute is specified as the value of the 'name' attribute in the&amp;#010 resulting HTML.&amp;#010 &lt;p&gt;&amp;#010 Note: this attribute is ignored if the imageType is set to &quot;tile&quot;" name="name" valueType="string" defaultValue="&quot;main&quot;" type="attr" definingClass="class:Img">
</docItem>
<docItem ref="method:ListGrid.getSortState" flags="" description=" Returns a snapshot of the current sort state (sort field and order) within this listGrid as &amp;#010 a ${isc.DocUtils.linkForRef('type:listGridSortState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setSortState')} to reset this grid's sort to&amp;#010 the current state (assuming the same fields are present in the grid).&lt;br&gt;&amp;#010" name="getSortState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.setSortState">
</seeAlso>
<returns description="current sort state for the grid." type="listGridSortState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:DynamicForm.cancelParamName" flags="IRW" description="The name of the special field sent to the server as part of ${isc.DocUtils.linkForRef('method:DynamicForm.cancel')}" name="cancelParamName" valueType="String" defaultValue="&quot;org.apache.struts.taglib.html.CANCEL&quot;" type="attr" definingClass="class:DynamicForm">
</docItem>
<docItem ref="classMethod:isc.clone" flags="" description=" Create a deep clone of an object that can be edited without affecting the original&amp;#010 &lt;br&gt;&amp;#010 All mutable types, including Objects, Arrays and Dates, are copied.  All immutable types are&amp;#010 just preserved by reference.&amp;#010 &lt;br&gt;&amp;#010 Does not handle looping references (will infinite loop).&amp;#010&amp;#010" name="clone" type="classMethod" definingClass="class:isc">
<params description="object to clone" optional="false" name="object" type="object">
</params>
<returns description="cloned object" type="object"></returns>
    <groups>serialization</groups>
</docItem>
<docItem ref="attr:Canvas.customEdges" flags="IR" description="Array of side names (&quot;T&quot;, &quot;B&quot;, &quot;L&quot;, &quot;R&quot;) specifying which sides of the decorated&amp;#010 component should show edges.  For example: &lt;pre&gt;&amp;#010      customEdges : [&quot;T&quot;, &quot;B&quot;]&amp;#010 &lt;/pre&gt;&amp;#010 .. would show edges only on the top and bottom of a component.&amp;#010 &lt;P&gt;&amp;#010 The default of &lt;code&gt;null&lt;/code&gt; means edges will be shown on all sides." name="customEdges" valueType="Array of String" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="class:DataSource" description="A DataSource is data-provider-independant description of a set of objects&amp;#010 that will be loaded, edited and saved within the user interface of your application.&amp;#010 &lt;P&gt;&amp;#010 Each DataSource consists of a list of ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} that make up a&amp;#010 DataSource &lt;code&gt;record&lt;/code&gt;, along with ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field types')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.validators','validation rules')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','relationships')} to other DataSources, and other&amp;#010 metadata.&amp;#010 &lt;P&gt;&amp;#010 The abstract object description provided by a DataSource is easily mapped to a variety of&amp;#010 backend object models and storage schemes.  The following table shows analogous terminology&amp;#010 across systems.&amp;#010 &lt;table border=1 class=&quot;normal&quot;&gt;&amp;#010 &lt;tr&gt;&amp;#010   &lt;td&gt;Isomorphic SmartClient&lt;/td&gt;&amp;#010   &lt;td&gt;Relational Database&lt;/td&gt;&amp;#010   &lt;td&gt;Enterprise Java Beans (EJB)&lt;/td&gt;&amp;#010   &lt;td&gt;Entity/Relationship Modelling&lt;/td&gt;&amp;#010   &lt;td&gt;OO/UML&lt;/td&gt;&amp;#010   &lt;td&gt;XML Schema/WSDL&lt;/td&gt;&amp;#010   &lt;td&gt;LDAP&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010   &lt;td&gt;DataSource&lt;/td&gt;&amp;#010   &lt;td&gt;Table&lt;/td&gt;&amp;#010   &lt;td&gt;EJB class&lt;/td&gt;&amp;#010   &lt;td&gt;Entity&lt;/td&gt;&amp;#010   &lt;td&gt;Class&lt;/td&gt;&amp;#010   &lt;td&gt;Element Schema (ComplexType)&lt;/td&gt;&amp;#010   &lt;td&gt;Objectclass&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010   &lt;td&gt;Record&lt;/td&gt;&amp;#010   &lt;td&gt;Row&lt;/td&gt;&amp;#010   &lt;td&gt;EJB instance&lt;/td&gt;&amp;#010   &lt;td&gt;Entity instance&lt;/td&gt;&amp;#010   &lt;td&gt;Class instance/Object&lt;/td&gt;&amp;#010   &lt;td&gt;Element instance (ComplexType)&lt;/td&gt;&amp;#010   &lt;td&gt;Entry&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010   &lt;td&gt;Field&lt;/td&gt;&amp;#010   &lt;td&gt;Column&lt;/td&gt;&amp;#010   &lt;td&gt;Property&lt;/td&gt;&amp;#010   &lt;td&gt;Attribute&lt;/td&gt;&amp;#010   &lt;td&gt;Property/Attribute&lt;/td&gt;&amp;#010   &lt;td&gt;Attribute or Element (SimpleType)&lt;/td&gt;&amp;#010   &lt;td&gt;Attribute&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;/table&gt;&amp;#010 &lt;P&gt;&amp;#010 DataSources can be ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','declared')} in either JavaScript or XML&amp;#010 format, and can also be ${isc.DocUtils.linkForRef('group:metadataImport','imported')} from existing metadata formats,&amp;#010 including XML Schema.&amp;#010 &lt;P&gt;&amp;#010 &lt;i&gt;Data Binding&lt;/i&gt; is the process by which&amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','Data Binding-capable UI components')} can automatically configure&amp;#010 themselves for viewing, editing and saving data described by DataSources.  DataBinding is&amp;#010 covered in the ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')}, Chapter 6, &lt;i&gt;Data&amp;#010 Binding&lt;/i&gt;.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('group:clientServerIntegration','Data Integration')} is the process by which a DataSource&amp;#010 can be connected to server systems such as SQL DataBases, Java Object models, WSDL web&amp;#010 services and other data providers.  Data Integration comes in two variants: client-side and&amp;#010 server-side.  ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')} uses the&amp;#010 SmartClient Java-based server to connect to data represented by Java Objects or&amp;#010 JDBC-accessible databases.  ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side integration')}&amp;#010 connects SmartClient DataSources to XML, JSON or other formats accessible via HTTP.&amp;#010 &lt;P&gt;&amp;#010 DataSources have a concept of ${isc.DocUtils.linkForRef('group:dataSourceOperations','4 core operations')} (&quot;fetch&quot;,&amp;#010 &quot;add&quot;, &quot;update&quot; and &quot;remove&quot;) that can be performed on the set of objects represented by a&amp;#010 DataSource.  Once a DataSource has been integrated with your data store, databinding-capable &amp;#010 UI components can leverage the 4 core DataSource operations to provide many complete user&amp;#010 interactions without the need to configure how each individual component loads and saves&amp;#010 data.&amp;#010 &lt;P&gt;&amp;#010 These interactions include ${isc.DocUtils.linkForRef('class:ListGrid','grid views')}, ${isc.DocUtils.linkForRef('class:TreeGrid','tree views')}, &amp;#010 ${isc.DocUtils.linkForRef('class:DetailViewer','detail views')}, ${isc.DocUtils.linkForRef('class:DynamicForm','form')}-based &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.editRecord','editing')} and ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','saving')},&amp;#010 grid-based ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','editing')} and ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell','saving')},&amp;#010 and custom interactions provided by ${isc.DocUtils.linkForExampleId('patternReuse')} custom&amp;#010 databinding-capable components." name="DataSource" type="class">
    <methods>method:DataSource.getLegalChildTags</methods>
    <methods>method:DataSource.transformRequest</methods>
    <methods>method:DataSource.getXMLRequestBody</methods>
    <methods>method:DataSource.xmlSerialize</methods>
    <methods>method:DataSource.recordsFromXML</methods>
    <methods>method:DataSource.transformResponse</methods>
    <methods>method:DataSource.fetchData</methods>
    <methods>method:DataSource.filterData</methods>
    <methods>method:DataSource.addData</methods>
    <methods>method:DataSource.updateData</methods>
    <methods>method:DataSource.removeData</methods>
    <methods>method:DataSource.handleError</methods>
    <methods>method:DataSource.getField</methods>
    <methods>method:DataSource.getFieldNames</methods>
    <methods>method:DataSource.applyFilter</methods>
    <methods>method:DataSource.fieldMatchesFilter</methods>
    <methods>method:DataSource.supportsTextMatchStyle</methods>
    <methods>method:DataSource.compareCriteria</methods>
    <classMethods>classMethod:DataSource.getDataSource</classMethods>
    <classMethods>classMethod:DataSource.get</classMethods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:DataSource.ID</attrs>
    <attrs>attr:DataSource.addGlobalId</attrs>
    <attrs>attr:DataSource.dataFormat</attrs>
    <attrs>attr:DataSource.callbackParam</attrs>
    <attrs>attr:DataSource.requestProperties</attrs>
    <attrs>attr:DataSource.dataTransport</attrs>
    <attrs>attr:DataSource.serverType</attrs>
    <attrs>attr:DataSource.tableName</attrs>
    <attrs>attr:DataSource.dbName</attrs>
    <attrs>attr:DataSource.jsonPrefix</attrs>
    <attrs>attr:DataSource.jsonSuffix</attrs>
    <attrs>attr:DataSource.fields</attrs>
    <attrs>attr:DataSource.inheritsFrom</attrs>
    <attrs>attr:DataSource.useFlatFields</attrs>
    <attrs>attr:DataSource.showLocalFieldsOnly</attrs>
    <attrs>attr:DataSource.useParentFieldOrder</attrs>
    <attrs>attr:DataSource.dropExtraFields</attrs>
    <attrs>attr:DataSource.serviceNamespace</attrs>
    <attrs>attr:DataSource.schemaNamespace</attrs>
    <attrs>attr:DataSource.recordXPath</attrs>
    <attrs>attr:DataSource.dataURL</attrs>
    <attrs>attr:DataSource.tagName</attrs>
    <attrs>attr:DataSource.clientOnly</attrs>
    <attrs>attr:DataSource.testData</attrs>
    <attrs>attr:DataSource.criteriaPolicy</attrs>
    <attrs>attr:DataSource.resultTreeClass</attrs>
    <attrs>attr:DataSource.resultSetClass</attrs>
    <attrs>attr:DataSource.useLocalValidators</attrs>
    <attrs>attr:DataSource.showPrompt</attrs>
    <attrs>attr:DataSource.title</attrs>
    <attrs>attr:DataSource.pluralTitle</attrs>
    <attrs>attr:DataSource.titleField</attrs>
    <attrs>attr:DataSource.childrenField</attrs>
    <attrs>attr:DataSource.globalNamespaces</attrs>
    <attrs>attr:DataSource.resultBatchSize</attrs>
    <attrs>attr:DataSource.serverObject</attrs>
    <attrs>attr:DataSource.operationBindings</attrs>
<seeAlso ref="interface:DataBoundComponent" description="for information on DataBound Components"></seeAlso>
<seeAlso ref="group:dataSourceDeclaration" description="for how to create DataSources"></seeAlso>
</docItem>
<docItem ref="attr:Slider.maxValueLabel" flags="IRW" description="The text displayed in the label for the maximum value of the slider. If left as null, then&amp;#010 slider.maxValue will be displayed." name="maxValueLabel" valueType="String" defaultValue="null" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.showRange">
</seeAlso>
<seeAlso ref="attr:Slider.maxValue">
</seeAlso>
</docItem>
<docItem ref="attr:ComboBoxItem.pickerIconHeight" flags="IRW" description="Don't specify an explicit height for the picker icon - instead have it size to match the&amp;#010 height of the combo box item." name="pickerIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="type:Properties" description="When the type for a parameter mentions &quot;properties&quot; as in &quot;ListGrid Properties&quot; or&amp;#010 &quot;RPCRequest Properties&quot;, it means that the expected value is a JavaScript Object&amp;#010 containing any set of properties generally legal when creating an object of that type.&amp;#010 &lt;P&gt;&amp;#010 For example, the first parameter of ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')} is of type&amp;#010 &quot;RPCRequest Properties&quot;.  This means it should be called like:&amp;#010 &lt;pre&gt;&amp;#010    isc.RPCManager.sendRequest({&amp;#010        actionURL : &quot;/foo.do&quot;,&amp;#010        showPrompt:false&amp;#010    });&lt;/pre&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL','actionURL')} and ${isc.DocUtils.linkForRef('attr:RPCRequest.showPrompt','showPrompt')} are &amp;#010 properties of ${isc.DocUtils.linkForRef('class:RPCRequest')}.  &amp;#010 &lt;P&gt;&amp;#010 Note that the notation shown above is an example of a&amp;#010 ${isc.DocUtils.linkForRef('type:ObjectLiteral','JavaScript object literal')}." name="Properties" type="type">
</docItem>
<docItem ref="group:buttons" name="buttons" type="group">
    <refs>method:Toolbar.getButton</refs>
    <refs>method:Window.closeClick</refs>
    <refs>method:Dialog.saveData</refs>
    <refs>method:Dialog.closeClick</refs>
    <refs>method:Dialog.cancelClick</refs>
    <refs>method:Dialog.okClick</refs>
    <refs>method:Dialog.applyClick</refs>
    <refs>method:Dialog.yesClick</refs>
    <refs>method:Dialog.noClick</refs>
</docItem>
<docItem ref="method:Log.logIsWarnEnabled" flags="" description=" Check whether a message logged at &quot;warn&quot; priority would be visible in the log.&amp;#010 &lt;P&gt;&amp;#010 As with logDebug, category is defaulted to the current className.  Use this method to avoid&amp;#010 putting together expensive log messages if they will never appear in the log.&amp;#010&amp;#010" name="logIsWarnEnabled" type="method" definingClass="class:Log">
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="method:Canvas.setTop" flags="" description=" Set the top coordinate of this object, relative to its enclosing context, in pixels.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you're setting multiple coordinates, use setRect() or moveTo() instead&amp;#010&amp;#010" name="setTop" type="method" definingClass="class:Canvas">
<params description="new top coordinate" optional="false" name="top" type="number">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="class:SubmitItem" description="Button that saves the data in the form, by calling &lt;code&gt;DynamicForm.submit()&lt;/code&gt; &amp;#010 Behavior depends on the containing form's ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} property. &amp;#010 If &lt;code&gt;form.canSubmit&lt;/code&gt; is true, this method will perform a direct submission&amp;#010 of the underlying HTML form.&lt;br&gt;&amp;#010 Otherwise standard RPC operations will be used to save the changes." name="SubmitItem" type="class">
    <attrs>attr:SubmitItem.title</attrs>
<seeAlso ref="group:operations">
</seeAlso>
<seeAlso ref="attr:DynamicForm.canSubmit">
</seeAlso>
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
</docItem>
<docItem ref="method:StretchImgButton.setDisabled" flags="" description=" Enable or disable this object&amp;#010" name="setDisabled" type="method" definingClass="class:StretchImgButton">
<params description="true if this widget is to be disabled" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
    <groups>state</groups>
</docItem>
<docItem ref="method:Canvas.drop" flags="A" description="&amp;#010 Executed when the mouse button is released over a compatible drop target at the end of&amp;#010 a drag sequence. Your widget should implement whatever it wants to do when receiving a&amp;#010 drop here. For example, in a file moving interface, a drop might mean that you should&amp;#010 move or copy the dragged file into the folder it was dropped on, or dropping something in&amp;#010 a trash can might mean to clear it from the screen.&amp;#010&amp;#010" name="drop" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<seeAlso ref="classMethod:EventHandler.getDragTarget">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:ResultSet.findAll" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.findAll')}.  Checks only loaded rows and will not trigger a fetch.&amp;#010" name="findAll" type="method" definingClass="class:ResultSet">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="all matching Objects or null if none found" type="Array"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="classMethod:SchemaSet.get" flags="A" description=" Retrieve a SchemaSet object by it's schemaNamespace.&amp;#010&amp;#010" name="get" type="classMethod" definingClass="class:SchemaSet">
<params description="uri from the &quot;targetNamespace&quot; attribute of the &amp;lt;xsd:schema&amp;gt; element from the XML Schema or WSDL file this SchemaSet was derived&amp;#010 from." optional="false" name="schemaNamespace" type="String">
</params>
<returns description="the requested SchemaSet, or null if not loaded" type="SchemaSet"></returns>
</docItem>
<docItem ref="attr:StretchImg.hSrc" flags="IRW" description="Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is false and &amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset." name="hSrc" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StretchImg">
<seeAlso ref="attr:StretchImg.src">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:GridRenderer.cellOver" flags="A" description=" Called when the mouse pointer enters a cell&amp;#010&amp;#010" name="cellOver" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Flashlet.params" flags="IR" description="A map of key/value pairs to pass to the flashlet as parameters.  Note that these will be set&amp;#010  on the outer &amp;lt;object&amp;gt; element as well as the inner &amp;lt;embed&amp;gt; element." name="params" valueType="object" defaultValue="null" type="attr" definingClass="class:Flashlet">
</docItem>
<docItem ref="method:ComboBoxItem.getDisplayFieldName" flags="A" description=" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.&amp;#010 If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method&amp;#010 will return the title field for the &lt;code&gt;optionDataSource&lt;/code&gt;&amp;#010" name="getDisplayFieldName" type="method" definingClass="class:ComboBoxItem">
<returns description="display field name, or null" type="String"></returns>
</docItem>
<docItem ref="method:CubeGrid.clearEditValue" flags="A" description="&amp;#010  Clear a field value being tracked as an unsaved user edit for some cell.&lt;P&gt;&amp;#010  The saved record value will be displayed in the the appropriate cell instead.&amp;#010&amp;#010" name="clearEditValue" type="method" definingClass="class:CubeGrid">
<params description="Row number, primary keys object for the record,                                              or editValues object" optional="false" name="editValuesID" type="number | object">
</params>
<params description="Column number for the cell in question. Only required if the                              first parameter is a row number." optional="true" name="colNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Menu.submenuDisabledImage" flags="IRWA" description="Default image to use for the submenu indicator when item is disabled. Valid src, width and&amp;#010 height must be specified. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.&lt;br&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:Menu.submenuDirection')} is set to &lt;code&gt;&quot;left&quot;&lt;/code&gt;, the image src will have&amp;#010 the suffix &lt;code&gt;&quot;_left&quot;&lt;/code&gt; appended to it." name="submenuDisabledImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="group:fields" name="fields" type="group">
    <refs>attr:DataSource.fields</refs>
    <refs>attr:DataSource.inheritsFrom</refs>
    <refs>attr:DataSource.useFlatFields</refs>
    <refs>attr:DataSource.showLocalFieldsOnly</refs>
    <refs>attr:DataSource.useParentFieldOrder</refs>
</docItem>
<docItem ref="attr:ImgButton.iconOrientation" flags="IR" description="If this button is showing an icon should it appear to the left or right of the title?&amp;#010 valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; and &lt;code&gt;&quot;right&quot;&lt;/code&gt;." name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" type="attr" definingClass="class:ImgButton">
    <setter>setIconOrientation</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Toolbar.getButton" flags="" description="          Retrieves a button widget instance (within this toolbar) from the ID / index / &amp;#010          descriptor object for the button (as with the getButtonNumber() method)&amp;#010          This provides a way to access a toolbar button's properties and methods directly.&amp;#010" name="getButton" type="method" definingClass="class:Toolbar">
<seeAlso ref="method:Toolbar.getButtonNumber">
</seeAlso>
<params description="identifier for the button to retrieve" optional="false" name="index" type="number | string | object">
</params>
<returns description="the button, or null if the button wasn't found" type="Button"></returns>
    <groups>buttons</groups>
</docItem>
<docItem ref="method:CubeGrid.facetHasSelection" flags="" description="&amp;#010 return whether any facet value for this facet is selected in headers.  If no facetId passed,&amp;#010 return whether any facet has a selection&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; tester&amp;#010" name="facetHasSelection" type="method" definingClass="class:CubeGrid">
<params description="Id for facet to test" optional="false" name="facetId" type="string">
</params>
<returns description="true if any facet value in this header is selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.setViewState" flags="" description=" Reset this grid's view state to match the ${isc.DocUtils.linkForRef('type:listGridViewState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getViewState')}.&amp;#010&amp;#010" name="setViewState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getViewState">
</seeAlso>
<params description="Object describing the desired view state for the grid" optional="false" name="viewState" type="listGridViewState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:ListGridField.valueIconOrientation" flags="IRW" description="If we're showing a valueIcon for this field should it appear to the left or the right&amp;#010 of the text?  By default the icon will appear to the left of the textual value - &amp;#010 set this to &quot;right&quot; to show the icon on the right of the text.&amp;#010 Has no effect if ${isc.DocUtils.linkForRef('attr:ListGridField.showValueIconOnly')} is true" name="valueIconOrientation" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:Canvas.isEnabled" deprecated="As of SmartClient version 5.5 deprecated in favor of ${isc.DocUtils.linkForRef('method:Canvas.isDisabled')}." flags="" description=" Returns true if the widget and all widgets above it in the containment hierarchy are enabled.&amp;#010 Returns false otherwise.&amp;#010" name="isEnabled" type="method" definingClass="class:Canvas">
<returns description="true if the widget and all widgets above it in the containment hierarchy                      are enabled; false otherwise" type="boolean"></returns>
    <groups>enable</groups>
</docItem>
<docItem ref="classAttr:RPCManager.timeoutErrorMessage" flags="IRW" description="Default message displayed to user when an opration fails to return from the server within&amp;#010 the timeout period specified by ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTimeout')}." name="timeoutErrorMessage" valueType="string" defaultValue="&quot;Operation timed out&quot;" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="classAttr:RPCManager.defaultTimeout">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Canvas.backgroundColor" flags="IR" description="The background color for this widget. It corresponds to the CSS background-color&amp;#010 attribute. You can set this property to an RGB value (e.g. #22AAFF) or a named color&amp;#010 (e.g. red) from a list of browser supported color names." name="backgroundColor" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setBackgroundColor</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGridField.valueMap" flags="IRW" description="Array of legal values for this field, or an Object where each property maps a stored&amp;#010 value to a user-displayable value.&lt;br&gt;&amp;#010 Note that if this field is editable (see ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit')}), editors displayed for this field will pick up their&amp;#010 valueMap either from this value or from ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueMap')}.&amp;#010 &lt;P&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}." name="valueMap" valueType="Array of Object" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.setValueMap">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('listType')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="group:event handling" name="event handling" type="group">
    <refs>method:TreeGrid.willAcceptDrop</refs>
    <refs>method:StatefulCanvas.getActionType</refs>
    <refs>method:StatefulCanvas.setActionType</refs>
    <refs>method:StatefulCanvas.addToRadioGroup</refs>
    <refs>method:StatefulCanvas.removeFromRadioGroup</refs>
    <refs>method:Button.addToRadioGroup</refs>
    <refs>method:Button.removeFromRadioGroup</refs>
    <refs>method:Button.setActionType</refs>
    <refs>method:Button.getActionType</refs>
    <refs>method:Toolbar.itemClick</refs>
    <refs>method:ImgButton.addToRadioGroup</refs>
    <refs>method:ImgButton.removeFromRadioGroup</refs>
    <refs>method:ImgButton.setActionType</refs>
    <refs>method:ImgButton.getActionType</refs>
    <refs>method:StretchImgButton.addToRadioGroup</refs>
    <refs>method:StretchImgButton.removeFromRadioGroup</refs>
    <refs>method:StretchImgButton.setActionType</refs>
    <refs>method:StretchImgButton.getActionType</refs>
    <refs>attr:StatefulCanvas.actionType</refs>
    <refs>attr:StatefulCanvas.radioGroup</refs>
    <refs>attr:Button.radioGroup</refs>
    <refs>attr:Button.actionType</refs>
    <refs>attr:ImgButton.radioGroup</refs>
    <refs>attr:ImgButton.actionType</refs>
    <refs>attr:StretchImgButton.radioGroup</refs>
    <refs>attr:StretchImgButton.actionType</refs>
    <refs>type:SelectionType</refs>
</docItem>
<docItem ref="attr:SelectItem.addUnknownValues" flags="IRWA" description="If we're setting the value of a select item and the value isn't a legal value in the&amp;#010 valueMap, whether we should allow the value (creating a new option for it) or reject it.&amp;#010 &lt;P&gt;&amp;#010 Exception: If the value is set to &lt;code&gt;null&lt;/code&gt; but there is no null entry in the&amp;#010 valueMap for this item, setting &lt;code&gt;addUnknownValues&lt;/code&gt; to true will not cause&amp;#010 a null option to show up at the top of the select item pickList. Whether an empty &amp;#010 option is shown in the pickList is governed by ${isc.DocUtils.linkForRef('attr:SelectItem.allowEmptyValue')}&amp;#010 instead." name="addUnknownValues" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SelectItem">
    <examples>${isc.DocUtils.linkForExampleId('formDependentSelects')}</examples>
</docItem>
<docItem ref="class:Splitbar" description="Subclass of the ${isc.DocUtils.linkForRef('class:StretchImg')} class. As with the ${isc.DocUtils.linkForRef('class:ImgSplitbar')} class, &amp;#010  widgets of this class can be displayed as a resize-bar for widgets &amp;#010  in Layouts where showResizeBar is set to true. Provides a different appearance from&amp;#010  the &lt;code&gt;ImgSplitbar&lt;/code&gt; class.&lt;br&gt;&amp;#010  To specify the resizeBar class for some layout, use the ${isc.DocUtils.linkForRef('attr:Layout.resizeBarClass')}&amp;#010  property." name="Splitbar" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:Splitbar.target</attrs>
    <attrs>attr:Splitbar.vertical</attrs>
    <attrs>attr:Splitbar.src</attrs>
    <attrs>attr:Splitbar.hSrc</attrs>
    <attrs>attr:Splitbar.vSrc</attrs>
    <attrs>attr:Splitbar.capSize</attrs>
    <attrs>attr:Splitbar.skinImgDir</attrs>
    <attrs>attr:Splitbar.showGrip</attrs>
    <attrs>attr:Splitbar.gripImgSuffix</attrs>
    <attrs>attr:Splitbar.showDownGrip</attrs>
    <attrs>attr:Splitbar.showRollOverGrip</attrs>
    <attrs>attr:Splitbar.showClosedGrip</attrs>
    <attrs>attr:Splitbar.canDrag</attrs>
    <attrs>attr:Splitbar.canCollapse</attrs>
    <attrs>attr:Splitbar.cursor</attrs>
    <attrs>attr:Splitbar.vResizeCursor</attrs>
    <attrs>attr:Splitbar.hResizeCursor</attrs>
<seeAlso ref="class:Layout">
</seeAlso>
<seeAlso ref="class:ImgSplitbar">
</seeAlso>
</docItem>
<docItem ref="method:CubeGrid.getCellFacetValues" flags="" description=" Given a cell coordinate within this CubeGrid return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')}&amp;#010 indicating the facet values for the cell.&amp;#010" name="getCellFacetValues" type="method" definingClass="class:CubeGrid">
<params description="row index of the cell" optional="false" name="rowNum" type="number">
</params>
<params description="row index of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="facet values for the specified cell. Returns null if the specified cell    is not present in the grid." type="FacetValueMap"></returns>
</docItem>
<docItem ref="method:Button.setState" flags="" description=" Set the 'state' of this object, this changes it's appearance.&amp;#010&amp;#010" name="setState" type="method" definingClass="class:Button">
<seeAlso ref="method:Button.setDisabled" description="which also affects state values."></seeAlso>
<params description="new state" optional="false" name="newState" type="State">
</params>
    <groups>state</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:BlurbItem.wrap" flags="IRW" description="If true, item contents can wrap. If false, all the contents should appear on a single line." name="wrap" valueType="boolean" defaultValue="null" type="attr" definingClass="class:BlurbItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ImgButton.getTitle" flags="A" description=" Return the title - text/HTML drawn inside the component.&amp;#010 &lt;p&gt;&amp;#010 Default is to simply return this.title.&amp;#010" name="getTitle" type="method" definingClass="class:ImgButton">
<returns description="HTML for the title" type="string"></returns>
</docItem>
<docItem ref="attr:Label.icon" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Label">
    <setter>setIcon</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="classMethod:EventHandler.getX" flags="" description="			Return the page-relative X (horizontal) coordinate of an event.&amp;#010&amp;#010" name="getX" type="classMethod" definingClass="class:EventHandler">
<returns description="x-coordinate in page coordinate space" type="number"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="method:Canvas.getPageRight" flags="" description=" Return the page-relative right coordinate of this object, in pixels.&amp;#010		&amp;#010" name="getPageRight" type="method" definingClass="class:Canvas">
<returns description="GLOBAL right coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.top" description="Number of pixels the top of the widget is offset down from its default drawing context&amp;#010 (either its parent's top-left corner, or the document flow, depending on the value of&amp;#010 the ${isc.DocUtils.linkForRef('attr:Canvas.position')} property)." name="top" valueType="number" defaultValue="0" definingClass="class:Canvas">
    <getter>getTop</getter>
    <setter>setTop</setter>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:ImgButton.setTitle" flags="" description=" Set the title.&amp;#010" name="setTitle" type="method" definingClass="class:ImgButton">
<params description="new title" optional="false" name="newTitle" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:TreeGrid.nodeClick" flags="" description="&amp;#010 This method is called when a leaf or folder record is clicked on.  Note that if you set&amp;#010 up a callback for &lt;code&gt;nodeClick()&lt;/code&gt; and e.g. ${isc.DocUtils.linkForRef('method:TreeGrid.leafClick')}, then&amp;#010 both will fire (in that order) if a leaf is clicked on.&amp;#010&amp;#010" name="nodeClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.folderClick">
</seeAlso>
<seeAlso ref="method:TreeGrid.leafClick">
</seeAlso>
<params description="The TreeGrid on which leafClick() occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The node (record) that was clicked" optional="false" name="node" type="TreeNode">
</params>
<params description="Index of the row where the click occurred." optional="false" name="recordNum" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('treeDropEvents')}</examples>
</docItem>
<docItem ref="method:ImgButton.getActionType" flags="" description=" Return the 'actionType' for this canvas (radio / checkbox / button)&amp;#010" name="getActionType" type="method" definingClass="class:ImgButton">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:SectionStackSection.ID" flags="IR" description="Optional ID for the section.  This can be used later in calls to ${isc.DocUtils.linkForRef('class:SectionStack')} APIs such as&amp;#010 ${isc.DocUtils.linkForRef('method:SectionStack.expandSection')} and ${isc.DocUtils.linkForRef('method:SectionStack.collapseSection')}." name="ID" valueType="String" defaultValue="null" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem ref="method:DynamicForm.getItem" flags="" description="    Takes an item name (specified via the form.fieldIdProperty value, or retrieved via&amp;#010    item.getFieldName()) returns a reference to the appropriate item in this form.&amp;#010    Notes:&lt;br&gt;&amp;#010    - This method will also return a (top-level) item from the index of an item in the form's&amp;#010      items array&lt;br&gt;&amp;#010    - Items are also available via their global IDs as window[itemID].  To get the item's ID&amp;#010      use item.getItemID()&lt;br&gt;&amp;#010&amp;#010" name="getItem" type="method" definingClass="class:DynamicForm">
<params description="name of the item you're looking for" optional="false" name="itemName" type="string">
</params>
<returns description="FormItem object or null if not found" type="object"></returns>
    <groups>items</groups>
</docItem>
<docItem ref="group:clientServerIntegration" title="Client-Server Integration" description="Like client-server desktop applications, SmartClient browser-based applications interact&amp;#010 with remote data and services via background communication channels. Background requests&amp;#010 retrieve chunks of data rather than new HTML pages, and update your visual components in&amp;#010 place rather than rebuilding the entire user interface.&amp;#010 &lt;P&gt;&amp;#010 SmartClient supports two general classes of client-server operations:&amp;#010 ${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')} (DataSource Requests) and ${isc.DocUtils.linkForRef('class:RPCRequest')}s (Remote Procedure&amp;#010 Call Requests).  DataSource requests are for manipulating structured data described by&amp;#010 ${isc.DocUtils.linkForRef('class:DataSource','DataSources')}.  RPCRequests are a low-level, very flexible mechanism for&amp;#010 custom client-server communications.  In an nutshell, RPCRequests:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; may contain arbitrary data&amp;#010 &lt;li&gt; are always initiated by custom code (a call to ${isc.DocUtils.linkForRef('classMethod:RPCManager.send')}), and have&amp;#010 their responses handled by custom code (the callback passed to &lt;code&gt;send()&lt;/code&gt;)&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 DSRequests:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; contain data that follows the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')},&amp;#010 which reflect the 4 basic operations on stored records: fetch, update, create, remove.&amp;#010 &lt;li&gt; are initiated by ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} in response to user&amp;#010 actions, and have their responses automatically managed (for example, &amp;#010 ${isc.DocUtils.linkForRef('class:ResultSet','cache management')} and &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','validation error handling')}).  DSRequests can also be&amp;#010 initiated manually and have their responses handled with custom code.&amp;#010 &lt;/ul&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('class:RPCManager')} documentation for further information on RPCRequests - the&amp;#010 remainder of this document focuses on integrating DataSource operations with your server.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;DataSource Creation&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 First you must create ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} that describe the objects from&amp;#010 your object model that will be loaded or manipulated within your application.  All of ISC's&amp;#010 most powerful functionality builds on the concept of a DataSource, and because of ISC's &amp;#010 databinding framework (see ${isc.DocUtils.linkForRef('interface:DataBoundComponent')}), it's as easy to create a&amp;#010 DataSource that can configure an unlimited number of components as it is to configure a&amp;#010 single component.&amp;#010 &lt;P&gt;&amp;#010 There are a number of options for creating DataSources; for early prototyping, creating a&amp;#010 DataSource by hand in either JavaScript or XML is simplest (this is covered under &amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','DataSource declaration')}).  Later on, you can persue one of&amp;#010 many ${isc.DocUtils.linkForRef('group:metadataImport','metadata import')} strategies for automatically leveraging&amp;#010 your existing metadata.&amp;#010 &lt;p&gt;&amp;#010 Once you have a DataSource, you can bind a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} such as a &amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid')} to it, call one of the &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')} on it, such as&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}, the ListGrid will send a background HTTP request to the&amp;#010 server asking for data.  You can set the log category &quot;RPCManager&quot; to DEBUG threshold to see&amp;#010 the outbound request and the server's response.&amp;#010 &lt;P&gt;&amp;#010 In this case, the ListGrid is sending a DataSource operation request of type &quot;fetch&quot;.  To&amp;#010 fulfill it, you will need to provide a set of matching records in one of many possible&amp;#010 formats.&amp;#010 &lt;P&gt;&amp;#010 At this point your code is just a handful of lines (this example shows a DataSource created&amp;#010 in JavaScript):&amp;#010 &lt;pre&gt;&amp;#010     DataSource.create({&amp;#010         ID:&quot;employees&quot;,&amp;#010         fields:[ &amp;#010             ... &amp;#010         ]&amp;#010     });&amp;#010     ListGrid.create({&amp;#010         ID:&quot;myGrid&quot;,&amp;#010         dataSource:&quot;employees&quot;&amp;#010     });&amp;#010     myGrid.fetchData();&amp;#010 &lt;/pre&gt;&amp;#010 If you now bind a ${isc.DocUtils.linkForRef('class:DynamicForm')} to your DataSource, you can use the &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.editSelectedData')} and ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')}&amp;#010 methods to cause the client to submit &quot;update&quot; operations.  For both &quot;update&quot; and &quot;add&quot;&amp;#010 operations, the DSRequest object you receive will have inbound data that is expected to be&amp;#010 committed to your data model.  &amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Data Integration&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 There are two main approaches to integrating DataSources with your server technology:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')}: DataSource requests from&amp;#010 the browser arrive as Java Objects on the server.  You deliver responses to the browser by&amp;#010 returning Java Objects.&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side integration')}: DataSource requests arrive&amp;#010 as simple HTTP requests which your server code receives directly (in Java, you use the&amp;#010 Servlet API or .jsps to handle the requests).  Responses are sent as XML or JSON which you&amp;#010 directly generate.  &amp;#010 &lt;/ul&gt;&amp;#010 Note that using WSDL-described web services is also considered a client-side integration&amp;#010 approach, although in this case it is typical to use extensive third-party web service&amp;#010 libraries such as &lt;a href='http://ws.apache.org/axis/' onclick=&quot;window.open('http://ws.apache.org/axis/');return false;&quot;&gt;Apache Axis&lt;/a&gt; to provide Java&amp;#010 bindings.&amp;#010 &lt;P&gt;&amp;#010 The possible approaches are summarized in the diagram below.  Paths 2, 3, and 4 are&amp;#010 client-side integration approaches, and path 1 includes all server-side integration&amp;#010 approaches.&amp;#010 &lt;P&gt;&amp;#010 &lt;img src=&quot;${isc.DocViewer.instance.referenceRoot}skin/ds_bindings.png&quot; width=763 height=475&gt;&amp;#010 &lt;P&gt;&amp;#010 All of these integration options can be used in parallel within the same application.  For&amp;#010 example, an application that typically talks to a Java backend may contact Yahoo's&amp;#010 JSON-based search services to get related search results, or integrate with SalesForce&amp;#010 applications via the AppForce WSDL-described web service.&amp;#010 &lt;P&gt;&amp;#010 If you cannot install the SmartClient Server or must integrate with a pre-existing web&amp;#010 service, then you must pursue ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')}.&amp;#010 Otherwise there are several factors to consider:&amp;#010&amp;#010 &lt;ul&gt;&amp;#010&amp;#010 &lt;li&gt; With an existing Java backend, the fastest integration approach is&amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration','server-side integration')} using &amp;#010 ${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation (DMI)')}.  Given &amp;#010 a Java method that returns a Collection of POJOs, a short XML declaration will achieve&amp;#010 data loading.&lt;/li&gt;&amp;#010&amp;#010 &lt;li&gt; If you are building an &amp;#010 &lt;a href='http://www.google.com/search?q=SOA+architecture' onclick=&quot;window.open('http://www.google.com/search?q=SOA+architecture');return false;&quot;&gt;SOA Architecture&lt;/a&gt;, and some of&amp;#010 the services that your SmartClient application needs to contact could be shared with other&amp;#010 kinds of clients, consider the WSDL- or XML-based&amp;#010 ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-Side Integration')}.&lt;/li&gt;&amp;#010&amp;#010 &lt;li&gt; The SmartClient server accelerates Java integration and provides various useful&amp;#010 facilities, including the broadest possible browser support, server-push, and network&amp;#010 performance enhancements.  See the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Server Summary')} for&amp;#010 details.&lt;/li&gt;&amp;#010&amp;#010 &lt;/ul&gt;" name="clientServerIntegration" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:CubeGrid.hiliteProperty" flags="IRW" description="Property to use to determine whether a value should be ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites','hilited')}.&amp;#010 &lt;P&gt;&amp;#010 This property is legal on ${isc.DocUtils.linkForRef('object:CellRecord','cellRecords')} and on&amp;#010 ${isc.DocUtils.linkForRef('class:FacetValue','facetValues')}.  In the latter case, an entire row or column of&amp;#010 cells in the body area will be hilited." name="hiliteProperty" valueType="string" defaultValue="&quot;_hilite&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:Canvas.peers" flags="IRWA" description="Array of all Canvii that are peers of this Canvas." name="peers" valueType="Array of Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>containment</groups>
</docItem>
<docItem ref="method:TabSet.addTabs" flags="A" description=" Add one or more tabs&amp;#010" name="addTabs" type="method" definingClass="class:TabSet">
<seeAlso ref="method:TabSet.addTab">
</seeAlso>
<params description="new tab or tabs" optional="false" name="tabs" type="Tab or Array of Tab">
</params>
<params description="position where tab should be added (or array of positions)" optional="false" name="position" type="number">
</params>
</docItem>
<docItem ref="attr:DateChooser.prevMonthIcon" flags="IRW" description="Icon for the previous month button" name="prevMonthIcon" valueType="URL" defaultValue="&quot;[SKIN]arrow_left.gif&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:ResultSet.lengthIsKnown" flags="" description=" Whether the ResultSet actually knows how many records are available from the server.&amp;#010 The ResultSet will not know how many records are available when initially fetching and &amp;#010 filtering data. Note that the value returned from ${isc.DocUtils.linkForRef('method:ResultSet.getLength')} will be &amp;#010 an arbitrary, large value if the actual length is not known.&amp;#010" name="lengthIsKnown" type="method" definingClass="class:ResultSet">
<returns description="whether length is known" type="boolean"></returns>
</docItem>
<docItem ref="group:EventRegistry" name="EventRegistry" type="group">
    <refs>classMethod:Page.setEvent</refs>
    <refs>classMethod:Page.clearEvent</refs>
    <refs>type:FireStyle</refs>
</docItem>
<docItem exampleConfig="ToolbarItem.xml" ref="class:ToolbarItem" description="Set of horizontally arranged buttons." name="ToolbarItem" type="class">
    <attrs>attr:ToolbarItem.buttons</attrs>
    <attrs>attr:ToolbarItem.showTitle</attrs>
    <attrs>attr:ToolbarItem.startRow</attrs>
    <attrs>attr:ToolbarItem.endRow</attrs>
    <attrs>attr:ToolbarItem.colSpan</attrs>
    <attrs>attr:ToolbarItem.vertical</attrs>
    <attrs>attr:ToolbarItem.buttonConstructor</attrs>
    <attrs>attr:ToolbarItem.buttonProperties</attrs>
    <attrs>attr:ToolbarItem.buttonBaseStyle</attrs>
</docItem>
<docItem ref="attr:CubeGrid.autoSelectValues" flags="IR" description="Whether to select cells in the body when row or column headers are selected.&lt;br&gt;&lt;br&gt;&amp;#010 Legal values: &quot;both&quot;, &quot;rows&quot;, &quot;cols&quot;, &quot;none&quot; (or false)" name="autoSelectValues" valueType="string" defaultValue="&quot;both&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:Layout.membersMargin" flags="IRW" description="Space between each member of the layout.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;reflow()&lt;/code&gt; if changed on the fly." name="membersMargin" valueType="integer" defaultValue="0" type="attr" definingClass="class:Layout">
    <examples>${isc.DocUtils.linkForExampleId('userSizing')}</examples>
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="attr:Window.dismissOnOutsideClick" flags="IRW" description="If true, a click outside the bounds of the Window will have the same effect as&amp;#010      pressing its cancel button.&lt;br&gt;&amp;#010      &lt;b&gt;Note:&lt;/b&gt; Applies only to modal windows." name="dismissOnOutsideClick" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.isModal">
</seeAlso>
    <groups>modal</groups>
</docItem>
<docItem ref="method:Canvas.moveAbove" flags="" description=" Puts this widget just above the specified widget in the stacking order, so it appears in&amp;#010 front of the specified widget if both widgets have the same parent.&amp;#010" name="moveAbove" type="method" definingClass="class:Canvas">
<params description="canvas to move above" optional="false" name="canvas" type="Canvas or subclass">
</params>
    <examples>${isc.DocUtils.linkForExampleId('layer')}</examples>
    <groups>zIndex</groups>
</docItem>
<docItem ref="attr:Canvas.animateResizeAcceleration" flags="IRWA" description="Default acceleration function for performing an animated resize.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateResizeAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:CellSelection.deselectCell" flags="" description="			Deselect a particular cell&amp;#010" name="deselectCell" type="method" definingClass="class:CellSelection">
<params description="row index of the cell to select" optional="false" name="rowNum" type="number">
</params>
<params description="column index of the cell to select" optional="false" name="colNum" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:SelectItem.valueField" description="If this form item maps data values to display values by retrieving the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property &amp;#010 denotes the the field to use as the underlying data value in records from the &amp;#010 optionDataSource.&lt;br&gt;&amp;#010 If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item." name="valueField" valueType="string" defaultValue="null" definingClass="class:SelectItem">
    <getter>FormItem.getValueFieldName</getter>
    <examples>${isc.DocUtils.linkForExampleId('relatedRecords')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="method:FormItem.setValueMap" flags="A" description=" Set the valueMap for this item.&amp;#010" name="setValueMap" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueMap">
</seeAlso>
<params description="new valueMap" optional="false" name="valueMap" type="Array or Object">
</params>
    <groups>valueMap</groups>
</docItem>
<docItem ref="attr:Layout.animateMembers" flags="IRW" description="If true when members are added / removed, they should be animated as they are shown&amp;#010 or hidden in position" name="animateMembers" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Layout">
    <examples>${isc.DocUtils.linkForExampleId('animateLayout')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="class:Page" description="Provides information about the page you're loaded in.  We define &quot;page&quot; here to be roughly&amp;#010 	equivalent to the browser window or frame the libraries have been loaded in." name="Page" type="class">
    <classAttrs>classAttr:Page.defaultUnsupportedBrowserURL</classAttrs>
    <classMethods>classMethod:Page.isLoaded</classMethods>
    <classMethods>classMethod:Page.setTitle</classMethods>
    <classMethods>classMethod:Page.getAppDir</classMethods>
    <classMethods>classMethod:Page.setAppImgDir</classMethods>
    <classMethods>classMethod:Page.getAppImgDir</classMethods>
    <classMethods>classMethod:Page.setAppFilesDir</classMethods>
    <classMethods>classMethod:Page.getAppFilesDir</classMethods>
    <classMethods>classMethod:Page.setIsomorphicDir</classMethods>
    <classMethods>classMethod:Page.getIsomorphicDir</classMethods>
    <classMethods>classMethod:Page.setSkinDir</classMethods>
    <classMethods>classMethod:Page.getSkinDir</classMethods>
    <classMethods>classMethod:Page.getSkinImgDir</classMethods>
    <classMethods>classMethod:Page.getImgURL</classMethods>
    <classMethods>classMethod:Page.getURL</classMethods>
    <classMethods>classMethod:Page.isRTL</classMethods>
    <classMethods>classMethod:Page.loadStyleSheet</classMethods>
    <classMethods>classMethod:Page.resizeTo</classMethods>
    <classMethods>classMethod:Page.moveTo</classMethods>
    <classMethods>classMethod:Page.scrollTo</classMethods>
    <classMethods>classMethod:Page.getWidth</classMethods>
    <classMethods>classMethod:Page.getHeight</classMethods>
    <classMethods>classMethod:Page.getScrollWidth</classMethods>
    <classMethods>classMethod:Page.getScrollHeight</classMethods>
    <classMethods>classMethod:Page.getScrollLeft</classMethods>
    <classMethods>classMethod:Page.getScrollTop</classMethods>
    <classMethods>classMethod:Page.getScreenWidth</classMethods>
    <classMethods>classMethod:Page.getScreenHeight</classMethods>
    <classMethods>classMethod:Page.goBack</classMethods>
    <classMethods>classMethod:Page.checkBrowserAndRedirect</classMethods>
    <classMethods>classMethod:Page.setEvent</classMethods>
    <classMethods>classMethod:Page.clearEvent</classMethods>
    <classMethods>classMethod:Page.registerKey</classMethods>
    <classMethods>classMethod:Page.unregisterKey</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="attr:StatefulCanvas.autoFit" flags="IRW" description="If true, ignore the specified size of this widget and always size just large&amp;#010 enough to accomodate the title.  If &lt;code&gt;setWidth()&lt;/code&gt; is explicitly called on an&amp;#010 autoFit:true button, autoFit will be reset to &lt;code&gt;false&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for StretchImgButton instances, autoFit will occur horizontally only, as &amp;#010 unpredictable vertical sizing is likely to distort the media. If you do want vertical &amp;#010 auto-fit, this can be achieved by simply setting a small height, and having &amp;#010 overflow:&quot;visible&quot;" name="autoFit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <setter>setAutoFit</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:ImgButton.iconSpacing" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="iconSpacing" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:HiddenItem.showTitle" flags="IRW" description="we never show a separate title cell for hidden fields" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:HiddenItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setHtmlPosition" flags="" description=" Setter for the ${isc.DocUtils.linkForRef('attr:Canvas.htmlPosition')}.&amp;#010" name="setHtmlPosition" type="method" definingClass="class:Canvas">
<params description="New htmlPosition for this canvas" optional="false" name="element" type="DrawPosition">
</params>
    <groups>htmlElement</groups>
</docItem>
<docItem ref="attr:TreeGrid.treeFieldTitle" flags="IR" description="Visible title for the tree column (field)." name="treeFieldTitle" valueType="string" defaultValue="&quot;Name&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeField</groups>
</docItem>
<docItem ref="method:ImgButton.setBaseStyle" flags="" description=" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010" name="setBaseStyle" type="method" definingClass="class:ImgButton">
<params description="new base style" optional="false" name="style" type="className">
</params>
</docItem>
<docItem ref="attr:OperationBinding.serverMethod" flags="IR" description="The name of the method to invoke on the ${isc.DocUtils.linkForRef('class:ServerObject')} for this operationBinding." name="serverMethod" valueType="string" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ListGrid.groupTree" flags="R" description="The data tree that results from a call to  ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')}.&amp;#010 This will be a ${isc.DocUtils.linkForRef('class:ResultTree')} if ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is&amp;#010 present, otherwise it will be a ${isc.DocUtils.linkForRef('class:Tree')}." name="groupTree" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="classAttr:RPCManager.saveDataPrompt" flags="IRW" description="Default prompt displayed to the user while an opreration is running to save data to&amp;#010 the server.&lt;br&gt;&amp;#010 Displayed as a result of the ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} code path." name="saveDataPrompt" valueType="string" defaultValue="&quot;Saving form...&quot;" type="classAttr" definingClass="class:RPCManager">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Scrollbar.showTrackEnds" flags="IRWA" description="If true, displays track start and end segments." name="showTrackEnds" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Scrollbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:SelectItem.showFocused" flags="IRWA" description="When this item recieves focus, should it be re-styled to indicate it has focus?" name="showFocused" valueType="boolean" defaultValue="true, [IRWA]" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.reorderFields" flags="A" description=" Reorder a set of adjacent fields, from start to end exclusive at the end, by distance&amp;#010 moveDelta.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: start and end coordinates are in terms of the currently visible fields, not the full set of&amp;#010 fields.&amp;#010&amp;#010" name="reorderFields" type="method" definingClass="class:ListGrid">
<params description="Start of the range of fields to move, inclusive" optional="false" name="start" type="number">
</params>
<params description="End of the range of fields to move, non-inclusive" optional="false" name="end" type="number">
</params>
<params description="Distance to move by" optional="false" name="moveDelta" type="number">
</params>
</docItem>
<docItem ref="attr:TreeGrid.animateFolders" flags="IRW" description="If true, when folders are opened / closed children will be animated into view." name="animateFolders" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('animateTree')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ListGridRecord.singleCellValue" flags="IRW" description="Default property name denoting the single value to display for all fields of this row.&amp;#010 If this property is set for some record, the record will be displayed as a single &amp;#010 cell spanning every column in the grid, with contents set to the value of this&amp;#010 property.&lt;br&gt;&amp;#010 Note: this attribute name is governed by ${isc.DocUtils.linkForRef('attr:ListGrid.singleCellValueProperty')}." name="singleCellValue" valueType="HTML" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
</docItem>
<docItem ref="classAttr:Time.shortDisplayFormat" flags="RWA" description="Standard formatter to be used when converting a date to a time-string via ${isc.DocUtils.linkForRef('classMethod:Time.toShortTime')}" name="shortDisplayFormat" valueType="timeFormatter|function" defaultValue="&quot;toShortTime&quot;" type="classAttr" definingClass="class:Time">
    <setter>setShortDisplayFormat</setter>
</docItem>
<docItem ref="method:TabSet.getTabObject" flags="" description=" Get the tab Object originally passed to ${isc.DocUtils.linkForRef('attr:TabSet.tabs')}, by index or ID.&amp;#010 If passed a tab Object, just returns it.&amp;#010&amp;#010" name="getTabObject" type="method" definingClass="class:TabSet">
<params optional="false" name="tab" type="int | ID | Tab">
</params>
<returns description="the tab, or null if not found" type="Tab"></returns>
</docItem>
<docItem ref="attr:DSResponse.clientContext" flags="R" description="The ${isc.DocUtils.linkForRef('attr:DSRequest.clientContext')} object as set on the ${isc.DocUtils.linkForRef('class:DSRequest')}." name="clientContext" valueType="Object" defaultValue="null" type="attr" definingClass="class:DSResponse">
<seeAlso ref="attr:DSRequest.clientContext">
</seeAlso>
<seeAlso ref="attr:RPCResponse.clientContext">
</seeAlso>
</docItem>
<docItem ref="method:ListGridField.formatEditorValue" flags="" description=" Return the value to display in cells of this field which are being edited.&amp;#010 &lt;P&gt;&amp;#010 &lt;i&gt;Example usage&lt;/i&gt;: converting a stored value in cents (100) to a dollar-and-cents &amp;#010 value in the editor (1.00)&amp;#010 &lt;P&gt;&amp;#010 The value passed to this method is the raw value for the cell.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;formatEditorValue&lt;/code&gt; takes precedence over ${isc.DocUtils.linkForRef('method:ListGrid.formatEditorValue')}&amp;#010 defined at the grid level for cells in this field.&amp;#010 &lt;P&gt;&amp;#010 To convert the formatted value displayed within an editor back to a raw value, implement&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.parseEditorValue')} as well.&amp;#010&amp;#010" name="formatEditorValue" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGridField.formatCellValue">
</seeAlso>
<seeAlso ref="method:ListGrid.formatEditorValue">
</seeAlso>
<seeAlso ref="method:ListGridField.parseEditorValue">
</seeAlso>
<params description="raw value for the cell being edited" optional="false" name="value" type="any">
</params>
<params description="Record object for the cell. Note: If this is a new row that has not been saved, in an &amp;#010   editable grid, it has no associated record object. In this case the edit values will&amp;#010   be passed in as this parameter." optional="false" name="record" type="ListGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<params description="A pointer to the ListGrid displaying the cell" optional="false" name="grid" type="ListGrid instance">
</params>
<returns description="formatted value to display in the editor" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:CubeGrid.facetLabelOver" flags="" description="    StringMethod handler fired when mouseover occurs over a facet label&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetLabelOver" type="method" definingClass="class:CubeGrid">
<params description="ID of the appropriate facet" optional="false" name="facetId" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Label.iconSize" flags="IR" description="Size in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;iconWidth&lt;/code&gt; and &lt;code&gt;iconHeight&lt;/code&gt; properties can be used to&amp;#010 configure width and height separately." name="iconSize" valueType="integer" defaultValue="16" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DetailViewerField.valueMap" flags="IR" description="A property list (or an expression that evaluates to a property list)&amp;#010 specifying a mapping of internal values to display values for the field (row)." name="valueMap" valueType="object" defaultValue="null" type="attr" definingClass="object:DetailViewerField">
</docItem>
<docItem ref="attr:FacetValue.canCollapse" flags="IR" description="For individual parent facetValues within a hierarchical facet, this flag controls&amp;#010 whether an expand/collapse control will be shown." name="canCollapse" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="method:CubeGrid.deselectCell" flags="" description="&amp;#010  deselect a single cell - accepts cell ID or cell record.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectCell" type="method" definingClass="class:CubeGrid">
<params description="cell to deselect" optional="false" name="cell" type="ID | object">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ViewLoader.viewURL" flags="IR" description="URL to load components from." name="viewURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:ViewLoader">
    <setter>setViewURL</setter>
    <examples>${isc.DocUtils.linkForExampleId('viewLoading')}</examples>
</docItem>
<docItem ref="method:DataSource.updateData" flags="" description=" Perform an &quot;update&quot; DataSource operation against this DataSource, to update values in an&amp;#010 existing DataSource record.&amp;#010&amp;#010" name="updateData" type="method" definingClass="class:DataSource">
<params description="updated record" optional="false" name="updatedRecord" type="Object">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on                                                       the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="method:Canvas.moveBelow" flags="" description=" Puts this widget just below the specified widget in the stacking order, so it appears&amp;#010 behind the specified widget if both widgets have the same parent.&amp;#010" name="moveBelow" type="method" definingClass="class:Canvas">
<params description="canvas to move below" optional="false" name="canvas" type="Canvas or subclass">
</params>
    <examples>${isc.DocUtils.linkForExampleId('layer')}</examples>
    <groups>zIndex</groups>
</docItem>
<docItem ref="attr:Applet.altHTML" flags="IR" description="This text is displayed if the browser does not understand the tag used for the applet html&amp;#010  element." name="altHTML" valueType="HTML" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.alt">
</seeAlso>
<seeAlso ref="attr:Applet.useTag">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.discardEditsSaveButtonTitle" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.confirmDiscardEdits')} is true this is the title for the save button&amp;#010 appearing in the lost edits confirmation dialog. Override this for localization if necessary." name="discardEditsSaveButtonTitle" valueType="string" defaultValue="&quot;Save&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ViewLoader.viewURLParams" flags="IR" description="Parameters to be sent to the viewURL when fetching the view." name="viewURLParams" valueType="Object" defaultValue="null" type="attr" definingClass="class:ViewLoader">
</docItem>
<docItem ref="classMethod:Log.traceMethod" flags="" description="&amp;#010  Observe a method on an object, logging a stack trace whenever the method is called.&amp;#010  &lt;P&gt;&amp;#010  Call a second time with identical arguments to disable tracing.&amp;#010&amp;#010" name="traceMethod" type="classMethod" definingClass="class:Log">
<params description="object to observe" optional="false" name="object" type="object">
</params>
<params description="name of the method to observe" optional="false" name="methodName" type="string">
</params>
    <groups>debug</groups>
</docItem>
<docItem ref="attr:Canvas.showEdges" flags="IR" description="Whether an ${isc.DocUtils.linkForRef('class:EdgedCanvas')} should be used to show image-based edges around this&amp;#010 component." name="showEdges" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('edges')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:DynamicForm.submit" flags="" description=" &lt;code&gt;submit()&lt;/code&gt; is automatically called when a ${isc.DocUtils.linkForRef('class:SubmitItem')} included in the&amp;#010 form is clicked, or, if ${isc.DocUtils.linkForRef('attr:DynamicForm.saveOnEnter','saveOnEnter')} is set, when the&amp;#010 &quot;Enter&quot; key is pressed in a text input.  Submit can also be manually called.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('method:DynamicForm.submitValues','form.submitValues()')} exists, it will be called, then&amp;#010 immediately return.&amp;#010 &lt;P&gt;&amp;#010 Otherwise, default behavior varies based on ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit','form.canSubmit')}: if&amp;#010 &lt;code&gt;canSubmit&lt;/code&gt; is false, ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will be called to&amp;#010 handle saving via SmartClient databinding.  &amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;canSubmit&lt;/code&gt; is true, the form will be submitted like an ordinary HTML&amp;#010 form via ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')}.&amp;#010 &lt;P&gt;&amp;#010 The parameters to &lt;code&gt;submit()&lt;/code&gt; apply only if &lt;code&gt;submit()&lt;/code&gt; will be&amp;#010 calling ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')}.  If you override &lt;code&gt;submit()&lt;/code&gt;, you can safely&amp;#010 ignore the parameters as SmartClient framework code does not pass them.&amp;#010 &amp;#010" name="submit" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.submitValues">
</seeAlso>
<params description="callback to invoke on completion.                                          [Ignored if this.canSubmit is true]" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued&amp;#010                                          [Ignored if this.canSubmit is true]" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:RichTextEditor.setValue" flags="" description="  Updates the current value of the edit area.&amp;#010" name="setValue" type="method" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="class:SelectItem" description="FormItem that allows picking between several mutually exclusive options via a select list.&amp;#010 &lt;P&gt;&amp;#010 Options may be derived from a &lt;code&gt;dataSource&lt;/code&gt; or a &lt;code&gt;valueMap&lt;/code&gt;&amp;#010 &lt;P&gt;&amp;#010 Note that to select the first option as a default value for the item,&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} may be set." name="SelectItem" type="class">
    <methods>method:SelectItem.defaultDynamicValue</methods>
    <methods>method:SelectItem.showPicker</methods>
    <methods>method:SelectItem.fetchData</methods>
    <methods>method:SelectItem.getDisplayFieldName</methods>
    <methods>method:SelectItem.getValueFieldName</methods>
    <methods>method:SelectItem.dataArrived</methods>
    <methods>method:SelectItem.getSelectedRecord</methods>
    <attrs>attr:SelectItem.height</attrs>
    <attrs>attr:SelectItem.addUnknownValues</attrs>
    <attrs>attr:SelectItem.defaultValue</attrs>
    <attrs>attr:SelectItem.defaultToFirstOption</attrs>
    <attrs>attr:SelectItem.showPickerIcon</attrs>
    <attrs>attr:SelectItem.textBoxStyle</attrs>
    <attrs>attr:SelectItem.controlStyle</attrs>
    <attrs>attr:SelectItem.pickerIconStyle</attrs>
    <attrs>attr:SelectItem.showFocused</attrs>
    <attrs>attr:SelectItem.pickerIconWidth</attrs>
    <attrs>attr:SelectItem.pickerIconHeight</attrs>
    <attrs>attr:SelectItem.pickerIconSrc</attrs>
    <attrs>attr:SelectItem.pickerIconProperties</attrs>
    <attrs>attr:SelectItem.hiliteOnFocus</attrs>
    <attrs>attr:SelectItem.hiliteColor</attrs>
    <attrs>attr:SelectItem.hiliteTextColor</attrs>
    <attrs>attr:SelectItem.pickButtonWidth</attrs>
    <attrs>attr:SelectItem.pickButtonHeight</attrs>
    <attrs>attr:SelectItem.pickButtonSrc</attrs>
    <attrs>attr:SelectItem.showOver</attrs>
    <attrs>attr:SelectItem.allowEmptyValue</attrs>
    <attrs>attr:SelectItem.autoFetchData</attrs>
    <attrs>attr:SelectItem.optionDataSource</attrs>
    <attrs>attr:SelectItem.pickListFields</attrs>
    <attrs>attr:SelectItem.optionFilterContext</attrs>
    <attrs>attr:SelectItem.displayField</attrs>
    <attrs>attr:SelectItem.valueField</attrs>
    <attrs>attr:SelectItem.filterLocally</attrs>
    <attrs>attr:SelectItem.pickListCriteria</attrs>
    <attrs>attr:SelectItem.showOptionsFromDataSource</attrs>
    <attrs>attr:SelectItem.pickListProperties</attrs>
    <attrs>attr:SelectItem.multiple</attrs>
    <implementsInterfaces>PickList</implementsInterfaces>
<seeAlso ref="attr:PickList.optionDataSource">
</seeAlso>
<seeAlso ref="attr:FormItem.valueMap">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('selectItem')}</examples>
</docItem>
<docItem ref="group:dragTracker" name="dragTracker" type="group">
    <refs>method:ListGrid.setDragTracker</refs>
    <refs>method:ListGrid.getDragTrackerIcon</refs>
    <refs>method:ListGrid.getDragTrackerTitle</refs>
    <refs>method:TreeGrid.getDragTrackerIcon</refs>
    <refs>classMethod:EventHandler.setDragTracker</refs>
    <refs>attr:ListGrid.dragTrackerMode</refs>
    <refs>attr:ListGrid.trackerImage</refs>
    <refs>type:DragTrackerMode</refs>
</docItem>
<docItem ref="attr:StretchImgButton.iconHeight" flags="IR" description="Height in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Layout.enforcePolicy" flags="IRWA" description="Whether the layout policy is continuously enforced as new members are added or removed&amp;#010 and as members are resized.&amp;#010 &lt;p&gt;&amp;#010 This setting implies that any member that resizes larger, or any added member, will take&amp;#010 space from other members in order to allow the overall layout to stay the same size." name="enforcePolicy" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="method:DataSource.removeData" flags="" description=" Perform a &quot;remove&quot; DataSource operation against this DataSource, to delete an existing&amp;#010 DataSource record.&amp;#010&amp;#010" name="removeData" type="method" definingClass="class:DataSource">
<params description="primary key values of record to delete,                                             (or complete record)" optional="false" name="data" type="Object">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on                                                       the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:Dialog.styleName" flags="IRW" description="Style of the Dialog background" name="styleName" valueType="CSSStyleName" defaultValue="&quot;dialogBackground&quot;" type="attr" definingClass="class:Dialog">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.cellStyle" flags="IRW" description="CSS style applied to the form item as a whole, including the text element, any icons, and&amp;#010 any hint text for the item. Applied to the cell containing the form item.&amp;#010 &lt;P&gt;&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="cellStyle" valueType="FormItemBaseStyle" defaultValue="&quot;formCell&quot;" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Tab.icon" flags="IRW" description="If specified, this tab will show an icon next to the tab title.  Note that as with &amp;#010 ${isc.DocUtils.linkForRef('attr:Button.icon')}, the URL of a tabs icon will be updated to reflect disabled state.&lt;br&gt;&amp;#010 If desired a click handler may be assigned to the icon, which will be fired when the user&amp;#010 clicks the tab. This method takes a single parameter &lt;code&gt;tab&lt;/code&gt;, a pointer to the tab&amp;#010 object." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="object:Tab">
<seeAlso ref="method:TabSet.tabIconClick">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('tabsOrientation')}</examples>
</docItem>
<docItem ref="attr:TextItem.height" flags="IRW" description="Default height for text items." name="height" valueType="number" defaultValue="19" type="attr" definingClass="class:TextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:MenuItem.dynamicIcon" flags="IR" description="A string of script that is evaluated to a string value for the item's icon property&amp;#010 whenever the menu is shown or a shortcut key is pressed.&amp;#010 &lt;p&gt;&amp;#010 If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.icon')} instead." name="dynamicIcon" valueType="expression" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('menuDynamicItems')}</examples>
    <groups>dynamicMenuItem</groups>
</docItem>
<docItem ref="attr:Slider.animateThumbInit" flags="IRW" description="If thumb animation is enabled, should the thumb be animated to its initial value?" name="animateThumbInit" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Slider">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:RestDataSource.metaDataPrefix" flags="IR" description="I ${isc.DocUtils.linkForRef('attr:RestDataSource.sendMetaData')} is true, this attribute is used to specify&amp;#010 the prefix to apply to 'meta data' properties when assembling parameters to send to the &amp;#010 server.  Applies to operations where OperationBinding.dataProtocol is set to &amp;#010 &lt;code&gt;&quot;getParams&quot;&lt;/code&gt; or &lt;code&gt;&quot;postParams&quot;&lt;/code&gt; only." name="metaDataPrefix" valueType="string" defaultValue="&quot;_&quot;" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="method:ListGrid.filterByEditor" flags="" description=" If the filter editor (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')}) is visible for this grid, &amp;#010 this method will perform a filter based on the current values in the editor.&amp;#010" name="filterByEditor" type="method" definingClass="class:ListGrid">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:ListGridField.validateOnChange" flags="IRW" description="If set to true, any ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} for this field will be run whenever&amp;#010 the value of the field is edited.&lt;br&gt;&amp;#010 Analgous to the ${isc.DocUtils.linkForRef('attr:FormItem.validateOnChange')} property." name="validateOnChange" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:HiddenItem.rowSpan" flags="IRW" description="hidden fields don't take up any rows" name="rowSpan" valueType="number" defaultValue="0" type="attr" definingClass="class:HiddenItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:CubeGrid.facetValueHoverHTML" flags="" description="&amp;#010      Get the HTML for the facetValue button hover.  Default implementation returns null.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; callback&amp;#010" name="facetValueHoverHTML" type="method" definingClass="class:CubeGrid">
<params description="facetValues object for the button" optional="false" name="facetValues" type="facetValues object">
</params>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:Tree.hasChildren" flags="" description="&amp;#010 Returns true if this node has any children.&amp;#010&amp;#010" name="hasChildren" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node has children" type="boolean"></returns>
</docItem>
<docItem ref="method:TreeGrid.setOpenState" flags="" description=" Reset this set of open folders within this grid's data to match the &amp;#010 ${isc.DocUtils.linkForRef('type:treeGridOpenState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to &amp;#010 ${isc.DocUtils.linkForRef('method:TreeGrid.getOpenState')}.&amp;#010&amp;#010" name="setOpenState" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.getOpenState">
</seeAlso>
<params description="Object describing the desired set of open folders." optional="false" name="openState" type="treeGridOpenState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:Canvas.dynamicContents" flags="IRWA" description="Dynamic contents allows the contents string to be treated as a simple, but powerful&amp;#010 template.  When this attribute is set to true, expressions of the form \${arbitrary JS&amp;#010 here} are replaced by the result of the evaluation of the JS code inside the curly&amp;#010 brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation&amp;#010 of the expressions in the contents string you can call markForRedraw() on the canvas.&amp;#010 &lt;p&gt;&amp;#010 You can use this feature to build some simple custom components. For example, let's say&amp;#010 you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do&amp;#010 this by observing the valueChanged() method on the slider and calling setContents() on&amp;#010 your canvas with the new string or you can set the contents of the canvas to something&amp;#010 like:&amp;#010 &lt;p&gt;&lt;code&gt;&amp;#010 &quot;The slider value is \${sliderInstance.getValue()}.&quot;&amp;#010 &lt;/code&gt;&lt;p&gt;&amp;#010 Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider&amp;#010 and call canvas.markForRedraw() in that observation.  This approach is cleaner than&amp;#010 setContents() when the Canvas is aggregating several values or dynamic expressions.&amp;#010 Like so:&amp;#010 &lt;p&gt;&amp;#010 &lt;pre&gt;&amp;#010 Slider.create({&amp;#010     ID: &quot;mySlider&quot;&amp;#010 });&amp;#010&amp;#010 Canvas.create({&amp;#010     ID: &quot;myCanvas&quot;,&amp;#010     dynamicContents: true,&amp;#010     contents: &quot;The slider value is \${mySlider.getValue()}.&quot;&amp;#010 });&amp;#010     &amp;#010 myCanvas.observe(mySlider, &quot;valueChanged&quot;, &amp;#010                  &quot;observer.markForRedraw()&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 You can embed an arbitrary number of dynamic expressions in the contents string.  The&amp;#010 search and replace is optimized for speed.&amp;#010 &lt;p&gt;&amp;#010 If an error occurs during the evaluation of one of the expressions, a warning is logged&amp;#010 to the ISC Developer Console and the error string is embedded in place of the expected&amp;#010 value in the Canvas.&amp;#010 &lt;p&gt;&amp;#010 The value of a function is its return value.  The value of any variable is the same as&amp;#010 that returned by its toString() representation.&amp;#010 &lt;p&gt;&amp;#010 Inside the evalution contentext, &lt;code&gt;this&lt;/code&gt; points to the canvas instance that&amp;#010 has the dynamicContents string as its contents - in other words the canvas instance on&amp;#010 which the template is declared." name="dynamicContents" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.contents">
</seeAlso>
<seeAlso ref="attr:Canvas.dynamicContentsVars">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dynamicContents')}</examples>
    <groups>contents</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:ListGrid.bodyOverflow" description="Overflow setting for the &quot;body&quot;, that is, the area of the grid where data values are&amp;#010 rendered.&amp;#010 &lt;P&gt;&amp;#010 By setting both the grid itself and the body to overflow:visible, it is possible to&amp;#010 &quot;auto-fit&quot; to the rendered height or width of the rows.  Note that in this case&amp;#010 &lt;code&gt;grid.width&lt;/code&gt; and &lt;code&gt;grid.height&lt;/code&gt; act as minimums." name="bodyOverflow" valueType="Overflow" defaultValue="Canvas.AUTO" definingClass="class:ListGrid">
    <setter>setBodyOverflow</setter>
    <examples>${isc.DocUtils.linkForExampleId('autofitRows')}</examples>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:Chart.data" flags="IR" description="Dataset for this chart.&amp;#010 &lt;P&gt;&amp;#010 Two basic formats are supported:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &quot;Standard model&quot;: &lt;code&gt;data&lt;/code&gt; is an array of CellRecords where each record&amp;#010 contains one data value.  Each record also contains a property named after each facetId&amp;#010 whose value is a facetValueId from that facet.&amp;#010 &lt;p&gt;&amp;#010 For example, with a facet with id &quot;regions&quot; and facetValues &quot;west&quot;, &quot;north&quot; and &quot;east&quot;, and&amp;#010 with ${isc.DocUtils.linkForRef('attr:Chart.valueProperty')} with it's default value &quot;_value&quot;, the &lt;code&gt;data&lt;/code&gt; property&amp;#010 could be:&amp;#010 &lt;pre&gt;&amp;#010    isc.Chart.create({&amp;#010       facets:[{ id:&quot;regions&quot; }],&amp;#010       data : [&amp;#010          {regions:&quot;west&quot;, _value:4},&amp;#010          {regions:&quot;north&quot;, _value:2},&amp;#010          {regions:&quot;east&quot;, _value:5}&amp;#010       ]&amp;#010    })&lt;/pre&gt;&amp;#010 If there were a second facet with id &quot;product&quot; and facetValues &quot;cars&quot; and &quot;trucks&quot;, a Chart&amp;#010 with a complete set of values would be:&amp;#010 &lt;pre&gt;&amp;#010    isc.Chart.create({&amp;#010       facets:[{ id:&quot;regions&quot; }, { id:&quot;product&quot; }],&amp;#010       data : [&amp;#010          {product:&quot;cars&quot;, regions:&quot;west&quot;, _value:4},&amp;#010          {product:&quot;cars&quot;, regions:&quot;north&quot;, _value:2},&amp;#010          {product:&quot;cars&quot;, regions:&quot;east&quot;, _value:5},&amp;#010          {product:&quot;trucks&quot;, regions:&quot;west&quot;, _value:1},&amp;#010          {product:&quot;trucks&quot;, regions:&quot;north&quot;, _value:9},&amp;#010          {product:&quot;trucks&quot;, regions:&quot;east&quot;, _value:3}&amp;#010       ]&amp;#010    })&lt;/pre&gt;&amp;#010 This 2 facet (or &quot;2 dimensional&quot;) dataset, if rendered as a bar chart, would use stacked or&amp;#010 clustered bars and a legend.&amp;#010 &lt;P&gt;&amp;#010&amp;#010 &lt;li&gt; &quot;Inlined facet&quot;: &lt;code&gt;data&lt;/code&gt; is a single CellRecord or Array of CellRecords where&amp;#010 each record contains multiple data values.  In this case, one facet definition is considered&amp;#010 &quot;inlined&quot;, meaning that the facetValueIds from this facet appear as properties in each&amp;#010 record, and each such property holds one data value.  For example, a complete chart&amp;#010 definition whose dataset is equivalent to the previous example would be:&amp;#010 &lt;pre&gt;&amp;#010    isc.Chart.create({&amp;#010       facets: [{ &amp;#010          inlinedValues:true,&amp;#010          values : [ { id:&quot;west&quot; }, { id:&quot;north&quot; }, { id : &quot;east&quot; } ]&amp;#010       }],&amp;#010       data : { west:4, north:5, east:2 }&amp;#010    })&lt;/pre&gt;&amp;#010 Note that the property &quot;inlinedValues&quot; must be set on the facet definition, and the set of&amp;#010 facetValueIds must be specified outside of the data array (with the &quot;standard model&quot;,&amp;#010 facetValueIds can be automatically derived from the data).  &amp;#010 &lt;P&gt;&amp;#010 A two facet chart with an inlined facet can be defined as follows:&amp;#010 &lt;pre&gt;&amp;#010    isc.Chart.create({&amp;#010       facets: [&amp;#010         { &amp;#010            inlinedValues:true,&amp;#010            values : [ { id:&quot;west&quot; }, { id:&quot;north&quot; }, { id : &quot;east&quot; } ]&amp;#010         }, &amp;#010         { id:&quot;product&quot; }&amp;#010       ],&amp;#010       data : [&amp;#010           { product:&quot;cars&quot;, west:4, north:5, east:2 },&amp;#010           { product:&quot;trucks&quot;, west:1, north:9, east:3 }&amp;#010       ]&amp;#010    })&lt;/pre&gt;&amp;#010 &lt;/ul&gt;&amp;#010 Comparing between the formats, the &quot;standard model&quot; format treats all facets identically,&amp;#010 which can be of use when integrating with server technology that likewise treats all facets&amp;#010 identically.  The &quot;inlined facet&quot; format is a more compact data representation and allows&amp;#010 easier conversion from data displayed in a ListGrid." name="data" valueType="Array of CellRecord or CellRecord" defaultValue="null" type="attr" definingClass="interface:Chart">
    <setter>setData</setter>
</docItem>
<docItem ref="attr:ListGridField.valueIconHeight" flags="IRW" description="Height for value icons for this listGrid field.&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}, ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconHeight')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}." name="valueIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="classAttr:RPCManager.promptStyle" flags="IRW" description="Controls the default prompt style.  Overrideable by ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')}." name="promptStyle" valueType="PromptStyle" defaultValue="&quot;dialog&quot;" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="attr:RPCRequest.promptStyle">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="method:Class.addPropertyList" flags="" description="&amp;#010	Add properties to this instance.&amp;#010&amp;#010" name="addPropertyList" type="method" definingClass="class:Class">
<params description="listarray of objects with properties to add" optional="true" name="" type="object">
</params>
<returns description="the object after properties have been added to it" type="object"></returns>
</docItem>
<docItem ref="attr:ImgButton.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Window.footerHeight" flags="IR" description="The height of the footer, in pixels." name="footerHeight" valueType="number" defaultValue="18" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>footer</groups>
</docItem>
<docItem ref="attr:ImgButton.radioGroup" flags="IRWA" description="String identifier for this canvas's mutually exclusive selection group." name="radioGroup" valueType="string" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <examples>${isc.DocUtils.linkForExampleId('buttonRadioToggle')}</examples>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:PickList.fetchData" flags="" description=" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).&lt;br&gt;&amp;#010 Performs a fetch type operation on this item's DataSource to retrieve the set of valid&amp;#010 options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.&amp;#010" name="fetchData" type="method" definingClass="interface:PickList">
<params description="Callback to fire when the fetch completes. Callback will               fire with 2 parameters: &lt;code&gt;item&lt;/code&gt; a pointer to the form item and&amp;#010              &lt;code&gt;dsResponse&lt;/code&gt; the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server." optional="false" name="callback" type="callback">
</params>
<params description="properties to apply to the              dsRequest for this fetch." optional="false" name="requestProperties" type="dsRequest properties">
</params>
</docItem>
<docItem ref="attr:Slider.labelWidth" flags="IRW" description="The width of the labels used to display the minimum, maximum and current values of the&amp;#010 slider." name="labelWidth" valueType="integer" defaultValue="50" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="method:DynamicForm.getFields" flags="" description=" Method to retrieve the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. &amp;#010&amp;#010" name="getFields" type="method" definingClass="class:DynamicForm">
<params description="list of new items to show in the form" optional="false" name="itemList" type="Array of objects">
</params>
    <groups>elements</groups>
</docItem>
<docItem ref="method:Tree.getPath" flags="" description="&amp;#010 Returns the path of a node - a path has the following format:&amp;#010 &lt;code&gt;([name][pathDelim]?)*&lt;/code&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For example, in this tree:&amp;#010 &lt;pre&gt;&amp;#010 root&amp;#010   foo&amp;#010     bar&amp;#010 &lt;/pre&gt;&amp;#010 Assuming that ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} is the default &lt;code&gt;/&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt;&amp;#010 node would have the path &lt;code&gt;root/foo/bar&lt;/code&gt; and the path for the &lt;code&gt;foo&lt;/code&gt;&amp;#010 node would be &lt;code&gt;root/foo&lt;/code&gt;.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Once you have a path to a node, you can call find(path) to retrieve a reference to the node&amp;#010 later.&amp;#010&amp;#010" name="getPath" type="method" definingClass="class:Tree">
<seeAlso ref="method:Tree.getParentPath">
</seeAlso>
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="path to the node" type="string"></returns>
</docItem>
<docItem ref="attr:Slider.vertical" flags="IRW" description="Indicates whether this is a vertical or horizontal slider." name="vertical" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="attr:Window.showHeaderBackground" flags="IRA" description="Should the window header show a background image? Default value is true for all browsers&amp;#010 except for Internet Explorer.&lt;br&gt;&amp;#010 If set to true the image source is derived from ${isc.DocUtils.linkForRef('attr:Window.headerSrc')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:Window.hiliteHeaderSrc')}, otherwise the background will be styled according to &amp;#010 ${isc.DocUtils.linkForRef('attr:Window.headerStyle')} / ${isc.DocUtils.linkForRef('attr:Window.hiliteHeaderStyle')}." name="showHeaderBackground" valueType="boolean" defaultValue="varies" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:DynamicForm.minColWidth" flags="IRW" description="Minimum width of a form column." name="minColWidth" valueType="number" defaultValue="20" type="attr" definingClass="class:DynamicForm">
    <groups>tableLayout</groups>
</docItem>
<docItem ref="attr:CubeGrid.hideEmptyFacetValues" flags="IRW" description="This causes the headers for any combination of facetValues for which there are no &amp;#010  cellRecords to be suppressed.&amp;#010  (Note: Valid only for CubeGrids that specify the complete dataset upfront - &amp;#010   don't use load on demand)" name="hideEmptyFacetValues" valueType="boolean" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>facetLayout</groups>
</docItem>
<docItem ref="class:SpacerItem" description="A SpacerItem takes up a single cell in the FormLayout, of arbitrary size." name="SpacerItem" type="class">
    <attrs>attr:SpacerItem.showTitle</attrs>
    <attrs>attr:SpacerItem.width</attrs>
    <attrs>attr:SpacerItem.height</attrs>
</docItem>
<docItem ref="attr:FormItem.valueIconRightPadding" flags="IRW" description="If we're showing a value icon, this attribute governs the amount of space between the &amp;#010 icon and the label of the form item" name="valueIconRightPadding" valueType="number" defaultValue="3" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueIcons">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:Canvas.canDrag" flags="IRWA" description="Indicates whether this widget can initiate custom drag-and-drop operations (other than&amp;#010      reposition or resize). Normally canDragReposition or canDragResize would be used&amp;#010      instead of this property.&amp;#010      Note: this property may be manipulated by higher-level dragging semantics." name="canDrag" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="type:DateDisplayFormat" description="Valid display formats for dates.  These strings are the names of formatters which can be &amp;#010 passed to &lt;code&gt;Date.setNormalDisplayFormat()&lt;/code&gt; or &lt;code&gt;Date.setShortDisplayFormat()&lt;/code&gt;&amp;#010 and will be subsequently used as default long or short formatters for date objects by&amp;#010 SmartClient components.&lt;br&gt;&amp;#010 Default set of valid display formats is as follows:&lt;br&gt;&lt;br&gt;" name="DateDisplayFormat" type="type">
<values description="Default native browser 'toString()' implementation. May vary by browser.&lt;br&gt;&amp;#010 &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;Fri Nov 04 2005 11:03:00 GMT-0800 (Pacific Standard Time)&lt;/code&gt;" value="toString"></values>
<values description="Default native browser 'toLocaleString()' implementation. May vary by browser.&amp;#010 &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;Friday, November 04, 2005 11:03:00 AM&lt;/code&gt;" value="toLocaleString"></values>
<values description="Short date in format MM/DD/YYYY.&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;11/4/2005&lt;/code&gt;" value="toUSShortDate"></values>
<values description="Short date with time in format MM/DD/YYYY HH:MM&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;11/4/2005 11:03&lt;/code&gt;" value="toUSShortDateTime"></values>
<values description="Short date in format DD/MM/YYYY.&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;4/11/2005&lt;/code&gt;" value="toEuropeanShortDate"></values>
<values description="Short date with time in format DD/MM/YYYY HH:MM&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;4/11/2005 11:03&lt;/code&gt;" value="toEuropeanShortDateTime"></values>
<values description="Short date in format YYYY/MM/DD.&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;2005/11/4&lt;/code&gt;" value="toJapanShortDate"></values>
<values description="Short date with time in format YYYY/MM/DD HH:MM&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;2005/11/4 11:03&lt;/code&gt;" value="toJapanShortDateTime"></values>
<values description="Date in the format YYYY-MM-DD HH:MM:SS&lt;br&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;2005-11-04 11:09:15&lt;/code&gt;" value="toSerializeableDate"></values>
<values description="Date in the format &amp;lt;YYYYMMDD&amp;gt;T&amp;lt;HHMMSS&amp;gt;Z &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;20051104T111001Z&lt;/code&gt;&amp;#010 &lt;br&gt;&amp;#010 &lt;br&gt;&amp;#010 Note: In addition to these standard formats, custom formatting can be set by passing&amp;#010 a function directly to ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')} et al. This &amp;#010 function will then be executed whenever the appropriate formatter method is called [eg &amp;#010 ${isc.DocUtils.linkForRef('method:Date.toNormalDate')}], in the scope of the date instance in question." value="toDateStamp"></values>
</docItem>
<docItem ref="method:Progressbar.setBreadth" flags="" description=" Sets the breadth of the progressbar to newLength. This is the height of a horizontal progressbar,&amp;#010 or the width of a vertical progressbar.&amp;#010&amp;#010" name="setBreadth" type="method" definingClass="class:Progressbar">
<params description="the new breadth of the progressbar" optional="false" name="newBreadth" type="number">
</params>
</docItem>
<docItem ref="attr:ListGridField.imageURLPrefix" flags="IRWA" description="If this field has type [${isc.DocUtils.linkForRef('type:ListGridFieldType')}] set to &lt;code&gt;&quot;image&quot;&lt;/code&gt;&amp;#010 and the URL for the image displayed is not absolute, the path of the URL will be relative &amp;#010 to this string&lt;br&gt;&amp;#010 Alternatively, if this field displays any valueIcons, this prefix will be applied to&amp;#010 the beginning of any ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')} when determining the&amp;#010 URL for the image." name="imageURLPrefix" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <examples>${isc.DocUtils.linkForExampleId('imageType')}</examples>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:Menu.itemClick" flags="A" description="          Executed when a menu item with no click handler is clicked by the user. This&amp;#010          itemClick handler must be specified as a function. It is passed an item parameter that&amp;#010          is a reference to the clicked menu item.&amp;#010&amp;#010" name="itemClick" type="method" definingClass="class:Menu">
<params description="pointer to the item in question" optional="false" name="item" type="object">
</params>
<params description="Index of the column clicked by the user. May be null if                                  this menu item was activated in response to a keyboard event." optional="true" name="colNum" type="number">
</params>
<returns description="false if event processing should be stopped, true to continue" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('menuColumns')}</examples>
</docItem>
<docItem ref="class:SchemaSet" description="A set of schema derived from the &amp;lt;xsd:schema&amp;gt; element in a WSDL or XML schema file&amp;#010 loaded by ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} or ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}." name="SchemaSet" type="class">
    <methods>method:SchemaSet.getSchema</methods>
    <classMethods>classMethod:SchemaSet.get</classMethods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:SchemaSet.schemaNamespace</attrs>
</docItem>
<docItem ref="method:CubeGrid.saveAllEdits" flags="" description=" Save a number of outstanding edits for this CubeGrids. If no cells are specifed, all &amp;#010 outstanding edits will be saved&amp;#010" name="saveAllEdits" type="method" definingClass="class:CubeGrid">
<params description="optionally specify which cells to save. Each cell  should be specified as a 2 element array in the format &lt;code&gt;[rowNum,colNum]&lt;/code&gt;." optional="true" name="cells" type="array of 2-element arrays">
</params>
<params description="If specified this callback will be fired on a successful save  of the specified rows." optional="true" name="saveCallback" type="callback">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:MenuItem.icon" flags="IR" description="The base filename for this item's custom icon. If both this property and&amp;#010 ${isc.DocUtils.linkForRef('attr:MenuItem.checked')} are both specified, only icon specified by this property will be&amp;#010 displayed. The path to the loaded skin directory and the skinImgDir are prepended to&amp;#010 this filename to form the full URL.&amp;#010 &lt;p&gt;&amp;#010 If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.dynamicIcon')} instead." name="icon" valueType="string" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
    <groups>menuIcons</groups>
</docItem>
<docItem ref="attr:ViewLoader.viewRPCProperties" flags="IRA" description="RPCRequest properties to be sent with every RPCRequest issued by the ViewLoader.  Very&amp;#010 advanced; could be used to, for example, set HTTP headers." name="viewRPCProperties" valueType="RPCRequest Properties" defaultValue="null" type="attr" definingClass="class:ViewLoader">
</docItem>
<docItem ref="method:Canvas.dropOut" flags="A" description="&amp;#010 Executed when the dragged object is moved out of the rectangle of this drop target. If you&amp;#010 have set a visual indication in dropOver or dropMove, you should reset it to its normal&amp;#010 state in dropOut.&amp;#010&amp;#010" name="dropOut" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customDrag')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:TreeGrid.setData" flags="" description=" Set the ${isc.DocUtils.linkForRef('class:Tree')} object this TreeGrid will view and manipulate.&amp;#010&amp;#010" name="setData" type="method" definingClass="class:TreeGrid">
<params description="Tree to show" optional="false" name="newData" type="Tree">
</params>
</docItem>
<docItem ref="attr:Slider.thumbThinWidth" flags="IRW" description="The dimension of the thumb parallel to the slider track." name="thumbThinWidth" valueType="integer" defaultValue="17" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:ListGrid.dragDataAction" flags="IRW" description="Indicates what to do with data dragged into another listGrid. See&amp;#010          DragDataAction type for details." name="dragDataAction" valueType="DragDataAction" defaultValue="ListGrid.MOVE" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('gridsDragMove')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('gridsDragCopy')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="class:EdgedCanvas" description="EdgedCanvas acts as a decorative, image-based frame around another single Canvas." name="EdgedCanvas" type="class">
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:EdgedCanvas.skinImgDir</attrs>
    <attrs>attr:EdgedCanvas.edgeImage</attrs>
    <attrs>attr:EdgedCanvas.edgeColor</attrs>
    <attrs>attr:EdgedCanvas.customEdges</attrs>
    <attrs>attr:EdgedCanvas.showCenter</attrs>
    <attrs>attr:EdgedCanvas.edgeSize</attrs>
    <attrs>attr:EdgedCanvas.edgeLeft</attrs>
    <attrs>attr:EdgedCanvas.edgeRight</attrs>
    <attrs>attr:EdgedCanvas.edgeTop</attrs>
    <attrs>attr:EdgedCanvas.edgeBottom</attrs>
    <attrs>attr:EdgedCanvas.edgeOffset</attrs>
    <attrs>attr:EdgedCanvas.edgeOffsetTop</attrs>
    <attrs>attr:EdgedCanvas.edgeOffsetBottom</attrs>
    <attrs>attr:EdgedCanvas.edgeOffsetLeft</attrs>
    <attrs>attr:EdgedCanvas.edgeOffsetRight</attrs>
    <attrs>attr:EdgedCanvas.centerBackgroundColor</attrs>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:Window.canDragReposition" flags="IRW" description="if true, this Window may be moved around by the user by dragging on the Window header.  &amp;#010 Note that if the header is not showing, the Window can't be drag-repositioned regardless&amp;#010 of this setting." name="canDragReposition" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.showHeader">
</seeAlso>
    <groups>dragging</groups>
</docItem>
<docItem ref="method:Log.logInfo" flags="" description=" Log a message at &quot;info&quot; priority&amp;#010 &amp;#010" name="logInfo" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.logDebug" description="for usage info"></seeAlso>
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:Scrollbar.autoEnable" flags="IRWA" description="If true, this scrollbar will automatically enable when the scrollTarget is&amp;#010          scrollable (i.e., when the contents of the scrollTarget exceed its clip size in the&amp;#010          direction relevant to this scrollbar), and automatically disable when the&amp;#010          scrollTarget is not scrollable. Set this property to false for full manual control&amp;#010          over a scrollbar's enabled state." name="autoEnable" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="method:Button.setAutoFit" flags="" description=" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn&amp;#010 autoFit on or off. When autoFit is set to &lt;code&gt;false&lt;/code&gt;, canvas will be resized to&amp;#010 it's previously specified size.&amp;#010" name="setAutoFit" type="method" definingClass="class:Button">
<params description="New autoFit setting." optional="false" name="autoFit" type="boolean">
</params>
</docItem>
<docItem ref="attr:StretchImgButton.wrap" flags="IRW" description="Should the title for this button wrap? If unset, default behavior is to allow wrapping&amp;#010 if this.vertical is true, otherwise disallow wrapping" name="wrap" valueType="boolean" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:Canvas.resizeTo" flags="" description="			Resizes the widget to the specified width and height (moves the right and/ or bottom&amp;#010          sides of the widget). The width and height parameters can be expressed as a percentage&amp;#010          of viewport size or as the number of pixels.&amp;#010" name="resizeTo" type="method" definingClass="class:Canvas">
<params description="new width for canvas" optional="true" name="width" type="number">
</params>
<params description="new height for canvas" optional="true" name="height" type="number">
</params>
<returns description="whether the size actually changed" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('resize')}</examples>
    <groups>sizing</groups>
</docItem>
<docItem ref="classAttr:RPCManager.useCursorTracker" flags="IRW" description="If true, an image is shown to the right of the cursor when ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')} is&amp;#010 set to &quot;cursor&quot;, otherwise the cursor itself is modified via css to the value of&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.  The default is platform-dependent.  In Safari, IE 5.5 and&amp;#010 Firefox 1.0 the default is true, on all other platforms it is false.  The reason for&amp;#010 this split is that, the above browsers require that the cursor move before CSS settings are&amp;#010 re-evaluated - this means the progress cursor can stick until the user moves the mouse.&amp;#010 &lt;p&gt;&amp;#010 This value can be overridden on a per-request basis via ${isc.DocUtils.linkForRef('classAttr:RPCRequest.useCursorTracker')}." name="useCursorTracker" valueType="boolean" defaultValue="platform-dependent" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="classAttr:RPCRequest.useCursorTracker">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonHeight" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the height of the &amp;#010 auto-generated &lt;code&gt;headerMenuButton&lt;/code&gt;" name="headerMenuButtonHeight" valueType="measure" defaultValue="&quot;100%&quot;" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="attr:DateChooser.prevMonthIconHeight" flags="IRW" description="Height of the icon for the previous month button" name="prevMonthIconHeight" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:Canvas.getInnerHTML" flags="A" description="      Return the inner HTML for this canvas. Called when the canvas is drawn or redrawn; &amp;#010      override to customize.&amp;#010" name="getInnerHTML" type="method" definingClass="class:Canvas">
<returns description="HTML contents of this canvas" type="string"></returns>
    <groups>drawing</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.isString" flags="IR" description="Validation will fail if the value is not a string value." name="isString" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:Window.canFocusInHeaderButtons" flags="IRWA" description="If true, the user can give the header buttons keyboard focus (by clicking on&amp;#010      them and including them in the tabOrder)" name="canFocusInHeaderButtons" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
    <groups>focus</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:ToolStrip.members" flags="IR" description="Array of components that will be contained within this Toolstrip, like&amp;#010 ${isc.DocUtils.linkForRef('attr:Layout.members')}, with the following special behaviors:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;the String &quot;separator&quot; will cause a separator to be created (instance of &amp;#010 ${isc.DocUtils.linkForRef('attr:ToolStrip.separatorClass')})&amp;#010 &lt;li&gt;the String &quot;resizer&quot; will cause a resizer to be created (instance of&amp;#010 ${isc.DocUtils.linkForRef('attr:ToolStrip.resizeBarClass')}).  This is equivalent to setting&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar','showResizeBar:true')} on the preceding member.&amp;#010 &lt;/ul&gt;" name="members" valueType="Array of Canvas" defaultValue="null" type="attr" definingClass="class:ToolStrip">
    <examples>${isc.DocUtils.linkForExampleId('toolstrip')}</examples>
</docItem>
<docItem ref="attr:Toolbar.buttonDefaults" flags="IRWA" description="Settings to apply to all buttons of a toolbar. Properties that can be applied to&amp;#010 button objects can be applied to all buttons of a toolbar by specifying them in&amp;#010 buttonDefaults using the following syntax:&lt;br&gt;&amp;#010 &lt;code&gt;buttonDefaults:{property1:value1, property2:value2, ...}&lt;/code&gt;&lt;br&gt;&amp;#010 See the Button Widget Class for standard button properties." name="buttonDefaults" valueType="object" defaultValue="varies" type="attr" definingClass="class:Toolbar">
<seeAlso ref="class:Button">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:RPCRequest.evalResult" flags="IRWA" description="This works similarly to ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} except the resulting String&amp;#010 is automatically evaluated as JavaScript.  The result of the evaluation is then passed to&amp;#010 any specified ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} as ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}.&amp;#010 &lt;p&gt;&amp;#010 This feature can be used to dynamically load new application modules into a running&amp;#010 application.  An RPCRequest with &lt;code&gt;evalResult&lt;/code&gt; enabled can be used to fetch a&amp;#010 static .js file or JavaScript dynamically generated by the server.  The returned JavaScript&amp;#010 can contain anything that a JavaScript file loaded at init time can contain, including new&amp;#010 views and new SmartClient class definitions.&amp;#010 &lt;p&gt;&amp;#010 &lt;i&gt;Example usage with ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')}:&lt;/i&gt;&amp;#010 &lt;pre&gt;&amp;#010 isc.RPCManager.sendRequest({&amp;#010     evalResult:true,&amp;#010     actionURL:&quot;js/loadLabel.js&quot;,&amp;#010     evalVars:{var1:&quot;A Value&quot;}&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 This call would execute the code from &lt;code&gt;loadLabel.js&lt;/code&gt;, and make the variable&amp;#010 &lt;code&gt;var1&lt;/code&gt; available to that code. Therefore if the .js file contained this code:&amp;#010 &lt;pre&gt;&amp;#010 isc.Label.create({&amp;#010     contents:var1&amp;#010 })&amp;#010 &lt;/pre&gt;&amp;#010 A label would be created with contents set to the value of &lt;code&gt;var1&lt;/code&gt; - the string&amp;#010 &lt;code&gt;&quot;A Value&quot;&lt;/code&gt;.&amp;#010 &amp;#010 &lt;p&gt;&amp;#010 This feature relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information." name="evalResult" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="class:ViewLoader">
</seeAlso>
<seeAlso ref="attr:RPCRequest.evalVars">
</seeAlso>
    <groups>viewLoading</groups>
</docItem>
<docItem ref="type:DrawPosition" name="DrawPosition" type="type">
<values description="insert before the target element" value="&quot;beforeBegin&quot;"></values>
<values description="insert as the target element's first child" value="&quot;afterBegin&quot;"></values>
<values description="insert as the target element's last child" value="&quot;beforeEnd&quot;"></values>
<values description="insert after the target element" value="&quot;afterEnd&quot;"></values>
<values description="replace the target element" value="&quot;replace&quot;"></values>
    <groups>drawContext</groups>
</docItem>
<docItem ref="attr:Menu.showIcons" flags="IRW" description="A boolean, indicating whether the checkmark/custom icon column should be displayed.&amp;#010 If showIcons is not set, the menu will show the icon column only if one of its items&amp;#010 specifies an icon, checked, checkIf, or dynamicIcon property." name="showIcons" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="attr:FormItem.showFocusedIcons" flags="IRWA" description="If we're showing icons, should we change their image source to the appropriate&amp;#010  &lt;i&gt;focused&lt;/i&gt;  source when this item has focus?  Can be overridden on a per&amp;#010  icon basis by the formItemIcon &lt;code&gt;showFocused&lt;/code&gt; property." name="showFocusedIcons" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:CubeGrid.getEditedCell" flags="" description=" Returns the current value of a cell. If the cell has an outstanding edit value, this will&amp;#010 be returned, otherwise the underlying value of the record will be returned.&amp;#010&amp;#010" name="getEditedCell" type="method" definingClass="class:CubeGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="record" type="number | Object">
</params>
<params description="colNum of the cell. Only required if the first parameter is                              a rowNum" optional="false" name="colNum" type="number">
</params>
<returns description="Current edit value, or underlying value for the cell." type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Slider.trackImageType" flags="IRW" description="The imageType setting for the slider track." name="trackImageType" valueType="ImageStyle" defaultValue="&quot;stretch&quot;" type="attr" definingClass="class:Slider">
<seeAlso ref="type:ImageStyle">
</seeAlso>
<seeAlso ref="attr:StretchImg.imageType">
</seeAlso>
</docItem>
<docItem ref="attr:TreeNode.id" flags="IR" description="For trees with ${isc.DocUtils.linkForRef('attr:Tree.modelType')} &quot;parent&quot;, this property specifies the unique ID of this&amp;#010 node. The unique ID of a node, together with the unique ID of its parent (see&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeNode.parentId')}) is used by ${isc.DocUtils.linkForRef('method:Tree.linkNodes')} to link a list of nodes into a&amp;#010 tree.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.idField')}." name="id" valueType="String or Number" defaultValue="null" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:TreeNode.parentId">
</seeAlso>
<seeAlso ref="method:Tree.linkNodes">
</seeAlso>
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<seeAlso ref="attr:Tree.idField">
</seeAlso>
</docItem>
<docItem ref="attr:FormItem.filterLocally" flags="IRA" description="If this form item is mapping data values to a display value by fetching them from a &amp;#010 dataSource (see ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}, ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} &amp;#010 and ${isc.DocUtils.linkForRef('attr:FormItem.fetchMissingValues')}), setting this property to true ensures that when&amp;#010 the form item value is set, entire data-set from the dataSource is loaded at once and &amp;#010 used as a valueMap, rather than just loading the display value for the current value.&amp;#010 This avoids the need to perform fetches each time setValue() is called with a new value.&amp;#010 &lt;br&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:PickList.filterLocally')} for behavior on form items such as SelectItems&amp;#010 that show pick-lists." name="filterLocally" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:Canvas.matchElement" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} is specified, should this canvas initially be drawn&amp;#010 at the same dimensions as the htmlElement?&lt;br&gt;&amp;#010 Note: setting this property will not force the canvas to resize if the element&amp;#010 subsequently resizes (for example due to page reflow)." name="matchElement" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
</docItem>
<docItem ref="method:CubeGrid.getSelectedCellIds" flags="" description="&amp;#010  return an array of the IDs of all selected cell records&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getSelectedCellIds" type="method" definingClass="class:CubeGrid">
<returns description="array of the selected cell IDs" type="Array"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.bodyStyleName" flags="IR" description="CSS style used for the body of this grid.  If applying a background-color to the body&amp;#010 via a CSS style applied using this property, be sure to set &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.bodyBackgroundColor')} to &lt;code&gt;null&lt;/code&gt;." name="bodyStyleName" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:List.getValueMap" flags="" description=" Get a map of the form &lt;code&gt;{ item[idField] -&amp;gt; item[displayField] }&lt;/code&gt;, for all &amp;#010 items in the list.  Note that if more than one item has the same &lt;code&gt;idProperty&lt;/code&gt;, &amp;#010 the value for the later item in the list will clobber the value for the earlier item.&amp;#010&amp;#010" name="getValueMap" type="method" definingClass="interface:List">
<params description="Property to use as ID (data value) in the valueMap" optional="false" name="idField" type="string">
</params>
<params description="Property to use a display value in the valueMap" optional="false" name="displayField" type="string">
</params>
<returns description="valueMap object" type="object"></returns>
</docItem>
<docItem ref="method:ListGrid.recordClick" flags="" description=" Executed when the listGrid receives a 'click' event on an enabled, non-separator&amp;#010 record. The default implementation does nothing -- override to perform some action&amp;#010 when any record or field is clicked.&lt;br&gt;&amp;#010 A record event handler can be specified either as&amp;#010 a function to execute, or as a string of script to evaluate. If the handler is defined&amp;#010 as a string of script, all the parameters below will be available as variables for use&amp;#010 in the script.&lt;br&gt;&amp;#010	To do something specific if a particular field is clicked, add a recordClick&amp;#010	method or string of script to that field (same parameters) when you're setting up&amp;#010	the list.&lt;br&gt;&amp;#010	&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&amp;#010  &lt;li&gt;This will not be called if the click is below the last item of the list.&lt;/li&gt;&amp;#010  &lt;li&gt;This method is called from the default implementaiton of&amp;#010  ${isc.DocUtils.linkForRef('method:ListGrid.rowClick')}, so if that method is overridden&amp;#010  this method may not be fired.&lt;/li&gt;&lt;/ul&gt;&amp;#010" name="recordClick" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.rowClick">
</seeAlso>
<params description="the listGrid that contains the click event" optional="false" name="viewer" type="listGrid">
</params>
<params description="the record that was clicked on" optional="false" name="record" type="ListGridRecord">
</params>
<params description="number of the record clicked on in the current set of                                  displayed records (starts with 0)" optional="false" name="recordNum" type="number">
</params>
<params description="the field that was clicked on (field definition)" optional="false" name="field" type="ListGridField">
</params>
<params description="number of the field clicked on in the listGrid.fields                                  array" optional="false" name="fieldNum" type="number">
</params>
<params description="value of the cell (after valueMap, etc. applied)" optional="false" name="value" type="object">
</params>
<params description="raw value of the cell (before valueMap, etc applied)" optional="false" name="rawValue" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="method:Menu.setItemTitle" flags="" description="			Sets the title of a particular menu item to the string specified by newTitle and&amp;#010          redraws the menu if necessary.&amp;#010" name="setItemTitle" type="method" definingClass="class:Menu">
<params description="pointer to (or number of) the item in question" optional="false" name="item" type="item | number">
</params>
<params description="new title" optional="false" name="newTitle" type="string">
</params>
<returns description="true if the title was changed, and false otherwise" type="boolean"></returns>
</docItem>
<docItem ref="attr:ServerObject.attributeScope" flags="IR" description="Specifies the scope in which the DMI instance is to be looked up.  Valid values are: &amp;#010 &lt;code&gt;&quot;request&quot;&lt;/code&gt;, &lt;code&gt;&quot;session&quot;&lt;/code&gt;, and &lt;code&gt;&quot;application&quot;&lt;/code&gt;.  If&amp;#010 &lt;code&gt;attributeScope&lt;/code&gt; is left out of the &lt;code&gt;ServerObject&lt;/code&gt; definition, then&amp;#010 all scopes are searched in the order in which they are listed above.&amp;#010 &lt;p&gt;&amp;#010 This attribute is consulted only when the value of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is&amp;#010 &lt;code&gt;&quot;attribute&quot;&lt;/code&gt;." name="attributeScope" valueType="&quot;request&quot;|&quot;session&quot;|&quot;application&quot;" defaultValue="null" type="attr" definingClass="class:ServerObject">
<seeAlso ref="attr:ServerObject.attributeName">
</seeAlso>
<seeAlso ref="attr:ServerObject.lookupStyle">
</seeAlso>
</docItem>
<docItem ref="classAttr:RPCRequest.useCursorTracker" flags="IRW" description="If true, an image is shown to the right of the cursor when ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')} is&amp;#010 set to &quot;cursor&quot;, otherwise the cursor itself is modified via css to the value of&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.  The default is platform-dependent.  In Safari, IE 5.5 and&amp;#010 Firefox 1.0 the default is true, on all other platforms it is false.  The reason for this&amp;#010 split is that the above browsers require that the cursor move before CSS settings are&amp;#010 re-evaluated - this means the progress cursor can stick until the user moves the mouse.&amp;#010 &lt;p&gt;&amp;#010 If left unspecified, the default value is set by ${isc.DocUtils.linkForRef('classAttr:RPCManager.useCursorTracker')}." name="useCursorTracker" valueType="boolean" defaultValue="platform-dependent" type="classAttr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.useCursorTracker">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="attr:TreeGrid.showDropIcons" flags="IRW" description="If true, when the user drags a droppable target over a folder in this TreeGrid, show &amp;#010 a different icon folder icon.&amp;#010 This is achieved by appending the ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} onto the&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} URL (for example &lt;code&gt;&quot;[SKIN]/folder.gif&quot;&lt;/code&gt; may be&amp;#010 replaced by &lt;code&gt;&quot;[SKIN]/folder_drop.gif&quot;&lt;/code&gt;)." name="showDropIcons" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="method:Applet.getPluginHandle" flags="A" description=" &amp;#010  Returns a handle to the applet DOM element (valid only after the component has been drawn).  &amp;#010&amp;#010" name="getPluginHandle" type="method" definingClass="class:Applet">
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:Canvas.cursor" description="Specifies the cursor image to display when the mouse pointer is&amp;#010      over this widget. It corresponds to the CSS cursor attribute. See Cursor type for&amp;#010      different cursors." name="cursor" valueType="Cursor" defaultValue="Canvas.DEFAULT" definingClass="class:Canvas">
    <setter>setCursor</setter>
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('cursors')}</examples>
    <groups>cues</groups>
</docItem>
<docItem ref="method:StretchImgButton.getState" flags="" description=" Return the state of this StatefulCanvas&amp;#010" name="getState" type="method" definingClass="class:StretchImgButton">
<returns type="State">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="method:DataSource.fetchData" flags="" description=" Perform a &quot;fetch&quot; DataSource operation against this DataSource, sending search criteria&amp;#010 and retrieving matching records.&amp;#010 &lt;P&gt;&amp;#010 In contrast to ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}, which creates a ${isc.DocUtils.linkForRef('class:ResultSet')} to manage&amp;#010 the returned data, calling &lt;code&gt;dataSource.fetchData()&lt;/code&gt; provides the returned&amp;#010 data in the callback as a simple JavaScript Array of JavaScript Objects.  Calling&amp;#010 &lt;code&gt;dataSource.fetchData()&lt;/code&gt; does not automatically update any visual components or&amp;#010 caches: code in the callback passed to &lt;code&gt;fetchData()&lt;/code&gt; decides what to do with&amp;#010 the returned data. &amp;#010 &lt;P&gt;&amp;#010 For example, given a ListGrid &quot;myGrid&quot; and a DataSource &quot;employees&quot;, the following code&amp;#010 would populate &quot;myGrid&quot; with data fetched from the DataSource:&amp;#010 &lt;pre&gt;&amp;#010    isc.DataSource.get(&quot;employees&quot;).fetchData(null, &quot;myGrid.setData(data)&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Unlike calling &lt;code&gt;myGrid.fetchData()&lt;/code&gt;, which creates a ${isc.DocUtils.linkForRef('class:ResultSet')}, the&amp;#010 data provided to the grid is &quot;disconnected&quot; data, unmanaged by SmartClient's databinding&amp;#010 facilities and safe to directly modify.  This is useful when, for example, a ListGrid is&amp;#010 being used as a more sophisticated version of HTML's multi-select component.&amp;#010 &lt;P&gt;&amp;#010 Disconnected datasets may be used to populate various visual components.  For example,&amp;#010 while an individual FormItem can be configured to fetch&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} options from a DataSource via the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')} property, the following code shows&amp;#010 storing a dataset to derive valueMaps from later:&amp;#010 &lt;pre&gt;&amp;#010    isc.DataSource.get(&quot;countries&quot;).fetchData(null, &quot;window.countries = data&quot;);&amp;#010&amp;#010    ... later, a form is created dynamically ...&amp;#010&amp;#010    function showForm() {&amp;#010       isc.DynamicForm.create({&amp;#010           items : [&amp;#010              { name:&quot;country&quot;, title:&quot;Pick Country&quot;,&amp;#010                valueMap: window.countries.getValueMap(&quot;countryId&quot;, &quot;countryName&quot;)&amp;#010              },&amp;#010       ...&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 You can also create a ResultSet from the data retrieved from &lt;code&gt;fetchData()&lt;/code&gt;,&amp;#010 like so:&amp;#010 &lt;pre&gt;&amp;#010    isc.DataSource.get(&quot;countries&quot;).fetchData(null,&amp;#010        function (dsResponse, data) {&amp;#010           isc.ResultSet.create({&amp;#010              dataSource:&quot;countries&quot;,&amp;#010              allRows:data&amp;#010           })&amp;#010        }&amp;#010    )&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 This gives you a dataset that supports client-side filtering (via&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')}), can provide &amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.getValueMap','filtered valueMaps')}, will &amp;#010 ${isc.DocUtils.linkForRef('attr:ResultSet.disableCacheSync','automatically reflect updates')} to the DataSource made via&amp;#010 other components, and can be re-used with multiple visual components.&amp;#010 &lt;P&gt;&amp;#010 See also the server-side com.isomorphic.js.JSTranslater class in the&amp;#010 ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for other, similar approaches&amp;#010 involving dumping data into the page during initial page load.  &lt;b&gt;Note:&lt;/b&gt; care should&amp;#010 be taken when using this approach.  Large datasets degrade the basic performance of some&amp;#010 browsers, so use ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','optionDataSource')} and similar&amp;#010 facilities to manage datasets that may become very large.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Data-Driven Visual Component Creation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;DataSource.fetchData()&lt;/code&gt; can also be used to create SmartClient components in&amp;#010 a data-driven way.  Many properties on SmartClient visual components are configured via&amp;#010 an Array of Objects - the same data format that &lt;code&gt;dataSource.fetchData()&lt;/code&gt;&amp;#010 returns.  These include ${isc.DocUtils.linkForRef('attr:ListGrid.fields')}, ${isc.DocUtils.linkForRef('attr:TabSet.tabs')},&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.items')}, ${isc.DocUtils.linkForRef('attr:Facet.values')} and even ${isc.DocUtils.linkForRef('attr:DataSource.fields')}.&amp;#010 &lt;P&gt;&amp;#010 For example, if you had a DataSource &quot;myFormFields&quot; whose fields included the&amp;#010 basic properties of ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} (name, title, type, etc), this example&amp;#010 code would create a form based on stored field definitions, loaded from the&amp;#010 &quot;myFormFields&quot; DataSource on the fly:&amp;#010 &lt;pre&gt;&amp;#010    isc.DataSource.get(&quot;myFormFields&quot;).fetchData(null, &amp;#010        &quot;isc.DynamicForm.create({ items:data })&quot;&amp;#010    )&amp;#010 &lt;/pre&gt;&amp;#010 This capability to dynamically create visual components from dynamically fetched data&amp;#010 provides a foundation for creating interfaces that can be customized by end users.&amp;#010 See also ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.&amp;#010&amp;#010" name="fetchData" type="method" definingClass="class:DataSource">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on                                                       the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="classAttr:Log.defaultPriority" flags="IRWA" description="Any logs below this priority will be suppressed, unless a more specific setting exists for&amp;#010 the category." name="defaultPriority" valueType="LogPriority" defaultValue="Log.WARN" type="classAttr" definingClass="class:Log">
    <getter>getDefaultPriority</getter>
    <setter>setDefaultPriority</setter>
<seeAlso ref="classMethod:Log.setPriority">
</seeAlso>
</docItem>
<docItem ref="attr:DateChooser.todayButtonTitle" flags="IRW" description="Title for &quot;Today&quot; button." name="todayButtonTitle" valueType="string" defaultValue="&quot;Today&quot;" type="attr" definingClass="class:DateChooser">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:ListGrid.cellOut" flags="" description=" Called when the mouse pointer leaves a cell&amp;#010&amp;#010" name="cellOut" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Canvas.skinImgDir" flags="IRWA" description="Default directory for skin images (those defined by the class), relative to the&amp;#010 Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}." name="skinImgDir" valueType="URL" defaultValue="&quot;images/&quot;" type="attr" definingClass="class:Canvas">
    <groups>images</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetValueHoverWidth" flags="IRWA" description="If specified and &lt;code&gt;this.showHover&lt;/code&gt; is true, this is the default width to apply&amp;#010 to hover tips shown for facetValues. If unset, hover canvas will be sized to &amp;#010 &lt;code&gt;this.hoverWidth&lt;/code&gt; if specified instead." name="facetValueHoverWidth" valueType="measure" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverWidth">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:TreeGrid.setViewState" flags="" description=" Overridden to take a ${isc.DocUtils.linkForRef('type:treeGridViewState')} object.&amp;#010&amp;#010" name="setViewState" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.getViewState">
</seeAlso>
<params description="Object describing the desired view state for the grid" optional="false" name="viewState" type="treeGridViewState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:StretchImgButton.src" flags="IRW" description="Base URL for the image.  By default, StretchImgButtons consist of three image parts: A&amp;#010 start image (displayed at the top or left), a scaleable central image and an end image&amp;#010 displayed at the bottom or right.&amp;#010 &lt;P&gt;&amp;#010 The images displayed in the stretchImgButton are derived from this property in the &amp;#010 following way:&amp;#010 &lt;P&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; When the button is in its standard state the suffixes &quot;_start&quot;, &quot;_end&quot; and &amp;#010      &quot;_stretch&quot; are applied to the src (before the file extension), so by default &amp;#010      the images displayed will be &quot;button_start.gif&quot; (sized to be &amp;#010      &lt;code&gt;this.capSize&lt;/code&gt; by the specified width of the stretchImgButton), &amp;#010      &quot;button_stretch.gif&quot; (stretched to the necessary width) and &quot;button_end.gif&quot; &amp;#010      (sized the same as the start image).&amp;#010 &lt;li&gt; As the button's state changes, the images will have suffixes appended &lt;b&gt;before&lt;/b&gt;&amp;#010      the &quot;_start&quot; / &quot;_end&quot; / &quot;_stretch&quot; to represent the button state. Possible states &amp;#010      are &quot;Down&quot;, &quot;Over&quot;, &quot;Selected&quot; &quot;Focused&quot; and &quot;Disabled&quot;. Note that &quot;Selected&quot; and&amp;#010      &quot;Focused&quot; are compound states which may be applied in addition to &quot;Down&quot; etc.&amp;#010 &lt;/ul&gt;&amp;#010 For example the center piece of a selected stretchImgButton with the mouse hovering&amp;#010 over it might have the URL: &lt;code&gt;&quot;button_Selected_Down_stretch.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Media should be present for each possible state of the _start, _end and _stretch images." name="src" valueType="SCImgURL" defaultValue="&quot;button.gif&quot;" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="classAttr:Dialog.NO_BUTTON_TITLE" flags="IRW" description="Title for the &lt;code&gt;&quot;No&quot;&lt;/code&gt; button." name="NO_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;No&quot;" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Canvas.animateScroll" flags="" description=" Animate a scroll from the current scroll position to the specified position.&amp;#010" name="animateScroll" type="method" definingClass="class:Canvas">
<params description="desired final left scroll postion" optional="false" name="scrollLeft" type="number">
</params>
<params description="desired final top scroll postion" optional="false" name="scrollTop" type="number">
</params>
<params description="When the scroll completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation" optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated scroll" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration to bias the animation ratios" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <groups>animation</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Button.autoFit" description="If true, ignore the specified size of this widget and always size just large&amp;#010 enough to accomodate the title.  If &lt;code&gt;setWidth()&lt;/code&gt; is explicitly called on an&amp;#010 autoFit:true button, autoFit will be reset to &lt;code&gt;false&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for StretchImgButton instances, autoFit will occur horizontally only, as &amp;#010 unpredictable vertical sizing is likely to distort the media. If you do want vertical &amp;#010 auto-fit, this can be achieved by simply setting a small height, and having &amp;#010 overflow:&quot;visible&quot;" name="autoFit" valueType="boolean" defaultValue="null" definingClass="class:Button">
    <setter>setAutoFit</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonAutoFit')}</examples>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Tree.add" flags="" description="&amp;#010 Add a single node under the specified parent&amp;#010&amp;#010" name="add" type="method" definingClass="class:Tree">
<seeAlso ref="group:sharingNodes">
</seeAlso>
<seeAlso ref="method:Tree.addList">
</seeAlso>
<params description="node to add" optional="false" name="node" type="TreeNode">
</params>
<params description="Parent of the node being added.  You can pass                                          in either the ${isc.DocUtils.linkForRef('object:TreeNode')} itself, or a path to&amp;#010	                                        the node (as a String), in which case a&amp;#010	                                        ${isc.DocUtils.linkForRef('method:Tree.find')} is performed to find&amp;#010	                                        the node." optional="false" name="parent" type="String or TreeNode">
</params>
<params description="Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list." optional="true" name="position" type="number">
</params>
<returns description="The added node." type="TreeNode"></returns>
</docItem>
<docItem ref="method:ImgButton.deselect" flags="" description=" Select this object.&amp;#010" name="deselect" type="method" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:Tab.title" flags="IRW" description="Specifies the title of the this tab.  To change the title after the TabSet has been&amp;#010 created, call ${isc.DocUtils.linkForRef('method:TabSet.setTabTitle')}." name="title" valueType="HTML" defaultValue="null" type="attr" definingClass="object:Tab">
<seeAlso ref="method:TabSet.setTabTitle">
</seeAlso>
</docItem>
<docItem ref="attr:MenuItem.keys" flags="IR" description="Shortcut key(s) to fire the menu item action. Each key can be defined as a ${isc.DocUtils.linkForRef('type:KeyIdentifier')}.&amp;#010 To apply multiple shortcut keys to this item, set this property to an array of such key&amp;#010 identifiers." name="keys" valueType="KeyIdentifier | Array of KeyIdentifer" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <groups>menuKeys</groups>
</docItem>
<docItem ref="group:sorting" name="sorting" type="group">
    <refs>method:List.sortByProperty</refs>
    <refs>method:ListGridField.sortNormalizer</refs>
    <refs>method:ListGrid.unsort</refs>
    <refs>method:ListGrid.sort</refs>
    <refs>method:ResultSet.sortByProperty</refs>
    <refs>method:Array.sortByProperty</refs>
    <refs>method:Array.unsort</refs>
    <refs>classMethod:Array.compareAscending</refs>
    <refs>classMethod:Array.compareDescending</refs>
    <refs>attr:ListGridField.canSort</refs>
    <refs>attr:ListGridField.sortDirection</refs>
    <refs>attr:ListGrid.canSort</refs>
    <refs>attr:ListGrid.sortFieldNum</refs>
    <refs>attr:ListGrid.sortDirection</refs>
    <refs>attr:ListGrid.showSortArrow</refs>
    <refs>attr:ListGrid.canPickFields</refs>
    <refs>type:SortArrow</refs>
    <refs>type:SortDirection</refs>
</docItem>
<docItem ref="method:TreeGrid.transferSelectedData" flags="" description=" Simulates a drag / drop type transfer of the selected records in some other grid to this&amp;#010 treeGrid, without requiring any user interaction.&lt;br&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('group:dragging')} documentation for an overview of grid drag/drop data&amp;#010 transfer.&amp;#010" name="transferSelectedData" type="method" definingClass="class:TreeGrid">
<params description="source grid from which the records will be tranferred" optional="false" name="sourceGrid" type="ListGrid">
</params>
<params description="parent node into which records should be dropped - if null    records will be transferred as children of the root node." optional="true" name="folder" type="TreeNode">
</params>
<params description="target index (drop position) within the parent folder" optional="true" name="index" type="integer">
</params>
    <examples>${isc.DocUtils.linkForExampleId('dragTree')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="group:cellStyling" name="cellStyling" type="group">
    <refs>attr:GridRenderer.cellHeight</refs>
    <refs>attr:GridRenderer.fixedRowHeights</refs>
    <refs>attr:GridRenderer.wrapCells</refs>
    <refs>attr:GridRenderer.cellPadding</refs>
    <refs>attr:GridRenderer.baseStyle</refs>
    <refs>attr:GridRenderer.alternateRowStyles</refs>
    <refs>attr:GridRenderer.alternateRowFrequency</refs>
    <refs>attr:GridRenderer.emptyCellValue</refs>
    <refs>attr:ListGrid.emptyCellValue</refs>
    <refs>attr:ListGrid.cellHeight</refs>
    <refs>attr:ListGrid.fixedRecordHeights</refs>
    <refs>attr:ListGrid.wrapCells</refs>
    <refs>attr:ListGrid.cellPadding</refs>
    <refs>attr:ListGrid.baseStyle</refs>
    <refs>attr:ListGrid.alternateRecordStyles</refs>
    <refs>attr:ListGrid.alternateRecordFrequency</refs>
    <refs>attr:CubeGrid.baseStyle</refs>
</docItem>
<docItem ref="attr:DataBoundComponent.fetchOperation" flags="IRW" description="Operation ID this component should use when performing fetch operations." name="fetchOperation" valueType="String" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
<seeAlso ref="attr:DSRequest.operationId">
</seeAlso>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:ListGrid.frozenHeaderTitleStyle" flags="IR" description="If this listGrid contains any frozen fields, this property can be used to apply a custom&amp;#010 headerTitleStyle to the frozen fields set of fields. If unset, the standard headerTitleStyle&amp;#010 will be used for both frozen and unfrozen cells." name="frozenHeaderTitleStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.headerTitleStyle">
</seeAlso>
<seeAlso ref="attr:ListGridField.frozen">
</seeAlso>
    <groups>gridHead4er</groups>
    <groups>appearance</groups>
    <groups>frozenFields</groups>
</docItem>
<docItem ref="method:Canvas.getOffsetX" flags="" description="	Return the X-coordinate of the last event relative to the left edge of the content of this&amp;#010	Canvas.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  NOTE: To get a coordinate relative to the &lt;b&gt;viewport&lt;/b&gt; of this Canvas, subtract&amp;#010  this.getScrollLeft()&amp;#010&amp;#010" name="getOffsetX" type="method" definingClass="class:Canvas">
<returns type="number">
</returns>
    <groups>events</groups>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:ListGrid.hideField" flags="" description=" Force a field to be hidden.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: If a field.showIf expression exists, it will be destroyed.&amp;#010 &amp;#010" name="hideField" type="method" definingClass="class:ListGrid">
<params description="field to hide" optional="false" name="field" type="field name or ListGridField">
</params>
<params description="if passed, don't relayout non-explicit sized fields                                       to fit the available space" optional="true" name="suppressRelayout" type="boolean">
</params>
    <examples>${isc.DocUtils.linkForExampleId('columnOrder')}</examples>
</docItem>
<docItem ref="attr:Canvas.animateMoveAcceleration" flags="IRWA" description="Default acceleration effect for performing an animated move.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateMoveAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:Canvas.getOffsetY" flags="" description="	Return the Y-coordinate of the last event, relative to the top edge of the content of this&amp;#010	Canvas.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  NOTE: To get a coordinate relative to the &lt;b&gt;viewport&lt;/b&gt; of this Canvas, subtract&amp;#010  this.getScrollTop()&amp;#010&amp;#010" name="getOffsetY" type="method" definingClass="class:Canvas">
<returns type="number">
</returns>
    <groups>events</groups>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:CubeGrid.resizeFacetValue" flags="" description=" Resizes all columns for the provided facetValueId, which must be a facetValueId from the&amp;#010 innermost column facet.&amp;#010&amp;#010" name="resizeFacetValue" type="method" definingClass="class:CubeGrid">
<params description="facetValueId of columns to be resized" optional="false" name="facetValueId" type="id">
</params>
<params description="column's new width" optional="false" name="newWidth" type="number">
</params>
</docItem>
<docItem ref="group:orientation" name="orientation" type="group">
    <refs>type:Orientation</refs>
</docItem>
<docItem ref="attr:CubeGrid.facetValueAlign" flags="IRW" description="default alignment for facet values (in headers)" name="facetValueAlign" valueType="alignEnum" defaultValue="&quot;center&quot;" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:CheckboxItem.valueMap" flags="IRW" description="Object defining how the checkbox &quot;checked&quot; state will be mapped to the field value.&lt;br&gt;&amp;#010 Checkboxes only support 2 states. By default a checked checkbox will have&amp;#010 value &lt;code&gt;true&lt;/code&gt;, and an unchecked one will have value &lt;code&gt;false&lt;/code&gt;&amp;#010 (or &lt;code&gt;null&lt;/code&gt; if there is no default value and the value has never been set).&amp;#010 &lt;p&gt;&amp;#010 A valueMap can modify this in 2 ways:&lt;br&gt;&amp;#010 - If the desired checked/unchecked values can be resolved to &lt;code&gt;true&lt;/code&gt; &amp;#010   and &lt;code&gt;false&lt;/code&gt; directly in JavaScript, the valueMap may be specified as&amp;#010   a 2-element array containing these values. Examples of this woud include&lt;br&gt;&amp;#010   &lt;code&gt;&amp;nbsp;&amp;nbsp;[0,1]&lt;/code&gt;: &amp;#010   In this case an unchecked checkbox would have value &lt;code&gt;0&lt;/code&gt; and a checked box&amp;#010   would have value &lt;code&gt;1&lt;/code&gt;&lt;br&gt;&amp;#010   &lt;code&gt;&amp;nbsp;&amp;nbsp;[null,&quot;Some String&quot;]&lt;/code&gt;:&amp;#010   In this case an unchecked checkbox would have value &lt;code&gt;null&lt;/code&gt; and a checked &amp;#010    box would have value &lt;code&gt;&quot;Some String&quot;&lt;/code&gt;&lt;br&gt;&amp;#010 - More arbitrary data values can be resolved to checked / unchecked values via an&amp;#010   object mapping the abitrary data values to display values of &lt;code&gt;true&lt;/code&gt; and&amp;#010   &lt;code&gt;false&lt;/code&gt;. For example:&lt;br&gt;&amp;#010   &lt;code&gt;&amp;nbsp;&amp;nbsp;{&quot;A&quot;:false, &quot;B&quot;:true}&lt;/code&gt;&lt;br&gt;&amp;#010    In this case an unchecked checkbox would have value &quot;A&quot;, and a checked box &amp;#010    would have value &quot;B&quot;&amp;#010 &lt;p&gt;&amp;#010 Note: ValueMaps in other formats will be ignored by the CheckboxItem class. To update&amp;#010 the valueMap at runtime, always use ${isc.DocUtils.linkForRef('method:CheckboxItem.setValueMap')}" name="valueMap" valueType="object | Array" defaultValue="null" type="attr" definingClass="class:CheckboxItem">
    <setter>setValueMap</setter>
    <groups>valueMap</groups>
</docItem>
<docItem ref="group:containment" description="Canvases containing other objects as children or peers" name="containment" type="group">
    <refs>method:Canvas.addChild</refs>
    <refs>method:Canvas.removePeer</refs>
    <refs>method:Canvas.removeChild</refs>
    <refs>method:Canvas.addPeer</refs>
    <refs>method:Canvas.getParentElements</refs>
    <refs>method:Canvas.contains</refs>
    <refs>attr:Canvas.parentElement</refs>
    <refs>attr:Canvas.topElement</refs>
    <refs>attr:Canvas.masterElement</refs>
    <refs>attr:Canvas.children</refs>
    <refs>attr:Canvas.peers</refs>
</docItem>
<docItem ref="group:creation" name="creation" type="group">
</docItem>
<docItem ref="method:DynamicForm.editNewRecord" flags="" description="&amp;#010 Prepare to edit a new record by clearing the current set of values (or replacing them &amp;#010 with initialValues if specified).&amp;#010 &lt;br&gt;&amp;#010 Subsequent calls to &lt;code&gt;saveData()&lt;/code&gt; will use an &lt;code&gt;add&lt;/code&gt; rather than&amp;#010 an &lt;code&gt;update&lt;/code&gt; operation.&amp;#010&amp;#010" name="editNewRecord" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="initial set of values for the editor as a map of field names to their corresponding&amp;#010     values" optional="true" name="initialValues" type="object">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="classMethod:Page.getScrollLeft" flags="" description="		Get the amount that the browser window has been scrolled horizontally.&amp;#010" name="getScrollLeft" type="classMethod" definingClass="class:Page">
<returns description="horizontal scroll amount" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem exampleConfig="SectionItem.xml" type="class" ref="class:SectionItem" description="Header item for a collapsable section in a ${isc.DocUtils.linkForRef('class:DynamicForm')}.  Each &lt;code&gt;SectionItem&lt;/code&gt;&amp;#010 is associated with a number of other &lt;code&gt;item&lt;/code&gt;s in the form, which will be shown or&amp;#010 hidden as a group when the section is expanded or collapsed.  Clicking on a&amp;#010 &lt;code&gt;SectionItem&lt;/code&gt; will expand or collapse the section.&amp;#010 &lt;P&gt;&amp;#010 To make a form where only one section is expanded at a time, set&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.sectionVisibilityMode')} to &quot;mutex&quot;." name="SectionItem">
    <methods>method:SectionItem.expandSection</methods>
    <methods>method:SectionItem.collapseSection</methods>
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:SectionItem.defaultValue</attrs>
    <attrs>attr:SectionItem.itemIds</attrs>
    <attrs>attr:SectionItem.sectionVisible</attrs>
    <attrs>attr:SectionItem.sectionExpanded</attrs>
    <attrs>attr:SectionItem.sectionHeaderClass</attrs>
    <attrs>attr:SectionItem.canCollapse</attrs>
<seeAlso ref="attr:DynamicForm.sectionVisibilityMode">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('formSections')}</examples>
</docItem>
<docItem ref="method:Layout.reflow" flags="A" description=" Layout members according to current settings.&amp;#010 &lt;P&gt;&amp;#010 Members will reflow automatically when the layout is resized, members resize, the list of&amp;#010 members changes or members change visibility.  It is only necessary to manually call&amp;#010 &lt;code&gt;reflow()&lt;/code&gt; after changing settings on the layout, for example,&amp;#010 &lt;code&gt;layout.reverseOrder&lt;/code&gt;.&amp;#010&amp;#010" name="reflow" type="method" definingClass="class:Layout">
<params description="reason reflow() had to be called (appear in logs if enabled)" optional="true" name="reason" type="string">
</params>
</docItem>
<docItem ref="class:RPCManager" description="RPCManager is a static singleton class that manages transparent client/server RPC (remote&amp;#010 procedure call).  This class provides a generic, low-level client/server communication&amp;#010 integration point.  You can use it to send arbitrary data to a URL of your choosing on the&amp;#010 server and optionally be called back with server-returned data when the server replies.  &amp;#010 You can process the RPC request in a JSP, Servlet or Filter on the server.&amp;#010 &lt;P&gt;&amp;#010 SmartClient's powerful ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} automatically issue&amp;#010 RPCs as necessary, based on the &amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')}.  To integrate DataBoundComponents&amp;#010 with your server, ${isc.DocUtils.linkForRef('group:clientServerIntegration','start here')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;u&gt;Simple example (client code):&lt;/u&gt;&amp;#010 &lt;P&gt;&lt;code&gt;&amp;#010 var data = { here: &quot;is some data&quot;, to: [&quot;send to the server&quot;]};&lt;br&gt;&amp;#010 RPCManager.sendRequest({ data: data, callback: &quot;myCallback(data)&quot;, actionURL: &quot;/rpcHandler.jsp&quot;});&lt;br&gt;&amp;#010 function myCallback(data) { alert(&quot;response from the server: &quot; + data); }&amp;#010 &lt;/code&gt;&lt;br&gt;&lt;br&gt;&amp;#010 &lt;u&gt;Simple example (server code: /rpcHandler.jsp):&lt;/u&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&lt;code&gt;&amp;#010 RPCManager rpc = new RPCManager(request, response, out);&lt;br&gt;&amp;#010 Object data = rpc.getData();&lt;br&gt;&amp;#010 System.out.println(&quot;client sent: &quot; + data.toString());&lt;br&gt;&amp;#010 rpc.send(&quot;here's a response&quot;);&lt;br&gt;&amp;#010 &lt;/code&gt;&amp;#010 &lt;P&gt;&amp;#010 Note that, while the example above uses the SmartClient Java Server, the RPCManager is also&amp;#010 capable of issuing RPCs that do not require a SmartClient server.  See&amp;#010 ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-Side Data Integration')} for details.&amp;#010 &lt;P&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Queuing&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;br&gt;&amp;#010 Because of browser limitations on the total number of simultaneous HTTP connections to a given&amp;#010 server, batching multiple RPC requests into a single HTTP request is highly advisable whenever&amp;#010 possible.  The RPCManager provides a queuing mechanism that allows this.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 &lt;u&gt;Queuing example (client code):&lt;/u&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&lt;code&gt;&amp;#010 RPCManager.startQueue();&lt;br&gt;&amp;#010 RPCManager.send(&quot;a string of data&quot;, &quot;myCallback(data)&quot;, {actionURL: &quot;/rpcHandler.jsp&quot;});&lt;br&gt;&amp;#010 RPCManager.sendRequest({ data: [&quot;some&quot;, &quot;more data&quot;, 2], callback: &quot;myCallback(data)&quot;, actionURL: &quot;/rpcHandler.jsp&quot;});&lt;br&gt;&amp;#010 RPCManager.sendRequest({ data: &quot;different callback&quot;, callback: &quot;myCallback2(data)&quot;, actionURL: &quot;/rpcHandler.jsp&quot;});&lt;br&gt;&amp;#010 RPCManager.sendQueue()&lt;br&gt;&amp;#010 function myCallback(data) { alert(&quot;response from the server: &quot; + data); }&lt;br&gt;&amp;#010 function myCallback2(data) { alert(&quot;response from the server (other callback): &quot; + data); }&amp;#010 &lt;/code&gt;&lt;br&gt;&lt;br&gt;&amp;#010 &lt;u&gt;Queuing example (server code: /rpcHandler.jsp):&lt;/u&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&lt;code&gt;&amp;#010 RPCManager rpc = new RPCManager(request, response, out);&lt;br&gt;&amp;#010 for(Iterator i = rpc.getRequests().iterator(); i.hasNext();) {&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RPCRequest rpcRequest = (RPCRequest)i.next();&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object data = rpcRequest.getData();&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;client sent:&quot; + data.toString());&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//send back the data sent to us by the client&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rpc.send(rpcRequest, new RPCResponse(data));&lt;br&gt;&amp;#010 }&lt;br&gt;&amp;#010 &lt;/code&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Error Handling&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;br&gt;&amp;#010 The ${isc.DocUtils.linkForRef('class:RPCResponse')} object has an integer status field that the RPCManager inspects when&amp;#010 the response is received from the server. If the value of this field is less than zero, the&amp;#010 request is considered to have failed.  Otherwise it is considered to have succeeded.  This&amp;#010 value is settable via the setStatus() method call on the RPCResponse server-side object.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 If the status field shows a failure, the RPCManager will, by default, show a dialog with the&amp;#010 contents of the ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} field (which is assumed to contain a &amp;#010 meaningful description of the error that occured).  If you specified a callback in your&amp;#010 RPCRequest, it will &lt;b&gt;not&lt;/b&gt; be called if the status shows a failure (see below for how to&amp;#010 change this).&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 If the status field shows success, the RPCManager takes no special action.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The built-in status codes and default behavior are there for convenience.  You can choose to&amp;#010 completely ignore it and handle errors as you see fit (for example by encoding them into the data&amp;#010 field returned by the server, and always setting the RPCResponse status field to a success&amp;#010 value).  In fact, the status field is automatically set to a success code&amp;#010 (RPCResponse.STATUS_SUCCESS) by the constructor of the RPCResponse object on the server. &amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 If you choose to use the status field, but want to handle the errors yourself in your callback&amp;#010 (and suppress the default error dialog popped up by the RPCManager), simply specify the&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError','willHandleError:true')} on your RPCRequest object.  This&amp;#010 allows you to use the RPCManager.sendError() convenience methods on the server without the&amp;#010 default error handling behavior on the client." name="RPCManager" type="class">
    <classAttrs>classAttr:RPCManager.defaultTimeout</classAttrs>
    <classAttrs>classAttr:RPCManager.defaultPrompt</classAttrs>
    <classAttrs>classAttr:RPCManager.timeoutErrorMessage</classAttrs>
    <classAttrs>classAttr:RPCManager.removeDataPrompt</classAttrs>
    <classAttrs>classAttr:RPCManager.saveDataPrompt</classAttrs>
    <classAttrs>classAttr:RPCManager.promptStyle</classAttrs>
    <classAttrs>classAttr:RPCManager.useCursorTracker</classAttrs>
    <classAttrs>classAttr:RPCManager.promptCursor</classAttrs>
    <classAttrs>classAttr:RPCManager.fetchDataPrompt</classAttrs>
    <classAttrs>classAttr:RPCManager.showPrompt</classAttrs>
    <classAttrs>classAttr:RPCManager.actionURL</classAttrs>
    <classAttrs>classAttr:RPCManager.useXmlHttpRequest</classAttrs>
    <classAttrs>classAttr:RPCManager.defaultTransport</classAttrs>
    <classAttrs>classAttr:RPCManager.credentialsURL</classAttrs>
    <classMethods>classMethod:RPCManager.xmlHttpRequestAvailable</classMethods>
    <classMethods>classMethod:RPCManager.send</classMethods>
    <classMethods>classMethod:RPCManager.sendProxied</classMethods>
    <classMethods>classMethod:RPCManager.sendRequest</classMethods>
    <classMethods>classMethod:RPCManager.startQueue</classMethods>
    <classMethods>classMethod:RPCManager.cancelQueue</classMethods>
    <classMethods>classMethod:RPCManager.clearTransaction</classMethods>
    <classMethods>classMethod:RPCManager.resendTransaction</classMethods>
    <classMethods>classMethod:RPCManager.sendQueue</classMethods>
    <classMethods>classMethod:RPCManager.handleError</classMethods>
    <classMethods>classMethod:RPCManager.loginRequired</classMethods>
    <treeLocation>Client Reference/RPC</treeLocation>
</docItem>
<docItem ref="method:TabSet.closeClick" flags="" description=" Method fired when the user clicks the &quot;close&quot; icon for a tab.&lt;br&gt;&amp;#010 This icon will be visible if ${isc.DocUtils.linkForRef('attr:Tab.canClose')} is true for the tab in question.&lt;br&gt;&amp;#010 Default implementation will remove the tab from the tabSet.&amp;#010" name="closeClick" type="method" definingClass="class:TabSet">
<params description="tab to close" optional="false" name="tab" type="Tab">
</params>
</docItem>
<docItem ref="method:DataSourceField.getFieldValue" flags="A" description=" Function or JavaScript expression used to retrieve the field's value from the XML element or&amp;#010 JSON record returned from a web service.&amp;#010 &lt;P&gt;&amp;#010 This is an advanced API for use when a ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','valueXPath')} setting&amp;#010 is insufficient to derive a field's value, yet an implementation of&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} is overkill.&amp;#010&amp;#010" name="getFieldValue" type="method" definingClass="class:DataSourceField">
<params description="record object selected from web service response data                                      by ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}" optional="false" name="record" type="Object or XMLElement">
</params>
<params description="default value derived by the method described in                    ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')}" optional="false" name="value" type="any">
</params>
<params description="DataSourceField definition" optional="false" name="field" type="DataSourceField">
</params>
<params description="name of the DataSource field" optional="false" name="fieldName" type="String">
</params>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:ListGrid.rowEditorEnter" flags="A" description=" Callback fired when the user starts editing a new row.&amp;#010&amp;#010" name="rowEditorEnter" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.editorEnter">
</seeAlso>
<params description="record for the cell being edited" optional="false" name="record" type="ListGridField">
</params>
<params description="edit values for the current row" optional="false" name="editValues" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="method:DynamicForm.cancel" flags="" description="&amp;#010 This method exists for clean integration with existing server frameworks that have a 'cancel'&amp;#010 feature which typically clears session state associated with the form.  When this method is&amp;#010 called, an RPC is sent to the server with a parameter named&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamName')} with the value&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamValue')}.&lt;p&gt;&amp;#010&amp;#010 Note that no other form data is sent.  By default the current top-level page is replaced with the&amp;#010 reply.  If you wish to ignore the server reply instead, call this method like this:&amp;#010 &lt;pre&gt;&amp;#010 dynamicFormInstance.cancel({ignoreTimeout: true, target: null});&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cancel" type="method" definingClass="class:DynamicForm">
<params description="additional properties to set on the RPCRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>submitting</groups>
</docItem>
<docItem ref="attr:Layout.stackZIndex" flags="IR" description="For use in conjunction with ${isc.DocUtils.linkForRef('attr:Layout.memberOverlap')}, controls the z-stacking order of&amp;#010 members.&amp;#010 &lt;P&gt;&amp;#010 If &quot;lastOnTop&quot;, members stack from the first member at bottom to the last member at&amp;#010 top. If &quot;firstOnTop&quot;, members stack from the last member at bottom to the first member&amp;#010 at top." name="stackZIndex" valueType="string" defaultValue="null" type="attr" definingClass="class:Layout">
</docItem>
<docItem ref="method:Canvas.mouseUp" flags="A" description="&amp;#010 Executed when the left mouse is released on this widget.  No default implementation.&amp;#010&amp;#010" name="mouseUp" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customMouseEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:WebService.getOutputHeaderSchema" flags="" description=" Get the schema for each part of the SOAP header for the output message of a given&amp;#010 operation, as a mapping from part name to schema.  For example, given WSDL like:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;soap:header part=&quot;SessionHeader&quot;/&amp;gt;&amp;#010     &amp;lt;soap:header part=&quot;CallOptions&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The following schema would be returned:&amp;#010 &lt;pre&gt;&amp;#010     { SessionHeader : &lt;i&gt;sessionHeaderPartSchema&lt;/i&gt;,&amp;#010       CallOptions : &lt;i&gt;callOptionsPartSchema&lt;/i&gt; }&amp;#010 &lt;/pre&gt;&amp;#010 The schema are instances of ${isc.DocUtils.linkForRef('class:DataSource')} that can be inspected to discover the&amp;#010 elements and types that are legal in that header part, and can construct a valid SOAP&amp;#010 header part if ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} is invoked.&amp;#010&amp;#010" name="getOutputHeaderSchema" type="method" definingClass="class:WebService">
<params description="name of an operation from this web service" optional="false" name="operationName" type="String">
</params>
<returns description="mapping from partName to schema" type="Object"></returns>
</docItem>
<docItem ref="attr:StretchImgButton.showRollOver" flags="IRW" description="Should we visibly change state when the mouse goes over this object?" name="showRollOver" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:ListGrid.booleanImageWidth" flags="IRWA" description="Width for the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} and ${isc.DocUtils.linkForRef('attr:ListGrid.booleanFalseImage')}" name="booleanImageWidth" valueType="number" defaultValue="16" type="attr" definingClass="class:ListGrid">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="class:HiddenItem" description="HiddenItems track a value but have no visible appearance and do not take up space in the form&amp;#010 layout.&amp;#010 &lt;P&gt;&amp;#010 When using SmartClient databinding it is usually not necessary to use a HiddenItem, since&amp;#010 the DynamicForm will track values for which no actual form control exists, and will submit&amp;#010 these 'extra' values when ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} is called.  HiddenItems only apply&amp;#010 to forms that are submitted like ordinary HTML forms, via the&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')} method." name="HiddenItem" type="class">
    <attrs>attr:HiddenItem.showTitle</attrs>
    <attrs>attr:HiddenItem.colSpan</attrs>
    <attrs>attr:HiddenItem.rowSpan</attrs>
</docItem>
<docItem type="object" ref="object:FormItemIcon" description="Form item icon descriptor objects used by Form Items to specify the appearance and&amp;#010  behavior of icons displayed after the item in the page flow." name="FormItemIcon">
    <methods>method:FormItemIcon.click</methods>
    <methods>method:FormItemIcon.keyPress</methods>
    <treeLocation>Client Reference/Forms/Form Items/FormItem</treeLocation>
    <attrs>attr:FormItemIcon.src</attrs>
    <attrs>attr:FormItemIcon.showOver</attrs>
    <attrs>attr:FormItemIcon.showFocused</attrs>
    <attrs>attr:FormItemIcon.showFocusedWithIcon</attrs>
    <attrs>attr:FormItemIcon.neverDisable</attrs>
    <attrs>attr:FormItemIcon.width</attrs>
    <attrs>attr:FormItemIcon.height</attrs>
<seeAlso ref="attr:FormItem.icons">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('formIcons')}</examples>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:ListGridField.editorValueMap" flags="IRW" description="A valueMap to use for editors shown for this field.  By default if this is not&amp;#010 specified ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','field.valueMap')} will be used instead.&amp;#010 &lt;P&gt;&amp;#010 Dynamic valueMaps can be provided by implementing ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap')}." name="editorValueMap" valueType="Array or Object" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.getEditorValueMap">
</seeAlso>
<seeAlso ref="method:ListGrid.setEditorValueMap">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Canvas.defaultWidth" flags="IRWA" description="For custom components, establishes a default width for the component.&amp;#010 &lt;P&gt;&amp;#010 For a component that should potentially be sized automatically by a Layout, set this&amp;#010 property rather than ${isc.DocUtils.linkForRef('attr:Canvas.width')} directly, because Layouts regard a width setting as&amp;#010 an explicit size that shouldn't be changed." name="defaultWidth" valueType="Number" defaultValue="100" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Canvas.layoutChildren" flags="A" description="&amp;#010 layoutChildren() is where a Canvas should implement a sizing policy for it's Canvas children.&amp;#010 Since this calls parentResized() on its children, ${isc.DocUtils.linkForRef('method:Canvas.parentResized')} is a good place&amp;#010 for a child to implement a layout policy that can be used within any parent.&amp;#010 &lt;P&gt;&amp;#010 Recommended practice for a Canvas that manages Canvas children is to create those children&amp;#010 without any initial coordinate or size settings and do all sizing when layoutChildren() is&amp;#010 called.&amp;#010 &lt;P&gt;&amp;#010 layoutChildren() is always called at least once before children are drawn, and is called&amp;#010 automatically whenever the viewport size changes (which includes both resizing and&amp;#010 introduction/removal of scrolling).  layoutChildren() can also be manually invoked in any&amp;#010 other component-specific situation which changes the layout.&amp;#010 &lt;P&gt;&amp;#010 NOTE: layoutChildren() may be called before draw() if a widget is resized before draw(), so&amp;#010 be sure to avoid errors such as assuming that any children you automatically create have&amp;#010 already been created.&amp;#010 &lt;P&gt;&amp;#010 NOTE: auto-sizing: layoutChildren() is also called once during the initial draw(), before&amp;#010 children are drawn, with a &quot;reason&quot; of &quot;initial draw&quot;.  During this invocation of&amp;#010 layoutChildren() it is legal to directly draw children (call child.draw()), which is&amp;#010 otherwise never allowed.  This allows a Canvas to implement an auto-sizing layout policy by&amp;#010 drawing some children before deciding on the sizes of remaining children, which is far more&amp;#010 efficient than drawing all children and resizing some of them after they are drawn.&amp;#010" name="layoutChildren" type="method" definingClass="class:Canvas">
<params description="reason why layoutChildren() is being called, passed when framework                        code invokes layoutChildren()" optional="false" name="reason" type="string">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectFacetValues" flags="" description="&amp;#010 deselect the header showing a given set of facet values&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectFacetValues" type="method" definingClass="class:CubeGrid">
<params description="facetVales to deselect" optional="false" name="facetValues" type="facetValues object">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="group:scrolling" description="Scrolling and clipping of objects when part of the object is obscured" name="scrolling" type="group">
    <refs>method:Canvas.getScrollLeft</refs>
    <refs>method:Canvas.getScrollTop</refs>
    <refs>method:Canvas.getScrollbarSize</refs>
    <refs>method:Canvas.getScrollBottom</refs>
    <refs>method:Canvas.getScrollRight</refs>
    <refs>method:Canvas.scrollToTop</refs>
    <refs>method:Canvas.scrollToBottom</refs>
    <refs>method:Canvas.scrollToLeft</refs>
    <refs>method:Canvas.scrollToRight</refs>
    <refs>method:Canvas.scrollBy</refs>
    <refs>method:Canvas.scrollByPercent</refs>
    <refs>method:Canvas.scrollTo</refs>
    <refs>method:Canvas.scrolled</refs>
    <refs>method:Canvas.scrollToPercent</refs>
    <refs>attr:Canvas.showCustomScrollbars</refs>
    <refs>attr:Canvas.scrollbarSize</refs>
</docItem>
<docItem ref="method:Selection.selectList" flags="" description=" Select an array of items (subset of the entire list)&amp;#010" name="selectList" type="method" definingClass="class:Selection">
<params description="listarray of objects to select" optional="true" name="" type="object">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:DynamicForm.titleHoverHTML" flags="A" description="  Retrieves the HTML to display in a hover canvas when the user holds the mousepointer over&amp;#010  some item's title.  Return null to suppress the hover canvas altogether.&lt;br&gt;&amp;#010  Default implementation returns the prompt for the item if defined.  If no prompt is defined&amp;#010  and the item title is clipped, the item title will be shown in a hover by default.&lt;br&gt;&amp;#010  Can be overridden via &lt;code&gt;item.titleHoverHTML()&lt;/code&gt;&amp;#010&amp;#010" name="titleHoverHTML" type="method" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.prompt">
</seeAlso>
<seeAlso ref="method:FormItem.titleHoverHTML">
</seeAlso>
<params description="Item the user is hovering over." optional="false" name="item" type="FormItem">
</params>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showDown" flags="IRW" description="Should we visibly change state when the mouse goes down in this object?" name="showDown" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="method:FormItem.getIconWidth" flags="A" description="	Takes an icon definition object, and returns the width for that icon in px.&amp;#010" name="getIconWidth" type="method" definingClass="class:FormItem">
<params description="icon definition object for this item." optional="false" name="icon" type="object">
</params>
<returns description="width of the form item icon in px" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="classMethod:Log.getLogPriorities" flags="" description=" Get all priority settings as an object mapping category names to priority levels.&amp;#010&amp;#010" name="getLogPriorities" type="classMethod" definingClass="class:Log">
<params description="Optional param to get priorities specific to                                            some ISC class or instance." optional="true" name="object" type="Class or Instance object">
</params>
<params description="If this method is retrieving the priorities specific                                   to logging for some class or instance, this parameter&amp;#010                                  can be used to view only the overrides to the default&amp;#010                                  log priorites on this object." optional="true" name="overridesOnly" type="boolean">
</params>
<returns description="priority settings" type="Object"></returns>
</docItem>
<docItem ref="method:StatefulCanvas.setBaseStyle" flags="" description=" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010" name="setBaseStyle" type="method" definingClass="class:StatefulCanvas">
<params description="new base style" optional="false" name="style" type="className">
</params>
</docItem>
<docItem ref="method:CubeGrid.selectCell" flags="" description="&amp;#010  select / deselect a single cell - accepts cell ID or cell record.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectCell" type="method" definingClass="class:CubeGrid">
<params description="cell to select / deselect" optional="false" name="cell" type="ID | object">
</params>
<params description="new selection state (if null, defaults to true)" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="group:skins" description="Properties used to manage to the the overall appearance of the application.&amp;#010 &lt;P&gt;&amp;#010 A &quot;skin&quot; consists of &amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;skin_styles.css&lt;/code&gt;: a .css file defining the set of &amp;#010     classes to apply to SmartClient components' visual elements&lt;/li&gt;&amp;#010 &lt;li&gt;&lt;code&gt;images/&lt;/code&gt;: a directory of image files used as part of visual &amp;#010     components&lt;/li&gt;&amp;#010 &lt;li&gt;&lt;code&gt;load_skin.js&lt;/code&gt;: a .js file containing overrides for various &amp;#010     SmartClient component properties that affect the appearance of those components.&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 Skins are loaded via the &lt;code&gt;skin&lt;/code&gt; attribute of the ${isc.DocUtils.linkForRef('group:loadISCTag')} or &amp;#010 by including the appropriate &lt;code&gt;load_skin.js&lt;/code&gt; source file with a standard script&amp;#010 include tag.&amp;#010 &lt;P&gt;&amp;#010 To create a custom skin, we suggest making a complete copy of an existing skin, then&amp;#010 modifying the media, css class definitions and component property overrides you wish to&amp;#010 change.&amp;#010 &lt;P&gt;&amp;#010 Note that the &lt;code&gt;load_skin.js&lt;/code&gt; file contains a ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} &amp;#010 directive to set up the skin dir (used to ensure media is retrieved from the appropriate&amp;#010 directory), and a ${isc.DocUtils.linkForRef('classMethod:Page.loadStyleSheet')} directive to load the .css file.&amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('group:skinning','Skinning Overview')} for more information." name="skins" type="group">
    <refs>classMethod:Page.setSkinDir</refs>
    <refs>classMethod:Page.loadStyleSheet</refs>
<seeAlso ref="group:appearance">
</seeAlso>
<seeAlso ref="group:images">
</seeAlso>
<seeAlso ref="group:files">
</seeAlso>
</docItem>
<docItem exampleConfig="ListGrid.xml" type="class" ref="class:ListGrid" description="A ListGrid displays a list of Objects in a grid, where each row represents one object and&amp;#010 each cell in the row represents one property." name="ListGrid">
    <methods>method:ListGrid.getVisibleRows</methods>
    <methods>method:ListGrid.getDrawnRows</methods>
    <methods>method:ListGrid.getCellStyle</methods>
    <methods>method:ListGrid.getCellCSSText</methods>
    <methods>method:ListGrid.refreshCellStyle</methods>
    <methods>method:ListGrid.cellOver</methods>
    <methods>method:ListGrid.rowOver</methods>
    <methods>method:ListGrid.cellOut</methods>
    <methods>method:ListGrid.rowOut</methods>
    <methods>method:ListGrid.cellHover</methods>
    <methods>method:ListGrid.rowHover</methods>
    <methods>method:ListGrid.cellHoverHTML</methods>
    <methods>method:ListGrid.cellContextClick</methods>
    <methods>method:ListGrid.rowContextClick</methods>
    <methods>method:ListGrid.cellMouseDown</methods>
    <methods>method:ListGrid.rowMouseDown</methods>
    <methods>method:ListGrid.cellMouseUp</methods>
    <methods>method:ListGrid.rowMouseUp</methods>
    <methods>method:ListGrid.cellClick</methods>
    <methods>method:ListGrid.cellDoubleClick</methods>
    <methods>method:ListGrid.setData</methods>
    <methods>method:ListGrid.setBodyOverflow</methods>
    <methods>method:ListGrid.setFieldProperties</methods>
    <methods>method:ListGrid.showField</methods>
    <methods>method:ListGrid.hideField</methods>
    <methods>method:ListGrid.fieldIsVisible</methods>
    <methods>method:ListGrid.getTitleField</methods>
    <methods>method:ListGrid.setFields</methods>
    <methods>method:ListGrid.focusInFilterEditor</methods>
    <methods>method:ListGrid.filterByEditor</methods>
    <methods>method:ListGrid.getFieldState</methods>
    <methods>method:ListGrid.setFieldState</methods>
    <methods>method:ListGrid.getSelectedState</methods>
    <methods>method:ListGrid.setSelectedState</methods>
    <methods>method:ListGrid.getSortState</methods>
    <methods>method:ListGrid.setSortState</methods>
    <methods>method:ListGrid.getViewState</methods>
    <methods>method:ListGrid.setViewState</methods>
    <methods>method:ListGrid.refreshFields</methods>
    <methods>method:ListGrid.getFieldWidth</methods>
    <methods>method:ListGrid.getBaseStyle</methods>
    <methods>method:ListGrid.getCellValue</methods>
    <methods>method:ListGrid.getCellAlign</methods>
    <methods>method:ListGrid.getCellVAlign</methods>
    <methods>method:ListGrid.getValueIcon</methods>
    <methods>method:ListGrid.rowClick</methods>
    <methods>method:ListGrid.rowDoubleClick</methods>
    <methods>method:ListGrid.selectRecord</methods>
    <methods>method:ListGrid.deselectRecord</methods>
    <methods>method:ListGrid.selectRecords</methods>
    <methods>method:ListGrid.deselectRecords</methods>
    <methods>method:ListGrid.selectAllRecords</methods>
    <methods>method:ListGrid.deselectAllRecords</methods>
    <methods>method:ListGrid.bodyKeyPress</methods>
    <methods>method:ListGrid.getFocusRow</methods>
    <methods>method:ListGrid.recordClick</methods>
    <methods>method:ListGrid.recordDoubleClick</methods>
    <methods>method:ListGrid.setShowFilterEditor</methods>
    <methods>method:ListGrid.getFilterEditorValueMap</methods>
    <methods>method:ListGrid.getFilterEditorType</methods>
    <methods>method:ListGrid.canEditCell</methods>
    <methods>method:ListGrid.startEditing</methods>
    <methods>method:ListGrid.stopHover</methods>
    <methods>method:ListGrid.getEditorValueMap</methods>
    <methods>method:ListGrid.getEditorValueIcons</methods>
    <methods>method:ListGrid.setEditorValueMap</methods>
    <methods>method:ListGrid.getEditorType</methods>
    <methods>method:ListGrid.refreshCell</methods>
    <methods>method:ListGrid.refreshRow</methods>
    <methods>method:ListGrid.startEditingNew</methods>
    <methods>method:ListGrid.getAllEditRows</methods>
    <methods>method:ListGrid.getEditValues</methods>
    <methods>method:ListGrid.getEditedRecord</methods>
    <methods>method:ListGrid.getEditedCell</methods>
    <methods>method:ListGrid.setEditValues</methods>
    <methods>method:ListGrid.setEditValue</methods>
    <methods>method:ListGrid.getEditValue</methods>
    <methods>method:ListGrid.clearEditValue</methods>
    <methods>method:ListGrid.getEditRow</methods>
    <methods>method:ListGrid.getEditCol</methods>
    <methods>method:ListGrid.getEditField</methods>
    <methods>method:ListGrid.cancelEditing</methods>
    <methods>method:ListGrid.endEditing</methods>
    <methods>method:ListGrid.discardAllEdits</methods>
    <methods>method:ListGrid.discardEdits</methods>
    <methods>method:ListGrid.saveEdits</methods>
    <methods>method:ListGrid.hasChanges</methods>
    <methods>method:ListGrid.cellHasChanges</methods>
    <methods>method:ListGrid.saveAllEdits</methods>
    <methods>method:ListGrid.validateRow</methods>
    <methods>method:ListGrid.validateCell</methods>
    <methods>method:ListGrid.getRequiredFieldMessage</methods>
    <methods>method:ListGrid.hasErrors</methods>
    <methods>method:ListGrid.rowHasErrors</methods>
    <methods>method:ListGrid.cellHasErrors</methods>
    <methods>method:ListGrid.getRowErrors</methods>
    <methods>method:ListGrid.getCellErrors</methods>
    <methods>method:ListGrid.setFieldError</methods>
    <methods>method:ListGrid.setRowErrors</methods>
    <methods>method:ListGrid.clearFieldError</methods>
    <methods>method:ListGrid.clearRowErrors</methods>
    <methods>method:ListGrid.setDragTracker</methods>
    <methods>method:ListGrid.getDragTrackerIcon</methods>
    <methods>method:ListGrid.getDragTrackerTitle</methods>
    <methods>method:ListGrid.willAcceptDrop</methods>
    <methods>method:ListGrid.transferSelectedData</methods>
    <methods>method:ListGrid.recordDrop</methods>
    <methods>method:ListGrid.getDragData</methods>
    <methods>method:ListGrid.transferDragData</methods>
    <methods>method:ListGrid.getRecord</methods>
    <methods>method:ListGrid.getCellRecord</methods>
    <methods>method:ListGrid.getTotalRows</methods>
    <methods>method:ListGrid.getFieldName</methods>
    <methods>method:ListGrid.getField</methods>
    <methods>method:ListGrid.getFieldNum</methods>
    <methods>method:ListGrid.setValueMap</methods>
    <methods>method:ListGrid.getRecordIndex</methods>
    <methods>method:ListGrid.getEventRow</methods>
    <methods>method:ListGrid.getEventColumn</methods>
    <methods>method:ListGrid.anySelected</methods>
    <methods>method:ListGrid.selectionChanged</methods>
    <methods>method:ListGrid.freezeField</methods>
    <methods>method:ListGrid.unfreezeField</methods>
    <methods>method:ListGrid.setHeaderHeight</methods>
    <methods>method:ListGrid.setShowHeader</methods>
    <methods>method:ListGrid.reorderField</methods>
    <methods>method:ListGrid.reorderFields</methods>
    <methods>method:ListGrid.resizeField</methods>
    <methods>method:ListGrid.displayHeaderContextMenu</methods>
    <methods>method:ListGrid.getToggleFreezeText</methods>
    <methods>method:ListGrid.getGroupByText</methods>
    <methods>method:ListGrid.getHeaderContextMenuItems</methods>
    <methods>method:ListGrid.unsort</methods>
    <methods>method:ListGrid.sort</methods>
    <methods>method:ListGrid.chartData</methods>
    <methods>method:ListGrid.chartRow</methods>
    <methods>method:ListGrid.chartColumn</methods>
    <methods>method:ListGrid.groupBy</methods>
    <methods>method:ListGrid.getGroupNodeHTML</methods>
    <methods>method:ListGrid.ungroup</methods>
    <methods>method:ListGrid.cellChanged</methods>
    <methods>method:ListGrid.editComplete</methods>
    <methods>method:ListGrid.editFailed</methods>
    <methods>method:ListGrid.editorEnter</methods>
    <methods>method:ListGrid.rowEditorEnter</methods>
    <methods>method:ListGrid.editorExit</methods>
    <methods>method:ListGrid.rowEditorExit</methods>
    <methods>method:ListGrid.formatCellValue</methods>
    <methods>method:ListGrid.formatEditorValue</methods>
    <methods>method:ListGrid.parseEditorValue</methods>
    <methods>method:ListGrid.fieldStateChanged</methods>
    <methods>method:ListGrid.fetchData</methods>
    <methods>method:ListGrid.filterData</methods>
    <methods>method:ListGrid.fetchRelatedData</methods>
    <methods>method:ListGrid.clearCriteria</methods>
    <methods>method:ListGrid.addData</methods>
    <methods>method:ListGrid.updateData</methods>
    <methods>method:ListGrid.removeData</methods>
    <methods>method:ListGrid.removeSelectedData</methods>
    <methods>method:ListGrid.getSelection</methods>
    <methods>method:ListGrid.getSelectedRecord</methods>
    <treeLocation>Client Reference/Grids</treeLocation>
    <attrs>attr:ListGrid.fastCellUpdates</attrs>
    <attrs>attr:ListGrid.styleName</attrs>
    <attrs>attr:ListGrid.data</attrs>
    <attrs>attr:ListGrid.fields</attrs>
    <attrs>attr:ListGrid.dataSource</attrs>
    <attrs>attr:ListGrid.useAllDataSourceFields</attrs>
    <attrs>attr:ListGrid.showDetailFields</attrs>
    <attrs>attr:ListGrid.titleField</attrs>
    <attrs>attr:ListGrid.dataProperties</attrs>
    <attrs>attr:ListGrid.originalData</attrs>
    <attrs>attr:ListGrid.groupTree</attrs>
    <attrs>attr:ListGrid.groupStartOpen</attrs>
    <attrs>attr:ListGrid.groupNodeStyle</attrs>
    <attrs>attr:ListGrid.groupIcon</attrs>
    <attrs>attr:ListGrid.groupIconSize</attrs>
    <attrs>attr:ListGrid.groupIndentSize</attrs>
    <attrs>attr:ListGrid.groupLeadingIndent</attrs>
    <attrs>attr:ListGrid.canGroupBy</attrs>
    <attrs>attr:ListGrid.groupByMaxRecords</attrs>
    <attrs>attr:ListGrid.isGrouped</attrs>
    <attrs>attr:ListGrid.nullGroupTitle</attrs>
    <attrs>attr:ListGrid.groupByField</attrs>
    <attrs>attr:ListGrid.valueIconSize</attrs>
    <attrs>attr:ListGrid.valueIconWidth</attrs>
    <attrs>attr:ListGrid.valueIconHeight</attrs>
    <attrs>attr:ListGrid.valueIconLeftPadding</attrs>
    <attrs>attr:ListGrid.valueIconRightPadding</attrs>
    <attrs>attr:ListGrid.imageSize</attrs>
    <attrs>attr:ListGrid.modalEditing</attrs>
    <attrs>attr:ListGrid.showAllRecords</attrs>
    <attrs>attr:ListGrid.drawAheadRatio</attrs>
    <attrs>attr:ListGrid.quickDrawAheadRatio</attrs>
    <attrs>attr:ListGrid.scrollRedrawDelay</attrs>
    <attrs>attr:ListGrid.dataPageSize</attrs>
    <attrs>attr:ListGrid.body</attrs>
    <attrs>attr:ListGrid.bodyOverflow</attrs>
    <attrs>attr:ListGrid.bodyBackgroundColor</attrs>
    <attrs>attr:ListGrid.bodyStyleName</attrs>
    <attrs>attr:ListGrid.emptyCellValue</attrs>
    <attrs>attr:ListGrid.cellHeight</attrs>
    <attrs>attr:ListGrid.fixedRecordHeights</attrs>
    <attrs>attr:ListGrid.leaveScrollbarGap</attrs>
    <attrs>attr:ListGrid.wrapCells</attrs>
    <attrs>attr:ListGrid.cellPadding</attrs>
    <attrs>attr:ListGrid.dateFormatter</attrs>
    <attrs>attr:ListGrid.dateInputFormat</attrs>
    <attrs>attr:ListGrid.timeFormatter</attrs>
    <attrs>attr:ListGrid.baseStyle</attrs>
    <attrs>attr:ListGrid.editFailedBaseStyle</attrs>
    <attrs>attr:ListGrid.editFailedCSSText</attrs>
    <attrs>attr:ListGrid.editPendingBaseStyle</attrs>
    <attrs>attr:ListGrid.editPendingCSSText</attrs>
    <attrs>attr:ListGrid.recordCustomStyleProperty</attrs>
    <attrs>attr:ListGrid.recordBaseStyleProperty</attrs>
    <attrs>attr:ListGrid.frozenBaseStyle</attrs>
    <attrs>attr:ListGrid.shrinkForFreeze</attrs>
    <attrs>attr:ListGrid.alternateRecordStyles</attrs>
    <attrs>attr:ListGrid.alternateRecordFrequency</attrs>
    <attrs>attr:ListGrid.generateClickOnSpace</attrs>
    <attrs>attr:ListGrid.generateClickOnEnter</attrs>
    <attrs>attr:ListGrid.generateDoubleClickOnSpace</attrs>
    <attrs>attr:ListGrid.generateDoubleClickOnEnter</attrs>
    <attrs>attr:ListGrid.arrowKeyAction</attrs>
    <attrs>attr:ListGrid.showRollOver</attrs>
    <attrs>attr:ListGrid.canHover</attrs>
    <attrs>attr:ListGrid.showHover</attrs>
    <attrs>attr:ListGrid.hoverStyle</attrs>
    <attrs>attr:ListGrid.selection</attrs>
    <attrs>attr:ListGrid.selectionType</attrs>
    <attrs>attr:ListGrid.canDragSelect</attrs>
    <attrs>attr:ListGrid.showEmptyMessage</attrs>
    <attrs>attr:ListGrid.emptyMessage</attrs>
    <attrs>attr:ListGrid.emptyMessageStyle</attrs>
    <attrs>attr:ListGrid.loadingDataMessage</attrs>
    <attrs>attr:ListGrid.loadingDataMessageStyle</attrs>
    <attrs>attr:ListGrid.loadingMessage</attrs>
    <attrs>attr:ListGrid.singleCellValueProperty</attrs>
    <attrs>attr:ListGrid.isSeparatorProperty</attrs>
    <attrs>attr:ListGrid.showFilterEditor</attrs>
    <attrs>attr:ListGrid.filterEditorHeight</attrs>
    <attrs>attr:ListGrid.canEdit</attrs>
    <attrs>attr:ListGrid.recordEditProperty</attrs>
    <attrs>attr:ListGrid.editByCell</attrs>
    <attrs>attr:ListGrid.saveByCell</attrs>
    <attrs>attr:ListGrid.validateByCell</attrs>
    <attrs>attr:ListGrid.validateOnChange</attrs>
    <attrs>attr:ListGrid.neverValidate</attrs>
    <attrs>attr:ListGrid.filterByCell</attrs>
    <attrs>attr:ListGrid.filterOnKeypress</attrs>
    <attrs>attr:ListGrid.waitForSave</attrs>
    <attrs>attr:ListGrid.stopOnErrors</attrs>
    <attrs>attr:ListGrid.autoSaveEdits</attrs>
    <attrs>attr:ListGrid.confirmCancelEditing</attrs>
    <attrs>attr:ListGrid.cancelEditingConfirmationMessage</attrs>
    <attrs>attr:ListGrid.confirmDiscardEdits</attrs>
    <attrs>attr:ListGrid.confirmDiscardEditsMessage</attrs>
    <attrs>attr:ListGrid.discardEditsSaveButtonTitle</attrs>
    <attrs>attr:ListGrid.rowEndEditAction</attrs>
    <attrs>attr:ListGrid.listEndEditAction</attrs>
    <attrs>attr:ListGrid.enterKeyEditAction</attrs>
    <attrs>attr:ListGrid.escapeKeyEditAction</attrs>
    <attrs>attr:ListGrid.editEvent</attrs>
    <attrs>attr:ListGrid.editOnFocus</attrs>
    <attrs>attr:ListGrid.selectOnEdit</attrs>
    <attrs>attr:ListGrid.longTextEditorThreshold</attrs>
    <attrs>attr:ListGrid.longTextEditorType</attrs>
    <attrs>attr:ListGrid.header</attrs>
    <attrs>attr:ListGrid.headerHeight</attrs>
    <attrs>attr:ListGrid.showHeader</attrs>
    <attrs>attr:ListGrid.headerBarStyle</attrs>
    <attrs>attr:ListGrid.headerBackgroundColor</attrs>
    <attrs>attr:ListGrid.headerButtonConstructor</attrs>
    <attrs>attr:ListGrid.headerBaseStyle</attrs>
    <attrs>attr:ListGrid.headerTitleStyle</attrs>
    <attrs>attr:ListGrid.frozenHeaderBaseStyle</attrs>
    <attrs>attr:ListGrid.frozenHeaderTitleStyle</attrs>
    <attrs>attr:ListGrid.headerButtonDefaults</attrs>
    <attrs>attr:ListGrid.headerButtonProperties</attrs>
    <attrs>attr:ListGrid.sorterConstructor</attrs>
    <attrs>attr:ListGrid.sorterDefaults</attrs>
    <attrs>attr:ListGrid.sorterProperties</attrs>
    <attrs>attr:ListGrid.canSort</attrs>
    <attrs>attr:ListGrid.sortFieldNum</attrs>
    <attrs>attr:ListGrid.sortDirection</attrs>
    <attrs>attr:ListGrid.showSortArrow</attrs>
    <attrs>attr:ListGrid.canPickFields</attrs>
    <attrs>attr:ListGrid.canFreezeFields</attrs>
    <attrs>attr:ListGrid.showHeaderContextMenu</attrs>
    <attrs>attr:ListGrid.showHeaderMenuButton</attrs>
    <attrs>attr:ListGrid.headerMenuButtonConstructor</attrs>
    <attrs>attr:ListGrid.headerMenuButton</attrs>
    <attrs>attr:ListGrid.headerMenuButtonIcon</attrs>
    <attrs>attr:ListGrid.headerMenuButtonIconWidth</attrs>
    <attrs>attr:ListGrid.headerMenuButtonIconHeight</attrs>
    <attrs>attr:ListGrid.headerMenuButtonWidth</attrs>
    <attrs>attr:ListGrid.headerMenuButtonHeight</attrs>
    <attrs>attr:ListGrid.canDragRecordsOut</attrs>
    <attrs>attr:ListGrid.canAcceptDroppedRecords</attrs>
    <attrs>attr:ListGrid.canReorderRecords</attrs>
    <attrs>attr:ListGrid.canReorderFields</attrs>
    <attrs>attr:ListGrid.canResizeFields</attrs>
    <attrs>attr:ListGrid.dragTrackerMode</attrs>
    <attrs>attr:ListGrid.resizeFieldsInRealTime</attrs>
    <attrs>attr:ListGrid.dragDataAction</attrs>
    <attrs>attr:ListGrid.skinImgDir</attrs>
    <attrs>attr:ListGrid.sortAscendingImage</attrs>
    <attrs>attr:ListGrid.sortDescendingImage</attrs>
    <attrs>attr:ListGrid.trackerImage</attrs>
    <attrs>attr:ListGrid.booleanTrueImage</attrs>
    <attrs>attr:ListGrid.booleanFalseImage</attrs>
    <attrs>attr:ListGrid.booleanImageWidth</attrs>
    <attrs>attr:ListGrid.booleanImageHeight</attrs>
    <attrs>attr:ListGrid.dragTrackerStyle</attrs>
    <attrs>attr:ListGrid.freezeOnRightText</attrs>
    <attrs>attr:ListGrid.freezeOnLeftText</attrs>
    <attrs>attr:ListGrid.sortFieldAscendingText</attrs>
    <attrs>attr:ListGrid.sortFieldDescendingText</attrs>
    <attrs>attr:ListGrid.fieldVisibilitySubmenuTitle</attrs>
    <attrs>attr:ListGrid.ungroupText</attrs>
    <attrs>attr:ListGrid.autoFetchData</attrs>
    <attrs>attr:ListGrid.initialCriteria</attrs>
    <implementsInterfaces>DataBoundComponent</implementsInterfaces>
</docItem>
<docItem ref="attr:SectionStack.sections" flags="IR" description="List of sections of components managed by this SectionStack." name="sections" valueType="Array of SectionStackSection Properties" defaultValue="null" type="attr" definingClass="class:SectionStack">
    <getter>getSections</getter>
<seeAlso ref="method:SectionStack.getSections">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="attr:Menu.showSubmenus" flags="IRW" description="A boolean, indicating whether the submenu indicator column should be displayed. If&amp;#010 showSubmenus is not set, the menu will show the indicator column only if one of its&amp;#010 items specifies a submenu property. If showSubmenus is false, the submenu arrows&amp;#010 will not be displayed, but submenus will still appear on rollover." name="showSubmenus" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="attr:SimpleType.editorType" flags="IR" description="Classname of the FormItem that should be the default for editing values of this type (eg&amp;#010 &quot;SelectItem&quot;).&amp;#010 &lt;P&gt;&amp;#010 You can create a simple custom FormItem by adding default ${isc.DocUtils.linkForRef('attr:FormItem.icons')} that&amp;#010 launch custom value picking dialogs (an example is in the &lt;i&gt;QuickStart&amp;#010 Guide&lt;/i&gt;, Chapter 9, &lt;i&gt;Extending SmartClient&lt;/i&gt;).  By setting simpleType.editorType&amp;#010 to the name of your custom FormItem, forms will automatically use the custom FormItem,&amp;#010 as will grids performing ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','inline editing')}." name="editorType" valueType="FormItem ClassName" defaultValue="null" type="attr" definingClass="class:SimpleType">
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.snapEdge" description="If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined to this widget, this property can be used to&amp;#010 define which edge of this widget should be snapped to an edge of the master or parent &amp;#010 element.&amp;#010 &lt;P&gt;&amp;#010 If unspecified the, default snapTo behavior is set up to align the &quot;snapTo&quot; edge of this &amp;#010 widget width the snapTo edge of the master or parent." name="snapEdge" valueType="String" defaultValue="null" definingClass="class:Canvas">
    <getter>getSnapEdge</getter>
    <setter>setSnapEdge</setter>
<seeAlso ref="attr:Canvas.snapTo">
</seeAlso>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Tree.indexOf" flags="" description=" Return the position in the list of the first instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="indexOf" type="method" definingClass="class:Tree">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="earliest index to consider" optional="true" name="pos" type="number">
</params>
<params description="last index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:TreeGrid.folderIcon" flags="IRW" description="The URL of the base icon for all folder nodes in this treeGrid. Note that this URL will&amp;#010 have ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} or &amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} appended to indicate state changes if appropriate - &amp;#010 see documentation on  ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} and ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')}." name="folderIcon" valueType="SCImgURL" defaultValue="&quot;[SKIN]folder.gif&quot;" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:ListGrid.editPendingCSSText" flags="IRWA" description="Custom CSS text to be applied to cells with pending edits that have not yet been&amp;#010  submitted.&lt;br&gt;&amp;#010 For further customization of styling for cells with pending edits use&amp;#010 &lt;code&gt;this.editPendingBaseStyle&lt;/code&gt; instead." name="editPendingCSSText" valueType="string" defaultValue="&quot;border:color:#0066CC;&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.editFailedBaseStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.canMoveFacets" flags="IRW" description="Whether row and column facets can be rearranged by the user, by dragging and dropping the&amp;#010 facet labels." name="canMoveFacets" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:Button.showDown" flags="IRW" description="Should we visibly change state when the mouse goes down in this object?" name="showDown" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <examples>${isc.DocUtils.linkForExampleId('buttonStates')}</examples>
    <groups>state</groups>
</docItem>
<docItem ref="method:ListGrid.endEditing" flags="" description="&amp;#010 Complete the current edit by storing the value and hiding the inline editor. Note that&amp;#010 if ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')} is true, the value will be saved to the server. &amp;#010&amp;#010" name="endEditing" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.startEditing">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:GridRenderer.snapInsideBorder" flags="IRW" description="If true, snap-to-cell drops will snap the dropped object inside the selected cell's border.&amp;#010 If false, snap-to-cell drops will snap the dropped object to the edge of the selected cell, &amp;#010 regardless of borders" name="snapInsideBorder" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.snapToCells">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:CubeGrid.bodyMinWidth" flags="IRWA" description="Minimum width for the body of this cubeGrid" name="bodyMinWidth" valueType="number" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="method:HTMLFlow.handleError" flags="" description="&amp;#010 This method is called when a transport error occurs.  Typically, this is the result of the&amp;#010 server returning an HTTP error code such as 404 - document not found.  You can inspect the&amp;#010 RPCResponse object for the reasons for the error and take appropriate action.  Typical&amp;#010 properties to look at are rpcResponse.status, and rpcResponse.httpResponseCode.&amp;#010 &lt;p&gt;&amp;#010 This method is called from the response processing pipeline.  If you want to provide your&amp;#010 own HTML response that should be rendered into this component as the result of the error,&amp;#010 you can do so by setting rpcResponse.data to your HTML string.  Returning false from this&amp;#010 method suppresses any further response handling.  The default implementation of this method&amp;#010 causes an error message to be logged to the Developer Console and sets the HTML to the error&amp;#010 string.&amp;#010&amp;#010" name="handleError" type="method" definingClass="class:HTMLFlow">
<params description="The RPCRequest that was made to the server" optional="false" name="rpcRequest" type="RPCRequest">
</params>
<params description="The RPCResponse that was received" optional="false" name="rpcResponse" type="RPCResponse">
</params>
<returns description="false to suppress further response processing" type="boolean"></returns>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.showCenter" flags="IR" description="Whether to show media in the center section, that is, behind the decorated Canvas." name="showCenter" valueType="boolean" defaultValue="false" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:Tree.linkNodes" flags="" description="&amp;#010 This method is provided as a mechanism to link new nodes into the tree of modelType&amp;#010 &quot;parent&quot;.  This method takes a list of nodes that must contain at a minimum a unique ID&amp;#010 (keyed by ${isc.DocUtils.linkForRef('attr:Tree.idField')}) and a parent ID (keyed by&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}).  Based on this information, the list of nodes is integrated&amp;#010 into the tree structure.&amp;#010&amp;#010" name="linkNodes" type="method" definingClass="class:Tree">
<seeAlso ref="attr:Tree.data">
</seeAlso>
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<params description="list of nodes to link into the tree." optional="false" name="nodes" type="Array of TreeNode">
</params>
</docItem>
<docItem ref="group:dragResize" name="dragResize" type="group">
    <refs>classMethod:Canvas.getEventEdge</refs>
</docItem>
<docItem ref="attr:FormItem.titleOrientation" flags="IRW" description="On which side of this item should the title be placed.  ${isc.DocUtils.linkForRef('type:TitleOrientation')}&amp;#010 lists valid options.&amp;#010 &lt;P&gt;&amp;#010 Note that titles on the left or right take up a cell in tabular&amp;#010 ${isc.DocUtils.linkForRef('group:formLayout','form layouts')}, but titles on top do not." name="titleOrientation" valueType="TitleOrientation" defaultValue="Canvas.LEFT" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.titleOrientation">
</seeAlso>
    <groups>title</groups>
</docItem>
<docItem ref="method:Toolbar.getButtonNumber" flags="A" description="			get the index of a button in the buttons array&lt;p&gt;&amp;#010          The button can be specified as - &amp;#010          &lt;ul&gt;&amp;#010          &lt;li&gt;an index within this.buttons (just returned)&amp;#010          &lt;li&gt;the ID property of a button&amp;#010          &lt;li&gt;a pointer to the button descriptor object in this.buttons&amp;#010          &lt;li&gt;the actual button widget in this.members&amp;#010          &lt;/ul&gt;&lt;p&gt;&amp;#010			returns -1 if not found&amp;#010&amp;#010" name="getButtonNumber" type="method" definingClass="class:Toolbar">
<params optional="false" name="button" type="number | string  | button object | button widget">
</params>
<returns description="index of the button in question" type="number"></returns>
</docItem>
<docItem ref="attr:ListGrid.sortFieldNum" flags="IRW" description="Specifies the number of the field by which to sort this listGrid. Column numbers&amp;#010          start at 0 for the left-most column." name="sortFieldNum" valueType="number" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('sort')}</examples>
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:SectionItem.sectionExpanded" flags="IR" description="Whether this form section should be initially collapsed. Can be set programatically&amp;#010 via ${isc.DocUtils.linkForRef('method:SectionItem.expandSection')} and ${isc.DocUtils.linkForRef('method:SectionItem.collapseSection')}." name="sectionExpanded" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SectionItem">
    <examples>${isc.DocUtils.linkForExampleId('formSections')}</examples>
</docItem>
<docItem ref="attr:StatefulCanvas.iconOrientation" flags="IR" description="If this button is showing an icon should it appear to the left or right of the title?&amp;#010 valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; and &lt;code&gt;&quot;right&quot;&lt;/code&gt;." name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" type="attr" definingClass="class:StatefulCanvas">
    <setter>setIconOrientation</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem type="class" ref="class:FusionChart" description="Component that wraps the FusionCharts charting engine.&amp;#010 &lt;P&gt;&amp;#010 Provides multiple-series (area, bar, column, line, radar) and single-series (doughnut, pie)&amp;#010 chart types. These charts all depict a single continuous dimension (eg revenue), broken down&amp;#010 by one or two discrete dimensions (eg product, region)." name="FusionChart">
    <methods>method:FusionChart.getDataColor</methods>
    <requiresModules>Analytics</requiresModules>
    <treeLocation>Optional Modules/Analytics</treeLocation>
    <attrs>attr:FusionChart.chartsBaseURL</attrs>
    <attrs>attr:FusionChart.chartURL</attrs>
    <attrs>attr:FusionChart.fusionVersion</attrs>
    <attrs>attr:FusionChart.chartProperties</attrs>
    <attrs>attr:FusionChart.dataColors</attrs>
    <implementsInterfaces>Chart</implementsInterfaces>
</docItem>
<docItem ref="method:GridRenderer.cellMouseDown" flags="A" description=" Called when a cell receives a mousedown event.&amp;#010 &amp;#010" name="cellMouseDown" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:FormItem.showFocused" flags="IRWA" description="When this item recieves focus, should it be re-styled to indicate it has focus?" name="showFocused" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ImgButton.align" flags="IRW" description="Horizontal alignment of this component's title." name="align" valueType="Alignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:ImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.canReorderColumns" flags="IRW" description="If true, body columns can be reordered via the innermost column headers." name="canReorderColumns" valueType="boolean" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:Canvas.shadowDepth" flags="IR" description="Depth of the shadow, or the virtual height above the page of the widget throwing the shadow.&amp;#010 &lt;P&gt;&amp;#010 This is a single parameter that can be used to control both &lt;code&gt;shadowSoftness&lt;/code&gt; and&amp;#010 &lt;code&gt;shadowOffset&lt;/code&gt;." name="shadowDepth" valueType="number" defaultValue="4" type="attr" definingClass="class:Canvas">
    <groups>shadow</groups>
</docItem>
<docItem ref="method:Canvas.setSnapTo" flags="" description=" Set the snapTo property of this canvas, and handle repositioning.&amp;#010&amp;#010" name="setSnapTo" type="method" definingClass="class:Canvas">
<params description="new snapTo value" optional="false" name="snapTo" type="string">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:MenuItem.title" flags="IR" description="The text displayed for the menu item" name="title" valueType="HTML" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <groups>menuBasic</groups>
</docItem>
<docItem ref="class:FacetValue" description="Facet value definition object made use of by the CubeGrid class (contained by facets)" name="FacetValue" type="class">
    <methods>method:FacetValue.getCellValue</methods>
    <treeLocation>Optional Modules/Analytics/CubeGrid</treeLocation>
    <attrs>attr:FacetValue.id</attrs>
    <attrs>attr:FacetValue.title</attrs>
    <attrs>attr:FacetValue.parentId</attrs>
    <attrs>attr:FacetValue.canEdit</attrs>
    <attrs>attr:FacetValue.collapsed</attrs>
    <attrs>attr:FacetValue.canCollapse</attrs>
    <attrs>attr:FacetValue.isMinimizeValue</attrs>
    <attrs>attr:FacetValue.width</attrs>
    <attrs>attr:FacetValue.align</attrs>
    <attrs>attr:FacetValue.cellAlign</attrs>
    <attrs>attr:FacetValue.borderBefore</attrs>
    <attrs>attr:FacetValue.borderAfter</attrs>
    <attrs>attr:FacetValue.selectionBoundary</attrs>
    <attrs>attr:FacetValue.titleHilite</attrs>
    <requiresModules>Analytics</requiresModules>
</docItem>
<docItem ref="method:ListGrid.clearFieldError" flags="" description=" Clears any validation errors for some cell.&amp;#010" name="clearFieldError" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.setFieldError">
</seeAlso>
<params description="row index of cell to add validation error for" optional="false" name="rowNum" type="number">
</params>
<params description="col index or field name of cell to add validation error for" optional="false" name="fieldName" type="number | string">
</params>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:ListGrid.stopOnErrors" flags="IRWA" description="If this is an editable listGrid, this property determines how failure to save due to &amp;#010 validation errors should be displayed to the user.&amp;#010 &lt;P&gt;&amp;#010 If this property is true, when validation errors occur the errors will be displayed&amp;#010 to the user in an alert, and focus will be returned to the first cell to fail validation.&amp;#010 &lt;P&gt;&amp;#010 If false, this the cells that failed validation will be silently styled with the &amp;#010 editFailedBaseStyle.&lt;br&gt;&amp;#010 &lt;b&gt;Note:&lt;/b&gt; stopOnErrors being set to true implies that 'waitForSave' is also true.&amp;#010 We will not dismiss the editor until save has completed if stopOnErrors is true." name="stopOnErrors" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.waitForSave">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="method:List.dataChanged" flags="A" description=" Method called when this array changes in some way.  Observe the method to react to changes in&amp;#010 this list.&amp;#010 &lt;P&gt;&amp;#010 Note: dataChanged() will only fire when items are added, removed or rearranged.  If a list&amp;#010 contains objects, dataChanged() will not fire if changes are made to objects within the list&amp;#010 without changing their position within the list.  If an observer of dataChanged() needs to react&amp;#010 to such a change, you can manually fire dataChanged() by simply calling it.&amp;#010 &lt;P&gt;&amp;#010 Note: may be called multiple times as the result of a multi-item add or remove, etc.&amp;#010&amp;#010" name="dataChanged" type="method" definingClass="interface:List">
    <groups>modification</groups>
</docItem>
<docItem ref="method:CubeGrid.disableHiliting" flags="" description="&amp;#010      disable all hilites&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="disableHiliting" type="method" definingClass="class:CubeGrid">
    <groups>hiliting</groups>
</docItem>
<docItem ref="attr:ListGrid.canSort" flags="IRW" description="Enables or disables interactive sorting behavior for this listGrid. Does not&amp;#010          affect sorting by direct calls to the sort method." name="canSort" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>sorting</groups>
</docItem>
<docItem ref="class:LinkItem" description="A FormItem that displays an HTML link" name="LinkItem" type="class">
    <methods>method:LinkItem.setLinkTitle</methods>
    <attrs>attr:LinkItem.target</attrs>
    <attrs>attr:LinkItem.linkTitle</attrs>
</docItem>
<docItem ref="attr:FormItem.ID" flags="IRW" description="Global identifier for referring to the formItem in JavaScript.  The ID property is&amp;#010 optional if you do not need to refer to the widget from JavaScript, or can refer to it&amp;#010 indirectly (for example, via &lt;code&gt;form.getItem(&quot;&lt;i&gt;itemName&lt;/i&gt;&quot;)&lt;/code&gt;).&amp;#010 &lt;P&gt;&amp;#010 An internal, unique ID will automatically be created upon instantiation for any formItem&amp;#010 where one is not provided." name="ID" valueType="identifier" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>basics</groups>
</docItem>
<docItem ref="attr:ListGrid.valueIconHeight" flags="IRW" description="Height for value icons for this listGrid.&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}.&amp;#010 Can be overridden at the field level" name="valueIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="type:SortArrow" description="Do we display an arrow for the sorted field ?" name="SortArrow" type="type">
<values description="Don't show a sort arrow at all." value="&quot;none&quot;"></values>
<values description="Display sort arrow in the upper-right corner (above the scrollbar) only." value="&quot;corner&quot;"></values>
<values description="Display sort arrow above each field header only." value="&quot;field&quot;"></values>
<values description="Display sort arrow above each field header AND in corner above scrollbar.BOTH:&quot;both&quot;, // NOTE: Canvas establishes this constant" value="&quot;both&quot;"></values>
    <groups>sorting</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.getGroupNodeHTML" flags="" description=" Returns the HTML code necessary to render a group node, including icon, title, and padding.&amp;#010 The amount of the padding is at least ${isc.DocUtils.linkForRef('attr:ListGrid.groupLeadingIndent')} pixels, and&amp;#010 an additional ${isc.DocUtils.linkForRef('attr:ListGrid.groupIndentSize')} pixels for each increasing level of the&amp;#010 node.&amp;#010" name="getGroupNodeHTML" type="method" definingClass="class:ListGrid">
<params description="Specified group node" optional="false" name="node" type="Object">
</params>
</docItem>
<docItem ref="attr:Layout.managePercentBreadth" flags="IR" description="If set, a Layout with breadthPolicy:&quot;fill&quot; will specially interpret a percentage breadth on&amp;#010 a member as a percentage of available space excluding the ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.  If false,&amp;#010 percentages work exactly as for a non-member, with layoutMargins, if any, ignored." name="managePercentBreadth" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Layout">
</docItem>
<docItem ref="method:Canvas.animateFade" flags="" description=" Animate a change in opacity from the widget's current opacity to the specified opacity.&amp;#010" name="animateFade" type="method" definingClass="class:Canvas">
<params description="desired final opacity" optional="false" name="opacity" type="number">
</params>
<params description="When the fade completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation" optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated fade" optional="true" name="duration" type="number">
</params>
<params description="Optional animation acceleration to bias the ratios" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateFade')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="type:MenuFieldID" description="Simple string identifiers for standard menu fields." name="MenuFieldID" type="type">
<values description="Displays the icon field for the menu. This field contains the items                  specified icon (if there is one), or if the item is checked, the &amp;#010                  checkmark icon for the item." value="&quot;icon&quot;"></values>
<values description="Displays the item's title" value="&quot;title&quot;"></values>
<values description="Displays the key field for the menu. This field contains the name or                title of any shortcut keys for this menu item." value="&quot;key&quot;"></values>
<values description="Field to display the submenu image for items that have a submenu." value="&quot;subMenu&quot;"></values>
</docItem>
<docItem ref="classAttr:ValidatorTypes.dateRange" flags="IR" description="Tests whether the value for a date field is within the range specified.&amp;#010 Range is inclusive, and is specified via &lt;code&gt;validator.min&lt;/code&gt; and&amp;#010 &lt;code&gt;validator.max&lt;/code&gt;, which should be dates.&lt;br&gt;&amp;#010 Note that the &lt;code&gt;errorMessage&lt;/code&gt; for this validator will be evaluated as&amp;#010 a dynamicString - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="dateRange" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="method:Canvas.getScrollRight" flags="" description=" Returns the scrollLeft required to scroll horizontally to the end of this widget's content.&amp;#010" name="getScrollRight" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:ValuesManager.validate" flags="" description=" Validate the current set of values for this values manager against validators defined&amp;#010 in the member forms. For databound valuesManagers, also perform validation against any&amp;#010 validators defined on datasource fields.&amp;#010 &lt;P&gt;&amp;#010 Note that if validation errors occur for a value that is not shown in any member forms,&amp;#010 those errors will cause a warning and ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be&amp;#010 called.  This can occur if:&lt;br&gt;&amp;#010 - A datasource field has no correspending item in any member form&lt;br&gt;&amp;#010 - The item in question is hidden&lt;br&gt;&amp;#010 - The member form containing the item is hidden.&amp;#010&amp;#010" name="validate" type="method" definingClass="class:ValuesManager">
<returns description="true if all validation passed" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('formSplitting')}</examples>
</docItem>
<docItem ref="method:Canvas.getPageBottom" flags="" description=" Return the page-relative bottom coordinate of this object, in pixels.&amp;#010" name="getPageBottom" type="method" definingClass="class:Canvas">
<returns description="GLOBAL bottom coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:GridRenderer.fastCellUpdates" flags="I" description="Whether to speed up dynamic styling at the expense of slightly slower drawing.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;fastCellUpdates&lt;/code&gt; speeds up the dynamic styling system used by rollovers,&amp;#010 selections, and custom styling that calls ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCellStyle')}, at&amp;#010 the cost of slightly slower draw() and redraw() times." name="fastCellUpdates" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
</docItem>
<docItem ref="attr:Canvas.dragOpacity" flags="IRWA" description="If this widget has dragAppearance &lt;code&gt;&quot;target&quot;&lt;/code&gt;, this value specifies the&amp;#010 opacity to render the target while it is being dragged. A null value implies we do&amp;#010 not modify the opacity." name="dragOpacity" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragEffects')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classMethod:XMLTools.parseXML" flags="" description=" Parse XML text into an ${isc.DocUtils.linkForRef('type:XMLDocument')}.  Parse errors, if any, are reported to the log.&amp;#010&amp;#010" name="parseXML" type="classMethod" definingClass="class:XMLTools">
<params description="XML text to be parsed" optional="false" name="xmlText" type="String">
</params>
<returns description="resulting XMLDocument" type="XMLDocument"></returns>
</docItem>
<docItem ref="attr:DataSourceField.detail" flags="IR" description="Whether this field should be considered a &quot;detail&quot; by a DataBound component.&amp;#010 &lt;P&gt;&amp;#010 Detail fields won't be included in a DataBound component where &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.showDetailFields')} is false. This allows for compact representation&amp;#010 of datasource records.&lt;br&gt;&amp;#010 In addition to this databound components may apply other logic to detail fields - for example&amp;#010 a ${isc.DocUtils.linkForRef('class:ListGrid')} instance will include detail fields but have them be initially hidden by&amp;#010 default." name="detail" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSourceField">
    <groups>componentBinding</groups>
</docItem>
<docItem ref="method:SectionStack.hideSection" flags="" description=" &amp;#010 Hides a section or sections.  This includes the section header and its items.  The space&amp;#010 vacated by this action is reassigned to the nearest visible section item above this&amp;#010 section.  If there are no visible section items above this section, the space is&amp;#010 reassigned to the nearest visible section item below this section.&amp;#010&amp;#010" name="hideSection" type="method" definingClass="class:SectionStack">
<seeAlso ref="method:SectionStack.collapseSection">
</seeAlso>
<params description="Section(s) to hide.  For this parameter, you can pass the position &amp;#010                      of the section in the SectionStack, the ID of the section, or a&amp;#010                      List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
<params description="callback to fire when the section has been hidden" optional="true" name="callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsShowAndHide')}</examples>
</docItem>
<docItem ref="method:ResultSet.rowIsLoaded" flags="A" description=" Whether the given row has been loaded.&amp;#010 &lt;p&gt;&amp;#010 Unlike get(), will not trigger a server fetch.  &amp;#010&amp;#010" name="rowIsLoaded" type="method" definingClass="class:ResultSet">
<params description="row to check" optional="false" name="rowNum" type="number">
</params>
<returns description="true whether if the given row has been loaded, false if it has not been                   loaded or is still in the process of bring loaded" type="boolean"></returns>
</docItem>
<docItem ref="method:CubeGrid.facetValueContextClick" flags="" description="    StringMethod handler fired when context click occurs over a facetValue button in a header.&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueContextClick" type="method" definingClass="class:CubeGrid">
<params description="facetValuesObject for the appropriate header button" optional="false" name="facetValues" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Window.isModal" flags="IRW" description="If true, when shown this Window will intercept and block events to all other existing&amp;#010 components on the page.&amp;#010 &lt;P&gt;&amp;#010 Use ${isc.DocUtils.linkForRef('attr:Window.showModalMask')} to darken all other elements on the screen when a modal dialog&amp;#010 is showing.&amp;#010 &lt;P&gt;&amp;#010 Chained modal windows - that is, modal windows that launch other modal windows - are&amp;#010 allowed.  You can accomplish this by simply creating a second modal Window while a modal&amp;#010 Window is showing.&amp;#010 &lt;P&gt;&amp;#010 Note only top-level Windows (Windows without parents) can be modal." name="isModal" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
    <examples>${isc.DocUtils.linkForExampleId('modality')}</examples>
    <groups>modal</groups>
</docItem>
<docItem exampleConfig="TimeItem.xml" ref="class:TimeItem" description="Class for editing times in a text field. Values are stored as &lt;code&gt;Date&lt;/code&gt; objects." name="TimeItem" type="class">
    <attrs>attr:TimeItem.displayFormat</attrs>
    <examples>${isc.DocUtils.linkForExampleId('timeItem')}</examples>
</docItem>
<docItem exampleConfig="CubeGrid.xml" type="class" ref="class:CubeGrid" description="The CubeGrid is an interactive grid component that presents very large, multi-dimensional&amp;#010 data sets (also known as data cubes) for reporting or analytic applications.&amp;#010 &lt;P&gt;&amp;#010 CubeGrids are often called crosstabs, for their cross-tabular display of data dimensions in&amp;#010 stacked/nested rows and columns, or pivot tables, for their ability to &quot;pivot&quot; dimensions&amp;#010 between rows and columns to view a data cube from different perspectives. They are typically&amp;#010 used in the querying and reporting front-ends of data warehousing, decision support, OLAP,&amp;#010 and business intelligence systems.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Multi-Dimensional Data Terminology&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 The CubeGrid refers to the dimensions of a data cube as facets, to the possible values in&amp;#010 each facet as facet values, and to the values within the data cube as data values or cell&amp;#010 values. Equivalent terms that are commonly used in data warehousing or business intelligence&amp;#010 systems include:&lt;br&gt;&amp;#010 &lt;b&gt;facet:&lt;/b&gt; dimension, attribute, feature&lt;br&gt;&amp;#010 &lt;b&gt;facet value:&lt;/b&gt; dimension member, attribute value, feature value&lt;br&gt;&amp;#010 &lt;b&gt;cell value:&lt;/b&gt; data value, metric value, measure&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Visual Structure&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 Like the ListGrid and TreeGrid components, the CubeGrid displays data values in a tabular&amp;#010 &quot;body&quot; with adjacent &quot;headers&quot;.  While the ListGrid and TreeGrid display rows of records&amp;#010 with field values, the CubeGrid displays a body of individual cell values, each associated&amp;#010 with a combination of facet values. The facet values for a cell are displayed in the column&amp;#010 headers above the cell and row headers to the left of the cell. CubeGrids can display an&amp;#010 arbitrary number of facets, by stacking multiple levels of row and/or column headers.&amp;#010 &lt;P&gt;&amp;#010 Except for the innermost column facet, each facet in a CubeGrid has a facet label adjacent&amp;#010 to its row or column headers. The facet labels serve two main purposes: they display the&amp;#010 titles of the facets, and they provide drag-and-drop reordering or pivoting of facets within&amp;#010 the . The row facet labels also provide interactive selection, resizing, and other&amp;#010 operations on the columns of row facet values.&amp;#010 &lt;P&gt;&amp;#010 The innermost column headers provide special behaviors and controls for manipulating the&amp;#010 columns of data in a CubeGrid. End users may select, resize, reorder, minimize, maximize, or&amp;#010 auto-fit the columns of data via mouse interactions with these headers. Customizable&amp;#010 indicators and controls may be included at the top of each innermost column header.&amp;#010 &lt;P&gt;&amp;#010 If a CubeGrid is not large enough to display all of its cell values, horizontal and/or&amp;#010 vertical scrollbars will appear below and to the right of the body. The body of the CubeGrid&amp;#010 may be scrolled on either axis. The headers are &quot;frozen&quot; from scrolling on one axis - row&amp;#010 headers only scroll vertically, while column headers only scroll horizontally - so the facet&amp;#010 values for the visible cells are always displayed.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Data Loading&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 In order to allow intuitive and efficient navigation through very large datasets, the&amp;#010 CubeGrid supports adding and removing facets from the display on the fly, and also tree-like&amp;#010 expanding and collapsing both within facets and across facets, all integrated with a&amp;#010 load-on-demand system that only loads visible data, and works with standard ISC DataSources." name="CubeGrid">
    <methods>method:CubeGrid.getEventRow</methods>
    <methods>method:CubeGrid.getEventColumn</methods>
    <methods>method:CubeGrid.getCellStyle</methods>
    <methods>method:CubeGrid.getBaseStyle</methods>
    <methods>method:CubeGrid.setEditValues</methods>
    <methods>method:CubeGrid.setEditValue</methods>
    <methods>method:CubeGrid.getEditValue</methods>
    <methods>method:CubeGrid.getEditedRecord</methods>
    <methods>method:CubeGrid.getEditedCell</methods>
    <methods>method:CubeGrid.getEditValues</methods>
    <methods>method:CubeGrid.clearEditValue</methods>
    <methods>method:CubeGrid.saveEdits</methods>
    <methods>method:CubeGrid.getAllEditCells</methods>
    <methods>method:CubeGrid.discardAllEdits</methods>
    <methods>method:CubeGrid.saveAllEdits</methods>
    <methods>method:CubeGrid.getFacet</methods>
    <methods>method:CubeGrid.getFacetValue</methods>
    <methods>method:CubeGrid.getRollupValue</methods>
    <methods>method:CubeGrid.getCellFacetValues</methods>
    <methods>method:CubeGrid.getFacetValuesColumn</methods>
    <methods>method:CubeGrid.getFacetValuesRow</methods>
    <methods>method:CubeGrid.getRowFacetValues</methods>
    <methods>method:CubeGrid.getColumnFacetValues</methods>
    <methods>method:CubeGrid.getCellRow</methods>
    <methods>method:CubeGrid.getCellColumn</methods>
    <methods>method:CubeGrid.getCellCoordinates</methods>
    <methods>method:CubeGrid.facetLabelHoverHTML</methods>
    <methods>method:CubeGrid.facetValueHoverHTML</methods>
    <methods>method:CubeGrid.closeFacet</methods>
    <methods>method:CubeGrid.closeColumn</methods>
    <methods>method:CubeGrid.facetValueSelectionChanged</methods>
    <methods>method:CubeGrid.getSelectedCells</methods>
    <methods>method:CubeGrid.getSelectedCellIds</methods>
    <methods>method:CubeGrid.anyCellSelected</methods>
    <methods>method:CubeGrid.cellIsSelected</methods>
    <methods>method:CubeGrid.selectCell</methods>
    <methods>method:CubeGrid.deselectCell</methods>
    <methods>method:CubeGrid.selectCells</methods>
    <methods>method:CubeGrid.deselectCells</methods>
    <methods>method:CubeGrid.selectAllCells</methods>
    <methods>method:CubeGrid.deselectAllCells</methods>
    <methods>method:CubeGrid.getSelectedFacetValues</methods>
    <methods>method:CubeGrid.facetValuesSelected</methods>
    <methods>method:CubeGrid.facetHasSelection</methods>
    <methods>method:CubeGrid.getFacetsHavingSelection</methods>
    <methods>method:CubeGrid.selectFacetValues</methods>
    <methods>method:CubeGrid.deselectFacetValues</methods>
    <methods>method:CubeGrid.selectFacetValue</methods>
    <methods>method:CubeGrid.deselectFacetValue</methods>
    <methods>method:CubeGrid.selectAllFacetValues</methods>
    <methods>method:CubeGrid.deselectAllFacetValues</methods>
    <methods>method:CubeGrid.deselectAll</methods>
    <methods>method:CubeGrid.resizeFacetValue</methods>
    <methods>method:CubeGrid.enableHilite</methods>
    <methods>method:CubeGrid.disableHilite</methods>
    <methods>method:CubeGrid.enableHiliting</methods>
    <methods>method:CubeGrid.disableHiliting</methods>
    <methods>method:CubeGrid.hiliteCell</methods>
    <methods>method:CubeGrid.hiliteCellList</methods>
    <methods>method:CubeGrid.hiliteFacetValue</methods>
    <methods>method:CubeGrid.setFacetTitle</methods>
    <methods>method:CubeGrid.setFacetTitleAlign</methods>
    <methods>method:CubeGrid.setFacetValueTitle</methods>
    <methods>method:CubeGrid.setFacetValueTitleAlign</methods>
    <methods>method:CubeGrid.getFacetValueLayout</methods>
    <methods>method:CubeGrid.getRowFacetLayout</methods>
    <methods>method:CubeGrid.getColumnFacetLayout</methods>
    <methods>method:CubeGrid.makeChart</methods>
    <methods>method:CubeGrid.addRowFacet</methods>
    <methods>method:CubeGrid.addColumnFacet</methods>
    <methods>method:CubeGrid.addFacet</methods>
    <methods>method:CubeGrid.removeFacet</methods>
    <methods>method:CubeGrid.setFixedFacetValue</methods>
    <methods>method:CubeGrid.facetValueOver</methods>
    <methods>method:CubeGrid.facetValueOut</methods>
    <methods>method:CubeGrid.facetValueHover</methods>
    <methods>method:CubeGrid.facetValueContextClick</methods>
    <methods>method:CubeGrid.facetValueReordered</methods>
    <methods>method:CubeGrid.facetAdded</methods>
    <methods>method:CubeGrid.facetRemoved</methods>
    <methods>method:CubeGrid.facetMoved</methods>
    <methods>method:CubeGrid.facetLabelOver</methods>
    <methods>method:CubeGrid.facetLabelOut</methods>
    <methods>method:CubeGrid.facetLabelHover</methods>
    <methods>method:CubeGrid.cellSelectionChanged</methods>
    <requiresModules>Analytics</requiresModules>
    <treeLocation>Optional Modules/Analytics</treeLocation>
    <attrs>attr:CubeGrid.styleName</attrs>
    <attrs>attr:CubeGrid.bodyStyleName</attrs>
    <attrs>attr:CubeGrid.baseStyle</attrs>
    <attrs>attr:CubeGrid.facetValueHoverWidth</attrs>
    <attrs>attr:CubeGrid.facetLabelHoverWidth</attrs>
    <attrs>attr:CubeGrid.facetValueHoverHeight</attrs>
    <attrs>attr:CubeGrid.facetLabelHoverHeight</attrs>
    <attrs>attr:CubeGrid.facetValueHoverAlign</attrs>
    <attrs>attr:CubeGrid.facetLabelHoverAlign</attrs>
    <attrs>attr:CubeGrid.facetValueHoverVAlign</attrs>
    <attrs>attr:CubeGrid.facetLabelHoverVAlign</attrs>
    <attrs>attr:CubeGrid.facetValueHoverStyle</attrs>
    <attrs>attr:CubeGrid.facetLabelHoverStyle</attrs>
    <attrs>attr:CubeGrid.fixedFacetValues</attrs>
    <attrs>attr:CubeGrid.dataSource</attrs>
    <attrs>attr:CubeGrid.facets</attrs>
    <attrs>attr:CubeGrid.hilites</attrs>
    <attrs>attr:CubeGrid.hiliteProperty</attrs>
    <attrs>attr:CubeGrid.canSelectValues</attrs>
    <attrs>attr:CubeGrid.canSelectHeaders</attrs>
    <attrs>attr:CubeGrid.autoSelectHeaders</attrs>
    <attrs>attr:CubeGrid.autoSelectValues</attrs>
    <attrs>attr:CubeGrid.simpleDeselect</attrs>
    <attrs>attr:CubeGrid.columnFacets</attrs>
    <attrs>attr:CubeGrid.rowFacets</attrs>
    <attrs>attr:CubeGrid.hideEmptyFacetValues</attrs>
    <attrs>attr:CubeGrid.data</attrs>
    <attrs>attr:CubeGrid.valueProperty</attrs>
    <attrs>attr:CubeGrid.cellIdProperty</attrs>
    <attrs>attr:CubeGrid.canEdit</attrs>
    <attrs>attr:CubeGrid.editByCell</attrs>
    <attrs>attr:CubeGrid.saveByCell</attrs>
    <attrs>attr:CubeGrid.alternateRecordStyles</attrs>
    <attrs>attr:CubeGrid.canReorderColumns</attrs>
    <attrs>attr:CubeGrid.canResizeColumns</attrs>
    <attrs>attr:CubeGrid.canCollapseFacets</attrs>
    <attrs>attr:CubeGrid.canMinimizeFacets</attrs>
    <attrs>attr:CubeGrid.canMinimizeColumns</attrs>
    <attrs>attr:CubeGrid.canMoveFacets</attrs>
    <attrs>attr:CubeGrid.autoSizeHeaders</attrs>
    <attrs>attr:CubeGrid.facetTitleAlign</attrs>
    <attrs>attr:CubeGrid.facetValueAlign</attrs>
    <attrs>attr:CubeGrid.cellAlign</attrs>
    <attrs>attr:CubeGrid.wrapFacetTitles</attrs>
    <attrs>attr:CubeGrid.wrapFacetValueTitles</attrs>
    <attrs>attr:CubeGrid.padTitles</attrs>
    <attrs>attr:CubeGrid.defaultFacetWidth</attrs>
    <attrs>attr:CubeGrid.rollupValue</attrs>
    <attrs>attr:CubeGrid.metricFacetId</attrs>
    <attrs>attr:CubeGrid.valueTitle</attrs>
    <attrs>attr:CubeGrid.bodyMinWidth</attrs>
    <attrs>attr:CubeGrid.bodyMinHeight</attrs>
    <attrs>attr:CubeGrid.chartConstructor</attrs>
    <attrs>attr:CubeGrid.chartType</attrs>
    <attrs>attr:CubeGrid.chartConfirmThreshold</attrs>
<seeAlso ref="class:Facet">
</seeAlso>
<seeAlso ref="class:FacetValue">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('analytics')}</examples>
</docItem>
<docItem ref="method:Canvas.focusChanged" flags="" description=" Notification function fired when this widget recieves or loses keyboard focus.&amp;#010" name="focusChanged" type="method" definingClass="class:Canvas">
<params description="If true this widget now has keyboard focus" optional="false" name="hasFocus" type="boolean">
</params>
    <groups>focus</groups>
</docItem>
<docItem ref="attr:ListGridField.type" flags="IRW" description="ListGrids picks a renderer for the view and edit mode of a field based on this attribute." name="type" valueType="ListGridFieldType" defaultValue="&quot;text&quot;" type="attr" definingClass="object:ListGridField">
<seeAlso ref="type:ListGridFieldType">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setImage" flags="A" description=" Set the URL of an image element by name.&amp;#010 &lt;p&gt;&amp;#010 The image element must have been created from HTML generated by calling&amp;#010 &lt;code&gt;canvas.imgHTML()&lt;/code&gt; on this particular Canvas.&amp;#010&amp;#010" name="setImage" type="method" definingClass="class:Canvas">
<params description="name of the image to change, as originally passed to                              &lt;code&gt;imgHTML&lt;/code&gt;" optional="false" name="identifier" type="string">
</params>
<params description="URL for the image" optional="false" name="URL" type="SCImgURL">
</params>
<params description="optional image directory, overrides the default for this Canvas" optional="true" name="imgDir" type="string">
</params>
    <groups>images</groups>
</docItem>
<docItem ref="attr:GridRenderer.emptyCellValue" flags="IRW" description="Value to show in empty cells (when getCellValue returns null)" name="emptyCellValue" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:ImgTab.src" flags="IRW" description="Base URL for tab images" name="src" valueType="URL" defaultValue="&quot;tab.gif&quot;" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="type:FacetValueMap" description="A JavaScript Object where each property name is a facetId and each property value is a&amp;#010 facetValueId for that facet.  &amp;#010 &lt;P&gt;&amp;#010 The facetId -&gt; facetValueId mappings in a FacetValueMap describe a specific slice of the&amp;#010 dataset.  If mappings are included for all facets, a FacetValueMap describes a unique&amp;#010 cell.  If some facets are omitted, it describes a row, column, or set of rectangular&amp;#010 areas, or equivalently, a particular row or column header (if all facetIds in the map are&amp;#010 displayed on the same axis)&amp;#010 &lt;P&gt;&amp;#010 FacetValueMaps are used in various contexts to describe headers, datasets to be loaded,&amp;#010 screen regions, etc." name="FacetValueMap" type="type">
</docItem>
<docItem ref="method:TabBar.selectTab" flags="" description=" Select a tab&amp;#010" name="selectTab" type="method" definingClass="class:TabBar">
<params description="index of tab to select" optional="false" name="tabNum" type="number">
</params>
</docItem>
<docItem ref="class:WebService" description="Class representing a WebService definition derived from a WSDL file.&amp;#010 &lt;P&gt;&amp;#010 A Web Service object allows you to invoke operations (via&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.callOperation','callOperation()')}), inspect schema declared in the&amp;#010 WSDL file (${isc.DocUtils.linkForRef('method:WebService.getSchema','getSchema()')}), and perform simple read-only&amp;#010 databinding ${isc.DocUtils.linkForRef('method:WebService.getFetchDS')}.  &amp;#010 &lt;P&gt;&amp;#010 Once a WebService has been loaded, a DataSource can be declared with a&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} to connect it to the web service, allowing DataSource&amp;#010 data to be loaded and saved to the web service using&amp;#010 ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')}." name="WebService" type="class">
    <methods>method:WebService.getOperationNames</methods>
    <methods>method:WebService.getSchema</methods>
    <methods>method:WebService.callOperation</methods>
    <methods>method:WebService.getSoapMessage</methods>
    <methods>method:WebService.getInputDS</methods>
    <methods>method:WebService.getInputHeaderSchema</methods>
    <methods>method:WebService.getOutputHeaderSchema</methods>
    <methods>method:WebService.getHeaderData</methods>
    <methods>method:WebService.getFetchDS</methods>
    <methods>method:WebService.setLocation</methods>
    <classMethods>classMethod:WebService.get</classMethods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:WebService.serviceNamespace</attrs>
    <attrs>attr:WebService.globalNamespaces</attrs>
    <groups>webService</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeRight" flags="IR" description="Height in pixels for right corners and edges.  Defaults to edgeSize when unset." name="edgeRight" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:PickTreeItem.valueField" flags="IR" description="Which field in the tree-data should be returned as this item's value?&amp;#010 If unspecified, the path will be used" name="valueField" valueType="string" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
    <examples>${isc.DocUtils.linkForExampleId('pickTree')}</examples>
</docItem>
<docItem ref="attr:TreeNode.canAcceptDrop" flags="IRA" description="Governs whether dragged data (typicaly other &lt;code&gt;treeNode&lt;/code&gt;s) may be dropped over&amp;#010 this node. Only has an effect if this node is displayed in a ${isc.DocUtils.linkForRef('class:TreeGrid')} where&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.canAcceptDroppedRecords')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')} or &amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is true." name="canAcceptDrop" valueType="boolean" defaultValue="null" type="attr" definingClass="object:TreeNode">
</docItem>
<docItem ref="method:Toolbar.deselectButton" flags="" description="	Deselects the specified button from the toolbar, where buttonID is the index of&amp;#010  the button's object initializer. The button will be redrawn if necessary.&amp;#010  The button identifier can be a number (index), string (id), or object (widget or init block),&amp;#010 as with the getButtonNumber() method.&amp;#010" name="deselectButton" type="method" definingClass="class:Toolbar">
<seeAlso ref="method:Toolbar.getButtonNumber">
</seeAlso>
<params description="Button / Button identifier" optional="false" name="buttonID" type="number | string | object | canvas">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Window.autoCenter" flags="IRW" description="If true, this Window widget will automatically be centered on the page when shown.&amp;#010      If false, it will show up in the last position it was placed (either programatically,&amp;#010      or by user interaction)." name="autoCenter" valueType="boolean" defaultValue="autoCenter" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>location</groups>
</docItem>
<docItem ref="class:Log" description="A logging system similar to the Java log4j package: messages are logged with a &quot;category&quot; and&amp;#010 &quot;priority&quot;, and developers can dynamically set which log messages are being displayed.&amp;#010 &lt;P&gt;&amp;#010 5 log priorities are available, with the following general meaning:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &quot;debug&quot;: diagnostic info which is only likely to be understood by a developer with&amp;#010 source access, or would occur too frequently for normal usage&amp;#010 &lt;li&gt; &quot;info&quot;: reports of significant events in the normal operation of the subsystem&amp;#010 &lt;li&gt; &quot;warn&quot;: some kind of problem is likely to occur, an API appears is apparently being&amp;#010 misused or will yield a partial or very slow result&amp;#010 &lt;li&gt; &quot;error&quot;: a definite error has occurred which may be recoverable&amp;#010 &lt;li&gt; &quot;fatal&quot;: total failure with no possibility of recovery&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 Log categories do not need to be declared in advance - you can simply make up a category name and&amp;#010 start logging to it, and control whether that category's messages will be displayed via&amp;#010 &lt;code&gt;setPriority()&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; to open the Developer Console in any page that loads ISC, type&amp;#010 javascript:isc.Log.show() in the URL bar - this URL is bookmarkable.  &amp;#010 &lt;P&gt;&amp;#010 The Developer Console should &lt;b&gt;always&lt;/b&gt; be open while developing any ISC-enabled application,&amp;#010 because ISC logs many important errors and warnings to the Developer Console.&amp;#010 &lt;P&gt;&amp;#010 In Internet Explorer, the Developer Console is able to log a stack trace for every JS error,&amp;#010 including errors that occur in non-ISC code.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you have the Microsoft JavaScript Debugger installed, ISC will be unable to log stack&amp;#010 traces on JS errors until you go to Tools-&gt;Internet Options-&gt;Advanced Tab and check &quot;Disable&amp;#010 script debugging&quot;.  The ability to see stack traces in the Developer Console is generally much&amp;#010 more useful for debugging ISC-based applications than the generic Javascript Debugging&amp;#010 facilities." name="Log" type="class">
    <methods>method:Log.getCallTrace</methods>
    <methods>method:Log.getStackTrace</methods>
    <methods>method:Log.echoLeaf</methods>
    <methods>method:Log.echo</methods>
    <methods>method:Log.echoAll</methods>
    <methods>method:Log.logDebug</methods>
    <methods>method:Log.logInfo</methods>
    <methods>method:Log.logWarn</methods>
    <methods>method:Log.logError</methods>
    <methods>method:Log.logFatal</methods>
    <methods>method:Log.logIsEnabledFor</methods>
    <methods>method:Log.logIsDebugEnabled</methods>
    <methods>method:Log.logIsInfoEnabled</methods>
    <methods>method:Log.logIsWarnEnabled</methods>
    <methods>method:Log.logIsErrorEnabled</methods>
    <methods>method:Log.setLogPriority</methods>
    <methods>method:Log.setDefaultLogPriority</methods>
    <methods>method:Log.clearLogPriority</methods>
    <classAttrs>classAttr:Log.defaultPriority</classAttrs>
    <classAttrs>classAttr:Log.stackTracePriority</classAttrs>
    <classMethods>classMethod:Log.getDefaultLogPriority</classMethods>
    <classMethods>classMethod:Log.applyLogPriorities</classMethods>
    <classMethods>classMethod:Log.getLogPriorities</classMethods>
    <classMethods>classMethod:Log.getPriority</classMethods>
    <classMethods>classMethod:Log.setPriority</classMethods>
    <classMethods>classMethod:Log.setDefaultPriority</classMethods>
    <classMethods>classMethod:Log.getDefaultPriority</classMethods>
    <classMethods>classMethod:Log.clearPriority</classMethods>
    <classMethods>classMethod:Log.isEnabledFor</classMethods>
    <classMethods>classMethod:Log.show</classMethods>
    <classMethods>classMethod:Log.clear</classMethods>
    <classMethods>classMethod:Log.traceMethod</classMethods>
    <classMethods>classMethod:Log.timeMethod</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
<seeAlso ref="classMethod:Log.setPriority">
</seeAlso>
    <groups>debug</groups>
</docItem>
<docItem ref="group:image" description="Utilities to render images" name="image" type="group">
</docItem>
<docItem ref="attr:ResultSet.fetchOperation" flags="IR" description="Operation this dataModel should use to fetch sets of objects" name="fetchOperation" valueType="Operation or ID" defaultValue="null" type="attr" definingClass="class:ResultSet">
</docItem>
<docItem ref="attr:StatefulCanvas.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Dialog.showToolbar" flags="IRW" description="Whether to show a toolbar of buttons at the bottom of the Dialog." name="showToolbar" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Dialog">
    <groups>appearance</groups>
    <groups>toolbar</groups>
</docItem>
<docItem ref="attr:DetailViewer.emptyMessage" flags="IRW" description="The string to display in the body of a detailViewer with no records." name="emptyMessage" valueType="string" defaultValue="&quot;No items to display.&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="group:clipping" name="clipping" type="group">
</docItem>
<docItem ref="method:DynamicForm.filterData" flags="" description=" Retrieve data that matches the provided criteria, and edit the first record returned.&lt;br&gt;&amp;#010 Differs from ${isc.DocUtils.linkForRef('method:DynamicForm.fetchData')} in that a case insensitive substring match&amp;#010 will be performed against the criteria to retrieve the data.&amp;#010 &amp;#010" name="filterData" type="method" definingClass="class:DynamicForm">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:Window.showMaximizeButton" flags="IRW" description="If true, show a maximize button in the header - clicking it maximizes the Window" name="showMaximizeButton" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
    <setter>setShowMaximizeButton</setter>
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:ResultSet.resultSize" flags="IRWA" description="How many rows to retrieve at once.&amp;#010 &lt;P&gt;&amp;#010 Applicable only with &lt;code&gt;fetchMode: &quot;paged&quot;&lt;/code&gt;.  When a paged ResultSet is asked&amp;#010 for rows that have not yet been loaded, it will fetch adjacent rows that are likely to&amp;#010 be required soon, in batches of this size." name="resultSize" valueType="integer" defaultValue="75" type="attr" definingClass="class:ResultSet">
    <groups>fetching</groups>
</docItem>
<docItem ref="group:cellEditing" name="cellEditing" type="group">
    <refs>attr:CubeGrid.canEdit</refs>
    <refs>attr:CubeGrid.editByCell</refs>
    <refs>attr:CubeGrid.saveByCell</refs>
</docItem>
<docItem ref="method:StatefulCanvas.removeFromRadioGroup" flags="A" description=" Remove this widget from the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 No-op's if this widget is not a member of the groupID passed in.&amp;#010 If no groupID is passed in, defaults to removing from whatever radioGroup this widget&amp;#010 is a member of.&amp;#010" name="removeFromRadioGroup" type="method" definingClass="class:StatefulCanvas">
<params description="- optional radio group ID (to ensure the widget is removed                                        from the appropriate group." optional="true" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:Button.iconHeight" flags="IR" description="Height in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGridField.editorValueIcons" flags="IRW" description="When some cell in this field is being edited, setting this property will specify the&amp;#010 value icons to display in the cell's editor. If unset, the editor's valueIcons&amp;#010 will be determined in the same way as it would be for a static cell." name="editorValueIcons" valueType="object" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:ListGridField.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:OperationBinding.serverObject" flags="IR" description="Optional ServerObject declaration that specifies the ServerObject configuration for this&amp;#010 operationBinding.  In the absense of a serverObject specification here, the one specified on&amp;#010 the DataSource itself is used by default, if present (${isc.DocUtils.linkForRef('attr:DataSource.serverObject')}).  If&amp;#010 neither is present, then Direct Method Invocation will not be enabled for this operationBinding." name="serverObject" valueType="ServerObject" defaultValue="null" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="attr:DataSource.serverObject">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:Date.toUSShortDate" flags="" description="			Return this date in the format: &lt;code&gt;MM/DD/YYYY&lt;/code&gt;&amp;#010" name="toUSShortDate" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:Canvas.hoverHidden" flags="A" description=" If ${isc.DocUtils.linkForRef('attr:Canvas.showHover','showHover')} is true for this canvas, this notification method will be&amp;#010 fired whenever the hover shown in response to ${isc.DocUtils.linkForRef('method:Canvas.handleHover','handleHover()')} is &amp;#010 hidden. This method may be observed or overridden.&amp;#010" name="hoverHidden" type="method" definingClass="class:Canvas">
    <groups>hovers</groups>
</docItem>
<docItem ref="method:ListGrid.getAllEditRows" flags="" description=" Returns an array of every rowNum for which we have pending (unsubmitted) edits.&amp;#010" name="getAllEditRows" type="method" definingClass="class:ListGrid">
<returns description="Array of rowNums for rows with edit values pending submission." type="array"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:CubeGrid.canCollapseFacets" flags="IRW" description="If true, hierarchical facets will show expand/collapse controls to allow the user to&amp;#010 expand and collapse the tree of facetValues for that facet." name="canCollapseFacets" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>facetExpansion</groups>
</docItem>
<docItem ref="group:scroll" name="scroll" type="group">
    <refs>method:Scrollbar.setScrollTarget</refs>
</docItem>
<docItem ref="method:ResultSet.applyFilter" flags="A" description=" The ResultSet will call applyFilter() when it needs to determine whether rows match the&amp;#010 current filter criteria.&amp;#010 &lt;P&gt;&amp;#010 Default behavior is to call ${isc.DocUtils.linkForRef('method:DataSource.applyFilter')} to determine which rows match&amp;#010 that provided criteria.&amp;#010 &lt;P&gt;&amp;#010 Override this method or ${isc.DocUtils.linkForRef('method:DataSource.applyFilter')} to implement your own client-side&amp;#010 filtering behavior.&amp;#010&amp;#010" name="applyFilter" type="method" definingClass="class:ResultSet">
<params description="the list of rows" optional="false" name="data" type="Array">
</params>
<params description="the filter criteria" optional="false" name="criteria" type="Criteria">
</params>
<params description="dataSource request properties" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
<returns description="the list of matching rows" type="Array"></returns>
</docItem>
<docItem ref="group:platformDependencies" title="Platform Dependencies" description="Client-side processing of web services, XML parsing, and some UI loading mechanisms rely on&amp;#010 a native in-browser XML parser and/or the XMLHttpRequest object - one or both of which will&amp;#010 not be available if the end user disables ActiveX support in Internet Explorer.  Note that&amp;#010 these features do not require plugins or downloads of any kind - IE simply exposes certain&amp;#010 built-in functionality like the XML parser and XMLHttpRequest through the ActiveX&amp;#010 interface.  Disabling ActiveX also disables all browser plugins such as Flash, Java, SVG, etc.&amp;#010 &lt;p&gt;&amp;#010 Barring ActiveX being disabled, the XMLHttpRequest object is available to SmartClient on all&amp;#010 supported browsers and an XML parser is available on all supported browsers except Safari&amp;#010 versions prior to 3.0.3.&amp;#010 &lt;p&gt;&amp;#010 SmartClient client-server communication is not affected by the lack of an XML parser or the&amp;#010 XMLHttpRequest object, but the &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport will not be available&amp;#010 if the XMLHttpRequest object is not available.  Instead, the &lt;code&gt;hiddenFrame&lt;/code&gt; or the&amp;#010 &lt;code&gt;scriptInclude&lt;/code&gt; transports are used for client-server communication.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;XML Parser&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 If an XML Parser is not available to SmartClient, all client-side web service bindings and&amp;#010 related methods will be unavailable.  Turning off ActiveX disables integration paths 2 and 3&amp;#010 in the diagram below.  If you want to bind to web services and require deployment to IE&amp;#010 without ActiveX (or you need to support Safari pre 3.0.3), you'll need to do all XML processing on the&amp;#010 server and use either the SmartClient DSRequest or JSON operation pathways (integration&amp;#010 paths 1 and 4 in the diagram below).  See the discussion in ${isc.DocUtils.linkForRef('group:clientServerIntegration')}&amp;#010 for more information on the integration paths shown in the diagram below.&amp;#010 &lt;p&gt;&amp;#010 You call ${isc.DocUtils.linkForRef('classMethod:XMLTools.nativeXMLAvailable')} to check for the avialability of a native XML&amp;#010 parser at runtime.&amp;#010 &lt;p&gt;&amp;#010 &lt;img src=&quot;${isc.DocViewer.instance.referenceRoot}skin/ds_bindings.png&quot; width=763 height=475&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;XMLHttpRequest&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 The XMLHttpRequest object is used for the &lt;code&gt;xmlHttpRequest&lt;/code&gt; ${isc.DocUtils.linkForRef('type:RPCTransport')}.&amp;#010 Safari, Mozilla, Firefox, and IE 7 provide a native XMLHttpRequest implementation that is&amp;#010 not affected by ActiveX being disabled (although the native IE 7 implementation can still be&amp;#010 explicitly disabled by the end user).  IE 5.5 and IE 6.0 rely on the ActiveX bridge to&amp;#010 support XMLHttpRequest, so if ActiveX is disabled in these browsers, XMLHttpRequest will not&amp;#010 be available.&amp;#010 &lt;p&gt;&amp;#010 The lack of the XMLHttpRequest objects affects UI loading features like ${isc.DocUtils.linkForRef('class:ViewLoader')},&amp;#010 and ${isc.DocUtils.linkForRef('class:HTMLFlow')} when used in remote loading mode (via ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')},&amp;#010 ${isc.DocUtils.linkForRef('method:HTMLFlow.setContentsURL')}, but does not affect the typical client/server communication&amp;#010 pathways (integration paths 1 and 5 in the diagram above).&amp;#010 &lt;p&gt;&amp;#010 Also affected are low level features ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')},&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')}, and ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}.&amp;#010 &lt;p&gt;&amp;#010 In all of the above cases, it is possible to use the &lt;code&gt;hiddenFrame&lt;/code&gt; transport to&amp;#010 support these features when XMLHttpRequest is not available.  SmartClient will automatically&amp;#010 send the request using the &lt;code&gt;hiddenFrame&lt;/code&gt; transport when it detects that&amp;#010 XMLHttpRequest is unavailable.  To support the above features, you'll need to use the&amp;#010 RPCManager APIs on the server to send back the data that would normally be returned by&amp;#010 XMLHttpRequest.  Since XMLHttpRequest cannot target URLs outside of the current domain, this&amp;#010 strategy applies also to using the above features with cross-domain URLs.&amp;#010 &lt;p&gt;&amp;#010 You can call ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')} to check for the availability of&amp;#010 XMLHttpRequest at runtime." name="platformDependencies" type="group">
    <treeLocation>/Client Reference/System</treeLocation>
</docItem>
<docItem ref="method:Canvas.setRect" flags="" description=" Set all four coordinates, relative to the enclosing context, at once.&amp;#010 &lt;P&gt;&amp;#010 Moves the widget so that its top-left corner is at the specified top-left coordinates,&amp;#010 then resizes it to the specified width and height.&amp;#010&amp;#010" name="setRect" type="method" definingClass="class:Canvas">
<params description="new left coordinate, Array of coordinates                                                  in parameter order, or Object with left,&amp;#010                                                  top, width, height properties.  If an Array&amp;#010                                                  or Object is passed, the remaining&amp;#010                                                  parameters are ignored" optional="true" name="left" type="number, Array, Object">
</params>
<params description="new top coordinate" optional="true" name="top" type="number">
</params>
<params description="new width" optional="true" name="width" type="number">
</params>
<params description="new height" optional="true" name="height" type="number">
</params>
<returns description="whether the component's size actually changed" type="boolean"></returns>
    <groups>positioning</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:CubeGrid.getAllEditCells" flags="" description=" Method to determine which records currently have pending (unsubmitted) edits.&amp;#010 Returns an array of 2 element arrays indicating the &lt;code&gt;[rowNum,colNum]&lt;/code&gt; of the&amp;#010 cells in question.&amp;#010" name="getAllEditCells" type="method" definingClass="class:CubeGrid">
<returns description="Array of &lt;code&gt;[rowNum,colNum]&lt;/code&gt; arrays for cells with edit               values pending submission." type="array"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="classMethod:Class.changeDefaults" flags="A" description=" &amp;#010 Changes a set of defaults defined as a JavaScript Object.  For these kind of properties,&amp;#010 simply calling ${isc.DocUtils.linkForRef('method:Class.addProperties')} would replace the original Object&amp;#010 with yours, wiping out settings required for the basic functionality of the component.&amp;#010 This method instead applies your overrides over the existing properties, without&amp;#010 destroying non-overridden properties.&amp;#010 &lt;p&gt;&amp;#010 For example let's say you have a component that's defined as follows&amp;#010 &lt;pre&gt;&amp;#010 isc.defineClass(&quot;MyComponent&quot;);&amp;#010 isc.MyComponent.addProperties({&amp;#010     simpleProperty: &quot;some value&quot;,&amp;#010     propertyBlock : {&amp;#010       foo: &quot;bar&quot;,&amp;#010       zoo: &quot;moo&quot;&amp;#010     }&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 If you wanted to override simpleProperty, you can just call ${isc.DocUtils.linkForRef('method:Class.addProperties')}&amp;#010 like this:&amp;#010 &lt;pre&gt;&amp;#010 isc.addProperties(MyComponent, {&amp;#010     simpleProperty: &quot;my override&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 If you want to override the value of &lt;code&gt;propertyBlock.moo&lt;/code&gt; above,&amp;#010 but you don't want to clobber the value of &lt;code&gt;propertyBlock.zoo&lt;/code&gt;.  If you use&amp;#010 the above pattern like so:&amp;#010 &lt;pre&gt;&amp;#010 isc.addProperties(MyComponent, {&amp;#010     propertyBlock: {&amp;#010         foo: &quot;new value&quot;,&amp;#010         zoo: &quot;moo&quot;&amp;#010     }&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 You need to re-specify the value of &lt;code&gt;propertyBlock.zoo&lt;/code&gt; which you didn't want&amp;#010 to override.  Failing to respecify it would destroy the value.&amp;#010 &lt;p&gt;&amp;#010 Instead of re-specifying the value, you can use this method to modify the value of&amp;#010 &lt;code&gt;foo&lt;/code&gt; - like this:&amp;#010 &lt;pre&gt;&amp;#010 isc.changeDefaults(MyComponent, &quot;propertyBlock&quot;, {&amp;#010     foo: &quot;new value&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 A typical pattern for creating a custom component with overrides only is to create a&amp;#010 subclass of the component you want to customize and then call&amp;#010 &lt;code&gt;changeDefaults()&lt;/code&gt; to modify override points that are specified as object&amp;#010 literals. &amp;#010 &lt;p&gt;&amp;#010 SmartClient components that accept overrides in this manner will typically document what&amp;#010 properties are overrideable.&amp;#010&amp;#010" name="changeDefaults" type="classMethod" definingClass="class:Class">
<params description="name of the property to change" optional="false" name="defaultsName" type="String">
</params>
<params description="The new default(s)" optional="false" name="newDefaults" type="Object">
</params>
</docItem>
<docItem ref="group:dynamicMenuItem" name="dynamicMenuItem" type="group">
    <refs>attr:MenuItem.enableIf</refs>
    <refs>attr:MenuItem.checkIf</refs>
    <refs>attr:MenuItem.dynamicTitle</refs>
    <refs>attr:MenuItem.dynamicIcon</refs>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_TRANSPORT_ERROR" flags="R" description="This response code is usable only with the XMLHttpRequest transport and indicates that&amp;#010 the server returned an HTTP response code other than 200: OK.  To get the actual&amp;#010 response code, you can query rpcResponse.httpResponseCode in your callback.&amp;#010 &lt;p&gt;&amp;#010 Note that currently this error code will never occur for the &lt;code&gt;hiddenFrame&lt;/code&gt;&amp;#010 transport - instead, use ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_SERVER_TIMEOUT')} to detect&amp;#010 &lt;code&gt;hiddenFrame&lt;/code&gt; transport errors." name="STATUS_TRANSPORT_ERROR" valueType="integer" defaultValue="-90" type="classAttr" definingClass="class:RPCResponse">
    <groups>statusCodes</groups>
</docItem>
<docItem ref="type:DSCallback" description="A ${isc.DocUtils.linkForRef('type:Callback')} to evaluate when a DataSource request completes.&amp;#010 &lt;P&gt;&amp;#010 The parameters available in the DSCallback expression are:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;dsResponse: a ${isc.DocUtils.linkForRef('class:DSResponse')} instance with metadata about the returned data&amp;#010 &lt;li&gt;data: data returned to satisfy the DataSource request.  See the&amp;#010     ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operations')} topic for expected results&amp;#010     for each type of DataSource operation&amp;#010 &lt;li&gt;dsRequest: the ${isc.DocUtils.linkForRef('class:DSRequest')} that was sent.  You can use&amp;#010     ${isc.DocUtils.linkForRef('attr:DSRequest.clientContext')} to track state during the server turnaround.&amp;#010 &lt;/ul&gt;&amp;#010 For example, if you had a DynamicForm with ID &quot;myForm&quot; and you wanted to retrieve a &amp;#010 record from a DataSource &quot;myUsers&quot;, where each record has a &quot;userId&quot; field:&amp;#010 &lt;pre&gt;&amp;#010     myUsers.fetchData({ userId : &quot;fred&quot; }, &quot;myForm.setValues(data)&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 or&amp;#010 &lt;pre&gt;&amp;#010     myUsers.fetchData({ userId : &quot;fred&quot; }, function (dsResponse, data, dsRequest) {&amp;#010                                              myForm.setValues(data);&amp;#010                                            });&amp;#010 &lt;/pre&gt;" name="DSCallback" type="type">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
</docItem>
<docItem ref="classAttr:Validator.mustBeGreaterThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;integerRange&lt;/code&gt; type validator&amp;#010  returns false because the value passed in is less than the specified minimum.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeGreaterThan" valueType="string" defaultValue="&quot;Must be at least ${min}&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:SchemaSet.schemaNamespace" flags="R" description="Namespace of this SchemaSet, derived from the &lt;code&gt;targetNamespace&lt;/code&gt;&amp;#010 attribute of the &lt;code&gt;&amp;lt;schema&amp;gt;&lt;/code&gt; element." name="schemaNamespace" valueType="URI" defaultValue="null" type="attr" definingClass="class:SchemaSet">
    <groups>webService</groups>
</docItem>
<docItem ref="method:Tree.getDescendantFolders" flags="" description="&amp;#010 Ruturns the list of all descendants of a node that are folders.  This works just like&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, except leaf nodes are not part of the returned list.&amp;#010 Like ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, this method can be very slow for large trees.&amp;#010 Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in combination with ${isc.DocUtils.linkForRef('method:Tree.getFolders')} &amp;#010 be much faster.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getDescendantFolders" type="method" definingClass="class:Tree">
<params description="node in question (the root node is assumed if none specified)" optional="true" name="node" type="TreeNode">
</params>
<returns description="List of descendants of the node that are folders." type="List"></returns>
</docItem>
<docItem ref="attr:FusionChart.chartsBaseURL" flags="IR" description="Base URL where FusionCharts are installed.  SmartClient expects to find the FusionCharts&amp;#010 &quot;.swf&quot; files under this URL.&amp;#010 &lt;P&gt;&amp;#010 The default value indicates that SmartClient will look for a FusionCharts directory&amp;#010 parallel to the &quot;isomorphic/&quot; directory.&amp;#010 &lt;P&gt;&amp;#010 Note that the URL formation logic automatically compensates for various inconsistencies and&amp;#010 typos in the default names for the chart .swf files, as well as differences between&amp;#010 FusionCharts 2.3 and 3.0.   The chart .swf files should be left exactly as found in the&amp;#010 FusionCharts distribution.  If you have renamed the charts for other purposes, you&amp;#010 can set ${isc.DocUtils.linkForRef('attr:FusionChart.chartURL')} to the full path to any given chart type." name="chartsBaseURL" valueType="URL" defaultValue="&quot;[ISOMORPHIC]/../FusionCharts/&quot;" type="attr" definingClass="class:FusionChart">
</docItem>
<docItem ref="attr:Window.headerLabel" flags="R" description="Label that shows Window title in header." name="headerLabel" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="method:DynamicForm.itemChange" flags="" description=" Handler fired when there is a change() event fired on a FormItem within this form.&amp;#010 &lt;P&gt;&amp;#010 Fires after the change() handler on the FormItem itself, and only if the item did not&amp;#010 cancel the change event and chooses to allow it to propagate to the form as a whole. &amp;#010&amp;#010" name="itemChange" type="method" definingClass="class:DynamicForm">
<params description="the FormItem where the change event occurred" optional="false" name="item" type="FormItem">
</params>
<params description="new value for the FormItem" optional="false" name="newValue" type="any">
</params>
<params description="value for the FormItem had previous to this change() event" optional="false" name="oldValue" type="any">
</params>
<returns description="return false to cancel the change, or true to allow it" type="boolean"></returns>
</docItem>
<docItem ref="method:Window.setShowMinimizeButton" flags="" description=" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton')} to show / hide the minimizeButton&amp;#010" name="setShowMinimizeButton" type="method" definingClass="class:Window">
<seeAlso ref="attr:Window.headerControls">
</seeAlso>
<seeAlso ref="attr:Window.showMinimizeButton">
</seeAlso>
</docItem>
<docItem ref="attr:Tree.showRoot" flags="IRW" description="Controls whether a call to ${isc.DocUtils.linkForRef('method:Tree.getOpenList')} includes the root node.  Since view&amp;#010 components such as a ${isc.DocUtils.linkForRef('class:TreeGrid')} use &lt;code&gt;getOpenList()&lt;/code&gt; to display the currently&amp;#010 visible tree, &lt;code&gt;showRoot&lt;/code&gt; controls whether the root node is shown to the user.&amp;#010 &lt;P&gt;&amp;#010 All Trees must have a single, logical root, however, most applications want to show multiple&amp;#010 nodes at top level.  &lt;code&gt;showRoot:false&lt;/code&gt;, the default setting, prevents the logical&amp;#010 root from being shown, so that the displayed tree begins with the children of root.&amp;#010 &lt;P&gt;&amp;#010 You can set &lt;code&gt;showRoot:true&lt;/code&gt; to show the single, logical root node as the only&amp;#010 top-level node.  This property is only meaningful for Trees where you supplied a value for&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.root')}, otherwise, you will see an automatically generated root node that is&amp;#010 meaningless to the user." name="showRoot" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Tree">
</docItem>
<docItem ref="method:Button.iconClick" flags="" description=" If this button is showing an ${isc.DocUtils.linkForRef('attr:Button.icon','icon')}, a separate click handler for the&amp;#010 icon may be defined as &lt;code&gt;this.iconClick&lt;/code&gt;.&amp;#010 Returning false will suppress the standard button click handling code.&amp;#010" name="iconClick" type="method" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Chart.valueTitle" flags="IR" description="A label for the data values, such as &quot;Sales in Thousands&quot;, typically used as the label for&amp;#010 the value axis." name="valueTitle" valueType="String" defaultValue="null" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="classAttr:RPCManager.defaultTimeout" flags="RW" description="In milliseconds, how long the RPCManager waits for an RPC request to complete before&amp;#010 returning an error.  If set to zero, the RPCManager will not enforce a timeout, but note that&amp;#010 most browsers enforce their own timeouts on HTTP requests.&amp;#010 &lt;p&gt;&amp;#010 For the &quot;xmlHttpRequest&quot; transport, this timeout can only happen if the server actually fails to&amp;#010 respond within the specified number of milliseconds.  For the &quot;hiddenFrames&quot; transport,&amp;#010 this timeout will occur for non-200 (HTTP_OK) responses." name="defaultTimeout" valueType="number" defaultValue="240000 [4 minutes]" type="classAttr" definingClass="class:RPCManager">
</docItem>
<docItem ref="method:Dialog.cancelClick" flags="" description=" Handle a click on the 'cancel' button of this Dialog.&amp;#010 Default implementation is to return null and hide the Dialog.&amp;#010 Override to do something else.&amp;#010" name="cancelClick" type="method" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="attr:CubeGrid.facets" flags="I" description="Facet definitions for this CubeGrid.  Facets, also called &quot;dimensions&quot;, are orthogonal&amp;#010 aspects of the data model.&amp;#010 &lt;P&gt;&amp;#010 For example, you can look at profit by the facets &quot;plant and product&quot; or by &quot;product and&amp;#010 plant&quot; and it's the same number, because the facets - plant and product - are the same.&amp;#010 What would change the profit numbers would be to remove a facet, called &quot;summarizing&quot;,&amp;#010 or add a new facet, called &quot;drilling down&quot;.  For example, showing profit by plant and&amp;#010 product, you could &quot;drill down&quot; by adding the region facet, which would divide profit&amp;#010 among each region.  Or you could remove the &quot;plant&quot; facet, showing total profit for each&amp;#010 &quot;product&quot;, summed across all plants." name="facets" valueType="Array of Facet" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.getFacet">
</seeAlso>
<seeAlso ref="class:Facet">
</seeAlso>
<seeAlso ref="method:CubeGrid.getFacetValue">
</seeAlso>
<seeAlso ref="class:FacetValue">
</seeAlso>
</docItem>
<docItem ref="method:List.lastIndexOf" flags="" description=" Return the position in the list of the last instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking before that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="lastIndexOf" type="method" definingClass="interface:List">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="last index to consider" optional="true" name="pos" type="number">
</params>
<params description="earliest index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:CheckboxItem.valueIconHeight" flags="IRW" description="Height of the checkbox image." name="valueIconHeight" valueType="number" defaultValue="13" type="attr" definingClass="class:CheckboxItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="method:ListGrid.getGroupByText" flags="" description=" If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canGroupBy','this.canGroupBy')} is true, this string will be shown as the&amp;#010 title for the menu item to toggle the group by setting for a field.&lt;br&gt;&amp;#010 Default implementation returns &lt;code&gt;&quot;Group by &quot;&lt;/code&gt; + the field's&amp;#010 title.&amp;#010" name="getGroupByText" type="method" definingClass="class:ListGrid">
<params description="field to get the menu item title for" optional="false" name="field" type="ListGridField">
</params>
<returns description="Title to show in the menu item" type="string"></returns>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButton" flags="RA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, when the user rolls over the header buttons in this&amp;#010 grid the headerMenuButton will be shown over the header button in question. When clicked&amp;#010 this button will display the standard header context menu (see&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.displayHeaderContextMenu')}).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('group:headerMenuButton','Several properties')} exist to customize the appearance of the&amp;#010 headerMenuButton. Also see the ${isc.DocUtils.linkForRef('type:AutoChild')} documentation for information on how &amp;#010 to make freeform modifications to autoChild widgets" name="headerMenuButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="attr:DetailViewer.loadingMessageStyle" flags="IRWA" description="CSS style to use for the ${isc.DocUtils.linkForRef('attr:DetailViewer.loadingMessage')}." name="loadingMessageStyle" valueType="CSSStyleName" defaultValue="&quot;normal&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:FormItem.type" flags="IR" description="The DynamicForm picks a field renderer based on the type of the field (and sometimes other&amp;#010 attributes of the field)." name="type" valueType="FormItemType" defaultValue="&quot;text&quot;" type="attr" definingClass="class:FormItem">
<seeAlso ref="type:FormItemType">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:SelectItem.displayField" description="Specifies an alternative field from which display values should be retrieved for this&amp;#010 item.&lt;br&gt;&amp;#010 If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound &amp;#010 to the same dataSource as the form as a whole, this is implemented by picking up the&amp;#010 value of the specified field from the Form's values object.&lt;br&gt;&amp;#010 Otherwise this item will attempt to map its underlying value to a display value&amp;#010 by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the &amp;#010 &lt;code&gt;displayField&lt;/code&gt; value from that record.&lt;br&gt;&amp;#010 This essentially enables the specified &lt;code&gt;optionDataSource&lt;/code&gt; to be used as&amp;#010 a server based ${isc.DocUtils.linkForRef('group:valueMap')}." name="displayField" valueType="string" defaultValue="null" definingClass="class:SelectItem">
    <getter>FormItem.getDisplayFieldName</getter>
    <examples>${isc.DocUtils.linkForExampleId('relatedRecords')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="class:Class" description="The Class object is root of the Isomorphic SmartClient inheritance tree -- it includes&amp;#010 functionality for creating instances, adding methods and properties, getting prototypes,&amp;#010 etc.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 To add functionality to ALL classes, add them to Class.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 To create a Class, call &lt;code&gt;ClassFactory.defineClass(&quot;MyClass&quot;, &quot;MySuperClass&quot;)&lt;/code&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;defineClass&lt;/code&gt; will return the created class, and make it available as&amp;#010 &lt;code&gt;isc.MyClass&lt;/code&gt;, and as the global variable &lt;code&gt;MyClass&lt;/code&gt; if not in&amp;#010 ${isc.DocUtils.linkForRef('class:isc','portal mode')}.&amp;#010 &lt;P&gt;&amp;#010 You can then:&amp;#010 &lt;UL&gt;&amp;#010		&lt;LI&gt;add class-level (static) properties and methods to the class:&amp;#010				&lt;code&gt;MyClass.addClassProperties()&lt;/code&gt;	&amp;#010			these methods and properties are accessed through the Class variable itself, eg:&amp;#010				&lt;code&gt;MyClass.someStaticMethod()&lt;/code&gt; or &lt;code&gt;MyClass.someStaticProperty&lt;/code&gt;&amp;#010&amp;#010		&lt;LI&gt;add default instance properties and methods to the class:&amp;#010				&lt;code&gt;MyClass.addProperties()&lt;/code&gt;&amp;#010			these methods and properties are accessed through a class instance, eg:&amp;#010				&lt;code&gt;var myInstance = MyClass.create();&lt;/code&gt;&amp;#010				&lt;code&gt;myInstance.someInstanceMethod()&lt;/code&gt;&amp;#010&amp;#010		&lt;LI&gt;create new instances of this class:&amp;#010				&lt;code&gt;var myInstance = MyClass.create()&lt;/code&gt;&amp;#010 &lt;/UL&gt;&amp;#010 NOTE: as a convention, all class names begin with a capital letter and all instances begin&amp;#010 with a lower case letter." name="Class" type="class">
    <methods>method:Class.init</methods>
    <methods>method:Class.getID</methods>
    <methods>method:Class.getClass</methods>
    <methods>method:Class.getSuperClass</methods>
    <methods>method:Class.getClassName</methods>
    <methods>method:Class.addProperties</methods>
    <methods>method:Class.addPropertyList</methods>
    <methods>method:Class.setProperty</methods>
    <methods>method:Class.setProperties</methods>
    <methods>method:Class.isA</methods>
    <methods>method:Class.observe</methods>
    <methods>method:Class.ignore</methods>
    <methods>method:Class.isObserving</methods>
    <methods>method:Class.fireCallback</methods>
    <methods>method:Class.delayCall</methods>
    <methods>method:Class.map</methods>
    <methods>method:Class.Super</methods>
    <methods>method:Class.toString</methods>
    <classMethods>classMethod:Class.create</classMethods>
    <classMethods>classMethod:Class.getClassName</classMethods>
    <classMethods>classMethod:Class.getSuperClass</classMethods>
    <classMethods>classMethod:Class.registerStringMethods</classMethods>
    <classMethods>classMethod:Class.addClassProperties</classMethods>
    <classMethods>classMethod:Class.addProperties</classMethods>
    <classMethods>classMethod:Class.addPropertyList</classMethods>
    <classMethods>classMethod:Class.changeDefaults</classMethods>
    <classMethods>classMethod:Class.setProperties</classMethods>
    <classMethods>classMethod:Class.isA</classMethods>
    <classMethods>classMethod:Class.Super</classMethods>
    <classMethods>classMethod:Class.map</classMethods>
    <classMethods>classMethod:Class.getInstanceProperty</classMethods>
    <classMethods>classMethod:Class.setInstanceProperty</classMethods>
    <classMethods>classMethod:Class.fireCallback</classMethods>
    <classMethods>classMethod:Class.delayCall</classMethods>
    <classMethods>classMethod:Class.toString</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
    <attrs>attr:Class.addPropertiesOnCreate</attrs>
</docItem>
<docItem ref="method:TreeGrid.willAcceptDrop" flags="A" description=" &amp;#010 This method overrides ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')} and works as follows:&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 First, ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')} (the superclass definition) is consulted.  If it&amp;#010 returns false, then this method returns false immediately.&lt;br&gt;&amp;#010 This handles the following cases:&lt;br&gt;&amp;#010 - reordering of records withing this TreeGrid when ${isc.DocUtils.linkForRef('attr:ListGrid.canReorderRecords')} is true&lt;br&gt;&amp;#010 - accepting dropped records from another dragTarget when ${isc.DocUtils.linkForRef('attr:ListGrid.canAcceptDroppedRecords')} &amp;#010   is true and the dragTarget gives us a valid set of records to drop into place.&lt;br&gt;&amp;#010 - disallowing drop over disabled nodes, or nodes with &lt;code&gt;canAcceptDrop:false&lt;/code&gt;&amp;#010 &lt;br&gt;&amp;#010 This method will also return false if the drop occurred over a leaf node whos immediate &amp;#010 parent has &lt;code&gt;canAcceptDrop&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;&lt;br&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is true, and the user is dragging a node from one folder&amp;#010 to another, this method will return true to allow the change of parent folder.&lt;br&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Otherwise this method returns true.&amp;#010&amp;#010" name="willAcceptDrop" type="method" definingClass="class:TreeGrid">
<returns description="true if this component will accept a drop of the dragData" type="boolean"></returns>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:Canvas.maxWidth" flags="IRWA" description="Maximum width that this Canvas can be resized to." name="maxWidth" valueType="number" defaultValue="10000" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:FormItem.imageURLSuffix" flags="IRWA" description="Suffix to apply to the end of any ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} when determining the URL for&amp;#010 the image. A common usage would be to specify a suffix of &lt;code&gt;&quot;.gif&quot;&lt;/code&gt; in which&amp;#010 case the &lt;code&gt;valueIcons&lt;/code&gt; property would map values to the names of images without&amp;#010 the &lt;code&gt;&quot;.gif&quot;&lt;/code&gt; extension." name="imageURLSuffix" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="method:Array.makeIndex" flags="A" description=" Make an index for the items in this Array by a particular property of each item.&amp;#010 &lt;P&gt;&amp;#010 Returns an Object with keys for each distinct listItem[property] value.  Each key will point&amp;#010 to an array of items that share that property value.  The sub-array will be in the same order&amp;#010 that they are in this list.&amp;#010&amp;#010" name="makeIndex" type="method" definingClass="object:Array">
<params description="names of the property to index by" optional="false" name="property" type="strings">
</params>
<params description="if true, we always make an array for every index.  if false, we make an Array only&amp;#010              when more than one item has the same value for the index property" optional="false" name="alwaysMakeArray" defaultValue="false" type="boolean"></params>
<returns description="index object" type="object"></returns>
</docItem>
<docItem ref="attr:SimpleType.validators" flags="IR" description="Validators to apply to value of this type." name="validators" valueType="Array of Validator" defaultValue="null" type="attr" definingClass="class:SimpleType">
    <groups>validation</groups>
</docItem>
<docItem ref="method:Canvas.setAccessKey" flags="A" description=" Set the accessKey for this canvas.&amp;#010 &lt;P&gt;&amp;#010 The accessKey can be set to any alphanumeric character (symbols not supported)&amp;#010 Having set an accessKey, the canvas will be given focus when the user hits &amp;#010 Alt+[accessKey], or in Mozilla Firefox 2.0 and above, Shift+Alt+[accessKey].&amp;#010&amp;#010" name="setAccessKey" type="method" definingClass="class:Canvas">
<params description="Character to use as an accessKey for this widget.  Case Insensitive." optional="false" name="accessKey">
</params>
    <groups>focus</groups>
</docItem>
<docItem ref="attr:FormItem.hintClassName" deprecated="As of SmartClient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.hintStyle')}" flags="IRW" description="CSS class for the &quot;hint&quot; string." name="hintClassName" valueType="CSSStyleName" defaultValue="&quot;formHint&quot;" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.hint">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetLabelHoverAlign" flags="IRWA" description="Allows the developer to override the horizontal text alignment of hover tips shown for&amp;#010 facetLabels.  If unspecified the hover canvas content alignment will be set by&amp;#010 &lt;code&gt;this.hoverAlign&lt;/code&gt; if specified." name="facetLabelHoverAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverAlign">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="group:members" name="members" type="group">
    <refs>method:ValuesManager.addMember</refs>
    <refs>method:ValuesManager.addMembers</refs>
    <refs>method:ValuesManager.removeMember</refs>
    <refs>method:ValuesManager.removeMembers</refs>
    <refs>method:ValuesManager.getMembers</refs>
    <refs>method:ValuesManager.getMember</refs>
    <refs>method:ValuesManager.getMemberForField</refs>
</docItem>
<docItem ref="classMethod:FormItem.create" flags="" description=" FormItem.create() should never be called directly, instead, create a ${isc.DocUtils.linkForRef('class:DynamicForm')}&amp;#010 and specify form items via ${isc.DocUtils.linkForRef('attr:DynamicForm.items','form.items')}.&amp;#010&amp;#010" name="create" type="classMethod" definingClass="class:FormItem">
</docItem>
<docItem ref="method:Canvas.setCanFocus" flags="A" description=" Change whether a widget can accept keyboard focus. &amp;#010" name="setCanFocus" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canFocus">
</seeAlso>
<params description="whether the widget should now accept focus" optional="false" name="canFocus" type="boolean">
</params>
</docItem>
<docItem ref="attr:Facet.width" flags="IR" description="Integer number of pixels.  For row facets, width of headers." name="width" valueType="number" defaultValue="cubeGrid.defaultFacetWidth" type="attr" definingClass="class:Facet">
<seeAlso ref="attr:CubeGrid.defaultFacetWidth">
</seeAlso>
</docItem>
<docItem ref="classMethod:Time.toTime" flags="" description=" Given a date object, return the time associated with the date as a string.&amp;#010 If no formatter is passed, use the standard formatter set up via ${isc.DocUtils.linkForRef('classMethod:Time.setNormalDisplayFormat')}&amp;#010" name="toTime" type="classMethod" definingClass="class:Time">
<params description="Date to convert to a time string." optional="false" name="date" type="Date">
</params>
<params description="Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or&amp;#010  a string designating a standard formatter" optional="true" name="formatter" type="timeFormatter|function">
</params>
</docItem>
<docItem ref="method:Array.sum" flags="" description=" 			Returns the sum of the numbers in the array, skipping non-numeric values.&amp;#010&amp;#010			If the start and/or end are given, uses only the specified subset of the list.&amp;#010&amp;#010" name="sum" type="method" definingClass="object:Array">
<params description="optional start index (default is 0)" optional="true" name="start" type="number">
</params>
<params description="optional end index (default is list.length)" optional="true" name="end" type="number">
</params>
<returns description="sum of all items in the list" type="number"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="method:ListGrid.parseEditorValue" flags="" description=" Method used to convert the value displayed in an editor for some cell being edited into&amp;#010 a raw value for saving.&lt;br&gt;&amp;#010 If &lt;code&gt;parseEditorValue&lt;/code&gt; is defined at the field level for some cell being edited,&amp;#010 the field level method will be used to parse the edit value and this method will not&amp;#010 be called for that cell.&lt;br&gt;&amp;#010&amp;#010" name="parseEditorValue" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.parseEditorValue">
</seeAlso>
<seeAlso ref="method:ListGrid.formatEditorValue">
</seeAlso>
<params description="value displayed in the editor for the cell" optional="false" name="value" type="any">
</params>
<params description="record object for the row being edited. May be null if this                          is a new row being added to the end of the list." optional="false" name="record" type="ListGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<returns description="value in raw format" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:FormItemIcon.showOver" flags="IRWA" description="Should this icon's image switch to the appropriate &quot;over&quot; source when the user rolls&amp;#010  over or focuses on the icon?" name="showOver" valueType="boolean" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.showOverIcons">
</seeAlso>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Canvas.snapHDirection" flags="IRW" description="The horizontal snap direction.&amp;#010 Set this value to Canvas.BEFORE to snap to the nearest gridpoint to the left;&amp;#010 set it to Canvas.AFTER to snap to the nearest gridpoint to the right; and set&amp;#010 it to Canvas.NEAREST to snap to the nearest gridpoint in either direction." name="snapHDirection" valueType="string" defaultValue="Canvas.AFTER" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.snapResizeToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapResizeToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Splitbar.capSize" flags="IR" description="If the default items are used, capSize is the size in pixels of the first and last&amp;#010          images in this stretchImg." name="capSize" valueType="integer" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:PickList.valueIconField" flags="IRWA" description="For Databound formItems, this property determines which column &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} should show up in for this formItem's pickList.&lt;br&gt;&amp;#010 If unset valueIcons show up in the ${isc.DocUtils.linkForRef('attr:PickList.displayField')} column if specified, &amp;#010 otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')} column.&lt;br&gt;&amp;#010 In most cases only the &lt;code&gt;displayField&lt;/code&gt; or &lt;code&gt;valueField&lt;/code&gt; will be visible.&amp;#010 This property is typically only required if custom ${isc.DocUtils.linkForRef('attr:PickList.pickListFields')} &amp;#010 have been specfied for this item." name="valueIconField" valueType="string" defaultValue="null" type="attr" definingClass="interface:PickList">
<seeAlso ref="attr:FormItem.valueIcons">
</seeAlso>
<seeAlso ref="attr:PickList.pickListFields">
</seeAlso>
</docItem>
<docItem ref="attr:Window.keepInParentRect" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Window.canDragReposition')} or ${isc.DocUtils.linkForRef('attr:Window.canDragResize')} is true, should the&amp;#010 windows size and position be constrained such that it remains within the viewport of&amp;#010 its parent element (or for top level windows, within the viewport of the browser window)?&amp;#010 &lt;br&gt;&amp;#010 Can also be set to an array denoting an arbitrary rect [Left,Top,Width,Height] beyond&amp;#010 which the window cannot be moved.&amp;#010 &lt;p&gt;&amp;#010 Note: keepInParentRect affects only user drag interactions, not programmatic moves." name="keepInParentRect" valueType="boolean or rect" defaultValue="null" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.canDragReposition">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:StretchImgButton.setState" flags="" description=" Set the 'state' of this object, this changes it's appearance.&amp;#010&amp;#010" name="setState" type="method" definingClass="class:StretchImgButton">
<seeAlso ref="method:StretchImgButton.setDisabled" description="which also affects state values."></seeAlso>
<params description="new state" optional="false" name="newState" type="State">
</params>
    <groups>state</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Tree.setRoot" flags="" description="&amp;#010 Set the root of the tree. &amp;#010&amp;#010" name="setRoot" type="method" definingClass="class:Tree">
<params description="new root node" optional="false" name="newRoot" type="TreeNode">
</params>
<params description="set to true to automatically open the new root node." optional="false" name="autoOpen" type="boolean">
</params>
</docItem>
<docItem ref="method:Tree.getOpenList" flags="" description="&amp;#010 Return a flattened list of nodes that are open under some parent, including the parent&amp;#010 itself.  If the passed in node is a leaf, this method returns null&amp;#010&amp;#010" name="getOpenList" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="flattened list of open nodes" type="List of TreeNode"></returns>
</docItem>
<docItem ref="group:sharingNodes" title="Sharing Nodes" description="For local Trees, that is, Trees that don't use load on demand, SmartClient supports setting&amp;#010 up the Tree structure by setting properties such as &quot;childrenProperty&quot;, directly on data&amp;#010 nodes.  This allows for simpler, faster structures for many common tree uses, but can create&amp;#010 confusion if nodes need to be shared across Trees.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;using one node in two places in one Tree&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To do this, either clone the shared node like so:&lt;pre&gt;&amp;#010&amp;#010     tree.add(isc.addProperties({}, sharedNode));&amp;#010&amp;#010 &lt;/pre&gt; or place the shared data in a shared subobject instead.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;sharing nodes or subtrees across Trees&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Individual nodes within differing tree structures can be shared by two Trees only if&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}, ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}, and ${isc.DocUtils.linkForRef('attr:Tree.openProperty')} have&amp;#010 different values in each Tree.&amp;#010 &lt;P&gt;&amp;#010 As a special case of this, two Trees can maintain different open state across a single&amp;#010 read-only structure as long as just &quot;openProperty&quot; has a different value in each Tree." name="sharingNodes" type="group">
</docItem>
<docItem ref="method:Canvas.setOpacity" flags="" description="			Sets the opacity for the widget to the newOpacity value. This newOpacity&amp;#010          value must be within the range of 0 (transparent) to 100 (opaque). &lt;br&gt;&amp;#010          In Internet Explorer, any other filter effects will be wiped out.&amp;#010" name="setOpacity" type="method" definingClass="class:Canvas">
<params description="new opacity level" optional="false" name="newOpacity" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('translucency')}</examples>
    <groups>cues</groups>
</docItem>
<docItem ref="method:Array.findIndex" flags="" description=" Find the index of the first Object where property == value in the object.&amp;#010 &lt;P&gt;&amp;#010 Pass an Object instead to match multiple properties.&amp;#010 &lt;P&gt;&amp;#010 Note: for string values, matches are case sensitive.&amp;#010&amp;#010" name="findIndex" type="method" definingClass="object:Array">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="method:List.sort" flags="" description=" Sorts the elements of the List in place.&amp;#010 &lt;P&gt;&amp;#010 The optional comparator function should take two parameters &quot;a&quot; and &quot;b&quot; which are the two list&amp;#010 items to compare, and should return:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; a value less than zero, if &quot;a&quot; is less than &quot;b&quot; such that &quot;a&quot; should appear earlier in the&amp;#010      list&amp;#010 &lt;li&gt; zero, if &quot;a&quot; and &quot;b&quot; are equal&amp;#010 &lt;li&gt; a value greater than zero, if &quot;a&quot; is greater than &quot;b&quot; such that &quot;b&quot; should appear earlier in&amp;#010      the list&amp;#010 &lt;/ul&gt;&amp;#010 &amp;#010" name="sort" type="method" definingClass="interface:List">
<params description="comparator function to use" optional="true" name="comparator" type="function">
</params>
<returns description="the list itself" type="List"></returns>
</docItem>
<docItem ref="attr:WSRequest.useFlatFields" flags="IR" description="When &lt;code&gt;useFlatFields&lt;/code&gt; is set for a request to be sent to a WSDL web service, when&amp;#010 creating the input XML message to send to the web service, properties in&amp;#010 ${isc.DocUtils.linkForRef('attr:WSRequest.data','request.data')} will be used as the values for XML elements of the same name, at&amp;#010 any level of nesting.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;useFlatFields&lt;/code&gt; allows you to ignore gratuitous XML message structure, such as&amp;#010 extra levels of nested elements, and provides some insulation against changes in the&amp;#010 required structure of the input message.&amp;#010 &lt;P&gt;&amp;#010 For example, given this input message:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;FindServices&amp;gt;&amp;#010     &amp;lt;searchFor&amp;gt;search text&amp;lt;/searchFor&amp;gt;&amp;#010     &amp;lt;Options&amp;gt;&amp;#010         &amp;lt;caseSensitive&amp;gt;false&amp;lt;/caseSensitive&amp;gt;&amp;#010     &amp;lt;/Options&amp;gt;&amp;#010     &amp;lt;IncludeInSearch&amp;gt;&amp;#010         &amp;lt;serviceName&amp;gt;true&amp;lt;/serviceName&amp;gt;&amp;#010         &amp;lt;documentation&amp;gt;true&amp;lt;/documentation&amp;gt;&amp;#010         &amp;lt;keywords&amp;gt;true&amp;lt;/keywords&amp;gt;&amp;#010     &amp;lt;/IncludeInSearch&amp;gt;&amp;#010 &amp;lt;/FindServices&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 If &lt;code&gt;useFlatFields&lt;/code&gt; were &lt;b&gt;not&lt;/b&gt; set, in order to fill out this message&amp;#010 correctly, &lt;code&gt;request.data&lt;/code&gt; would need to be:&amp;#010 &lt;pre&gt;{&amp;#010    searchFor: &quot;search text&quot;,&amp;#010    Options : {&amp;#010        caseSensitive: false,&amp;#010    },&amp;#010    IncludeInSearch : {&amp;#010        serviceName: true,&amp;#010        documentation : true,&amp;#010        keywords : true&amp;#010    }&amp;#010 }&lt;/pre&gt;&amp;#010 However if useFlatFields were set, &lt;code&gt;request.data&lt;/code&gt; could be just:&amp;#010 &lt;pre&gt;{&amp;#010    searchFor: &quot;search text&quot;,&amp;#010    caseSensitive: false,&amp;#010    serviceName: true,&amp;#010    documentation : true,&amp;#010    keywords : true&amp;#010 }&lt;/pre&gt;&amp;#010 &lt;code&gt;useFlatFields&lt;/code&gt; is often set when the input data comes from a ${isc.DocUtils.linkForRef('class:DynamicForm')}&amp;#010 to avoid the cumbersome and fragile process of mapping input fields to an XML structure.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} can also be set to cause &lt;b&gt;all&lt;/b&gt; dsRequests of a&amp;#010 particular type to &lt;code&gt;useFlatFields&lt;/code&gt; automatically.&amp;#010 &lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')} can be set use &quot;flattened&quot;&amp;#010 binding to fields of a WSDL message or XML Schema.&amp;#010 &lt;P&gt;&amp;#010 Note that &lt;code&gt;useFlatFields&lt;/code&gt; is not generally recommended for use with XML input&amp;#010 messages where multiple simple type fields exist with the same name, however if used in this&amp;#010 way, the first field to use a given name wins.  &quot;first&quot; means the first field encountered in a&amp;#010 depth first search.  &quot;wins&quot; means only the first field will be populated in the generated&amp;#010 XML message." name="useFlatFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:WSRequest">
    <groups>flatFields</groups>
</docItem>
<docItem ref="method:DetailViewer.viewSelectedData" flags="" description="&amp;#010 Displays the currently selected record(s) of the selectionComponent widget (typically a&amp;#010 listGrid) in the detailViewer.&amp;#010&amp;#010" name="viewSelectedData" type="method" definingClass="class:DetailViewer">
<params description="the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected&amp;#010     record(s) is/are to be edited" optional="false" name="selectionComponent" type="ListGrid or ID">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:TreeGrid.showConnectors" flags="IRW" description="Should this treeGrid show connector lines illustrating the trees hierachy?" name="showConnectors" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('connectors')}</examples>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="group:xmlSchema" name="xmlSchema" type="group">
    <refs>method:DataSource.getLegalChildTags</refs>
    <refs>classMethod:XMLTools.loadXMLSchema</refs>
    <refs>classMethod:XMLTools.loadWSDL</refs>
</docItem>
<docItem ref="class:ActiveXControl" description="ISC Abstraction for ActiveX controls" name="ActiveXControl" type="class">
    <methods>method:ActiveXControl.getPluginID</methods>
    <methods>method:ActiveXControl.getPluginHandle</methods>
    <treeLocation>Optional Modules/Client Bridges</treeLocation>
    <attrs>attr:ActiveXControl.id</attrs>
    <attrs>attr:ActiveXControl.params</attrs>
    <attrs>attr:ActiveXControl.uuid</attrs>
    <attrs>attr:ActiveXControl.classID</attrs>
    <attrs>attr:ActiveXControl.codeBase</attrs>
    <requiresModules>PluginBridges</requiresModules>
</docItem>
<docItem ref="method:TabSet.getTab" flags="" description=" Get the live Canvas representing a tab by index or ID.  &amp;#010 If passed a tab Canvas, just returns it.&amp;#010 &lt;P&gt;&amp;#010 Note that live Tab instances are not available until ${isc.DocUtils.linkForRef('method:Canvas.draw','draw()')}.&amp;#010 &lt;P&gt;&amp;#010 The returned Tab is considered an internal component of the TabSet.  In order to maximize&amp;#010 forward compatibility, manipulate tabs through APIs such as a ${isc.DocUtils.linkForRef('method:TabSet.setTabTitle')} instead.&amp;#010 Also note that a super-lightweight TabSet implementation may not use a separate Canvas per&amp;#010 Tab, and code that accesses an manipulates Tabs as Canvases won't be compatible with that&amp;#010 implementation.&amp;#010&amp;#010" name="getTab" type="method" definingClass="class:TabSet">
<params optional="false" name="tab" type="int | ID | Canvas">
</params>
<returns description="the tab Canvas, or null if not found or TabSet not drawn yet" type="Tab"></returns>
</docItem>
<docItem ref="method:PickList.dataArrived" flags="" description=" If this item is showing a dataBound pickList, this notification method will be fired &amp;#010 when new data arrives from the server.&amp;#010" name="dataArrived" type="method" definingClass="interface:PickList">
<params description="index of first row returned by the server" optional="false" name="startRow" type="number">
</params>
<params description="index of last row returned by the server" optional="false" name="endRow" type="number">
</params>
<params description="pointer this pickList's data" optional="false" name="data" type="ResultSet">
</params>
</docItem>
<docItem ref="attr:DSRequest.useFlatFields" flags="IR" description="When &lt;code&gt;useFlatFields&lt;/code&gt; is set for a request to be sent to a WSDL web service, when&amp;#010 creating the input XML message to send to the web service, properties in&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.data','request.data')} will be used as the values for XML elements of the same name, at&amp;#010 any level of nesting.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;useFlatFields&lt;/code&gt; allows you to ignore gratuitous XML message structure, such as&amp;#010 extra levels of nested elements, and provides some insulation against changes in the&amp;#010 required structure of the input message.&amp;#010 &lt;P&gt;&amp;#010 For example, given this input message:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;FindServices&amp;gt;&amp;#010     &amp;lt;searchFor&amp;gt;search text&amp;lt;/searchFor&amp;gt;&amp;#010     &amp;lt;Options&amp;gt;&amp;#010         &amp;lt;caseSensitive&amp;gt;false&amp;lt;/caseSensitive&amp;gt;&amp;#010     &amp;lt;/Options&amp;gt;&amp;#010     &amp;lt;IncludeInSearch&amp;gt;&amp;#010         &amp;lt;serviceName&amp;gt;true&amp;lt;/serviceName&amp;gt;&amp;#010         &amp;lt;documentation&amp;gt;true&amp;lt;/documentation&amp;gt;&amp;#010         &amp;lt;keywords&amp;gt;true&amp;lt;/keywords&amp;gt;&amp;#010     &amp;lt;/IncludeInSearch&amp;gt;&amp;#010 &amp;lt;/FindServices&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 If &lt;code&gt;useFlatFields&lt;/code&gt; were &lt;b&gt;not&lt;/b&gt; set, in order to fill out this message&amp;#010 correctly, &lt;code&gt;request.data&lt;/code&gt; would need to be:&amp;#010 &lt;pre&gt;{&amp;#010    searchFor: &quot;search text&quot;,&amp;#010    Options : {&amp;#010        caseSensitive: false,&amp;#010    },&amp;#010    IncludeInSearch : {&amp;#010        serviceName: true,&amp;#010        documentation : true,&amp;#010        keywords : true&amp;#010    }&amp;#010 }&lt;/pre&gt;&amp;#010 However if useFlatFields were set, &lt;code&gt;request.data&lt;/code&gt; could be just:&amp;#010 &lt;pre&gt;{&amp;#010    searchFor: &quot;search text&quot;,&amp;#010    caseSensitive: false,&amp;#010    serviceName: true,&amp;#010    documentation : true,&amp;#010    keywords : true&amp;#010 }&lt;/pre&gt;&amp;#010 &lt;code&gt;useFlatFields&lt;/code&gt; is often set when the input data comes from a ${isc.DocUtils.linkForRef('class:DynamicForm')}&amp;#010 to avoid the cumbersome and fragile process of mapping input fields to an XML structure.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} can also be set to cause &lt;b&gt;all&lt;/b&gt; dsRequests of a&amp;#010 particular type to &lt;code&gt;useFlatFields&lt;/code&gt; automatically.&amp;#010 &lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')} can be set use &quot;flattened&quot;&amp;#010 binding to fields of a WSDL message or XML Schema.&amp;#010 &lt;P&gt;&amp;#010 Note that &lt;code&gt;useFlatFields&lt;/code&gt; is not generally recommended for use with XML input&amp;#010 messages where multiple simple type fields exist with the same name, however if used in this&amp;#010 way, the first field to use a given name wins.  &quot;first&quot; means the first field encountered in a&amp;#010 depth first search.  &quot;wins&quot; means only the first field will be populated in the generated&amp;#010 XML message." name="useFlatFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DSRequest">
    <groups>flatFields</groups>
</docItem>
<docItem ref="method:StatefulCanvas.getState" flags="A" description=" Return the state of this StatefulCanvas&amp;#010" name="getState" type="method" definingClass="class:StatefulCanvas">
<returns type="State">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="attr:RPCRequest.callback" flags="IRW" description="If you expect to receive a response to your RPC request, you can specify a callback that&amp;#010 will be called with an instance or RPCResponse class as sent by the server.  Queuing does&amp;#010 not affect callbacks in any way - your specified callback will be invoked for each&amp;#010 RPCRequest that contained a callback regardless of whether the request was sent as part of a&amp;#010 queue or not." name="callback" valueType="RPCCallback" defaultValue="null" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="classAttr:Dialog.OK_BUTTON_TITLE" flags="IRW" description="Title for the &lt;code&gt;&quot;OK&quot;&lt;/code&gt; button." name="OK_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;OK&quot;" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:FormItem.required" flags="IR" description="Whether a non-empty value is required for this field to pass validation.&amp;#010 &lt;BR&gt;&amp;#010 &lt;b&gt;Note:&lt;/b&gt; if specified on a FormItem, &lt;code&gt;required&lt;/code&gt; is only enforced on the&amp;#010 client.  &lt;code&gt;required&lt;/code&gt; should generally be specified on a&amp;#010 ${isc.DocUtils.linkForRef('class:DataSourceField')}." name="required" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FormItem">
    <examples>${isc.DocUtils.linkForExampleId('formShowAndHide')}</examples>
    <groups>validation</groups>
</docItem>
<docItem ref="method:Tree.isRoot" flags="" description="&amp;#010 Return true if the passed node is the root node.&amp;#010&amp;#010" name="isRoot" type="method" definingClass="class:Tree">
<params description="node to test" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node is the root node" type="boolean"></returns>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Menu.data" description="An array of menuItem objects, specifying the menu items this menu should show." name="data" valueType="Array of MenuItem" defaultValue="null" definingClass="class:Menu">
    <setter>setData</setter>
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
    <groups>data</groups>
</docItem>
<docItem ref="attr:DateItem.useTextField" flags="IRW" description="Should we show the date in a text field, or as 3 select boxes?" name="useTextField" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DateItem">
    <examples>${isc.DocUtils.linkForExampleId('dateItem')}</examples>
    <groups>basics</groups>
</docItem>
<docItem ref="attr:Layout.animateMemberTime" flags="IRWA" description="If specified this is the duration of show/hide animations when members are being shown&amp;#010 or hidden due to being added / removed from this layout." name="animateMemberTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ListGrid.selectOnEdit" flags="IRWA" description="When the user starts editing a row, should the data in that row also be selected?" name="selectOnEdit" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:DataSourceField.xmlAttribute" flags="IR" description="Indicates that ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} should serialize this value as an XML&amp;#010 attribute.&amp;#010 &lt;P&gt;&amp;#010 Note this does not need to be declared in order for DataSource records to be derived from&amp;#010 XML data: a field will be populated with either an attribute or subelement with matching&amp;#010 name." name="xmlAttribute" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>xmlSerialize</groups>
    <groups>componentSchema</groups>
</docItem>
<docItem ref="class:Hover" description="The Hover class handles showing a simple SmartClient canvas containing arbitrary HTML, or&amp;#010 triggering some other action in response to a user holding the mouse-pointer (or hovering)&amp;#010 over a specific widget." name="Hover" type="class">
    <classAttrs>classAttr:Hover.moveWithMouse</classAttrs>
    <classAttrs>classAttr:Hover.leftOffset</classAttrs>
    <classAttrs>classAttr:Hover.topOffset</classAttrs>
    <classAttrs>classAttr:Hover.hoverCanvasDefaults</classAttrs>
    <classMethods>classMethod:Hover.show</classMethods>
    <classMethods>classMethod:Hover.hide</classMethods>
    <treeLocation>Client Reference/Control</treeLocation>
</docItem>
<docItem ref="classMethod:XMLTools.selectString" flags="A" description=" Retrieve a string value from an XML element or document based on an XPath expression.&amp;#010 &lt;P&gt;&amp;#010 If more than one node matches, only the first node's value will be returned.&amp;#010 &lt;P&gt;&amp;#010 Namespacing works as described under ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this API cannot be supported on the Safari web browser for versions prior to&amp;#010 3.0.3.&amp;#010&amp;#010" name="selectString" type="classMethod" definingClass="class:XMLTools">
<params description="Native XMLElement or document to select from" optional="false" name="element" type="XMLElement or XMLDocument">
</params>
<params description="XPath expression to use to select nodes" optional="false" name="expression" type="XPath">
</params>
<params description="namespace mapping used by the expression" optional="true" name="namespaces" type="prefix -&gt; URI mapping">
</params>
<returns description="result of the XPath, in String form" type="String"></returns>
    <examples>${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}</examples>
    <groups>xmlTransform</groups>
</docItem>
<docItem ref="attr:Slider.trackWidth" flags="IRW" description="The thickness of the track. This is the width, for a vertical slider, or the height, for&amp;#010 a horizontal slider." name="trackWidth" valueType="integer" defaultValue="7" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="method:ListGrid.addData" flags="" description=" Perform a DataSource &quot;add&quot; operation to add new records to this component's DataSource.&amp;#010&amp;#010" name="addData" type="method" definingClass="class:ListGrid">
<params description="new record" optional="false" name="newRecord" type="Object">
</params>
<params description="method to call on operation completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundAdd')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:EBay.setSandboxToken" flags="" description="&amp;#010 Sets the token to be used by queries to the eBay sandbox environment.&amp;#010 &amp;#010" name="setSandboxToken" type="method" definingClass="class:EBay">
<params description="Your sanbox authToken, provided to you by eBay." optional="false" name="authToken" type="string">
</params>
</docItem>
<docItem ref="attr:DetailViewer.labelStyle" flags="IRW" description="CSS style for a normal detail label" name="labelStyle" valueType="CSSStyleName" defaultValue="&quot;detailLabel&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:isc.getIconRect" flags="A" description="  Returns the size / position of an icon with respect to the widget rendering out the&amp;#010  form item as an array of coordinates.&amp;#010" name="getIconRect" type="method" definingClass="class:isc">
<params description="icon definition for the icon you want to determine the                               position of (defaults to first icon in this.icons)." optional="false" name="icon" type="object">
</params>
<returns description="four element array representing the Left, Top, Width, and Height of                      the icon in px." type="array"></returns>
</docItem>
<docItem ref="method:ListGrid.cellOver" flags="" description=" Called when the mouse pointer enters a cell&amp;#010&amp;#010" name="cellOver" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:SchemaSet.getSchema" flags="A" description=" Get the schema definition of any complexType or element of complexType defined within&amp;#010 the &amp;lt;schema&amp;gt; element this SchemaSet represents.&amp;#010&amp;#010" name="getSchema" type="method" definingClass="class:SchemaSet">
<params description="name of the schema to retrieve" optional="false" name="schemaName" type="String">
</params>
<params description="optional type of schema to return, either &quot;element&quot; for                              xs:element definitions only or &quot;type&quot; for xs:complexType&amp;#010                              definitions.  If unspecified, either will be returned,&amp;#010                              with types preferred if names collide" optional="true" name="schemaType" type="String">
</params>
<returns description="the schema if found, or null" type="DataSource"></returns>
    <examples>${isc.DocUtils.linkForExampleId('xmlSchemaImport')}</examples>
</docItem>
<docItem ref="group:iscInstall" title="Deploying SmartClient" description="This overview serves as a how-to for installing SmartClient into your web application.&amp;#010 Evaluators are urged to use the SmartClient SDK with the embedded tomcat servlet engine&amp;#010 during evaluation rather than persue installation into an existing web application up front,&amp;#010 however, reading this document and the related ${isc.DocUtils.linkForRef('group:clientServerIntegration','server&amp;#010 integration')} materials is recommended to get an overview.&amp;#010 &lt;P&gt;&amp;#010 SmartClient has two pieces - the client components that run in the browser and the server&amp;#010 components that run in a J2SE compatible container.  You don't need to use a Java back-end&amp;#010 to use SmartClient, but the SDK comes with some examples that assume the presence of the&amp;#010 Java back-end and, for some examples, a SQL Database.  If you will be using SmartClient with&amp;#010 a Java back-end, see below for the list of J2SE application servers supported by the Java&amp;#010 implementation of the SmartClient server.&amp;#010 &lt;p&gt;&amp;#010 The SDK contains two top-level directories: &lt;code&gt;smartclientSDK&lt;/code&gt; and&amp;#010 &lt;code&gt;smartclientRuntime&lt;/code&gt;.  The &lt;code&gt;smartclientSDK&lt;/code&gt; directory contains the&amp;#010 membedded servlet engine, embedded database, examples, and documentation.  The&amp;#010 &lt;code&gt;smartclientRuntime&lt;/code&gt; directory contains just the client and server components of&amp;#010 the SmartClient product - use the contents of this directory when deploying SmartClient into&amp;#010 your application environment.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Client integration&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 To install the client-side portion of SmartClient, simply copy the &lt;code&gt;isomorphic&lt;/code&gt;&amp;#010 directory from the smartclientRuntime webroot to the webroot of your application.  Having&amp;#010 done this you can use SmartClient components on your pages regardless of the technologies&amp;#010 used on your back-end and you can bind to server-side componentry backed by arbitrary&amp;#010 technology - see the &lt;i&gt;Data Integration&lt;/i&gt; section of the&amp;#010 ${isc.DocUtils.linkForRef('group:clientServerIntegration')} section for more information.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Server integration&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 SmartClient can be ${isc.DocUtils.linkForRef('group:nonJavaBackend','integrated with any backend')} without&amp;#010 installing the SmartClient Java server.  However, the SmartClient server accelerates Java&amp;#010 integration and provides other useful facilities, including server-push and network&amp;#010 performance enhancements.  See the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Server summary')} for&amp;#010 details.&amp;#010 &lt;P&gt;&amp;#010 To integrate the server portion of SmartClient, you need to follow the steps below for each&amp;#010 application (WAR) that uses SmartClient.  Note that, if installing into an environment that&amp;#010 uses multiple WARs, installation of SmartClient JARs into a directory shared by multiple&amp;#010 applications is not supported.  Installation of a separate WAR with client-side SmartClient&amp;#010 modules for maintaining cache coherence across applications using the same version of ISC is&amp;#010 supported - contact Isomorphic support for more details on how to set that up.  &amp;#010 &lt;p&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Copy all files from WEB-INF/lib directory of the smartclientRuntime to your&amp;#010 WEB-INF/lib.  SmartClient&amp;#010 leverages a number of third-party libraries - if there are conflicts with the versions you&amp;#010 want to use, use the versions you want - SmartClient has minimal dependencies on these&amp;#010 libraries.  Contact Isomorphic with any specific questions about compatibility.&amp;#010 See the &quot;Java Module Dependencies&quot; section below for a dependency tree that will&amp;#010 help you select a minimal set of JARs to deploy.&amp;#010 &lt;li&gt; Copy the WEB-INF/classes/log4j.isc.config.xml from the smartclientRuntime to your&amp;#010 WEB-INF/classes&amp;#010 directory.  This file contains the SmartClient server log configuration.&amp;#010 &lt;li&gt; Copy the WEB-INF/classes/server.properties from the smartclientRuntime to your WEB-INF/classes&amp;#010 directory.  This file contains settings for basic file locations such the location of&amp;#010 webroot, the SmartClient SQL engine and DMI.  The version under smartclientRuntime has a&amp;#010 basic, secure configuration.  See the version of server.properties under the&amp;#010 smartclientSDK directory for sample SQL and other settings.&amp;#010 &lt;li&gt; Copy the WEB-INF/iscTaglib.xml from the smartclientRuntime to your WEB-INF directory.&amp;#010 This file enables the use of custom SmartClient tags in your JSPs.  &amp;#010 &lt;li&gt; Merge portions of the WEB-INF/web.xml into your application's web.xml.  To use&amp;#010 SmartClient JSP tags like &amp;lt;loadISC&amp;gt;, you'll need to merge the &amp;lt;jsp-config&amp;gt;&amp;#010 section from web.xml.  Also there are some mandatory and optional servlets and filters to&amp;#010 merge - see below.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;u&gt;Merging web.xml&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The following is a description of the servlets and filters you'll find in the web.xml file&amp;#010 contained in the smartclientRuntime and what they do:&amp;#010 &lt;p&gt;&amp;#010 &lt;i&gt;Core Functionality&lt;/i&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Init servlet- &lt;b&gt;required:&lt;/b&gt; initializes the SmartClient server componentry from config files&amp;#010 at container startup time.  Notice that this servlet has no mapping - it's purely an&amp;#010 initialization servlet.&amp;#010 &lt;li&gt;IDACall servlet - &lt;b&gt;required&lt;/b&gt; for ${isc.DocUtils.linkForRef('class:DMI')}, built-in RPC operations and built-in DataSource&amp;#010 operations to work.  All databound examples in the SDK use this servlet.  If you're planning on&amp;#010 using a custom actionURL for all your RPC requests, then you don't need this servlet.&amp;#010 &lt;li&gt;FileDownload servlet - required for serving the Isomorphic framework code compressed and with&amp;#010 caching headers as well as for serving skin images with caching headers.  It is highly&amp;#010 recommended that you use this for production but is not required. &amp;#010 &lt;li&gt;PreCache servlet - loads resources into memory on container startup.  Not required, but if you&amp;#010 exclude this servlet there may be a slow response to the very first request.&amp;#010 &lt;li&gt;jsp-config section - the iscTaglib registration block is required to use&amp;#010 &amp;lt;isomorphic&amp;gt; tags, and the *.isc and *.rpc mappings.  These are optional, if you want&amp;#010 to use these as handy development tools.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;i&gt;Optional Functionality&lt;/i&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;HttpProxy - used by the RPCManager when sending AJAX RPCs to a server other than the&amp;#010 server that serves the main application page.  You need to install this servlet if, for&amp;#010 example, your application will be querying web services exposed by servers other than the&amp;#010 server that is serving the rest of the application.  See the javadoc for this servlet for&amp;#010 various configuration options, such as how to restrict the URLs that are allowed to be&amp;#010 proxied. &amp;#010 &lt;li&gt;MessagingServlet - used by the realtime messaging system.  If you're planning&amp;#010 on using this subsystem, you'll need this servlet.&amp;#010 &lt;li&gt;CompressionFilter - required if you want to use dynamic compression of html and js&amp;#010 files.&amp;#010 &lt;li&gt;JSSyntaxScannerFilter - development tool that looks for trailing commas in JS&amp;#010 source (scans html files for &amp;lt;script&amp;gt; tags and scans .js files in their entirety).&amp;#010 This is a useful development tool, but should not be included in production.&amp;#010 &lt;li&gt;NoCacheFilter - development tool that makes any content it intercepts non-cacheable in&amp;#010 order to ensure developers are looking at the latest version of a file when modifying&amp;#010 examples.  Not for production use.&amp;#010 &lt;/ul&gt;&amp;#010 Note that not all of the servlets and filters listed under &lt;i&gt;Optional Functionality&lt;/i&gt;&amp;#010 above are present in the web.xml that ships with the smartclientRuntime - if you need to use&amp;#010 any of these, copy their configuration from the web.xml available under the WEB-INF&amp;#010 directory of smartclientSDK.  Other servlets, filters and configuration files from the&amp;#010 smartclientSDK should not be copied to your deployment, simply because the SDK includes many&amp;#010 developer tools that are not extensively audited from a security standpoint.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Java Module Dependencies&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The following is a description of what functionality is contained in each SmartClient JAR&amp;#010 file, and which other SmartClient JARs and third party libraries are required to enable that&amp;#010 functionality.  Note that actual filenames in WEB-INF/lib will typically contain the version&amp;#010 number of the library, whereas the library names below simply list the base name.&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_core_rpc&lt;/b&gt;: This is the core SmartClient module.  It provides the RPC, DMI,&amp;#010 and DataSource support.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-cli&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-collections&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-pool&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-codec&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isc-jakarta-oro&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log4j&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-jxpath&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-httpclient&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;velocity&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Optionally Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xercesImpl - if you're using JDK &amp;lt; 1.5&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xml-apis - if you're using JDK &amp;lt; 1.5&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-fileupload - if you plan to use the upload form item with&amp;#010 SmartClient processing.&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_web_services&lt;/b&gt;: Web services examples only.  Contains code backing the&amp;#010 SmartClientOperations.wsdl example.  Do not deploy in production.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;axis&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;axis-schema&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-discovery&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-logging&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jaxrpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;saaj&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wsdl4j&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_tools&lt;/b&gt;: Contains back-end logic for the &quot;Admin Console&quot; tool visible in&amp;#010 the Developer Console, and also standalone from the SDK home page.  This is an SDK-only&amp;#010 tool, not intended for production deployment, and further intended for rapid prototyping&amp;#010 only.  Do not deploy this module to production, but you may use it in your development if&amp;#010 you're using the SmartClient rapid prototyping SQL engine.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_sql&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_embedded_tomcat&lt;/b&gt;: This contains the bootstrap class for the Embedded&amp;#010 Tomcat engine shipped with the SmartClient SDK.  It is not intended to be used in any way&amp;#010 other than via the start_embedded_tomcat.bat|sh|command scripts in the webRoot of the&amp;#010 SDK.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;All JARs under WEB-INF/embeddedTomcat/lib&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_struts&lt;/b&gt;: Contains the ValidationAction and ValidationFailureAction&amp;#010 classes that implement RPC-based validation of DynamicForms using the Struts&amp;#010 ValidatorPlugIn.  If you're not using Struts or if you don't need this particular feature of&amp;#010 SmartClient, you do not need this module or its dependencies.  An example of this style of&amp;#010 validation is available here: &lt;a href='/examples/struts/forms/welcome.do' onclick=&quot;window.open('/examples/struts/forms/welcome.do');return false;&quot;&gt;/examples/struts/forms/welcome.do&lt;/a&gt; - read the&amp;#010 info on this page, and follow the &quot;Dynamic Form (With RPC-based Validation) Link for&amp;#010 the actual example.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;struts&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-digester&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-beanutils&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-fileupload&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-logging&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-validator&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jakarta-oro&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_spring&lt;/b&gt;: Required for ${isc.DocUtils.linkForRef('class:DMI')} dispatches to Spring beans (via&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} : &quot;spring&quot;).&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;spring&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-logging&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_examples&lt;/b&gt;: Contains code for various SmartClient examples shown in the&amp;#010 SDK.  Do not deploy to production.  The source code for the compiled classes in this module&amp;#010 are present in the SDK in various locations and typically linked to directly from the&amp;#010 examples that use them.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_sql&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_struts&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_spring&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_hibernate&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-logging&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jstl&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jakarta-taglib-standard&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_realtime_messaging&lt;/b&gt;: Server support required for the SmartClient&amp;#010 Realtime Messaging Module.  Install this if you're using this 'push' technology.  For more&amp;#010 information, see: ${isc.DocUtils.linkForDocNode('Messaging QuickRef')}:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_hibernate&lt;/b&gt;: Contains support for Hibernate DataSources as described&amp;#010 here: ${isc.DocUtils.linkForRef('group:hibernateIntegration')}.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hibernate3&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dom4j&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jdbc2_0-stdext&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;asm&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;asm-attrs&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jta&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cglib&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;antlr&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Optionally Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hsqldb - not required for linking, but needed for Hibernate to&amp;#010 actually connect to databases of this type, and hsqldb is what's used in the SDK examples.&amp;#010 Note that for production use you will need a JDBC driver for your database type.&lt;br&gt;&amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_sql&lt;/b&gt;: Implementation of the SmartClient SQL rapid prototyping layer.&amp;#010 This is a SQL generation engine similar to Hibernate, but not as flexible.  Some SQL-based&amp;#010 SDK examples rely on this logic, but it should not be used in production.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt; &amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_hibernate&lt;br&gt; &amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commons-dbcp&lt;br&gt; &amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hsqldb&lt;br&gt; &amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_js_parser&lt;/b&gt;: A parser capable of reading a JSON byte stream and creating&amp;#010 an in-memory Java object structure to match.  Used by any mechanism that relies on&amp;#010 JSON-style configuration.  Examples include FileAssembly definitions in JSON format, any use&amp;#010 of the rulesFile with a URIRegexFilter (Java Servlet) or subclass.  Generally not&amp;#010 required.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt; &amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_compression&lt;/b&gt;: This is a part of the Network Performance Module.  The&amp;#010 isomorphic_compression module is required for dynamic and static compression of various&amp;#010 assets delivered to the browser.  For more information, see: &amp;#010 ${isc.DocUtils.linkForRef('group:compression')}.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt; &amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_assembly&lt;/b&gt;: This is part of the Network Performance Module.  The&amp;#010 isomorphic_assembly module is required for file assembly and stripping.  For more&amp;#010 information, see: ${isc.DocUtils.linkForRef('group:fileAssembly')}.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt; &amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Optionally Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_obfuscation - for code obfuscation&lt;br&gt; &amp;#010 &lt;/li&gt;&amp;#010 &lt;li&gt;&lt;b&gt;isomorphic_obfuscation&lt;/b&gt;: This is part of the Network Performance Module.  The&amp;#010 isomorphic_obfuscation module is required to enable obfuscation of code assembled by the&amp;#010 File Assembly system.  For more information, see: &amp;#010 ${isc.DocUtils.linkForRef('group:compression')}.&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;u&gt;Requires&lt;/u&gt;:&lt;br&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isomorphic_core_rpc&lt;br&gt; &amp;#010 &lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Caching Considerations&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 When upgrading from one SmartClient release to the next you want to make sure that the user&amp;#010 picks up the new version on next access, but you also want to keep the ISC modules cacheable&amp;#010 so they're not refetched on every access.&amp;#010 &lt;p&gt;&amp;#010 SmartClient deals with this problem by appending a version string as a query parameter to&amp;#010 each module load directive.  This is done by the &amp;lt;isomorphic:loadISC&amp;gt; and&amp;#010 &amp;lt;isomorphic:loadModules&amp;gt; tags automatically.  As long as you make sure that the file&amp;#010 that contains these tags is non-cacheable, you will get the desired behavior.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Supported J2SE Containers&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Below is the list of J2SE containters that have been tested to be compatible with this&amp;#010 version of SmartClient.  Installation in these containers is supported for deployment by&amp;#010 Isomorphic.  If your application server is not on this list, please contact us at the&amp;#010 &lt;a href=&quot;http://forums.smartclient.com&quot; target='_blank'&gt;SmartClient forums&lt;/a&gt; to see if we can support&amp;#010 your deployment.  In general, the Java portion of ISC should work on servlet containers that&amp;#010 comply with servlet specification version 2.3 and up and utilize a JVM no older than version&amp;#010 1.4.&amp;#010 &lt;p&gt;&amp;#010 Supported J2SE Containers:&amp;#010 &lt;p&gt;&amp;#010 &lt;table class='normal'&gt;&amp;#010 &lt;tr&gt;&lt;td width=40&gt;&lt;/td&gt;&lt;td width=200&gt;&lt;i&gt;Apache Tomcat 4.0.x, 4.1.x, 5.0.x, 5.5x, 6.0.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Apache Geronimo 1.x, 2.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;BEA WebLogic 6.x, 7x, 8.x, 9.x, 10.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Caucho Resin 2.1.x, 3.0.x, 3.1.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;IBM WebSphere 5.x, 6.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;IBM WebSphere Community Edition 1.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;JBoss 3.2.x, 4.0.x, 4.2.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Mortbay Jetty 4.x, 5.x, 6.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Oracle Containers for J2EE (OC4J) 9.x, 10.x, 11.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Oracle Application Server 10g 9.x, 10.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Sun Application Server 8.x, 9.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;/table&gt;&amp;#010&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Troubleshooting&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 This section covers some common problems with possible solutions. You may also need to refer to the&amp;#010 documentation for your specific application server, web server,  or database. If you experience any problems&amp;#010 installing and configuring SmartClient in your environment, please post on the &amp;#010 &lt;a href=&quot;http://forums.smartclient.com/&quot; target='_blank'&gt;SmartClient forums&lt;/a&gt; for&amp;#010 assistance.&amp;#010 &lt;p&gt;&amp;#010 &lt;table width=&quot;90%&quot; class=&quot;normal&quot; align=&quot;center&quot; border=&quot;1&quot; cellpadding=&quot;5&quot;&gt;&amp;#010 &lt;tr bgcolor=&quot;#808080&quot;&gt;&amp;#010 	&lt;td width=&quot;30%&quot;&gt;&lt;b&gt;Problem&lt;/b&gt;&lt;/td&gt;&amp;#010 	&lt;td width=&quot;30%&quot;&gt;&lt;b&gt;Possible Causes&lt;/b&gt;&lt;/td&gt;&amp;#010 	&lt;td width=&quot;40%&quot;&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010 	&lt;td rowspan='3'&gt;Browser displays a generic &quot;page cannot be displayed&quot; or &quot;unable to locate the server&quot; message.&lt;/td&gt;&amp;#010 	&lt;td&gt;Servlet engine not started.&lt;/td&gt;&amp;#010 	&lt;td&gt;Start your application server.&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010 	&lt;td&gt;Missing/incorrect port for servlet engine in URL.&lt;/td&gt;&amp;#010 	&lt;td&gt;Check the startup messages, logs, or documentation for the servlet engine to determine what port it is using.&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010 	&lt;td&gt;Host name is incorrect.&lt;/td&gt;&amp;#010 	&lt;td&gt;Check whether other pages on the host can be accessed.&amp;#010 		Try the base URL http://[host name]:[port number] to see whether the servlet engine or webserver is functioning.&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010 	&lt;td&gt;Browser displays a 404 or other page/file not found error.&lt;/td&gt;&amp;#010 	&lt;td&gt;Incorrect URL.&lt;/td&gt;&amp;#010 	&lt;td&gt;Check for errors in the URL, including capitalization.&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010 	&lt;td&gt;Server error: taglib not defined&lt;/td&gt;&amp;#010 	&lt;td&gt;Missing iscTaglib.xml or iscTaglib.xml not referenced in web.xml&lt;/td&gt;&amp;#010 	&lt;td&gt;Copy WEB-INF/iscTaglib.xml from smartclientRuntime to your deployment WEB-INF directory&amp;#010 	and make sure that you have merged the &amp;lt;jsp-config&amp;gt; section from the&amp;#010 	smartclientRuntime web.xml&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010  &lt;td&gt;ClassNotFound or other Java Exceptions in the server log.&lt;/td&gt;&amp;#010  &lt;td&gt;Missing JAR files&lt;/td&gt;&amp;#010  &lt;td&gt;Verify every .jar from the smartclientRuntime WEB-INF/lib directory has been copied to&amp;#010  your deployment WEB-INF/lib.  Although you might later be able to remove some .jars, for&amp;#010  initial installation testing, copy every .jar&lt;/td&gt;&amp;#010 &lt;/tr&gt;&lt;tr&gt;&amp;#010  &lt;td&gt;&quot;isc&quot; is not defined JS error&lt;/td&gt;&amp;#010  &lt;td&gt;Incorreect URLs to SmartClient modules&lt;/td&gt;&amp;#010  &lt;td&gt;use View Source to look at SCRIPT includes (e.g. for ISC_Core.js), try those URLs&amp;#010  directly in the browser to  verify the files are correctly deployed&lt;/td&gt;&amp;#010 &lt;/tr&gt;&amp;#010 &lt;/table&gt;" name="iscInstall" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="group:line" name="line" type="group">
</docItem>
<docItem ref="class:ToolStripResizer" description="Simple subclass of ImgSplitbar with appearance appropriate for a ToolStrip resizer." name="ToolStripResizer" type="class">
    <treeLocation>Client Reference/Layout/ToolStrip</treeLocation>
    <attrs>attr:ToolStripResizer.skinImgDir</attrs>
    <attrs>attr:ToolStripResizer.vSrc</attrs>
    <attrs>attr:ToolStripResizer.hSrc</attrs>
</docItem>
<docItem ref="classAttr:Dialog.USERNAME_TITLE" flags="IRW" description="Default title for the &quot;username&quot; field in the dialog displayed by &amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}." name="USERNAME_TITLE" valueType="HTML" defaultValue="&quot;Username&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:MenuBar.tabIndex" flags="IRWA" description="By default exclude menubars from the page's tab order. To include a menubar in the page's&amp;#010 tab order, set tabIndex to an explicit tab index, or &lt;code&gt;null&lt;/code&gt; for automatically &amp;#010 assigned tabIndex" name="tabIndex" valueType="number" defaultValue="-1" type="attr" definingClass="class:MenuBar">
</docItem>
<docItem ref="method:StatefulCanvas.setActionType" flags="A" description=" Update the 'actionType' for this canvas (radio / checkbox / button)&amp;#010 If the canvas is currently selected, and the passed in actionType is 'button'&amp;#010 this method will deselect the canvas.&amp;#010" name="setActionType" type="method" definingClass="class:StatefulCanvas">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:Splitbar.cursor" flags="IRW" description="Splitbars' cursors are set at init time based on whether they are to be used for vertical or&amp;#010 horizontal resize.  To customize the cursor for this class, modify &amp;#010 ${isc.DocUtils.linkForRef('attr:Splitbar.vResizeCursor')} or ${isc.DocUtils.linkForRef('attr:Splitbar.hResizeCursor')} rather than this property." name="cursor" valueType="Cursor" defaultValue="&quot;hand&quot;" type="attr" definingClass="class:Splitbar">
    <groups>cursor</groups>
</docItem>
<docItem ref="method:Canvas.focus" flags="" description=" If this canvas can accept focus, give it keyboard focus. After this method, the canvas&amp;#010 will appear focussed and will recieve keyboard events.&amp;#010" name="focus" type="method" definingClass="class:Canvas">
    <groups>focus</groups>
</docItem>
<docItem ref="method:GridRenderer.selectionChanged" flags="A" description=" Called when (row-based) selection changes within this grid. Note this method fires for&amp;#010 each record for which selection is modified - so when a user clicks inside a grid this&amp;#010 method will typically fire twice (once for the old record being deselected, and once for&amp;#010 the new record being selected).&amp;#010&amp;#010" name="selectionChanged" type="method" definingClass="class:GridRenderer">
<params description="record for which selection changed" optional="false" name="record" type="object">
</params>
<params description="New selection state (true for selected, false for unselected)" optional="false" name="state" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Layout.hasMember" flags="" description="		    Returns true if the layout includes the specified canvas.&amp;#010" name="hasMember" type="method" definingClass="class:Layout">
<params description="the canvas to check for" optional="false" name="canvas" type="canvas">
</params>
<returns description="true if the layout includes the specified canvas" type="boolean"></returns>
</docItem>
<docItem ref="group:editing" title="Grid Editing" description="Data being displayed by a grid may be edited within the grid, by showing editing&amp;#010 interfaces embedded inside the cells of the grid.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Enabling editing&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Editing is enabled when ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','canEdit')} is &lt;code&gt;true&lt;/code&gt;.  When enabled,&amp;#010 the user can begin editing via the &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent','editEvent')}, typically click or double-click.  Editing can also be triggered&amp;#010 programmatically by a call to ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing()')} or&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew','startEditingNew()')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;New record creation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 By default, editing is restricted to existing records.  Setting ${isc.DocUtils.linkForRef('attr:ListGrid.listEndEditAction')} to&amp;#010 &quot;next&quot; allows the user to create new records by simply navigating off the end of the dataset&amp;#010 with the keyboard.  Editing of new records can also be initiated with &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew')}, for example, from a button outside the grid.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Saving changes&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Saving of changes is triggered automatically when the user navigates out of the row or cell&amp;#010 being edited (based on ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell')}) or when the user ends editing.   Automatic&amp;#010 saving of changes can be disabled entirely via &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits','autoSaveEdits:false')}, in which case a manual call to &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.saveEdits','saveEdits()')} or ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits','saveAllEdits()')} is required&amp;#010 to trigger saving. &amp;#010 &lt;P&gt;&amp;#010 If a grid has no DataSource, saving means that the properties of the ${isc.DocUtils.linkForRef('object:ListGridRecord')}s&amp;#010 in ${isc.DocUtils.linkForRef('attr:ListGrid.data','grid.data')} are directly changed.&amp;#010 &lt;P&gt;&amp;#010 For a grid with a DataSource, saving will be accomplished by using DataSource &quot;update&quot;&amp;#010 operations for existing records, and DataSource &quot;add&quot; operations for new records.  If multiple&amp;#010 records have been edited and ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits','saveAllEdits()')} is called, &amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} will be automatically used to enable all&amp;#010 edits to be saved in one HTTP turnaround (if using the SmartClient Server).&amp;#010 &lt;P&gt;&amp;#010 By default, a grid will send only updated fields and the primaryKey field as part of &amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.data')} so that the server can discern which fields the user actually changed.&amp;#010 However, the grid always includes the original field values in the&amp;#010 dsRequest as ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')}.&amp;#010 &lt;P&gt;&amp;#010 Note that although it is possible to load DataSource data without actually declaring a&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey field')}, a primaryKey must be declared for&amp;#010 editing and saving.  The primaryKey value is how SmartClient identifies the changed&amp;#010 record to the server.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Validation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Any time saving is attempted, validation is automatically triggered.  Values entered by the&amp;#010 user will be checked against the ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} and the&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}. Any invalid values abort an attempted save.&amp;#010 &lt;P&gt;&amp;#010 Similar to editing and saving, validation can be done on row transitions or on cell&amp;#010 transitions by setting ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell','validateByCell')}, or can be disabled entirely&amp;#010 via ${isc.DocUtils.linkForRef('attr:ListGrid.neverValidate','neverValidate:true')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Editability of cells&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Editors will either be shown for the complete row or for a single cell based on &amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid','editByCell,editByCell')}.  Whether a cell can be edited can be controlled on a&amp;#010 per field basis by setting ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','field.canEdit')}, or on a per-record basis&amp;#010 by setting ${isc.DocUtils.linkForRef('attr:ListGrid.recordEditProperty','recordEditProperty')} on a &amp;#010 ${isc.DocUtils.linkForRef('object:ListGridRecord','record')}, or can be controlled on an arbitrary, programmatic basis via&amp;#010 an override of ${isc.DocUtils.linkForRef('method:ListGrid.canEditCell')}.&amp;#010 &lt;P&gt;&amp;#010 Cells which are not editable just display the cell's current value.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Keyboard Navigation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Full keyboard navigation is supported by default, including Tab and Shift-Tab to navigate&amp;#010 between cells in a row, and Up Arrow and Down Arrow to traverse rows.  Several properties&amp;#010 on both grids and fields, all named *EditAction, control navigation behavior of certain keys&amp;#010 (eg Enter).&amp;#010 &lt;P&gt;&amp;#010 You can use ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing(&lt;i&gt;rowNum&lt;/i&gt;, &lt;i&gt;colNum&lt;/i&gt;)')} to &amp;#010 programmatically move editing to a particular cell, for example, during a &amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} event.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;editValues (unsaved changes)&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The term &quot;editValues&quot; means changes that the user has made to the dataset which have not&amp;#010 been saved.  The grid manages and stores editValues separately from the data itself in order&amp;#010 to allow the user to revert to original values, and in order to enable to grid to send only&amp;#010 updated fields to the server.  &amp;#010 &lt;P&gt;&amp;#010 Because editValues are stored separately, if you directly access the dataset (eg via &amp;#010 &lt;code&gt;grid.data.get()&lt;/code&gt;) you will see the records without the user's unsaved changes.&amp;#010 Many APIs exist for retrieving and managing editValues (search for editValue).&amp;#010 For the common case of needing to access the record-as-edited, you can call &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getEditedRecord','grid.getEditedRecord(rowNum)')}.&amp;#010 &lt;P&gt;&amp;#010 When accessing and manipulating edited data, you should think carefully about whether&amp;#010 you want to be working with the original data or with the edited version.  Values entered&amp;#010 by the user may not have been validated yet, or may have failed validation, hence you may&amp;#010 find a String value in a field of type &quot;date&quot; or &quot;int&quot;, which could cause naive formatters or&amp;#010 totalling functions to crash.&amp;#010 &lt;P&gt;&amp;#010 Setting editValues is fully equivalent to the user making changes to data via the editing UI.&amp;#010 If you &lt;i&gt;also&lt;/i&gt; allow editing external to the grid, setting editValues is one way to &amp;#010 combine changes from external editors into the grid's edits, so that you can do a single &amp;#010 save.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Customizing Cell Editors&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 When a cell is being edited, the editor displayed in the cell will be a ${isc.DocUtils.linkForRef('class:FormItem')}.&amp;#010 The editor type for the cell will be determined by ${isc.DocUtils.linkForRef('method:ListGrid.getEditorType')} based on the&amp;#010 specified ${isc.DocUtils.linkForRef('attr:ListGridField.editorType')} or ${isc.DocUtils.linkForRef('attr:ListGridField.type','data type')} for the field in&amp;#010 question.&amp;#010 &lt;P&gt;&amp;#010 You can customize the editor by setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties')} to a set of&amp;#010 properties that is valid for that FormItem type.  Custom FormItem classes are also allowed,&amp;#010 for example, you may use ${isc.DocUtils.linkForRef('attr:FormItem.icons')} to create an icon that launches a separate&amp;#010 ${isc.DocUtils.linkForRef('class:Dialog')} in order to provide an arbitrary interface that allows the user to select the&amp;#010 value for a field.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Events&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Editing triggers several events which you can provide handlers for in order to customize&amp;#010 editing behavior.  Some of the most popular are ${isc.DocUtils.linkForRef('method:ListGridField.change','field.change()')},&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} for detecting changes made by the user,&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')} for detecting changes that have been successfully saved,&amp;#010 and ${isc.DocUtils.linkForRef('method:ListGrid.editorEnter')} and ${isc.DocUtils.linkForRef('method:ListGrid.editorExit','editorExit()')} for detecting user&amp;#010 navigation during editing.&amp;#010 &lt;P&gt;&amp;#010 You can also install event handlers directly on the FormItem-based editors used in the grid&amp;#010 via ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties','editorProperties')} as mentioned above.  When handling&amp;#010 event on items, or which involve items, be aware that in addition to standard &amp;#010 ${isc.DocUtils.linkForRef('class:FormItem')} APIs, editors have the following properties:&amp;#010 &lt;P&gt;&amp;#010 - &lt;code&gt;rowNum&lt;/code&gt;: The rowNum of the record being edited.&lt;br&gt;&amp;#010 - &lt;code&gt;colNum&lt;/code&gt;: The colNum of the cell being edited.&lt;br&gt;&amp;#010 - &lt;code&gt;grid&lt;/code&gt;: A pointer back to the listGrid containing the record." name="editing" type="group">
    <refs>method:ListGridField.defaultDynamicValue</refs>
    <refs>method:ListGridField.editorEnter</refs>
    <refs>method:ListGridField.editorExit</refs>
    <refs>method:ListGridField.cellChanged</refs>
    <refs>method:ListGridField.formatEditorValue</refs>
    <refs>method:ListGridField.parseEditorValue</refs>
    <refs>method:ListGridField.change</refs>
    <refs>method:ListGridField.changed</refs>
    <refs>method:ListGrid.canEditCell</refs>
    <refs>method:ListGrid.startEditing</refs>
    <refs>method:ListGrid.getEditorValueMap</refs>
    <refs>method:ListGrid.setEditorValueMap</refs>
    <refs>method:ListGrid.getEditorType</refs>
    <refs>method:ListGrid.startEditingNew</refs>
    <refs>method:ListGrid.getAllEditRows</refs>
    <refs>method:ListGrid.getEditValues</refs>
    <refs>method:ListGrid.getEditedRecord</refs>
    <refs>method:ListGrid.getEditedCell</refs>
    <refs>method:ListGrid.setEditValue</refs>
    <refs>method:ListGrid.getEditValue</refs>
    <refs>method:ListGrid.clearEditValue</refs>
    <refs>method:ListGrid.getEditRow</refs>
    <refs>method:ListGrid.getEditCol</refs>
    <refs>method:ListGrid.getEditField</refs>
    <refs>method:ListGrid.cancelEditing</refs>
    <refs>method:ListGrid.endEditing</refs>
    <refs>method:ListGrid.discardAllEdits</refs>
    <refs>method:ListGrid.discardEdits</refs>
    <refs>method:ListGrid.saveEdits</refs>
    <refs>method:ListGrid.hasChanges</refs>
    <refs>method:ListGrid.cellHasChanges</refs>
    <refs>method:ListGrid.saveAllEdits</refs>
    <refs>method:ListGrid.cellChanged</refs>
    <refs>method:ListGrid.editComplete</refs>
    <refs>method:ListGrid.editFailed</refs>
    <refs>method:ListGrid.editorEnter</refs>
    <refs>method:ListGrid.rowEditorEnter</refs>
    <refs>method:ListGrid.editorExit</refs>
    <refs>method:ListGrid.rowEditorExit</refs>
    <refs>method:ListGrid.formatEditorValue</refs>
    <refs>method:ListGrid.parseEditorValue</refs>
    <refs>method:DynamicForm.getEditorType</refs>
    <refs>method:CubeGrid.setEditValue</refs>
    <refs>method:CubeGrid.getEditValue</refs>
    <refs>method:CubeGrid.getEditedRecord</refs>
    <refs>method:CubeGrid.getEditedCell</refs>
    <refs>method:CubeGrid.getEditValues</refs>
    <refs>method:CubeGrid.clearEditValue</refs>
    <refs>method:CubeGrid.saveEdits</refs>
    <refs>method:CubeGrid.getAllEditCells</refs>
    <refs>method:CubeGrid.discardAllEdits</refs>
    <refs>method:CubeGrid.saveAllEdits</refs>
    <refs>attr:ListGridField.editorImageURLPrefix</refs>
    <refs>attr:ListGridField.editorImageURLSuffix</refs>
    <refs>attr:ListGridField.icons</refs>
    <refs>attr:ListGridField.editorIconWidth</refs>
    <refs>attr:ListGridField.editorIconHeight</refs>
    <refs>attr:ListGridField.defaultIconSrc</refs>
    <refs>attr:ListGridField.iconVAlign</refs>
    <refs>attr:ListGridField.canEdit</refs>
    <refs>attr:ListGridField.defaultValue</refs>
    <refs>attr:ListGridField.enterKeyEditAction</refs>
    <refs>attr:ListGridField.escapeKeyEditAction</refs>
    <refs>attr:ListGridField.editorType</refs>
    <refs>attr:ListGridField.editorProperties</refs>
    <refs>attr:ListGrid.modalEditing</refs>
    <refs>attr:ListGridField.editorValueMap</refs>
    <refs>attr:ListGrid.canEdit</refs>
    <refs>attr:ListGrid.recordEditProperty</refs>
    <refs>attr:ListGrid.editByCell</refs>
    <refs>attr:ListGrid.saveByCell</refs>
    <refs>attr:ListGrid.waitForSave</refs>
    <refs>attr:ListGrid.stopOnErrors</refs>
    <refs>attr:ListGrid.autoSaveEdits</refs>
    <refs>attr:ListGrid.confirmCancelEditing</refs>
    <refs>attr:ListGrid.cancelEditingConfirmationMessage</refs>
    <refs>attr:ListGrid.confirmDiscardEdits</refs>
    <refs>attr:ListGrid.confirmDiscardEditsMessage</refs>
    <refs>attr:ListGrid.discardEditsSaveButtonTitle</refs>
    <refs>attr:ListGrid.rowEndEditAction</refs>
    <refs>attr:ListGrid.listEndEditAction</refs>
    <refs>attr:ListGrid.enterKeyEditAction</refs>
    <refs>attr:ListGrid.escapeKeyEditAction</refs>
    <refs>attr:ListGrid.editEvent</refs>
    <refs>attr:ListGrid.editOnFocus</refs>
    <refs>attr:ListGrid.selectOnEdit</refs>
    <refs>attr:ListGridField.canToggle</refs>
    <refs>attr:ListGrid.longTextEditorThreshold</refs>
    <refs>attr:ListGrid.longTextEditorType</refs>
    <refs>type:RowEndEditAction</refs>
    <refs>type:EnterKeyEditAction</refs>
    <refs>type:EscapeKeyEditAction</refs>
    <refs>type:EditCompletionEvent</refs>
    <refs>type:ListGridEditEvent</refs>
</docItem>
<docItem ref="method:DataSource.fieldMatchesFilter" flags="" description=" Compares a criteria value to a field value and returns whether they match, as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; any non-String filter value is directly compared (==) to the field value&amp;#010 &lt;li&gt; any String filter value is compared according to&amp;#010      ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} in the passed &lt;code&gt;requestProperties&lt;/code&gt;,&amp;#010      regardless of the actual field type&amp;#010 &lt;li&gt; if the filter value is an Array, it matches if the field value is contained in the&amp;#010      Array&amp;#010 &lt;/ul&gt;&amp;#010" name="fieldMatchesFilter" type="method" definingClass="class:DataSource">
<params description="field value to be compared" optional="false" name="fieldValue" type="object">
</params>
<params description="filter value to be compared" optional="false" name="filterValue" type="object">
</params>
<params description="dataSource request properties" optional="false" name="requestProperties" type="DSRequest Properties">
</params>
<returns description="true if the filter and field values match, false otherwise" type="boolean"></returns>
</docItem>
<docItem ref="attr:TabSet.leftEdgeOffsets" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeOffsets&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeOffsets&lt;/code&gt;, &lt;code&gt;topEdgeOffsets&lt;/code&gt; and &lt;code&gt;bottomEdgeOffsets&lt;/code&gt; &amp;#010 propertes allow the offsets of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="leftEdgeOffsets" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:FormItem.disable" flags="" description=" Set this item to be disabled at runtime.&amp;#010" name="disable" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.disabled">
</seeAlso>
    <groups>enable</groups>
</docItem>
<docItem ref="method:Canvas.click" flags="A" description="&amp;#010 Executed when the left mouse is clicked (pressed and then released) on this widget.  No default&amp;#010 implementation.&amp;#010&amp;#010" name="click" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:GridRenderer.refreshCell" flags="A" description=" Refresh an individual cell without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cell's value, CSS class, and CSS text will be refreshed, to the current values returned&amp;#010 by getCellValue(), getCellStyle() and getCellCSSText() respectively.&amp;#010&amp;#010" name="refreshCell" type="method" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.refreshCellStyle" description="to update just styling"></seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
<params description="column number of cell to refresh" optional="false" name="colNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.snapVGap" flags="IRW" description="The vertical grid size to use, in pixels, when snap-to-grid is enabled." name="snapVGap" valueType="number" defaultValue="20" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.snapResizeToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapResizeToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.pickListFields" flags="IRA" description="This property allows the developer to specify which field[s] will be displayed in the &amp;#010 drop down list of options.&amp;#010 &lt;P&gt;&amp;#010 Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists&amp;#010 with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.&amp;#010 &lt;P&gt;&amp;#010 If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, &amp;#010 otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}&lt;br&gt;&amp;#010 &amp;#010 If there are multiple fields, column headers will be shown for each field, the&amp;#010 height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute." name="pickListFields" valueType="Array" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
<seeAlso ref="attr:ComboBoxItem.valueField">
</seeAlso>
<seeAlso ref="attr:PickList.pickListHeaderHeight">
</seeAlso>
</docItem>
<docItem ref="method:Array.removeList" flags="" description=" Remove all instances of objects in the specified list from this list, sliding the remaining&amp;#010 objects around to fill gaps.&amp;#010&amp;#010" name="removeList" type="method" definingClass="object:Array">
<params description="list of items to remove" optional="false" name="list" type="array">
</params>
<returns description="list of items passed in" type="list"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:DataSource.showPrompt" flags="A" description="Whether RPCRequests sent by this DataSource should enable &amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.showPrompt')} if it's unset." name="showPrompt" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DataSource">
</docItem>
<docItem ref="attr:GridHilite.disabled" flags="IRW" description="Whether this hilite is currently disabled.&amp;#010 &lt;P&gt;&amp;#010 Hilites can be programmatically enabled and disabled via ${isc.DocUtils.linkForRef('method:CubeGrid.enableHilite')}." name="disabled" valueType="boolean" defaultValue="false" type="attr" definingClass="object:GridHilite">
</docItem>
<docItem ref="method:SimpleType.shortDisplayFormatter" flags="" description=" Formatter for values of this type when compact display is required, for example, in a&amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}.&amp;#010 &lt;P&gt;&amp;#010 When this formatter is called, the SimpleType object is available as &quot;this&quot;.  &amp;#010 &lt;P&gt;&amp;#010 A formatter can make itself configurable on a per-component or per-field basis by&amp;#010 checking properties on the component or field.  For example, a formatter for account IDs&amp;#010 may want to omit a prefix in views where it is redundant, and could check a flag&amp;#010 listGridField.omitAccountIdPrefix for this purpose.&amp;#010&amp;#010" name="shortDisplayFormatter" type="method" definingClass="class:SimpleType">
<params description="value to be formatted" optional="false" name="value" type="any">
</params>
<params description="field descriptor from the component calling the formatter, if                      applicable.  Depending on the calling component, this could be a&amp;#010                      ${isc.DocUtils.linkForRef('object:ListGridField')}, ${isc.DocUtils.linkForRef('object:TreeGridField')}, etc" optional="true" name="field" type="Field">
</params>
<params description="component calling this formatter, if applicable" optional="true" name="component" type="DataBoundComponent">
</params>
<params description="Full record, if applicable" optional="true" name="record" type="Object">
</params>
</docItem>
<docItem ref="attr:SelectItem.autoFetchData" flags="IRA" description="If this select item retrieves its options from a &lt;code&gt;dataSource&lt;/code&gt;, should options&amp;#010 be fetched from the server when the item is first written out, or should this fetch be&amp;#010 delayed until the user opens the pickList." name="autoFetchData" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:PickList.optionDataSource">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.getVSnapPosition" flags="A" description=" Override this method to provide a custom snap-to grid.  Note that you do not need to do&amp;#010 this if your grid is regular (ie, grid points are every x pixels) - regular grids should be &amp;#010 defined using ${isc.DocUtils.linkForRef('attr:Canvas.snapHGap')} and ${isc.DocUtils.linkForRef('attr:Canvas.snapVGap')}.&amp;#010 You should only override this method if you want to provide support for a grid of &amp;#010 irregularly-placed points&amp;#010&amp;#010" name="getVSnapPosition" type="method" definingClass="class:Canvas">
<params description="y-coordinate of the drag event (note: using page-level coordinates)" optional="false" name="coordinate" type="integer">
</params>
<params description="&quot;before&quot; or &quot;after&quot; denoting whether the returned coordinate should   match the top or bottom edge of the current square. If unset ${isc.DocUtils.linkForRef('attr:Canvas.snapHDirection')} will&amp;#010   be used by default" optional="true" name="direction" type="string">
</params>
<returns description="The vertical coordinate to snap to" type="number"></returns>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:StretchImgButton.iconClick" flags="" description=" If this button is showing an ${isc.DocUtils.linkForRef('attr:StretchImgButton.icon','icon')}, a separate click&amp;#010 handler for the icon may be defined as &lt;code&gt;this.iconClick&lt;/code&gt;.&amp;#010 Returning false will suppress the standard button click handling code.&amp;#010" name="iconClick" type="method" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:FormItem.valueIconWidth" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, use this property to specify a width for&amp;#010 the value icon written out." name="valueIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueIconHeight">
</seeAlso>
<seeAlso ref="attr:FormItem.valueIconSize">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="type:FetchMode" description="Mode of fetching records from the server.&amp;#010 &lt;P&gt;&amp;#010 Generally, &quot;paged&quot; mode should be used unless the maximum number of records is&amp;#010 guaranteed to be small." name="FetchMode" type="type">
<values description="All records that match the current filter are fetched.  Sorting is                performed on the client" value="&quot;basic&quot;"></values>
<values description="Only requested ranges of records are fetched, with predictive fetch                ahead.  Sorting is performed on the server." value="&quot;paged&quot;"></values>
<values description="All records available from the DataSource are fetched.  Filtering by                search criteria and sorting are both performed on the client" value="&quot;local&quot;"></values>
    <groups>fetching</groups>
</docItem>
<docItem ref="attr:DataSource.clientOnly" flags="IR" description="Whether to ask as a &quot;client-only&quot; DataSource, which has no permanent storage and never&amp;#010 contacts the server, instead using a set of test data to respond to requests in the same&amp;#010 manner as a server-based DataSource might.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','this discussion')} for ways to populate a&amp;#010 client-only DataSource with test data." name="clientOnly" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('localDataSource')}</examples>
    <groups>clientOnlyDataSources</groups>
</docItem>
<docItem ref="method:Canvas.hover" flags="" description=" If &lt;code&gt;canHover&lt;/code&gt; is true for this widget, the &lt;code&gt;hover&lt;/code&gt; string method will&amp;#010 be fired when the user hovers over this canvas. If this method returns false, it will&amp;#010 suppress the default behavior of showing a hover canvas if &lt;code&gt;this.showHover&lt;/code&gt; &amp;#010 is true.&amp;#010" name="hover" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:ListGridField.parseEditorValue" flags="" description=" Method used to convert the value displayed in an editor for some cell in this field into&amp;#010 a raw value for saving.&lt;br&gt;&amp;#010 Takes precedence over &lt;code&gt;parseEditorValue&lt;/code&gt; defined at the grid level.&amp;#010&amp;#010" name="parseEditorValue" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.parseEditorValue">
</seeAlso>
<seeAlso ref="method:ListGridField.formatEditorValue">
</seeAlso>
<params description="value displayed in the editor for the cell" optional="false" name="value" type="any">
</params>
<params description="record object for the row being edited. May be null if this                          is a new row being added to the end of the list." optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<params description="A pointer to the ListGrid displaying the cell" optional="false" name="grid" type="ListGrid instance">
</params>
<returns description="raw value for the field derived from formatted value in editor" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="type:EditCompletionEvent" description="What event / user interaction type caused cell editing to complete." name="EditCompletionEvent" type="type">
<values description="User clicked outside editor during edit." value="ListGrid.CLICK_OUTSIDE"></values>
<values description="User started editing another row by clicking on it" value="ListGrid.CLICK"></values>
<values description="User started editing another row by double                               clicking" value="ListGrid.DOUBLE_CLICK"></values>
<values description="Enter pressed." value="ListGrid.ENTER_KEYPRESS"></values>
<values description="User pressed Escape." value="ListGrid.ESCAPE_KEYPRESS"></values>
<values description="Up arrow key pressed." value="ListGrid.UP_ARROW_KEYPRESS"></values>
<values description="down arrow key." value="ListGrid.DOWN_ARROW_KEYPRESS"></values>
<values description="User pressed Tab." value="ListGrid.TAB_KEYPRESS"></values>
<values description="User pressed Shift+Tab." value="ListGrid.SHIFT_TAB_KEYPRESS"></values>
<values description="Edit moved to a different field (same row)" value="ListGrid.EDIT_FIELD_CHANGE"></values>
<values description="Edit completed via explicit function call" value="ListGrid.PROGRAMMATIC"></values>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Canvas.snapOnDrop" flags="IRWA" description="When this canvas is dropped onto an object supporting snap-to-grid, should it snap&amp;#010 to the grid (true, the default) or just drop wherever the mouse is (false)." name="snapOnDrop" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="method:Canvas.shouldSnapOnDrop">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_FAILURE" flags="R" description="Indicates a generic failure on the server.  &amp;#010 See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}&amp;#010 for more information." name="STATUS_FAILURE" valueType="integer" defaultValue="-1" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="method:Window.setShowHeaderIcon" flags="" description=" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showHeaderIcon')} to show / hide the headerIcon&amp;#010" name="setShowHeaderIcon" type="method" definingClass="class:Window">
<seeAlso ref="attr:Window.headerControls">
</seeAlso>
<seeAlso ref="attr:Window.showHeaderIcon">
</seeAlso>
</docItem>
<docItem ref="attr:Scrollbar.endThumbOverlap" flags="IRWA" description="Number of pixels the thumb is allowed to overlap the buttons at the end of the track.&amp;#010 Default prevents doubling of 1px borders.  Set higher to allow media that shows curved&amp;#010 joins between the track button and ScrollThumb." name="endThumbOverlap" valueType="number" defaultValue="null" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="attr:ListGridField.icons" flags="IRA" description="If this field is editable, this property can be used to specify &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.icons','icons')} to be displayed in the editors displayed for this field" name="icons" valueType="Array of FormItemIcon Properties" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="method:ValuesManager.getItem" flags="" description=" Takes an item name (specified via the form.fieldIdProperty value, or retrieved via&amp;#010 item.getFieldName()) returns a reference to the appropriate item in this valuesManager.&amp;#010 &lt;br&gt;Note: Unlike the &lt;code&gt;DynamicForm&lt;/code&gt; class, this method will not return an &amp;#010 item by index&amp;#010" name="getItem" type="method" definingClass="class:ValuesManager">
</docItem>
<docItem ref="attr:Layout.dropLine" flags="R" description="Line showed to mark the drop position when components are being dragged onto this Layout.&amp;#010 A simple Canvas typically styled via CSS.  The default dropLine.styleName is&amp;#010 &quot;layoutDropLine&quot;." name="dropLine" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Layout">
    <examples>${isc.DocUtils.linkForExampleId('dragMove')}</examples>
</docItem>
<docItem ref="attr:Layout.layoutBottomMargin" flags="IRW" description="Space outside of all members, on the bottom side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;setLayoutMargin()&lt;/code&gt; if changed on the fly." name="layoutBottomMargin" valueType="integer" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="method:Dialog.saveData" flags="A" description=" Method to save this Dialog's data. Called from &lt;code&gt;okClick()&lt;/code&gt;, &amp;#010 &lt;code&gt;applyClick()&lt;/code&gt;.&amp;#010 No default implementation - override to perform some action if required.&amp;#010      &amp;#010" name="saveData" type="method" definingClass="class:Dialog">
<seeAlso ref="method:Dialog.okClick">
</seeAlso>
<seeAlso ref="method:Dialog.applyClick">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="method:ImgButton.setSelected" flags="" description=" Select this object.&amp;#010" name="setSelected" type="method" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:RichTextEditor.colorControls" flags="IRA" description="Control group for modifying text color / background color. &amp;#010  Consists of an array of ${isc.DocUtils.linkForRef('type:ControlName')}s.&amp;#010  To display this group of controls for some RichTextEditor,&amp;#010  include &lt;code&gt;&quot;formatControls&quot;&lt;/code&gt; in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array" name="colorControls" valueType="array" defaultValue="[&quot;color&quot;, &quot;backgroundColor&quot;]" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="attr:CubeGrid.facetLabelHoverVAlign" flags="IRWA" description="Allows the developer to override the vertical text alignment of hover tips shown for&amp;#010 facetLabels.  If unspecified the hover canvas content alignment will be set by&amp;#010 &lt;code&gt;this.hoverVAlign&lt;/code&gt; if specified." name="facetLabelHoverVAlign" valueType="VerticalAlignment" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverVAlign">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:Canvas.blur" flags="" description=" If this canvas has keyboard focus, blur it. After this method, the canvas&amp;#010 will no longer appear focussed and will stop recieving keyboard events.&amp;#010" name="blur" type="method" definingClass="class:Canvas">
    <groups>focus</groups>
</docItem>
<docItem ref="method:Canvas.visibleAtPoint" flags="A" description=" Does this widget contain the specified global (x,y) coordinates, and have no other widgets&amp;#010 also at the specified position, obscuring this one?  This is commonly used for (for example)&amp;#010 drag and drop interactions.&amp;#010&amp;#010" name="visibleAtPoint" type="method" definingClass="class:Canvas">
<params description="GLOBAL x-coordinate" optional="false" name="x" type="number">
</params>
<params description="GLOBAL y-coordinate" optional="false" name="y" type="number">
</params>
<params description="point lies within our viewport rather than                                              just our drawn area" optional="true" name="withinViewport" type="boolean">
</params>
<params description="If passed ignore widget(s), do not check whether                                           those widgets occludes this one." optional="true" name="ignoreWidgets" type="canvas">
</params>
<returns description="true if this object contains the specified point; false otherwise" type="boolean"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:Canvas.contextMenu" flags="IRWA" description="Context menu to show for this object, an instance of the Menu widget." name="contextMenu" valueType="Menu" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.showContextMenu">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('contextMenus')}</examples>
    <groups>cues</groups>
</docItem>
<docItem ref="attr:DataSource.resultBatchSize" flags="IRWA" description="Very advanced: for servers that do not support paging, and must return large numbers of XML&amp;#010 records in one HTTP response, SmartClient breaks up the processing of the response&amp;#010 in order to avoid the &quot;script running slowly&quot; dialog appearing for an end user.&amp;#010 &lt;P&gt;&amp;#010 If you have a relatively small number of records with a great deal of properties or&amp;#010 subojects on each record, and you have not set ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')} to eliminate unused&amp;#010 data, and you see the &quot;script running slowly&quot; dialog, you may need to set this number&amp;#010 lower." name="resultBatchSize" valueType="int" defaultValue="150" type="attr" definingClass="class:DataSource">
</docItem>
<docItem ref="attr:CubeGrid.canSelectValues" flags="IRW" description="Determines whether cell values in the body can be selected." name="canSelectValues" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:Canvas.shadowImage" flags="IRA" description="Base name of the series of images for the sides, corners, and center of the shadow.&amp;#010 &lt;P&gt;&amp;#010 The actual image names fetched for the dropShadow combine the segment name and the&amp;#010 &lt;code&gt;shadowDepth&lt;/code&gt; setting.  For example, given &quot;ds.png&quot; as the base name, a depth of&amp;#010 4, and the top-left segment of the shadow, we'd use &quot;ds4_TL.png&quot;.&amp;#010 &lt;P&gt;&amp;#010 The names for segments are the same as those given for controlling resizable edges; see&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.resizeFrom')}.  The center segment has the name &quot;center&quot;.  The center segment is&amp;#010 the only segment that doesn't include the depth in the URL, so the final image name for the&amp;#010 center given a baseName of &quot;ds.png&quot; would be just &quot;ds_center.png&quot;." name="shadowImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]ds.png&quot;" type="attr" definingClass="class:Canvas">
    <groups>shadow</groups>
</docItem>
<docItem ref="attr:CubeGrid.fixedFacetValues" flags="IR" description="A ${isc.DocUtils.linkForRef('type:FacetValueMap')} describing the set of facet values that should be regarded as&amp;#010 &quot;fixed&quot; in this cubeGrid.  These are used as fixed criteria for load on demand, and also&amp;#010 allow using a dataset with more facets in it than are currently shown in the grid." name="fixedFacetValues" valueType="FacetValueMap" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.addFacet">
</seeAlso>
<seeAlso ref="method:CubeGrid.removeFacet">
</seeAlso>
</docItem>
<docItem ref="group:flatFields" name="flatFields" type="group">
    <refs>attr:DSRequest.useFlatFields</refs>
    <refs>attr:DSRequest.useFlatHeaderFields</refs>
    <refs>attr:WSRequest.useFlatFields</refs>
</docItem>
<docItem ref="attr:DataSource.title" flags="IRW" description="User-visible name for this DataSource.&amp;#010 &lt;P&gt;&amp;#010 For example, for the supplyItem DataSource, &quot;Supply Item&quot;.&amp;#010 &lt;P&gt;&amp;#010 Defaults to &lt;code&gt;dataSource.ID&lt;/code&gt;." name="title" valueType="string" defaultValue="dataSource.ID" type="attr" definingClass="class:DataSource">
    <groups>titles</groups>
</docItem>
<docItem ref="method:Dialog.yesClick" flags="" description=" Handle a click on the 'yes' button of this Dialog.&amp;#010 Default implementation is to return &lt;code&gt;true&lt;/code&gt;.&amp;#010 Override to do something else&amp;#010" name="yesClick" type="method" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="attr:TreeGrid.customIconDropProperty" flags="IRWA" description="For folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),&amp;#010 this property allows the developer to specify on a per-node basis whether a&amp;#010 drop state icon (with ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')}) should be displayed when the &amp;#010 user drop-hovers over this folder.&lt;br&gt;&amp;#010 Set &lt;code&gt;node[treeGrid.customIconDropProperty]&lt;/code&gt; to true to show the drop state&amp;#010 icons, or false to suppress this.&lt;br&gt;&amp;#010 If not specified this this behavior is determined by &lt;code&gt;treeGrid.showCustomIconDrop&lt;/code&gt;&amp;#010 for this node." name="customIconDropProperty" valueType="string" defaultValue="&quot;showDropIcon&quot;" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.customIconProperty">
</seeAlso>
<seeAlso ref="attr:TreeGrid.showCustomIconDrop">
</seeAlso>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:CheckboxItem.uncheckedImage" flags="IRW" description="URL for the image to display when this checkbox is not selected, or unchecked" name="uncheckedImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/unchecked.gif&quot;" type="attr" definingClass="class:CheckboxItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:SpinnerItem.step" flags="IRW" description="How much should the value be incremented / decremented when the user hits the icons&amp;#010  to increase / decrease the value?" name="step" valueType="number" defaultValue="1" type="attr" definingClass="class:SpinnerItem">
    <examples>${isc.DocUtils.linkForExampleId('spinnerItem')}</examples>
</docItem>
<docItem ref="classAttr:ValidatorTypes.floatRange" flags="IR" description="Tests whether the value for this field is a floating point number within the range &amp;#010  specified.  The &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; properties on the validator&amp;#010  are used to determine the acceptable range.&lt;br&gt;&amp;#010 Note that the &lt;code&gt;errorMessage&lt;/code&gt; for this validator will be evaluated as&amp;#010 a dynamicString - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="floatRange" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:ImgTab.skinImgDir" flags="IRW" description="Base path for the images.   &lt;B&gt;Note&lt;/B&gt; that when used within a TabSet, the&amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is appended as an additional path segment, yielding&amp;#010 &quot;images/Tab/top/&quot; et al." name="skinImgDir" valueType="URL" defaultValue="&quot;images/Tab/&quot;" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem exampleConfig="Window.xml" ref="class:Window" description="A general purpose Window class for implementing dialogs, portlets, alerts, prompts, wizards&amp;#010 and desktop-like windowing interfaces.&amp;#010 &lt;P&gt;&amp;#010 Windows can contain arbitrary SmartClient components, configured via the ${isc.DocUtils.linkForRef('attr:Window.items')}&amp;#010 property.  Windows may be ${isc.DocUtils.linkForRef('attr:Window.isModal','modal')} or non-modal.&amp;#010 &lt;P&gt;&amp;#010 Windows provide a series of highly configurable and skinnable ${isc.DocUtils.linkForRef('type:AutoChild','autoChildren')}&amp;#010 including a header, various header controls, footer, and corner resizer.&amp;#010 &lt;P&gt;&amp;#010 The more specialized ${isc.DocUtils.linkForRef('class:Dialog')} subclass of Window has additional functionality targetted&amp;#010 at simple prompts and confirmations, such as buttons with default actions, and single-method&amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.warn','shortcuts')} for common application dialogs." name="Window" type="class">
    <methods>method:Window.setShowCloseButton</methods>
    <methods>method:Window.setShowMinimizeButton</methods>
    <methods>method:Window.setShowMaximizeButton</methods>
    <methods>method:Window.setShowHeaderIcon</methods>
    <methods>method:Window.setTitle</methods>
    <methods>method:Window.setStatus</methods>
    <methods>method:Window.setSrc</methods>
    <methods>method:Window.addItem</methods>
    <methods>method:Window.removeItem</methods>
    <methods>method:Window.addItems</methods>
    <methods>method:Window.removeItems</methods>
    <methods>method:Window.setAutoSize</methods>
    <methods>method:Window.shouldDismissOnEscape</methods>
    <methods>method:Window.centerInPage</methods>
    <methods>method:Window.flash</methods>
    <methods>method:Window.minimize</methods>
    <methods>method:Window.restore</methods>
    <methods>method:Window.maximize</methods>
    <methods>method:Window.closeClick</methods>
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:Window.canDragReposition</attrs>
    <attrs>attr:Window.keepInParentRect</attrs>
    <attrs>attr:Window.canDragResize</attrs>
    <attrs>attr:Window.isModal</attrs>
    <attrs>attr:Window.modalMask</attrs>
    <attrs>attr:Window.showModalMask</attrs>
    <attrs>attr:Window.modalMaskOpacity</attrs>
    <attrs>attr:Window.modalMaskStyle</attrs>
    <attrs>attr:Window.autoCenter</attrs>
    <attrs>attr:Window.dismissOnOutsideClick</attrs>
    <attrs>attr:Window.dismissOnEscape</attrs>
    <attrs>attr:Window.body</attrs>
    <attrs>attr:Window.showBody</attrs>
    <attrs>attr:Window.bodyStyle</attrs>
    <attrs>attr:Window.bodyColor</attrs>
    <attrs>attr:Window.hiliteBodyColor</attrs>
    <attrs>attr:Window.items</attrs>
    <attrs>attr:Window.src</attrs>
    <attrs>attr:Window.contentsType</attrs>
    <attrs>attr:Window.bodyConstructor</attrs>
    <attrs>attr:Window.bodyDefaults</attrs>
    <attrs>attr:Window.contentLayout</attrs>
    <attrs>attr:Window.autoSize</attrs>
    <attrs>attr:Window.header</attrs>
    <attrs>attr:Window.showHeader</attrs>
    <attrs>attr:Window.headerBackground</attrs>
    <attrs>attr:Window.showHeaderBackground</attrs>
    <attrs>attr:Window.headerStyle</attrs>
    <attrs>attr:Window.headerSrc</attrs>
    <attrs>attr:Window.headerControls</attrs>
    <attrs>attr:Window.hiliteHeaderStyle</attrs>
    <attrs>attr:Window.hiliteHeaderSrc</attrs>
    <attrs>attr:Window.headerLabel</attrs>
    <attrs>attr:Window.showTitle</attrs>
    <attrs>attr:Window.title</attrs>
    <attrs>attr:Window.headerLabelDefaults</attrs>
    <attrs>attr:Window.headerIcon</attrs>
    <attrs>attr:Window.showHeaderIcon</attrs>
    <attrs>attr:Window.headerIconDefaults</attrs>
    <attrs>attr:Window.canFocusInHeaderButtons</attrs>
    <attrs>attr:Window.closeButton</attrs>
    <attrs>attr:Window.showCloseButton</attrs>
    <attrs>attr:Window.minimizeButton</attrs>
    <attrs>attr:Window.showMinimizeButton</attrs>
    <attrs>attr:Window.minimized</attrs>
    <attrs>attr:Window.defaultMinimizeHeight</attrs>
    <attrs>attr:Window.minimizeHeight</attrs>
    <attrs>attr:Window.animateMinimize</attrs>
    <attrs>attr:Window.minimizeTime</attrs>
    <attrs>attr:Window.minimizeAcceleration</attrs>
    <attrs>attr:Window.restoreButton</attrs>
    <attrs>attr:Window.maximized</attrs>
    <attrs>attr:Window.maximizeButton</attrs>
    <attrs>attr:Window.showMaximizeButton</attrs>
    <attrs>attr:Window.footer</attrs>
    <attrs>attr:Window.showFooter</attrs>
    <attrs>attr:Window.footerHeight</attrs>
    <attrs>attr:Window.statusBar</attrs>
    <attrs>attr:Window.showStatusBar</attrs>
    <attrs>attr:Window.resizer</attrs>
    <attrs>attr:Window.showResizer</attrs>
</docItem>
<docItem ref="classMethod:isc.getErrorsHTML" flags="" description=" If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false, the form will render all errors in a list at&amp;#010 the top of the form. This method returns the HTML for this list of errors.&amp;#010" name="getErrorsHTML" type="method" definingClass="class:isc">
<params description="Map of field names to error messages. Each field may contain a single                        error message (string) or an array of errors" optional="false" name="errors" type="object">
</params>
<returns description="error HTML." type="HTML"></returns>
    <groups>validation</groups>
</docItem>
<docItem ref="classAttr:Validator.notAString" flags="IRA" description="Default error message to display when standard &lt;code&gt;isString&lt;/code&gt; type validator&amp;#010  returns false." name="notAString" valueType="string" defaultValue="&quot;Must be a string.&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="type:DragTrackerMode" description="When records are being dragged from within a ListGrid, what sort of drag-tracker&amp;#010 should be displayed?" name="DragTrackerMode" type="type">
<values description="Don't display a drag tracker at all" value="&quot;none&quot;"></values>
<values description="Display an icon to represent the record(s) being dragged. Icon src is              derived from ${isc.DocUtils.linkForRef('method:ListGrid.getDragTrackerIcon')}" value="&quot;icon&quot;"></values>
<values description="Display a title for the record being dragged. Title derived from              ${isc.DocUtils.linkForRef('method:ListGrid.getDragTrackerTitle')}" value="&quot;title&quot;"></values>
<values description="Display the entire record being dragged" value="&quot;record&quot;"></values>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="attr:FormItem.colSpan" flags="IRW" description="Number of columns that this item spans (not including label)" name="colSpan" valueType="number" defaultValue="1" type="attr" definingClass="class:FormItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="method:ListGrid.fieldIsVisible" flags="" description=" Check whether a field is currently visible&amp;#010&amp;#010" name="fieldIsVisible" type="method" definingClass="class:ListGrid">
<params description="field to be checked" optional="false" name="field" type="field name or field object">
</params>
<returns description="true if the field is currently visible, false otherwise." type="boolean"></returns>
</docItem>
<docItem ref="class:BlurbItem" description="FormItem intended for inserting blurbs of instructional HTML into DynamicForms.&amp;#010 &lt;p&gt;&amp;#010 Set the &lt;code&gt;defaultValue&lt;/code&gt; of this item to the HTML you want to embed in the form." name="BlurbItem" type="class">
    <attrs>attr:BlurbItem.showTitle</attrs>
    <attrs>attr:BlurbItem.colSpan</attrs>
    <attrs>attr:BlurbItem.textBoxStyle</attrs>
    <attrs>attr:BlurbItem.wrap</attrs>
    <attrs>attr:BlurbItem.clipValue</attrs>
</docItem>
<docItem ref="attr:ListGrid.header" flags="R" description="A Toolbar used to manager the headers shown for each column of the grid." name="header" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
</docItem>
<docItem ref="classAttr:RPCManager.actionURL" flags="RW" description="The actionURL specifies the URL to which the RPC request will be sent.  Note that if you&amp;#010 override this global default and your application uses DataSource databound components,&amp;#010 you'll need to dispatch the DataSource requests from your RPC handler.  Your other option is&amp;#010 to specify a url on a per-request basis." name="actionURL" valueType="URL" defaultValue="RPCManager.actionURL" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="attr:RPCRequest.actionURL">
</seeAlso>
</docItem>
<docItem ref="attr:Flashlet.pluginsPage" flags="IR" description="This attribute specifies the page the user should go to to get the plugin required to view&amp;#010  this flashlet.&amp;#010  &lt;p&gt;&amp;#010  The default pluginsPage is: &quot;http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash&quot;&amp;#010  &lt;p&gt;" name="pluginsPage" valueType="URL" defaultValue="see below" type="attr" definingClass="class:Flashlet">
</docItem>
<docItem ref="attr:RestDataSource.sendMetaData" flags="IR" description="Should  operation meta data be included when assmebling parameters to send &amp;#010 to the server? If true, meta data parameters will be prefixed with the &amp;#010 ${isc.DocUtils.linkForRef('attr:RestDataSource.metaDataPrefix')}.&lt;br&gt;&amp;#010 Applies to operations where OperationBinding.dataProtocol is set to &amp;#010 &lt;code&gt;&quot;getParams&quot;&lt;/code&gt; or &lt;code&gt;&quot;postParams&quot;&lt;/code&gt; only." name="sendMetaData" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="classAttr:ValidatorTypes.requiredIf" flags="IR" description="RequiredIf type validators should be specified with an &lt;code&gt;expression&lt;/code&gt;&amp;#010  property set to a stringMethod, which takes three parameters:&lt;ul&gt;&amp;#010  &lt;li&gt;item - the DynamicForm item on which the error occurred (may be null)&amp;#010  &lt;li&gt;validator - a pointer to the validator object&amp;#010  &lt;li&gt;value - the value of the field in question&lt;/ul&gt;&amp;#010  When validation is perfomed, the expression will be evaluated - if it returns &amp;#010  &lt;code&gt;true&lt;/code&gt;, the field will be treated as a required field, so validation &amp;#010  will fail if the field has no value." name="requiredIf" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
    <examples>${isc.DocUtils.linkForExampleId('conditionallyRequired')}</examples>
</docItem>
<docItem ref="classMethod:XMLTools.selectNodes" flags="" description=" Retrieve a set of nodes from an XML element or document based on an XPath expression.&amp;#010 &lt;P&gt;&amp;#010 If the target document is namespaced, namespace prefixes declared in the document element of&amp;#010 the target document will be available, as well as the default namespace, if declared, under&amp;#010 the prefix &quot;default&quot;.&amp;#010 &lt;P&gt;&amp;#010 To declare your own namespace prefixes, provide a prefix to URI mapping as a simple JS&amp;#010 Object, for example:&amp;#010 &lt;pre&gt;&amp;#010   {&amp;#010      az : &quot;http://webservices.amazon.com/AWSECommerceService/2005-03-23&quot;,&amp;#010      xsd : &quot;http://www.w3.org/2001/XMLSchema&quot;&amp;#010   }&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this API cannot be supported on the Safari web browser for versions earlier&amp;#010 than 3.0.3.&amp;#010&amp;#010" name="selectNodes" type="classMethod" definingClass="class:XMLTools">
<params description="Native XMLElement or document to select from" optional="false" name="element" type="XMLElement or XMLDocument">
</params>
<params description="XPath expression to use to select nodes" optional="false" name="expression" type="XPath">
</params>
<params description="namespace mapping used by the expression" optional="true" name="namespaces" type="prefix -&gt; URI mapping">
</params>
<returns description="list of nodes matching XPath" type="Array"></returns>
    <examples>${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}</examples>
    <groups>xmlTransform</groups>
</docItem>
<docItem ref="attr:ListGrid.headerButtonDefaults" flags="IRA" description="Defaults to apply to all header buttons. To modify this object, &amp;#010 use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','ListGrid.changeDefaults()')} &amp;#010 rather than replacing with an entirely new object." name="headerButtonDefaults" valueType="Button Properties" defaultValue="{...}" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:WSRequest.headerData" flags="IR" description="Data to be serialized to form the SOAP headers, as a map from the header part name to the&amp;#010 data.  For example, given WSDL like this:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;soap:header part=&quot;SessionHeader&quot; message=&quot;tns:HeaderMessage&quot;/&amp;gt;&amp;#010     &amp;lt;soap:header part=&quot;CallOptions&quot; message=&quot;tns:HeaderMessage/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;code&gt;headerData&lt;/code&gt; like this might be provided:&amp;#010 &lt;pre&gt;&amp;#010     dsRequest.headerData = &amp;#010         { SessionHeader : &lt;i&gt;data&lt;/i&gt;&amp;#010           CallOptions : &lt;i&gt;data&lt;/i&gt; };&amp;#010 &lt;/pre&gt;&amp;#010 The provided data will be serialized to XML by the&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.getInputHeaderSchema','SOAP header schema')} via&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}" name="headerData" valueType="any" defaultValue="null" type="attr" definingClass="class:WSRequest">
</docItem>
<docItem ref="attr:ImgProperties.height" flags="IRW" description="Specifies the height of the image." name="height" valueType="number" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="method:CubeGrid.selectFacetValues" flags="" description="&amp;#010 select/deselect the header showing a given set of facet values&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectFacetValues" type="method" definingClass="class:CubeGrid">
<params description="facetValues to select the header of" optional="false" name="facetValues" type="facetValues object">
</params>
<params description="new selection state - if null defaults to true" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Class.getClassName" flags="" description="	&amp;#010	Gets the name of this class as a string.&amp;#010&amp;#010" name="getClassName" type="method" definingClass="class:Class">
<returns description="String name of this instance's Class object." type="string"></returns>
</docItem>
<docItem ref="attr:MenuButton.hiliteAccessKey" flags="IR" description="If this MenuButton has a specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, underline it&amp;#010 in the title of the button by default" name="hiliteAccessKey" valueType="boolean" defaultValue="true" type="attr" definingClass="class:MenuButton">
</docItem>
<docItem ref="method:Canvas.imgHTML" flags="A" description=" Generates the HTML for an image unique to this Canvas.&amp;#010 &lt;P&gt;&amp;#010 The full URL for the image will be formed according to the rules documented for&amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('method:Canvas.getImgURL')}&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 The created image will have an identifier unique to this Canvas, and subsequent calls to&amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('method:Canvas.getImage')}&lt;/code&gt; and&amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('method:Canvas.setImage')}&lt;/code&gt; &amp;#010 with the name passed to this function will act on the image object produced by the HTML&amp;#010 returned from this call.&amp;#010&amp;#010" name="imgHTML" type="method" definingClass="class:Canvas">
<params description="URL local to the skin or application directory.&lt;br&gt;		NOTE: instead of passing several parameters, you can pass an object as the 'src'&amp;#010      parameter with properties for all the various function parameters with, eg:&lt;br&gt;&amp;#010      canvas.imgHTML( {src:&quot;foo&quot;, width:10, height:10} );" optional="false" name="src" type="SCImgURL">
</params>
<params description="width of the image" optional="true" name="width" type="number">
</params>
<params description="height of the image" optional="true" name="height" type="number">
</params>
<params description="name for the image" optional="true" name="name" type="string">
</params>
<params description="additional attributes to write in the tag" optional="true" name="extraStuff" type="string">
</params>
<params description="image-specific image directory to override the default                                  for this Canvas" optional="true" name="imgDir" type="string">
</params>
<returns description="HTML to draw the image." type="string"></returns>
    <groups>images</groups>
</docItem>
<docItem ref="method:ListGrid.getFilterEditorType" flags="A" description="&amp;#010  If we're showing the filter (query-by-example) row for this ListGrid, this method is&amp;#010  used to determine the type of form item to display in the filter edit row for this field.&amp;#010  Default implementation will return the field.filterEditorType if specified, or&amp;#010  field.valueMap.&amp;#010&amp;#010" name="getFilterEditorType" type="method" definingClass="class:ListGrid">
<params description="field definition field for which we need a valueMap" optional="false" name="field" type="ListGridField">
</params>
<returns description="ValueMap for the edit field (or null if no valueMap required)" type="ValueMap"></returns>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:DSRequest.dataSource" flags="IR" description="DataSource this DSRequest will act on.&amp;#010 &lt;P&gt;&amp;#010 This property is generally automatically populated, for example when calling&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} the dataSource property is set to the target&amp;#010 DataSource." name="dataSource" valueType="String" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="method:Canvas.getScrollLeft" flags="A" description=" Get the number of pixels this Canvas is scrolled from its left edge.&amp;#010" name="getScrollLeft" type="method" definingClass="class:Canvas">
<returns description="scrollLeft" type="number"></returns>
    <groups>positioning</groups>
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:List.findIndex" flags="" description=" Find the index of the first Object where property == value in the object.&amp;#010 &lt;P&gt;&amp;#010 Pass an Object instead to match multiple properties.&amp;#010 &lt;P&gt;&amp;#010 Note: for string values, matches are case sensitive.&amp;#010&amp;#010" name="findIndex" type="method" definingClass="interface:List">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="classMethod:isc.addDefaults" flags="" description="&amp;#010 Copy any properties that do not already have a value in destination.  Null and zero values&amp;#010 are not overwritten, but 'undef' values will be.&amp;#010&amp;#010" name="addDefaults" type="classMethod" definingClass="class:isc">
<params description="Object to which properties will be added." optional="false" name="destination" type="Object">
</params>
<params description="Object from which properties will be added." optional="false" name="source" type="Object">
</params>
<returns description="The destination object is returned." type="Object"></returns>
</docItem>
<docItem ref="group:dragDrop" name="dragDrop" type="group">
    <refs>classMethod:EventHandler.setDragTracker</refs>
</docItem>
<docItem ref="attr:DynamicForm.colWidths" flags="IRW" description="An array of widths for the columns of items in this form's layout grid. &amp;#010 &lt;P&gt;&amp;#010 If specified, these widths should sum to the total width of the form (form.width).&amp;#010 If not specified, we assume every other column will contain form item titles, and so&amp;#010 should have &lt;code&gt;form.titleWidth&lt;/code&gt;, and all other columns should share the&amp;#010 remaining space.&amp;#010 &lt;P&gt;&amp;#010 Acceptable values for each element in the array are:&lt;br&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;A number (e.g. 100) representing the number of pixel widths to allocate to a&amp;#010     column.&amp;#010 &lt;li&gt;A percent (e.g. 20%) representing the percentage of the total form.width to&amp;#010     allocate to a column.&amp;#010 &lt;li&gt;&quot;*&quot; (all) to allocate remaining width (form.width minus all specified column&amp;#010     widths). Multiple columns can use &quot;*&quot;, in which case remaining width is divided&amp;#010     between all columns marked &quot;*&quot;.&amp;#010 &lt;/ul&gt;" name="colWidths" valueType="Array" defaultValue="null" type="attr" definingClass="class:DynamicForm">
    <examples>${isc.DocUtils.linkForExampleId('columnSpanning')}</examples>
    <groups>tableLayout</groups>
</docItem>
<docItem exampleConfig="HLayout.xml" ref="class:HLayout" description="A subclass of Layout that applies a sizing policy along the horizontal axis, interpreting&amp;#010  percent and &quot;*&quot; sizes as proportions of the width of the layout. HLayouts will set any members&amp;#010  that do not have explict heights to match the layout." name="HLayout" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
<seeAlso ref="attr:Layout.hPolicy">
</seeAlso>
</docItem>
<docItem ref="attr:Canvas.dynamicContentsVars" flags="IRWA" description="An optional map of name:value parameters that will be evailable within the scope of the&amp;#010 dynamicContents evaluation.  For example - if you have e.g:&amp;#010 &lt;pre&gt;&amp;#010 Canvas.create({&amp;#010   dynamicContents: true,&amp;#010   dynamicContentsVars: {&amp;#010       name: &quot;Bob&quot;&amp;#010   },&amp;#010   contents: &quot;hello \${name}&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 The above will create a canvas with contents &lt;code&gt;hello Bob&lt;/code&gt;.  You can add, remove, and&amp;#010 change values in the dynamicContentsVars object literal, just call&amp;#010 &lt;code&gt;markForRedraw()&lt;/code&gt; on the canvas to have the dynamicContents template re-evaluated.&amp;#010 &lt;p&gt;&amp;#010 Note that &lt;code&gt;this&lt;/code&gt; is always evailable inside a dynamic contents string and points to&amp;#010 the canvas instance containing the dynamic contents.&amp;#010 &lt;p&gt;&amp;#010 Used only if ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents')} : true has been set." name="dynamicContentsVars" valueType="ValueMap" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.dynamicContents">
</seeAlso>
</docItem>
<docItem ref="method:CubeGrid.facetLabelHover" flags="" description="    StringMethod handler fired from hover over a facet label&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetLabelHover" type="method" definingClass="class:CubeGrid">
<params description="ID of the appropriate facet" optional="false" name="facetId" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="attr:GridRenderer.autoFit" flags="IRWA" description="If true, make columns only wide enough to fit content, ignoring any widths specified.&amp;#010 Overrides fixedFieldWidths." name="autoFit" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.showOptionsFromDataSource" flags="IRWA" description="If this item is part of a databound form, and has a specified &lt;code&gt;valueMap&lt;/code&gt;&amp;#010 by default we show the valueMap options in the pickList for the item.&amp;#010 Setting this property to true will ensure that the options displayed in our pickList&amp;#010 are derived from the form's &lt;code&gt;dataSource&lt;/code&gt;." name="showOptionsFromDataSource" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
    <groups>databinding</groups>
</docItem>
<docItem ref="method:List.getRange" flags="" description=" Return the items between position start and end, non-inclusive at the end.&amp;#010&amp;#010" name="getRange" type="method" definingClass="interface:List">
<params description="start position" optional="false" name="start" type="number">
</params>
<params description="end position" optional="false" name="end" type="number">
</params>
<returns description="subset of the array from start -&gt; end-1" type="Array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:FusionChart.chartURL" flags="IR" description="Full URL to the chart.  Needed only if you have renamed the charts such that automatic&amp;#010 URL formation won't work." name="chartURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:FusionChart">
</docItem>
<docItem ref="method:ListGrid.startEditing" flags="A" description=" Start inline editing at the provided coordinates.&amp;#010 &lt;p&gt;&amp;#010 Invoked when a cell is editable and the &lt;code&gt;editEvent&lt;/code&gt; occurs on that cell.  Can&amp;#010 also be invoked explicitly.&amp;#010 &lt;P&gt;&amp;#010 If this method is called while editing is already in progress, the value from the current&amp;#010 editCell will either be stored locally as a temporary edit value, or saved via 'saveEdits()'&amp;#010 depending on &lt;code&gt;this.saveByCell&lt;/code&gt;, and the position of the new edit cell.&lt;br&gt;&amp;#010 Will update the UI to show the editor for the new cell, and put focus in it unless &amp;#010 explicitly suppressed by the optional &lt;code&gt;suppressFocus&lt;/code&gt; parameter.&amp;#010&amp;#010" name="startEditing" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.canEditCell">
</seeAlso>
<seeAlso ref="attr:ListGrid.editEvent">
</seeAlso>
<params description="Row number of the cell to edit.  Defaults to first                                  editable row" optional="true" name="rowNum" type="number">
</params>
<params description="Column number of the cell to edit.  Defaults to first                                  editable column" optional="true" name="colNum" type="number">
</params>
<params description="If passed this parameter suppresses the default                                   behavior of focussing in the edit form item when &amp;#010                                  the editor is shown." optional="true" name="suppressFocus" type="boolean">
</params>
<returns description="true if we are editing the cell, false if not editing for some reason" type="boolean"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="object:DetailViewerRecord" description="A DetailViewerRecord is an object literal with properties that define the values for the&amp;#010 various fields of a ${isc.DocUtils.linkForRef('class:DetailViewer')}.&amp;#010 &lt;p&gt;&amp;#010 For example a DetailViewer that defines the following fields:&amp;#010 &lt;pre&gt;&amp;#010 fields : [&amp;#010     {name: &quot;field1&quot;},&amp;#010     {name: &quot;field2&quot;}&amp;#010 ],&amp;#010 &lt;/pre&gt;&amp;#010 Might have the following data:&amp;#010 &lt;pre&gt;&amp;#010 data : [&amp;#010     {field1: &quot;foo&quot;, field2: &quot;bar&quot;},&amp;#010     {field1: &quot;field1 value&quot;, field2: &quot;field2 value&quot;}&amp;#010 ]&amp;#010 &lt;/pre&gt;&amp;#010 Each element in the data array above is an instance of DetailViewerRecord - notice that&amp;#010 these are specified simply as object literals with properties." name="DetailViewerRecord" type="object">
    <treeLocation>Client Reference/Grids/DetailViewer</treeLocation>
</docItem>
<docItem ref="classAttr:Browser.isSupported" flags="R" description="Whether SmartClient supports the current browser.&amp;#010 &lt;P&gt;&amp;#010 Note that this flag will only be available on browsers that at least support basic&amp;#010 JavaScript." name="isSupported" valueType="boolean" defaultValue="varies by browser" type="classAttr" definingClass="object:Browser">
</docItem>
<docItem ref="attr:Tree.openProperty" flags="IRWA" description="The property the default implementation of ${isc.DocUtils.linkForRef('method:Tree.isOpen')} consules to determine if the&amp;#010 node is open or not.  By default, this property is auto-generated for you, but you can set&amp;#010 it to a custom value if you want to declaratively specify this state, but be careful - if&amp;#010 you display this Tree in multiple TreeGrids at the same time, the open state will not be&amp;#010 tracked independently - see ${isc.DocUtils.linkForRef('group:sharingNodes')} for more info on this." name="openProperty" valueType="string" defaultValue="null" type="attr" definingClass="class:Tree">
<seeAlso ref="group:sharingNodes">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('initialData')}</examples>
    <groups>openList</groups>
</docItem>
<docItem ref="method:ValuesManager.getErrors" flags="" description=" Returns the set of errors for this valuesManager.&amp;#010 Errors will be returned as an object of the format &lt;br&gt;&amp;#010 &lt;code&gt;{field1:errors, field2:errors}&lt;/code&gt;&lt;br&gt;&amp;#010 Where each errors object is either a single error message or an array of error message&amp;#010 strings.&amp;#010" name="getErrors" type="method" definingClass="class:ValuesManager">
<returns description="Object contining mapping from field names to error strings. Returns null                  if there are no errors for this valuesManager." type="object"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:ListGridField.iconSpacing" flags="IR" description="Pixels between icon and title text." name="iconSpacing" valueType="integer" defaultValue="6" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="class:EventHandler" description="The ISC system provides a predictable cross-browser event-handling mechanism for ISC&amp;#010 widgets. Events can be handled both at the page level (i.e., globally), and at the level of&amp;#010 individual widgets.&amp;#010 &lt;p&gt;&amp;#010 With the exception of a few page-specific events ('load', 'unload', 'idle' and 'resize'),&amp;#010 events are processed in the following sequence:&amp;#010 &lt;p&gt;&amp;#010 1. The event is sent to any global (page-level) event handlers. These handlers can cancel&amp;#010 further propagation of the event by returning false.  You can register to listen for any of the&amp;#010 events linked in the seeAlso section (below) by calling ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')}&amp;#010 method.&amp;#010 &lt;p&gt;&amp;#010 2. If the event occurred on a form element or a link, it is passed on to the browser so that&amp;#010 the element will perform its default action. No widget receives the event.&amp;#010 &lt;p&gt;&amp;#010 3. If the event occurred on an enabled widget (but not on a form element or link inside&amp;#010 the widget), it is sent to that widget's event handler, if any. This handler can cancel&amp;#010 further propagation of the event by returning false.  An &quot;enabled&quot; widget is any widget that&amp;#010 defines an event handler for one of the supported events.  Interceptable events are defined in&amp;#010 the ${isc.DocUtils.linkForRef('class:Canvas#methods#events','&quot;widgetEvents&quot; section of Canvas')}.&amp;#010 &lt;p&gt;&amp;#010 4. The event is &quot;bubbled&quot; up to the widget's parent in the containment hierarchy, if any.&amp;#010 Again, the parent's handler for the event can cancel further propagation by returning&amp;#010 false. This step is repeated, with the event &quot;bubbling&quot; up through the containment&amp;#010 hierarchy, until a top-level widget is reached or the event is explicitly canceled.&amp;#010 In brief, the ISC event model offers the best features of browser event models:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Page-first event handling allows you to reliably process or cancel any event before it&amp;#010      affects the objects on the page.&amp;#010 &lt;li&gt; Event &quot;bubbling&quot; ensures that parent widgets receive events sent to their children,&amp;#010      and allows you to create generalized parent-level handlers rather than duplicating&amp;#010      code in each child.&amp;#010 &lt;/ul&gt;&amp;#010 Note: Canceling propagation of an event may cancel its side effects as well, including the&amp;#010 generation of other (synthetic) events. For example, if a global mouseDown handler returns&amp;#010 false, drag-and-drop events will not be generated. Specific effects are discussed in the&amp;#010 descriptions of the various events in the following sections.&amp;#010 &lt;p&gt;&amp;#010 SmartClient libraries will not interfere with native event handling when events occur&amp;#010 outside of a target widget. You can therefore have HTML that is not ISC-based on the same&amp;#010 page as widget objects that will react to native events as you would expect.&amp;#010 &lt;p&gt;&amp;#010 You can use isc.Event as an alias for isc.EventHandler." name="EventHandler" type="class">
    <classMethods>classMethod:EventHandler.setDragTracker</classMethods>
    <classMethods>classMethod:EventHandler.getDragRect</classMethods>
    <classMethods>classMethod:EventHandler.getTarget</classMethods>
    <classMethods>classMethod:EventHandler.getDragTarget</classMethods>
    <classMethods>classMethod:EventHandler.getX</classMethods>
    <classMethods>classMethod:EventHandler.getY</classMethods>
    <classMethods>classMethod:EventHandler.leftButtonDown</classMethods>
    <classMethods>classMethod:EventHandler.rightButtonDown</classMethods>
    <classMethods>classMethod:EventHandler.getKey</classMethods>
    <classMethods>classMethod:EventHandler.shiftKeyDown</classMethods>
    <classMethods>classMethod:EventHandler.ctrlKeyDown</classMethods>
    <classMethods>classMethod:EventHandler.altKeyDown</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
<seeAlso ref="type:PageEvent">
</seeAlso>
<seeAlso ref="classMethod:Page.setEvent">
</seeAlso>
<seeAlso ref="classMethod:Page.clearEvent">
</seeAlso>
<seeAlso ref="class:Canvas#methods#widgetEvents">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.nullGroupTitle" flags="IRW" description="Default alias to use for groups with no value" name="nullGroupTitle" valueType="String" defaultValue="'-none-'" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:ImgTab.titleStyle" flags="IR" description="Like ${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')}, can set to provide a separate style for the&amp;#010 title text.&amp;#010 &lt;P&gt;&amp;#010 If set and the ImgTab is ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')}, a &quot;v&quot; will be&amp;#010 automatically prepended to the style name (hence &quot;tabTitle&quot; -&gt; &quot;vtabTitle&quot;)." name="titleStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="group:upload" title="Uploading Files" description="SmartClient provides special client and server-side support for file upload that allows&amp;#010 uploaded files to be treated like ordinary DataSource fields.  This includes:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;the ${isc.DocUtils.linkForRef('class:FileItem')} and ${isc.DocUtils.linkForRef('class:MultiFileItem')} FormItems that enable users to upload one or&amp;#010 more files as a background operation, without leaving the current page&amp;#010 &lt;li&gt;server-side support that allows binary uploads to be treated as a normal DataSource field&amp;#010 values, with all other aspects of server-side integration unchanged&amp;#010 &lt;li&gt;built-in SQL DataSource support that can store and retrieve uploaded files from SQL&amp;#010 databases&amp;#010 &lt;li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 The following documentation assumes you are using the SmartClient Java Server.  If you are&amp;#010 not, skip to the sections near the end of this soducment.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Single file upload: &quot;binary&quot; field type&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To use SmartClient's client-server upload system, you use a DataSource field of&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.type','type')} &quot;binary&quot;.  By default, a DynamicForm bound to a DataSource&amp;#010 with a field of type &quot;binary&quot; will use the ${isc.DocUtils.linkForRef('class:FileItem')}, which displays a standard HTML&amp;#010 &amp;lt;input type=&quot;upload&quot;&amp;gt; form control.&amp;#010 &lt;P&gt;&amp;#010 When you call ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} on a DynamicForm containing a FileItem,&amp;#010 SmartClient processes the save identically to a saveData() call that did not include a file&amp;#010 upload:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; if you are using the built-in SQL connectors via serverType:&quot;sql&quot;, the file will be&amp;#010 saved to SQL as described under ${isc.DocUtils.linkForRef('type:FieldType','field type &quot;binary&quot;')}.&amp;#010 &lt;li&gt; if you have server-side business logic, the inbound request may be routed to your&amp;#010 business logic via RPCManager dispatch or DMI declarations as normal, your business logic&amp;#010 will receive a normal DSRequest, and you are expected to provide a normal DSResponse.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 Client-side callbacks, such as the callback passed to saveData(), fire normally.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Processing File Uploads with server-side business logic&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Server-side business logic that processes file uploads may retrieve upload files via the&amp;#010 server side API dsRequest.getUploadedFile(&lt;i&gt;fieldName&lt;/i&gt;).  The uploaded file is returned&amp;#010 as an instance of ISCFileItem, which provides access to a Java InputStream as well as&amp;#010 metadata about the file (size, name).  &amp;#010 See the ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for details.&amp;#010 &lt;P&gt;&amp;#010 Server-side validation errors may be provided, including validation errors for the uploaded&amp;#010 file (such as too large or invalid content), and will be displayed in the form that&amp;#010 attempted an upload.&amp;#010 &lt;P&gt;&amp;#010 Be aware of the following special concerns when processing file uploads:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; if you provide your own Java Servlet or JSP that creates an instance of RPCManager in&amp;#010 order process SmartClient requests, many APIs of the HttpServletRequest are not safe to call&amp;#010 before you have created the RPCManager, passing in the HttpServletRequest.  These include&amp;#010 getReader(), getParameter() and other commonly called methods.  This is a limitation of&amp;#010 Java Servlets, not specific to SmartClient&amp;#010 &lt;li&gt; unlike other DataSource &quot;add&quot; and &quot;update&quot; operations, you are not expected to return&amp;#010 the file as part of the data returned in the DSResponse&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Multi file upload: MultiFileItem&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The MultiFileItem provides an interface for a user to save one or more files that are&amp;#010 related to a DataSource record, where each file is represented by a record in a&amp;#010 related DataSource.&amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('class:MultiFileItem')} docs for details.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Upload without the SmartClient Server&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If it is acceptable that the application will do a full-page reload after the upload&amp;#010 completes, you can simply:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; set ${isc.DocUtils.linkForRef('attr:DynamicForm.encoding')} to &quot;multipart&quot;&amp;#010 &lt;li&gt; include an ${isc.DocUtils.linkForRef('class:UploadItem')} to get a basic HTML upload control&amp;#010 &lt;li&gt; set ${isc.DocUtils.linkForRef('attr:DynamicForm.action')} to a URL where you have deployed server-side code to&amp;#010 handle the upload&amp;#010 &lt;li&gt; call ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')} to cause the form to be submitted&amp;#010 &lt;/ul&gt;&amp;#010 This cause the DynamicForm component to submit to the form.action URL like an ordinary HTML&amp;#010 &amp;lt;form&amp;gt; element.  Many &amp;#010 &lt;a href='http://www.google.com/search?q=html+file+upload+example' onclick=&quot;window.open('http://www.google.com/search?q=html+file+upload+example');return false;&quot;&gt;online tutorials&lt;/a&gt;&amp;#010 are available which explain how to handle HTML form file upload in various server-side&amp;#010 technologies.&amp;#010 &lt;P&gt;&amp;#010 Note that when you submitForm(), the only values that will be sent to your actionURL are &amp;#010 values for which actual FormItems exist.  This differs from saveData(), in which the&amp;#010 entire set of ${isc.DocUtils.linkForRef('attr:DynamicForm.values','form values')} are always sent.  To handle submitting&amp;#010 extra values, use ${isc.DocUtils.linkForRef('class:HiddenItem')}s.&amp;#010 &lt;P&gt;&amp;#010 For further details, see the ${isc.DocUtils.linkForRef('class:UploadItem')} docs.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Background upload without the SmartClient Server&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Achieving background file upload without using the SmartClient server is also possible&amp;#010 although considerably more advanced.  In addition to the steps above, create a hidden&amp;#010 &amp;lt;iframe&amp;gt; element in the page, and use ${isc.DocUtils.linkForRef('attr:DynamicForm.target')} to target the form&amp;#010 submission at this IFRAME.  In order receive a callback notification when the upload&amp;#010 completes, after processing the file upload, your server should output HTML content for the&amp;#010 IFRAME that includes a &amp;lt;SCRIPT&amp;gt; block which will navigate out of the IFRAME (generally&amp;#010 via the JavaScript global &quot;top&quot;) and call a global method you have declared as a callback." name="upload" type="group">
    <treeLocation>Client Reference/Forms/Form Items/FileItem</treeLocation>
    <refs>class:UploadItem</refs>
    <refs>class:FileItem</refs>
    <refs>class:MultiFileItem</refs>
    <refs>class:MultiFilePicker</refs>
</docItem>
<docItem ref="method:CubeGrid.closeColumn" flags="" description="&amp;#010  Handler fired when column is closed&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="closeColumn" type="method" definingClass="class:CubeGrid">
<params description="FacetValues for the appropriate col." optional="false" name="headerFacetValues" type="facetValues object">
</params>
    <groups>columnControls</groups>
</docItem>
<docItem ref="attr:FormItem.globalTabIndex" flags="IRWA" description="TabIndex for the form item within the page. Takes presidence over any local tab index&amp;#010 specified as ${isc.DocUtils.linkForRef('attr:FormItem.tabIndex','item.tabIndex')}." name="globalTabIndex" valueType="integer" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>focus</groups>
</docItem>
<docItem ref="type:SelectionStyle" description="Different styles of selection that a list, etc. might support" name="SelectionStyle" type="type">
<values description="don't select at all" value="Selection.NONE"></values>
<values description="select only one item at a time" value="Selection.SINGLE"></values>
<values description="select one or more items" value="Selection.MULTIPLE"></values>
<values description="select one or more items as a toggle 								  so you don't need to hold down control keys to select &amp;#010                                  more than one object" value="Selection.SIMPLE"></values>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Date.toJapanShortDateTime" flags="" description="			Return this date in the format: &lt;code&gt;YYYY/MM/DD HH:MM:SS&lt;/code&gt;&amp;#010" name="toJapanShortDateTime" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:ResultSet.dataArrived" flags="" description=" Notification fired when data has arrived from the server and has been successfully&amp;#010 integrated into the cache.&amp;#010 &lt;P&gt;&amp;#010 When &lt;code&gt;dataArrived()&lt;/code&gt; fires, an immediate call to &lt;code&gt;getRange()&lt;/code&gt; with&amp;#010 the &lt;code&gt;startRow&lt;/code&gt; and &lt;code&gt;endRow&lt;/code&gt; passed as arguments will return a List&amp;#010 with no &lt;code&gt;Array.LOADING&lt;/code&gt; markers.&amp;#010&amp;#010" name="dataArrived" type="method" definingClass="class:ResultSet">
<params description="starting index of rows that have just loaded" optional="false" name="startRow" type="number">
</params>
<params description="ending index of rows that have just loaded, non-inclusive" optional="false" name="endRow" type="number">
</params>
</docItem>
<docItem ref="attr:CheckboxItem.titleStyle" deprecated="As of Isomorphic SmartClient build 5.5, use textBoxStyle instead" flags="IRW" description="Base CSS class for this item's title text" name="titleStyle" valueType="FormItemBaseStyle" defaultValue="null" type="attr" definingClass="class:CheckboxItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSource.jsonSuffix" flags="IRA" description="Allows you to specify an arbitrary suffix string to apply to all json format responses &amp;#010 sent from the server to this application.&lt;br&gt;&amp;#010 The inclusion of such a suffix ensures your code is not directly executable outside of&amp;#010 your application, as a preventitive measure against&amp;#010 &lt;a href='http://www.google.com/search?q=javascript+hijacking' onclick=&quot;window.open('http://www.google.com/search?q=javascript+hijacking');return false;&quot;&gt;javascript hijacking&lt;/a&gt;.&amp;#010 &lt;br&gt;&amp;#010 Only applies to responses formatted as json objects. Does not apply to responses returned&amp;#010 via scriptInclude type transport." name="jsonSuffix" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="attr:OperationBinding.dataFormat">
</seeAlso>
<seeAlso ref="attr:OperationBinding.dataTransport">
</seeAlso>
</docItem>
<docItem ref="method:Window.removeItem" flags="A" description="			Removes a widget from the window.&amp;#010" name="removeItem" type="method" definingClass="class:Window">
<params description="the widget to be removed" optional="false" name="item" type="Canvas">
</params>
<returns description="the array of widgets removed" type="array"></returns>
    <groups>windowItems</groups>
</docItem>
<docItem ref="attr:StaticTextItem.wrap" flags="IRW" description="If true, item contents can wrap. If false, all the contents should appear on a single line." name="wrap" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StaticTextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ResultSet.allRowsCached" flags="A" description=" Do we have a complete client-side cache of all records for this dataSource?&amp;#010" name="allRowsCached" type="method" definingClass="class:ResultSet">
</docItem>
<docItem ref="method:Tree.getDescendants" flags="" description="&amp;#010 Returns the list of all descendants of a node.  Note: this method can be very slow,&amp;#010 especially on large trees because it assembles a list of all descendants recursively.&amp;#010 Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in combination with ${isc.DocUtils.linkForRef('method:Tree.getChildren')} will&amp;#010 be much faster.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getDescendants" type="method" definingClass="class:Tree">
<params description="node in question (the root node is asumed if none specified)" optional="true" name="node" type="TreeNode">
</params>
<returns description="List of descendants of the node." type="List"></returns>
</docItem>
<docItem ref="method:StretchImgButton.setActionType" flags="" description=" Update the 'actionType' for this canvas (radio / checkbox / button)&amp;#010 If the canvas is currently selected, and the passed in actionType is 'button'&amp;#010 this method will deselect the canvas.&amp;#010" name="setActionType" type="method" definingClass="class:StretchImgButton">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:Selection.selectSingle" flags="" description=" Select a single item and deselect everything else&amp;#010" name="selectSingle" type="method" definingClass="class:Selection">
<params description="object to select" optional="false" name="item" type="object">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverStyle" flags="IRW" description="CSS Style for hovers shown for items" name="itemHoverStyle" valueType="CSSStyleName" defaultValue="&quot;formHover&quot;" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverStyle">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:ListGrid.autoFetchData" flags="IR" description="If true, when this component is first drawn, automatically call &lt;code&gt;this.fetchData()&lt;/code&gt;" name="autoFetchData" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.fetchData">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('fetchOperation')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:StretchImg.capSize" flags="IRW" description="If the default items are used, capSize is the size in pixels of the first and last&amp;#010          images in this stretchImg." name="capSize" valueType="number" defaultValue="2" type="attr" definingClass="class:StretchImg">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.shouldSnapOnDrop" flags="A" description=" Override this method to give programmatic control over whether or not the parameter &amp;#010 &lt;code&gt;dragTarget&lt;/code&gt; should snap to this object's grid when dropped.  Note that this only applies&amp;#010 if snap-to-grid is enabled on either &lt;code&gt;dragTarget&lt;/code&gt; or this object.  See &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid')} and ${isc.DocUtils.linkForRef('attr:Canvas.childrenSnapToGrid')}.&amp;#010 &lt;P&gt;&amp;#010 The default implementation simply returns true.&amp;#010&amp;#010" name="shouldSnapOnDrop" type="method" definingClass="class:Canvas">
<params description="The object about to be dropped" optional="false" name="dragTarget" type="isc.Canvas">
</params>
<returns description="true if &lt;code&gt;dragTarget&lt;/code&gt; should snap to this object's grid; otherwise false" type="boolean"></returns>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Canvas.showDragShadow" flags="IRWA" description="When this widget is dragged, if its dragAppearance is &lt;code&gt;&quot;target&quot;&lt;/code&gt;, should&amp;#010 we show a shadow behind the canvas during the drag." name="showDragShadow" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragEffects')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:CubeGrid.selectFacetValue" flags="" description="&amp;#010  select/deselect the header for a given facet value&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectFacetValue" type="method" definingClass="class:CubeGrid">
<params description="ID of facet" optional="false" name="facetId" type="string">
</params>
<params description="ID of facetValue to select" optional="false" name="facetValueId" type="string">
</params>
<params description="new selection state - if null defaults to true" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Tree.getLength" flags="" description="&amp;#010 Returns the number of items in the current open list.&amp;#010&amp;#010" name="getLength" type="method" definingClass="class:Tree">
<seeAlso ref="method:Tree.getOpenList">
</seeAlso>
<returns description="number of items in open list" type="number"></returns>
</docItem>
<docItem ref="group:dataBoundComponentMethods" title="DataBound Component Methods" description="An Action Method initiates an orchestrated client-server flow that stores or retrieves data&amp;#010 and updates one or more components.&amp;#010 &lt;P&gt;&amp;#010 For example, the ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','editor.saveData()')} Action Method saves the&amp;#010 record currently being edited in the form, transparently handling the trip to the server,&amp;#010 standard error conditions such as validation errors (whether the validation error&amp;#010 happens on the client or server), and update of client-side caches.&amp;#010 &lt;P&gt;&amp;#010 Action Methods are available on DataBoundComponents." name="dataBoundComponentMethods" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <refs>method:DynamicForm.editNewRecord</refs>
    <refs>method:DynamicForm.editRecord</refs>
    <refs>method:DynamicForm.editSelectedData</refs>
    <refs>method:DynamicForm.submit</refs>
    <refs>method:DynamicForm.saveData</refs>
    <refs>method:DynamicForm.fetchData</refs>
    <refs>method:DynamicForm.filterData</refs>
    <refs>method:ValuesManager.editNewRecord</refs>
    <refs>method:ValuesManager.editRecord</refs>
    <refs>method:ValuesManager.editSelectedData</refs>
    <refs>method:ValuesManager.saveData</refs>
    <refs>method:ValuesManager.submit</refs>
    <refs>method:ValuesManager.filterData</refs>
    <refs>method:ValuesManager.fetchData</refs>
    <refs>method:DetailViewer.viewSelectedData</refs>
    <refs>method:ListGrid.fetchData</refs>
    <refs>method:ListGrid.filterData</refs>
    <refs>method:ListGrid.fetchRelatedData</refs>
    <refs>method:ListGrid.clearCriteria</refs>
    <refs>method:ListGrid.addData</refs>
    <refs>method:ListGrid.updateData</refs>
    <refs>method:ListGrid.removeData</refs>
    <refs>method:ListGrid.removeSelectedData</refs>
    <refs>method:TreeGrid.fetchData</refs>
    <refs>method:TreeGrid.filterData</refs>
<seeAlso ref="interface:DataBoundComponent">
</seeAlso>
</docItem>
<docItem ref="attr:groupNode.groupMembers" flags="R" description="Array of ListGridRecord that belong to this group, or, for multi-field grouping, array&amp;#010 of groupNodes of subgroups under this groupNode." name="groupMembers" valueType="Array of ListGridRecord or GroupNode" defaultValue="see below" type="attr" definingClass="object:groupNode">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeLeft" flags="IR" description="Height in pixels for left corners and edges.  Defaults to edgeSize when unset." name="edgeLeft" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:ToolStrip.resizeBarSize" flags="IRA" description="Thickness of the resizeBars in pixels" name="resizeBarSize" valueType="integer" defaultValue="14" type="attr" definingClass="class:ToolStrip">
</docItem>
<docItem ref="method:Button.setTitle" flags="" description=" Set the title.&amp;#010" name="setTitle" type="method" definingClass="class:Button">
<params description="new title" optional="false" name="newTitle" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Tree.getDescendantLeaves" flags="" description="&amp;#010 Returns the list of all descendants of a node that are leaves.  This works just like&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, except folders are not part of the returned list.&amp;#010 Folders are still recursed into, just not returned.  Like ${isc.DocUtils.linkForRef('method:Tree.getDescendants')},&amp;#010 this method can be very slow for large trees.  Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in&amp;#010 combination with ${isc.DocUtils.linkForRef('method:Tree.getLeaves')} be much faster.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getDescendantLeaves" type="method" definingClass="class:Tree">
<params description="node in question (the root node is assumed if none specified)" optional="true" name="node" type="TreeNode">
</params>
<returns description="List of descendants of the node that are leaves." type="List"></returns>
</docItem>
<docItem ref="method:DynamicForm.reset" flags="" description="&amp;#010 Resets values to the state it was the last time &lt;code&gt;setValues()&lt;/code&gt; or&amp;#010 &lt;code&gt;rememberValues()&lt;/code&gt; was called. If neither of those methods has been called,&amp;#010 values will be set back to their inital values at init time.&amp;#010&amp;#010" name="reset" type="method" definingClass="class:DynamicForm">
    <groups>formValues</groups>
</docItem>
<docItem ref="method:ListGrid.setValueMap" flags="" description=" Set the ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','valueMap')} for a field.&amp;#010 See also the ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap','setEditorValueMap()')}&amp;#010 and ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap','getEditorValueMap()')} methods which allow further &amp;#010 customization of the valueMap displayed while the field is in edit mode.&amp;#010&amp;#010" name="setValueMap" type="method" definingClass="class:ListGrid">
<params description="Name or number of field to update" optional="false" name="fieldID" type="string || number">
</params>
<params description="ValueMap for the field" optional="false" name="map" type="object">
</params>
</docItem>
<docItem ref="group:noFrames" title="Don't Misuse Frames" description="Loading the SmartClient framework into multiple frames or iframes within the same browser is&amp;#010 not a supported configuration, or more accurately, not a &lt;i&gt;supportable&lt;/i&gt; configuration,&amp;#010 for the following reasons:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; each additional frame multiplies the memory footprint and reduces speed&amp;#010 &lt;li&gt; having multiple frames prevents drag and drop between components in different frames&amp;#010 &lt;li&gt; modality handling (eg modal dialogs) doesn't automatically take into account multiple&amp;#010 frames (consider tabbing order, nested modality and other issues, you'll see it's not&amp;#010 realistic to provide automatic cross-frame modality handling)&amp;#010 &lt;li&gt; inter-frame communication triggers several browser bugs: memory leaks, performance&amp;#010 issues, intermittent crashes in some browsers, inconsistencies in basic JavaScript operators&amp;#010 such as &quot;typeof&quot;, and problems with form focus handling in IE, among many other bugs&amp;#010 &lt;/ul&gt;&amp;#010 None of these problems are specific to SmartClient.  They happen with Ajax frameworks in&amp;#010 general as well as other RIA technologies.  This is why no successful Ajax application has&amp;#010 ever used the approach of double-loading a component framework into multiple frames.&amp;#010 &lt;P&gt;&amp;#010 The recommended ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient Architecture')} involves loading as many&amp;#010 SmartClient-based application views as possible in the first page load, then showing and&amp;#010 hiding different views as the user navigates through the application.&amp;#010 &lt;P&gt;&amp;#010 If, for whatever reason, you cannot follow the SmartClient Architecture and must load new&amp;#010 SmartClient-based views by contacting the server each time, use the ${isc.DocUtils.linkForRef('class:ViewLoader')} class&amp;#010 to load new views, never frames.&amp;#010 &lt;P&gt;&amp;#010 Note that the use of IFrames is appropriate in certain circumstances, including loading&amp;#010 certain types of content within an ${isc.DocUtils.linkForRef('class:HTMLFlow','contentsType,HTMLFlow')}.  The only&amp;#010 prohibited usage is loading the SmartClient framework into multiple frames within the same&amp;#010 browser." name="noFrames" type="group">
</docItem>
<docItem ref="attr:TreeGrid.closedIconSuffix" flags="IRW" description="This suffix will be appended to the ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for closed folders.&amp;#010 If ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} is set to &lt;code&gt;false&lt;/code&gt; this suffix will also be&amp;#010 appended to open folders' icons." name="closedIconSuffix" valueType="String" defaultValue="&quot;closed" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:DateChooser.prevYearIconHeight" flags="IRW" description="Height of the icon for the previous year button" name="prevYearIconHeight" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:Window.addItems" flags="" description="			Adds an array of widgets to the window.&amp;#010" name="addItems" type="method" definingClass="class:Window">
<params description="an array of widgets to be added" optional="false" name="items" type="Array of Canvas">
</params>
<returns description="array of widgets added" type="array"></returns>
    <groups>windowItems</groups>
</docItem>
<docItem ref="group:chartAppearance" name="chartAppearance" type="group">
    <refs>attr:Chart.threeD</refs>
    <refs>attr:Chart.shouldAnimateShow</refs>
    <refs>attr:Chart.labelValues</refs>
</docItem>
<docItem ref="class:OperationBinding" description="An operationBinding tells a DataSource how to execute one of the basic DS operations: fetch,&amp;#010 add, update, remove.&amp;#010 &lt;P&gt;&amp;#010 OperationBindings are typically used to declaratively bind a DataSource to a Web Service, by&amp;#010 associating each DataSource operation with a Web Service operation, and providing properties&amp;#010 such as ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} to map web service responses to data expected by a&amp;#010 DataSource." name="OperationBinding" type="class">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <attrs>attr:OperationBinding.operationType</attrs>
    <attrs>attr:OperationBinding.operationId</attrs>
    <attrs>attr:OperationBinding.serverMethod</attrs>
    <attrs>attr:OperationBinding.methodArguments</attrs>
    <attrs>attr:OperationBinding.serverObject</attrs>
    <attrs>attr:OperationBinding.wsOperation</attrs>
    <attrs>attr:OperationBinding.dataURL</attrs>
    <attrs>attr:OperationBinding.dataProtocol</attrs>
    <attrs>attr:OperationBinding.dataFormat</attrs>
    <attrs>attr:OperationBinding.dataTransport</attrs>
    <attrs>attr:OperationBinding.callbackParam</attrs>
    <attrs>attr:OperationBinding.requestProperties</attrs>
    <attrs>attr:OperationBinding.defaultParams</attrs>
    <attrs>attr:OperationBinding.recordXPath</attrs>
    <attrs>attr:OperationBinding.recordName</attrs>
    <attrs>attr:OperationBinding.responseDataSchema</attrs>
    <attrs>attr:OperationBinding.useFlatFields</attrs>
    <attrs>attr:OperationBinding.xmlNamespaces</attrs>
</docItem>
<docItem ref="attr:CheckboxItem.unsetImage" flags="IRW" description="URL for the image to display when this checkbox is unset.  Defaults to matching the&amp;#010 unchecked image." name="unsetImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/unchecked.gif&quot;" type="attr" definingClass="class:CheckboxItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ImgTab.showFocus" deprecated="as of SmartClient 6.1 in favor of ${isc.DocUtils.linkForRef('attr:ImgTab.showFocused')}" flags="IRW" description="Should we visibly change state when the tab recieves keyboard focus?" name="showFocus" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="attr:ImgButton.iconHeight" flags="IR" description="Height in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ListGrid.rowMouseDown" flags="" description=" Called when a row receives a mousedown event.&amp;#010 &amp;#010" name="rowMouseDown" type="method" definingClass="class:ListGrid">
<params description="record object returned from 'getCellRecord()'" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:SliderItem.minValue" flags="IRW" description="The minimum slider value. The slider value is equal to minValue when the thumb is at the&amp;#010 bottom or left of the slider (unless flipValues is true, in which case the minimum value&amp;#010 is at the top/right of the slider)" name="minValue" valueType="float" defaultValue="1" type="attr" definingClass="class:SliderItem">
<seeAlso ref="attr:Slider.flipValues">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('sliderItem')}</examples>
</docItem>
<docItem ref="attr:StretchImgButton.labelBreadthPad" flags="IRW" description="The padding for a StretchImgButton's label is determined as follows.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;labelHPad&lt;/code&gt; is set it will specify the horizontal padding applied to the&amp;#010 label. Similarly if &lt;code&gt;labelVPad&lt;/code&gt; is set it will specify the vertical padding&amp;#010 for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.&amp;#010 &lt;P&gt;&amp;#010 Otherwise &lt;code&gt;labelLengthPad&lt;/code&gt; can be set to specify the label padding along the&amp;#010 length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,&amp;#010 otherwise vertical padding), and &amp;#010 &lt;code&gt;labelBreadthPad&lt;/code&gt; can be set to specify the label padding along the other axis.&amp;#010 &lt;P&gt;&amp;#010 Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and&amp;#010 will be set to zero on the breadth axis.&amp;#010 &lt;P&gt;&amp;#010 So by default the label will be sized to match the center image of the StretchImgButton, but&amp;#010 these settings allow the label to partially or wholly overlap the caps." name="labelBreadthPad" valueType="number" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:Array.or" flags="" description=" Returns true if at least one value between the start and end indices is true.&amp;#010&amp;#010" name="or" type="method" definingClass="object:Array">
<params description="optional start index (default is 0)" optional="true" name="start" type="number">
</params>
<params description="optional end index (default is list.length)" optional="true" name="end" type="number">
</params>
<returns description="at least one of the items is true" type="boolean"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="attr:Canvas.ID" flags="IR" description="Global identifier for referring to a widget in JavaScript.  The ID property is optional if&amp;#010 you do not need to refer to the widget from JavaScript, or can refer to it indirectly&amp;#010 (for example, by storing the reference returned by ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}).&amp;#010 &lt;P&gt;&amp;#010 An internal, unique ID will automatically be created upon instantiation for any canvas&amp;#010 where one is not provided." name="ID" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
    <getter>getID</getter>
    <groups>basics</groups>
</docItem>
<docItem ref="type:PercentBoxModel" description="Determines sizing model when sizing / positioning a canvas relative to its&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.percentBox','percentBox')}." name="PercentBoxModel" type="type">
<values description="use coordinates relative to the {${isc.DocUtils.linkForRef('method:Canvas.getVisibleHeight')},visibleHeight} and width of the other canvas" value="&quot;visible&quot;"></values>
<values description="use coordinates relative to the {${isc.DocUtils.linkForRef('method:Canvas.getViewportHeight')},viewportHeight} and width of the other canvas" value="&quot;viewport&quot;"></values>
</docItem>
<docItem ref="method:Button.setIcon" flags="" description=" Change the icon being shown next to the title text.&amp;#010" name="setIcon" type="method" definingClass="class:Button">
<params description="URL of new icon" optional="false" name="icon" type="URL">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGridField.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:CheckboxItem.textBoxStyle" flags="IRW" description="Base CSS class for this item's title text" name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;labelAnchor&quot;" type="attr" definingClass="class:CheckboxItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:CubeGrid.facetAdded" flags="" description="      Notification fired when a new facet is added.&amp;#010 &amp;#010" name="facetAdded" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.facetRemoved" description="&lt;br&gt;&lt;i&gt;methodType&lt;/i&gt;  handler"></seeAlso>
<params description="facetId that was added" optional="false" name="facetId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="method:GridRenderer.getNearestColToEvent" flags="" description="			Returns the nearest column to the event coordinates&amp;#010" name="getNearestColToEvent" type="method" definingClass="class:GridRenderer">
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DynamicForm.longTextEditorThreshold" flags="IRW" description="When creating form items for fields with text type data, if the specified length of the&amp;#010 field exceeds this threshold we will create form item of type &amp;#010 &lt;code&gt;this.longTextEditorType&lt;/code&gt; (a TextAreaItem by default), rather than a simple&amp;#010 text item.  Overridden by explicitly specifying &lt;code&gt;editorType&lt;/code&gt; for the field." name="longTextEditorThreshold" valueType="number" defaultValue="255" type="attr" definingClass="class:DynamicForm">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.getViewportHeight" flags="A" description="  Returns the height of the viewport onto the scrollable content.&amp;#010&amp;#010" name="getViewportHeight" type="method" definingClass="class:Canvas">
<returns description="height of the viewport, in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="classAttr:FileLoader.defaultSkin" flags="RW" description="Default skin for  ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} to&amp;#010 use if one is not provided by the user." name="defaultSkin" valueType="String" defaultValue="&quot;standard&quot;" type="classAttr" definingClass="class:FileLoader">
<seeAlso ref="classMethod:FileLoader.cacheISC">
</seeAlso>
<seeAlso ref="classMethod:FileLoader.loadISC">
</seeAlso>
</docItem>
<docItem ref="attr:FormItem.hoverOpacity" flags="IRW" description="Opacity for any hover shown for this item" name="hoverOpacity" valueType="number" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverOpacity">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="class:StatefulCanvas" description="A component that has a set of possible states, and which presents itself differently according to&amp;#010 which state it is in.  An example is a button, which can be &quot;up&quot;, &quot;down&quot;, &quot;over&quot; or &quot;disabled&quot;." name="StatefulCanvas" type="class">
    <methods>method:StatefulCanvas.setBaseStyle</methods>
    <methods>method:StatefulCanvas.setState</methods>
    <methods>method:StatefulCanvas.getState</methods>
    <methods>method:StatefulCanvas.setSelected</methods>
    <methods>method:StatefulCanvas.select</methods>
    <methods>method:StatefulCanvas.deselect</methods>
    <methods>method:StatefulCanvas.isSelected</methods>
    <methods>method:StatefulCanvas.getActionType</methods>
    <methods>method:StatefulCanvas.setActionType</methods>
    <methods>method:StatefulCanvas.addToRadioGroup</methods>
    <methods>method:StatefulCanvas.removeFromRadioGroup</methods>
    <methods>method:StatefulCanvas.setDisabled</methods>
    <methods>method:StatefulCanvas.setIconOrientation</methods>
    <methods>method:StatefulCanvas.setAutoFit</methods>
    <methods>method:StatefulCanvas.getTitle</methods>
    <methods>method:StatefulCanvas.setTitle</methods>
    <methods>method:StatefulCanvas.setIcon</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:StatefulCanvas.title</attrs>
    <attrs>attr:StatefulCanvas.redrawOnStateChange</attrs>
    <attrs>attr:StatefulCanvas.selected</attrs>
    <attrs>attr:StatefulCanvas.state</attrs>
    <attrs>attr:StatefulCanvas.showRollOver</attrs>
    <attrs>attr:StatefulCanvas.showFocus</attrs>
    <attrs>attr:StatefulCanvas.showFocused</attrs>
    <attrs>attr:StatefulCanvas.showFocusedAsOver</attrs>
    <attrs>attr:StatefulCanvas.showDown</attrs>
    <attrs>attr:StatefulCanvas.showDisabled</attrs>
    <attrs>attr:StatefulCanvas.actionType</attrs>
    <attrs>attr:StatefulCanvas.radioGroup</attrs>
    <attrs>attr:StatefulCanvas.baseStyle</attrs>
    <attrs>attr:StatefulCanvas.align</attrs>
    <attrs>attr:StatefulCanvas.valign</attrs>
    <attrs>attr:StatefulCanvas.autoFit</attrs>
    <attrs>attr:StatefulCanvas.icon</attrs>
    <attrs>attr:StatefulCanvas.iconSize</attrs>
    <attrs>attr:StatefulCanvas.iconWidth</attrs>
    <attrs>attr:StatefulCanvas.iconHeight</attrs>
    <attrs>attr:StatefulCanvas.iconOrientation</attrs>
    <attrs>attr:StatefulCanvas.iconSpacing</attrs>
    <attrs>attr:StatefulCanvas.showDisabledIcon</attrs>
    <attrs>attr:StatefulCanvas.showRollOverIcon</attrs>
    <attrs>attr:StatefulCanvas.showDownIcon</attrs>
    <attrs>attr:StatefulCanvas.showSelectedIcon</attrs>
    <attrs>attr:StatefulCanvas.showFocusedIcon</attrs>
    <attrs>attr:StatefulCanvas.showOverCanvas</attrs>
    <attrs>attr:StatefulCanvas.overCanvas</attrs>
    <attrs>attr:StatefulCanvas.overCanvasConstructor</attrs>
    <attrs>attr:StatefulCanvas.overCanvasDefaults</attrs>
</docItem>
<docItem ref="method:Canvas.setShowShadow" flags="" description=" Method to update ${isc.DocUtils.linkForRef('attr:Canvas.showShadow')}.&amp;#010" name="setShowShadow" type="method" definingClass="class:Canvas">
<params description="true if the shadow should be visible false if not" optional="false" name="showShadow" type="boolean">
</params>
    <groups>shadow</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.pickListCriteria" flags="IRWA" description="If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is&amp;#010 set) this property can be used to provide static filter criteria when retrieving the data&amp;#010 for the pickList." name="pickListCriteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:GridRenderer.fixedColumnWidths" flags="IRWA" description="Should we horizontally clip cell contents, or allow columns to expand horizontally to&amp;#010 show all contents?&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 If we allow columns to expand, the column width is treated as a minimum." name="fixedColumnWidths" valueType="boolean" defaultValue="true" type="attr" definingClass="class:GridRenderer">
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Canvas.show" flags="" description=" Sets this widget's visibility to &quot;inherit&quot;, so that it becomes visible if all it's parents&amp;#010 are visible or it has no parents.&amp;#010 &lt;P&gt;&amp;#010 If the widget has not yet been drawn (and doesn't have a parent or master), this method&amp;#010 calls the draw method as well.&amp;#010&amp;#010" name="show" type="method" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('showAndHide')}</examples>
    <groups>visibility</groups>
</docItem>
<docItem ref="attr:Button.wrap" flags="IRW" description="A boolean indicating whether the button's title should word-wrap, if necessary." name="wrap" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <setter>setWrap</setter>
    <groups>basics</groups>
</docItem>
<docItem ref="classAttr:Time.UTCHoursOffset" flags="IRA" description="Time data is stored in Date type objects. &amp;#010 In order to have times display consistently across browsers all times assumed to be stored&amp;#010 as UTC times.&amp;#010 This property allows you to specify an timezone offset between the stored time &amp;#010 and the displayed time - for example if you have legacy server data with date-time data &amp;#010 in PST modify this property to be the number of hours offset from UTC.&amp;#010 &lt;P&gt;&amp;#010 Alternatively this property can be used to display local times for values stored on&amp;#010 the server in UTC time. Here's some sample code that would achieve this based on the &amp;#010 browser's locale settings:&amp;#010 &lt;pre&gt;&amp;#010    isc.Time.addClassProperties({&amp;#010        UTCHoursOffset:new Date().getTimezoneOffset()/60&amp;#010    });&amp;#010 &lt;/pre&gt;" name="UTCHoursOffset" valueType="number" defaultValue="0" type="classAttr" definingClass="class:Time">
</docItem>
<docItem ref="attr:HiddenItem.colSpan" flags="IRW" description="hidden fields don't take up any columns" name="colSpan" valueType="number" defaultValue="0" type="attr" definingClass="class:HiddenItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="object:TreeNode" description="Every node in the tree is represented by TreeNode object which is an object literal with a&amp;#010 set or properties that configure the node.&amp;#010 &lt;p&gt;&amp;#010 When a Tree is supplied as ${isc.DocUtils.linkForRef('attr:TreeGrid.data')} to ${isc.DocUtils.linkForRef('class:TreeGrid')}, you can also set&amp;#010 properties from ${isc.DocUtils.linkForRef('object:ListGridRecord')} on the TreeNode (e.g. setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridRecord.enabled')}:&lt;code&gt;false&lt;/code&gt; on the node)." name="TreeNode" type="object">
    <treeLocation>Client Reference/Grids/TreeGrid</treeLocation>
    <treeLocation>Client Reference/System/Tree</treeLocation>
    <attrs>attr:TreeNode.enabled</attrs>
    <attrs>attr:TreeNode.canDrag</attrs>
    <attrs>attr:TreeNode.canAcceptDrop</attrs>
    <attrs>attr:TreeNode.isFolder</attrs>
    <attrs>attr:TreeNode.name</attrs>
    <attrs>attr:TreeNode.title</attrs>
    <attrs>attr:TreeNode.id</attrs>
    <attrs>attr:TreeNode.parentId</attrs>
    <attrs>attr:TreeNode.children</attrs>
</docItem>
<docItem ref="attr:Facet.borderAfter" flags="IR" description="CSS line style to apply as a border after this facet, eg &quot;1px dashed blue&quot;" name="borderAfter" valueType="string" defaultValue="null" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="method:ValuesManager.submit" flags="" description=" &lt;code&gt;submit()&lt;/code&gt; is automatically called when a ${isc.DocUtils.linkForRef('class:SubmitItem')} included in the&amp;#010 form is clicked, or, if ${isc.DocUtils.linkForRef('attr:DynamicForm.saveOnEnter','saveOnEnter')} is set, when the&amp;#010 &quot;Enter&quot; key is pressed in a text input.  Submit can also be manually called.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('method:DynamicForm.submitValues','form.submitValues()')} exists, it will be called, then&amp;#010 immediately return.&amp;#010 &lt;P&gt;&amp;#010 Otherwise, default behavior varies based on ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit','form.canSubmit')}: if&amp;#010 &lt;code&gt;canSubmit&lt;/code&gt; is false, ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will be called to&amp;#010 handle saving via SmartClient databinding.  &amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;canSubmit&lt;/code&gt; is true, the form will be submitted like an ordinary HTML&amp;#010 form via ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')}.&amp;#010 &lt;P&gt;&amp;#010 The parameters to &lt;code&gt;submit()&lt;/code&gt; apply only if &lt;code&gt;submit()&lt;/code&gt; will be&amp;#010 calling ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')}.  If you override &lt;code&gt;submit()&lt;/code&gt;, you can safely&amp;#010 ignore the parameters as SmartClient framework code does not pass them.&amp;#010 &amp;#010" name="submit" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:DynamicForm.submitValues">
</seeAlso>
<params description="callback to invoke on completion.                                          [Ignored if this.canSubmit is true]" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued&amp;#010                                          [Ignored if this.canSubmit is true]" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:CubeGrid.chartType" flags="IRW" description="Default type of chart to plot." name="chartType" valueType="ChartType" defaultValue="&quot;Column&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:Canvas.childrenSnapToGrid" flags="IRW" description="If true, causes this canvas's children to snap to its grid when dragging.&amp;#010 This behavior can be overridden on a per-child basis by setting the &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} value on the child." name="childrenSnapToGrid" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Canvas.htmlPosition" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} is specified, this attribute specifies the position where &amp;#010 the canvas should be inserted relative to the &lt;code&gt;htmlElement&lt;/code&gt; in the DOM." name="htmlPosition" valueType="DrawPosition" defaultValue="&quot;afterBegin&quot;" type="attr" definingClass="class:Canvas">
    <setter>setHtmlPosition</setter>
    <groups>htmlElement</groups>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:ListGrid.setEditValues" flags="" description="&amp;#010 This method sets up a set of editValues for some row / cell.  It differs from &amp;#010 'setEditValue()' in that:&lt;br&gt;&amp;#010 &amp;nbsp;- it takes values for multiple fields&lt;br&gt; &amp;#010 &amp;nbsp;- it clears out any previous edit values for the record&lt;br&gt;&amp;#010&amp;#010" name="setEditValues" type="method" definingClass="class:ListGrid">
<params description="Row number for the record being edited" optional="false" name="rowNum" type="number">
</params>
<params description="New values for the row" optional="false" name="values" type="any">
</params>
</docItem>
<docItem ref="attr:DynamicForm.requiredRightTitlePrefix" flags="IRW" description="The string prepended to the title of every required item in this form if&amp;#010 highlightRequiredFields is true and the titleOrientation property is set to &quot;right&quot;." name="requiredRightTitlePrefix" valueType="string" defaultValue="&quot;&lt;B&gt;:&amp;nbsp;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:ValuesManager.getMembers" flags="" description="  Retrieves an array of pointers to all the member forms for this valuesManager.&amp;#010" name="getMembers" type="method" definingClass="class:ValuesManager">
<returns description="array of member forms" type="array"></returns>
    <groups>members</groups>
</docItem>
<docItem ref="method:GridRenderer.getCellRecord" flags="" description=" Return the record that holds the value for this cell.&amp;#010 &lt;P&gt;&amp;#010 Implementing &lt;code&gt;getCellRecord&lt;/code&gt; is optional: the actual HTML placed into each&amp;#010 grid cell comes from &lt;code&gt;getCellValue&lt;/code&gt;, and a valid grid can be created without any&amp;#010 notion of &quot;records&quot; at all.&amp;#010 &lt;p&gt;&amp;#010 If you do implement &lt;code&gt;getCellRecord&lt;/code&gt;, the value you return is passed to you as the&amp;#010 &quot;record&quot; parameter in other methods.&amp;#010&amp;#010" name="getCellRecord" type="method" definingClass="class:GridRenderer">
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="record for this cell" type="object"></returns>
</docItem>
<docItem ref="attr:ComboBoxItem.autoFetchData" flags="IRA" description="If this combo box retrieves its options from a &lt;code&gt;dataSource&lt;/code&gt;, should options&amp;#010 be fetched from the server when the item is first written out, or should this fetch be&amp;#010 delayed until the user opens the pickList." name="autoFetchData" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ComboBoxItem">
<seeAlso ref="attr:PickList.optionDataSource">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.isDisabled" flags="" description=" Is this canvas disabled? Note that the disabled state is inherited - this method will return&amp;#010 true if this widget, or any of its ancestors are marked disabled.&amp;#010" name="isDisabled" type="method" definingClass="class:Canvas">
<returns description="true if the widget or any widget above it in the containment hierarchy                      are disabled." type="boolean"></returns>
    <groups>enable</groups>
</docItem>
<docItem ref="group:safeSkinning" title="Safe Skinning" description="The skinning mechanism is extremely powerful and gives you the ability to change&amp;#010 internal functionality of components.  While this is useful for workarounds, you should&amp;#010 think through any properties you override, considering what will happen with future&amp;#010 versions of SmartClient, where the defaults may change or be expanded.&amp;#010 &lt;P&gt;&amp;#010 The following kinds of overrides are generally very safe:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Change ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} or ${isc.DocUtils.linkForRef('attr:Button.baseStyle','baseStyle')} to&amp;#010 provide a custom CSS style or series of styles&amp;#010 &lt;li&gt; Change a media path such as the ${isc.DocUtils.linkForRef('attr:Img.src','src')} of the &amp;#010 ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}.&amp;#010 &lt;li&gt; Change the size of any part of the UI that has a fixed pixel size, such as&amp;#010 the height and width of the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}, especially when this is done&amp;#010 to match the size of media you have created&amp;#010 &lt;li&gt; Set properties such as ${isc.DocUtils.linkForRef('attr:Button.showRollOver')} that cause a component to&amp;#010 visually react to more or fewer UI states (disabled, over, down, etc)&amp;#010 &lt;/ul&gt;&amp;#010 The following should be very carefully considered:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Adding custom behaviors by passing in event handlers such as &amp;#010 (eg ${isc.DocUtils.linkForRef('method:Canvas.showContextMenu','showContextMenu()')}).  If future versions of the&amp;#010 component add more functionality, you may prevent new features from functioning, cause&amp;#010 them to function only partially, or break.&amp;#010 &lt;P&gt;&amp;#010 If you want to ensure that you do not break new functionality added in future SmartClient&amp;#010 versions, be sure to call ${isc.DocUtils.linkForRef('method:Class.Super','Super()')} for methods you override, and do not&amp;#010 prevent events from bubbling.&amp;#010 &lt;P&gt;&amp;#010 If you want to ensure that &lt;b&gt;only&lt;/b&gt; your custom behavior is used if a future version&amp;#010 of a SmartClient component adds functionality, override all methods involved in the&amp;#010 interaction, even if your methods do nothing.  For example, for a custom drop&amp;#010 interaction, override dropOver, dropMove, dropOut and drop, even if you do nothing on&amp;#010 dropMove().  Then, do not call Super() if there is no superclass behavior required for&amp;#010 the interaction you've implemented.  Also, for any event handlers (such as drop())&amp;#010 return false if you consider your code to have completely handled the event (no&amp;#010 parent component should react).&amp;#010 &lt;/ul&gt;&amp;#010 The following are not recommended:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Providing a global ${isc.DocUtils.linkForRef('attr:Canvas.ID','ID')} to a subcomponent (only works once).&amp;#010 &lt;li&gt; Overriding ${isc.DocUtils.linkForRef('attr:Canvas.backgroundColor')}, ${isc.DocUtils.linkForRef('attr:Canvas.border','border')},&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.margin','margin')}, ${isc.DocUtils.linkForRef('attr:Canvas.padding','padding')}, or in general any single&amp;#010 attribute otherwise controlled by CSS.  Future SmartClient versions may change the base&amp;#010 CSS style, rendering your single-property customization senseless.  Change the entire&amp;#010 CSS style via ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} instead.&amp;#010 &lt;/ul&gt;" name="safeSkinning" type="group">
</docItem>
<docItem ref="attr:ListGrid.validateOnChange" flags="IRW" description="If true, validation will be perfomed on each edited cell when each editor's &amp;#010 &quot;change&quot; handler is fired.&lt;br&gt;" name="validateOnChange" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridField.validateOnChange">
</seeAlso>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:GridRenderer.emptyMessageTableStyle" flags="IRW" description="CSS styleName for the table as a whole if we're showing the empty message" name="emptyMessageTableStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:GridRenderer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:FormItem.wrapTitle" flags="IRW" description="If specified determines whether this items title should wrap.&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:DynamicForm.wrapItemTitles','wrapItemTitles')} at the DynamicForm level." name="wrapTitle" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>title</groups>
</docItem>
<docItem ref="attr:TreeNode.name" flags="IR" description="The &lt;code&gt;name&lt;/code&gt; property of a TreeNode is used for assembling a unique path (see&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getPath')}) to the node.  A node's path is the concatenation of all parent names&amp;#010 with the ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}. The path can then be used to find any node in the tree&amp;#010 using ${isc.DocUtils.linkForRef('method:Tree.find')}.&amp;#010 &lt;p&gt;&amp;#010 If the nameProperty is not set on a given node, ${isc.DocUtils.linkForRef('method:Tree.getName')} and&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getPath')} will auto-generate a unique name for you.&amp;#010 &lt;p&gt;&amp;#010 This property  is also used as the default title for the node (see ${isc.DocUtils.linkForRef('method:Tree.getTitle')})&amp;#010 if ${isc.DocUtils.linkForRef('attr:TreeNode.title')} is not specified.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}." name="name" valueType="String" defaultValue="null, but see below" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:Tree.nameProperty">
</seeAlso>
<seeAlso ref="attr:Tree.pathDelim">
</seeAlso>
<seeAlso ref="method:Tree.getPath">
</seeAlso>
<seeAlso ref="method:Tree.getTitle">
</seeAlso>
</docItem>
<docItem ref="attr:ResultSet.fetchMode" flags="IRA" description="Mode of fetching records from the server. If unset, will default to &lt;code&gt;&quot;local&quot;&lt;/code&gt;&amp;#010 if ${isc.DocUtils.linkForRef('attr:ResultSet.allRows')} is specified, otherwise &lt;code&gt;&quot;paged&quot;&lt;/code&gt;." name="fetchMode" valueType="FetchMode" defaultValue="null" type="attr" definingClass="class:ResultSet">
<seeAlso ref="type:FetchMode">
</seeAlso>
    <groups>fetching</groups>
</docItem>
<docItem ref="type:DSServerType" description="Indicates what the ISC server will do with a DataSource request if you call&amp;#010 dsRequest.execute() in server code.&amp;#010 &lt;P&gt;&amp;#010 If you use a Java-based persistence layer not provided by SmartClient, such as&amp;#010 Hibernate, EJB or your own custom object model, you don't need to set&amp;#010 &lt;code&gt;dataSource.serverType&lt;/code&gt; and should follow the&amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration','integration instructions')}.&amp;#010 &lt;P&gt;&amp;#010 If you want to use the SmartClient SQL engine for persistence, set&amp;#010 &lt;code&gt;dataSource.serverType&lt;/code&gt; to &quot;sql&quot;, and see the instructions on&amp;#010 ${isc.DocUtils.linkForRef('group:sqlDataSource')}." name="DSServerType" type="type">
<values description="Saves via Hibernate, by automatically generating a Hibernate configuration based on a&amp;#010 SmartClient DataSource file (&lt;i&gt;dataSourceID&lt;/i&gt;.ds.xml).  See&amp;#010 ${isc.DocUtils.linkForRef('group:hibernateIntegration')} for details." value="&quot;hibernate&quot;"></values>
<values description="Uses SmartClient's ${isc.DocUtils.linkForRef('group:sqlDataSource','built-in SQL connectors')} to talk to&amp;#010 relational databases.  You can use this if your DataSource connects to a relational&amp;#010 database table." value="&quot;sql&quot;"></values>
<values description="Throws an error if dsRequest.execute() is called.  This is appropriate if you intend an&amp;#010 entirely custom implementation, and you want an error thrown if there is an attempt to&amp;#010 call an operation you have not implemented." value="&quot;generic&quot;"></values>
    <groups>serverDataIntegration</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeLaterThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;dateRange&lt;/code&gt; type validator&amp;#010  returns false because the value passed in is greater than the specified minimum date.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeLaterThan" valueType="string" defaultValue="&quot;Must be later than ${min}&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:CubeGrid.rollupValue" flags="IR" description="facetValueId of the default rollupValue for each facet.  Can be overriden per facet via&amp;#010 facet.rollupValue" name="rollupValue" valueType="string" defaultValue="&quot;sum&quot;" type="attr" definingClass="class:CubeGrid">
    <getter>getRollupValue</getter>
</docItem>
<docItem ref="attr:DateItem.inputFormat" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is &lt;code&gt;true&lt;/code&gt; this property can be used to specify&amp;#010 the input format for date strings. If unset, the input format will be picked up from the&amp;#010 Date class (see ${isc.DocUtils.linkForRef('classMethod:Date.setInputFormat')}).&lt;br&gt;&amp;#010 Important: the input format and the ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')} &amp;#010 for dateItems should always be set such that the format of strings displayed by this&amp;#010 item matches the expected format of strings the user enters." name="inputFormat" valueType="DateInputFormat" defaultValue="null" type="attr" definingClass="class:DateItem">
<seeAlso ref="attr:DateItem.displayFormat">
</seeAlso>
</docItem>
<docItem ref="type:FormItemBaseStyle" description="This string is the base css class name applied to a FormItem (or some part of a form item).&amp;#010 The style name will be modified as the 'state' of the form item changes. Specifically:&lt;ul&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('attr:FormItem.showFocused')} is true, when the form item recieves focus, this&amp;#010     style will be have the suffix &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; appended to it.&lt;/li&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('attr:FormItem.showErrorStyle')} is true, if the form item has errors, this&amp;#010     style will be have the suffix &lt;code&gt;&quot;Error&quot;&lt;/code&gt; appended to it.&lt;/li&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('attr:FormItem.showDisabled')} is true, when the form item is disabled, this&amp;#010     style will be have the suffix &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; appended to it.&lt;/li&gt;&lt;/ul&gt;&amp;#010 So for example if the &lt;code&gt;cellStyle&lt;/code&gt; for some form item is set to &lt;code&gt;&quot;formCell&quot;&lt;/code&gt;&amp;#010 and &lt;code&gt;FormItem.showFocused&lt;/code&gt; is true, when the form item recieves focus, the&amp;#010 form item's cell will have the &lt;code&gt;&quot;formCellDisabled&quot;&lt;/code&gt; style applied to it." name="FormItemBaseStyle" type="type">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Window.flash" flags="A" description="          Makes the window header flash if it's visible; if there's no header, or the header&amp;#010          is hidden, makes the window body flash instead.&amp;#010          &lt;p&gt;&amp;#010			This method is executed when users click outside the bounds of a modal window&amp;#010			so they'll notice that they have to do something with the window.&amp;#010" name="flash" type="method" definingClass="class:Window">
    <groups>modal</groups>
</docItem>
<docItem ref="method:MenuItem.action" flags="" description=" Action to fire when this menu is activated.&amp;#010" name="action" type="method" definingClass="object:MenuItem">
    <groups>menuBasic</groups>
</docItem>
<docItem ref="classMethod:Page.setAppFilesDir" flags="" description=" Specify the directory for miscellaneous app-specific files &lt;b&gt;other than&lt;/b&gt; images, such as&amp;#010 ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL','HTML fragments')}, ${isc.DocUtils.linkForRef('class:ViewLoader','loadable views')}, &amp;#010 XML or JSON flat data files, videos, etc.&amp;#010 &lt;P&gt;&amp;#010 This URL also becomes available via the prefix &quot;[APPFILES]&quot; for ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')}.&amp;#010 &lt;P&gt;&amp;#010 Defaults to the value of ${isc.DocUtils.linkForRef('classMethod:Page.getAppDir')}, that is, the current directory.&amp;#010&amp;#010" name="setAppFilesDir" type="classMethod" definingClass="class:Page">
<params description="New app files URL." optional="true" name="URL" type="string">
</params>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="attr:DateChooser.alternateWeekStyles" flags="IRW" description="Whether alternating weeks should be drawn in alternating styles. If enabled, the cell style&amp;#010 for alternate rows will have ${isc.DocUtils.linkForRef('attr:DateChooser.alternateStyleSuffix')} appended to it." name="alternateWeekStyles" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="group:emptyMessage" name="emptyMessage" type="group">
    <refs>attr:DetailViewer.showEmptyMessage</refs>
    <refs>attr:DetailViewer.emptyMessage</refs>
    <refs>attr:DetailViewer.emptyMessageStyle</refs>
    <refs>attr:DetailViewer.loadingMessage</refs>
    <refs>attr:DetailViewer.loadingMessageStyle</refs>
    <refs>attr:GridRenderer.showEmptyMessage</refs>
    <refs>attr:GridRenderer.emptyMessage</refs>
    <refs>attr:GridRenderer.emptyMessageTableStyle</refs>
    <refs>attr:GridRenderer.emptyMessageStyle</refs>
    <refs>attr:ListGrid.showEmptyMessage</refs>
    <refs>attr:ListGrid.emptyMessage</refs>
    <refs>attr:ListGrid.emptyMessageStyle</refs>
    <refs>attr:ListGrid.loadingMessage</refs>
</docItem>
<docItem ref="attr:Menu.fields" flags="IRWA" description="Array of columns to show for this menu.&lt;br&gt;&amp;#010 Standard menu fields may be included by specifying ${isc.DocUtils.linkForRef('type:MenuFieldID','MenuFieldIDs')}&amp;#010 directly. Additional custom fields may be specifed as ${isc.DocUtils.linkForRef('object:ListGridField')} objects.&lt;br&gt;&amp;#010 If this property is unset, default behavior will show the&amp;#010 ${isc.DocUtils.linkForRef('type:MenuFieldID','standard set of fields')}, with the exception of any that have&amp;#010 been suppressed via ${isc.DocUtils.linkForRef('attr:Menu.showIcons')}, ${isc.DocUtils.linkForRef('attr:Menu.showKeys')} and ${isc.DocUtils.linkForRef('attr:Menu.showSubmenus')}" name="fields" valueType="Array of MenuFieldID | Array of ListGridFields" defaultValue="null" type="attr" definingClass="class:Menu">
    <examples>${isc.DocUtils.linkForExampleId('menuColumns')}</examples>
</docItem>
<docItem ref="attr:PickList.pickListFields" flags="IRA" description="This property allows the developer to specify which field[s] will be displayed in the &amp;#010 drop down list of options.&amp;#010 &lt;P&gt;&amp;#010 Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists&amp;#010 with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.&amp;#010 &lt;P&gt;&amp;#010 If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, &amp;#010 otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}&lt;br&gt;&amp;#010 &amp;#010 If there are multiple fields, column headers will be shown for each field, the&amp;#010 height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute." name="pickListFields" valueType="Array" defaultValue="null" type="attr" definingClass="interface:PickList">
<seeAlso ref="attr:PickList.valueField">
</seeAlso>
<seeAlso ref="attr:PickList.pickListHeaderHeight">
</seeAlso>
</docItem>
<docItem ref="group:formValuesManager" name="formValuesManager" type="group">
    <refs>attr:DynamicForm.valuesManager</refs>
</docItem>
<docItem ref="attr:TreeGrid.folderOpenImage" deprecated="as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}" flags="IRW" description="The filename of the default icon for all open folder nodes in this treeGrid." name="folderOpenImage" valueType="String" defaultValue="null" type="attr" definingClass="class:TreeGrid">
</docItem>
<docItem ref="method:FormItem.getIconHeight" flags="A" description="	Takes an icon definition object, and returns the height for that icon in px.&amp;#010" name="getIconHeight" type="method" definingClass="class:FormItem">
<params description="icon definition object for this item." optional="false" name="icon" type="object">
</params>
<returns description="height of the form item icon in px" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:RPCResponse.data" flags="R" description="The data sent by the server.&amp;#010 &lt;P&gt;&amp;#010 When communicating with the SmartClient server, rpcResponse.data is the data passed to the&amp;#010 server-side method RPCResponse.setData() by your Java code, as translated into JavaScript&amp;#010 objects by the rules described under ${isc.DocUtils.linkForRef('attr:RPCRequest.data')}.&amp;#010 &lt;P&gt;&amp;#010 When not communicating with the SmartClient server (${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')} or&amp;#010 another flag that implies it is set), rpcResponse.data contains the raw HTTP response body.&amp;#010 For an exception, see ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')}." name="data" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCResponse">
</docItem>
<docItem ref="attr:TabSet.closeTabIcon" flags="IRW" description="Default src for the close icon for tabs to display if ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')} is true." name="closeTabIcon" valueType="URL" defaultValue="[SKIN]/TabSet/close.png" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:Canvas.animateRectTime" flags="IRWA" description="Default time for performing an animated setRect.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateRectTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ListGrid.groupIconSize" flags="IRW" description="Default width and height of group icons for this ListGrid." name="groupIconSize" valueType="Number" defaultValue="16" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:RichTextEditor.styleControls" flags="IRA" description="Default text styling control group. Consists of an array of &amp;#010  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,&amp;#010  include &lt;code&gt;&quot;styleControls&quot;&lt;/code&gt; in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array" name="styleControls" valueType="array" defaultValue="[&quot;boldSelection&quot;, &quot;italicSelection&quot;, &quot;underlineSelection&quot;]" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="attr:ListGrid.recordEditProperty" flags="IRWA" description="Property name on a record that should be checked to determine whether the record may be&amp;#010 edited.&amp;#010 &lt;br&gt;&amp;#010 This property is configurable to avoid possible collision with data values in record.&amp;#010 With the default setting of &quot;_canEdit&quot;, a record can be set non-editable by ensuring&amp;#010 record._canEdit == false.&amp;#010 &lt;br&gt;&amp;#010 For controlling editability for the entire grid or for a field, set grid.canEdit or&amp;#010 field.canEdit." name="recordEditProperty" valueType="string" defaultValue="&quot;_canEdit&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canEdit">
</seeAlso>
<seeAlso ref="attr:ListGridField.canEdit">
</seeAlso>
<seeAlso ref="method:ListGrid.canEditCell">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ResultTree.dataSource" flags="IR" description="What ${isc.DocUtils.linkForRef('class:DataSource')} is this resultTree associated with?" name="dataSource" valueType="DataSource or ID" defaultValue="null" type="attr" definingClass="class:ResultTree">
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_SERVER_TIMEOUT" flags="R" description="Indicates a request timed out with no server response.&amp;#010 &lt;p&gt;&amp;#010 This is a client-only error code - never sent by the server (since it's the server&amp;#010 that times out).&amp;#010 &lt;p&gt;&amp;#010 NOTE that if using &lt;code&gt;hiddenFrame&lt;/code&gt; as the transport (not the default), a&amp;#010 malformed response such as a &quot;500 Server Error&quot; or 404 errors will be reported as a&amp;#010 timeout." name="STATUS_SERVER_TIMEOUT" valueType="integer" defaultValue="-100" type="classAttr" definingClass="class:RPCResponse">
    <groups>statusCodes</groups>
</docItem>
<docItem ref="attr:Window.showModalMask" flags="IR" description="If true, displays a translucent mask over the rest of the page when a modal window&amp;#010 is displayed." name="showModalMask" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.modalMask">
</seeAlso>
    <groups>modal</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:tableLayout" description="Manipulating the values stored in the form." name="tableLayout" type="group">
    <refs>attr:DynamicForm.numCols</refs>
    <refs>attr:DynamicForm.fixedColWidths</refs>
    <refs>attr:DynamicForm.colWidths</refs>
    <refs>attr:DynamicForm.minColWidth</refs>
    <refs>attr:DynamicForm.cellPadding</refs>
    <refs>attr:DynamicForm.cellBorder</refs>
    <refs>attr:DynamicForm.sectionVisibilityMode</refs>
</docItem>
<docItem ref="attr:FormItem.titleErrorClassName" deprecated="As of SmartClient Version 5.5, use ${isc.DocUtils.linkForRef('attr:FormItem.titleStyle')} instead" flags="IRW" description="CSS class for a form item's title when a validation error is showing." name="titleErrorClassName" valueType="CSSStyleName" defaultValue="&quot;formTitleError&quot;" type="attr" definingClass="class:FormItem">
    <groups>title</groups>
</docItem>
<docItem ref="attr:Window.contentsType" flags="IR" description="If this window has ${isc.DocUtils.linkForRef('attr:Window.src')} specified, this property can be used to indicate&amp;#010 whether the source is a standalone HTML page or an HTML fragment.&amp;#010 &lt;P&gt;&amp;#010 This is similar to the ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType')} property - be sure to read the&amp;#010 HTMLFlow documentation to understand circumstances where contentsType:&quot;page&quot; is&amp;#010 &lt;b&gt;unsafe and not recommended&lt;/b&gt;." name="contentsType" valueType="string" defaultValue="&quot;page&quot;" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.src">
</seeAlso>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="attr:SelectItem.pickListFields" flags="IRA" description="This property allows the developer to specify which field[s] will be displayed in the &amp;#010 drop down list of options.&amp;#010 &lt;P&gt;&amp;#010 Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists&amp;#010 with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.&amp;#010 &lt;P&gt;&amp;#010 If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, &amp;#010 otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}&lt;br&gt;&amp;#010 &amp;#010 If there are multiple fields, column headers will be shown for each field, the&amp;#010 height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute." name="pickListFields" valueType="Array" defaultValue="null" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:SelectItem.valueField">
</seeAlso>
<seeAlso ref="attr:PickList.pickListHeaderHeight">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('relatedRecords')}</examples>
</docItem>
<docItem ref="attr:ResultSet.useClientFiltering" flags="IRWA" description="Whether to filter data locally when all DataSource records have been loaded (that is,&amp;#010 criteria is blank and cache is complete).&amp;#010 &lt;P&gt;&amp;#010 This may need to be disabled if client-side filtering differs from server-side filtering&amp;#010 in a way that affects functionality or is surprising.&amp;#010 &lt;P&gt;&amp;#010 This setting is distinct from &lt;code&gt;fetchMode:&quot;local&quot;&lt;/code&gt;, which explicitly loads all&amp;#010 available DataSource records up front.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')} for default filtering behavior.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; even with useClientFiltering false, client-side filtering will be used&amp;#010 during cache sync to determine if an updated or added row matches the current criteria.&amp;#010 To avoid relying on client-side filtering in this case, either:&lt;br&gt;&amp;#010 - avoid returning update data when the updated row doesn't match the current filter&lt;br&gt;&amp;#010 - set dropCacheOnUpdate&lt;br&gt;" name="useClientFiltering" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultSet">
</docItem>
<docItem ref="method:DynamicForm.getValue" flags="" description="  Returns the value stored in the form for some field.&amp;#010  Shorthand for dynamicForm.getValues()[fieldName];&amp;#010" name="getValue" type="method" definingClass="class:DynamicForm">
<params description="name of the field for which you're retrieving a value" optional="false" name="fieldName" type="string">
</params>
<returns description="value of the field" type="any"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dateItem')}</examples>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ListGridField.iconWidth" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the &amp;#010 width of the icon to be displayed in the ListGrid header button. &amp;#010 (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconWidth')})&lt;br&gt;&amp;#010 If this field is editable, and ${isc.DocUtils.linkForRef('attr:ListGridField.editorIconWidth')} is unset, this &amp;#010 property will be passed onto the editors for this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}, &amp;#010 which will effect the default size for ${isc.DocUtils.linkForRef('attr:ListGridField.icons','icons')} displayed &amp;#010 in the editor." name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
</docItem>
<docItem ref="method:ValuesManager.editRecord" flags="" description="&amp;#010 Edit an existing record.  Updates this editors values to match the values of the record &amp;#010 passed in.&amp;#010 &lt;P&gt;&amp;#010 Subsequent calls to &lt;code&gt;saveData()&lt;/code&gt; will use an &lt;code&gt;update&lt;/code&gt; rather than&amp;#010 an &lt;code&gt;add&lt;/code&gt; operation.&amp;#010&amp;#010" name="editRecord" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="the record to be edited as a map of field names to their corresponding values" optional="false" name="record" type="object">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="classAttr:Time.AMIndicator" flags="RWA" description="String appended to times to indicate am (when not using 24 hour format)." name="AMIndicator" valueType="string" defaultValue="&quot; am&quot;" type="classAttr" definingClass="class:Time">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:DynamicForm.showTitlesWithErrorMessages" flags="IRW" description="Indicates whether on validation failure, the error message displayed to the&amp;#010          user should be prepended with the title for the item." name="showTitlesWithErrorMessages" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.isFloat" flags="IR" description="Tests whether the value for this field is a valid floating point number." name="isFloat" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="method:DetailViewerField.showIf" flags="" description=" &amp;#010 If specified on a field, this method is evaluated at draw time to determine whether or&amp;#010 not to show this particular field.&amp;#010 &lt;p&gt;&amp;#010 This method can be specified either as a function or a string that will be&amp;#010 auto-converted to a function.&amp;#010&amp;#010" name="showIf" type="method" definingClass="object:DetailViewerField">
<params description="The DetailViewer" optional="false" name="viewer" type="DetailViewer">
</params>
<params optional="false" name="valueList" type="List of DetailViewerRecord">
</params>
<returns description="true to show the field, false to not show it." type="boolean"></returns>
</docItem>
<docItem ref="attr:CubeGrid.chartConfirmThreshold" flags="IR" description="If ${isc.DocUtils.linkForRef('method:CubeGrid.makeChart')} is called with a chart specification that will show more than&amp;#010 &lt;code&gt;chartConfirmThreshold&lt;/code&gt; data elements, the user will be presented with a&amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.confirm','confirmation dialog')}.&amp;#010 &lt;P&gt;&amp;#010 Set to 0 to disable this confirmation." name="chartConfirmThreshold" valueType="Number" defaultValue="2000" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="method:List.addListAt" flags="" description=" Add list of items list to this array at item pos.  All items after array[pos] will slide down to&amp;#010 fit new items.&amp;#010&amp;#010" name="addListAt" type="method" definingClass="interface:List">
<params description="new array of items" optional="false" name="list" type="array">
</params>
<params description="position in this list to put the new items" optional="false" name="pos" type="number">
</params>
<returns description="the list of items that was added" type="array"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="group:i18n" title="Internationalization and Localization (i18n,l10n)" description="&lt;b&gt;&lt;u&gt;Internationalizing SmartClient UI Components&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 Internationalizing a SmartClient application involves creating locale-specific&amp;#010 versions of all strings, images, and possibly colors.  In some cases, component layout may&amp;#010 be affected as well (for example date field order differs between some locales).&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Character Encodings&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 In order to deliver content in different languages to the browser and have it be displayed&amp;#010 correctly, it is important that the browser and server agree on the character encoding being&amp;#010 used to send the page.  &amp;#010 &lt;p&gt;&amp;#010 Generally speaking, you can use whatever character encoding you prefer, so long as&amp;#010 as you're consistent about serving your files to the browser with exactly the same encoding&amp;#010 as was used to save the file to disk.  Keep in mind though that the character encoding you&amp;#010 choose must be supported by all browsers you intend to support.  Isomorphic recommends that,&amp;#010 where possible, you use the UTF-8 encoding.  Regardless of which character encoding you&amp;#010 choose, keep in mind that for the browser to correctly display non-ASCII characters, you&amp;#010 &lt;b&gt;must&lt;/b&gt; explicitly set the character encoding of your page to match the encoding you&amp;#010 used to save the file.  Browsers have built-in heuristics to guess the character encoding,&amp;#010 but they can't be relied upon to work 100% of the time.&amp;#010 &lt;p&gt;&amp;#010 There are two ways to explicitly tell the browser what character&amp;#010 encoding is being used for a given page.  One is to set the &quot;Content-Type&quot; header - e.g. as&amp;#010 follows in a raw HTTP response to set UTF-8 character encoding and a text/html mime type:&amp;#010 &lt;pre&gt;&amp;#010 Content-Type: text/html; charset=UTF-8&amp;#010 &lt;/pre&gt;&amp;#010 If you're using Java on the back-end, you can set this header out of JSP as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot;%&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Or using Java Servlet APIs in a Servlet as follows:&amp;#010 &lt;pre&gt;&amp;#010 response.setContentType(&quot;text/html; charset=UTF-8&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Note that the latter needs to be done before any content is written to the response output&amp;#010 stream.&amp;#010 &lt;p&gt;&amp;#010 The other approach to setting the content encoding is to use an HTML META tag to embed it&amp;#010 in the page itself (note that this applies to HTML documents only).  The META tag must go&amp;#010 inside the &amp;lt;HEAD&amp;gt; HTML element - e.g. as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;HEAD&amp;gt;&amp;#010 &amp;lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=UTF-8&quot;&amp;gt;&amp;#010 &amp;lt;/HEAD&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Isomorphic recommends that you use &lt;b&gt;both&lt;/b&gt; of these approaches for maximum&amp;#010 compatibility.  For example, if you omit the META tag approach, documents saved by the user&amp;#010 using the browser save function may not render correctly when subsequently read from disk&amp;#010 because HTTP headers are not available in that context.  And conversely not providing the&amp;#010 HTTP header can result in application servings applying their own default and incorrect&amp;#010 content encoding.&amp;#010 &lt;p&gt;&amp;#010 If you're using a given character encoding pervasively in your pages, you can also configure&amp;#010 your web server or application server to use that character encoding as the default for all&amp;#010 pages of a given mime type or some other criteria (depending on the capability of your&amp;#010 server) - for example on a per-directory basis.&amp;#010 &lt;p&gt;&amp;#010 For more information on character encodings, character sets, and working with HTML, please&amp;#010 see W3C's tutorial here:&amp;#010 &lt;a href='http://www.w3.org/International/tutorials/tutorial-char-enc/' onclick=&quot;window.open('http://www.w3.org/International/tutorials/tutorial-char-enc/');return false;&quot;&gt;http://www.w3.org/International/tutorials/tutorial-char-enc/&lt;/a&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;String localization&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 All text appearing in SmartClient UI components is customizeable at the component prototype&amp;#010 level and at the instance level.  For example, Button component has a default title of&amp;#010 &quot;Untitled Button&quot; that is changed at the instance level when the button is created (using&amp;#010 JavaScript syntax):&amp;#010 &lt;pre&gt;&amp;#010 Button.create({ title: &quot;Click me!&quot;});&amp;#010 &lt;/pre&gt;&amp;#010 Likewise, the default title can be changed like so:&amp;#010 &lt;pre&gt;&amp;#010 Button.create({});  // this produces a button with the title &quot;Untitled Button&quot;&amp;#010 Button.changeDefaults({ title: &quot;Titled Button&quot;});&amp;#010 Button.create({});  // this now produces a button with the title &quot;Titled Button&quot;&amp;#010 &lt;/pre&gt;&amp;#010 Using these mechanisms, you can set locale-specific text on any SmartClient component.&amp;#010 &lt;p&gt;&amp;#010 We'll use Java-based internationalization examples here because the SDK ships with a Java&amp;#010 backend - but note that Java is not required to internationalize your SmartClient&amp;#010 application - see the &quot;Resources&quot; section a the end of this overview for links to&amp;#010 internationalization resources of other popular back-end technologies.  All those&amp;#010 techonologies provide mechanisms for fetching locale-specific strings that are compatible&amp;#010 with SmartClient because ultimately internationalizing a SmartClient application is not much&amp;#010 different from internationalizing an HTML page.&amp;#010 &lt;p&gt;&amp;#010 So, to give a Java-based example, let's say we want to create a button on a page in a manner&amp;#010 that permits future localization.  Let's say we currently have the following code in our JSP&amp;#010 page: &amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;&amp;#010 Button.create({ title: &quot;Click me!&quot; });&amp;#010 &amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 One standards-based approach is to use the i18n component of the JSTL Core package (Java&amp;#010 Server Pages Standard Tag Library) to replace that static &quot;Click me!&quot; text with a localized&amp;#010 reference.  This can be done as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;/WEB-INF/fmt.tld&quot; %&amp;gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;&amp;#010 Button.create({ title: &amp;lt;fmt:message key=&quot;buttonTitle&quot;&amp;gt; });&amp;#010 &amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Assuming you've set the current Locale and provided a resource bundle with the relevant&amp;#010 translated text, the above would create a button with a title that comes from the locale-specific&amp;#010 bundle you provided.  See Sun's i18n tutorial:&amp;#010 &lt;a href='http://java.sun.com/docs/books/tutorial/i18n/' onclick=&quot;window.open('http://java.sun.com/docs/books/tutorial/i18n/');return false;&quot;&gt;http://java.sun.com/docs/books/tutorial/i18n/&lt;/a&gt; and the JSTL home page:&amp;#010 &lt;a href='http://java.sun.com/products/jsp/jstl/' onclick=&quot;window.open('http://java.sun.com/products/jsp/jstl/');return false;&quot;&gt;http://java.sun.com/products/jsp/jstl/&lt;/a&gt; for more information on how to set up&amp;#010 Resource Bundles.&amp;#010 &lt;p&gt;&amp;#010 If you're developing in XML, the mechanism is much the same.  Let's say we have the following&amp;#010 XML code in our JSP:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:XML&amp;gt;&amp;#010 &amp;lt;Button title=&quot;Click me!&quot;/&amp;gt;&amp;#010 &amp;lt;/isomorphic:XML&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 We can localize this button by using JSTL as before by writing it like this:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;/WEB-INF/fmt.tld&quot; %&amp;gt;&amp;#010 &amp;lt;isomorphic:XML&amp;gt;&amp;#010 &amp;lt;Button&amp;gt;&amp;#010   &amp;lt;title&amp;gt;&amp;lt;fmt:message key=&quot;buttonTitle&quot;&amp;gt;&amp;lt;/title&amp;gt;&amp;#010 &amp;lt;/Button&amp;gt;&amp;#010 &amp;lt;/isomorphic:XML&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Note that the XML must be well-formed so we can't just replace &quot;Click me!&quot; with the&amp;#010 &lt;code&gt;fmt&lt;/code&gt; tag because we would end up with embedded double quotes.&amp;#010 &lt;p&gt;&amp;#010 NOTE: even though you are dynamically adding localized data to your presentation using&amp;#010 JSTL/JSPs, you can still allow the browser to cache the entire presentation layer (described&amp;#010 in detail ${isc.DocUtils.linkForRef('group:smartArchitecture','here')}.  Your bootstrap JSP (the application start&amp;#010 page) can use a &amp;lt;SCRIPT SRC=&amp;gt; tag to load the localized presentation code as&amp;#010 cacheable JavaScript, for example, &amp;lt;SCRIPT SRC=/mainUI.jsp?locale=[localeName]&amp;gt;.  This&amp;#010 works with both XML and JS component descriptors since both are ultimately delivered to the&amp;#010 browser as JavaScript.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Framework message localization&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 In addition to titles and other strings displayed on SmartClient widget instances, &amp;#010 SmarClient displays a number of standard prompts and error messages in various cases, all&amp;#010 of which are fully customizeable for localization purposes.&lt;br&gt;&amp;#010 A complete list of these standard messages is visible ${isc.DocUtils.linkForRef('group:i18nMessages','here')}.&lt;br&gt;&amp;#010 Customizing these standard messages is very similar to customizing any other strings, such&amp;#010 as the &lt;code&gt;Button.title&lt;/code&gt; attribute described above.  To take an example, the &amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.timeoutErrorMessage')} is displayed to the user in a warning dialog&amp;#010 when a SmartClient operation fails to complete. By default this is set to &amp;#010 &lt;code&gt;&quot;Operation Timed Out&quot;&lt;/code&gt; but can be modified using the ${isc.DocUtils.linkForRef('classMethod:Class.addClassProperties')} &amp;#010 method, as follows:&amp;#010 &lt;pre&gt;&amp;#010 isc.RPCManager.addClassProperties({timeoutErrorMessage:&quot;Custom Timeout Message&quot;});&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;DataSource localization&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 DataSources can be created in ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','several ways')}.  DataSources&amp;#010 created directly in JavaScript can be internationalized via the techniques described above.&amp;#010 DataSources which are declared in XML (.ds.xml files) and are read by the ISC server, which&amp;#010 are normally loaded into a .jsp page via the &lt;code&gt;&amp;lt;isomorphic:loadDS&amp;gt;&lt;/code&gt; JSP tag,&amp;#010 can instead be loaded and interpreted as .jsp files via the technique described below.  This&amp;#010 allows JSTL and other JSP tags to be used to internationalize the titles and validation&amp;#010 error messages in XML DataSources.&amp;#010 &lt;P&gt;&amp;#010 For example, given the following DataSource located in /shared/ds/supplyItem.ds.xml:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;DataSource&amp;gt;&amp;#010     &amp;lt;fields&amp;gt;&amp;#010         &amp;lt;field name=&quot;itemName&quot;&amp;gt;&amp;#010             &amp;lt;title&amp;gt;Item Name&amp;lt;/title&amp;gt;&amp;#010             &amp;lt;validators&amp;gt;&amp;#010                 &amp;lt;Validator type=&quot;lengthRange&quot; max=&quot;40&quot;&amp;gt;&amp;#010                     &amp;lt;errorMessage&amp;gt;Must be 40 characters or less.&amp;lt;/errorMessage&amp;gt;&amp;#010                 &amp;lt;/Validator&amp;gt;&amp;#010             &amp;lt;/validators&amp;gt;&amp;#010         &amp;lt;/field&amp;gt;&amp;#010     &amp;lt;/fields&amp;gt;&amp;#010 &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 To localize the title and validator error string of the &lt;code&gt;itemName&lt;/code&gt; field &amp;#010 using the same JSTL strategy we've been using, first add the following to your web.xml to&amp;#010 allow DataSource files to be interpreted as JSPs:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;jsp-config&amp;gt;&amp;#010     &amp;lt;jsp-property-group&amp;gt;&amp;#010       &amp;lt;url-pattern&amp;gt;/shared/ds/*&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/jsp-property-group&amp;gt;     &amp;#010 &amp;lt;/jsp-config&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Next change the DataSource definition as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;!--&amp;#010 &amp;lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;/WEB-INF/fmt.tld&quot; %&amp;gt;&amp;#010 --&amp;gt;&amp;#010 &amp;lt;DataSource xmlns:fmt=&quot;urn:jsptld:/WEB-INF/fmt.tld&quot;&amp;gt;&amp;#010     &amp;lt;fields&amp;gt;&amp;#010         &amp;lt;field name=&quot;itemName&quot;&amp;gt;&amp;#010             &amp;lt;title&amp;gt;&amp;lt;fmt:message key=&quot;itemTitle&quot;&amp;gt;&amp;lt;/title&amp;gt;&amp;#010             &amp;lt;validators&amp;gt;&amp;#010                 &amp;lt;Validator type=&quot;lengthRange&quot; max=&quot;40&quot;&amp;gt;&amp;#010                     &amp;lt;errorMessage&amp;gt;&amp;lt;fmt:message key=&quot;itemLengthRangeValidator&quot;/&amp;gt;&amp;lt;/errorMessage&amp;gt;&amp;#010                 &amp;lt;/Validator&amp;gt;&amp;#010             &amp;lt;/validators&amp;gt;&amp;#010         &amp;lt;/field&amp;gt;&amp;#010     &amp;lt;/fields&amp;gt;&amp;#010 &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Note that the XML comment around the taglib declaration is intentional.  It is there to make&amp;#010 sure the JSP parser sees the tag library declaration, while the file remains valid XML.&amp;#010 If you need to use multiple JSP tag libraries to achieve your goals, simply add additional&amp;#010 taglib declarations inside the XML comment and be sure to register the tag namespace in the&amp;#010 DataSource tag via &lt;code&gt;xmlns:tagName&lt;/code&gt; as done above for the &lt;code&gt;fmt&lt;/code&gt;&amp;#010 namespace. instead of using the &lt;code&gt;&amp;lt;isomorphic:loadDS&amp;gt;&lt;/code&gt; JSP tag to load this&amp;#010 DataSource, you would load it as follows in your JSP:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;&amp;#010 &amp;lt;isomorphic:XML&amp;gt;&amp;#010 &amp;lt;jsp:include page=&quot;/shared/ds/supplyItem.ds.xml&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;&amp;#010 &amp;lt;/isomorphic:XML&amp;gt;&amp;#010 &amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt; &amp;#010 This makes it possible to internationalize field titles as well as validation error messages&amp;#010 for built-in validators.  To internationalize custom server-side validation errors, simply&amp;#010 provide internationalized strings when calling &lt;code&gt;DSResponse.setErrorReport()&lt;/code&gt; to&amp;#010 report validation errors (see the JavaDoc for that documentation).&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Support for Right-to-Left (RTL) languages&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;P&gt;&amp;#010 SmartClient includes beta quality support for RTL langauges, with known issues in certain&amp;#010 skins and components.  To enable, simple set &lt;code&gt;dir=&quot;rtl&quot;&lt;/code&gt; on the HTML element:&amp;#010 &lt;pre&gt;&amp;#010    &amp;lt;HTML dir=&quot;rtl&quot;&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 ListGrid columns, horizontal layouts, scrolling directions, etc will reverse order&amp;#010 automatically.&amp;#010 &lt;P&gt;&amp;#010 If you need production-quality RTL support for your application, visit the&lt;a&amp;#010 href=&quot;http://forums.smartclient.com&quot;&gt;SmartClient forums&lt;/a&gt; for details of &amp;#010 known limitations.&amp;#010 &lt;P&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Image, CSS localization&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Most SmartClient components use a mixture of text, CSS and images to render.  If you wish to&amp;#010 provide locale-specific images or use locale-specific CSS, you can create localized copies&amp;#010 of a SmartClient skin named after the locale and modify images as you see fit.  A skin is&amp;#010 specified at load time using either the &lt;code&gt;skin&lt;/code&gt; attribute of the&amp;#010 &lt;code&gt;&amp;lt;isomorphic:loadISC&amp;gt;&lt;/code&gt; tag or by loading the skin&amp;#010 directly using a script tag like so: &amp;lt;SCRIPT SRC=/isomorphic/skins/[skin]/load_skin.js&amp;gt;.&amp;#010 If you're using the &lt;code&gt;loadISC&lt;/code&gt; tag, you can specify a locale-specific skin like so:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadISC skin=&quot;[localeName]&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Or you can use a script tag like so:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT SRC=/isomorphic/skins/[localeName]/load_skin.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Where the &lt;code&gt;[localeName]&lt;/code&gt; is the name of the current locale - you'll have this in the&amp;#010 current page context as you'll need it to use the JSTL &amp;lt;fmt:setLocale&amp;gt; tag.&amp;#010&amp;#010 Resources:&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Java&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Sun's i18n tutorial: &lt;a href='http://java.sun.com/docs/books/tutorial/i18n/' onclick=&quot;window.open('http://java.sun.com/docs/books/tutorial/i18n/');return false;&quot;&gt;http://java.sun.com/docs/books/tutorial/i18n/&lt;/a&gt;&amp;#010 &lt;li&gt;JSTL home page: &lt;a href='http://java.sun.com/products/jsp/jstl/' onclick=&quot;window.open('http://java.sun.com/products/jsp/jstl/');return false;&quot;&gt;http://java.sun.com/products/jsp/jstl/&lt;/a&gt;&amp;#010 &lt;li&gt;Apache JSTL &quot;Getting Started&quot;: &amp;#010     &lt;a href='http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html' onclick=&quot;window.open('http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html');return false;&quot;&gt;http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html&lt;/a&gt;&amp;#010 &lt;li&gt;Apache taglibs: &lt;a href='http://jakarta.apache.org/taglibs/' onclick=&quot;window.open('http://jakarta.apache.org/taglibs/');return false;&quot;&gt;http://jakarta.apache.org/taglibs/&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010&amp;#010 &lt;b&gt;&lt;u&gt;.NET&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;MSDN Developer Resource: &quot;Developing World-Ready Applications&quot;:&amp;#010 &lt;a href='http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp' onclick=&quot;window.open('http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp');return false;&quot;&gt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 &lt;b&gt;&lt;u&gt;PHP&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;PHP Gettext manual: &lt;a href='http://us2.php.net/gettext' onclick=&quot;window.open('http://us2.php.net/gettext');return false;&quot;&gt;http://us2.php.net/gettext&lt;/a&gt;&amp;#010 &lt;li&gt;O'Reilly Gettext tutorial: &lt;a href='http://www.onlamp.com/pub/a/php/2002/06/13/php.html' onclick=&quot;window.open('http://www.onlamp.com/pub/a/php/2002/06/13/php.html');return false;&quot;&gt;http://www.onlamp.com/pub/a/php/2002/06/13/php.html&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010&amp;#010 &lt;b&gt;&lt;u&gt;Perl&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Perl, Unicode and i18n FAQ: &lt;a href='http://rf.net/~james/perli18n.html' onclick=&quot;window.open('http://rf.net/~james/perli18n.html');return false;&quot;&gt;http://rf.net/~james/perli18n.html&lt;/a&gt;&amp;#010 &lt;/ul&gt;" name="i18n" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:Class.addPropertiesOnCreate" flags="A" description="Set this instance property to &lt;code&gt;false&lt;/code&gt; on your class to prevent&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.create')} from requiring Object arguments and auto-applying all&amp;#010 properties from those arguments to the newly created class.&amp;#010 &lt;P&gt;&amp;#010&amp;#010 &lt;p&gt;&amp;#010 Regardless of the setting for addPropertiesOnCreate property, all arguments passed to&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.create')} are still passed on to ${isc.DocUtils.linkForRef('method:Class.init')}.&amp;#010 &lt;P&gt;&amp;#010 Note that it is not valid to set &lt;code&gt;addPropertiesOnCreate&lt;/code&gt; to false for any&amp;#010 subclass of ${isc.DocUtils.linkForRef('class:Canvas')} (Canvas relies on this property).&amp;#010 &lt;p&gt;&amp;#010 Note: You must set this property on the class instance as part of the class definition&amp;#010 via ${isc.DocUtils.linkForRef('method:Class.addProperties')} so that it takes effect before ${isc.DocUtils.linkForRef('classMethod:Class.create')} is&amp;#010 called." name="addPropertiesOnCreate" valueType="Boolean" defaultValue="undefined" type="attr" definingClass="class:Class">
</docItem>
<docItem ref="classMethod:Page.setEvent" flags="" description=" Register to be called whenever a given type of event occurs, at the page level.&amp;#010 &lt;p&gt;&amp;#010 This includes events that also occur on widgets (like &quot;click&quot;) and events that only occur at&amp;#010 the page level (&quot;resize&quot; and &quot;load&quot;).&amp;#010 &lt;p&gt;&amp;#010 For events that also occur on widgets, page level event registrations will fire BEFORE the&amp;#010 event handlers on Canvases.   If your action returns &lt;code&gt;false&lt;/code&gt;, this will prevent&amp;#010 the event from getting to the intended Canvas.&amp;#010 &lt;p&gt;&amp;#010 Capturing events on widgets can be done by setting one of the event methods available on Canvas&amp;#010 (and hence available to all widget classes).  See ${isc.DocUtils.linkForRef('group:widgetEvents')}.&amp;#010&amp;#010" name="setEvent" type="classMethod" definingClass="class:Page">
<seeAlso ref="class:EventHandler">
</seeAlso>
<seeAlso ref="classMethod:EventHandler.getX">
</seeAlso>
<seeAlso ref="classMethod:EventHandler.getY">
</seeAlso>
<params description="event type to register for (&quot;mouseDown&quot;, &quot;load&quot;, etc)" optional="false" name="eventType" type="pageEvent">
</params>
<params description="string to be eval'd when event fires						(function)			function to be executed when event fires&amp;#010                      (object)            an object to call on which a method named &quot;page&quot; +&amp;#010                                          eventType will be called" optional="false" name="action" type="string">
</params>
<params description="Flag to set automatic removal of the event after												it fires one or more times" optional="true" name="fireStyle" type="FireStyle">
</params>
<params description="optional - if an object was passed in as the second                                          parameter, this is a name of a method to call on that&amp;#010                                          object." optional="true" name="functionName" type="string">
</params>
<returns description="ID number of this event, may be used to remove the event later										via a call to &lt;code&gt;Page.clearEvent()&lt;/code&gt;" type="number"></returns>
    <groups>EventRegistry</groups>
</docItem>
<docItem ref="method:Canvas.hideClickMask" flags="" description=" Hides the click mask associated with this canvas.&amp;#010" name="hideClickMask" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.showClickMask">
</seeAlso>
<params description="optional ID of specific clickMask to hide. If not passed,                       defaults to hiding the click mask associated with this widget only." optional="true" name="ID" type="string">
</params>
    <groups>clickMask</groups>
</docItem>
<docItem ref="method:Log.logIsInfoEnabled" flags="" description=" Check whether a message logged at &quot;info&quot; priority would be visible in the log.&amp;#010 &lt;P&gt;&amp;#010 As with logDebug, category is defaulted to the current className.  Use this method to avoid&amp;#010 putting together expensive log messages if they will never appear in the log.&amp;#010&amp;#010" name="logIsInfoEnabled" type="method" definingClass="class:Log">
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:Splitbar.hResizeCursor" flags="IR" description="Cursor to display if this Splitbar is to be used for horizontal resize of widgets." name="hResizeCursor" valueType="Cursor" defaultValue="&quot;col-resize&quot;" type="attr" definingClass="class:Splitbar">
    <groups>cursor</groups>
</docItem>
<docItem ref="attr:Button.iconSize" flags="IR" description="Size in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;iconWidth&lt;/code&gt; and &lt;code&gt;iconHeight&lt;/code&gt; properties can be used to&amp;#010 configure width and height separately." name="iconSize" valueType="integer" defaultValue="16" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:RPCResponse.httpResponseCode" flags="R" description="This attribute (avialable when using the the &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport) contains&amp;#010 the HTTP response code sent by the server.&amp;#010 &lt;p&gt;&amp;#010 Note that this is different from ${isc.DocUtils.linkForRef('attr:RPCResponse.status')} - that attribute is used to&amp;#010 indicate a status code for the RPC itself whereas httpResponseCode is the raw HTTP response&amp;#010 code for the HTTP request that contained the RPCRequest.&amp;#010 &lt;p&gt;&amp;#010 This feature relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.&amp;#010 &lt;p&gt;&amp;#010 If you're using this attribute, you'll typically want to avoid the default error&amp;#010 handling response of RPCManager.  To do so, set&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} to &lt;code&gt;true&lt;/code&gt;." name="httpResponseCode" valueType="integer" defaultValue="null" type="attr" definingClass="class:RPCResponse">
</docItem>
<docItem ref="attr:EdgedCanvas.customEdges" flags="IR" description="Array of side names (&quot;T&quot;, &quot;B&quot;, &quot;L&quot;, &quot;R&quot;) specifying which sides of the decorated&amp;#010 component should show edges.  For example: &lt;pre&gt;&amp;#010      customEdges : [&quot;T&quot;, &quot;B&quot;]&amp;#010 &lt;/pre&gt;&amp;#010 .. would show edges only on the top and bottom of a component.&amp;#010 &lt;P&gt;&amp;#010 The default of &lt;code&gt;null&lt;/code&gt; means edges will be shown on all sides." name="customEdges" valueType="Array of String" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:FormItem.getValueFieldName" flags="" description=" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.&amp;#010 If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.&amp;#010" name="getValueFieldName" type="method" definingClass="class:FormItem">
<returns description="fieldName to use a &quot;value field&quot; in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}" type="string"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:SectionStack.canTabToHeaders" flags="IRA" description="If true, the headers for the sections (if shown) will be included in the page's tab&amp;#010 order for accessibility." name="canTabToHeaders" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="attr:ListGrid.editPendingBaseStyle" flags="RA" description="A base name for the CSS class applied to cells containing pending (unsaved) edits&lt;br&gt;&amp;#010  As with the default 'baseStyle' property, this style will have &quot;Dark&quot;, &quot;Over&quot;, &quot;Selected&quot;, &amp;#010  or &quot;Disabled&quot; appended to it according to the state of the cell.&amp;#010  If this property is null, cells with pending edits will pick up custom css text to&amp;#010  be applied on top of the normal base style from &lt;code&gt;this.editPendingCSSText&lt;/code&gt;" name="editPendingBaseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.baseStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:SectionStack.sectionHeaderClass" flags="IRA" description="Name of the Canvas subclass to use as a header that labels the section and allows&amp;#010 showing and hiding.  The default class be skinned, or trivial subclasses created to&amp;#010 allow different appearances for headers in different SectionStacks.&amp;#010 &lt;P&gt;&amp;#010 Very advanced developers can use the following information to create custom header&amp;#010 classes.&amp;#010 &lt;P&gt;&amp;#010 The SectionStack will instantiate this class, giving the following properties on init:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;layout&lt;/code&gt;: the SectionStack&amp;#010 &lt;li&gt;&lt;code&gt;expanded&lt;/code&gt;: true or false&amp;#010 &lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;: true or false&amp;#010 &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: section title&amp;#010 &lt;/ul&gt;&amp;#010 From then on, when the sectionHeader is clicked on, it should call&amp;#010 ${isc.DocUtils.linkForRef('method:SectionStack.sectionHeaderClick')}.&amp;#010 &lt;br&gt;&amp;#010 Whenever the section is hidden or shown, sectionHeader.setExpanded(true|false) will be&amp;#010 called if implemented." name="sectionHeaderClass" valueType="Classname" defaultValue="&quot;SectionHeader&quot;" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="group:data" name="data" type="group">
    <refs>method:ListGrid.setData</refs>
    <refs>method:ListGrid.getCellValue</refs>
    <refs>method:ListGrid.getDragData</refs>
    <refs>method:Menu.setData</refs>
    <refs>method:Menu.setItems</refs>
    <refs>attr:ListGrid.data</refs>
    <refs>attr:ListGridField.name</refs>
    <refs>attr:TreeGrid.data</refs>
    <refs>attr:Menu.data</refs>
    <refs>attr:Menu.items</refs>
</docItem>
<docItem ref="method:ValuesManager.removeMember" flags="" description="  Remove a member form from this valuesManager, so its values are no longer managed&amp;#010  by this instance.&amp;#010  This does not clear the values associated with the form from the valuesManager - they&amp;#010  will still be available via &lt;code&gt;valuesManager.getValues()&lt;/code&gt;, but will not be&amp;#010  updated as the form is manipulated.&amp;#010" name="removeMember" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:ValuesManager.removeMembers">
</seeAlso>
<params description="form (or ID of form) to remove from this valuesManager" optional="false" name="member" type="DynamicForm | string">
</params>
    <groups>members</groups>
</docItem>
<docItem ref="attr:FormItem.valueIconSize" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, this property may be used to specify both&amp;#010 the width and height of the icon written out.&amp;#010 Note that ${isc.DocUtils.linkForRef('attr:FormItem.valueIconWidth')} and ${isc.DocUtils.linkForRef('attr:FormItem.valueIconHeight')} take&amp;#010 presidence over this value, if specified." name="valueIconSize" valueType="number" defaultValue="16" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueIconWidth">
</seeAlso>
<seeAlso ref="attr:FormItem.valueIconHeight">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:Layout.placeHolderDefaults" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:Layout.showDragPlaceHolder','this.showDragPlaceHolder')} is true, this &amp;#010 defaults object determines the default appearance of the placeholder displayed&amp;#010 when the user drags a widget out of this layout.&lt;br&gt;&amp;#010 Default value for this property sets the placeholder ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} to&amp;#010 &lt;code&gt;&quot;layoutPlaceHolder&quot;&lt;/code&gt;&lt;br&gt;&amp;#010 To modify this object, use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}" name="placeHolderDefaults" valueType="canvas properties" defaultValue="{...}" type="attr" definingClass="class:Layout">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ListGrid.body" flags="R" description="GridRenderer used to render the dataset." name="body" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="type:VisibilityMode" description="Settings for whether multiple sections can be in the expanded state simultaneously." name="VisibilityMode" type="type">
<values description="Only one section can be expanded at a time." value="&quot;mutex&quot;"></values>
<values description="Multiple sections can be expanded at the same time, and will share space." value="&quot;multiple&quot;"></values>
</docItem>
<docItem ref="attr:Menu.iconWidth" flags="IRW" description="The default width applied to custom icons in this menu. This is used whenever&amp;#010          item.iconWidth is not specified." name="iconWidth" valueType="number" defaultValue="16" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="method:Canvas.contains" flags="A" description="      Returns true if element is a descendant of this widget (i.e., exists below this widget in&amp;#010      the containment hierarchy); and false otherwise.&amp;#010" name="contains" type="method" definingClass="class:Canvas">
<params description="the canvas to be tested" optional="false" name="canvas" type="canvas">
</params>
<params description="If passed this method will return true if the the canvas                                parameter is a pointer to this widget." optional="true" name="testSelf" type="boolean">
</params>
<returns description="true if specified element is a descendant of this canvas; false otherwise" type="boolean"></returns>
    <groups>containment</groups>
</docItem>
<docItem ref="attr:ListGrid.confirmCancelEditing" flags="IRW" description="If this is an editable listGrid, when the user attempts to cancel an edit, should we&amp;#010 display a confirmation prompt before discarding the edited values for the record?" name="confirmCancelEditing" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="group:xmlTag" title="&amp;lt;isomorphic:XML&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 This tag convers SmartClient UI components declaratively specified in the body of the tag to&amp;#010 JavaScript for execution in the browser.&amp;#010 &lt;p&gt;&amp;#010 The XML-&gt;JS translation works just like with ${isc.DocUtils.linkForRef('group:loadUITag')}, except the XML is read&amp;#010 from the body of the tag instead of an external file.&amp;#010 &lt;p&gt;&amp;#010 Note that this JSP tag must be surrounded by &amp;lt;SCRIPT&amp;gt; tags in the JSP because it&amp;#010 generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be&amp;#010 used in a JSP that is included from your main page in order to create separate&amp;#010 cacheability.  For example:&lt;pre&gt;&amp;#010     &amp;lt;SCRIPT SRC=&quot;myUIDefinitions.jsp&quot;&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 Example of using this tag :&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:XML&amp;gt;&amp;#010 &amp;lt;Canvas&amp;nbsp;backgroundColor=&quot;black&quot;/&amp;gt;&amp;#010 &amp;lt;/isomorphic:XML&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Would output the following JavaScript code:&amp;#010 &lt;pre&gt;&amp;#010 Canvas.create({&amp;#010   backgroundColor: &quot;black&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;" name="xmlTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="group:loadUITag">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ListGrid.generateClickOnEnter" flags="IRWA" description="If true, when the user navigates to a cell using arrow keys and hits Enter, &amp;#010 the cell will respond to a click event." name="generateClickOnEnter" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="class:Applet" description="SmartClient abstraction for Applets.  This class provides Java&amp;lt;-&amp;gt;SmartClient&amp;#010  interoperability.  When embedding Applets into SmartClient-based pages, please use this&amp;#010  wrapper class to instantiate the Applet.  Doing so will provide the following benefits:&amp;#010  &lt;p&gt;&amp;#010  &lt;ul&gt;&amp;#010  &lt;li&gt;Drag and drop interactions on the page can target the Applet (can drop on applet).&amp;#010  &lt;li&gt;When a drag interaction transits an Applet, SmartClient will ensure that the dragTarget&amp;#010  appears above the Applet (prevents burn-through).&amp;#010  &lt;li&gt;Allows you to easily embed the Applet into SmartClient containers such as Windows and&amp;#010  Layouts, providing automatic masking to ensure the correct z-index order.  But see notes&amp;#010  below for limitations.&amp;#010  &lt;/ul&gt;&amp;#010  &lt;p&gt;&amp;#010  &lt;u&gt;Known issues&lt;/u&gt;&lt;br&gt;&lt;br&gt;&amp;#010  &lt;ul&gt;&amp;#010  &lt;li&gt;Resizing Applets can cause Firefox to lock up and require the user to terminate the&amp;#010  process manually.  The cause is currently unknown, but likely causes include applets&amp;#010  attempting to control their own size, or to attempt to re-render on resize.  More recent&amp;#010  JVMs (1.6+) appear to make this problem less frequent.  This may also simply be caused by&amp;#010  applet code being unable to deal with certain combination sizes and crashing.&amp;#010  &lt;li&gt;In Firefox, when using a JVM older than 1.6, Applets cannot be resized smaller than&amp;#010  their originally drawn size.  Doing so causes them to stick at the originally drawn size,&amp;#010  and to overflow the boundary of any SmartClient component they are embedded in.&amp;#010  &lt;li&gt;In Firefox, Applets do not handle the z-index ordering correctly with respect to&amp;#010  IFRAMEs or other Applets.  Therefore, in Firefox you cannot layer Applets on top of each&amp;#010  other or on top of SmartClient components containing IFRAMEs and have them render in the&amp;#010  correct order.&amp;#010  &lt;/ul&gt;&amp;#010&amp;#010  For a general overview of applets and an applet tutorial see: &amp;#010  &lt;a href='http://java.sun.com/docs/books/tutorial/applet/' onclick=&quot;window.open('http://java.sun.com/docs/books/tutorial/applet/');return false;&quot;&gt;http://java.sun.com/docs/books/tutorial/applet/&lt;/a&gt;" name="Applet" type="class">
    <methods>method:Applet.getPluginHandle</methods>
    <treeLocation>Optional Modules/Client Bridges</treeLocation>
    <attrs>attr:Applet.name</attrs>
    <attrs>attr:Applet.code</attrs>
    <attrs>attr:Applet.src</attrs>
    <attrs>attr:Applet.codeBase</attrs>
    <attrs>attr:Applet.archive</attrs>
    <attrs>attr:Applet.alt</attrs>
    <attrs>attr:Applet.altHTML</attrs>
    <attrs>attr:Applet.params</attrs>
    <attrs>attr:Applet.mayScript</attrs>
    <attrs>attr:Applet.scriptable</attrs>
    <attrs>attr:Applet.classID</attrs>
    <attrs>attr:Applet.objectCodeBase</attrs>
    <attrs>attr:Applet.extraHTML</attrs>
    <attrs>attr:Applet.useTag</attrs>
    <requiresModules>PluginBridges</requiresModules>
</docItem>
<docItem ref="attr:Button.iconWidth" flags="IR" description="Width in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Window.contentLayout" flags="IRWA" description="The layout policy that should be used for widgets within the Window body.&amp;#010 &lt;P&gt;&amp;#010 Valid values are &quot;vertical&quot;, &quot;horizontal&quot;, &quot;none&quot;.  If the body is a Layout, this&amp;#010 controls ${isc.DocUtils.linkForRef('attr:Layout.orientation')}.  See ${isc.DocUtils.linkForRef('attr:Window.bodyConstructor')} for details." name="contentLayout" valueType="string" defaultValue="&quot;vertical&quot;" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.transferDragData" flags="A" description="&amp;#010 During a drag-and-drop interaction, this method is called to transfer a set of records that&amp;#010 were dropped onto some other component.  This method is called once it has already been&amp;#010 determined that the other component can accept the drop.  What is returned and whether or&amp;#010 not this ListGrid's data is modified is determined by the value of&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.dragDataAction')}.&amp;#010 &lt;P&gt;&amp;#010 With a &lt;code&gt;dragDragAction&lt;/code&gt; of &quot;move&quot;, a databound ListGrid will issue &quot;remove&quot;&amp;#010 dsRequests against it's DataSource to actually remove the data, via&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.removeData')}.&amp;#010&amp;#010" name="transferDragData" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getDragData">
</seeAlso>
<seeAlso ref="method:ListGrid.willAcceptDrop">
</seeAlso>
<returns description="Array of objects that were dragged out of this ListGrid." type="Array"></returns>
</docItem>
<docItem ref="attr:Facet.align" flags="IR" description="Default alignment for facet label title, and cells for this facet.&amp;#010 Can be overridden at the facetValue level, or by setting titleAlign or cellAlign&amp;#010 on the facet." name="align" valueType="alignEnum" defaultValue="null" type="attr" definingClass="class:Facet">
<seeAlso ref="attr:Facet.titleAlign">
</seeAlso>
<seeAlso ref="attr:Facet.cellAlign">
</seeAlso>
</docItem>
<docItem ref="type:Side" description="Side of a component." name="Side" type="type">
<values description="Left side" value="Canvas.LEFT"></values>
<values description="Right side" value="Canvas.RIGHT"></values>
<values description="Top side" value="Canvas.TOP"></values>
<values description="Bottom side" value="Canvas.BOTTOM"></values>
</docItem>
<docItem ref="group:jsfIntegration" title="Integration with JSF" description="SmartClient can be used within JSF applications to add AJAX richness and interactivity.&amp;#010 &lt;P&gt;&amp;#010 Because ${isc.DocUtils.linkForRef('group:iscJSF','JSF is a pre-AJAX architecture')}, the recommended approach in adding&amp;#010 SmartClient to JSF applications is to create pages that use SmartClient components exclusively,&amp;#010 so that older, server-based JSF components do not introduce full-page refreshes.&amp;#010 &lt;P&gt;&amp;#010 JSF pages that render components on the server access data via JSF Expression Language.&amp;#010 SmartClient-based JSF pages can similarly load initial data by using JSTL, as shown in the&amp;#010 &lt;a href='/examples/server_integration/#jstlList' onclick=&quot;window.open('/examples/server_integration/#jstlList');return false;&quot;&gt;this example&lt;/a&gt;, where a ListGrid is&amp;#010 populated by JSTL access to Java Beans stored in the JSP &lt;code&gt;pageContext&lt;/code&gt;.  &amp;#010 &lt;P&gt;&amp;#010 Once a SmartClient JSF page has loaded, SmartClient components will request data via background&amp;#010 HTTP requests that load only data, not a complete page.  The &amp;#010 ${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation')} system can be used to declaratively map SmartClient's&amp;#010 background data requests directly to Java Methods. The SmartClient server automatically&amp;#010 translates inbound request data into Java Objects that are passed to the method you specify,&amp;#010 and the Java method return value is automatically translated into data for SmartClient&amp;#010 components.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Incorporating server-side JSF components into a SmartClient JSF page&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 An ${isc.DocUtils.linkForRef('class:HTMLFlow')} or ${isc.DocUtils.linkForRef('class:HTMLPane')} component can be used to incorporate server-generated&amp;#010 content within a SmartClient-based page.  With ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set to&amp;#010 &quot;page&quot;, the HTMLPane/Flow will act like a standalone page-within-a-page (via a&amp;#010 SmartClient-managed HTML IFRAME element), allowing interactive server-side JSF components to&amp;#010 participate normally, with limitations as discussed under the documentation for &amp;#010 ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')}." name="jsfIntegration" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="class:SimpleType" description="An atomic type such as a string or number, that is generally stored, displayed and&amp;#010 manipulated as a single value.&amp;#010 &lt;P&gt;&amp;#010 SimpleTypes can be created at any time, and subsequently referred to as a &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field type')} in ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} and&amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.  This allows you to define&amp;#010 ${isc.DocUtils.linkForRef('attr:SimpleType.validators','validation')}, ${isc.DocUtils.linkForRef('method:SimpleType.normalDisplayFormatter','formatting')}&amp;#010 and ${isc.DocUtils.linkForRef('attr:SimpleType.editorType','editing')} behaviors for a type to be reused across all&amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.&amp;#010 &lt;P&gt;&amp;#010 Note that the term &quot;simpleType&quot; is used in the same sense as in&amp;#010 &lt;a href='XML Schema' onclick=&quot;window.open('XML Schema');return false;&quot;&gt;http://www.w3.org/TR/xmlschema-0/&lt;/a&gt;, and&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')} will create new SimpleType definitions.&amp;#010 &lt;P&gt;&amp;#010 An ${isc.DocUtils.linkForExampleId('customSimpleType', 'example')} is here." name="SimpleType" type="class">
    <methods>method:SimpleType.shortDisplayFormatter</methods>
    <methods>method:SimpleType.normalDisplayFormatter</methods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:SimpleType.name</attrs>
    <attrs>attr:SimpleType.inheritsFrom</attrs>
    <attrs>attr:SimpleType.validators</attrs>
    <attrs>attr:SimpleType.valueMap</attrs>
    <attrs>attr:SimpleType.editorType</attrs>
    <examples>${isc.DocUtils.linkForExampleId('customSimpleType')}</examples>
</docItem>
<docItem ref="attr:Window.showHeader" flags="IRWA" description="If true, show a header for this Window, including title, closebox, etc." name="showHeader" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:ListGrid.headerButtonProperties" flags="IRA" description="Properties to apply to all header buttons.&amp;#010 Overrides defaults applied via  ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonDefaults')}." name="headerButtonProperties" valueType="Button Properties" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="class:ToolStripSeparator" description="Simple subclass of Img with appearance appropriate for a ToolStrip separator" name="ToolStripSeparator" type="class">
    <treeLocation>Client Reference/Layout/ToolStrip</treeLocation>
    <attrs>attr:ToolStripSeparator.skinImgDir</attrs>
    <attrs>attr:ToolStripSeparator.vSrc</attrs>
    <attrs>attr:ToolStripSeparator.hSrc</attrs>
</docItem>
<docItem ref="attr:CellRecord.enabled" flags="IR" description="Affects the visual style and interactivity of the record.  If set to &lt;code&gt;false&lt;/code&gt;&amp;#010 the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the&amp;#010 mouse moves over it, nor will it respond to mouse clicks." name="enabled" valueType="boolean" defaultValue="null" type="attr" definingClass="object:CellRecord">
    <examples>${isc.DocUtils.linkForExampleId('disabledRows')}</examples>
</docItem>
<docItem ref="method:StretchImgButton.removeFromRadioGroup" flags="" description=" Remove this widget from the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 No-op's if this widget is not a member of the groupID passed in.&amp;#010 If no groupID is passed in, defaults to removing from whatever radioGroup this widget&amp;#010 is a member of.&amp;#010" name="removeFromRadioGroup" type="method" definingClass="class:StretchImgButton">
<params description="- optional radio group ID (to ensure the widget is removed                                        from the appropriate group." optional="true" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:ListGrid.clearEditValue" flags="A" description="&amp;#010  Clear a field value being tracked as an unsaved user edit.&lt;P&gt;&amp;#010  The saved record value will be displayed in the the appropriate cell instead.&amp;#010  Will also discard any validation errors for the specified field / row.&amp;#010&amp;#010" name="clearEditValue" type="method" definingClass="class:ListGrid">
<params description="Row number, primary keys object for the record,                                              or editValues object" optional="false" name="editValuesID" type="number | object">
</params>
<params description="Column number, or Name of field for which                                       the value is to be cleared" optional="false" name="colNum" type="number | string">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="classAttr:Dialog.ASK_FOR_VALUE_TITLE" flags="IRW" description="Default title for the dialog displayed by ${isc.DocUtils.linkForRef('classMethod:isc.askForValue')}.&amp;#010 A custom title can alternatively be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="ASK_FOR_VALUE_TITLE" valueType="HTML" defaultValue="&quot;Please enter a value&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:groupNode.groupValue" flags="R" description="The value from which groups are computed for a field, &amp;#010 which results from ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue')}" name="groupValue" valueType="any" defaultValue="see below" type="attr" definingClass="object:groupNode">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="method:ValuesManager.fetchData" flags="" description=" Retrieve data that matches the provided criteria, and edit the first record returned&amp;#010 &amp;#010" name="fetchData" type="method" definingClass="class:ValuesManager">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:Selection.deselectList" flags="" description="			Deselect an array of items (subset of the entire list)&amp;#010" name="deselectList" type="method" definingClass="class:Selection">
<params description="listarray of objects to select" optional="true" name="" type="object">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.recordDrop" flags="" description=" Process a drop of one or more records on a ListGrid record.&amp;#010 &lt;P&gt;&amp;#010 This method can be overriden to provide custom drop behaviors, and is a more appropriate&amp;#010 override point than the lower level ${isc.DocUtils.linkForRef('method:Canvas.drop')} handler.&amp;#010 &lt;P&gt;&amp;#010 If this is a self-drop, records are simply reordered.&amp;#010 &lt;P&gt;&amp;#010 For a drop from another widget, ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} is called, which&amp;#010 depending on the ${isc.DocUtils.linkForRef('attr:ListGrid.dragDataAction','dragDataAction')} specified on the source&amp;#010 widget, may either remove the source records from the original list&amp;#010 (&lt;code&gt;dragDataAction:&quot;move&quot;&lt;/code&gt;) or just provide a copy to this list&amp;#010 (&lt;code&gt;dragDataAction:&quot;copy&quot;&lt;/code&gt;).&amp;#010 &lt;P&gt;&amp;#010 If this grid is databound, the new records will be added to the dataset by calling&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.addData')}.  Note that reordering records has no effect on a databound&amp;#010 grid.&amp;#010 &lt;P&gt;&amp;#010 The newly dropped data is then selected automatically.&amp;#010 &lt;P&gt;&amp;#010 NOTE: for a drop beyond the last visible record of a ListGrid, &lt;code&gt;targetRecord&lt;/code&gt;&amp;#010 will be null and the &lt;code&gt;index&lt;/code&gt; will be one higher than the last record.  This&amp;#010 includes a drop into an empty ListGrid, where &lt;code&gt;index&lt;/code&gt; will be 0.&amp;#010 &amp;#010" name="recordDrop" type="method" definingClass="class:ListGrid">
<params description="records being dropped" optional="false" name="dropRecords" type="List of ListGridRecord">
</params>
<params description="record being dropped on.  May be null" optional="false" name="targetRecord" type="ListGridRecord">
</params>
<params description="index of record being dropped on" optional="false" name="index" type="int">
</params>
<params description="widget where dragging began" optional="false" name="sourceWidget" type="Canvas">
</params>
</docItem>
<docItem ref="attr:ToolStripResizer.hSrc" flags="IRW" description="Image for horizontal resizer for a vertical Toolstrip" name="hSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]hresizer.png&quot;" type="attr" definingClass="class:ToolStripResizer">
</docItem>
<docItem ref="attr:SectionStack.scrollSectionIntoView" flags="IR" description="If an expanded or shown section expands past the current viewport and this property is&amp;#010 true, then the viewport will auto-scroll to fit as much of the section content into the&amp;#010 viewport without scrolling the top of the section out of the viewport." name="scrollSectionIntoView" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="attr:SliderItem.vertical" flags="IR" description="Indicates whether this is a vertical or horizontal slider." name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SliderItem">
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="attr:CubeGrid.canMinimizeFacets" flags="IRW" description="If true, when multiple facets are shown on a side, all facetValues in the second level&amp;#010 of headers or higher will show controls to &quot;minimize&quot; the values of the next facet.&amp;#010 Minimizing means showing only one, or very few, of the next facet's values.&amp;#010 &lt;P&gt;&amp;#010 Set ${isc.DocUtils.linkForRef('attr:FacetValue.isMinimizeValue')} to indicate which facetValues should be&amp;#010 shown when a facet is minimized." name="canMinimizeFacets" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>facetExpansion</groups>
</docItem>
<docItem ref="attr:Canvas.appImgDir" flags="IRWA" description="Default directory for app-specific images, relative to the Page-wide&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Page.getAppImgDir','appImgDir')}." name="appImgDir" valueType="URL" defaultValue="&quot;&quot;" type="attr" definingClass="class:Canvas">
    <groups>images</groups>
</docItem>
<docItem ref="attr:Canvas.snapVDirection" flags="IRW" description="The vertical snap direction.&amp;#010 Set this value to Canvas.BEFORE to snap to the nearest gridpoint above;&amp;#010 set it to Canvas.AFTER to snap to the nearest gridpoint below; and set&amp;#010 it to Canvas.NEAREST to snap to the nearest gridpoint in either direction." name="snapVDirection" valueType="string" defaultValue="Canvas.AFTER" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.snapResizeToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
<seeAlso ref="attr:Canvas.childrenSnapResizeToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ImgButton.showFocus" deprecated="as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  Note that by default the&amp;#010 &lt;code&gt;over&lt;/code&gt; state is used to indicate focus." name="showFocus" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="group:display" name="display" type="group">
    <refs>method:ListGrid.getFieldName</refs>
    <refs>method:ListGrid.getFieldNum</refs>
</docItem>
<docItem ref="method:Date.duplicate" flags="A" description="      Copy the value of this date into a new Date() object for independant manipulation&amp;#010" name="duplicate" type="method" definingClass="class:Date">
</docItem>
<docItem ref="attr:SectionStackSection.expanded" flags="I" description="Sections default to the collapsed state unless ${isc.DocUtils.linkForRef('attr:SectionStackSection.showHeader')} is&amp;#010 set to &lt;code&gt;false&lt;/code&gt; in which case they default to the expanded state.  This&amp;#010 attribute allows you to explicitly control the expand/collapse state of the&amp;#010 section by overriding the above default behavior." name="expanded" valueType="boolean" defaultValue="false" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem ref="group:gridLayout" name="gridLayout" type="group">
    <refs>method:CubeGrid.setFacetTitleAlign</refs>
    <refs>method:CubeGrid.setFacetValueTitleAlign</refs>
    <refs>attr:CubeGrid.canResizeColumns</refs>
    <refs>attr:CubeGrid.canMinimizeColumns</refs>
    <refs>attr:CubeGrid.autoSizeHeaders</refs>
    <refs>attr:CubeGrid.facetTitleAlign</refs>
    <refs>attr:CubeGrid.facetValueAlign</refs>
    <refs>attr:CubeGrid.cellAlign</refs>
    <refs>attr:CubeGrid.wrapFacetTitles</refs>
    <refs>attr:CubeGrid.wrapFacetValueTitles</refs>
    <refs>attr:CubeGrid.padTitles</refs>
    <refs>attr:CubeGrid.defaultFacetWidth</refs>
    <refs>attr:CubeGrid.bodyMinWidth</refs>
    <refs>attr:CubeGrid.bodyMinHeight</refs>
</docItem>
<docItem ref="attr:FacetValue.borderBefore" flags="IR" description="CSS line style to apply as a border before this facetValue" name="borderBefore" valueType="String" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="classMethod:XMLTools.selectNumber" flags="A" description=" Retrieve a numeric value from an XML element or document based on an XPath expression.&amp;#010 &lt;P&gt;&amp;#010 If more than one node matches, only the first node's value will be returned.&amp;#010 &lt;P&gt;&amp;#010 Namespacing works as described under ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this API cannot be supported on the Safari web browser for versions prior to&amp;#010 3.0.3.&amp;#010&amp;#010" name="selectNumber" type="classMethod" definingClass="class:XMLTools">
<params description="Native XMLElement or document to select from" optional="false" name="element" type="XMLElement or XMLDocument">
</params>
<params description="XPath expression to use to select nodes" optional="false" name="expression" type="XPath">
</params>
<params description="namespace mapping used by the expression" optional="true" name="namespaces" type="prefix -&gt; URI mapping">
</params>
<returns description="result of the XPath, in Number form" type="Number"></returns>
    <groups>xmlTransform</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.styleName" description="The CSS class applied to this widget as a whole." name="styleName" valueType="CSSStyleName" defaultValue="&quot;normal&quot;" definingClass="class:Canvas">
    <setter>setStyleName</setter>
    <examples>${isc.DocUtils.linkForExampleId('styles')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGridField.headerBaseStyle" flags="IRW" description="Custom base style to apply to this field's header button instead of &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.headerBaseStyle')}.&lt;br&gt;&amp;#010 Note that depending on the header button constructor, you may have to override&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.headerTitleStyle')} as well." name="headerBaseStyle" valueType="cssClass" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Button.setIconOrientation" flags="" description=" Changes the orientation of the icon relative to the text of the button.&amp;#010&amp;#010" name="setIconOrientation" type="method" definingClass="class:Button">
<params description="The new orientation of the icon relative to the text of the button." optional="false" name="orientation" type="&quot;left&quot; or &quot;right&quot;">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Tree.getTitle" flags="" description="&amp;#010 Return the title of a node -- the name as it should be presented to the user.  This method&amp;#010 works as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; If a ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')} is set on the node, the value of that property is&amp;#010 returned.&amp;#010 &lt;li&gt; Otherwise, if the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} is set on the node, that value is&amp;#010 returned, minus any trailing ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}.&amp;#010 &lt;li&gt; Finally, if none of the above yielded a title, the value of&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.defaultNodeTitle')} is returned.&amp;#010 &lt;/ul&gt;&amp;#010 You can override this method to return the title of your choice for a given node.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 To override the title for an autoconstructed tree (for example, in a databound TreeGrid),&amp;#010 override ${isc.DocUtils.linkForRef('method:TreeGrid.getNodeTitle')} instead.&amp;#010&amp;#010" name="getTitle" type="method" definingClass="class:Tree">
<seeAlso ref="method:TreeGrid.getNodeTitle">
</seeAlso>
<params description="node for which the title is being requested" optional="false" name="node" type="TreeNode">
</params>
<returns description="title to display" type="string"></returns>
</docItem>
<docItem ref="attr:ListGrid.frozenBaseStyle" flags="IRW" description="If this listGrid contains any frozen fields, this property can be used to apply a custom&amp;#010 baseStyle to all cells in those frozen fields. If unset, the standard base style will be&amp;#010 used for both frozen and unfrozen cells." name="frozenBaseStyle" valueType="string" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.baseStyle">
</seeAlso>
<seeAlso ref="attr:ListGridField.frozen">
</seeAlso>
    <groups>appearance</groups>
    <groups>frozenFields</groups>
</docItem>
<docItem ref="classMethod:isc.askForValue" flags="" description=" Show a modal dialog with a text entry box, asking the user to enter a value.&amp;#010 &lt;P&gt;&amp;#010 As with other convenience methods that show Dialogs, such as ${isc.DocUtils.linkForRef('classMethod:isc.warn')},&amp;#010 the dialog is shown and the function immediately returns.  When the user responds, the&amp;#010 provided callback is called.&amp;#010 &lt;P&gt;&amp;#010 If the user clicks OK, the value typed in is passed to the callback (including the empty&amp;#010 string (&quot;&quot;) if nothing was entered.  If the user clicks cancel, the value passed to the&amp;#010 callback is null.&amp;#010 &lt;P&gt;&amp;#010 A default value for the text field can be passed via &lt;code&gt;properties.defaultValue&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Keyboard focus is automatically placed in the text entry field, and hitting the enter key is&amp;#010 the equivalent of pressing OK.&amp;#010&amp;#010" name="askForValue" type="classMethod" definingClass="class:isc">
<seeAlso ref="method:Dialog.okClick">
</seeAlso>
<seeAlso ref="method:Dialog.cancelClick">
</seeAlso>
<seeAlso ref="classAttr:Dialog.ASK_FOR_VALUE_TITLE">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="Callback to fire when the                                       user clicks a button to dismiss the dialog.&amp;#010                                      This has the single parameter 'value', indicating the &amp;#010                                      user entry, or null if cancel was pressed or the window&amp;#010                                      closed" optional="true" name="callback" type="Callback">
</params>
<params description="additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for&amp;#010                                      the Dialog, set properties.buttons to an array of buttons&amp;#010										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }" optional="true" name="properties" type="object">
</params>
    <groups>Prompting</groups>
</docItem>
<docItem ref="class:StretchImgButton" description="A StretchImg that behaves like a button, going through up/down/over state transitions in response&amp;#010 to user events.  Supports an optional title, and will auto-size to accomodate the title text if&amp;#010 &lt;code&gt;overflow&lt;/code&gt; is set to &quot;visible&quot;.&amp;#010 &lt;P&gt;&amp;#010 Examples of use include fancy buttons, poplist headers, and tabs." name="StretchImgButton" type="class">
    <methods>method:StretchImgButton.getTitle</methods>
    <methods>method:StretchImgButton.setTitle</methods>
    <methods>method:StretchImgButton.setIconOrientation</methods>
    <methods>method:StretchImgButton.setIcon</methods>
    <methods>method:StretchImgButton.setAutoFit</methods>
    <methods>method:StretchImgButton.setBaseStyle</methods>
    <methods>method:StretchImgButton.setTitleStyle</methods>
    <methods>method:StretchImgButton.select</methods>
    <methods>method:StretchImgButton.deselect</methods>
    <methods>method:StretchImgButton.isSelected</methods>
    <methods>method:StretchImgButton.setSelected</methods>
    <methods>method:StretchImgButton.addToRadioGroup</methods>
    <methods>method:StretchImgButton.removeFromRadioGroup</methods>
    <methods>method:StretchImgButton.setActionType</methods>
    <methods>method:StretchImgButton.getActionType</methods>
    <methods>method:StretchImgButton.setState</methods>
    <methods>method:StretchImgButton.setDisabled</methods>
    <methods>method:StretchImgButton.getState</methods>
    <methods>method:StretchImgButton.action</methods>
    <methods>method:StretchImgButton.iconClick</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:StretchImgButton.title</attrs>
    <attrs>attr:StretchImgButton.wrap</attrs>
    <attrs>attr:StretchImgButton.icon</attrs>
    <attrs>attr:StretchImgButton.iconSize</attrs>
    <attrs>attr:StretchImgButton.iconWidth</attrs>
    <attrs>attr:StretchImgButton.iconHeight</attrs>
    <attrs>attr:StretchImgButton.iconOrientation</attrs>
    <attrs>attr:StretchImgButton.iconAlign</attrs>
    <attrs>attr:StretchImgButton.iconSpacing</attrs>
    <attrs>attr:StretchImgButton.showDisabledIcon</attrs>
    <attrs>attr:StretchImgButton.showRollOverIcon</attrs>
    <attrs>attr:StretchImgButton.showFocusedIcon</attrs>
    <attrs>attr:StretchImgButton.showDownIcon</attrs>
    <attrs>attr:StretchImgButton.showSelectedIcon</attrs>
    <attrs>attr:StretchImgButton.autoFit</attrs>
    <attrs>attr:StretchImgButton.baseStyle</attrs>
    <attrs>attr:StretchImgButton.titleStyle</attrs>
    <attrs>attr:StretchImgButton.selected</attrs>
    <attrs>attr:StretchImgButton.radioGroup</attrs>
    <attrs>attr:StretchImgButton.actionType</attrs>
    <attrs>attr:StretchImgButton.state</attrs>
    <attrs>attr:StretchImgButton.showDisabled</attrs>
    <attrs>attr:StretchImgButton.showDown</attrs>
    <attrs>attr:StretchImgButton.showFocus</attrs>
    <attrs>attr:StretchImgButton.showFocused</attrs>
    <attrs>attr:StretchImgButton.showRollOver</attrs>
    <attrs>attr:StretchImgButton.align</attrs>
    <attrs>attr:StretchImgButton.valign</attrs>
    <attrs>attr:StretchImgButton.showTitle</attrs>
    <attrs>attr:StretchImgButton.labelHPad</attrs>
    <attrs>attr:StretchImgButton.labelVPad</attrs>
    <attrs>attr:StretchImgButton.labelLengthPad</attrs>
    <attrs>attr:StretchImgButton.labelBreadthPad</attrs>
    <attrs>attr:StretchImgButton.hiliteAccessKey</attrs>
    <attrs>attr:StretchImgButton.src</attrs>
    <attrs>attr:StretchImgButton.vertical</attrs>
    <attrs>attr:StretchImgButton.capSize</attrs>
</docItem>
<docItem ref="attr:ListGridField.imageHeight" flags="IRW" description="Height of image shown for fieldTypes image and imageFile in this field.&amp;#010 &lt;P&gt;&amp;#010 If set to a String, assumed to be a property on each record that specifies the image&amp;#010 height.  For example, if &lt;code&gt;field.imageHeight&lt;/code&gt; is &quot;logoHeight&quot;,&amp;#010 &lt;code&gt;record.logoHeight&lt;/code&gt; will control the heigt of the image." name="imageHeight" valueType="number" defaultValue="16" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.imageSize">
</seeAlso>
<seeAlso ref="attr:ListGridField.imageSize">
</seeAlso>
<seeAlso ref="attr:ListGridField.imageWidth">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:DateItem.textAlign" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is &lt;code&gt;true&lt;/code&gt; this property governs the alignment&amp;#010 of text within the text field." name="textAlign" valueType="Alignment" defaultValue="Canvas.RIGHT" type="attr" definingClass="class:DateItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.quickDrawAheadRatio" flags="IRW" description="Alternative to ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio')}, to be used when the user&amp;#010 is rapidly changing the grids viewport (for example drag scrolling through the grid).&amp;#010 If unspecified ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio')} will be used in all cases" name="quickDrawAheadRatio" valueType="float" defaultValue="1.3" type="attr" definingClass="class:ListGrid">
    <groups>performance</groups>
</docItem>
<docItem ref="attr:FormItem.valueMap" flags="IRW" description="In a form, valueMaps are used for FormItem types that allow the user to pick from a&amp;#010 limited set of values, such as a SelectItem.  The valueMap can be either an Array of&amp;#010 legal values or an Object where each property maps a stored value to a user-displayable&amp;#010 value.&amp;#010 &lt;P&gt;&amp;#010 To set the initial selection for a form item with a valueMap, use&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')}.&amp;#010 &lt;P&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}." name="valueMap" valueType="Array or Object" defaultValue="null" type="attr" definingClass="class:FormItem">
    <setter>setValueMap</setter>
    <groups>valueMap</groups>
</docItem>
<docItem ref="classMethod:Page.getAppImgDir" flags="" description=" Return the directory for app-specific images.&amp;#010&amp;#010" name="getAppImgDir" type="classMethod" definingClass="class:Page">
<returns description="URL for page-specific images." type="string"></returns>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="method:Button.setVAlign" flags="" description=" Sets the vertical alignment of this buttons content.&amp;#010" name="setVAlign" type="method" definingClass="class:Button">
    <groups>positioning</groups>
</docItem>
<docItem ref="method:SectionStack.sectionHeaderClick" flags="A" description=" Method intended to be called by the sectionHeader when it is clicked on.&amp;#010&amp;#010" name="sectionHeaderClick" type="method" definingClass="class:SectionStack">
<params description="the sectionHeader clicked on" optional="false" name="sectionHeader" type="Canvas">
</params>
</docItem>
<docItem ref="method:EBay.setProductionToken" flags="" description="&amp;#010 Sets the token to be used by queries to the eBay production environment.&amp;#010 &amp;#010" name="setProductionToken" type="method" definingClass="class:EBay">
<params description="Your production authToken, provided to you by eBay." optional="false" name="authToken" type="string">
</params>
</docItem>
<docItem ref="class:History" description="This class provides synthetic history support.  Using this class, you can create history&amp;#010 entries at any point and be called back when the user next navigates to any of these history&amp;#010 entires via any of the browser mechanisms that enable navigation: back/forward buttons,&amp;#010 history dropdown and bookmarks.&amp;#010 &lt;p&gt;&amp;#010 The history entries created using this mechanism work just like history entries created&amp;#010 natively by the browser, except you get a callback whenever a transition occurs.  This&amp;#010 implementation correctly handles &quot;deep&quot; history - i.e. it correctly maintains forward and&amp;#010 back history when the user navigates forward or back away from the page that uses this&amp;#010 module.&amp;#010 &lt;p&gt;&amp;#010 This module is usable independent of the rest of SmartClient - you can use it on pages that&amp;#010 don't load any other modules.&amp;#010 &lt;p&gt;&amp;#010 This module currently does not work in Safari, but works in all other browsers supported by&amp;#010 SmartClient.  Also, currently, if you set document.domain on the top-level page, the History&amp;#010 mechanism will behave sub-obtimally in IE - three clicks one the forward/back buttons will&amp;#010 be required to transition to the next history entry." name="History" type="class">
    <classMethods>classMethod:History.registerCallback</classMethods>
    <classMethods>classMethod:History.getCurrentHistoryId</classMethods>
    <classMethods>classMethod:History.getHistoryData</classMethods>
    <classMethods>classMethod:History.setHistoryTitle</classMethods>
    <classMethods>classMethod:History.addHistoryEntry</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="method:List.contains" flags="" description=" Return if this list contains the specified object.&amp;#010 &lt;P&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010&amp;#010" name="contains" type="method" definingClass="interface:List">
<params description="item to look for" optional="false" name="obj" type="any">
</params>
<params description="optional position in the list to look after" optional="true" name="pos" type="number">
</params>
<returns description="true == item was found, false == not found" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:StretchImgButton.autoFit" flags="IRW" description="If true, ignore the specified size of this widget and always size just large&amp;#010 enough to accomodate the title.  If &lt;code&gt;setWidth()&lt;/code&gt; is explicitly called on an&amp;#010 autoFit:true button, autoFit will be reset to &lt;code&gt;false&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for StretchImgButton instances, autoFit will occur horizontally only, as &amp;#010 unpredictable vertical sizing is likely to distort the media. If you do want vertical &amp;#010 auto-fit, this can be achieved by simply setting a small height, and having &amp;#010 overflow:&quot;visible&quot;" name="autoFit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <setter>setAutoFit</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:ListGridField.summaryTitle" flags="IRWA" description="Optional long summary title for this field, provided in addition to &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.title')}. This gives the developer an option to use a very short,&amp;#010 or empty title for the ListGrid column (where space may be a factor), but have a longer &amp;#010 value available to be used elsewhere.&lt;br&gt;&amp;#010 By default this value will be used for the title of the context-menu item&amp;#010 for showing/hiding the listGrid field when the user right-clicks on the ListGrid header." name="summaryTitle" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <getter>getSummaryTitle</getter>
<seeAlso ref="attr:ListGridField.title">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:CubeGrid.addFacet" flags="" description="&amp;#010 Add a facet to the view, into the row or column facets (intoRows true or false), at index&amp;#010 &quot;index&quot;.  Handles the facet already being in the view (does a pivot).&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 The facet being added should currently have a fixed facet value (unless it's already part of the&amp;#010 view), which will be removed from cubeGrid.fixedFacetValues.&amp;#010&amp;#010" name="addFacet" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.removeFacet">
</seeAlso>
<seeAlso ref="attr:CubeGrid.fixedFacetValues">
</seeAlso>
<params description="facetId to add.  Definition must have been provided at init time." optional="false" name="facetId" type="id">
</params>
<params description="whether to add facet as a row facet" optional="true" name="intoRows" defaultValue="true" type="boolean"></params>
<params description="index to add the facet at.  0 = outermost (default innermost)" optional="true" name="index" type="integer">
</params>
</docItem>
<docItem ref="attr:Canvas.opacity" flags="IRWA" description="Renders the widget to be partly transparent. A widget's opacity property may&amp;#010      be set to any number between 0 (transparent) to 100 (opaque).&amp;#010		Null means don't specify opacity directly, 100 is fully opaque.&amp;#010		Note that heavy use of opacity may slow down your browser.&amp;#010		See canvas.setOpacity() for details." name="opacity" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setOpacity</setter>
    <groups>cues</groups>
</docItem>
<docItem ref="attr:MenuItem.submenu" flags="IR" description="A reference to another menu, to display as a submenu when the mouse cursor hovers over&amp;#010 this menu item." name="submenu" valueType="Menu" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('subMenus')}</examples>
    <groups>menuBasic</groups>
</docItem>
<docItem ref="object:ClassFactory" description="Sets up a real inheritance structure for Javascript objects.&amp;#010	We separate out class objects from prototypes, so each gets its own inheritance chain.  &amp;#010	This allows us to set up superclass calls, maintain class vs. instance variables and more!&amp;#010&amp;#010	The ClassFactory is a singleton object that holds the miscellaneous pieces of our inheritance&amp;#010	mechanism.&amp;#010&amp;#010	Your main interaction with the ClassFactory is to create new classes:&amp;#010		&lt;code&gt;ClassFactory.defineClass(&quot;MyClass&quot;, &quot;mySuperClass&quot;);&lt;/code&gt;" name="ClassFactory" type="object">
    <classMethods>classMethod:ClassFactory.defineClass</classMethods>
    <classMethods>classMethod:ClassFactory.getClass</classMethods>
    <classMethods>classMethod:ClassFactory.newInstance</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
<seeAlso ref="class:Class">
</seeAlso>
</docItem>
<docItem ref="method:Tree.getName" flags="" description="&amp;#010 Get the 'name' of a node.  This is node[${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}].  If that value has not&amp;#010 been set on the node, a unique value (within this parent) will be auto-generated and&amp;#010 returned.&amp;#010	&amp;#010" name="getName" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="name of the node" type="string"></returns>
</docItem>
<docItem ref="attr:HeaderItem.endRow" flags="IRW" description="these items are in a row by themselves by default" name="endRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Layout.getMemberSizes" flags="" description=" &amp;#010" name="getMemberSizes" type="method" definingClass="class:Layout">
<returns description="array of member sizes" type="Array"></returns>
</docItem>
<docItem ref="attr:HTMLFlow.dynamicContents" flags="IRWA" description="Dynamic contents allows the contents string to be treated as a simple, but powerful&amp;#010 template.  When this attribute is set to true, expressions of the form \${arbitrary JS&amp;#010 here} are replaced by the result of the evaluation of the JS code inside the curly&amp;#010 brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation&amp;#010 of the expressions in the contents string you can call markForRedraw() on the canvas.&amp;#010 &lt;p&gt;&amp;#010 You can use this feature to build some simple custom components. For example, let's say&amp;#010 you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do&amp;#010 this by observing the valueChanged() method on the slider and calling setContents() on&amp;#010 your canvas with the new string or you can set the contents of the canvas to something&amp;#010 like:&amp;#010 &lt;p&gt;&lt;code&gt;&amp;#010 &quot;The slider value is \${sliderInstance.getValue()}.&quot;&amp;#010 &lt;/code&gt;&lt;p&gt;&amp;#010 Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider&amp;#010 and call canvas.markForRedraw() in that observation.  This approach is cleaner than&amp;#010 setContents() when the Canvas is aggregating several values or dynamic expressions.&amp;#010 Like so:&amp;#010 &lt;p&gt;&amp;#010 &lt;pre&gt;&amp;#010 Slider.create({&amp;#010     ID: &quot;mySlider&quot;&amp;#010 });&amp;#010&amp;#010 Canvas.create({&amp;#010     ID: &quot;myCanvas&quot;,&amp;#010     dynamicContents: true,&amp;#010     contents: &quot;The slider value is \${mySlider.getValue()}.&quot;&amp;#010 });&amp;#010     &amp;#010 myCanvas.observe(mySlider, &quot;valueChanged&quot;, &amp;#010                  &quot;observer.markForRedraw()&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 You can embed an arbitrary number of dynamic expressions in the contents string.  The&amp;#010 search and replace is optimized for speed.&amp;#010 &lt;p&gt;&amp;#010 If an error occurs during the evaluation of one of the expressions, a warning is logged&amp;#010 to the ISC Developer Console and the error string is embedded in place of the expected&amp;#010 value in the Canvas.&amp;#010 &lt;p&gt;&amp;#010 The value of a function is its return value.  The value of any variable is the same as&amp;#010 that returned by its toString() representation.&amp;#010 &lt;p&gt;&amp;#010 Inside the evalution contentext, &lt;code&gt;this&lt;/code&gt; points to the canvas instance that&amp;#010 has the dynamicContents string as its contents - in other words the canvas instance on&amp;#010 which the template is declared." name="dynamicContents" valueType="boolean" defaultValue="false" type="attr" definingClass="class:HTMLFlow">
<seeAlso ref="attr:HTMLFlow.contents">
</seeAlso>
<seeAlso ref="attr:Canvas.dynamicContentsVars">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dynamicContents')}</examples>
    <groups>contents</groups>
</docItem>
<docItem ref="method:StretchImgButton.setTitle" flags="" description=" Set the title.&amp;#010" name="setTitle" type="method" definingClass="class:StretchImgButton">
<params description="new title" optional="false" name="newTitle" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setBorder" flags="" description=" Set the CSS border of this component, as a CSS string including border-width,&amp;#010 border-style, and/or color (eg &quot;2px solid blue&quot;).&amp;#010 &lt;P&gt;&amp;#010 This property applies the same border to all four sides of this component.  Different&amp;#010 per-side borders can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.&amp;#010&amp;#010" name="setBorder" type="method" definingClass="class:Canvas">
<params description="new border to set to (eg: &quot;2px solid black&quot;)" optional="false" name="newBorder" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:SectionStack.expandSection" flags="" description=" &amp;#010 Expands a section or sections.  This action shows all the items assigned to the section.&amp;#010 If the section is currently hidden, it is shown first and then expanded.  Calling this&amp;#010 method is equivalent to the user clicking on the SectionHeader of a collapsed section.&amp;#010&amp;#010" name="expandSection" type="method" definingClass="class:SectionStack">
<seeAlso ref="method:SectionStack.showSection">
</seeAlso>
<seeAlso ref="attr:SectionStack.scrollSectionIntoView">
</seeAlso>
<params description="Section(s) to expand.  For this parameter, you can pass the position &amp;#010                      of the section in the SectionStack, the ID of the section, or a&amp;#010                      List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
<params description="callback to fire when the section has been expanded." optional="true" name="callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="attr:DetailViewer.blockSeparator" flags="IRW" description="A string (HTML acceptable) that will be written to a page to separate blocks." name="blockSeparator" valueType="string" defaultValue="&quot;&lt;BR&gt;&lt;BR&gt;&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGridField.defaultIconSrc" flags="IRA" description="If this field is editable, this property will be passed to editors displayed for&amp;#010 cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.defaultIconSrc')}." name="defaultIconSrc" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:TabBar.tabs" flags="IR" description="Tab for this TabBar." name="tabs" valueType="Array of Tab Properties" defaultValue="null" type="attr" definingClass="class:TabBar">
</docItem>
<docItem ref="attr:SectionStackSection.hidden" flags="I" description="Sections default to the visible state.  This&amp;#010 attribute allows you to explicitly control the visible/hidden state of the&amp;#010 section by overriding the above default behavior." name="hidden" valueType="boolean" defaultValue="false" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem ref="attr:PickList.optionFilterContext" flags="IRA" description="If this item has a specified &lt;code&gt;optionDataSource&lt;/code&gt;, and this property is&amp;#010 not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when&amp;#010 performing the filter operation on the dataSource to obtain the set of options for the&amp;#010 list." name="optionFilterContext" valueType="RPCRequest Properties" defaultValue="null" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="classMethod:isA.Instance" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; an instance of some class?&amp;#010&amp;#010" name="Instance" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is an instance of some class" type="boolean"></returns>
</docItem>
<docItem ref="attr:Slider.labelSpacing" flags="IRW" description="The space around the labels used to display the minimum, maximum and current values of the&amp;#010 slider." name="labelSpacing" valueType="integer" defaultValue="5" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:FormItem.showErrorIcon" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorIcon" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>errorIcon</groups>
    <groups>validation</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:performance" name="performance" type="group">
    <refs>attr:GridRenderer.showAllRows</refs>
    <refs>attr:GridRenderer.showAllColumns</refs>
    <refs>attr:GridRenderer.scrollRedrawDelay</refs>
    <refs>attr:GridRenderer.drawAheadRatio</refs>
    <refs>attr:GridRenderer.quickDrawAheadRatio</refs>
    <refs>attr:ListGrid.fastCellUpdates</refs>
    <refs>attr:ListGrid.showAllRecords</refs>
    <refs>attr:ListGrid.drawAheadRatio</refs>
    <refs>attr:ListGrid.quickDrawAheadRatio</refs>
    <refs>attr:ListGrid.scrollRedrawDelay</refs>
    <refs>attr:ListGrid.dataPageSize</refs>
</docItem>
<docItem ref="group:loadState" name="loadState" type="group">
</docItem>
<docItem ref="attr:SelectItem.textBoxStyle" flags="IRW" description="Base CSS class name for a form item's text box element.&amp;#010 &lt;P&gt;&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;selectItemText&quot;, [IRA]" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.mouseStillDownInitialDelay" flags="IRWA" description="Amount of time (in msec) before mouseStillDown events start to be fired for this object." name="mouseStillDownInitialDelay" valueType="number" defaultValue="400" type="attr" definingClass="class:Canvas">
    <groups>events</groups>
</docItem>
<docItem ref="method:Log.logFatal" flags="" description=" Log a message at &quot;fatal&quot; priority&amp;#010 &amp;#010" name="logFatal" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.logDebug" description="for usage info"></seeAlso>
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:ListGridField.canFilter" flags="IRW" description="If showing a filter row for this ListGrid, should the filter criteria for this &amp;#010      field be editable" name="canFilter" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <examples>${isc.DocUtils.linkForExampleId('disableFilter')}</examples>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="method:ResultSet.compareCriteria" flags="" description=" Default behavior is to call ${isc.DocUtils.linkForRef('method:DataSource.compareCriteria')} to determine whether new&amp;#010 criteria is guaranteed more restrictive, equivalent to the old criteria, or not guaranteed&amp;#010 more restrictive, returning 1, 0 or -1 respectively.&amp;#010 &lt;P&gt;&amp;#010 Override this method or ${isc.DocUtils.linkForRef('method:DataSource.compareCriteria')} to implement your own client-side&amp;#010 filtering behavior.&amp;#010&amp;#010" name="compareCriteria" type="method" definingClass="class:ResultSet">
<seeAlso ref="type:CriteriaPolicy">
</seeAlso>
<params description="new filter criteria" optional="false" name="newCriteria" type="Criteria">
</params>
<params description="old filter criteria" optional="false" name="oldCriteria" type="Criteria">
</params>
<params description="dataSource request properties" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
<params description="overrides ${isc.DocUtils.linkForRef('type:CriteriaPolicy')}" optional="true" name="policy" type="string">
</params>
<returns description="0 if the filters are equivalent, 1 if newFilter is guaranteed more                      restrictive, and -1 if newFilter is not guaranteed more restrictive" type="Number"></returns>
</docItem>
<docItem ref="attr:TreeNode.isFolder" flags="IR" description="Set to &lt;code&gt;true&lt;/code&gt; or a string that is not equal to (ignoring case)&amp;#010 &lt;code&gt;&quot;false&quot;&lt;/code&gt; to explicitly mark this node as a folder.  See ${isc.DocUtils.linkForRef('method:Tree.isFolder')} for&amp;#010 a full description of how the ${isc.DocUtils.linkForRef('class:Tree')} determines whether a node is a folder or not.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}." name="isFolder" valueType="Boolean or String" defaultValue="null" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:Tree.isFolderProperty">
</seeAlso>
</docItem>
<docItem ref="attr:RPCResponse.transactionNum" flags="R" description="ID of the transaction sent to the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')} containing the&amp;#010 ${isc.DocUtils.linkForRef('class:RPCRequest')} associated with this response." name="transactionNum" valueType="number" defaultValue="null" type="attr" definingClass="class:RPCResponse">
</docItem>
<docItem ref="attr:Canvas.hoverWrap" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, this property can be used to customize the&amp;#010 whether content in the hover canvas is displayed in a single line, or wraps." name="hoverWrap" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:SelectItem.pickListProperties" flags="IRA" description="If specified this properties block will be applied to the pickList created for this&amp;#010 Form Item." name="pickListProperties" valueType="object" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="method:Canvas.containsPoint" flags="A" description=" Return whether or not this object contains the specified global (x,y) coordinates.&amp;#010 &lt;P&gt;&amp;#010 Will return false if any parentElement does not contain the specified point, (EG:&amp;#010 you're hovering over an element's absolute location, but it is scrolled out of &amp;#010 view in a parent element)&amp;#010&amp;#010" name="containsPoint" type="method" definingClass="class:Canvas">
<params description="GLOBAL x-coordinate" optional="false" name="x" type="number">
</params>
<params description="GLOBAL y-coordinate" optional="false" name="y" type="number">
</params>
<params description="point lies specificly within our viewport                                              (drawn area excluding margins and scrollbars if&amp;#010                                              present)" optional="true" name="withinViewport" type="boolean">
</params>
<returns description="true if this object contains the specified point; false otherwise" type="boolean"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:RestDataSource.dataURL" flags="IR" description="Default URL to contact to fulfill all DSRequests.  &amp;#010 RestDataSources also allow per-operationType dataURLs to be set via&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:RestDataSource.fetchDataURL')}&lt;/li&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:RestDataSource.addDataURL')}&lt;/li&gt; &amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:RestDataSource.updateDataURL')}&lt;/li&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:RestDataSource.removeDataURL')}&lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="dataURL" valueType="string" defaultValue="null" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:Canvas.masterElement" flags="RA" description="This Canvas's &quot;master&quot; (the Canvas to which it was added as a peer), if any." name="masterElement" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>containment</groups>
</docItem>
<docItem ref="attr:SectionStack.overflow" flags="IR" description="Normal ${isc.DocUtils.linkForRef('type:Overflow')} settings can be used on layouts, for example, an&amp;#010 overflow:auto Layout will scroll if sections are resized to exceed the specified size,&amp;#010 whereas an overflow:visible Layout will grow to accomodate the resized sections." name="overflow" valueType="Overflow" defaultValue="&quot;hidden&quot;" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="attr:TreeGrid.cantDragIntoChildMessage" flags="IR" description="Message displayed when user attempts to drop a node into a child of itself." name="cantDragIntoChildMessage" valueType="String" defaultValue="&quot;You can't drag an item into one of it's children.&quot;" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.canDragRecordsOut">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canAcceptDroppedRecords">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canReorderRecords">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ListGridField.cellAlign" flags="IRW" description="Horizontal alignment for cells in this field's column: &quot;left&quot;, &quot;right&quot;&amp;#010 or &quot;center&quot;.&lt;br&gt;&amp;#010 If null, alignment is derived from ${isc.DocUtils.linkForRef('attr:ListGridField.align')}. If this field is editable, &amp;#010 the alignment of cells in the body will also be reflected in any editors for the field." name="cellAlign" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>appearance</groups>
</docItem>
<docItem ref="group:resizing" name="resizing" type="group">
    <refs>attr:Window.canDragResize</refs>
</docItem>
<docItem ref="attr:ListGrid.showHeaderMenuButton" flags="IR" description="If set to true and ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','showHeaderContextMenu')} is true, the&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.headerMenuButton')} will be displayed when the user rolls&amp;#010 over the header buttons in this grid." name="showHeaderMenuButton" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="attr:FormItem.emptyValueIcon" flags="IRW" description="This property allows the developer to specify an icon to display when this item has&amp;#010 no value. It is configured in the same way as any other valueIcon &amp;#010 (see ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')})" name="emptyValueIcon" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="method:Tree.getRoot" flags="" description="&amp;#010 Returns the root node of the tree.&amp;#010&amp;#010" name="getRoot" type="method" definingClass="class:Tree">
<returns description="the root node" type="TreeNode"></returns>
</docItem>
<docItem ref="attr:SelectItem.pickerIconHeight" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the&amp;#010 size of the picker icon. If unset picker icon will be sized as a square to fit in the&amp;#010 avaliable height for the icon." name="pickerIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:SelectItem">
    <groups>pickerIcon</groups>
</docItem>
<docItem ref="group:loadWSDLTag" title="&amp;lt;isomorphic:loadWSDL&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 Load a WSDL file and create an instance of ${isc.DocUtils.linkForRef('class:WebService')} that allows invoking operations&amp;#010 and binding DataSources to web service operations. This tag works just like&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')}, except it's synchronous and the result is server-cacheable.&amp;#010 &lt;p&gt;&amp;#010 Note that this JSP tag must be surrounded by &amp;lt;SCRIPT&amp;gt; tags in the JSP because it&amp;#010 generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be&amp;#010 used in a JSP that is included from your main page in order to create separate&amp;#010 cacheability.  For example:&lt;pre&gt;&amp;#010     &amp;lt;SCRIPT SRC=&quot;myWebServiceDefinition.jsp&quot;&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;url&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: URL or URI&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the URL or URI of the WSDL file to fetch and translate.  This can&amp;#010 be either a remote URL - e.g: &lt;code&gt;http://host:port/wsdlFile.wsdl&lt;/code&gt; or a relative or&amp;#010 absolute URI to a file local to this container - e.g: &lt;code&gt;/some/wsdlFile.wsdl&lt;/code&gt; or&amp;#010 &lt;code&gt;../some/wsdlFile.wsdl&lt;/code&gt;.  If the url is a remote URL, then an HTTP request will&amp;#010 be made for the file.  If it is local, it will be fetched from disk using standard Servlet&amp;#010 APIs (&lt;code&gt;ServletContext.getResourceAsStream()&lt;/code&gt;).&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;cache&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Integer (number of seconds to cache result)&amp;#010 &lt;i&gt;default value&lt;/i&gt;: 3600 (1 hour)&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the number of seconds for which the fetched WSDL is cacheable on&amp;#010 the server.  Fetching a WSDL file from a remote server can cause a significant delay in JSP&amp;#010 processing, and WSDL files rarely change outside of a development environment.  Set this&amp;#010 value to zero to disable caching." name="loadWSDLTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="group:wsdlBinding">
</seeAlso>
<seeAlso ref="classMethod:XMLTools.loadWSDL">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:SectionStack.showSection" flags="" description=" &amp;#010 Shows a section or sections.  This includes the section header and its items.  If the&amp;#010 section is collapsed, only the header is shown.  If the section is expanded, the section&amp;#010 header and all items are shown.&amp;#010&amp;#010" name="showSection" type="method" definingClass="class:SectionStack">
<seeAlso ref="method:SectionStack.expandSection">
</seeAlso>
<seeAlso ref="attr:SectionStack.scrollSectionIntoView">
</seeAlso>
<params description="Section(s) to show.  For this parameter, you can pass the position &amp;#010                      of the section in the SectionStack, the ID of the section, or a&amp;#010                      List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
<params description="callback to fire when the sections have been expanded." optional="true" name="callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsShowAndHide')}</examples>
</docItem>
<docItem ref="attr:DateItem.startDate" flags="IRW" description="Minimum date the selectors will allow the user to pick." name="startDate" valueType="Date" defaultValue="1/1/1995" type="attr" definingClass="class:DateItem">
    <groups>appearance</groups>
</docItem>
<docItem flags="IR" type="attr" ref="attr:FormItem.optionDataSource" description="If set, this FormItem will map stored values to display values as though a&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueMap')} were specified, by fetching records from the &amp;#010 specified &lt;code&gt;optionDataSource&lt;/code&gt; and extracting the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in loaded records, to derive one&amp;#010 valueMap entry per record loaded from the optionDataSource.&amp;#010 &lt;P&gt;&amp;#010 Fetches will be initiated against the optionDataSource any time the FormItem has a&amp;#010 non-null value and no corresponding display value is available.  This includes when the&amp;#010 form is first initialized, as well as any subsequent calls to&amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.setValue')}, such as may happen when ${isc.DocUtils.linkForRef('method:DynamicForm.editRecord')} is&amp;#010 called.  Retrieved values are automatically cached by the FormItem.&amp;#010 &lt;P&gt;&amp;#010 Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is &lt;b&gt;also&lt;/b&gt; specified for&amp;#010 the field (either directly in the form item or as part of the field definition in the&amp;#010 dataSource), it will be preferred to the data derived from the optionDataSource for&amp;#010 whatever mappings are present.&amp;#010 &lt;P&gt;&amp;#010 In a databound form, if ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} is specified for a FormItem and &amp;#010 &lt;code&gt;optionDataSource&lt;/code&gt; is unset, &lt;code&gt;optionDataSource&lt;/code&gt; will default to&amp;#010 the form's current DataSource" name="optionDataSource" valueType="DataSource | String" defaultValue="null" definingClass="class:FormItem">
    <getter>getOptionDataSource</getter>
    <examples>${isc.DocUtils.linkForExampleId('listComboBox')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:DetailViewerField.title" flags="IR" description="The title of the field as displayed on the left-hand side.  If left unspecified, the&amp;#010 title of the field is derived by looking up the value of&amp;#010 ${isc.DocUtils.linkForRef('attr:DetailViewer.fieldIdProperty')} on this field.  So, by default, the title of a field&amp;#010 is the value of its &quot;name&quot; property." name="title" valueType="HTML" defaultValue="null" type="attr" definingClass="object:DetailViewerField">
<seeAlso ref="attr:DetailViewer.fieldIdProperty">
</seeAlso>
</docItem>
<docItem ref="attr:StatefulCanvas.overCanvas" flags="R" description="Auto generated child widget to be shown when the user rolls over this canvas if &amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showOverCanvas')} is true. See documentation for ${isc.DocUtils.linkForRef('type:AutoChild')}&amp;#010 for information on how to customize this canvas." name="overCanvas" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
</docItem>
<docItem ref="attr:ImgButton.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem exampleConfig="UploadItem.xml" ref="class:UploadItem" description="FormItem that creates an HTML &amp;ltinput type=&quot;upload&quot;&amp;gt; control, with an interface that&amp;#010 allows a user to pick a file from his machine to upload to the server.&amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('group:upload','Uploading Files')} overview for details.&amp;#010 &lt;P&gt;&amp;#010 Note: if a form containing an UploadItem is ${isc.DocUtils.linkForRef('method:Canvas.redraw','redrawn')} (which may&amp;#010 happen if other form items are shown or hidden, the form is&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.redrawOnResize','resized')}, or other items show validation errors) then the value&amp;#010 in the upload item is lost (because an HTML upload field may not be created with a value).&amp;#010 For this reason, if you are building a form that combines an UploadItem with other FormItems&amp;#010 that could trigger redraw()s, recommended practice is to place each UploadItem in a distinct&amp;#010 DynamicForm instance and create the visual appearance of a single logical form via combining&amp;#010 the DynamicForms in a ${isc.DocUtils.linkForRef('class:Layout')}." name="UploadItem" type="class">
    <methods>method:UploadItem.setValue</methods>
    <groups>upload</groups>
</docItem>
<docItem ref="method:DynamicForm.hasErrors" flags="" description=" Return whether this form currently has any validation errors.&lt;br&gt;&amp;#010 Validation errors are set up automatically by validation, or may be explicitly set via&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')}.&amp;#010" name="hasErrors" type="method" definingClass="class:DynamicForm">
<returns description="true == form currently has validation errors." type="boolean"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:FormItemIcon.height" flags="IRW" description="If set, this property determines the height of this icon in px.&amp;#010      If unset the form item's &lt;code&gt;iconHeight&lt;/code&gt; property will be used instead." name="height" valueType="number" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.iconHeight">
</seeAlso>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Canvas.animateHideAcceleration" flags="IRWA" description="Default acceleration function for performing an animated hide.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateHideAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="classMethod:Class.create" flags="" description="&amp;#010 Create an instance of this class.  &amp;#010 &lt;P&gt;&amp;#010 All arguments passed to this method are passed on to the ${isc.DocUtils.linkForRef('method:Class.init')} instance &amp;#010 method.  Unless ${isc.DocUtils.linkForRef('attr:Class.addPropertiesOnCreate')} is set to &lt;code&gt;false&lt;/code&gt;, all&amp;#010 arguments passed to this method must be Objects and all properties on those&amp;#010 objects will be copied to the newly created instance before ${isc.DocUtils.linkForRef('method:Class.init')} is&amp;#010 called.  If there are overlapping properties in the passed arguments, the last wins.&amp;#010 &lt;p&gt;&amp;#010 Any return value from ${isc.DocUtils.linkForRef('method:Class.init')} is thrown away.&amp;#010 &lt;p&gt;&amp;#010 Note: Generally, you would not override this method.  If you want to specify a&amp;#010 constructor for your class, provide an override for ${isc.DocUtils.linkForRef('method:Class.init')} for generic&amp;#010 classes or ${isc.DocUtils.linkForRef('method:Canvas.initWidget')} for any subclasses of UI components&amp;#010 (i.e. descendants of ${isc.DocUtils.linkForRef('class:Canvas')}.&amp;#010&amp;#010" name="create" type="classMethod" definingClass="class:Class">
<params description="Any arguments passed will be passed along to the init() routine of the instance.&amp;#010      Unless ${isc.DocUtils.linkForRef('attr:Class.addPropertiesOnCreate')} is set to false, any arguments passed to&amp;#010      this method must be of type Object." optional="true" name="arguments 0-N" type="any">
</params>
<returns description="New instance of this class, whose init() routine has already been called" type="object"></returns>
    <examples>&lt;code&gt;var myInstance = MyClass.create()&lt;/code&gt;</examples>
    <examples>${isc.DocUtils.linkForExampleId('create')}</examples>
</docItem>
<docItem ref="attr:DataSource.fields" flags="IR" description="The list of fields that compose records from this DataSource.&amp;#010 &lt;P&gt;&amp;#010 Each DataSource field can have type, user-visible title, validators, and other metadata&amp;#010 attached." name="fields" valueType="Array of DataSourceField" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="class:DataSourceField">
</seeAlso>
    <groups>fields</groups>
</docItem>
<docItem ref="method:ListGridField.getGroupValue" flags="" description=" Return the value within which records with the same value will be grouped.&amp;#010 Default is the result of ${isc.DocUtils.linkForRef('method:ListGrid.getCellValue')}.&amp;#010 &lt;P&gt;&amp;#010 While any type of value may be returned, avoiding the use of string values may&amp;#010 result in improved performance. In this case, ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle')}&amp;#010 may be implemented to map an enumerated group value into a legible string.&amp;#010" name="getGroupValue" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
<seeAlso ref="method:ListGridField.getGroupTitle">
</seeAlso>
<params description="raw value for the cell, from the record for the row" optional="false" name="value" type="any">
</params>
<params description="Record object for the cell. Note: If this is a new row that has not been saved, in an &amp;#010   editable grid, it has no associated record object. In this case the edit values will&amp;#010   be passed in as this parameter (see ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')})" optional="false" name="record" type="ListGridRecord">
</params>
<params description="Field object for which to get group value" optional="false" name="field" type="Object">
</params>
<params description="The name of the field" optional="false" name="fieldName" type="String">
</params>
<params description="the ListGrid displaying the cell" optional="false" name="grid" type="ListGrid">
</params>
<returns description="Group value to which this record belongs" type="any"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customGrouping')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="method:Canvas.removeChild" flags="" description="	Remove a child from its parent if it has one.&amp;#010" name="removeChild" type="method" definingClass="class:Canvas">
<params description="Child canvas to remove from this parent." optional="false" name="child" type="Canvas instance">
</params>
<params description="If the child canvas was assigned a name, it should be passed in here                          to ensure this[name] is cleared" optional="true" name="name" type="string">
</params>
    <groups>containment</groups>
</docItem>
<docItem ref="group:errorHandling" name="errorHandling" type="group">
    <refs>method:DataSource.handleError</refs>
    <refs>attr:DSResponse.status</refs>
    <refs>attr:DSResponse.errors</refs>
</docItem>
<docItem ref="attr:ToolbarItem.colSpan" flags="IRW" description="these items span all columns" name="colSpan" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ToolbarItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classAttr:FileLoader.defaultModules" flags="RW" description="Default list of modules for&amp;#010 ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} to use if none are&amp;#010 provided by the user." name="defaultModules" valueType="String" defaultValue="&quot;Core,Foundation,Containers,Grids,Forms,DataBinding&quot;" type="classAttr" definingClass="class:FileLoader">
<seeAlso ref="classMethod:FileLoader.cacheISC">
</seeAlso>
<seeAlso ref="classMethod:FileLoader.loadISC">
</seeAlso>
</docItem>
<docItem ref="method:DataSource.transformRequest" flags="A" description=" For a dataSource using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')},&amp;#010 return the data that should be sent to the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}.&amp;#010 &lt;P&gt;&amp;#010 By default, HTTP requests sent to non-SmartClient servers do not include DSRequest&amp;#010 metadata such as ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')}, ${isc.DocUtils.linkForRef('attr:DSRequest.endRow','endRow')},&amp;#010 and ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues','oldValues')}.  Only the core&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','datasource protocol data')} is sent, such as the criteria&amp;#010 passed to ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} or the updated values submitted by&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','form.saveData()')}.  &amp;#010 &lt;P&gt;&amp;#010 transformRequest() allows you to transform dsRequest metadata into a&amp;#010 format understood by your server and include it in the HTTP request, so that you can&amp;#010 integrate DataSource features such as data paging with servers that support such&amp;#010 features.&amp;#010 &lt;P&gt;&amp;#010 How the data is actually sent to the URL is controlled by &amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}.  If using the &quot;getParams&quot; or&amp;#010 &quot;postParams&quot; protocol, data is expected to be a JavaScript Object where each property&amp;#010 will become a GET or POST'd parameter.  If using dataProtocol:&quot;soap&quot; or &quot;postXML&quot;, data&amp;#010 will be serialized as an XML message by ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.&amp;#010 &lt;P&gt;&amp;#010 As an example, if you have a dataURL that can return paged data given URL parameters&amp;#010 &quot;start&quot; and &quot;end&quot;, you could implement transformRequest like so:&amp;#010 &lt;pre&gt;&amp;#010   isc.DataSource.create({&amp;#010      ... &amp;#010      transformRequest : function (dsRequest) {&amp;#010         if (dsRequest.operationType == &quot;fetch&quot;) {&amp;#010             var params = {&amp;#010                start : dsRequest.startRow,&amp;#010                end : dsRequest.endRow&amp;#010             };&amp;#010             // combine paging parameters with criteria&amp;#010             return isc.addProperties({}, dsRequest.data, params);&amp;#010         }&amp;#010      }&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 Other reasons to implement transformRequest():&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; transform a ${isc.DocUtils.linkForRef('type:Criteria')} object into the custom query language of a web&amp;#010      service&amp;#010 &lt;li&gt; add a session id to requests that require authentication&amp;#010 &lt;li&gt; detect colliding updates by sending both updated values and the values the user&amp;#010      originally retrieved before editing began (available as ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')})&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="transformRequest" type="method" definingClass="class:DataSource">
<params description="the DSRequest being processed" optional="false" name="dsRequest" type="DSRequest">
</params>
<returns description="data to be sent to the dataURL" type="any"></returns>
</docItem>
<docItem ref="attr:FormItem.showErrorText" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorText" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>validation</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSourceField.editorType" flags="IR" description="Sets the default FormItem to be used whenever this field is edited (whether in a grid, form,&amp;#010 or other component).&amp;#010 &lt;P&gt;&amp;#010 If unset, a FormItem will be automatically chosen based on the type of the field, by the&amp;#010 rules explained ${isc.DocUtils.linkForRef('type:FormItemType','here')}." name="editorType" valueType="FormItem className" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentBinding</groups>
</docItem>
<docItem ref="attr:Snapbar.showRollOver" flags="IRW" description="Snapbars show rollover styling." name="showRollOver" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
</docItem>
<docItem ref="attr:ImgProperties.src" flags="IRW" description="Specifies the URL of the image local to the skin or application directory." name="src" valueType="URL" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="group:fileAssembly" title="File Assembly" description="File assembly concatenates multiple files into a single response, reducing the number&amp;#010 of HTTP fetches required to load a page. This concatenation also improves the&amp;#010 compressability of responses, since the compression algorithm may reduce redundancy across a&amp;#010 larger data set.&amp;#010 &lt;p&gt;&amp;#010 The ISC FileAssembly service provides configuration-driven file assembly, with integrated&amp;#010 compression and JavaScript stripping services.  Assemblies are specified in an xml format&amp;#010 and map a URI to a set of files to concatenate together.  There also additional flags to&amp;#010 enable stripping and compression.  &amp;#010 &lt;p&gt;&amp;#010 You can use the FileAssembler to create assemblies of javascript and css.  Since it's&amp;#010 basically a file concatenator with some specialized services for javascript files, you could&amp;#010 use it to assembly anything else, but javascript and css are probably the main things to&amp;#010 consider.&amp;#010 &lt;p&gt;&amp;#010 The FileAssembler has a development mode and a production&amp;#010 packaging mode.  In the development mode, there is a servlet that you can register at&amp;#010 virtual URLs that are assembled on the fly by the FileAssembler based on its configuration.&amp;#010 For production packaging, you can use the same configuration file to generate static,&amp;#010 pre-compressed versions of these files.  The format of the file is as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;FileAssembly&amp;gt;&amp;#010     &amp;lt;assemblies&amp;gt;&amp;#010         &amp;lt;FileAssemblyEntry uri=&quot;/myAssembly.js&quot;&amp;gt;&amp;#010             &amp;lt;compress&amp;gt;true&amp;lt;/compress&amp;gt;&amp;#010             &amp;lt;components&amp;gt;&amp;#010                 &amp;lt;component&amp;gt;&amp;#010                     &amp;lt;type&amp;gt;file&amp;lt;/type&amp;gt;&amp;#010                     &amp;lt;fileName&amp;gt;copyright.txt&amp;lt;/fileName&amp;gt;&amp;#010                 &amp;lt;/component&amp;gt;&amp;#010                 &amp;lt;component&amp;gt;&amp;#010                     &amp;lt;type&amp;gt;datasource&amp;lt;/type&amp;gt;&amp;#010                     &amp;lt;name&amp;gt;myDatasource1&amp;lt;/name&amp;gt;&amp;#010                 &amp;lt;/component&amp;gt;&amp;#010                 &amp;lt;component&amp;gt;&amp;#010                     &amp;lt;type&amp;gt;ds&amp;lt;/type&amp;gt;&amp;#010                     &amp;lt;name&amp;gt;myDatasource2&amp;lt;/name&amp;gt;&amp;#010                 &amp;lt;/component&amp;gt;&amp;#010                 &amp;lt;component&amp;gt;&amp;#010                     &amp;lt;type&amp;gt;file&amp;lt;/type&amp;gt;&amp;#010                     &amp;lt;fileName&amp;gt;myPublicCode.js&amp;lt;/fileName&amp;gt;&amp;#010                 &amp;lt;/component&amp;gt;&amp;#010                 &amp;lt;component&amp;gt;&amp;#010                     &amp;lt;type&amp;gt;file&amp;lt;/type&amp;gt;&amp;#010                     &amp;lt;fileName&amp;gt;myPrivateCode.js&amp;lt;/fileName&amp;gt;&amp;#010                     &amp;lt;jsStripping&amp;gt;full&amp;lt;/jsStripping&amp;gt;&amp;#010                     &amp;lt;jsObfuscation&amp;gt;1&amp;lt;/jsObfuscation&amp;gt;&amp;#010                 &amp;lt;/component&amp;gt;&amp;#010             &amp;lt;/components&amp;gt;&amp;#010         &amp;lt;/FileAssemblyEntry&amp;gt;&amp;#010     &amp;lt;/assemblies&amp;gt;&amp;#010 &amp;lt;/FileAssembly&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 You can specify as many FileAssemblyEntry blocks as you want, simply place them alongside&amp;#010 each other under the &amp;lt;assemblies&amp;gt; element.  The above example states that the&amp;#010 /myAssembly.js file should be assembled from the various components listed above. Component&amp;#010 blocks support the following attributes:&amp;#010 &lt;p&gt;&amp;#010 &lt;table border='1' class='normal'&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Values&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;file&lt;br&gt;xmlFile&lt;br&gt;ds|datasource&lt;br&gt;ui&lt;/td&gt;&amp;#010     &lt;td&gt;any file&lt;br&gt;XML file&lt;br&gt;ISC DataSource file&lt;br&gt;ISC UI file&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;file identifier&lt;/td&gt;&amp;#010     &lt;td&gt;identifier for a ds or ui file&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;fileName&lt;/td&gt;&lt;td&gt;file path&lt;/td&gt;&lt;td&gt;path to a file or xmlFile (relative to webRoot)&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;jsStripping&lt;/td&gt;&lt;td&gt;none&lt;br&gt;partial&lt;br&gt;full&lt;/td&gt;&amp;#010     &lt;td&gt;level of stripping (whitespace, comment, and delimiter removal) applied to file&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;/table&gt;&amp;#010 &lt;p&gt;&amp;#010 All component types except file are converted from valid ISC XML format to JavaScript format&amp;#010 by the FileAssembler.  The &lt;code&gt;jsStripping&lt;/code&gt; attribute only applies to assembled&amp;#010 javascript files.&amp;#010 &lt;p&gt;&amp;#010 Once you've created the configuration file, you'll probably want to place it somewhere in&amp;#010 webRoot.  Generally, it can be placed anywhere you like, but the development-time&amp;#010 FileAssembly servlet requires the file be placed under webRoot. The default location is&amp;#010 /isomorphicConfig/fileAssembly.xml and can be changed via the &lt;code&gt;configFile&lt;/code&gt;&amp;#010 init-param of the FileAssembly servlet.  To enable development mode support for&amp;#010 FileAssembly, you'll need to register the FileAssembly servlet in your web.xml as follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileAssembly&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;servlet-class&amp;gt;com.isomorphic.servlet.FileAssembly&amp;lt;/servlet-class&amp;gt;&amp;#010     &amp;lt;/servlet&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Now, for every FileAssemblyEntry URI you specified in your fileAssembly.xml, you'll need&amp;#010 corresponding mappings in web.xml, to tell the servlet container to send requests for that&amp;#010 file to the FileAssembler.  For example, assuming your fileAssembly.xml contained the&amp;#010 contents shown above, you'd register /myAssembly.js in your web.xml with the FileAssembler as&amp;#010 follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet-mapping&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileAssembly&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;url-pattern&amp;gt;/myAssembly.js&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/servlet-mapping&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 You'll need a similar entry for any other entry in your fileAssembly.xml.  Note that this is&amp;#010 for development only - we'll pregenerate static files for production.  Once you've done the&amp;#010 above, you can load /myAssembly.js into your page via a standard SCRIPT block, like so:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;script src=&quot;/myAssembly.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Now, whenever requests are made for this file, the FileAssembler will check the timestamps&amp;#010 of all the components of this assembly, rebuild the assembled file if required, and serve it&amp;#010 to the browser as if it was a static file on disk.&amp;#010 &lt;p&gt;&amp;#010 To create static assembled files for production, you can use the fileAssembler command line&amp;#010 tool provided as part of the SDK.  This is a Java-based command line tool located in&amp;#010 smartclientSDK/WEB-INF/bin.  There are three versions of the tool in that directory -&amp;#010 fileAssembler.bat is for Windows platforms, fileAssembler.command is for MacOS platforms, and&amp;#010 fileAssembler.sh is for *nix platforms.  Running this tool with the --help argument will show&amp;#010 you the command line switches available.  Typicaly, you'll need to specify:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;--config &amp;lt;file&amp;gt; - location of the fileAssembly.xml configuration file&amp;#010 &lt;li&gt;--webRoot &amp;lt;dir&amp;gt; - location of the webRoot that the fileAssembler uses to access the&amp;#010 component files.&amp;#010 &lt;li&gt;--outputDir &amp;lt;dir&amp;gt; - location of directory where you want output files to go - typically&amp;#010 this is the webRoot of your production build.  These are the files you'll deploy to&amp;#010 production.&amp;#010 &lt;/ul&gt;&amp;#010 Finally, since the generated files are likely to be compressed and they're static, you'll&amp;#010 probably want to map the FileDownload servlet to serve them in your production web.xml" name="fileAssembly" type="group">
    <treeLocation>Optional Modules/Network Performance</treeLocation>
    <requiresModules>NetworkPerformance</requiresModules>
</docItem>
<docItem ref="attr:TabSet.pickerButtonVSrc" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is &amp;#010 set to true, this property governs the base URL for the picker&amp;#010 button image, when displayed in a verricaL tab-bar [IE ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is&amp;#010 set to &lt;code&gt;&quot;LEFT&quot;&lt;/code&gt; or &lt;code&gt;&quot;right&quot;&lt;/code&gt;].&amp;#010 &lt;P&gt;&amp;#010 Note that if &lt;code&gt;symmetricPickerButton&lt;/code&gt; is false, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}&amp;#010 property will be used instead.&amp;#010 &lt;P&gt;&amp;#010 This base URL will have a suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; appended when the user holds the&amp;#010 mouse down over the button, and &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; if the tabset as a whole is &amp;#010 disabled." name="pickerButtonVSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]vpicker.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricPickerButton">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="attr:ImgButton.showDown" flags="IRW" description="Should we visibly change state when the mouse goes down in this object?" name="showDown" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:TabSet.symmetricScroller" flags="IR" description="If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, this property &amp;#010 determines whether the ${isc.DocUtils.linkForRef('attr:TabSet.scrollerHSrc')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerVSrc')} media&amp;#010 will be used for vertical and horizontal tab-bar scroller buttons, or whether separate&amp;#010 media should be used for each possible ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} based&amp;#010 on the ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} property for this tabSet." name="symmetricScroller" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="group:concat" name="concat" type="group">
</docItem>
<docItem ref="attr:Flashlet.src" flags="IR" description="Location from which to load the Flashlet." name="src" valueType="URL" defaultValue="null" type="attr" definingClass="class:Flashlet">
</docItem>
<docItem ref="attr:ImgSplitbar.src" flags="IR" description="The base filename for the image.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;img.state&lt;/code&gt; is set, it's value will be appended to the URL before the&amp;#010 file extension.  &amp;#010 &lt;P&gt;&amp;#010 For example, given an &lt;code&gt;src&lt;/code&gt; of &quot;findIcon.gif&quot; and a state of&amp;#010 &quot;Disabled&quot;, the resulting image name would be &quot;findIcon_Disabled.gif&quot;.  Compound states&amp;#010 such as &quot;Selected&quot;, &quot;Focused&quot; and &quot;Over&quot; or &quot;Down&quot; will have an intervening underscore,&amp;#010 resulting in, for example, &lt;code&gt;&quot;findIcon_Selected_Down.gif&quot;&lt;/code&gt;." name="src" valueType="string" defaultValue="null" type="attr" definingClass="class:ImgSplitbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.showClickMask" flags="" description=" Show a clickMask over the entire screen that intercepts mouse clicks and fires some action.&amp;#010 The mask created will be associated with this canvas - calling this method multiple times&amp;#010 will not show multiple (stacked) clickMasks if the mask associated with this canvas is &amp;#010 already up.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 The clickMask useful for modal dialogs, menus and similar uses, where any click outside of&amp;#010 some Canvas should either be suppressed (as in a modal dialog) or just cause something (like&amp;#010 dismissing a menu). &amp;#010 &amp;#010" name="showClickMask" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.hideClickMask">
</seeAlso>
<params description="action to fire when the user clicks on the mask" optional="false" name="clickAction" type="callback">
</params>
<params description="whether to automatically hide the clickMask on mouseDown                                      and suppress the mouseDown event from reaching&amp;#010                                      the target under the mouse" optional="false" name="mode" type="clickMaskMode">
</params>
<params description="initially unmasked targets for this clickMask. Note that if this is a&amp;#010  &lt;code&gt;&quot;hard&quot;&lt;/code&gt; mask, unmasked children of masked parents are not supported&amp;#010  so any non-top-level widgets passed in will have their parents unmasked.&amp;#010  Children of masked parents can never be masked." optional="false" name="unmaskedTargets" type="widget | array of widgets">
</params>
<returns description="clickMask ID" type="string"></returns>
    <groups>clickMask</groups>
</docItem>
<docItem ref="attr:FormItem.showHint" flags="IRWA" description="If a hint is defined for this form item, should it be shown?" name="showHint" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.mouseDown" flags="A" description="&amp;#010 Executed when the left mouse down is pressed on this widget.  No default implementation.&amp;#010&amp;#010" name="mouseDown" type="method" platformNotes="If the end user system has only one mouse button, then it is considered the &quot;left&quot;                mouse button (and this method would execute when it is pressed on this widget)." definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:Canvas.setDisabled" flags="A" description=" set the disabled state of this object&amp;#010" name="setDisabled" type="method" definingClass="class:Canvas">
<params description="new disabled state of this object - pass &lt;code&gt;true&lt;/code&gt; to disable the widget" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
</docItem>
<docItem ref="method:Tree.closeFolders" flags="" description="&amp;#010 Close a set of folders, specified by path or as pointers to nodes.&amp;#010&amp;#010" name="closeFolders" type="method" definingClass="class:Tree">
<params description="List of nodes or node paths." optional="false" name="nodeList" type="List of TreeNode">
</params>
</docItem>
<docItem ref="method:ListGrid.rowOut" flags="" description=" Called when the mouse pointer leaves a row&amp;#010&amp;#010" name="rowOut" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:ListGridField.editorImageURLPrefix" flags="IRWA" description="When some cell in this field is being edited, this property can be used to apply &amp;#010 an explicit ${isc.DocUtils.linkForRef('attr:FormItem.imageURLPrefix')} to the editor in question. &amp;#010 This can be used to modify the valueIcons within the editor.&lt;br&gt;&amp;#010 If unset, but ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} is specified, that will be used&amp;#010 instead." name="editorImageURLPrefix" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="method:ListGrid.updateData" flags="" description=" Perform a DataSource &quot;update&quot; operation to update existing records in this component's&amp;#010 DataSource.&amp;#010&amp;#010" name="updateData" type="method" definingClass="class:ListGrid">
<params description="updated record" optional="false" name="updatedRecord" type="Object">
</params>
<params description="method to call on operation completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundUpdate')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="type:Positioning" name="Positioning" type="type">
<values description="The canvas is absolutely positioned with respect to its parentElement." value="Canvas.ABSOLUTE"></values>
<values description="The canvas is relatively positioned according to the document flow." value="Canvas.RELATIVE"></values>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:Splitbar.vertical" flags="R" description="Is this split bar vertically orientated?&lt;br&gt;&amp;#010 When a &lt;code&gt;Splitbar&lt;/code&gt; is created by a layout to be the resizeBar for some&amp;#010 member of the layout, the &lt;code&gt;vertical&lt;/code&gt; property will be set to &lt;code&gt;true&lt;/code&gt;&amp;#010 if the layout is horizontal, meaning this resizeBar will be taller than it is wide, &amp;#010 and will allow horizontal resizing of the member." name="vertical" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
</docItem>
<docItem ref="type:CriteriaPolicy" name="CriteriaPolicy" type="type">
<values description="Cache is dropped whenever criteria changes." value="&quot;dropOnChange&quot;"></values>
<values description="Cache is retained as along as the only changes to criteria                              are lengthening of criteria values for known, String-valued&amp;#010                              DataSource fields, or the addition of fields that weren't&amp;#010                              present before." value="&quot;dropOnShortening&quot;"></values>
</docItem>
<docItem ref="method:CubeGrid.setEditValues" flags="" description=" Set the temporary edit values for some cell in the cubeGrid.&lt;br&gt;&amp;#010 Note that only the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty','this.valueProperty')} of the object passed in&amp;#010 will be displayed in the cell.&amp;#010" name="setEditValues" type="method" definingClass="class:CubeGrid">
<params description="2 element array of the form                   &lt;code&gt;[rowNum,colNum]&lt;/code&gt; indicating the record being edited" optional="false" name="cell" type="Array of numbers">
</params>
<params description="New values for the record" optional="false" name="values" type="object">
</params>
</docItem>
<docItem ref="method:ListGrid.cellMouseUp" flags="" description=" Called when a cell receives a mouseup event.&amp;#010&amp;#010" name="cellMouseUp" type="method" definingClass="class:ListGrid">
<params description="Record object (retrieved from getCellRecord(rowNum, colNum))" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:ResultSet.useClientSorting" flags="IRWA" description="Whether to sort data locally when all records matching the current criteria have been&amp;#010 cached.&amp;#010 &lt;P&gt;&amp;#010 This may need to be disabled if client-side sort order differs from server-side sort&amp;#010 order in a way that affects functionality or is surprising." name="useClientSorting" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultSet">
</docItem>
<docItem ref="group:error handling" name="error handling" type="group">
</docItem>
<docItem ref="classMethod:Class.getSuperClass" flags="" description="	&amp;#010	Gets a pointer to the superClass' Class object.&amp;#010&amp;#010" name="getSuperClass" type="classMethod" definingClass="class:Class">
<returns description="Class object for superclass." type="Class"></returns>
</docItem>
<docItem ref="method:Button.removeFromRadioGroup" flags="" description=" Remove this widget from the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 No-op's if this widget is not a member of the groupID passed in.&amp;#010 If no groupID is passed in, defaults to removing from whatever radioGroup this widget&amp;#010 is a member of.&amp;#010" name="removeFromRadioGroup" type="method" definingClass="class:Button">
<params description="- optional radio group ID (to ensure the widget is removed                                        from the appropriate group." optional="true" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="group:loadUITag" title="&amp;lt;isomorphic:loadUI&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 This tag converts SmartClient UI components declaratively specified in an XML &quot;UI&quot; file to&amp;#010 JavaScript for execution in the browser.&amp;#010 &lt;p&gt;&amp;#010 The XML-&gt;JS translation works just like with ${isc.DocUtils.linkForRef('group:xmlTag')}, except the XML is read&amp;#010 from an external file instead of from the body of the tag.&amp;#010 &lt;p&gt;&amp;#010 Note that this JSP tag must be surrounded by &amp;lt;SCRIPT&amp;gt; tags in the JSP because it&amp;#010 generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be&amp;#010 used in a JSP that is included from your main page in order to create separate&amp;#010 cacheability.  For example:&lt;pre&gt;&amp;#010     &amp;lt;SCRIPT SRC=&quot;myUIDefinitions.jsp&quot;&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;name&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: String - name of UI file to load (minus extension)&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the name of the file that contains the UI components to translate.&amp;#010 UI files are located in &lt;code&gt;[webroot]/shared/ui&lt;/code&gt; by default.  This location is&amp;#010 changeable in &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt; by setting the config&amp;#010 parameter &lt;code&gt;project.ui&lt;/code&gt; to the directory where your UI files are located.   &amp;#010 We recommend that for prototying, at least, you use the default directory.&amp;#010 &lt;p&gt;&amp;#010 For example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadUI name=&quot;test&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Would translate declarative XML in the file &lt;code&gt;[webroot]/shared/ui/test.ui.xml&lt;/code&gt; to&amp;#010 JavaScript and output the results into the JSP output stream at the location of the tag." name="loadUITag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="group:xmlTag">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:Toolbar.canReorderItems" flags="IRWA" description="If true, items can be reordered by dragging on them." name="canReorderItems" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Toolbar">
    <groups>dragndrop</groups>
</docItem>
<docItem ref="group:hovers" name="hovers" type="group">
    <refs>method:ListGridField.hoverHTML</refs>
    <refs>method:Canvas.handleHover</refs>
    <refs>method:Canvas.updateHover</refs>
    <refs>method:Canvas.hoverHidden</refs>
    <refs>method:Canvas.hover</refs>
    <refs>method:Canvas.getHoverHTML</refs>
    <refs>attr:ListGrid.canHover</refs>
    <refs>attr:ListGrid.showHover</refs>
    <refs>attr:ListGrid.hoverStyle</refs>
    <refs>attr:Canvas.prompt</refs>
    <refs>attr:Canvas.canHover</refs>
    <refs>attr:Canvas.hoverDelay</refs>
    <refs>attr:Canvas.showHover</refs>
    <refs>attr:Canvas.hoverWidth</refs>
    <refs>attr:Canvas.hoverHeight</refs>
    <refs>attr:Canvas.hoverAlign</refs>
    <refs>attr:Canvas.hoverVAlign</refs>
    <refs>attr:Canvas.hoverWrap</refs>
    <refs>attr:Canvas.hoverStyle</refs>
    <refs>attr:Canvas.hoverOpacity</refs>
    <refs>attr:Canvas.hoverMoveWithMouse</refs>
</docItem>
<docItem ref="attr:SelectItem.controlStyle" flags="IRW" description="Base CSS class name for a form item's control box (surrounds text box and picker).&amp;#010 &lt;P&gt;&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="controlStyle" valueType="FormItemBaseStyle" defaultValue="&quot;selectItemControl&quot;, [IRA]" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.showValueIconOnly" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is set, this property may be set to show the valueIcon&amp;#010 only and prevent the standard form item element or text from displaying" name="showValueIconOnly" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="method:Array.containsAll" flags="" description=" Return whether this list contains all the item in the specified list.&amp;#010&amp;#010" name="containsAll" type="method" definingClass="object:Array">
<params description="items to look for" optional="false" name="list" type="List">
</params>
<returns description="whether all items were found" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:CubeGrid.facetMoved" flags="" description=" Notification fired when a facet is moved.&amp;#010 &amp;#010" name="facetMoved" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.facetRemoved">
</seeAlso>
<seeAlso ref="method:CubeGrid.facetAdded" description="&lt;br&gt;&lt;i&gt;methodType&lt;/i&gt;  handler"></seeAlso>
<params description="facetId which moved" optional="false" name="facetId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:TabSet.scrollerSrc" flags="IR" description="If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, this property governs the base&amp;#010 URL for the tab bar back and forward scroller button images.&amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.scrollerHSrc')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerVSrc')} will be used instead.&amp;#010 &lt;P&gt;&amp;#010 To get the path to the image to display, this base URL will be modified as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If appropriate a state suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; or &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; will be&amp;#010     appended.&lt;/li&gt;&amp;#010 &lt;li&gt;The ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} for this tabSet will be appended.&lt;/li&gt;&amp;#010 &lt;li&gt;A suffix of &lt;code&gt;&quot;forward&quot;&lt;/code&gt; or &lt;code&gt;&quot;back&quot;&lt;/code&gt; will be appended for the&amp;#010     forward or backward scrolling button.&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 For example - if the scrollerSrc is set to &lt;code&gt;&quot;[SKIN]scroll.gif&quot;&lt;/code&gt;, the image&amp;#010 displayed for the back-scroller button on a tabSet with &lt;code&gt;tabBarPosition&lt;/code&gt; set to&amp;#010 &quot;top&quot; and &lt;code&gt;symmetricScroller&lt;/code&gt; set to false would be one of &amp;#010 &lt;code&gt;&quot;[SKIN]scroll_top_back.gif&quot;&lt;/code&gt;, &lt;code&gt;&quot;[SKIN]scroll_Down_top_back.gif&quot;&lt;/code&gt;,&amp;#010 and &lt;code&gt;&quot;[SKIN]scroll_Disabled_top_back.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for best results the media should be sized to match the scroller button sizes, &amp;#010 determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}." name="scrollerSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/scroll.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricScroller">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="attr:Scrollbar.trackEndHeight" flags="IRWA" description="The minimum pixel height of the track end segments (if enabled with showTrackEnds)." name="trackEndHeight" valueType="number" defaultValue="12" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="method:SelectItem.dataArrived" flags="" description=" If this item is showing a dataBound pickList, this notification method will be fired &amp;#010 when new data arrives from the server.&amp;#010" name="dataArrived" type="method" definingClass="class:SelectItem">
<params description="index of first row returned by the server" optional="false" name="startRow" type="number">
</params>
<params description="index of last row returned by the server" optional="false" name="endRow" type="number">
</params>
<params description="pointer this pickList's data" optional="false" name="data" type="ResultSet">
</params>
</docItem>
<docItem ref="classMethod:WebService.get" flags="" description=" Retrieve a WebService object by the targetNamespace declared on the &amp;lt;wsdl:definitions&amp;gt;&amp;#010 element in the WSDL file from which the WebService was derived.&amp;#010&amp;#010" name="get" type="classMethod" definingClass="class:WebService">
<params description="uri from the &quot;targetNamespace&quot; attribute of the &amp;lt;wsdl:definitions&amp;gt; element in the WSDL file" optional="false" name="serviceNamespace" type="String">
</params>
<returns description="the requested WebService, or null if not loaded" type="WebService"></returns>
    <examples>${isc.DocUtils.linkForExampleId('wsdlBinding')}</examples>
    <groups>webService</groups>
</docItem>
<docItem ref="method:ListGrid.setBodyOverflow" flags="A" description=" Update the ${isc.DocUtils.linkForRef('attr:ListGrid.bodyOverflow','bodyOverflow')} for this listGrid.&amp;#010" name="setBodyOverflow" type="method" definingClass="class:ListGrid">
<params description="new overflow setting for the body" optional="false" name="overflow" type="Overflow">
</params>
</docItem>
<docItem ref="classMethod:EventHandler.shiftKeyDown" flags="" description="			Return true if the shift key is being held down.&amp;#010			Note that this is only set reliably for keyboard events.&amp;#010&amp;#010" name="shiftKeyDown" type="classMethod" definingClass="class:EventHandler">
<returns description="true == shift key is down" type="boolean"></returns>
    <groups>keyboardEvents</groups>
</docItem>
<docItem ref="attr:Canvas.autoDraw" flags="IR" description="If true, this canvas will draw itself immediately after it is created.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Note&lt;/b&gt; that you should turn this OFF for any canvases that are provided as children&amp;#010 of other canvases, or they will draw initially, then be clear()ed and drawn again when&amp;#010 added as children, causing a large performance penalty.  &amp;#010 &lt;P&gt;&amp;#010 For example, the following code is incorrect and will cause extra draw()s:&amp;#010 &lt;P&gt;&amp;#010 &lt;pre&gt;&amp;#010     isc.Layout.create({&amp;#010         members : [&amp;#010             isc.ListGrid.create()&amp;#010         ]&amp;#010     });&amp;#010 &lt;/pre&gt;&amp;#010 It should instead be:&amp;#010 &lt;pre&gt;&amp;#010     isc.Layout.create({&amp;#010         members : [&amp;#010             isc.ListGrid.create(&lt;b&gt;{ autoDraw: false }&lt;/b&gt;)&amp;#010         ]&amp;#010     });&amp;#010 &lt;/pre&gt;&amp;#010 In order to avoid unwanted autoDrawing systematically, it is recommend that you call&amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.setAutoDraw','isc.setAutoDraw(false)')} immediately after SmartClient is loaded&amp;#010 and before any components are created, then set &lt;code&gt;autoDraw:true&lt;/code&gt; or call&amp;#010 draw() explicitly to draw components.  &amp;#010 &lt;P&gt;&amp;#010 Otherwise, if the global setting for autoDraw remains &lt;code&gt;true&lt;/code&gt;, you must set&amp;#010 autoDraw:false, as shown above, on every component in your application that &amp;#010 should not immediately draw: all Canvas children, Layout members, Window items, Tab&amp;#010 panes, etc, however deeply nested.  Forgetting to set autoDraw:false will result in one&amp;#010 more clear()s - these are reported on the Results tab of the &amp;#010 ${isc.DocUtils.linkForRef('group:debugging','Developer Console')}, and can be tracked to individual components by&amp;#010 using the &quot;clears&quot; log category in the Developer Console." name="autoDraw" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('autodraw')}</examples>
    <groups>drawing</groups>
</docItem>
<docItem ref="method:WebService.getFetchDS" flags="" description=" Retrieve a DataSource that provides read-only access to records returned by a web&amp;#010 service operation.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBound Components')} can be bound to the returned&amp;#010 DataSource, and the ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} method can be invoked&amp;#010 to retrieve data from the web service.&amp;#010 &lt;P&gt;&amp;#010 The returned DataSource is only capable of the &quot;fetch&quot; &amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')}, not &quot;update&quot;, &quot;add&quot; or&amp;#010 &quot;remove&quot;.  To create a DataSource capable of full read-write access, use&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.operationBindings')} with the&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} property set to associate each&amp;#010 DataSource operation with a web service operation. &amp;#010&amp;#010" name="getFetchDS" type="method" definingClass="class:WebService">
<params description="name of the web service operation to invoke to fetch                               records" optional="false" name="operationName" type="String">
</params>
<params description="tag or type name of the XML element to be returned as                               DataSource records" optional="false" name="resultType" type="String">
</params>
<params description="Optional additional properties for the operationType:&quot;fetch&quot; &amp;#010 ${isc.DocUtils.linkForRef('class:OperationBinding','operationBinding')} which this method automatically creates.  This&amp;#010 can be used to set properties such as ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')}" optional="true" name="operationBindingProperties" type="OperationBinding Properties">
</params>
    <groups>webService</groups>
</docItem>
<docItem ref="method:TabSet.tabSelected" flags="" description="  Notification fired when a tab is selected. Note that this will only fire if &amp;#010 this tabSet is drawn. If a tab is selected before &lt;code&gt;TabSet.draw()&lt;/code&gt; &amp;#010 is called, the &lt;code&gt;tabSelected()&lt;/code&gt; notificaiton will fire on &amp;#010 &lt;code&gt;draw()&lt;/code&gt;&amp;#010" name="tabSelected" type="method" definingClass="class:TabSet">
<params description="number of the tab" optional="false" name="tabNum" type="number">
</params>
<params description="pane for this tab" optional="false" name="tabPane" type="Canvas">
</params>
<params description="id of the tab" optional="false" name="ID" type="id">
</params>
<params description="the tab object (not tab button instance)" optional="false" name="tab" type="tab">
</params>
</docItem>
<docItem ref="group:Items" name="Items" type="group">
</docItem>
<docItem ref="attr:Snapbar.showDown" flags="IRW" description="Snapbars show mouse-down styling." name="showDown" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
</docItem>
<docItem ref="method:FormItem.setValue" flags="" description=" Set the value of the form item to the value passed in&amp;#010 &lt;p&gt;&amp;#010 NOTE: for valueMap'd items, newValue should be data value not displayed value&amp;#010" name="setValue" type="method" definingClass="class:FormItem">
<params description="value to set the element to" optional="false" name="newValue" type="any">
</params>
</docItem>
<docItem ref="classMethod:isc.echo" flags="" description=" Same as ${isc.DocUtils.linkForRef('method:Log.echo')}.&amp;#010&amp;#010" name="echo" type="classMethod" definingClass="class:isc">
<params description="object to echo" optional="false" name="value" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
</docItem>
<docItem ref="method:StatefulCanvas.getTitle" flags="A" description=" Return the title - text/HTML drawn inside the component.&amp;#010 &lt;p&gt;&amp;#010 Default is to simply return this.title.&amp;#010" name="getTitle" type="method" definingClass="class:StatefulCanvas">
<returns description="HTML for the title" type="string"></returns>
</docItem>
<docItem ref="method:ListGridField.hoverHTML" flags="" description=" StringMethod override point for returning HTML to be shown in hovers over cells in the&amp;#010 column described by this field.&amp;#010 &lt;P&gt;&amp;#010 Called only when ${isc.DocUtils.linkForRef('attr:ListGrid.canHover','canHover')} and ${isc.DocUtils.linkForRef('attr:ListGrid.showHover','showHover')}&amp;#010 are both true.&amp;#010 &lt;P&gt;&amp;#010 The value of &quot;this&quot; within the method will by the ${isc.DocUtils.linkForRef('object:ListGridField','field definition')}.&amp;#010&amp;#010" name="hoverHTML" type="method" definingClass="object:ListGridField">
<params description="record being hovered over" optional="false" name="record" type="ListGridRecord">
</params>
<params description="value of the cell being hovered over" optional="false" name="value" type="any">
</params>
<params description="row number where hover occurred" optional="false" name="rowNum" type="number">
</params>
<params description="column number where hover occurred" optional="false" name="colNum" type="number">
</params>
<params description="ListGrid this field is a part of" optional="false" name="grid" type="ListGrid">
</params>
<returns description="HTML to show in the hover" type="HTML"></returns>
    <examples>${isc.DocUtils.linkForExampleId('valueHoverTips')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem flags="IR" type="attr" ref="attr:Button.iconOrientation" description="If this button is showing an icon should it appear to the left or right of the title?&amp;#010 valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; and &lt;code&gt;&quot;right&quot;&lt;/code&gt;." name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" definingClass="class:Button">
    <setter>setIconOrientation</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonIcons')}</examples>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:FacetValue.cellAlign" flags="IR" description="default alignment of cells (in the body) for this facetValue" name="cellAlign" valueType="alignEnum" defaultValue="facet.cellAlign" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="group:images" description="Refering to and loading images.&amp;#010 &lt;P&gt;&amp;#010 The two main URL settings relevent to loading images are:&lt;br&gt;&amp;#010 * imgDir (where application-specific images live)&lt;br&gt;&amp;#010 * skinImgDir (where system supplied images live)&lt;br&gt;" name="images" type="group">
    <refs>method:Canvas.getImgURL</refs>
    <refs>method:Canvas.imgHTML</refs>
    <refs>method:Canvas.getImage</refs>
    <refs>method:Canvas.setImage</refs>
    <refs>classMethod:Page.setAppImgDir</refs>
    <refs>classMethod:Page.getAppImgDir</refs>
    <refs>classMethod:Page.setAppFilesDir</refs>
    <refs>classMethod:Page.getAppFilesDir</refs>
    <refs>classMethod:Page.setSkinDir</refs>
    <refs>classMethod:Page.getSkinDir</refs>
    <refs>classMethod:Page.getSkinImgDir</refs>
    <refs>classMethod:Page.getImgURL</refs>
    <refs>classMethod:Page.getURL</refs>
    <refs>classMethod:Page.loadStyleSheet</refs>
    <refs>attr:ListGrid.skinImgDir</refs>
    <refs>attr:Splitbar.skinImgDir</refs>
    <refs>attr:ImgSplitbar.skinImgDir</refs>
    <refs>attr:Canvas.appImgDir</refs>
    <refs>attr:Canvas.skinImgDir</refs>
    <refs>attr:TabSet.skinImgDir</refs>
</docItem>
<docItem ref="attr:StatefulCanvas.overCanvasDefaults" flags="IRWA" description="Default properties for this widgets ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas','overCanvas')}. To modify&amp;#010 these defaults, use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}" name="overCanvasDefaults" valueType="Canvas" defaultValue="{ ... }" type="attr" definingClass="class:StatefulCanvas">
</docItem>
<docItem ref="method:ComboBoxItem.filterClientPickListData" flags="" description=" Returns the data to display in the pick list.&amp;#010 &lt;P&gt;&amp;#010 The default implementation applies the criteria returned by &amp;#010 ${isc.DocUtils.linkForRef('method:PickList.getPickListFilterCriteria')} to the data returned by&amp;#010 ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.  A record passes the filter if it has a&amp;#010 matching value for all fields in the criteria object.  Matching is performed according&amp;#010 to ${isc.DocUtils.linkForRef('attr:ComboBoxItem.textMatchStyle')}.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:PickList.showAllOptions')} is set, all values are shown, with matching values&amp;#010 shown below a ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator')}.&amp;#010&amp;#010" name="filterClientPickListData" type="method" definingClass="class:ComboBoxItem">
<returns description="array of record objects to display in the pickList" type="Array of ListGridRecord"></returns>
</docItem>
<docItem ref="attr:Tree.data" flags="IR" description="Optional initial data for the tree. How this data is interpreted depends on this tree's&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.modelType')}.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;modelType&lt;/code&gt; is &lt;code&gt;&quot;parent&quot;&lt;/code&gt;, the list that you provide will be passed &amp;#010 to ${isc.DocUtils.linkForRef('method:Tree.linkNodes')}, integrating the nodes into the tree.&amp;#010 &lt;p&gt;&amp;#010 In this case the root node must be supplied separately via ${isc.DocUtils.linkForRef('attr:Tree.root')}, or you may instead provide&amp;#010 the &lt;code&gt;id&lt;/code&gt; of the root node via ${isc.DocUtils.linkForRef('attr:Tree.rootValue')}.  So for example, to create&amp;#010 this tree:&amp;#010 &lt;pre&gt;&amp;#010 foo&amp;#010   bar&amp;#010 zoo&amp;#010 &lt;/pre&gt;&amp;#010 with modelType:&quot;parent&quot;, you can do this:&amp;#010 &lt;pre&gt;&amp;#010 Tree.create({&amp;#010   root: {id: &quot;root&quot;},&amp;#010   data: [&amp;#010     {name: &quot;foo&quot;, id: &quot;foo&quot;, parentId: &quot;root&quot;},&amp;#010     {name: &quot;bar&quot;, id: &quot;bar&quot;, parentId: &quot;foo&quot;},&amp;#010     {name: &quot;zoo&quot;, id: &quot;zoo&quot;, parentId: &quot;root&quot;}&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 Or this:&amp;#010 &lt;pre&gt;&amp;#010 Tree.create({&amp;#010   rootValue: &quot;root&quot;,&amp;#010   data: [&amp;#010     {name: &quot;foo&quot;, id: &quot;foo&quot;, parentId: &quot;root&quot;},&amp;#010     {name: &quot;bar&quot;, id: &quot;bar&quot;, parentId: &quot;foo&quot;},&amp;#010     {name: &quot;zoo&quot;, id: &quot;zoo&quot;, parentId: &quot;root&quot;}&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 Specifying the root node explicitly allows you to give it a name, changing the way path&amp;#010 derivation works (see ${isc.DocUtils.linkForRef('attr:Tree.root')} for more on naming the root node).&amp;#010 &lt;P&gt;&amp;#010 For &lt;code&gt;modelType:&quot;children&quot;&lt;/code&gt; trees, the data passed in will be assumed to be an &amp;#010 array of children the tree's root node." name="data" valueType="List of TreeNode" defaultValue="null" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<seeAlso ref="object:TreeNode">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="method:DynamicForm.getItems" flags="" description=" Method to retrieve the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. &amp;#010&amp;#010" name="getItems" type="method" definingClass="class:DynamicForm">
<params description="list of new items to show in the form" optional="false" name="itemList" type="Array of objects">
</params>
    <groups>elements</groups>
</docItem>
<docItem ref="classAttr:RPCManager.showPrompt" flags="RW" description="If set to &lt;code&gt;true&lt;/code&gt;, the RPCManager will block the UI with a modal dialog containing&amp;#010 the text from RPCManager.defaultPrompt (or the per-RPCRequest override) until the RPC to the&amp;#010 server completes.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 If set to &lt;code&gt;false&lt;/code&gt;, the RPC happens transparently, allowing the user to continue&amp;#010 interacting with the UI" name="showPrompt" valueType="boolean" defaultValue="RPCManager.showPrompt" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="classAttr:RPCManager.defaultPrompt">
</seeAlso>
<seeAlso ref="attr:RPCRequest.showPrompt">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="attr:Canvas.extraSpace" flags="IR" description="When this Canvas is included as a member in a Layout, extra blank space that should be left&amp;#010 after this member in a Layout." name="extraSpace" valueType="positiveInteger" defaultValue="0" type="attr" definingClass="class:Canvas">
<seeAlso ref="class:LayoutSpacer" description="for more control"></seeAlso>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="classMethod:isc.propertyDefined" flags="" description="&amp;#010	Is some property specified on the object passed in?  This will return true if &amp;#010  &lt;code&gt;object[propertyName]&lt;/code&gt; has ever been set to any value, and not deleted.&lt;br&gt;&amp;#010  May return true even if &lt;code&gt;object[propertyName] === undefined&lt;/code&gt; if the property &amp;#010  is present on the object and has been explicitly set to undefined.&amp;#010&amp;#010" name="propertyDefined" type="classMethod" definingClass="class:isc">
<params description="object to get properties from" optional="false" name="object" type="object">
</params>
<returns description="values of all properties" type="object[]"></returns>
</docItem>
<docItem ref="attr:TreeGrid.parentAlreadyContainsChildMessage" flags="IR" description="Message displayed when user attempts to drag a node into a parent that already contains&amp;#010 a child of the same name." name="parentAlreadyContainsChildMessage" valueType="String" defaultValue="&quot;This item already contains a child item with that name.&quot;" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.canDragRecordsOut">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canAcceptDroppedRecords">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canReorderRecords">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:TabSet.removeTabs" flags="A" description=" Remove one or more tabs.  The pane(s) associated with the removed tab(s) is automatically&amp;#010 destroyed when you call this method.&amp;#010&amp;#010" name="removeTabs" type="method" definingClass="class:TabSet">
<seeAlso ref="method:TabSet.removeTab">
</seeAlso>
<params description="list of tabs, tabIDs, or tab numbers" optional="false" name="tabs" type="Tab | ID | number">
</params>
</docItem>
<docItem ref="attr:StretchImgButton.showFocused" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  If&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is &lt;code&gt;true&lt;/code&gt;, the &lt;b&gt;&lt;code&gt;&quot;over&quot;&lt;/code&gt;&lt;/b&gt;&amp;#010 will be used to indicate focus. Otherwise a separate &lt;b&gt;&lt;code&gt;&quot;focused&quot;&lt;/code&gt;&lt;/b&gt; state&amp;#010 will be used." name="showFocused" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:RPCResponse.clientContext" flags="R" description="The ${isc.DocUtils.linkForRef('attr:RPCRequest.clientContext')} object as set on the ${isc.DocUtils.linkForRef('class:RPCRequest')}." name="clientContext" valueType="Object" defaultValue="null" type="attr" definingClass="class:RPCResponse">
<seeAlso ref="attr:RPCRequest.clientContext">
</seeAlso>
</docItem>
<docItem ref="method:TreeGrid.getIcon" flags="" description=" Get the appropriate icon for a node.&amp;#010 &lt;P&gt;&amp;#010 By default icons are derived from ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} and ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')}.&amp;#010 Custom icons for for individual nodes can be overriden by setting the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}&amp;#010 on a node.&amp;#010 &lt;p&gt;&amp;#010 If you want to suppress icons altogether, provide an override of this method that simply&amp;#010 returns null.&amp;#010 &lt;p&gt; &amp;#010 Note that the full icon URL will be derived by applying ${isc.DocUtils.linkForRef('method:Canvas.getImgURL')} to the&amp;#010 value returned from this method.&amp;#010&amp;#010" name="getIcon" type="method" definingClass="class:TreeGrid">
<params description="tree node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="URL for icon to show for this node" type="URL"></returns>
</docItem>
<docItem ref="classMethod:isc.getIconPageRect" flags="A" description="  Returns the size / position of an icon on the page as an array of coordinates.&amp;#010" name="getIconPageRect" type="method" definingClass="class:isc">
<params description="icon definition for the icon you want to determine the                               position of (defaults to first icon in this.icons)." optional="false" name="icon" type="object">
</params>
<returns description="four element array representing the Left, Top, Width, and Height of                      the icon in px." type="array"></returns>
</docItem>
<docItem ref="classAttr:Date.shortMonthNames" flags="IRWA" description="This property may be set to an array of names of months.&lt;br&gt;&amp;#010 For example:&amp;#010 &lt;pre&gt;&amp;#010 [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]&amp;#010 &lt;/pre&gt;&amp;#010 The appropriate month name will then be returned from ${isc.DocUtils.linkForRef('method:Date.getShortMonthName')}, &amp;#010 and may be used whenever  SmartClient components display month-names (for example in the &amp;#010 ${isc.DocUtils.linkForRef('class:DateItem','DateItem class')})." name="shortMonthNames" valueType="Array" defaultValue="null" type="classAttr" definingClass="class:Date">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:DynamicForm.rememberValues" flags="" description="			Make a snapshot of the current set of values, so we can reset to them later.&amp;#010			Creates a new object, then adds all non-method properties of values&amp;#010			to the new object.  Use &lt;code&gt;resetValues()&lt;/code&gt; to revert to these values.&amp;#010          Note that this method is automatically called when the values for this form are&amp;#010          set programmatically via a call to ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.&amp;#010&amp;#010" name="rememberValues" type="method" definingClass="class:DynamicForm">
<returns description="copy of current form values" type="object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:SelectItem.pickButtonHeight" deprecated="As of SmartClient version 5.5, pickButtonHeight has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconHeight')}." flags="IRWA" description="How large should the pick button be rendered?" name="pickButtonHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="attr:RPCRequest.clientContext" flags="IRW" description="An object to be held onto for the duration of the RPC turnaround to track&amp;#010 application-specific context.&amp;#010 &lt;br&gt;&amp;#010 When an RPC turnaround completes, the &lt;code&gt;clientContext&lt;/code&gt; is available in the&amp;#010 ${isc.DocUtils.linkForRef('type:RPCCallback')} as &lt;code&gt;rpcResponse.clientContext&lt;/code&gt;.  The&amp;#010 &lt;code&gt;clientContext&lt;/code&gt; is never sent to the server.&amp;#010 &lt;br&gt;&amp;#010 The &lt;code&gt;clientContext&lt;/code&gt; is useful for holding onto state that will be used when the&amp;#010 ${isc.DocUtils.linkForRef('type:RPCCallback')} fires, such as the name of a component that will receive the&amp;#010 returned data." name="clientContext" valueType="Object" defaultValue="null" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="attr:RPCResponse.clientContext">
</seeAlso>
</docItem>
<docItem ref="attr:Applet.alt" flags="IR" description="This text is displayed if the browser understands the tag used for the applet html element,&amp;#010  but can't run the applet for some reason." name="alt" valueType="string" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.altHTML">
</seeAlso>
<seeAlso ref="attr:Applet.useTag">
</seeAlso>
</docItem>
<docItem ref="attr:Tree.autoOpenRoot" flags="IRW" description="If true, the root node is automatically opened when the tree is created or&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.setRoot')} is called." name="autoOpenRoot" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Tree">
</docItem>
<docItem ref="class:NativeCheckboxItem" description="A checkbox for manipulating 2-valued fields based on the native checkbox element." name="NativeCheckboxItem" type="class">
    <attrs>attr:NativeCheckboxItem.showLabel</attrs>
</docItem>
<docItem ref="attr:CubeGrid.canSelectHeaders" flags="IRW" description="Determines whether row or column facetValue headers can be selected." name="canSelectHeaders" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="method:GridRenderer.rowClick" flags="A" description=" Called when a row receives a click event.&amp;#010&amp;#010" name="rowClick" type="method" definingClass="class:GridRenderer">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:DateChooser.prevMonthIconWidth" flags="IRW" description="Width of the icon for the previous month button" name="prevMonthIconWidth" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:StretchImgButton.setIconOrientation" flags="" description=" Changes the orientation of the icon relative to the text of the button.&amp;#010&amp;#010" name="setIconOrientation" type="method" definingClass="class:StretchImgButton">
<params description="The new orientation of the icon relative to the text of the button." optional="false" name="orientation" type="&quot;left&quot; or &quot;right&quot;">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Canvas.getSnapEdge" flags="" description=" Return the snapEdge value of this object&amp;#010" name="getSnapEdge" type="method" definingClass="class:Canvas">
<returns description="snapEdge" type="string"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="group:draw" name="draw" type="group">
</docItem>
<docItem ref="method:Layout.getMembers" flags="" description=" Get the Array of members.&lt;br&gt;&lt;br&gt;&amp;#010 &amp;#010 NOTE: the returned array should not be modified.&amp;#010" name="getMembers" type="method" definingClass="class:Layout">
<returns description="the Array of members" type="Array"></returns>
</docItem>
<docItem ref="attr:DataSource.pluralTitle" flags="IRW" description="User-visible plural name for this DataSource.&amp;#010 &lt;P&gt;&amp;#010 For example, for the supplyItem DataSource, &quot;Supply Items&quot;.&amp;#010 &lt;P&gt;&amp;#010 Defaults to (&lt;code&gt;dataSource.title&lt;/code&gt; or &lt;code&gt;dataSource.ID&lt;/code&gt;) + &quot;s&quot;." name="pluralTitle" valueType="string" defaultValue="dataSource.ID" type="attr" definingClass="class:DataSource">
    <groups>titles</groups>
</docItem>
<docItem ref="attr:RowSpacerItem.showTitle" flags="IRW" description="we never show a separate title cell for separators" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RowSpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:History.setHistoryTitle" flags="" description="&amp;#010 Sets the title associated with all history entries.  This is the string that appears in the&amp;#010 history drop-down.  If left unset, this default to the history id that is passed into&amp;#010 ${isc.DocUtils.linkForRef('classMethod:History.addHistoryEntry')}.&amp;#010 &lt;p&gt;&amp;#010 Note: Currently, this works in IE only.  You may call this method in all other browsers,&amp;#010 but it will not change what's displayed in the history drop-down.&amp;#010&amp;#010" name="setHistoryTitle" type="classMethod" definingClass="class:History">
<params description="The title to show in the history drop-down." optional="false" name="title" type="String">
</params>
</docItem>
<docItem ref="method:FormItem.keyPress" flags="" description=" StringMethod fired when the user presses a key while focused in this form item.&amp;#010" name="keyPress" type="method" definingClass="class:FormItem">
<params description="Item over which the keypress occurred" optional="false" name="item" type="FormItem">
</params>
<params description="Pointer to the item's form" optional="false" name="form" type="DynamicForm">
</params>
<params description="Name of the key pressed (Example: &lt;code&gt;&quot;A&quot;&lt;/code&gt;, &lt;code&gt;&quot;Enter&quot;&lt;/code&gt;)" optional="false" name="keyName" type="KeyName">
</params>
<params description="If this was a character key, this is the numeric value for the character" optional="false" name="characterValue" type="number">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="attr:ListGridField.canGroupBy" flags="IRW" description="Determines whether this field will be groupable in the header context menu." name="canGroupBy" valueType="Boolean" defaultValue="true" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
</docItem>
<docItem ref="attr:RPCRequest.prompt" flags="IRW" description="Overrides RPCManager.defaultPrompt for this request only.  If you're using queuing, note that the&amp;#010 prompt string from the first request in the queue is the one that is shown to the user." name="prompt" valueType="string" defaultValue="RPCManager.defaultPrompt" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.defaultPrompt">
</seeAlso>
<seeAlso ref="classAttr:RPCManager.showPrompt">
</seeAlso>
<seeAlso ref="classAttr:RPCManager.promptStyle">
</seeAlso>
<seeAlso ref="classAttr:RPCManager.promptCursor">
</seeAlso>
<seeAlso ref="attr:RPCRequest.showPrompt">
</seeAlso>
<seeAlso ref="attr:RPCRequest.promptStyle">
</seeAlso>
<seeAlso ref="attr:RPCRequest.promptCursor">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="group:drag" name="drag" type="group">
    <refs>type:DragDataAction</refs>
</docItem>
<docItem ref="attr:ImgButton.showDisabled" flags="IRW" description="Should we visibly change state when disabled?" name="showDisabled" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="classAttr:Dialog.PASSWORD_TITLE" flags="IRW" description="Default title for the &quot;password&quot; field in the dialog displayed by &amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}." name="PASSWORD_TITLE" valueType="HTML" defaultValue="&quot;Password&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.pickerIconWidth" flags="IRW" description="Default the picker icon to a fixed with (15px)." name="pickerIconWidth" valueType="number" defaultValue="15" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:Snapbar.showClosedGrip" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether the grip image&amp;#010 displayed should show the &lt;code&gt;&quot;Closed&quot;&lt;/code&gt; state when the ${isc.DocUtils.linkForRef('attr:Splitbar.target')} &amp;#010 is hidden." name="showClosedGrip" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:Canvas.canDragReposition" flags="IRWA" description="Indicates whether this widget can be moved by a user of your application by simply&amp;#010      dragging with the mouse." name="canDragReposition" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragEffects')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ImgButton.showFocused" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  If&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is &lt;code&gt;true&lt;/code&gt;, the &lt;b&gt;&lt;code&gt;&quot;over&quot;&lt;/code&gt;&lt;/b&gt;&amp;#010 will be used to indicate focus. Otherwise a separate &lt;b&gt;&lt;code&gt;&quot;focused&quot;&lt;/code&gt;&lt;/b&gt; state&amp;#010 will be used." name="showFocused" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="method:ImgButton.removeFromRadioGroup" flags="" description=" Remove this widget from the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 No-op's if this widget is not a member of the groupID passed in.&amp;#010 If no groupID is passed in, defaults to removing from whatever radioGroup this widget&amp;#010 is a member of.&amp;#010" name="removeFromRadioGroup" type="method" definingClass="class:ImgButton">
<params description="- optional radio group ID (to ensure the widget is removed                                        from the appropriate group." optional="true" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:Layout.getDropPosition" flags="A" description="&amp;#010 Get the position a new member would be dropped.  This drop position switches in the&amp;#010 middle of each member, and both edges (before beginning, after end) are legal drop positions&amp;#010 &lt;p&gt;&amp;#010 Use this method to obtain the drop position for e.g. a custom drop handler.&amp;#010&amp;#010" name="getDropPosition" type="method" definingClass="class:Layout">
<returns description="the position a new member would be dropped" type="integer"></returns>
</docItem>
<docItem ref="method:GridRenderer.cellHoverHTML" flags="A" description=" StringMethod to dynamically assemble an HTML string to show in a hover window over the&amp;#010 appropriate cell/record when this.canHover and this.showHover are both true.&amp;#010 Called when the mouse hovers over a cell.&amp;#010&amp;#010" name="cellHoverHTML" type="method" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.canHover">
</seeAlso>
<seeAlso ref="attr:GridRenderer.showHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="the html to be shown inside the hover for this cell" type="html"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:String.endsWith" flags="" description="			Returns true if this string ends with another string.&amp;#010" name="endsWith" type="method" definingClass="class:String">
<params description="other string to check" optional="false" name="substring" type="String">
</params>
<returns description="true == this string ends with substring" type="boolean"></returns>
    <groups>stringProcessing</groups>
</docItem>
<docItem ref="group:positioning" description="Horizontal and vertical location on the page" name="positioning" type="group">
    <refs>method:Button.setAlign</refs>
    <refs>method:Button.setVAlign</refs>
    <refs>method:Canvas.setSnapTo</refs>
    <refs>method:Canvas.getSnapTo</refs>
    <refs>method:Canvas.setSnapEdge</refs>
    <refs>method:Canvas.getSnapEdge</refs>
    <refs>method:Canvas.setRect</refs>
    <refs>method:Canvas.getLeft</refs>
    <refs>method:Canvas.setLeft</refs>
    <refs>method:Canvas.getTop</refs>
    <refs>method:Canvas.setTop</refs>
    <refs>method:Canvas.getRight</refs>
    <refs>method:Canvas.getBottom</refs>
    <refs>method:Canvas.getScrollLeft</refs>
    <refs>method:Canvas.getScrollTop</refs>
    <refs>method:Canvas.setPageLeft</refs>
    <refs>method:Canvas.setPageTop</refs>
    <refs>method:Canvas.getPageLeft</refs>
    <refs>method:Canvas.getPageTop</refs>
    <refs>method:Canvas.getPageRight</refs>
    <refs>method:Canvas.getPageBottom</refs>
    <refs>method:Canvas.containsPoint</refs>
    <refs>method:Canvas.visibleAtPoint</refs>
    <refs>method:Canvas.intersects</refs>
    <refs>method:Canvas.intersectsRect</refs>
    <refs>method:Canvas.containsEvent</refs>
    <refs>method:Canvas.getOffsetX</refs>
    <refs>method:Canvas.getOffsetY</refs>
    <refs>method:Canvas.moveBy</refs>
    <refs>method:Canvas.moveTo</refs>
    <refs>method:Canvas.getVSnapOrigin</refs>
    <refs>method:Canvas.getHSnapOrigin</refs>
    <refs>method:Canvas.setOverflow</refs>
    <refs>attr:Label.align</refs>
    <refs>attr:Label.valign</refs>
    <refs>attr:Canvas.htmlElement</refs>
    <refs>attr:Canvas.htmlPosition</refs>
    <refs>attr:Canvas.position</refs>
    <refs>attr:Canvas.left</refs>
    <refs>attr:Canvas.top</refs>
    <refs>attr:ImgTab.align</refs>
    <refs>type:Positioning</refs>
</docItem>
<docItem ref="attr:Layout.showDragPlaceHolder" flags="IRW" description="If set to true, when a member is dragged out of layout, a visible placeholder canvas &amp;#010 will be displayed in place of the dragged widget for the duration of the drag and drop&amp;#010 interaction." name="showDragPlaceHolder" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Layout">
    <examples>${isc.DocUtils.linkForExampleId('dragMove')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:CubeGrid.selectAllCells" flags="" description="&amp;#010  select all cells&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectAllCells" type="method" definingClass="class:CubeGrid">
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DataSource.ID" flags="IR" description="Unique identifier for this DataSource.  Required for all DataSources.&amp;#010&amp;#010 DataSources will make themselves available as JavaScript globals under the same name&amp;#010 as their ID only if &lt;code&gt;addGlobalId&lt;/code&gt; is set." name="ID" valueType="string" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>identity</groups>
</docItem>
<docItem ref="attr:TabSet.tabBar" flags="R" description="TabBar for this TabSet, an instance of ${isc.DocUtils.linkForRef('class:TabBar')}." name="tabBar" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:Canvas.getScrollHeight" flags="A" description="			Returns the scrollable height of the widget's contents, including children, ignoring&amp;#010          clipping.&amp;#010" name="getScrollHeight" type="method" definingClass="class:Canvas">
<returns description="height of the element that can scroll" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Canvas.addChild" flags="" description=" Adds newChild as a child of this widget, set up a named object reference (i.e., this[name])&amp;#010 to the new widget if name argument is provided, and draw the child if this widget has been&amp;#010 drawn already.&amp;#010 &lt;P&gt;&amp;#010 If newChild has a parent it will be removed from it. If it has a master, it will be detached&amp;#010 from it if the master is a child of a different parent. If newChild has peers, they'll be&amp;#010 added to this widget as children as well.&amp;#010&amp;#010" name="addChild" type="method" definingClass="class:Canvas">
<params description="new child canvas to add" optional="false" name="newChild" type="canvas">
</params>
<params description="name to assign to child (eg: this[name] == child)" optional="true" name="name" type="string">
</params>
<params description="if false, child will not automatically be drawn (only                                          for advanced use)" optional="true" name="autoDraw" type="boolean">
</params>
<returns description="the new child, or null if it couldn't be added" type="canvas"></returns>
    <groups>containment</groups>
</docItem>
<docItem ref="attr:Applet.objectCodeBase" flags="IR" description="This attribute is used only with useTag: &quot;object&quot;.  In combination with &amp;#010  ${isc.DocUtils.linkForRef('attr:Applet.classID')} this tag specifies the minimum JVM version required to view&amp;#010  this applet and the URL from which the JVM can be downloaded.&amp;#010  &lt;p&gt;&amp;#010  The default settings match the default behavior of the &amp;lt;applet&amp;gt; tag which requires JVM&amp;#010  1.3 or higher.&amp;#010  &lt;p&gt;&amp;#010  The default objectCodeBase is: &quot;http://java.sun.com/products/plugin/1.3/jinstall-13-win32.cab#Version=1,3,0,0&quot;&amp;#010  &lt;p&gt;&amp;#010  For notes on this feature see: &lt;a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie' onclick=&quot;window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie');return false;&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie&lt;/a&gt;" name="objectCodeBase" valueType="string" defaultValue="see below" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.classID">
</seeAlso>
</docItem>
<docItem ref="attr:ListGridField.iconOrientation" flags="IR" description="If this field is showing an icon, should it appear to the left or right of the title?&lt;br&gt;&amp;#010 Valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; or &lt;code&gt;&quot;right&quot;&lt;/code&gt;" name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
</docItem>
<docItem ref="attr:TabSet.showTabScroller" flags="IR" description="If there is not enough space to display all the tab-buttons in this tabSet, should &amp;#010 scroller buttons be displayed to allow access to tabs that are clipped?" name="showTabScroller" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="attr:OperationBinding.dataTransport" flags="IR" description="Transport to use for this operation.  Defaults to ${isc.DocUtils.linkForRef('attr:DataSource.dataTransport')}, which in&amp;#010 turn defaults to ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  This would typically only be set to&amp;#010 enable &quot;scriptInclude&quot; transport for contacting ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} web&amp;#010 services hosted on servers other than the origin server.&amp;#010 &lt;p&gt;&amp;#010 When using the &quot;scriptInclude&quot; transport, be sure to set ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.callbackParam')} to match the name of the query parameter name expected&amp;#010 by your JSON service provider." name="dataTransport" valueType="RPCTransport" defaultValue="RPCManager.defaultTransport" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="type:RPCTransport">
</seeAlso>
<seeAlso ref="attr:DataSource.callbackParam">
</seeAlso>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:FormItem.imageURLPrefix" flags="IRWA" description="Prefix to apply to the beginning of any ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} when determining the&amp;#010 URL for the image.&amp;#010 Will not be applied if the &lt;code&gt;valueIcon&lt;/code&gt; URL is absolute." name="imageURLPrefix" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:SelectItem.pickButtonWidth" deprecated="As of SmartClient version 5.5, pickButtonWidth has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconWidth')}." flags="IRWA" description="How large should the pick button be rendered?" name="pickButtonWidth" valueType="number" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem flags="IRW" type="attr" ref="attr:DataBoundComponent.dataSource" description="The DataSource that this component should bind to for default fields and for performing&amp;#010 ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.&amp;#010 &lt;P&gt;&amp;#010 Can be specified as either a DataSource instance or the String ID of a DataSource." name="dataSource" valueType="DataSource or ID" defaultValue="null" definingClass="interface:DataBoundComponent">
    <setter>setDataSource</setter>
    <examples>${isc.DocUtils.linkForExampleId('dataSourceFields')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:ToolStrip.resizeBarClass" flags="IRW" description="Customized resizeBar with typical appearance for a ToolStrip" name="resizeBarClass" valueType="String" defaultValue="&quot;ToolStripResizer&quot;" type="attr" definingClass="class:ToolStrip">
</docItem>
<docItem ref="method:CubeGrid.getFacetsHavingSelection" flags="" description="&amp;#010  return the list of facets that have any selection in their headers&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getFacetsHavingSelection" type="method" definingClass="class:CubeGrid">
<returns description="list of facets that have any selection in their headers" type="Array"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Canvas.getParentElements" flags="A" description="      Returns an array of object references to all ancestors of this widget in the containment&amp;#010      hierarchy, starting with the direct parent and ending with the top element.&amp;#010" name="getParentElements" type="method" definingClass="class:Canvas">
<returns description="array of parentElements, closest first; empty array if no parentElements" type="array"></returns>
    <groups>containment</groups>
</docItem>
<docItem ref="method:Canvas.sendToBack" flags="" description=" Puts this widget at the bottom of the stacking order, so it appears behind all other&amp;#010 widgets in the same parent.&amp;#010" name="sendToBack" type="method" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('layer')}</examples>
    <groups>zIndex</groups>
</docItem>
<docItem ref="group:flags" title="Flag Abbreviations" description="&lt;ul&gt;&amp;#010 &lt;li&gt; &lt;b&gt;I&lt;/b&gt;: property can be initialized (provided in constructor block)&amp;#010 &lt;li&gt; &lt;b&gt;R&lt;/b&gt;: property can be read.  If a getter method exists, it must be called.&amp;#010 &lt;li&gt; &lt;b&gt;W&lt;/b&gt;: property can be written to after initialization.  If a setter method&amp;#010 exists, it must be called.  If no setter method exists,&amp;#010 ${isc.DocUtils.linkForRef('method:Class.setProperty','setProperty()')} must be called.&amp;#010 &lt;/ul&gt;" name="flags" type="group">
</docItem>
<docItem ref="method:CubeGrid.hiliteFacetValue" flags="" description="&amp;#010      apply a hilite to all cells corresponding to a facetValue.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="hiliteFacetValue" type="method" definingClass="class:CubeGrid">
<params description="facet ID" optional="false" name="facetID" type="string">
</params>
<params description="facet value ID" optional="false" name="facetValueID" type="string">
</params>
<params description="hilite ID" optional="false" name="hiliteID" type="string">
</params>
<returns description="true if the cells were successfully hilited." type="boolean"></returns>
    <groups>hiliting</groups>
</docItem>
<docItem ref="group:docViewerHelp" title="SmartClient Reference Overview" description="Welcome to the SmartClient Reference.  Click on a topic in the tree on the left to show&amp;#010 documentation in this pane or type some search terms into the search box in the upper left&amp;#010 and hit Enter.&amp;#010 &lt;p&gt;&amp;#010 To bring back this help page, click the blue question mark in the upper right corner." name="docViewerHelp" type="group">
</docItem>
<docItem ref="method:Canvas.setMargin" flags="" description=" Set the CSS Margin, in pixels, for this component.  Margin provides blank space outside of&amp;#010 the border.&amp;#010 &lt;P&gt;&amp;#010 This property sets the same thickness of margin on every side.  Differing per-side&amp;#010 margins can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.&amp;#010 &lt;P&gt;&amp;#010 Note that the specified size of the widget will be the size &lt;b&gt;including&lt;/b&gt; the margin&amp;#010 thickness on each side.&amp;#010 &amp;#010" name="setMargin" type="method" definingClass="class:Canvas">
<params description="new margin in pixels" optional="false" name="margin" type="number">
</params>
</docItem>
<docItem ref="method:ListGrid.getToggleFreezeText" flags="" description=" If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the&amp;#010 title for the menu item to toggle whether a field is frozen or unfrozen.&lt;br&gt;&amp;#010 Default implementation returns &lt;code&gt;&quot;Freeze &quot;&lt;/code&gt; or &lt;code&gt;&quot;Unfreeze &quot;&lt;/code&gt; + the field's&amp;#010 title.&amp;#010" name="getToggleFreezeText" type="method" definingClass="class:ListGrid">
<params description="field to get the menu item title for" optional="false" name="field" type="ListGridField">
</params>
<returns description="Title to show in the menu item" type="string"></returns>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="classAttr:Dialog.LOGIN_ERROR_MESSAGE" flags="IRW" description="Default error message displayed on failed login in the dialog shown by &amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}." name="LOGIN_ERROR_MESSAGE" valueType="HTML" defaultValue="&quot;Invalid username or password&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Canvas.containsEvent" flags="" description="			Return true if the last event's mouse coordinates are within the bounds of this component.&amp;#010		NOTE: Z-ordering is not considered for the purposes of this test.  If the coordinate you're&amp;#010		testing is occluded by other component, but the X,Y coordiates are still within the bounds&amp;#010		of that component, this method will return true.&amp;#010&amp;#010" name="containsEvent" type="method" definingClass="class:Canvas">
<returns description="true if the event occurred within the bounds of this component" type="boolean"></returns>
    <groups>events</groups>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:ListGridField.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="type:SendMethod" name="SendMethod" type="type">
<values description="GET method (regular URL encoding)" value="&quot;GET&quot;"></values>
<values description="POST method (form field encoding)" value="&quot;POST&quot;"></values>
    <groups>communication</groups>
</docItem>
<docItem ref="method:ResultSet.getCriteria" flags="" description=" Get the current criteria for this ResultSet.&amp;#010" name="getCriteria" type="method" definingClass="class:ResultSet">
<returns description="current criteria" type="Criteria"></returns>
</docItem>
<docItem ref="method:Chart.getValue" flags="" description=" Lookup a data value by the set of matching facetValues expressed as a&amp;#010 ${isc.DocUtils.linkForRef('type:FacetValueMap')}.  Automatically handles the ${isc.DocUtils.linkForRef('attr:Chart.data','inlinedFacet')}, if any.&amp;#010 &lt;P&gt;&amp;#010 This method is designed to be called by a concrete Chart implementation.&amp;#010 &lt;P&gt;&amp;#010 As a special case, if ${isc.DocUtils.linkForRef('attr:Chart.data')} is a single Object and the only facet is&amp;#010 ${isc.DocUtils.linkForRef('attr:Chart.data','inlined')}, any value can be used as the single facetId required.  For example, a&amp;#010 legal FacetValueMap in this case would be {inlined:&quot;west&quot;}.&amp;#010&amp;#010" name="getValue" type="method" definingClass="interface:Chart">
<params description="set of facetValues describing the data value to retrieve" optional="false" name="criteria" type="FacetValueMap">
</params>
<returns description="matching value from the dataset, or null if no value exists" type="any"></returns>
</docItem>
<docItem ref="group:strutsIntegration" title="Integration with Struts" description="&lt;b&gt;Overview of SmartClient integration with Struts and other popular server-side&amp;#010 frameworks.&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 Current and upcoming server-side frameworks solve a lot of problems endemic to the past&amp;#010 generation of web applications.  Piles of JSPs and Servlets have been replaced by MVC and&amp;#010 other paradigms that enhance developer productivity.  Unfortunately the end-user&amp;#010 presentation remains vanilla HTML.  SmartClient solves this problem by providing rich&amp;#010 databindable components. SmartClient was designed to integrate cleanly with existing&amp;#010 server-side frameworks.  Because SmartClient components only require an HTML context to&amp;#010 render, they can be used with any server-side frameworks that use HTML for presentation.&amp;#010 &lt;p&gt;&amp;#010 SmartClient provides a rich UI by doing more work on the client (browser) rather than&amp;#010 sending every user action to the server for re-rendering.  Instead of doing page transitions&amp;#010 to redraw the whole page, SmartClient sends RPC (Remote Procedure Call) requests (or AJAX&amp;#010 requests) to the server while the UI allows the user to continue interacting with the&amp;#010 system.  Current server-side frameworks, on the other hand are typically designed around&amp;#010 page transitions - for example in Struts user actions are typically mapped to URLs that&amp;#010 dispatch through a central servlet and ultimately return new HTML to be rendered by the&amp;#010 browser.  The problem with page transitions is that they destroy client-side state and&amp;#010 introduce client-server latency (and generally use more bandwidth since HTML is sent over&amp;#010 the wire rather than just data) - essentially destroying a large part of the Rich&amp;#010 Internet Application (RIA) experience.&amp;#010 &lt;p&gt;&amp;#010 Fortunately, there's a way to get the best of both worlds - to leverage the power of your&amp;#010 favorite server-side framework and combine it with the SmartClient UI.  There are several&amp;#010 approaches to integrating SmartClient into an existing framework:&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Plug-replacing HTML components with SmartClient components&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 SmartClient components can be instructed to draw at page load time using by specifying&amp;#010 &lt;code&gt;position: &quot;relative&quot;&lt;/code&gt; at construction time.  This enables you to replace any&amp;#010 chunk of HTML with a SmartClient component - the new component simply inserts its HTML in&amp;#010 the page flow during page load.  This is the easiest integration option - you get a better&amp;#010 UI with minimal work.  The downside is that you don't get the full power of a rich client&amp;#010 because most user actions will still trigger a page transition.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Eliminating page transitions&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Most SmartClient components can accept new data (or even dynamically pre-fetch and expire&amp;#010 data) without needing to be recreated.  For example - let's say you want to draw a grid on a&amp;#010 page.  In a traditional server-side-rendered application the server would generate all of&amp;#010 the html with a &quot;next 20 records&quot; and &quot;previous 20 records&quot; buttons. When the user wants to&amp;#010 see the next set of data, he clicks one of the buttons and the server replaces the entire&amp;#010 page with a new grid that contains the next/previous 20 records.  In a SmartClient&amp;#010 application, you would create a databound ListGrid.  Based on its configuration this grid&amp;#010 will fetch the first N (say 20) records and display a scrollbar for the user to scroll&amp;#010 through the data.  When the user scrolls off the last cached record the ListGrid&amp;#010 automatically sends an RPC to the server asking for the next 20 records.  This RPC (fetch)&amp;#010 is performed without destroying the page the user is currently looking at - it just happens&amp;#010 seamlessly in the background.  If the user now scrolls back to the first 20 records -&amp;#010 they're already cached in the grid, so no fetch is performed.  Of course, in a real world&amp;#010 application, it's typical that a page has hundreds of components and in a server-side-only&amp;#010 rendering all of them need to be rebuilt by the server and resent to the client when a piece&amp;#010 of data in just one needs to be updated.  SmartClient components can intelligently update&amp;#010 just their data without the need to redraw the whole page.&amp;#010 &lt;p&gt;&amp;#010 The plug-replacement strategy listed above gives us a SmartClient component in place of a&amp;#010 raw HTML rendering.  Now we need to databind that component so that actions like scrolling a&amp;#010 grid or validating a form don't cause a page transition.  The SmartClient RPC mechanism has&amp;#010 a default actionURL that's configurable by the end user.  This allows you to funnel all RPC&amp;#010 requests through a central dispatcher like the Struts Action servlet.&amp;#010 SmartClient RPCs are just HTTP requests with XML payloads that can be accessed using the&amp;#010 provided Java APIs (RPCManager Java class and associated classes).  On the other hand you&amp;#010 can decide to have the SmartClient RPCs work out of band of something like the Action&amp;#010 servlet - the choice is up to you.  Usually funnelling through the Action servlet makes&amp;#010 sense if you have a need to centrally capture all requests - for example for later playback&amp;#010 during load or QA testing.&amp;#010 &lt;p&gt;&amp;#010 Here's what the code would look like to accomplish the funneling (for example with the&amp;#010 Struts Action servlet):&amp;#010 &lt;pre&gt;&amp;#010 On the client - the following line of code forces all SmartClient RPC requests to make&amp;#010 requests to the /smartClientRPC.do URL that would then be intercepted by the Action servlet -&amp;#010 assuming you have the standard *.do mapping for it in your web.xml.&amp;#010&amp;#010 RPCManager.addProperties({ actionURL: &quot;/smartClientRPC.do&quot;});&amp;#010&amp;#010 On the server, you would then create an action mapping for the &quot;/smartClientRPC&quot; path&amp;#010 that you would forward to a custom Action handler.  For example you could have this in your&amp;#010 struts config.xml:&amp;#010&amp;#010 &amp;lt;action path=&quot;/smartClientRPC&quot; type=&quot;com.your.company.name.SmartClientRPCAction&quot;/&amp;gt;&amp;#010 &amp;#010 In your Action execute() method you have access to the HttpServletRequest and&amp;#010 HttpServletResponse objects - which is all you need to instantiate the RPCManager class&amp;#010 that's part of the SmartClient server-side SDK that you can then use to obtain the RPC&amp;#010 payload.  Like this:&amp;#010&amp;#010 RPCManager rpc = new RPCManager(request, response);&amp;#010 Object data = rpc.getData();&amp;#010 rpc.send(&quot;here's a response&quot;);&amp;#010 &lt;/pre&gt; &amp;#010 Given this configuration, all databound components will send their requests through this&amp;#010 pipeline and you need only write the code to respond to e.g. a given ListGrid's request to&amp;#010 get the next 25 rows.  For custom RPCs, you can specify actionURLs in the RPCRequest itself&amp;#010 that override the RPCManager default that you can then use to target different actions - in&amp;#010 other words you need not dispatch all SmartClient RPCs through a single Struts Action.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Struts examples in the SDK&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The SDK contains a simple example of doing form validation without incurring a page&amp;#010 transition. These examples also show how to populate e.g. field names using the struts-bean&amp;#010 taglib and how to set validation errors using the standard Struts Validation plugin.&amp;#010 Point your browser to &lt;a href='/examples/struts/forms' onclick=&quot;window.open('/examples/struts/forms');return false;&quot;&gt;/examples/struts/forms&lt;/a&gt; in the SmartClient SDK to take a&amp;#010 look." name="strutsIntegration" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:StatefulCanvas.valign" flags="IRW" description="Vertical alignment of this component's title." name="valign" valueType="VerticalAlignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:StatefulCanvas">
    <groups>appearance</groups>
</docItem>
<docItem exampleConfig="SelectOtherItem.xml" ref="class:SelectOtherItem" description="FormItem that shows a list of options, plus an &quot;Other...&quot; option that allows them to enter&amp;#010 another value." name="SelectOtherItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:SelectOtherItem.separatorTitle</attrs>
    <attrs>attr:SelectOtherItem.otherTitle</attrs>
    <attrs>attr:SelectOtherItem.selectOtherPrompt</attrs>
</docItem>
<docItem ref="method:Button.isSelected" flags="" description=" Find out if this object is selected&amp;#010" name="isSelected" type="method" definingClass="class:Button">
<returns type="boolean">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="attr:Canvas.hoverOpacity" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, should the hover canvas be shown with opacity&amp;#010 other than 100?" name="hoverOpacity" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('customHovers')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:ListGrid.fetchRelatedData" flags="" description=" Based on the relationship between the DataSource this component is bound to and the&amp;#010 DataSource specified as the &quot;schema&quot; argument, call fetchData() to retrieve records in this&amp;#010 grid that are related to the passed-in record.&amp;#010 &lt;P&gt;&amp;#010 Relationships between DataSources are declared via ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')}.&amp;#010 &lt;P&gt;&amp;#010 For example, given a DataSource &quot;orders&quot; and another DataSource &quot;orderItems&quot;, where&amp;#010 &quot;orderItems&quot; declared a field &quot;orderId&quot; pointing to the primary key field of the &quot;orders&quot;&amp;#010 DataSource&quot;, there is a set of records from the &quot;orderItems&quot; DataSource related to any given&amp;#010 record from the &quot;order&quot; DataSource.  If  this component were bound to &quot;orderItems&quot; and a&amp;#010 record from the &quot;orders&quot;&amp;#010&amp;#010" name="fetchRelatedData" type="method" definingClass="class:ListGrid">
<params description="DataSource record" optional="false" name="record" type="ListGridRecord">
</params>
<params description="schema of the DataSource record, or                            DataBoundComponent already bound to that schema" optional="false" name="schema" type="Canvas or DataSource or ID">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Button.actionType" description="Behavior on state changes -- BUTTON, RADIO or CHECKBOX" name="actionType" valueType="SelectionType" defaultValue="&quot;button&quot;" definingClass="class:Button">
    <getter>getActionType</getter>
    <setter>setActionType</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonRadioToggle')}</examples>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:ListGridField.headerTitleStyle" flags="IRW" description="Custom titleStyle to apply to this field's header button instead of &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.headerTitleStyle')}.&lt;br&gt;&amp;#010 Note that this will typically only have an effect if &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')} is set to ${isc.DocUtils.linkForRef('class:StretchImgButton')} or a subclass &amp;#010 thereof." name="headerTitleStyle" valueType="cssClass" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ToolbarItem.endRow" flags="IRW" description="these items are in a row by themselves by default" name="endRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ToolbarItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:TreeGrid.fileImage" deprecated="as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')}" flags="IRW" description="The filename of the default icon for all leaf nodes in this treeGrid. Use the&amp;#010 node.icon property (null by default) to specify a custom image for an individual&amp;#010 node." name="fileImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]file.gif&quot;" type="attr" definingClass="class:TreeGrid">
</docItem>
<docItem ref="method:Canvas.setStyleName" flags="A" description=" Sets the CSS class for this widget&amp;#010" name="setStyleName" type="method" definingClass="class:Canvas">
<params description="new CSS class name (must be defined previously)" optional="false" name="newStyle" type="string">
</params>
    <examples>${isc.DocUtils.linkForExampleId('styles')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DSRequest.endRow" flags="IR" description="End row of requested results, used only with fetch operations.&amp;#010 &lt;p&gt;&amp;#010 Note that startRow and endRow are zero-based, so startRow: 0, endRow: 1 is a request&amp;#010 for the first two records." name="endRow" valueType="number" defaultValue="null" type="attr" definingClass="class:DSRequest">
    <groups>paging</groups>
</docItem>
<docItem ref="method:ViewLoader.handleError" flags="" description="&amp;#010 This method is called when a transport error occurs.  Typically, this is the result of the&amp;#010 server returning an HTTP error code such as 404 - document not found.  You can inspect the&amp;#010 RPCResponse object for the reasons for the error and take appropriate action.  Typical&amp;#010 properties to look at are rpcResponse.status, and rpcResponse.httpResponseCode.&amp;#010 &lt;p&gt;&amp;#010 This method is called from the response processing pipeline.  If you want to provide your&amp;#010 own HTML response as the result of the error, you can do&amp;#010 so by setting rpcResponse.data to your HTML string.  Returning false from this method&amp;#010 suppresses any further response handling.  The default implementation of this method causes&amp;#010 an error message to be logged to the Developer Console and sets the HTML to the error&amp;#010 string.&amp;#010&amp;#010" name="handleError" type="method" definingClass="class:ViewLoader">
<params description="The RPCRequest that was made to the server" optional="false" name="rpcRequest" type="RPCRequest">
</params>
<params description="The RPCResponse that was received" optional="false" name="rpcResponse" type="RPCResponse">
</params>
<returns description="false to suppress further response processing" type="boolean"></returns>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="method:ValuesManager.setValues" flags="" description="  Set the values for this values manager.  Member forms will be updated as required by&amp;#010  this change.&amp;#010  Note that pre-existant values in other fields are cleared out by this.&amp;#010 &amp;#010" name="setValues" type="method" definingClass="class:ValuesManager">
<params description="new set of values for this values manager." optional="false" name="values" type="object">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:DataSource.useParentFieldOrder" flags="IR" description="For a DataSource that inherits ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from another DataSource &amp;#010 (via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}), indicates that the parent's field order should be used&amp;#010 instead of the order of the fields as declared in this DataSource.  New fields, if any,&amp;#010 are placed at the end." name="useParentFieldOrder" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('schemaChaining')}</examples>
    <groups>fields</groups>
</docItem>
<docItem ref="classMethod:FileLoader.cacheModules" flags="" description="&amp;#010 Caches the specified SmartClient modules.&amp;#010&amp;#010" name="cacheModules" type="classMethod" definingClass="class:FileLoader">
<params description="List of SmartClient modules to cache.  This can either be a                                  string with comma separated module names or an Array of module&amp;#010                                  names." optional="false" name="modules" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified                                      modules has been cached." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="attr:MenuItem.checked" flags="IR" description="If true, this item displays a standard checkmark image to the left of its title.  You&amp;#010 can set the checkmark image URL by setting ${isc.DocUtils.linkForRef('attr:Menu.checkmarkImage')}.&amp;#010 &lt;p&gt;&amp;#010 If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.checkIf')} instead." name="checked" valueType="boolean" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
    <groups>menuIcons</groups>
</docItem>
<docItem ref="group:minimize" name="minimize" type="group">
    <refs>attr:Window.minimizeHeight</refs>
</docItem>
<docItem ref="attr:StretchImgButton.iconSpacing" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="iconSpacing" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Chart.subTitle" flags="IR" description="Subtitle for the chart as a whole, typically used to describe fixed facet values (such as&amp;#010 &quot;for Q1, 1999&quot;).&amp;#010 &lt;P&gt;&amp;#010 The subTitle should appear under the title in less emphasized text." name="subTitle" valueType="String" defaultValue="null" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="attr:ListGrid.confirmDiscardEdits" flags="IRW" description="For editable listGrids, outstanding unsaved edits when the user performs a new filter&amp;#010 or sort will be discarded. This flag determines whether we should display a confirmation&amp;#010 dialog with options to save or discard the edits, or cancel the action in this case." name="confirmDiscardEdits" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ListGrid.styleName" flags="IRW" description="Default CSS class" name="styleName" valueType="CSSStyleName" defaultValue="&quot;listGrid&quot;" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.validateRow" flags="" description=" Validate the current set of edit values for the row in question.&amp;#010 Called when the user moves to a new edit row, or when an edited record is to be saved if&amp;#010 client side validation is enabled for this grid.&lt;br&gt;&amp;#010 This method may also be called directly to perform row level validation at any time.&amp;#010" name="validateRow" type="method" definingClass="class:ListGrid">
<params description="index of row to be validated." optional="false" name="rowNum" type="number">
</params>
<params description="index of row to be validated." optional="false" name="rowNum" type="number">
</params>
<returns description="returns true if validation was successful (no errors encountered), false                    otherwise." type="boolean"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:ListGrid.showAllRecords" flags="IRW" description="Whether all rows should be drawn all at once, or only rows visible in the viewport.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Drawing all rows causes longer initial rendering time, but allows smoother vertical scrolling.&amp;#010 With a very large number of rows, showAllRows will become too slow." name="showAllRecords" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('autofitRows')}</examples>
    <groups>performance</groups>
</docItem>
<docItem ref="attr:ListGridField.filterOnKeypress" flags="IRWA" description="If we're showing the filterEditor (listGrid.showFilterEditor is true), this property &amp;#010 determines whether this list should be filtered every time the user edits the value of&amp;#010 the filter editor for this field." name="filterOnKeypress" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:RichTextItem.showTitle" flags="IR" description="Don't show the title for rich text items by default" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RichTextItem">
</docItem>
<docItem ref="method:Canvas.setRight" flags="" description=" Resizes the widget horizontally to position its right side at the specified coordinate.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()&amp;#010 instead&amp;#010" name="setRight" type="method" definingClass="class:Canvas">
<params description="new right coordinate" optional="false" name="right" type="number">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ListGrid.getEditorType" flags="A" description="&amp;#010  Returns the form item type (Class Name) to display for a field when it is displayed in the &amp;#010  editor while editing some record.&lt;br&gt;&amp;#010  Default implementation will return field.editorType if specified.&amp;#010  If not specified, the default form item for the appropriate data type will be displayed&amp;#010  - can be overriden to provide a different specific form item type for some field based on &amp;#010  the record/field data.&amp;#010&amp;#010" name="getEditorType" type="method" definingClass="class:ListGrid">
<params description="field definition field for which we need a valueMap" optional="false" name="field" type="ListGridField">
</params>
<params description="current edit values for the record (may be null, if editing a                               new record)" optional="false" name="values" type="object">
</params>
<returns description="form item type for the edit field" type="string"></returns>
    <groups>editing</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ToolStrip.styleName" description="The CSS class applied to this widget as a whole." name="styleName" valueType="CSSClassName" defaultValue="&quot;toolStrip&quot;" definingClass="class:ToolStrip">
    <setter>canvas.setStyleName</setter>
    <examples>${isc.DocUtils.linkForExampleId('styles')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DateChooser.prevYearIconWidth" flags="IRW" description="Width of the icon for the previous year button" name="prevYearIconWidth" valueType="integer" defaultValue="14" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:ListGrid.validateCell" flags="" description=" Validate the current edit value for the cell in question.  Called when the user moves to a&amp;#010 new edit cell if ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell')} is true.&lt;br&gt;&amp;#010 This method may also be called directly to perform cell level validation at any time.&amp;#010" name="validateCell" type="method" definingClass="class:ListGrid">
<params description="index of row to be validated." optional="false" name="rowNum" type="number">
</params>
<params description="field name (or column index) of field to be validated" optional="false" name="fieldName" type="string | number">
</params>
<returns description="returns true if validation was successful (no errors encountered), false                    otherwise." type="boolean"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="class:GridRenderer" description="A flexible, high-speed table that offers consistent cross-platform sizing, clipping, and events." name="GridRenderer" type="class">
    <methods>method:GridRenderer.getTotalRows</methods>
    <methods>method:GridRenderer.setColumnWidth</methods>
    <methods>method:GridRenderer.setColumnWidths</methods>
    <methods>method:GridRenderer.getCellStyle</methods>
    <methods>method:GridRenderer.cellIsEnabled</methods>
    <methods>method:GridRenderer.refreshCellStyle</methods>
    <methods>method:GridRenderer.refreshCell</methods>
    <methods>method:GridRenderer.refreshRow</methods>
    <methods>method:GridRenderer.getEventRow</methods>
    <methods>method:GridRenderer.getEventColumn</methods>
    <methods>method:GridRenderer.getNearestRowToEvent</methods>
    <methods>method:GridRenderer.getNearestColToEvent</methods>
    <methods>method:GridRenderer.getVisibleRows</methods>
    <methods>method:GridRenderer.getDrawnRows</methods>
    <methods>method:GridRenderer.getCellRecord</methods>
    <methods>method:GridRenderer.getCellValue</methods>
    <methods>method:GridRenderer.getBaseStyle</methods>
    <methods>method:GridRenderer.getCellCSSText</methods>
    <methods>method:GridRenderer.getRowHeight</methods>
    <methods>method:GridRenderer.getRowSpan</methods>
    <methods>method:GridRenderer.cellOut</methods>
    <methods>method:GridRenderer.cellOver</methods>
    <methods>method:GridRenderer.rowOut</methods>
    <methods>method:GridRenderer.rowOver</methods>
    <methods>method:GridRenderer.cellContextClick</methods>
    <methods>method:GridRenderer.rowContextClick</methods>
    <methods>method:GridRenderer.cellMouseDown</methods>
    <methods>method:GridRenderer.rowMouseDown</methods>
    <methods>method:GridRenderer.cellMouseUp</methods>
    <methods>method:GridRenderer.rowMouseUp</methods>
    <methods>method:GridRenderer.cellClick</methods>
    <methods>method:GridRenderer.cellDoubleClick</methods>
    <methods>method:GridRenderer.rowClick</methods>
    <methods>method:GridRenderer.rowDoubleClick</methods>
    <methods>method:GridRenderer.cellHover</methods>
    <methods>method:GridRenderer.rowHover</methods>
    <methods>method:GridRenderer.cellHoverHTML</methods>
    <methods>method:GridRenderer.selectionChanged</methods>
    <methods>method:GridRenderer.cellSelectionChanged</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:GridRenderer.totalRows</attrs>
    <attrs>attr:GridRenderer.showAllRows</attrs>
    <attrs>attr:GridRenderer.showAllColumns</attrs>
    <attrs>attr:GridRenderer.scrollRedrawDelay</attrs>
    <attrs>attr:GridRenderer.drawAheadRatio</attrs>
    <attrs>attr:GridRenderer.quickDrawAheadRatio</attrs>
    <attrs>attr:GridRenderer.cellHeight</attrs>
    <attrs>attr:GridRenderer.fixedRowHeights</attrs>
    <attrs>attr:GridRenderer.fixedColumnWidths</attrs>
    <attrs>attr:GridRenderer.autoFit</attrs>
    <attrs>attr:GridRenderer.wrapCells</attrs>
    <attrs>attr:GridRenderer.cellPadding</attrs>
    <attrs>attr:GridRenderer.canSelectOnRightMouse</attrs>
    <attrs>attr:GridRenderer.canHover</attrs>
    <attrs>attr:GridRenderer.showHover</attrs>
    <attrs>attr:GridRenderer.baseStyle</attrs>
    <attrs>attr:GridRenderer.alternateRowStyles</attrs>
    <attrs>attr:GridRenderer.alternateRowFrequency</attrs>
    <attrs>attr:GridRenderer.emptyCellValue</attrs>
    <attrs>attr:GridRenderer.showEmptyMessage</attrs>
    <attrs>attr:GridRenderer.emptyMessage</attrs>
    <attrs>attr:GridRenderer.emptyMessageTableStyle</attrs>
    <attrs>attr:GridRenderer.emptyMessageStyle</attrs>
    <attrs>attr:GridRenderer.fastCellUpdates</attrs>
    <attrs>attr:GridRenderer.snapToCells</attrs>
    <attrs>attr:GridRenderer.snapInsideBorder</attrs>
    <attrs>attr:GridRenderer.recordCustomStyleProperty</attrs>
</docItem>
<docItem ref="classMethod:isc.echoLeaf" flags="" description=" Same as ${isc.DocUtils.linkForRef('method:Log.echoLeaf')}.&amp;#010&amp;#010" name="echoLeaf" type="classMethod" definingClass="class:isc">
<params description="object to echo" optional="false" name="value" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
</docItem>
<docItem ref="classMethod:isc.echoAll" flags="" description=" Same as ${isc.DocUtils.linkForRef('method:Log.echoAll')}.&amp;#010&amp;#010" name="echoAll" type="classMethod" definingClass="class:isc">
<params description="object to echo" optional="false" name="value" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
</docItem>
<docItem ref="attr:RichTextEditor.formatControls" flags="IRA" description="Default text formatting control group. Consists of an array of &amp;#010  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,&amp;#010  include &lt;code&gt;&quot;formatControls&quot;&lt;/code&gt; in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array" name="formatControls" valueType="array" defaultValue="[&quot;alignLeft&quot;, &quot;alignRight&quot;, &quot;alignCenter&quot;, &quot;justify&quot;]" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="group:contents" name="contents" type="group">
    <refs>attr:HTMLFlow.contents</refs>
    <refs>attr:HTMLFlow.dynamicContents</refs>
    <refs>attr:Label.contents</refs>
    <refs>attr:Label.dynamicContents</refs>
    <refs>attr:Canvas.contents</refs>
    <refs>attr:Canvas.dynamicContents</refs>
</docItem>
<docItem ref="attr:ListGrid.escapeKeyEditAction" flags="IRWA" description="What to do when a user hits escape while editing a cell:&lt;ul&gt;&amp;#010 &lt;li&gt;&quot;cancel&quot;: close the editor and discard the current set of edit values&amp;#010 &lt;li&gt;&quot;done&quot;: just close the editor (the edit is complete, but the edited values are retained).&amp;#010 &lt;/ul&gt;&amp;#010 Note that if this.autoSaveEdits is true, this may cause a save of the current edit values" name="escapeKeyEditAction" valueType="EscapeKeyEditAction" defaultValue="&quot;cancel&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.isInteger" flags="IR" description="Tests whether the value for this field is a whole number.  If &amp;#010  &lt;code&gt;validator.convertToInteger&lt;/code&gt; is true, float values will be converted &amp;#010  into integers and validation will succeed." name="isInteger" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:StretchImg.src" flags="IRW" description="The base URL for the image. &amp;#010 &lt;P&gt;&amp;#010 As with ${isc.DocUtils.linkForRef('attr:Img.src')}, the ${isc.DocUtils.linkForRef('type:State')} of the component is added to this URL.  Then,&amp;#010 the image segment name as specified by ${isc.DocUtils.linkForRef('attr:StretchImg.items')} is added.&amp;#010 &lt;P&gt;&amp;#010 For example, for a stretchImg in &quot;Over&quot; state with a &lt;code&gt;src&lt;/code&gt; of &quot;button.png&quot;&amp;#010 and a segment name of &quot;stretch&quot;, the resulting URL would be &quot;button_Over_stretch.png&quot;." name="src" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StretchImg">
<seeAlso ref="attr:StretchImg.hSrc">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Label.setIcon" flags="" description=" Change the icon being shown next to the title text.&amp;#010" name="setIcon" type="method" definingClass="class:Label">
<params description="URL of new icon" optional="false" name="icon" type="URL">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ValuesManager.setMemberValues" flags="" description="  Set the values for some member form&amp;#010" name="setMemberValues" type="method" definingClass="class:ValuesManager">
<params description="ID of the member form to update" optional="false" name="ID" type="string">
</params>
<params description="new values for the form" optional="false" name="values" type="object">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:HeaderItem.showTitle" flags="IRW" description="Don't show a separate title cell for headers" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSource.tableName" flags="IR" description="For DataSources using the ${isc.DocUtils.linkForRef('group:sqlDataSource','SmartClient SQL engine')} for&amp;#010 persistence, what database table name to use.  The default is to use the DataSource ID&amp;#010 as the table name." name="tableName" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>serverDataIntegration</groups>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:Canvas.canSelectText" flags="IRWA" description="Whether native drag selection of contained text is allowed within this Canvas.&amp;#010 &lt;P&gt;&amp;#010 Note that setting this property to &lt;code&gt;false&lt;/code&gt; will not avoid text selection&amp;#010 which is initiated outside this Canvas from continuing into this Canvas, even if text&amp;#010 selection began in another Canvas." name="canSelectText" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <groups>events</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:Canvas.disabled" description="If set to true, the widget will be disabled. A widget is only considered enabled &amp;#010      if it is individually enabled and all parents above it in the containment hierarchy &amp;#010      are enabled. This allows you to enable or disable all components of a complex &amp;#010      nested widget by enabling or disabling the top-level parent only." name="disabled" valueType="boolean" defaultValue="false" definingClass="class:Canvas">
    <getter>isDisabled</getter>
    <setter>setDisabled</setter>
    <groups>enable</groups>
</docItem>
<docItem ref="method:GridRenderer.cellHover" flags="A" description=" Called when the mouse hovers over a cell if this.canHover is true. &amp;#010  Returning false will suppress the hover text from being shown if this.showHover is true.&amp;#010&amp;#010" name="cellHover" type="method" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.canHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="classMethod:Time.setShortDisplayFormat" flags="" description=" Sets the default format for strings returned by ${isc.DocUtils.linkForRef('classMethod:Time.toShortTime')}.&amp;#010" name="setShortDisplayFormat" type="classMethod" definingClass="class:Time">
<params description="Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or&amp;#010  a string designating a standard formatter" optional="false" name="formatter" type="timeFormatter|function">
</params>
</docItem>
<docItem ref="method:Selection.getSelection" flags="" description="			Return an ordered array of all of the selected items&amp;#010" name="getSelection" type="method" definingClass="class:Selection">
<returns description="list of selected items" type="array"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.setHeaderHeight" flags="" description=" Modify the height of a listGrid. To hide the header set height to zero.&amp;#010" name="setHeaderHeight" type="method" definingClass="class:ListGrid">
<params description="new height for the header" optional="false" name="height" type="number">
</params>
    <groups>sizing</groups>
    <groups>gridHeader</groups>
</docItem>
<docItem ref="attr:Canvas.canDragResize" flags="IRWA" description="Indicates whether this widget can be resized by dragging on the edges and/or corners of&amp;#010      the widget with the mouse." name="canDragResize" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragResize')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="class:WSDataSource" description="A WSDataSource is a DataSource that is preconfigured to contact the WSDL-described web&amp;#010 service built into the SDK.  WSDataSource is a subclass of DataSource used exactly like a&amp;#010 normal DataSource.&amp;#010 &lt;P&gt;&amp;#010 The WSDL service that WSDataSource contacts can be easily implemented on Java and non-Java&amp;#010 backends.  See ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Integration')} for details." name="WSDataSource" type="class">
    <treeLocation>Client Reference/Data Binding</treeLocation>
</docItem>
<docItem ref="method:ResultSet.getValueMap" flags="" description=" Get a map of the form &lt;code&gt;{ item[idField] -&amp;gt; item[displayField] }&lt;/code&gt;, for all &amp;#010 items in the list.  If more than one item has the same &lt;code&gt;idProperty&lt;/code&gt;, &amp;#010 the value for the later item in the list will clobber the value for the earlier item.&amp;#010 &lt;P&gt;&amp;#010 If this method is called when the ${isc.DocUtils.linkForRef('method:ResultSet.allMatchingRowsCached','cache is incomplete')}, it&amp;#010 will trigger fetches, and will return a valueMap reflecting only the currently loaded rows.&amp;#010&amp;#010" name="getValueMap" type="method" definingClass="class:ResultSet">
<seeAlso ref="method:ResultSet.allMatchingRowsCached">
</seeAlso>
<params description="Property to use as ID (data value) in the valueMap" optional="false" name="idField" type="string">
</params>
<params description="Property to use a display value in the valueMap" optional="false" name="displayField" type="string">
</params>
<returns description="valueMap object" type="object"></returns>
</docItem>
<docItem ref="method:Canvas.intersectsRect" flags="" description="			Returns true if the rectangle of this widget intersects with the rectangle coordinates&amp;#010          passed in, and false otherwise.&amp;#010" name="intersectsRect" type="method" definingClass="class:Canvas">
<params description="left coord of rect (or rect array)" optional="false" name="left" type="number, array">
</params>
<params description="top coord of rect" optional="false" name="top" type="number">
</params>
<params description="width of rect" optional="false" name="width" type="number">
</params>
<params description="height of rect" optional="false" name="height" type="number">
</params>
<returns description="true if this canvas intersects the rectangle passed in; false otherwise" type="boolean"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:FormItem.titleClassName" deprecated="As of SmartClient Version 5.5, use ${isc.DocUtils.linkForRef('attr:FormItem.titleStyle')} instead" flags="IRW" description="CSS class for the form item's title." name="titleClassName" valueType="CSSStyleName" defaultValue="&quot;formTitle&quot;" type="attr" definingClass="class:FormItem">
    <groups>title</groups>
</docItem>
<docItem ref="attr:FormItem.hoverWidth" flags="IRW" description="Option to specify a width for any hover shown for this item." name="hoverWidth" valueType="measure" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverWidth">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:Window.showStatusBar" flags="IRW" description="If true, show a statusBar for this Window, including resizer." name="showStatusBar" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>footer</groups>
</docItem>
<docItem ref="attr:Window.minimizeHeight" flags="IRWA" description="Height for the window when minimized.&amp;#010 If unset the window will shrink to the height of the header, if present, otherwise&amp;#010 ${isc.DocUtils.linkForRef('attr:Window.defaultMinimizeHeight','this.defaultMinimizeHeight')}" name="minimizeHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>minimize</groups>
</docItem>
<docItem ref="attr:ImgTab.showRollOver" flags="IRW" description="Should we visibly change state when the mouse goes over this tab" name="showRollOver" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="method:Date.getShortDayName" flags="" description=" Return the abbreviated (up to 3 chars) day of week name for this date (Mon, Tue, etc).&amp;#010 To modify the value returned by this method, set ${isc.DocUtils.linkForRef('classAttr:Date.shortDayNames')}&amp;#010&amp;#010" name="getShortDayName" type="method" definingClass="class:Date">
<params description="Number of characters to return (Defaults to 3, can't be                                   longer than 3)" optional="false" name="length" type="number">
</params>
<returns description="Abbreviated day name" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:Tree.titleProperty" flags="IRW" description="Name of the property that holds the title of the node as it should be shown to the user. &amp;#010 By default this is set to ${isc.DocUtils.linkForRef('attr:TreeNode.title')}." name="titleProperty" valueType="string" defaultValue="&quot;title&quot;" type="attr" definingClass="class:Tree">
</docItem>
<docItem ref="group:tabBarScrolling" name="tabBarScrolling" type="group">
    <refs>attr:TabSet.symmetricScroller</refs>
    <refs>attr:TabSet.scrollerSrc</refs>
    <refs>attr:TabSet.scrollerHSrc</refs>
    <refs>attr:TabSet.scrollerVSrc</refs>
    <refs>attr:TabSet.symmetricPickerButton</refs>
    <refs>attr:TabSet.pickerButtonSrc</refs>
    <refs>attr:TabSet.pickerButtonHSrc</refs>
    <refs>attr:TabSet.pickerButtonVSrc</refs>
</docItem>
<docItem ref="attr:Window.defaultMinimizeHeight" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:Window.minimizeHeight')} is unset, by the window will shrink to the height of the&amp;#010 header when minimized.&amp;#010 &lt;BR&gt;&amp;#010 If there is no header, the &lt;code&gt;defaultMinimizeHeight&lt;/code&gt; will be used instead." name="defaultMinimizeHeight" valueType="number" defaultValue="16" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="classMethod:DMI.call" flags="" description="&amp;#010 Calls a server-side DMI method.  At a minimum, you need to specify the appID (.app.xml&amp;#010 file), ${isc.DocUtils.linkForRef('attr:ServerObject.className')} or ${isc.DocUtils.linkForRef('attr:ServerObject.ID')} and methodName to call.&amp;#010 Arguments and callback are optional.  There are two ways to invoke this method:&amp;#010 &lt;pre&gt;&amp;#010 DMI.call(appID, className, methodName, &amp;#010          arg1, arg2 ...argN, callback);&amp;#010 &lt;/pre&gt;&amp;#010 or:&amp;#010 &lt;pre&gt;&amp;#010 DMI.call({&amp;#010     appID: appID,&amp;#010     className: className,&amp;#010     methodName: methodName,&amp;#010     arguments: [arg1, arg2, ...argN], //optional&amp;#010     callback: callback, //optional&amp;#010     requestParams: requestProps // optional&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 If you use the first signature, you must either specify a callback or if you don't want a&amp;#010 callback, pass a &lt;code&gt;null&lt;/code&gt; as the last argument.  The second signature allows you to&amp;#010 specify requestParams that are applied to the ${isc.DocUtils.linkForRef('class:RPCRequest')} generated by this DMI call.&amp;#010 This allows you to override some defaults - for example to suppress the &quot;Contacting Server&quot;&amp;#010 prompt, change it's text; change the timeout or set any other property settable on&amp;#010 ${isc.DocUtils.linkForRef('class:RPCRequest')}.&amp;#010 &lt;p&gt;&amp;#010 Note that you can use the ${isc.DocUtils.linkForRef('group:loadDMIStubsTag')} tag to bind all methods of&amp;#010 &lt;code&gt;ServerObjects&lt;/code&gt; defined in a given .app.xml file and call methods on them&amp;#010 directly.&amp;#010&amp;#010" name="call" type="classMethod" definingClass="class:DMI">
<params description="the appID (.app.xml file to look in) or comprehensive request                          object as documented above." optional="false" name="appID" type="string or Object">
</params>
<params description="${isc.DocUtils.linkForRef('attr:ServerObject.className')} or ${isc.DocUtils.linkForRef('attr:ServerObject.ID')}" optional="false" name="className" type="string">
</params>
<params description="the name of the method to call on the serverObject" optional="false" name="methodName" type="string">
</params>
<params description="The next N-1 params specify arguments to the server-side method." optional="true" name="args" type="any">
</params>
<params description="The callback of the response.  If you do not want a callback, you                          must specify a &lt;code&gt;null&lt;/code&gt; value for this parameter when&amp;#010                          using the first signature (documented above)." optional="false" name="callback" type="RPCCallback">
</params>
</docItem>
<docItem ref="method:CubeGrid.addRowFacet" flags="" description=" Add a row facet to the view at index &quot;index&quot;.  Handles the facet already being in the view&amp;#010 (does a pivot).&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 The facet being added should currently have a fixed facet value (unless it's already part of the&amp;#010 view), which will be removed from cubeGrid.fixedFacetValues.&amp;#010&amp;#010 &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt;  action&amp;#010" name="addRowFacet" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.removeFacet">
</seeAlso>
<seeAlso ref="attr:CubeGrid.fixedFacetValues">
</seeAlso>
<params description="facetId to add.  Definition must have been provided at init time." optional="false" name="facetId" type="id">
</params>
<params description="index to add the facet at.  0 = outermost (default innermost)" optional="true" name="index" type="integer">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="method:PickList.filterClientPickListData" flags="" description=" Returns the data to display in the pick list.&amp;#010 &lt;P&gt;&amp;#010 The default implementation applies the criteria returned by &amp;#010 ${isc.DocUtils.linkForRef('method:PickList.getPickListFilterCriteria')} to the data returned by&amp;#010 ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.  A record passes the filter if it has a&amp;#010 matching value for all fields in the criteria object.  Matching is performed according&amp;#010 to ${isc.DocUtils.linkForRef('attr:PickList.textMatchStyle')}.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:PickList.showAllOptions')} is set, all values are shown, with matching values&amp;#010 shown below a ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator')}.&amp;#010&amp;#010" name="filterClientPickListData" type="method" definingClass="interface:PickList">
<returns description="array of record objects to display in the pickList" type="Array of ListGridRecord"></returns>
</docItem>
<docItem ref="method:Canvas.getHSnapPosition" flags="A" description="&amp;#010 Override this method to provide a custom snap-to grid.  Note that you do not need to do&amp;#010 this if your grid is regular (ie, grid points are every x pixels); regular grids should be &amp;#010 defined using ${isc.DocUtils.linkForRef('attr:Canvas.snapHGap')} and ${isc.DocUtils.linkForRef('attr:Canvas.snapVGap')}.&amp;#010 You should only override this method if you want to provide support for a grid of &amp;#010 irregularly-placed points&amp;#010&amp;#010" name="getHSnapPosition" type="method" definingClass="class:Canvas">
<params description="x-coordinate of the drag event (note: using page-level coordinates)" optional="false" name="coordinate" type="integer">
</params>
<params description="&quot;before&quot; or &quot;after&quot; denoting whether the returned coordinate should   match the left or right edge of the current square. If unset ${isc.DocUtils.linkForRef('attr:Canvas.snapHDirection')} will&amp;#010   be used by default" optional="true" name="direction" type="string">
</params>
<returns description="The horizontal coordinate to snap to" type="number"></returns>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Layout.hideMember" flags="" description=" Hide the specified member, firing the specified callback when the hide is complete.&amp;#010 &lt;P&gt;&amp;#010 Members can always be directly hidden via &lt;code&gt;member.hide()&lt;/code&gt;, but if&amp;#010 ${isc.DocUtils.linkForRef('attr:Layout.animateMembers','animation')} is enabled, animation will only occur if hideMember() is&amp;#010 called to hide the member.&amp;#010&amp;#010" name="hideMember" type="method" definingClass="class:Layout">
<params description="Member to hide" optional="false" name="member" type="Canvas">
</params>
<params description="callback to fire when the member is hidden." optional="false" name="callback" type="Callback">
</params>
</docItem>
<docItem ref="attr:Facet.cellAlign" flags="IR" description="Default alignment of cells (in the body) for this facet" name="cellAlign" valueType="alignEnum" defaultValue="cubeGrid.cellAlign" type="attr" definingClass="class:Facet">
<seeAlso ref="attr:CubeGrid.cellAlign">
</seeAlso>
</docItem>
<docItem ref="attr:Canvas.hoverHeight" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, this property can be used to customize the&amp;#010 height of the hover canvas shown." name="hoverHeight" valueType="measure" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:Canvas.dragStart" flags="A" description=" Executed when dragging first starts. Your widget can use this opportunity to set&amp;#010 things up for the drag, such as setting the drag tracker. Returning false from this&amp;#010 event handler will cancel the drag action entirely.&amp;#010 &lt;p&gt;&amp;#010 A drag action is considered to be begin when the mouse has moved&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.dragStartDistance')} with the left mouse down.&amp;#010&amp;#010" name="dragStart" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to cancel drag action." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dragPan')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonWidth" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the width of the &amp;#010 auto-generated &lt;code&gt;headerMenuButton&lt;/code&gt;" name="headerMenuButtonWidth" valueType="number" defaultValue="16" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="attr:ListGrid.headerHeight" flags="IRW" description="The height of this listGrid's header, in pixels." name="headerHeight" valueType="number" defaultValue="22" type="attr" definingClass="class:ListGrid">
    <setter>setHeaderHeight</setter>
    <groups>gridHeader</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Canvas.linkHTML" flags="A" description=" Generates the HTML for a standard link element&amp;#010&amp;#010" name="linkHTML" type="method" definingClass="class:Canvas">
<params description="URL for the link to point to" optional="false" name="href" type="string">
</params>
<params description="Text to for the link (defaults to the href)" optional="true" name="text" type="string">
</params>
<params description="Target window for the link (defaults to opening in a new, unnamed window)" optional="true" name="target" type="string">
</params>
<params description="optional ID for the link element to be written out" optional="true" name="ID" type="string">
</params>
<params description="optional tabIndex for the link" optional="true" name="tabIndex" type="number">
</params>
<params description="optional accessKey for the link" optional="true" name="accessKey" type="string">
</params>
<returns description="HTML for the link" type="string"></returns>
</docItem>
<docItem ref="attr:OperationBinding.useFlatFields" flags="IR" description="Setting &lt;code&gt;useFlatFields&lt;/code&gt; on an operationBinding is equivalent to setting&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')} on all DataSource requests with the same ${isc.DocUtils.linkForRef('attr:OperationBinding.operationType')}&amp;#010 as this &lt;code&gt;operationBinding&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Typical usage is to combine operationBinding.useFlatFields with &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','searchForm.useFlatFields')}, with the ${isc.DocUtils.linkForRef('class:SearchForm')}&amp;#010 bound to the ${isc.DocUtils.linkForRef('method:WebService.getInputDS','input message')} of the web service operation set&amp;#010 as ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')}.  This allows gratuitous nesting to be consistently&amp;#010 bypassed in both the user presentation and in the actual XML messaging.&amp;#010 &lt;P&gt;&amp;#010 Not that &lt;code&gt;useFlatFields&lt;/code&gt; is not generally recommended for use with input messages&amp;#010 where multiple simple type fields exist with the same name, however if used in this way,&amp;#010 the first field to use a given name wins.  &quot;first&quot; means the first field encountered in a&amp;#010 depth first search.  &quot;wins&quot; means only the first field will be available in data binding,&amp;#010 and only the first field will be populated in the generated XML message." name="useFlatFields" valueType="boolean" defaultValue="false" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:Menu.setItemIcon" flags="" description="			Sets the icon and disabled icon (if specified) for a particular menu item and redraws&amp;#010          the menu if necessary. Returns true if the icon changed.&amp;#010&amp;#010" name="setItemIcon" type="method" definingClass="class:Menu">
<params description="pointer to (or number of) the item in question" optional="false" name="item" type="item | number">
</params>
<params description="new icon URL" optional="false" name="newIcon" type="string">
</params>
<params description="new icon URL for disabled image" optional="true" name="newDisabledIcon" type="string">
</params>
<returns description="true == something changed, redraw is called for" type="boolean"></returns>
</docItem>
<docItem ref="classMethod:Log.clear" flags="" description=" Clear all currently displayed Log messages&amp;#010" name="clear" type="classMethod" definingClass="class:Log">
</docItem>
<docItem ref="method:ListGridField.changed" flags="" description=" If this field is editable, any ${isc.DocUtils.linkForRef('method:FormItem.changed','changed')} handler specified&amp;#010 on the ListGridField will be passed onto the editors for this field.&amp;#010" name="changed" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGridField.change">
</seeAlso>
<seeAlso ref="method:ListGrid.cellChanged">
</seeAlso>
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the editor (form item) itself (also available as &quot;this&quot;).                              Note that in addition to the standard FormItem APIs available&amp;#010                              on the editor, it also has:&lt;br&gt;&amp;#010                              - a pointer back to the containing listGrid &amp;#010                              [&lt;code&gt;item.grid&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the colNum being edited [&lt;code&gt;item.colNum&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the rowNum being edited [&lt;code&gt;item.rowNum&lt;/code&gt;]" optional="false" name="item" type="FormItem">
</params>
<params description="The current value (after the change)." optional="false" name="value" type="any">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="type:DSProtocol" description="dataProtocol affects how the data in the DSRequest (${isc.DocUtils.linkForRef('attr:DSRequest.data')}) is&amp;#010 sent to the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}.  Note that, when using the SmartClient server, data&amp;#010 is automatically translated from JavaScript to Java according to the rules described&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.data','here')}; dataProtocol does not apply." name="DSProtocol" type="type">
<values description="Data is added to the dataURL, with each property in the data becoming an HTTP parameter,&amp;#010   eg http://service.com/search?keyword=foo" value="&quot;getParams&quot;"></values>
<values description="Data is POST'd to the dataURL, with each property becoming an HTTP parameter, &amp;#010   exactly as an HTML form would submit them if it had one input field per property in the&amp;#010   data." value="&quot;postParams&quot;"></values>
<values description="Data is serialized as XML via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} and POST'd as the&amp;#010   HTTP request body with contentType &quot;text/xml&quot;" value="&quot;postXML&quot;"></values>
<values description="Data is serialized as XML via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}, wrapped in a SOAP&amp;#010   envelope, and POST'd as the HTTP request body with contentType &quot;text/xml&quot;.  Generally&amp;#010   only used in connection with a ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL web service')}." value="&quot;soap&quot;"></values>
<values description="dsRequest.data is assumed to be a String set up by ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}&amp;#010   and is POST'd as the HTTP request body." value="&quot;postMessage&quot;"></values>
<seeAlso ref="attr:OperationBinding.dataProtocol">
</seeAlso>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:RPCRequest.promptStyle" flags="IRW" description="Controls the prompt style for this request only.  Defaults to&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')}." name="promptStyle" valueType="PromptStyle" defaultValue="RPCManager.promptStyle" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.promptStyle">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="attr:Canvas.hoverAlign" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, this property can be used to customize the&amp;#010 alignment of content in the hover canvas." name="hoverAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.skinImgDir" flags="IR" description="Standard skin directory for edge images (sides and corners)." name="skinImgDir" valueType="URL" defaultValue="&quot;images/edges/&quot;" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:Window.maximizeButton" flags="R" description="Button that will make this Window fill the browser via ${isc.DocUtils.linkForRef('method:Window.maximize')}." name="maximizeButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:SliderItem.maxValue" flags="IRW" description="The maximum slider value. The slider value is equal to maxValue when the thumb is at the&amp;#010 top or right of the slider (unless flipValues is true, in which case the maximum value&amp;#010 is at the bottom/left of the slider)" name="maxValue" valueType="float" defaultValue="100" type="attr" definingClass="class:SliderItem">
<seeAlso ref="attr:Slider.flipValues">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('sliderItem')}</examples>
</docItem>
<docItem ref="attr:ListGrid.resizeFieldsInRealTime" flags="IRWA" description="True == we redraw the list viewer in real time as fields are being resized.&amp;#010		This can be slow with a large list and/or on some platforms." name="resizeFieldsInRealTime" valueType="boolean" defaultValue="Browser.isIE &amp;&amp; isc.Browser.isWin" type="attr" definingClass="class:ListGrid">
    <groups>dragging</groups>
</docItem>
<docItem ref="method:ListGridField.recordClick" flags="" description="&amp;#010 Executed when this field is clicked on.  Note that if ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} is&amp;#010 also defined, it will not fire for fields that define a recordClick handler.&amp;#010&amp;#010" name="recordClick" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.recordClick">
</seeAlso>
<params description="the listGrid that contains the click event" optional="false" name="viewer" type="ListGrid">
</params>
<params description="the record that was clicked on" optional="false" name="record" type="ListGridRecord">
</params>
<params description="number of the record clicked on in the current set of                                  displayed records (starts with 0)" optional="false" name="recordNum" type="number">
</params>
<params description="the field that was clicked on (field definition)" optional="false" name="field" type="ListGridField">
</params>
<params description="number of the field clicked on in the listGrid.fields                                  array" optional="false" name="fieldNum" type="number">
</params>
<params description="value of the cell (after valueMap, etc. applied)" optional="false" name="value" type="object">
</params>
<params description="raw value of the cell (before valueMap, etc applied)" optional="false" name="rawValue" type="object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('recordClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="attr:TreeGrid.iconSize" flags="IRW" description="The standard size (same height and width, in pixels) of node icons in this&amp;#010          treeGrid." name="iconSize" valueType="number" defaultValue="16" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:HTMLFlow.httpMethod" flags="IRW" description="Selects the HTTP method that will be used when fetching content.  Valid values are &quot;POST&quot;&amp;#010 and &quot;GET&quot;." name="httpMethod" valueType="SendMethod" defaultValue="&quot;GET&quot;" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="method:FormItem.showIf" flags="A" description=" Expression that's evaluated to see if an item should be dynamically hidden.&amp;#010 &lt;p&gt;&amp;#010 &lt;code&gt;showIf()&lt;/code&gt; is evaluated whenever the form draws or redraws.&amp;#010&amp;#010" name="showIf" type="method" definingClass="class:FormItem">
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
<params description="current value of the form item" optional="false" name="value" type="any">
</params>
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the current set of values for the form as a whole" optional="false" name="values" type="Object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('formShowAndHide')}</examples>
</docItem>
<docItem ref="attr:DataSourceField.primaryKey" flags="IR" description="Whether this field holds a value unique across all records in this DataSource.&amp;#010 &lt;p&gt;&amp;#010 Exactly one field must be marked as the primary key for any DataSource that allows&amp;#010 modification of DataSource records through add, update and remove DataSource operations.&amp;#010 &lt;P&gt;&amp;#010 SmartClient requires a primary key value to uniquely identify records when communicating&amp;#010 updates or deletions to the server.  There is no requirement that the primaryKey field be&amp;#010 mapped to an actual &quot;primary key&quot; in your object model, web service, or database.  The only&amp;#010 requirement is that values of the primaryKey field be unique for a given browser instance&amp;#010 for the lifetime of the page.  If it's inconvenient to use existing unique values within&amp;#010 your underlying dataset, you can generate primary key values that are only unique&amp;#010 per-session.&amp;#010 &lt;P&gt;&amp;#010 If using ISC's ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')} and generating SQL tables using the&amp;#010 &quot;DataBases&quot; tab of the Developer Console, the table column generated from a primaryKey field&amp;#010 will have a unique constraint applied in the database table." name="primaryKey" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSourceField">
    <groups>dataSourceRelations</groups>
</docItem>
<docItem ref="classMethod:Class.Super" flags="" description="&amp;#010	Call the SuperClass implementation of a class method.&amp;#010&amp;#010" name="Super" type="classMethod" definingClass="class:Class">
<params description="name of the superclass method to call" optional="false" name="methodName" type="string">
</params>
<params description="native &quot;arguments&quot; object, or array of                                           arguments to pass to the Super call" optional="false" name="args" type="arguments or Array">
</params>
<params description="native &quot;arguments&quot; object, required if an Array is                                  passed for the &quot;args&quot; parameter in lieue of the native&amp;#010                                  arguments object" optional="true" name="nativeArgs" type="arguments">
</params>
<returns description="return value of the superclass call" type="any"></returns>
</docItem>
<docItem ref="attr:Window.headerIconDefaults" flags="IRWA" description="This is an object literal property block specifying the various properties of the&amp;#010 headerIcon - the icon that appears at the top left of the window and is by default the&amp;#010 Isomorphic logo.  Overrideable defaults are as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;width - default to &lt;code&gt;16&lt;/code&gt; and specifies the width of the headerIcon.&amp;#010 &lt;li&gt;height - default to &lt;code&gt;14&lt;/code&gt; and specifies the height of the headerIcon.&amp;#010 &lt;li&gt;src - defaults to &lt;code&gt;&quot;[SKIN]/Window/minimize.gif&quot;&lt;/code&gt; and specifies the image&amp;#010 for the headerIcon.&amp;#010 &lt;/ul&gt;&amp;#010 You can override the the above propertites by calling ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}." name="headerIconDefaults" valueType="object" defaultValue="..." type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="method:MenuBar.removeMenus" flags="" description=" Dynamically remove menus from the menuBar. Will update the visible set of buttons as &amp;#010 appropriate.&amp;#010" name="removeMenus" type="method" definingClass="class:MenuBar">
<params description="Array of menus to remove (will accept actual Menu components,                       or numbers representing the index of the menus in the current menus array)" optional="false" name="menus" type="array">
</params>
</docItem>
<docItem ref="attr:DetailViewer.loadingMessage" flags="IRW" description="The string to display in the body of a detailViewer which is loading records." name="loadingMessage" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:DataSource.globalNamespaces" flags="IRW" description="Namespaces definitions to add to the root element of outbound XML messages sent to a web&amp;#010 service, as a mapping from namespace prefix to namespace URI.&amp;#010 &lt;P&gt;&amp;#010 The default value is:&amp;#010 &lt;pre&gt;&amp;#010   globalNamespaces : {&amp;#010      xsi: &quot;http://www.w3.org/2001/XMLSchema-instance&quot;,&amp;#010      xsd: &quot;http://www.w3.org/2001/XMLSchema&quot;&amp;#010   },&amp;#010 &lt;/pre&gt;&amp;#010 This default value allows the use of the xsi:type and xsi:nil attributes without further&amp;#010 declarations.&amp;#010 &lt;P&gt;&amp;#010 Note that some web services will only accept specific revisions of the XML Schema URI.&amp;#010 If xsi-namespaced attributes seem to be ignored by an older webservice, try the URI&amp;#010 &quot;http://www.w3.org/1999/XMLSchema-instance&quot; instead." name="globalNamespaces" valueType="Object" defaultValue="..." type="attr" definingClass="class:DataSource">
</docItem>
<docItem ref="group:xmlTransform" name="xmlTransform" type="group">
    <refs>classMethod:XMLTools.selectNodes</refs>
    <refs>classMethod:XMLTools.selectString</refs>
    <refs>classMethod:XMLTools.selectNumber</refs>
    <refs>classMethod:XMLTools.transformNodes</refs>
    <refs>classMethod:XMLTools.serializeToString</refs>
</docItem>
<docItem ref="method:ListGrid.getCellStyle" flags="" description=" Return the CSS class for a cell. By default this method has the following implementation:&lt;br&gt;&amp;#010 - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) &amp;#010   if defined.&lt;br&gt;&amp;#010 - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the &amp;#010   state of the record.&lt;br&gt;&amp;#010 The state of the record is indicated by adding a suffix to the base style.&amp;#010 There are four independant boolean states, which are combined in the order given:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt;&quot;Disabled&quot; : whether the cell is disabled; enable by setting the &quot;enabled&quot; flag on record&amp;#010     returned by getCellRecord&amp;#010 &lt;li&gt;&quot;Selected&quot; : whether cell is selected; enable by passing a Selection object as &quot;selection&quot;&amp;#010 &lt;li&gt;&quot;Over&quot; : mouse is over this cell; enable with showRollovers&amp;#010 &lt;li&gt;&quot;Dark&quot; : alternating color bands; enable with alternateRowStyles&amp;#010 &lt;/ol&gt;&amp;#010 For example, with a baseStyle of &quot;myCell&quot;, a cell which is selected, which the mouse is over,&amp;#010 and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.&amp;#010 &lt;p&gt;&amp;#010 Cell Styles customizable by:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;attaching a custom style to a record by setting &amp;#010    &lt;code&gt;record[this.recordCustomStyleProperty]&lt;/code&gt; to some valid CSS style name.  &amp;#010 &lt;li&gt;modifying the base style returned by getBaseStyle() [see that method for further &amp;#010     documentation on this]&amp;#010 &lt;li&gt;overriding this function&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="getCellStyle" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getBaseStyle">
</seeAlso>
<params description="record object for this row and column" optional="false" name="record" type="object">
</params>
<params description="number of the row" optional="false" name="rowNum" type="number">
</params>
<params description="number of the column" optional="false" name="colNum" type="number">
</params>
<returns description="CSS style for this cell" type="CSSStyleName"></returns>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.enterKeyEditAction" flags="IRWA" description="What to do when a user hits enter while editing a cell:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&quot;nextCell&quot;: start editing the next editable cell in this record (or the first&amp;#010     editable cell in the next record if focus is in the last editable cell in the row)&amp;#010 &lt;li&gt;&quot;nextRow&quot;: start editing the same field in the next row (skipping any rows where&amp;#010      that would be a non-editable cell.&amp;#010 &lt;li&gt;&quot;nextRowStart&quot;: start editing the first editable cell in the next row.&amp;#010 &lt;li&gt;&quot;done&quot;: hide the editor (editing is complete)&amp;#010 &lt;/ul&gt;&amp;#010 Note that if this.autoSaveEdits is true, this may cause a save of the current edit values" name="enterKeyEditAction" valueType="EnterKeyEditAction" defaultValue="&quot;done&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:StretchImgButton.icon" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <setter>setIcon</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DateItem.displayFormat" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is &lt;code&gt;true&lt;/code&gt; this property can be used to &amp;#010 customize the format in which dates are displayed.&lt;br&gt;&amp;#010 Default setting is &lt;code&gt;&quot;toShortDate&quot;&lt;/code&gt; which ensures that if the standard&amp;#010 shortDate format is modified via ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')} this format&amp;#010 will be picked up.&lt;br&gt;&amp;#010 Important: the display format and the ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} &amp;#010 for dateItems should always be set such that the format of strings displayed by this&amp;#010 item matches the expected format of strings the user enters." name="displayFormat" valueType="DateDisplayFormat" defaultValue="&quot;toShortDate&quot;" type="attr" definingClass="class:DateItem">
<seeAlso ref="attr:DateItem.inputFormat">
</seeAlso>
</docItem>
<docItem ref="attr:TextItem.textBoxStyle" flags="IRW" description="Base CSS class name for this item's input element.&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;textItem&quot;" type="attr" definingClass="class:TextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:PickTreeItem" description="FormItem that allows picking a value from a hierarchical data model." name="PickTreeItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:PickTreeItem.dataSource</attrs>
    <attrs>attr:PickTreeItem.valueTree</attrs>
    <attrs>attr:PickTreeItem.loadDataOnDemand</attrs>
    <attrs>attr:PickTreeItem.displayField</attrs>
    <attrs>attr:PickTreeItem.valueField</attrs>
    <attrs>attr:PickTreeItem.emptyMenuMessage</attrs>
    <attrs>attr:PickTreeItem.canSelectParentItems</attrs>
    <examples>${isc.DocUtils.linkForExampleId('pickTree')}</examples>
</docItem>
<docItem ref="group:menuItemEvents" name="menuItemEvents" type="group">
    <refs>method:MenuItem.click</refs>
</docItem>
<docItem ref="method:ListGridField.defaultDynamicValue" flags="" description=" If this field ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','can be edited')}, this property can be used to&amp;#010 set a dynamic default value which will show up in editors for this field. &amp;#010 Will be applied to the editor for the field as ${isc.DocUtils.linkForRef('method:FormItem.defaultDynamicValue')}&amp;#010&amp;#010" name="defaultDynamicValue" type="method" definingClass="object:ListGridField">
<params description="The editor for the cell itself (also available as &quot;this&quot;).                              Note that in addition to the standard FormItem APIs available&amp;#010                              on the editor, it also has:&lt;br&gt;&amp;#010                              - a pointer back to the containing listGrid &amp;#010                              [&lt;code&gt;item.grid&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the colNum being edited [&lt;code&gt;item.colNum&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the rowNum being edited [&lt;code&gt;item.rowNum&lt;/code&gt;]" optional="false" name="item" type="FormItem">
</params>
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the current set of values for the form as a whole" optional="false" name="values" type="Object">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:GridRenderer.wrapCells" flags="IRWA" description="Should content within cells be allowed to wrap?" name="wrapCells" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:StretchImgButton.vertical" flags="IRW" description="Default is a horizontal button.  Vertical StretchImgButtons are allowed, but title text,&amp;#010 if any, will not be automatically rotated." name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="classAttr:RPCManager.useXmlHttpRequest" deprecated="As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  If you specify a value for this property, it will take precedence over&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} for requests that do not specify a&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')} or ${isc.DocUtils.linkForRef('attr:RPCRequest.useXmlHttpRequest')}." flags="RW" description="Selects the default http transport for all RPC requests.  If set to true, RPCManager&amp;#010 will use XMLHttp for requests to the server.  If set to false, it will use hidden&amp;#010 frames.  Overrideable on a per-request basis via ${isc.DocUtils.linkForRef('attr:RPCRequest.useXmlHttpRequest')}.&amp;#010 &lt;p&gt;&amp;#010 Note that if the end user disables ActiveX controls in Internet Explorer, the XMLHttpRequest&amp;#010 object will not be available and SmartClient will automatically fall back on frames&amp;#010 communication." name="useXmlHttpRequest" valueType="boolean" defaultValue="true if XMLHttpRequest is supported, false otherwise" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="attr:RPCRequest.useXmlHttpRequest">
</seeAlso>
</docItem>
<docItem ref="method:List.setLength" flags="" description=" Set the length of this list.&amp;#010 &lt;P&gt;&amp;#010 If the length of the list is shortened, any elements past the new length of the list are removed.&amp;#010 If the length is increased, all positions past the old length have the value&amp;#010 &lt;code&gt;undefined&lt;/code&gt;.&amp;#010&amp;#010" name="setLength" type="method" definingClass="interface:List">
<params description="new length" optional="false" name="length" type="number">
</params>
    <groups>modification</groups>
</docItem>
<docItem ref="class:DateChooser" description="Simple interactive calendar interface used to pick a date.&amp;#010 Used by the ${isc.DocUtils.linkForRef('class:DateItem')} class." name="DateChooser" type="class">
    <methods>method:DateChooser.setData</methods>
    <methods>method:DateChooser.getData</methods>
    <methods>method:DateChooser.dataChanged</methods>
    <treeLocation>Client Reference/Forms</treeLocation>
    <attrs>attr:DateChooser.showTodayButton</attrs>
    <attrs>attr:DateChooser.showCancelButton</attrs>
    <attrs>attr:DateChooser.todayButtonTitle</attrs>
    <attrs>attr:DateChooser.cancelButtonTitle</attrs>
    <attrs>attr:DateChooser.prevYearIcon</attrs>
    <attrs>attr:DateChooser.prevYearIconWidth</attrs>
    <attrs>attr:DateChooser.prevYearIconHeight</attrs>
    <attrs>attr:DateChooser.prevMonthIcon</attrs>
    <attrs>attr:DateChooser.prevMonthIconWidth</attrs>
    <attrs>attr:DateChooser.prevMonthIconHeight</attrs>
    <attrs>attr:DateChooser.nextYearIcon</attrs>
    <attrs>attr:DateChooser.nextYearIconWidth</attrs>
    <attrs>attr:DateChooser.nextYearIconHeight</attrs>
    <attrs>attr:DateChooser.nextMonthIcon</attrs>
    <attrs>attr:DateChooser.nextMonthIconWidth</attrs>
    <attrs>attr:DateChooser.nextMonthIconHeight</attrs>
    <attrs>attr:DateChooser.showDoubleYearIcon</attrs>
    <attrs>attr:DateChooser.firstDayOfWeek</attrs>
    <attrs>attr:DateChooser.skinImgDir</attrs>
    <attrs>attr:DateChooser.baseButtonStyle</attrs>
    <attrs>attr:DateChooser.baseWeekdayStyle</attrs>
    <attrs>attr:DateChooser.baseWeekendStyle</attrs>
    <attrs>attr:DateChooser.alternateWeekStyles</attrs>
    <attrs>attr:DateChooser.alternateStyleSuffix</attrs>
    <attrs>attr:DateChooser.headerStyle</attrs>
    <attrs>attr:DateChooser.baseNavButtonStyle</attrs>
</docItem>
<docItem ref="classMethod:Class.registerStringMethods" flags="" description="&amp;#010	Register a method, or set of methods, that can be provided to instances of this class as&amp;#010	Strings (containing a JavaScript expression) and will be automatically converted into&amp;#010	functions.&amp;#010  &lt;p&gt;&amp;#010  For example:&amp;#010  &lt;pre&gt;&amp;#010  isc.MyClass.registerStringMethods({&amp;#010      myStringMethod: &quot;arg1, arg2&quot;&amp;#010  });&amp;#010  &lt;/pre&gt;&amp;#010&amp;#010" name="registerStringMethods" type="classMethod" definingClass="class:Class">
<params description="If this is a string, name of the property to register                                  If this is an object, assume passing in a set of name/value&amp;#010                                  pairs to register" optional="false" name="methodName" type="object">
</params>
<params description="named arguments for the property in a comma separated string                                  (not used if methodName is an object)" optional="false" name="argumentString" type="string">
</params>
</docItem>
<docItem ref="group:display_values" name="display_values" type="group">
    <refs>method:ListGridField.getGroupValue</refs>
    <refs>method:ListGridField.getGroupTitle</refs>
    <refs>method:ListGridField.getCellValue</refs>
    <refs>method:ListGridField.formatCellValue</refs>
    <refs>method:ListGrid.formatCellValue</refs>
    <refs>method:FormItem.getValueFieldName</refs>
    <refs>method:FormItem.getOptionDataSource</refs>
    <refs>method:PickList.getValueFieldName</refs>
    <refs>method:SelectItem.getValueFieldName</refs>
    <refs>method:ComboBoxItem.getValueFieldName</refs>
    <refs>attr:ListGridRecord.linkText</refs>
    <refs>attr:ListGridField.linkText</refs>
    <refs>attr:ListGridField.valueMap</refs>
    <refs>attr:ListGridField.emptyCellValue</refs>
    <refs>attr:ListGridField.optionDataSource</refs>
    <refs>attr:ListGridField.valueField</refs>
    <refs>attr:ListGridField.displayField</refs>
    <refs>attr:FormItem.emptyDisplayValue</refs>
    <refs>attr:FormItem.optionDataSource</refs>
    <refs>attr:FormItem.valueField</refs>
    <refs>attr:FormItem.displayField</refs>
    <refs>attr:FormItem.fetchMissingValues</refs>
    <refs>attr:FormItem.filterLocally</refs>
    <refs>attr:PickList.valueField</refs>
    <refs>attr:PickList.displayField</refs>
    <refs>attr:SelectItem.displayField</refs>
    <refs>attr:SelectItem.valueField</refs>
    <refs>attr:ComboBoxItem.displayField</refs>
    <refs>attr:ComboBoxItem.valueField</refs>
</docItem>
<docItem ref="method:ListGridField.getSummaryTitle" flags="A" description=" Optional string method to return a long summary title for this field, if a dynamic&amp;#010 summary title is required for this field.  &amp;#010&amp;#010" name="getSummaryTitle" type="method" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.summaryTitle">
</seeAlso>
<seeAlso ref="attr:ListGridField.title">
</seeAlso>
<params description="pointer back to the ListGrid" optional="false" name="viewer" type="listGrid">
</params>
<params description="pointer to the field object" optional="false" name="field" type="listGridField">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DynamicForm.getEditorType" flags="A" description="&amp;#010 Returns the form item type (Class Name) to be created for some field.&lt;br&gt;&amp;#010 By default &lt;code&gt;field.editorType&lt;/code&gt; will be used if present - otherwise backs off to&amp;#010 deriving the appropriate form item type from the data type of the field (see&amp;#010 ${isc.DocUtils.linkForRef('type:FormItemType')} for details.&amp;#010&amp;#010" name="getEditorType" type="method" definingClass="class:DynamicForm">
<params description="field definition for which we are deriving form item type." optional="false" name="field" type="object">
</params>
<returns description="form item type for the field" type="string"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="object:DetailViewerField" description="An object literal with a particular set of properties used to configure the display of&amp;#010 and interaction with the rows of a ${isc.DocUtils.linkForRef('class:DetailViewer')}." name="DetailViewerField" type="object">
    <methods>method:DetailViewerField.showIf</methods>
    <treeLocation>Client Reference/Grids/DetailViewer</treeLocation>
    <attrs>attr:DetailViewerField.type</attrs>
    <attrs>attr:DetailViewerField.title</attrs>
    <attrs>attr:DetailViewerField.valueMap</attrs>
    <attrs>attr:DetailViewerField.value</attrs>
    <attrs>attr:DetailViewerField.height</attrs>
</docItem>
<docItem ref="method:DataSource.transformResponse" flags="A" description=" Modify the DSResponse object derived from the response returned from the &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')}.&amp;#010 &lt;P&gt;&amp;#010 This is an override point that makes it possible to use DataSource features such as&amp;#010 paging with web services that support such features, by allowing you to fill in metadata&amp;#010 fields in the DSResponse object (such as ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}) based on&amp;#010 service-specific metadata fields contained in the service's response.&amp;#010 &lt;P&gt;&amp;#010 The DSResponse passed to this method already has ${isc.DocUtils.linkForRef('attr:DSResponse.data')}, which is&amp;#010 derived differently depending on the ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat')} setting:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &lt;code&gt;dataFormat:&quot;xml&quot;&lt;/code&gt; : either the&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')} or &amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordName','recordName')} is used to select the XML elements&amp;#010 that represent DataSource records.  The selected XML elements are passed to&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}, which transforms the XML elements to typed&amp;#010 JavaScript data using the DataSource as a schema.&amp;#010 &lt;li&gt; &lt;code&gt;dataFormat:&quot;json&quot;&lt;/code&gt; : the&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}, if specified, is used to select&amp;#010 records from the returned JSON data via ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')}.  &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} is used to derive correctly typed field values.&amp;#010 &lt;li&gt; &lt;code&gt;dataFormat:&quot;custom&quot;&lt;/code&gt; : &lt;code&gt;dsResponse.data&lt;/code&gt; is the raw response&amp;#010 in String form.  It must be parsed into an Array of Objects for subsequent processing to&amp;#010 work.&amp;#010 &lt;/ul&gt; &amp;#010 &lt;P&gt;&amp;#010 In addition to &lt;code&gt;dsResponse.data&lt;/code&gt;, ${isc.DocUtils.linkForRef('attr:DSResponse.status')} is defaulted&amp;#010 to 0 (indicating no error), and ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')} is assumed to be zero,&amp;#010 with ${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')} and ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows','totalRows')}&amp;#010 both set to &lt;code&gt;dsResponse.data.length - 1&lt;/code&gt;, that is, the returned data is&amp;#010 assumed to be all records that matched the filter criteria.&amp;#010 &lt;P&gt;&amp;#010 Examples of using this API include:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; setting ${isc.DocUtils.linkForRef('attr:DSResponse.startRow','startRow')}, &amp;#010      ${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')} and ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows','totalRows')}&amp;#010      to allow paging for a service that supports it.  For example, if an XML service&amp;#010      returns a &quot;resultRow&quot; tag that contained the row number of the first row of the&amp;#010      returned results:&lt;pre&gt;&amp;#010    dsResponse.startRow = &amp;#010        isc.XMLTools.selectNumber(xmlData, &quot;//resultRow&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 &lt;li&gt; setting ${isc.DocUtils.linkForRef('attr:DSResponse.status')} to recognized ISC error values based on&amp;#010      service-specific errors, in order to trigger standard ISC error handling.  For&amp;#010      example, setting &lt;code&gt;dsResponse.status&lt;/code&gt; to&amp;#010      ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} and filling in&amp;#010      ${isc.DocUtils.linkForRef('attr:DSResponse.errors')} in order to cause validation errors to be shown in&amp;#010      forms and grids.&amp;#010 &lt;li&gt; for services that either do not return cache update data, or return partial data,&amp;#010      using ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')} to create cache update data (whether this is&amp;#010      appropriate is application-specific), or setting&amp;#010      ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')}.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;span STYLE=&quot;color:red&quot;&gt;NOTE:&lt;/span&gt; this method is NOT an appropriate time to call&amp;#010 methods on visual components such as grids, initiate new DSRequests or RPCRequests, or&amp;#010 in general do anything other than fill in fields on the DSResponse based on data that is&amp;#010 already available.  Any actions that need to be taken as a result of the web&amp;#010 service response should be implemented exactly as for a DataSource where&amp;#010 &lt;code&gt;transformResponse()&lt;/code&gt; has not been overriden, that is, use the callback&amp;#010 passed to high-level methods such as &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','&lt;code&gt;grid.fetchData()&lt;/code&gt;')}, and do error&amp;#010 handling via either ${isc.DocUtils.linkForRef('method:DataSource.handleError')} or by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError','willHandleError')}.&amp;#010&amp;#010" name="transformResponse" type="method" definingClass="class:DataSource">
<params description="default DSResponse derived from the response data" optional="false" name="dsResponse" type="DSResponse">
</params>
<params description="DSRequest object that initiated this request" optional="false" name="dsRequest" type="DSRequest">
</params>
<params description="XML document or JSON objects returned by the web                                   service" optional="false" name="data" type="XMLDocument or JSON">
</params>
<returns description="response derived" type="DSResponse"></returns>
    <examples>${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}</examples>
</docItem>
<docItem ref="group:autoDraw" name="autoDraw" type="group">
    <refs>classMethod:isc.setAutoDraw</refs>
</docItem>
<docItem ref="attr:DSRequest.data" flags="IR" description="Data, such as search criteria or an updated record, to be acted upon.  Contents differ by&amp;#010 &lt;code&gt;operationType&lt;/code&gt;, see ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Operations')} for&amp;#010 details.&amp;#010 &lt;P&gt;&amp;#010 This field is generally filled in by passing the &quot;data&quot; argument to methods such as&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}." name="data" valueType="Object or Array of Object" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="attr:StretchImgButton.labelHPad" flags="IRW" description="The padding for a StretchImgButton's label is determined as follows.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;labelHPad&lt;/code&gt; is set it will specify the horizontal padding applied to the&amp;#010 label. Similarly if &lt;code&gt;labelVPad&lt;/code&gt; is set it will specify the vertical padding&amp;#010 for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.&amp;#010 &lt;P&gt;&amp;#010 Otherwise &lt;code&gt;labelLengthPad&lt;/code&gt; can be set to specify the label padding along the&amp;#010 length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,&amp;#010 otherwise vertical padding), and &amp;#010 &lt;code&gt;labelBreadthPad&lt;/code&gt; can be set to specify the label padding along the other axis.&amp;#010 &lt;P&gt;&amp;#010 Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and&amp;#010 will be set to zero on the breadth axis.&amp;#010 &lt;P&gt;&amp;#010 So by default the label will be sized to match the center image of the StretchImgButton, but&amp;#010 these settings allow the label to partially or wholly overlap the caps." name="labelHPad" valueType="number" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="attr:SelectItem.allowEmptyValue" flags="IRW" description="If set to true, always show an empty option in this item's pickList, allowing the user&amp;#010 to clear the value (even if there is no empty entry in the valueMap for the item).&amp;#010 &lt;P&gt;&amp;#010 The empty value will be displayed with the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.emptyDisplayValue','emptyDisplayValue')}.&amp;#010 &lt;P&gt;&amp;#010 With a ${isc.DocUtils.linkForRef('attr:SelectItem.optionDataSource','databound selectItem')}, enabling&amp;#010 &lt;code&gt;allowEmptyValue&lt;/code&gt; disables data paging - all data matching the&amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria','current criteria')} will be requested." name="allowEmptyValue" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="type:DialogButtons" description="Default buttons that you can use in your Dialogs.&amp;#010 &lt;P&gt;&amp;#010 On click these call canonical methods that you can override in your Dialog.&amp;#010 &lt;P&gt;&amp;#010 Refer to these buttons via the syntax &lt;code&gt;isc.Dialog.OK&lt;/code&gt; when passing them into&amp;#010 ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons')} or into the &lt;code&gt;properties&lt;/code&gt; argument of helper&amp;#010 methods such as ${isc.DocUtils.linkForRef('classMethod:isc.say')}." name="DialogButtons" type="type">
<values description="Button object to fire dialog's &quot;okClick()&quot; method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.OK_BUTTON_TITLE')}." value="OK"></values>
<values description="Button object to fire dialog's &quot;applyClick()&quot; method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.APPLY_BUTTON_TITLE')}." value="APPLY"></values>
<values description="Button object to fire dialog's &quot;yesClick()&quot; method on click                  Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.YES_BUTTON_TITLE')}." value="YES"></values>
<values description="Button object to fire dialog's &quot;noClick()&quot; method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.NO_BUTTON_TITLE')}." value="NO"></values>
<values description="Button object to fire dialog's &quot;cancelClick()&quot; method on click.                  Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.CANCEL_BUTTON_TITLE')}." value="CANCEL"></values>
</docItem>
<docItem ref="method:Canvas.destroy" flags="A" description="  Permanently destroy a Canvas.&lt;br&gt;&lt;br&gt;&amp;#010  &amp;#010  This does everything that clear() does, but unlike clear(), the Canvas cannot be draw()'n again,&amp;#010  cannot be referenced by it's global ID, and is eligible for garbage collection (assuming that&amp;#010  application code is not holding a reference to the Canvas).&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  Any attempt to call a method on a destroyed Canvas will generally result in an error.  If your&amp;#010  application is forced to hold onto Canvas's that might be destroy()d without warning, you can&amp;#010  avoid errors by checking for the ${isc.DocUtils.linkForRef('attr:Canvas.destroyed')} property.  If you override certain Canvas&amp;#010  methods, your code may be called while a Canvas is being destroy()d; in this case you can avoid&amp;#010  extra work (and possibly errors) by checking for the ${isc.DocUtils.linkForRef('attr:Canvas.destroying')} property.&amp;#010&amp;#010" name="destroy" type="method" definingClass="class:Canvas">
</docItem>
<docItem ref="method:TreeGrid.leafClick" flags="" description="&amp;#010 This method is called when a leaf record is clicked on.&amp;#010&amp;#010" name="leafClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.nodeClick">
</seeAlso>
<params description="The TreeGrid on which leafClick() occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The leaf (record) that was clicked" optional="false" name="leaf" type="TreeNode">
</params>
<params description="Index of the row where the click occurred." optional="false" name="recordNum" type="number">
</params>
</docItem>
<docItem ref="attr:SectionItem.sectionHeaderClass" flags="IRA" description="Canvas subclass to use as the SectionHeader.  See&amp;#010 ${isc.DocUtils.linkForRef('attr:SectionStack.sectionHeaderClass')} for a description of how to use this&amp;#010 property." name="sectionHeaderClass" valueType="CSSStyleName" defaultValue="&quot;SectionHeader&quot;" type="attr" definingClass="class:SectionItem">
</docItem>
<docItem ref="method:Tree.isDescendantOf" flags="" description="			Is one node a descendant of the other?&amp;#010&amp;#010" name="isDescendantOf" type="method" definingClass="class:Tree">
<params description="child node" optional="false" name="child" type="TreeNode">
</params>
<params description="parent node" optional="false" name="parent" type="TreeNode">
</params>
<returns description="true == parent is an ancestor of child" type="boolean"></returns>
</docItem>
<docItem ref="attr:Slider.length" flags="IRW" description="Used to set slider height if vertical, slider width if horizontal.&amp;#010 Applied to the slider track, not necessarily the entire widget.&amp;#010 Overridden by an explicit width/height specification for the widget." name="length" valueType="integer" defaultValue="200" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:Button.iconAlign" flags="IR" description="If this button is showing an icon should it be right or left aligned?" name="iconAlign" valueType="string" defaultValue="null" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="classAttr:RPCManager.removeDataPrompt" flags="IRW" description="Default prompt displayed to user while an opration is running to remove data from&amp;#010 the server.&lt;br&gt;&amp;#010 Displayed as a result of the ${isc.DocUtils.linkForRef('method:ListGrid.removeSelectedData')} code path." name="removeDataPrompt" valueType="string" defaultValue="&quot;Deleting Record(s)...&quot;" type="classAttr" definingClass="class:RPCManager">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="classAttr:Log.stackTracePriority" flags="IRWA" description="At this priority and above, a stack trace will be included automatically along with the log&amp;#010 message itself." name="stackTracePriority" valueType="LogPriority" defaultValue="Log.ERROR" type="classAttr" definingClass="class:Log">
</docItem>
<docItem ref="class:RichTextEditor" description="RichTextEditing component.  Provides a rich-text editing area along with UI for executing&amp;#010 rich-text commands on the text.&lt;br&gt;&amp;#010 The HTML generated from this component may vary by browser, and, as with any HTML &amp;#010 value created on the client, we recommend values be sanitized on the server before &amp;#010 storing and displaying to other users.&lt;br&gt;&amp;#010 Note: This component has limited support on the Safari browser." name="RichTextEditor" type="class">
    <methods>method:RichTextEditor.getValue</methods>
    <methods>method:RichTextEditor.setValue</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:RichTextEditor.value</attrs>
    <attrs>attr:RichTextEditor.controlGroups</attrs>
    <attrs>attr:RichTextEditor.styleControls</attrs>
    <attrs>attr:RichTextEditor.fontControls</attrs>
    <attrs>attr:RichTextEditor.fontNames</attrs>
    <attrs>attr:RichTextEditor.fontSizes</attrs>
    <attrs>attr:RichTextEditor.formatControls</attrs>
    <attrs>attr:RichTextEditor.colorControls</attrs>
    <examples>${isc.DocUtils.linkForExampleId('RichTextEditor')}</examples>
</docItem>
<docItem ref="attr:Splitbar.showClosedGrip" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether the grip image&amp;#010 displayed should show the &lt;code&gt;&quot;Closed&quot;&lt;/code&gt; state when the ${isc.DocUtils.linkForRef('attr:Splitbar.target')} &amp;#010 is hidden." name="showClosedGrip" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:Menu.checkmarkDisabledImage" flags="IRWA" description="Default image to display for disabled checkmarked items. See ${isc.DocUtils.linkForRef('object:ImgProperties')}&amp;#010 for format. Valid src, width and height must be specified." name="checkmarkDisabledImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:Menu">
</docItem>
<docItem deprecated="As of SmartClient version 5.5 this property has been deprecated. The   ${isc.DocUtils.linkForRef('attr:Canvas.disabled')} property will be used to govern enabled/disabled state instead &amp;#010  if &lt;code&gt;this.enabled&lt;/code&gt; has not been changed from its default value." flags="IRWA" type="attr" ref="attr:Canvas.enabled" description="If set to true, this widget will be enabled, if set to false, or null, this &amp;#010 widget will be disabled." name="enabled" valueType="boolean" defaultValue="&quot;unset&quot;" definingClass="class:Canvas">
    <setter>setEnabled</setter>
    <groups>enable</groups>
</docItem>
<docItem ref="attr:ListGrid.canGroupBy" flags="IRW" description="If false, grouping via context menu will be disabled." name="canGroupBy" valueType="Boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="method:Log.logError" flags="" description=" Log a message at &quot;error&quot; priority&amp;#010 &amp;#010" name="logError" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.logDebug" description="for usage info"></seeAlso>
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:OperationBinding.responseDataSchema" flags="IRA" description="Optional schema describing how to extract DataSource records from the XML elements selected.&amp;#010 &lt;P&gt;&amp;#010 Once a set of XML elements have been selected via &lt;code&gt;recordXPath&lt;/code&gt; or&amp;#010 &lt;code&gt;recordName&lt;/code&gt;, those elements are normally transformed to JavaScript objects&amp;#010 using the &lt;code&gt;fields&lt;/code&gt; of the DataSource that owns the operationBinding.  An&amp;#010 &lt;code&gt;responseDataSchema&lt;/code&gt; can be specified instead if the XML differs in some way between&amp;#010 different DataSource operations, such that different values for&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','field.valueXPath')} may be necessary to extract the same&amp;#010 DataSource record from slightly different XML structures." name="responseDataSchema" valueType="DataSource" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem flags="IR" type="attr" ref="attr:Canvas.showResizeBar" description="When this Canvas is included as a member in a Layout, whether a resizeBar should be shown&amp;#010 after this member in the layout, to allow it to be resized.&amp;#010 &lt;p&gt;&amp;#010 By default the resize bar acts on the Canvas that it is declared on.  If you want the resize&amp;#010 bar to instead act on the next member of the Layout (e.g. to collapse down or to the right),&amp;#010 set ${isc.DocUtils.linkForRef('attr:Canvas.resizeBarTarget')} as well." name="showResizeBar" valueType="boolean" defaultValue="false" definingClass="class:Canvas">
    <setter>setShowResizeBar</setter>
<seeAlso ref="attr:Canvas.resizeBarTarget">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('layoutNesting')}</examples>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="method:TreeGrid.setSelectedPaths" flags="" description=" Reset this grid's selection to match the ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to &amp;#010 ${isc.DocUtils.linkForRef('method:TreeGrid.getSelectedPaths')}.&amp;#010&amp;#010" name="setSelectedPaths" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.getSelectedPaths">
</seeAlso>
<params description="Object describing the desired selection state of                                              the grid" optional="false" name="selectedPaths" type="listGridSelectedState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="method:Tree.isLeaf" flags="" description="&amp;#010 Returns true if the passed in node is a leaf.&amp;#010&amp;#010" name="isLeaf" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node is a leaf" type="boolean"></returns>
</docItem>
<docItem ref="attr:RPCRequest.bypassCache" flags="IRWA" description="For xmlHttp transport + httpMethod: &quot;GET&quot;  only, set to true to force IE to send a conditional&amp;#010 GET request even if the browser thinks it has a current cached response." name="bypassCache" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="attr:Progressbar.percentDone" flags="IRW" description="Number from 0 to 100, inclusive, for the percentage to be displayed graphically in&amp;#010 this progressbar." name="percentDone" valueType="number" defaultValue="0" type="attr" definingClass="class:Progressbar">
    <setter>setPercentDone</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:MenuBar.showMenu" flags="" description=" Shows (opens) a menu.&amp;#010" name="showMenu" type="method" definingClass="class:MenuBar">
<params description="menu to show (may be specified as a menu object, or index of                                   the menu from ${isc.DocUtils.linkForRef('attr:MenuBar.menus','this.menus')})." optional="false" name="menu" type="Menu | integer">
</params>
</docItem>
<docItem ref="class:DSRequest" description="Request sent to the server to initiate a &amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')}.  All properties which are legal on&amp;#010 ${isc.DocUtils.linkForRef('class:RPCRequest')} are legal, in addition to the properties listed here." name="DSRequest" type="class" inheritsFrom="RPCRequest">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:DSRequest.data</attrs>
    <attrs>attr:DSRequest.startRow</attrs>
    <attrs>attr:DSRequest.endRow</attrs>
    <attrs>attr:DSRequest.dataSource</attrs>
    <attrs>attr:DSRequest.operationType</attrs>
    <attrs>attr:DSRequest.sortBy</attrs>
    <attrs>attr:DSRequest.oldValues</attrs>
    <attrs>attr:DSRequest.operationId</attrs>
    <attrs>attr:DSRequest.textMatchStyle</attrs>
    <attrs>attr:DSRequest.clientContext</attrs>
    <attrs>attr:DSRequest.parentNode</attrs>
    <attrs>attr:DSRequest.resultTree</attrs>
    <attrs>attr:DSRequest.resultSet</attrs>
    <attrs>attr:DSRequest.useFlatFields</attrs>
    <attrs>attr:DSRequest.useFlatHeaderFields</attrs>
    <attrs>attr:DSRequest.headerData</attrs>
<seeAlso ref="class:RPCRequest">
</seeAlso>
</docItem>
<docItem ref="attr:DetailViewer.fields" flags="IRW" description="An array of field objects, specifying the order and type of fields to display in this&amp;#010 DetailViewer.  In DetailViewers, the fields specify rows." name="fields" valueType="List of DetailViewerField" defaultValue="null" type="attr" definingClass="class:DetailViewer">
</docItem>
<docItem ref="attr:ListGrid.recordCustomStyleProperty" flags="IRW" description="Denotes the name of a property that can be set on records to display a custom style.&amp;#010 For example if this property is set to &lt;code&gt;&quot;customStyle&quot;&lt;/code&gt;, setting &amp;#010 &lt;code&gt;record.customStyle&lt;/code&gt; to a css styleName will cause the record in question to&amp;#010 render out with that styling applied to it.  Note that this will be a static &amp;#010 style - it will not be modified as the state of the record (selected / over etc) changes." name="recordCustomStyleProperty" valueType="&quot;customStyle&quot;" defaultValue="string" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<seeAlso ref="attr:ListGrid.recordBaseStyleProperty">
</seeAlso>
</docItem>
<docItem ref="method:CubeGrid.facetValueReordered" flags="" description=" &amp;#010      Notification fired when a facet or facetValueGroup is reordered&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueReordered" type="method" definingClass="class:CubeGrid">
<params description="facetValueGroupId or facetId" optional="false" name="groupId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.doesntContain" flags="IR" description="Determine whether a string value does not contain some substring specified via &amp;#010 &lt;code&gt;validator.substring&lt;/code&gt;." name="doesntContain" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:TabSet.paneContainerOverflow" flags="IRWA" description="Specifies the overflow of the pane container (the component that holds the pane contents&amp;#010 for all tabs).  By default this is set to &quot;auto&quot;, meaning the pane container will&amp;#010 automatically introduce scrolling when the pane contents exceed the TabSet's specified&amp;#010 size.&amp;#010 &lt;p&gt;&amp;#010 For other values and their meaning, see ${isc.DocUtils.linkForRef('type:Overflow')}" name="paneContainerOverflow" valueType="Overflow" defaultValue="Canvas.AUTO" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:Tree.isFolder" flags="" description="&amp;#010 Determines whether a particular node is a folder.  The logic works as follows:&lt;br&gt;&lt;br&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; If the ${isc.DocUtils.linkForRef('object:TreeNode')} has a value for the ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}&amp;#010 (${isc.DocUtils.linkForRef('attr:TreeNode.isFolder')} by default) that value is returned.&amp;#010 &lt;li&gt; Next, the existence of the ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')} (by default&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeNode.children')} is checked on the ${isc.DocUtils.linkForRef('object:TreeNode')}.  If the node has the children&amp;#010 property defined (regardless of whether it actually has any children), then isFolder()&amp;#010 returns true for that node.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 You can override this method to provide your own intepretation of what constitutes a folder.&amp;#010&amp;#010" name="isFolder" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node is a folder" type="boolean"></returns>
</docItem>
<docItem ref="method:Log.echoLeaf" flags="" description=" Return a very short (generally less than 40 characters) string representation of any object,&amp;#010 suitable for viewing by a developer for debugging purposes.&amp;#010&amp;#010" name="echoLeaf" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.echo">
</seeAlso>
<params description="object to echo" optional="false" name="obj" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
    <groups>debug</groups>
</docItem>
<docItem ref="attr:SectionStack.visibilityMode" flags="IRW" description="Whether multiple sections can be visible at once" name="visibilityMode" valueType="VisibilityMode" defaultValue="&quot;mutex&quot;" type="attr" definingClass="class:SectionStack">
<seeAlso ref="type:VisibilityMode">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="classAttr:RPCManager.credentialsURL" flags="RWA" description="Specifies URL where credentials should be submitted to attempt relogin when session&amp;#010 timeout is encountered during a background RPC.  See ${isc.DocUtils.linkForRef('group:relogin','Relogin')}" name="credentialsURL" valueType="string" defaultValue="RPCManager.credentialsURL" type="classAttr" definingClass="class:RPCManager">
    <groups>relogin</groups>
</docItem>
<docItem ref="attr:LinkItem.target" flags="IRW" description="By default, clicking a link rendered by this item opens it in a new browser window.  You can&amp;#010 alter this behavior by setting this property.  The value of this property will be passed as the&amp;#010 value to the &lt;code&gt;target&lt;/code&gt; attribute of the anchor tag used to render the link." name="target" valueType="string" defaultValue="&quot;_blank&quot;" type="attr" definingClass="class:LinkItem">
</docItem>
<docItem ref="attr:ListGrid.canAcceptDroppedRecords" flags="IRW" description="Indicates whether records can be dropped into this listGrid." name="canAcceptDroppedRecords" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridRecord.canDrag">
</seeAlso>
<seeAlso ref="attr:ListGridRecord.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragListMove')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.showPickListOnKeypress" flags="IRW" description="Should the list of options be displayed whenever the user types into the &amp;#010 the combo-box textArea, or only when the user clicks on the pick button or uses the &amp;#010 explicit &lt;code&gt;Alt+Arrow Down&lt;/code&gt; key combo?" name="showPickListOnKeypress" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:TabSet.pickerButtonHSrc" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is &amp;#010 set to true, this property governs the base URL for the picker&amp;#010 button image, when displayed in a horizontal tab-bar [IE ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is&amp;#010 set to &lt;code&gt;&quot;top&quot;&lt;/code&gt; or &lt;code&gt;&quot;bottom&quot;&lt;/code&gt;].&amp;#010 &lt;P&gt;&amp;#010 Note that if &lt;code&gt;symmetricPickerButton&lt;/code&gt; is false, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}&amp;#010 property will be used instead.&amp;#010 &lt;P&gt;&amp;#010 This base URL will have a suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; appended when the user holds the&amp;#010 mouse down over the button, and &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; if the tabset as a whole is &amp;#010 disabled." name="pickerButtonHSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]hpicker.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricPickerButton">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="method:Array.contains" flags="" description=" Return if this list contains the specified object.&amp;#010 &lt;P&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010&amp;#010" name="contains" type="method" definingClass="object:Array">
<params description="item to look for" optional="false" name="obj" type="any">
</params>
<params description="optional position in the list to look after" optional="true" name="pos" type="number">
</params>
<returns description="true == item was found, false == not found" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:ListGrid.confirmDiscardEditsMessage" flags="IRW" description="If &lt;code&gt;this.confirmDiscardEdits&lt;/code&gt; is true, this property can be used to customize the&amp;#010 error message string displayed to the user in a dialog with options to &amp;#010 cancel the action, or save or discard pending edits in response to sort/filter actions&amp;#010 that would otherwise drop unsaved edit values." name="confirmDiscardEditsMessage" valueType="string" defaultValue="&quot;This action will discard all unsaved edited values for this list.&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.pickerIconSrc" flags="IRWA" description="Src for the picker icon" name="pickerIconSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/ComboBoxItem_PickButton_icon.gif&quot;" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:TreeGrid.dropIconSuffix" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')} is true, this suffix will be appended to the&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} when the user drop-hovers over some folder." name="dropIconSuffix" valueType="String" defaultValue="&quot;drop&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:FormItem.fetchMissingValues" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} is specified for this item, should the item &amp;#010 perform a fetch on the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} to retrieve the display value&amp;#010 for the item when ${isc.DocUtils.linkForRef('method:FormItem.setValue')} is called with a value for which we&amp;#010 do not already have a mapped display value?" name="fetchMissingValues" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
    <groups>display_values</groups>
</docItem>
<docItem ref="method:Layout.addMember" flags="" description="&amp;#010  Add a canvas to the layout, optionally at a specific position.&amp;#010&amp;#010" name="addMember" type="method" definingClass="class:Layout">
<seeAlso ref="method:Layout.addMembers">
</seeAlso>
<params description="the canvas object to be added to the layout" optional="false" name="newMember" type="canvas">
</params>
<params description="the position in the layout to place newMember (starts with 0);                                  if omitted, it will be added at the last position" optional="true" name="position" type="number">
</params>
</docItem>
<docItem ref="attr:CubeGrid.facetLabelHoverHeight" flags="IRWA" description="If specified and &lt;code&gt;this.showHover&lt;/code&gt; is true, this is the default height to apply&amp;#010 to hover tips shown for facetLabels. If unset, hover canvas will be sized to &amp;#010 &lt;code&gt;this.hoverHeight&lt;/code&gt; if specified instead." name="facetLabelHoverHeight" valueType="measure" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverHeight">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="attr:ButtonItem.showTitle" flags="IRW" description="Buttons do not show a title by default." name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ButtonItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="type:FireStyle" description="Flags to set automatic removal of events from the page event registry." name="FireStyle" type="type">
<values description="Call the registered handler any time the event occurs" value="null"></values>
<values description="Call the registered handler the first time the event                               occurs, then unregister the handler as though&amp;#010                               ${isc.DocUtils.linkForRef('classMethod:Page.clearEvent')} had been called" value="Page.FIRE_ONCE"></values>
<seeAlso ref="classMethod:Page.setEvent">
</seeAlso>
    <groups>EventRegistry</groups>
</docItem>
<docItem ref="attr:GridRenderer.alternateRowStyles" flags="IRW" description="Whether alternating rows should be drawn in alternating styles, in order to create a &quot;ledger&quot;&amp;#010 effect for easier reading.  If enabled, the cell style for alternate rows will have &quot;Dark&quot;&amp;#010 appended to it." name="alternateRowStyles" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:Facet.showParentsLast" flags="IR" description="Indicates internal hierarchy should be displayed in reverse of normal tree order (so&amp;#010 that parents follow children)" name="showParentsLast" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="attr:Tree.defaultIsFolder" flags="IR" description="Controls whether nodes are assumed to be folders or leaves by default.&amp;#010 &lt;P&gt;&amp;#010 Nodes that have children or have the ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')} set to true will be considered&amp;#010 folders by default.  Other nodes will be considered folders or leaves by default according&amp;#010 to this setting." name="defaultIsFolder" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:TreeGrid.loadDataOnDemand">
</seeAlso>
</docItem>
<docItem ref="group:paging" name="paging" type="group">
    <refs>attr:DSResponse.startRow</refs>
    <refs>attr:DSResponse.endRow</refs>
    <refs>attr:DSResponse.totalRows</refs>
    <refs>attr:DSRequest.startRow</refs>
    <refs>attr:DSRequest.endRow</refs>
</docItem>
<docItem ref="attr:TreeGrid.initialData" flags="IRA" description="You can specify the initial set of data for a databound TreeGrid using this property.&amp;#010 The value of this attribute should be a list of &lt;code&gt;parentId&lt;/code&gt; linked&amp;#010 ${isc.DocUtils.linkForRef('object:TreeNode')}s in a format equivalent to that documented on ${isc.DocUtils.linkForRef('attr:Tree.data')}." name="initialData" valueType="List of TreeNode" defaultValue="null" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="object:TreeNode">
</seeAlso>
<seeAlso ref="attr:Tree.data">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('initialData')}</examples>
</docItem>
<docItem ref="attr:ServerObject.bean" flags="IR" description="For use when ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is &lt;code&gt;&quot;spring&quot;&lt;/code&gt;, id of the bean to ask&amp;#010 Spring to create." name="bean" valueType="String" defaultValue="null" type="attr" definingClass="class:ServerObject">
</docItem>
<docItem ref="attr:TabSet.animateTabScrolling" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} is true, should tabs be scrolled into view via an &amp;#010 animation when the user interacts with the scroller buttons?" name="animateTabScrolling" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="attr:ServerObject.className" flags="IR" description="Specifies the fully-qualified class name that provides the server-side endpoint of the DMI&amp;#010 (${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:&quot;new&quot;) or the class name of the factory that produces the&amp;#010 DMI instance (${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:&quot;factory&quot;).&amp;#010 &lt;p&gt;&amp;#010 This is one of the values that you need to pass to ${isc.DocUtils.linkForRef('classMethod:DMI.call')} to invoke the DMI from&amp;#010 the client.&amp;#010 &lt;p&gt;&amp;#010 The value of this attribute is used only for &lt;code&gt;&quot;new&quot;&lt;/code&gt; and &lt;code&gt;&quot;factory&quot;&lt;/code&gt;&amp;#010 values of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}." name="className" valueType="String" defaultValue="null" type="attr" definingClass="class:ServerObject">
<seeAlso ref="attr:ServerObject.lookupStyle">
</seeAlso>
<seeAlso ref="attr:ServerObject.ID">
</seeAlso>
<seeAlso ref="classMethod:DMI.call">
</seeAlso>
</docItem>
<docItem ref="method:CubeGrid.setFacetTitleAlign" flags="" description="&amp;#010      set the align of a facet title (appears in facet label)&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; setter&amp;#010" name="setFacetTitleAlign" type="method" definingClass="class:CubeGrid">
<params description="facet to update" optional="false" name="facetId" type="id">
</params>
<params description="new alignment for facet title" optional="false" name="align" type="alignEnum">
</params>
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:Facet.borderBefore" flags="IR" description="CSS line style to apply as a border before this facet, eg &quot;1px dashed blue&quot;" name="borderBefore" valueType="string" defaultValue="null" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="attr:ListGrid.headerTitleStyle" flags="IR" description="${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')} to apply to the buttons in the header, and the sorter,&amp;#010 for this ListGrid.&amp;#010 Note that this will typically only have an effect if &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')} is set to ${isc.DocUtils.linkForRef('class:StretchImgButton')} or a subclass &amp;#010 thereof." name="headerTitleStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSourceField.length" flags="IR" description="Maximum number of characters allowed.  Applicable only to fields of text type." name="length" valueType="number" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <examples>${isc.DocUtils.linkForExampleId('longText')}</examples>
    <groups>dataType</groups>
</docItem>
<docItem ref="attr:Facet.values" flags="IRW" description="Array of facetValue definitions." name="values" valueType="Array of FacetValue" defaultValue="null" type="attr" definingClass="class:Facet">
<seeAlso ref="class:FacetValue">
</seeAlso>
</docItem>
<docItem ref="attr:Window.minimizeAcceleration" flags="IRWA" description="Default acceleration function for performing an animated minimize / maximize.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="minimizeAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ImgSectionHeader.background" flags="R" description="Background of the section header, based on a StretchImg." name="background" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:ImgSectionHeader">
</docItem>
<docItem ref="method:Class.getSuperClass" flags="" description="	&amp;#010	Gets a pointer to the class object for this instance's superclass.&amp;#010&amp;#010" name="getSuperClass" type="method" definingClass="class:Class">
<returns description="Class object for superclass." type="Class"></returns>
</docItem>
<docItem ref="method:Canvas.getImgURL" flags="A" description=" Return the full URL for an image to be drawn in this canvas.&amp;#010 &lt;P&gt;&amp;#010 If the passed URL begins with the special prefix &quot;[SKIN]&quot;, it will have the&amp;#010 widget.skinImgDir and Page.skinImgDir prepended.  Otherwise the image is assumed to be&amp;#010 application-specific, and will have the widget.appImgDir and Page.appImgDir automatically&amp;#010 prepended.&amp;#010 &lt;P&gt;&amp;#010 Note that if passed an absolute path (starting with &quot;/&quot; or &quot;http://&quot; for example), no extra&amp;#010 image directory information will be prepended to the generated URL.// &amp;#010		&amp;#010" name="getImgURL" type="method" definingClass="class:Canvas">
<params description="URL local to skin or application image directory" optional="false" name="URL" type="string">
</params>
<params description="optional image directory to override the default for this Canvas" optional="true" name="imgDir" type="string">
</params>
<returns description="URL to use" type="string"></returns>
    <groups>images</groups>
</docItem>
<docItem ref="method:ImgButton.action" flags="" description=" This property contains the default 'action' for the Button to fire when activated.&amp;#010" name="action" type="method" definingClass="class:ImgButton">
</docItem>
<docItem ref="classMethod:isc.setAutoDraw" flags="" description=" Set the global default setting for ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw')}.&amp;#010 &lt;p&gt;&amp;#010 After calling &lt;code&gt;isc.setAutoDraw()&lt;/code&gt;, any newly created Canvas which is not given an&amp;#010 explicit setting for ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw','autoDraw')} will follow the new default setting.&amp;#010 &lt;P&gt;&amp;#010 autoDraw:false is the recommended default setting for most applications since it ensures&amp;#010 that extra draws will not occur when developers inadvertently omit the autoDraw:false&amp;#010 setting on child components.&amp;#010&amp;#010" name="setAutoDraw" type="classMethod" definingClass="class:isc">
<seeAlso ref="attr:Canvas.autoDraw">
</seeAlso>
<params description="whether autoDraw should be enabled or disabled.  Defaults to true." optional="true" name="enable">
</params>
    <groups>autoDraw</groups>
</docItem>
<docItem ref="attr:DataSourceField.hidden" flags="IR" description="Whether this field should be hidden from users by default within a DataBound component.&amp;#010 This is generally used for internal ids and other values not meaningful to users." name="hidden" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSourceField">
    <groups>componentBinding</groups>
</docItem>
<docItem ref="attr:FormItem.hoverVAlign" flags="IRW" description="Vertical text alignment  for text displayed in this item's hover canvas, if shown." name="hoverVAlign" valueType="measure" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverVAlign">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:DataSource.jsonPrefix" flags="IRA" description="Allows you to specify an arbitrary prefix string to apply to all json format responses &amp;#010 sent from the server to this application.&lt;br&gt;&amp;#010 The inclusion of such a prefix ensures your code is not directly executable outside of&amp;#010 your application, as a preventitive measure against&amp;#010 &lt;a href='http://www.google.com/search?q=javascript+hijacking' onclick=&quot;window.open('http://www.google.com/search?q=javascript+hijacking');return false;&quot;&gt;javascript hijacking&lt;/a&gt;.&amp;#010 &lt;br&gt;&amp;#010 Only applies to responses formatted as json objects. Does not apply to responses returned&amp;#010 via scriptInclude type transport.&lt;br&gt;&amp;#010 Note: If the prefix / suffix served by your backend is not a constant, you can use &amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataFormat','dataFormat:&quot;custom&quot;')} instead and explicitly parse&amp;#010 the prefix out as part of ${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse()')}." name="jsonPrefix" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="attr:OperationBinding.dataFormat">
</seeAlso>
<seeAlso ref="attr:OperationBinding.dataTransport">
</seeAlso>
</docItem>
<docItem ref="method:ComboBoxItem.defaultDynamicValue" flags="A" description=" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultValue')} when no value is &amp;#010 provided for this item. To default to the first option use&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} instead.&amp;#010" name="defaultDynamicValue" type="method" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="classMethod:Log.applyLogPriorities" flags="" description=" Apply a batch a batch of priority settings, as a object mapping category names to priority&amp;#010 levels.&amp;#010&amp;#010" name="applyLogPriorities" type="classMethod" definingClass="class:Log">
<params description="priority settings for multiple categories" optional="false" name="settings" type="Object">
</params>
</docItem>
<docItem ref="group:elements" description="Manipulating native form elements" name="elements" type="group">
    <refs>method:DynamicForm.setItems</refs>
    <refs>method:DynamicForm.setFields</refs>
    <refs>method:DynamicForm.getFields</refs>
    <refs>method:DynamicForm.getItems</refs>
</docItem>
<docItem ref="method:ListGrid.filterData" flags="" description=" Retrieves data that matches the provided criteria and displays the matching data in this&amp;#010 component.&amp;#010 &lt;P&gt;&amp;#010 This method behaves exactly like ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} except that&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is automatically set to &quot;substring&quot; so that String-valued&amp;#010 fields are matched by case-insensitive substring comparison.&amp;#010&amp;#010" name="filterData" type="method" definingClass="class:ListGrid">
<params description="Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument&amp;#010                      instead of a raw criteria object, will be derived by calling&amp;#010                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="for databound components only - optional                            additional properties to set on the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundFilter')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:Canvas.dragRepositionMove" flags="A" description="&amp;#010 Executed every time the mouse moves while drag-repositioning. If this method&amp;#010 does not return false, the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline if&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to &quot;outline&quot; will automatically be moved as appropriate&amp;#010 whenever the mouse moves.&amp;#010&amp;#010" name="dragRepositionMove" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to suppress auto-move of the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} or outline." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="attr:StretchImgButton.align" flags="IRW" description="Horizontal alignment of this component's title." name="align" valueType="Alignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:StretchImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGridField.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGrid.generateClickOnSpace" flags="IRWA" description="If true, when the user navigates to a cell using arrow keys and hits space, &amp;#010 the cell will respond to a click event." name="generateClickOnSpace" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:ImgButton.labelHPad" flags="IRW" description="Horizontal padding to be applied to this widget's label. If this value is null, &amp;#010 the label will be given a horizontal padding of zero.&amp;#010 &lt;p&gt;&amp;#010 The specified amount of padding is applied to the left and right edges of the button, so&amp;#010 the total amount of padding is 2x the specified value." name="labelHPad" valueType="number" defaultValue="null" type="attr" definingClass="class:ImgButton">
</docItem>
<docItem ref="classMethod:Page.resizeTo" flags="" description="		Resize the outer portion of the window to a specific width and height.&amp;#010" name="resizeTo" type="classMethod" definingClass="class:Page">
<params description="new width for the window" optional="false" name="width" type="number">
</params>
<params description="new height for the window" optional="false" name="height" type="number">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:Canvas.showHover" flags="IRW" description="If &lt;code&gt;this.canHover&lt;/code&gt; is true, should we show the global hover canvas by default&amp;#010 when the user hovers over this canvas?" name="showHover" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getHoverHTML">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:Canvas.dragAppearance" flags="IRWA" description="Visual appearance to show when the object is being dragged." name="dragAppearance" valueType="DragAppearance" defaultValue="EventHandler.OUTLINE" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Canvas.getLeft" flags="" description="			Return the left coordinate of this object, relative to its enclosing context, in pixels.&amp;#010" name="getLeft" type="method" definingClass="class:Canvas">
<returns description="left coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:TreeGrid.leafContextClick" flags="" description="&amp;#010 This method is called when a context click occurs on a leaf record.&amp;#010&amp;#010" name="leafContextClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.nodeContextClick">
</seeAlso>
<params description="The TreeGrid on which the contexclick occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The leaf (record) on which the contextclick occurred." optional="false" name="leaf" type="TreeNode">
</params>
<params description="Index of the row where the contextclick occurred." optional="false" name="recordNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
</docItem>
<docItem ref="attr:ListGrid.modalEditing" flags="IRWA" description="If this property is true, any mouse click outside of the open cell editors&amp;#010      will end editing mode, hiding the cell editors and saving any changes to those&amp;#010      cell values." name="modalEditing" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('modalEditing')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Window.maximize" flags="" description=" Maximize the window. Fired when the user clicks the maximize button if &amp;#010 ${isc.DocUtils.linkForRef('attr:Window.showMaximizeButton','this.showMaximizeButton')} is true.&lt;br&gt;&amp;#010 Default implementation moves the window to &lt;code&gt;0, 0&lt;/code&gt; and resizes the window to &amp;#010 &lt;code&gt;&quot;100%&quot;&lt;/code&gt; on both axes, so it will fill the browser window (or the parentElement&amp;#010 of the Window instance, if appropriate).&lt;br&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:Window.animateMinimize','animateMinimize')} is true, the maximize will be animated.&amp;#010 A restore button will be displayed in place of the maximize button when the window is &amp;#010 maximized.&amp;#010 &amp;#010" name="maximize" type="method" definingClass="class:Window">
</docItem>
<docItem ref="attr:ListGridField.iconVAlign" flags="IRA" description="If this field is editable, this property will be passed to editors displayed for&amp;#010 cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconVAlign')}." name="iconVAlign" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:TabBar.defaultTabSize" flags="IR" description="Default size (length) in pixels for tabs within this tabBar" name="defaultTabSize" valueType="number" defaultValue="80" type="attr" definingClass="class:TabBar">
</docItem>
<docItem ref="method:Canvas.getWidth" flags="" description=" Return the width of this object, in pixels.&amp;#010" name="getWidth" type="method" definingClass="class:Canvas">
<returns description="width" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:SelectItem.showPicker" flags="" description=" Method to show a picker for this item. By default this method is called if the user&amp;#010 clicks on a pickerIcon, shown by setting &lt;code&gt;this.showPickerIcon&lt;/code&gt; to true. May&amp;#010 also be called programatically.&lt;br&gt;&amp;#010 Default implementation lazily creates a 'picker' from the set of defaults defined on&amp;#010 this FormItem.&amp;#010" name="showPicker" type="method" definingClass="class:SelectItem">
<params description="Is this a modal picker" optional="true" name="modal" type="boolean">
</params>
<params description="Pointer to the icon that launched this picker (if applicable)" optional="true" name="icon" type="icon">
</params>
<params description="properties to apply to the picker" optional="true" name="pickerProperties" type="object">
</params>
<params description="Object with &lt;code&gt;left, top, width, height&lt;/code&gt; properties for                        positioning the picker." optional="true" name="rect" type="object">
</params>
</docItem>
<docItem ref="method:ListGrid.cellHover" flags="" description=" Called when the mouse hovers over a cell if this.canHover is true. &amp;#010  Returning false will suppress the hover text from being shown if this.showHover is true.&amp;#010&amp;#010" name="cellHover" type="method" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:Menu.setData" flags="" description=" Change the set of items to display in this menu&amp;#010" name="setData" type="method" definingClass="class:Menu">
<params description="new items for this menu" optional="false" name="items" type="array of MenuItems">
</params>
    <groups>data</groups>
</docItem>
<docItem ref="attr:Canvas.layoutAlign" flags="IR" description="When this Canvas is included as a member in a Layout, layoutAlign controls alignment on the&amp;#010 breadth axis of the layout.  Default is &quot;left&quot; for a VLayout, &quot;top&quot; for an HLayout." name="layoutAlign" valueType="Alignment or VerticalAlignment" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:Layout.paddingAsLayoutMargin" flags="IRWA" description="If this widget has padding specified (as ${isc.DocUtils.linkForRef('attr:Canvas.padding','this.padding')} or in the&amp;#010 CSS style applied to this layout), should it show up as space outside the members,&amp;#010 similar to layoutMargin?&amp;#010 &lt;P&gt;&amp;#010 If this setting is false, padding will not affect member positioning (as CSS padding&amp;#010 normally does not affect absolutely positioned children).  Leaving this setting true&amp;#010 allows a designer to more effectively control layout purely from CSS.&amp;#010 &lt;P&gt;&amp;#010 Note that ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')} if specified, takes precidence over this value." name="paddingAsLayoutMargin" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="classMethod:Page.setTitle" flags="" description="		Set the title of the page, which is typically shown as part of the browser window title&amp;#010" name="setTitle" type="classMethod" definingClass="class:Page">
</docItem>
<docItem ref="attr:ComboBoxItem.defaultToFirstOption" flags="IRW" description="Select the first option as the default value for this ComboBoxItem. If options are derived&amp;#010 from a dataSource, the first value returned by the server will be used, otherwise the first&amp;#010 value in the valueMap. If enabled, this setting overrides ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultValue')}&amp;#010 and ${isc.DocUtils.linkForRef('method:ComboBoxItem.defaultDynamicValue')}|." name="defaultToFirstOption" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:MenuButton.setShowMenuButtonImage" flags="" description=" Setter for the 'showMenuButtonImage' property - shows/hides the menu button image&amp;#010 at runtime&amp;#010" name="setShowMenuButtonImage" type="method" definingClass="class:MenuButton">
<params description="Should the image be shown" optional="false" name="show" type="boolean">
</params>
</docItem>
<docItem ref="method:CubeGrid.discardAllEdits" flags="A" description="&amp;#010" name="discardAllEdits" type="method" definingClass="class:CubeGrid">
<params description="allows you to specify which cell(s) to drop                   edits for. Each record should be identified as an array containing &amp;#010                  &lt;code&gt;[rowNum,colNum]&lt;/code&gt;" optional="true" name="records" type="array of 2-element arrays">
</params>
<params description="By default this method will hide the editor if                              it is currently showing for any row in the grid. Passing in&amp;#010                              this parameter will leave the editor visible (and just reset&amp;#010                              the edit values underneath the editor)." optional="true" name="dontHideEditor" type="boolean">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ListGrid.selection" flags="RA" description="The Selection object associated with the listGrid." name="selection" valueType="Selection" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <getter>getSelection</getter>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Canvas.edgeOffset" flags="IR" description="Amount the contained Canvas should be offset.  Defaults to edgeSize; set to less than&amp;#010 edgeSize to allow the contained Canvas to overlap the edge and corner media." name="edgeOffset" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('corners')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="class:Facet" description="Facet definition object made use of by the CubeGrid class." name="Facet" type="class">
    <treeLocation>Optional Modules/Analytics/CubeGrid</treeLocation>
    <attrs>attr:Facet.id</attrs>
    <attrs>attr:Facet.title</attrs>
    <attrs>attr:Facet.values</attrs>
    <attrs>attr:Facet.rollupValue</attrs>
    <attrs>attr:Facet.isTree</attrs>
    <attrs>attr:Facet.showParentsLast</attrs>
    <attrs>attr:Facet.collapsed</attrs>
    <attrs>attr:Facet.canCollapse</attrs>
    <attrs>attr:Facet.canMinimize</attrs>
    <attrs>attr:Facet.width</attrs>
    <attrs>attr:Facet.align</attrs>
    <attrs>attr:Facet.titleAlign</attrs>
    <attrs>attr:Facet.cellAlign</attrs>
    <attrs>attr:Facet.borderBefore</attrs>
    <attrs>attr:Facet.borderAfter</attrs>
    <attrs>attr:Facet.selectionBoundary</attrs>
    <attrs>attr:Facet.summaryValue</attrs>
    <attrs>attr:Facet.summaryTitle</attrs>
    <attrs>attr:Facet.synchColumnLayout</attrs>
    <requiresModules>Analytics</requiresModules>
</docItem>
<docItem ref="attr:Canvas.maxHeight" flags="IRWA" description="Maximum height that this Canvas can be resized to." name="maxHeight" valueType="number" defaultValue="10000" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:StretchImg.imageType" flags="IRW" description="Indicates whether the image should be tiled/cropped, stretched, or centered when the&amp;#010          size of this widget does not match the size of the image. See ImageStyle for&amp;#010          details." name="imageType" valueType="ImageStyle" defaultValue="Img.STRETCH" type="attr" definingClass="class:StretchImg">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Class.delayCall" flags="" description="  This is a helper to delay a call to a method on some target by a specified&amp;#010  amount of time.  Can be used to delay a call to a static method on this class by &amp;#010  ommiting the &lt;code&gt;target&lt;/code&gt; parameter.&amp;#010" name="delayCall" type="classMethod" definingClass="class:Class">
<params description="name of the method to call" optional="false" name="methodName" type="string">
</params>
<params description="array of arguments to pass to the method in question" optional="true" name="arrayArgs" type="array">
</params>
<params description="Number of ms to delay the call by - defaults to zero (so just pulls                        execution of the method out of the current execution thread." optional="true" name="time" type="number">
</params>
<params description="Target to fire the method on - if unspecified assume this is                          a call to a classMethod on this Class." optional="true" name="target" type="object">
</params>
<returns description="Timer ID for the delayed call - can be passed to                       ${isc.DocUtils.linkForRef('classMethod:Timer.clear')} to cancel the call before it executes" type="string"></returns>
</docItem>
<docItem ref="method:ListGrid.getCellErrors" flags="" description="  Returns the current set of errors for this cell. &amp;#010" name="getCellErrors" type="method" definingClass="class:ListGrid">
<params description="index of row to check for validation errors." optional="false" name="rowNum" type="number">
</params>
<params description="field to check for validation errors - can be fieldName                                           or index of the column." optional="false" name="fieldName" type="string | number">
</params>
<returns description="array of error messages (strings) for the specified cell. If no validation                   errors are present, returns null." type="array"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:Button.iconSpacing" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="iconSpacing" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:nonJavaBackend" title=".NET, PHP, Serverless Integration" description="SmartClient is fully functional without installation of the Java server included in the SDK,&amp;#010 and can be integrated with any server technology.  This topic providing pointers to&amp;#010 documentation that is most relevant for this type of integration.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Installation&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 As described in ${isc.DocUtils.linkForRef('group:iscInstall','&lt;i&gt;Deploying SmartClient&lt;/i&gt;')}, for a client-only&amp;#010 integration, installation consists of just copying a directory of JavaScript and media files&amp;#010 to your webserver.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Creating Components&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 SmartClient components can be included in any .html page, including dynamically generated pages&amp;#010 produced by .php or .asp files.  The SmartClient libraries can be included in the page as&amp;#010 follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;var isomorphicDir=&quot;../isomorphic/&quot;;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Core.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Foundation.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Containers.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Grids.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Forms.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/system/modules/ISC_DataBinding.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=../isomorphic/skins/SmartClient/load_skin.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&amp;#010 ...&lt;/pre&gt;&amp;#010 SmartClient components can then be created via normal JavaScript:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;&amp;#010 isc.Button.create({&amp;#010     title:&quot;Button&quot;,&amp;#010     click:&quot;isc.say('Hello World')&quot;&amp;#010 });&amp;#010 &amp;lt;/SCRIPT&amp;gt;&lt;/pre&gt;&amp;#010 This approach is discussed in more detail in the &amp;#010 &lt;a href='/docs/SmartClient_Quick_Start_Guide.pdf' onclick=&quot;window.open('/docs/SmartClient_Quick_Start_Guide.pdf');return false;&quot;&gt;QuickStart Guide&lt;/a&gt;, Chapter 4, &lt;i&gt;Coding&lt;/i&gt;.&amp;#010 Note that JavaScript-based component instantiation is currently the recommended approach, and&amp;#010 most examples are provided in the JavaScript format.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Data Loading / Data Binding&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The primary focus of SmartClient integration is connecting DataSource operations to your&amp;#010 server.  The ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side Data Integration')} chapter covers&amp;#010 the key approaches, including cookbook approaches for REST-based integration with any server&amp;#010 that can return XML or JSON over HTTP.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Simple RPCs (non-DataSource requests)&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 You can implement simple RPCs as web service operations: use&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} to load the service definition, and then use&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.callOperation')} to call the operations.  Note that some server frameworks&amp;#010 allow the generation of WSDL from server method signatures.&amp;#010 &lt;P&gt;&amp;#010 Alternatively, if your backend is capable of outputting &amp;#010 &lt;a href='http://www.json.org/' onclick=&quot;window.open('http://www.json.org/');return false;&quot;&gt;JSON&lt;/a&gt; (JavaScript Object Notation), you can use &amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} to directly turn JSON results into live JavaScript objects.&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} lets you load arbitrary server results, including&amp;#010 JSON results that need to be processed before they can be eval()'d.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;HTTPProxy: Cross-site or cross-port data loading&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 If you develop a prototype using the SmartClient SDK and SmartClient Java Server, and then&amp;#010 you migrate the prototype to another server technology, you need to be aware that the&amp;#010 SmartClient Java Server includes an HTTPProxy servlet that allows SmartClient interfaces to&amp;#010 contact servers other than the origin server (bypassing what is called the&amp;#010 &lt;a href='http://www.google.com/search?q=same+origin+policy' onclick=&quot;window.open('http://www.google.com/search?q=same+origin+policy');return false;&quot;&gt;&quot;same origin policy&quot;&lt;/a&gt;).&amp;#010 &lt;P&gt;&amp;#010 SmartClient uses the HttpProxy automatically when needed, so it may not be obvious that the&amp;#010 HTTPProxy is in use.  Then, your migrated application will encounter errors attempting to&amp;#010 contact the HTTPProxy servlet.&amp;#010 &lt;P&gt;&amp;#010 To avoid these errors, ensure that all services that your application uses are accessed&amp;#010 using the same hostname and port as the page was loaded from.  In particular, watch for WSDL&amp;#010 files, which contain the service URL - you may need to use ${isc.DocUtils.linkForRef('method:WebService.setLocation')}&amp;#010 to ensure that the web service URL and page URL match.&amp;#010 &lt;P&gt;&amp;#010 If your production application really does need to access services or content hosted on&amp;#010 other servers, typical practice is to persue normal SmartClient integration with your&amp;#010 server, then write server-side code that contacts other hosts on behalf of your SmartClient&amp;#010 interface." name="nonJavaBackend" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:ListGridField.valueField" flags="IRWA" description="Specifies the ${isc.DocUtils.linkForRef('attr:ListGridField.optionDataSource')} field used to retrieve the stored&amp;#010 values that are to be mapped to the display values (specified by&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.displayField')}). Note that if this field is editable this will also&amp;#010 be applied to this field's editors." name="valueField" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>display_values</groups>
</docItem>
<docItem ref="group:adminConsole" title="Admin Console" description="The Admin Console allows you to configure database access for DataSources that use&amp;#010 SmartClient's built-in ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')}.&amp;#010 &lt;P&gt;&amp;#010 NOTE: You must have the Isomorphic SmartClient package installed and your servlet engine&amp;#010 started. &amp;#010 &lt;p&gt;&amp;#010 Direct your browser to the following URL to access the Admin Console: &amp;#010 &lt;p&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&lt;a href='http://localhost:8080/tools/adminConsole.jsp' onclick=&quot;window.open('http://localhost:8080/tools/adminConsole.jsp');return false;&quot;&gt;http://localhost:8080/tools/adminConsole.jsp&lt;/a&gt;&amp;#010 &lt;p&gt;&amp;#010 The common default servlet engine port 8080 is used in the URL given above. Adjust your URL&amp;#010 as necessary if you are using a different port and replace localhost with the machine name&amp;#010 running the servlet engine if you are accessing it from a remote machine.&amp;#010 &lt;p&gt;&amp;#010 Note that the Admin Console interface is also available in the Developer Console as the&amp;#010 &quot;DataBases&quot; tab.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Test Data&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 You can create a test file that contains a sample dataset which can be imported into your&amp;#010 database table with the Admin Console.&amp;#010 &lt;p&gt;&amp;#010 The test file to use with your DataSource is specified in the &lt;code&gt;testFileName&lt;/code&gt;&amp;#010 DataSource configuration property. The test file uses the extension .data.xml.&amp;#010 &lt;p&gt;&amp;#010 The test data file should consist of a top-level &amp;lt;List&amp;gt; element containing a series of XML&amp;#010 elements named after your DataSource's ID, each of which creates one DataSource&amp;#010 record. Values for each field are given within tags named after the field name. &amp;#010 &lt;p&gt;&amp;#010 For example, the following XML is from the supplyItem.data.xml test data file supplied with&amp;#010 the Isomorphic SmartClient package. This file is located in&amp;#010 [webroot]/examples/shared/ds/test_data/.&amp;#010 &lt;p&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;List&amp;gt;&amp;#010  &amp;lt;supplyItem&amp;gt;&amp;#010      &amp;lt;description&amp;gt;A revolutionary cushion-grip ballpoint pen that reduces &amp;#010          required gripping power, relieving stress and alleviating writing &amp;#010          fatigue. Excellent for people who suffer from arthritis or carpal &amp;#010          tunnel syndrome. Medium point, black ink. Refillable.&amp;lt;/description&amp;gt;&amp;#010      &amp;lt;category&amp;gt;1&amp;lt;/category&amp;gt;&amp;#010      &amp;lt;itemRef&amp;gt;ODC 204-502-153&amp;lt;/itemRef&amp;gt;&amp;#010      &amp;lt;maxQuantity&amp;gt;5&amp;lt;/maxQuantity&amp;gt;&amp;#010      &amp;lt;requiresJustification&amp;gt;0&amp;lt;/requiresJustification&amp;gt;&amp;#010      &amp;lt;itemName&amp;gt;Dr. Grip Pens -- Blue Barrel&amp;lt;/itemName&amp;gt;&amp;#010      &amp;lt;itemID&amp;gt;1&amp;lt;/itemID&amp;gt;&amp;#010      &amp;lt;unitCost&amp;gt;4.99&amp;lt;/unitCost&amp;gt;&amp;#010  &amp;lt;/supplyItem&amp;gt;&amp;#010  &amp;lt;supplyItem&amp;gt;&amp;#010      &amp;lt;description&amp;gt;A revolutionary cushion-grip ballpoint pen that reduces &amp;#010          required gripping power, relieving stress and alleviating writing &amp;#010          fatigue. Excellent for people who suffer from arthritis or carpal &amp;#010          tunnel syndrome. Medium point, black ink. Refillable.&amp;lt;/description&amp;gt;&amp;#010      &amp;lt;category&amp;gt;1&amp;lt;/category&amp;gt;&amp;#010      &amp;lt;itemRef&amp;gt;ODC 204-708-834&amp;lt;/itemRef&amp;gt;&amp;#010      &amp;lt;maxQuantity&amp;gt;5&amp;lt;/maxQuantity&amp;gt;&amp;#010      &amp;lt;requiresJustification&amp;gt;0&amp;lt;/requiresJustification&amp;gt;&amp;#010      &amp;lt;itemName&amp;gt;Dr. Grip Pens -- Black Barrel&amp;lt;/itemName&amp;gt;&amp;#010      &amp;lt;itemID&amp;gt;2&amp;lt;/itemID&amp;gt;&amp;#010      &amp;lt;unitCost&amp;gt;4.99&amp;lt;/unitCost&amp;gt;&amp;#010  &amp;lt;/supplyItem&amp;gt;&amp;#010  &amp;lt;supplyItem&amp;gt;&amp;#010      &amp;lt;description&amp;gt;Personalized business cards for all your networking &amp;#010          needs.&amp;lt;/description&amp;gt;&amp;#010      &amp;lt;category&amp;gt;2&amp;lt;/category&amp;gt;&amp;#010      &amp;lt;itemRef&amp;gt;&amp;lt;/itemRef&amp;gt;&amp;#010      &amp;lt;maxQuantity&amp;gt;500&amp;lt;/maxQuantity&amp;gt;&amp;#010      &amp;lt;requiresJustification&amp;gt;1&amp;lt;/requiresJustification&amp;gt;&amp;#010      &amp;lt;itemName&amp;gt;Personalized business cards -- 500 count&amp;lt;/itemName&amp;gt;&amp;#010      &amp;lt;itemID&amp;gt;3&amp;lt;/itemID&amp;gt;&amp;#010      &amp;lt;unitCost&amp;gt;25.00&amp;lt;/unitCost&amp;gt;&amp;#010  &amp;lt;/supplyItem&amp;gt;&amp;#010  ...&amp;#010 &amp;lt;List/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &amp;#010 Data for a tree-like DataSource can be specified with the same format.&amp;#010 The following code example is from the supplyCategory.data.xml test data file. This file&amp;#010 is also located in [webroot]/examples/shares/ds/test_data/. &amp;#010&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;List&amp;gt;&amp;#010     &amp;lt;supplyCategory&amp;gt;&amp;#010     	&amp;lt;itemName&amp;gt;Office Paper Products&amp;lt;/itemName&amp;gt;&amp;#010     	&amp;lt;parentID&amp;gt;root&amp;lt;/parentID&amp;gt;&amp;#010     &amp;lt;/supplyCategory&amp;gt;&amp;#010     &amp;lt;supplyCategory&amp;gt;&amp;#010     	&amp;lt;itemName&amp;gt;Calculator Rolls&amp;lt;/itemName&amp;gt;&amp;#010     	&amp;lt;parentID&amp;gt;Office Paper Products&amp;lt;/parentID&amp;gt;&amp;#010     &amp;lt;/supplyCategory&amp;gt;&amp;#010     &amp;lt;supplyCategory&amp;gt;&amp;#010     	&amp;lt;itemName&amp;gt;Adding Machine/calculator Roll&amp;lt;/itemName&amp;gt;&amp;#010     	&amp;lt;parentID&amp;gt;Calculator Rolls&amp;lt;/parentID&amp;gt;&amp;#010     &amp;lt;/supplyCategory&amp;gt;&amp;#010     . . .&amp;#010 &amp;lt;/List&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &amp;#010 Notice that all records must define values for the itemName primary key field and for the&amp;#010 parentID field that establishes the tree relationship." name="adminConsole" type="group">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:CubeGrid.facetValueHover" flags="" description="    StringMethod handler fired when mouse hovers over a facetValue button in a header.&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueHover" type="method" definingClass="class:CubeGrid">
<params description="facetValuesObject for the appropriate header button" optional="false" name="facetValues" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="classMethod:isc.logEchoAll" flags="" description=" Logs the echoed object (using ${isc.DocUtils.linkForRef('classMethod:isc.echoAll')}) as a warning, prefixed with an&amp;#010 optional message.&amp;#010&amp;#010" name="logEchoAll" type="classMethod" definingClass="class:isc">
<seeAlso ref="method:Log.logWarn" description="for logging info"></seeAlso>
<params description="object to echo" optional="false" name="value" type="any">
</params>
<params description="message to log" optional="false" name="message" type="String">
</params>
</docItem>
<docItem ref="attr:DynamicForm.errorOrientation" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, where should the error icon and text appear&amp;#010 relative to form items?  Valid options are &lt;code&gt;&quot;top&quot;&lt;/code&gt;, &amp;#010 &lt;code&gt;&quot;bottom&quot;&lt;/code&gt;, &lt;code&gt;&quot;left&quot;&lt;/code&gt; or &lt;code&gt;&quot;right&quot;&lt;/code&gt;.&lt;br&gt;&amp;#010 May be overridden at the item level via ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}." name="errorOrientation" valueType="align" defaultValue="null" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DataSource.operationBindings" flags="IR" description="Optional array of OperationBindings, which provide instructions to the DataSource about how each&amp;#010 DSOperation is to be performed.&amp;#010 &lt;P&gt;&amp;#010 For DataSources bound to WSDL-described web services using&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')}, OperationBindings are used to bind each DataSource&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.operationType','operationType')} to an&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','operation')} of a WSDL-described &amp;#010 ${isc.DocUtils.linkForRef('class:WebService','web service')}, so that a DataSource can both fetch and save data to a web&amp;#010 service.&amp;#010 &lt;P&gt;&amp;#010 For example, this code accomplishes part of the binding to the &amp;#010 &lt;a href='http://www.google.com/search?q=sforce+partner+wsdl' onclick=&quot;window.open('http://www.google.com/search?q=sforce+partner+wsdl');return false;&quot;&gt;SalesForce partner web services&lt;/a&gt;&amp;#010 &lt;pre&gt;&amp;#010 isc.DataSource.create({&amp;#010    serviceNamespace : &quot;urn:partner.soap.sforce.com&quot;,&amp;#010    operationBindings : [&amp;#010        { operationType:&quot;fetch&quot;, wsOperation:&quot;query&quot;, recordName: &quot;sObject&quot; },&amp;#010        { operationType:&quot;update&quot;, wsOperation:&quot;update&quot;, recordName: &quot;SaveResult&quot; },&amp;#010        { operationType:&quot;add&quot;, wsOperation:&quot;create&quot;, recordName: &quot;SaveResult&quot; },&amp;#010        { operationType:&quot;remove&quot;, wsOperation:&quot;delete&quot;, recordName: &quot;DeleteResult&quot; }&amp;#010    ],&amp;#010    ...&amp;#010 }); &amp;#010 &lt;/pre&gt;&amp;#010 NOTE: additional code is required to handle authentication and other details, see the&amp;#010 complete code in isomorphicSDK/examples/databinding/SalesForce.&amp;#010 &lt;P&gt;&amp;#010 For DataSources that contact non-WSDL-described XML or JSON services, OperationBindings can&amp;#010 be used to separately configure the URL, HTTP method, input and output processing for each&amp;#010 operationType.  This makes it possible to fetch JSON data from one URL for the &quot;fetch&quot;&amp;#010 operationType and save to a web service for the &quot;update&quot; operationType, while appearing as a&amp;#010 single integrated DataSource to a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} such as an&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','editable ListGrid')}.&amp;#010 &lt;P&gt;&amp;#010 If no operationBinding is defined for a given DataSource operation, all of the properties&amp;#010 which are valid on the operationBinding are checked for on the DataSource itself.  &amp;#010 &lt;P&gt;&amp;#010 This also means that a read-only DataSource, that is, a DataSource only capable of fetch&amp;#010 operations, operationBindings need not be specified, and instead all operationBinding&amp;#010 properties can be set on the DataSource itself.  An example of using OperationBinding&amp;#010 properties directly on the DataSource in order to read an RSS feed can be found here:&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForStandaloneExample('/examples/databinding/rss_databinding.html', '/examples/databinding/rss_databinding.html')}" name="operationBindings" valueType="Array of OperationBinding" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="class:OperationBinding">
</seeAlso>
</docItem>
<docItem ref="attr:Canvas.hoverMoveWithMouse" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, should this widget's hover canvas be moved with&amp;#010 the mouse while visible?" name="hoverMoveWithMouse" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:ListGridField.editorExit" flags="A" description=" Callback fired when the user attempts to navigate away from the current edit cell, &amp;#010 or complete the current edit.&lt;br&gt;&amp;#010 Return false from this method to cancel the default behavior (Saving / cancelling the&amp;#010 current edit / moving to the next edit cell)&amp;#010&amp;#010" name="editorExit" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.editorExit">
</seeAlso>
<params description="What interaction triggered this                                                          edit cell exit" optional="false" name="editCompletionEvent" type="EditCompletionEvent">
</params>
<params description="record for the cell being edited" optional="false" name="record" type="object">
</params>
<params description="new value for the cell being edited" optional="false" name="newValue" type="any">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<params description="ListGrid to which this field belongs" optional="false" name="grid" type="ListGrid">
</params>
<returns description="Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus&amp;#010                      in this edit cell." type="boolean"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:TextItem.getHint" flags="A" description="	Returns the hint text for this item. Default implementation returns ${isc.DocUtils.linkForRef('attr:FormItem.hint')}, or&amp;#010  null if there is no hint to show.&amp;#010&amp;#010" name="getHint" type="method" definingClass="class:TextItem">
<returns description="HTML to show as the hint for the item" type="HTML"></returns>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Applet.archive" flags="IR" description="URL to the applet JAR or ZIP archive." name="archive" valueType="URL" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.code">
</seeAlso>
<seeAlso ref="attr:Applet.codeBase">
</seeAlso>
</docItem>
<docItem ref="attr:ResultSet.criteria" flags="IRW" description="Filter criteria used whenever records are retrieved.&amp;#010 &lt;P&gt;&amp;#010 Changing the filter criteria via &lt;code&gt;setCriteria&lt;/code&gt; will cause the current cached&amp;#010 records to be dropped." name="criteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="class:ResultSet">
    <getter>getCriteria</getter>
    <setter>setCriteria</setter>
<seeAlso ref="method:ResultSet.setCriteria">
</seeAlso>
</docItem>
<docItem ref="method:DynamicForm.getValues" flags="" description=" An Object containing the values of the form as properties, where each propertyName is&amp;#010 the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and each property value is the value&amp;#010 held by that form item.&amp;#010&amp;#010" name="getValues" type="method" definingClass="class:DynamicForm">
<returns description="values in the form" type="Object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ToolStrip.separatorSize" flags="IR" description="Separator thickness in pixels" name="separatorSize" valueType="integer" defaultValue="8" type="attr" definingClass="class:ToolStrip">
</docItem>
<docItem ref="method:Window.setAutoSize" flags="" description=" Setter for ${isc.DocUtils.linkForRef('attr:Window.autoSize')}&amp;#010" name="setAutoSize" type="method" definingClass="class:Window">
<params description="true if the window should auto-size to its content" optional="false" name="autoSize" type="boolean">
</params>
</docItem>
<docItem ref="object:Tab" description="Tabs are specified as objects, not class instances.  For example, when&amp;#010 developing in JavaScript, a typical initialization block for a TabSet would look like&amp;#010 this:&amp;#010 &lt;pre&gt;&amp;#010 TabSet.create({&amp;#010     tabs: [&amp;#010         {title: &quot;tab1&quot;, pane: &quot;pane1&quot;},&amp;#010         {title: &quot;tab2&quot;}&amp;#010     ]&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 And in XML:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;TabSet&amp;gt;&amp;#010    &amp;lt;tabs&amp;gt;&amp;#010        &amp;lt;Tab title=&quot;tab1&quot; pane=&quot;pane1&quot;/&amp;gt;&amp;#010        &amp;lt;Tab title=&quot;tab2&quot;/&amp;gt;&amp;#010    &amp;lt;/tabs&amp;gt;&amp;#010 &amp;lt;/TabSet&amp;gt;&amp;#010 &lt;/pre&gt;" name="Tab" type="object">
    <treeLocation>Client Reference/Layout/TabSet</treeLocation>
    <attrs>attr:Tab.title</attrs>
    <attrs>attr:Tab.pickerTitle</attrs>
    <attrs>attr:Tab.pane</attrs>
    <attrs>attr:Tab.ID</attrs>
    <attrs>attr:Tab.width</attrs>
    <attrs>attr:Tab.disabled</attrs>
    <attrs>attr:Tab.icon</attrs>
    <attrs>attr:Tab.canClose</attrs>
    <attrs>attr:Tab.closeIcon</attrs>
</docItem>
<docItem ref="attr:Canvas.edgeBackgroundColor" flags="IR" description="Background color for the EdgedCanvas created to decorate this component.  This can be used&amp;#010 to provide an underlying &quot;tint&quot; color for translucent edge media" name="edgeBackgroundColor" valueType="Color" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:Toolbar.itemClick" flags="A" description="	Called when one of the buttons recieved a click event&amp;#010" name="itemClick" type="method" definingClass="class:Toolbar">
<params description="pointer to the button in question" optional="false" name="item" type="button">
</params>
<params description="number of the button in question" optional="false" name="itemNum" type="number">
</params>
    <groups>event handling</groups>
</docItem>
<docItem ref="classMethod:EventHandler.altKeyDown" flags="" description="			Return true if the alt (option) key is being held down.&amp;#010			Note that this is only set reliably for keyboard events.&amp;#010&amp;#010" name="altKeyDown" type="classMethod" definingClass="class:EventHandler">
<returns description="true == alt key is down" type="boolean"></returns>
    <groups>keyboardEvents</groups>
</docItem>
<docItem ref="method:GridRenderer.getDrawnRows" flags="" description=" Get the rows that are currently drawn (exist in the DOM), as an array of [firstRowNum,&amp;#010 lastRowNum].  &amp;#010 &lt;P&gt;&amp;#010 The drawn rows differ from the ${isc.DocUtils.linkForRef('method:GridRenderer.getVisibleRows','visibleRows')} because of&amp;#010 ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio','drawAhead')}.  The drawn rows are the apppropriate range to consider if&amp;#010 you need to, eg, using ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCell')} to update all the cells in a column.&amp;#010 &lt;P&gt;&amp;#010 If the grid is undrawn or the ${isc.DocUtils.linkForRef('attr:GridRenderer.emptyMessage')} is currently shown, returns&amp;#010 [null,null];&amp;#010&amp;#010" name="getDrawnRows" type="method" definingClass="class:GridRenderer">
</docItem>
<docItem ref="group:valueMap" description="Mapping from stored values to user-visible values" name="valueMap" type="group">
    <refs>method:FormItem.getDisplayValue</refs>
    <refs>method:FormItem.setValueMap</refs>
    <refs>method:CheckboxItem.setValueMap</refs>
    <refs>attr:FormItem.valueMap</refs>
    <refs>attr:CheckboxItem.valueMap</refs>
</docItem>
<docItem ref="attr:TextAreaItem.textBoxStyle" flags="IRW" description="Base CSS class to apply to this item's input element.&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;textItem&quot;" type="attr" definingClass="class:TextAreaItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Facet.id" flags="IR" description="id of this facet.  Any string or number." name="id" valueType="String | Number" defaultValue="null" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="class:DMI" description="Direct Method Invocation (DMI) allows background HTTP requests to directly&amp;#010 invoke methods on server-side objects via XML configuration.&amp;#010 &lt;P&gt;&amp;#010 DMI is an alternative to the ${isc.DocUtils.linkForRef('classAttr:RPCManager.actionURL')} approach where your server code&amp;#010 receives a generalized ${isc.DocUtils.linkForRef('class:RPCRequest','request object')} which you route to appropriate&amp;#010 methods yourself.  Which interface (DMI or RPCManager) you choose is largely a matter of&amp;#010 preference - they provide equivalent functionality.  Note that there are also several&amp;#010 approaches for ${isc.DocUtils.linkForRef('group:nonJavaBackend','non-Java backends')} and/or Java backends not&amp;#010 running the ISC server.&amp;#010 &lt;p&gt;&amp;#010 When using DMI, inbound request data is translated to Java objects and passed as method&amp;#010 parameters to the designated method, with available request data matched to each declared&amp;#010 parameter by Java type.  The return value of your method is automatically wrapped as a valid&amp;#010 response and delivered to the browser.&amp;#010 &lt;P&gt;&amp;#010 &lt;u&gt;&lt;b&gt;DataSource DMI&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;br&gt;&amp;#010 To enable DMI for a given DataSource, simply include a &lt;code&gt;&amp;lt;serverObject&amp;gt;&lt;/code&gt;&amp;#010 configuration block in that DataSource's configuration either at&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.serverObject')} or on a particular operationBinding via&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.serverObject')}.  The ServerObject specifies the target of the method&amp;#010 invocation and ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} specifies the method that will be&amp;#010 called.&amp;#010 &lt;P&gt;&amp;#010 For example, the following Datasource DMI declaration would route &quot;fetch&quot; operations for&amp;#010 this DataSource to the method &quot;fetch&quot; on an object stored in the servlet session under the&amp;#010 name &quot;beanFetcher&quot;:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;DataSource&amp;gt;&amp;#010   &amp;lt;operationBindings&amp;gt;&amp;#010       &amp;lt;binding operationType=&quot;fetch&quot; serverMethod=&quot;fetch&quot;&amp;gt;&amp;#010           &amp;lt;serverObject  &amp;#010                lookupStyle=&quot;attribute&quot; &amp;#010                attributeScope=&quot;session&quot; &amp;#010                attributeName=&quot;beanFetcher&quot;/&amp;gt;&amp;#010       &amp;lt;/binding&amp;gt;&amp;#010   &amp;lt;/operationBindings&amp;gt;&amp;#010   ...&amp;#010 &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Method overloading is not supported - there must be exactly one method on the target class&amp;#010 with the name specified in ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')}.  The method must be public,&amp;#010 but can be either an instance or static method.  If no operationBinding is specified or the&amp;#010 operationBinding does not specify a &lt;code&gt;serverMethod&lt;/code&gt; then it defaults to the name of&amp;#010 the operation (eg &quot;fetch&quot;).&amp;#010 &lt;p&gt;&amp;#010 By default, the DSResponse data sent back by DataSource DMIs is filtered to just the set of&amp;#010 fields specified on the DataSource.  This allows you to simply return beans that potentially&amp;#010 have getter methods for fields other than are defined in the DataSource without that&amp;#010 (potentially private) data being sent to the client.  If you want to disable this&amp;#010 functionality, you can do so by on a per-operation basis by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')}, on a per-DataSource level by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')}, or globally by setting the config parameter&amp;#010 &lt;code&gt;DMI.dropExtraFields&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in&amp;#010 &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt;.  Non-DMI DSResponse data is, by&amp;#010 default, not filtered in this matter for backwards compatibility reasons.  If you want to&amp;#010 enable this type of filtering for non-DMI DSResponse data, you can do so by setting the&amp;#010 config parameter &lt;code&gt;DSResponse.dropExtraFields&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in&amp;#010 &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt;.  &lt;code&gt;DMI.dropExtraFields&lt;/code&gt;&amp;#010 and &lt;code&gt;DSResponse.dropExtraFields&lt;/code&gt; can be enabled/disabled independently of each&amp;#010 other - that is, setting one does not side-effect the other.  &lt;code&gt;server.properties&lt;/code&gt;&amp;#010 settings can be overridden by an explicit setting in ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')} which&amp;#010 in turn can be overridden by an explicit setting in ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')} (this&amp;#010 last one for DMI only since non-DMI operations don't have a serverObject context).&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;RPC DMI&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;br&gt;&amp;#010 RPC DMI makes a set of methods from a server-side class available as client-side methods for&amp;#010 direct invocation.  RPC DMI also uses a ${isc.DocUtils.linkForRef('class:ServerObject')} configuration block to specify&amp;#010 the server-side DMI end-point, but in the case of RPCs, the ${isc.DocUtils.linkForRef('class:ServerObject')} definition&amp;#010 goes into an &lt;code&gt;rpcBindings&lt;/code&gt; section of an &lt;code&gt;Application&lt;/code&gt; definition in a&amp;#010 .app.xml file.  For an example, see the &lt;code&gt;example.app.xml&lt;/code&gt; file in the /shared/app&amp;#010 directory of the SmartClient SDK.  The only difference between the RPC DMI&amp;#010 ServerObject definition and the DataSource DMI version is the addition of the&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.visibleMethods')} block that specifies which methods are callable on this&amp;#010 ServerObject.  This section is not consulted for DataSource DMIs because the&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} is used to specify the callable method in that case.&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Method Invocation&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;br&gt;&amp;#010 SmartClient can pass a set of stock context variables to your DMI method and also performs&amp;#010 some type adaptation logic to make this interface more flexible.  For DataSource DMI, you&amp;#010 can declare your method to take any number of the following types of arguments and they will&amp;#010 be passed to you:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;HttpServletRequest&amp;#010 &lt;li&gt;HttpServletResponse&amp;#010 &lt;li&gt;ServletContext&amp;#010 &lt;li&gt;HttpSession&amp;#010 &lt;li&gt;RPCManager&amp;#010 &lt;li&gt;DSRequest&amp;#010 &lt;li&gt;RequestContext (from com.isomorphic.servlet)&amp;#010 &lt;li&gt;DataSource (same as DSRequest.getDataSource())&amp;#010 &lt;li&gt;Map (same as DSRequest.getValues())&amp;#010 &lt;li&gt;Bean (auto-populated from DSRequest.getValues())&amp;#010 &lt;/ul&gt;&amp;#010 DataSource DMI methods can return any of the following types of values:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;DSResponse (used as the DSResponse verbatim)&amp;#010 &lt;li&gt;List (valid response to a fetch operation - gets auto-popuplated into a DSResponse for&amp;#010 you via setData())&amp;#010 &lt;li&gt;Map or Bean (valid response to add, update, remove operations - gets auto-populated&amp;#010 into a DSResponse for you via setData()).&amp;#010 &lt;/ul&gt;&amp;#010 Note that to take advantage of some SmartClient features like paging and custom validation,&amp;#010 you need to return a DSResponse and provide the required metadata (like&amp;#010 startRow/endRow/totalRows for paging).  You can simply return a &lt;code&gt;List&lt;/code&gt; instead,&amp;#010 but this won't work for large datasets.&amp;#010 &lt;p&gt;&amp;#010 So, for example, all of the following DataSource DMI method signatures are valid:&amp;#010 &lt;pre&gt;&amp;#010 public List myFetch(Map criteria)&amp;#010 public List myFetch(SupplyItem criteria)&amp;#010 public DSResponse myAdd(HttpSession session, &amp;#010                         DataSource ds, &amp;#010                         DSRequest dsRequest)&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 See&amp;#010 &lt;a href='/examples/server_integration/#customDataSourceIntegrationDMI' onclick=&quot;window.open('/examples/server_integration/#customDataSourceIntegrationDMI');return false;&quot;&gt;the supplyItemDMI example&lt;/a&gt;&amp;#010 for an example of DataSource DMI.&amp;#010 &lt;p&gt;&amp;#010 &lt;p&gt;&amp;#010 RPC DMIs work slighly differently.  Unlike DataSource DMIs, RPC DMIs can have an arbitrary&amp;#010 number of required arguments, and also some optional context arguments.  For example, let's&amp;#010 say you call a method from the client like so (note that there's a cleaner way to invoke&amp;#010 DMIs if you use the ${isc.DocUtils.linkForRef('group:loadDMIStubsTag')} JSP tag):&amp;#010 &lt;pre&gt;&amp;#010 DMI.call(&quot;myApp&quot;, &quot;com.foo.MyClass&quot;, &quot;doSomething&quot;,&amp;#010          1, &quot;zoo&quot;, [1, 2, 3], &quot;clientCallback()&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 The server-side implementation of method &lt;code&gt;doSomething&lt;/code&gt; must take a least three&amp;#010 arguments of the type used above - specifically a Number, String, and List.  SmartClient&amp;#010 will try to adapt arguments where possible - so for example the first argument can be a Long&amp;#010 or an Integer instead and the invocation will still work.  Also, an object literal passed&amp;#010 from the client becomes a Map on the server and will be automatically applied to a bean if&amp;#010 the method argument takes a Bean in that position.  See ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} for a table&amp;#010 of type conversions.  You can use native types in the server-side signature for things like&amp;#010 Integer, Long, etc - so e.g. you can specify your method taking an int or long. In addition&amp;#010 to the required arguments, you can pass the following optional arguments:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;HttpServletRequest&amp;#010 &lt;li&gt;HttpServletResponse&amp;#010 &lt;li&gt;HttpSession&amp;#010 &lt;li&gt;RPCManager&amp;#010 &lt;li&gt;RPCRequest&amp;#010 &lt;/ul&gt;&amp;#010 See&amp;#010 &lt;a href='/examples/server_integration/#genericRPCIntegrationDMI' onclick=&quot;window.open('/examples/server_integration/#genericRPCIntegrationDMI');return false;&quot;&gt;the getTimeStampDMI example&lt;/a&gt;&amp;#010 for an example of RPC DMI." name="DMI" type="class">
    <classMethods>classMethod:DMI.call</classMethods>
    <treeLocation>Client Reference/RPC</treeLocation>
<seeAlso ref="group:loadDMIStubsTag">
</seeAlso>
<seeAlso ref="class:ServerObject">
</seeAlso>
<seeAlso ref="attr:DataSource.serverObject">
</seeAlso>
<seeAlso ref="attr:OperationBinding.serverObject">
</seeAlso>
<seeAlso ref="group:clientServerIntegration">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ComboBoxItem.textMatchStyle" flags="IR" description="When applying filter criteria to pickList data, what type of matching to use.  Legal&amp;#010 values are &quot;substring&quot; (value contains user input) or &quot;startsWith&quot; (value starts with&amp;#010 user input.  Both matches are case insensitive.&amp;#010 &lt;P&gt;&amp;#010 For a databound pickList (${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource')} set), &lt;code&gt;textMatchStyle&lt;/code&gt; is&amp;#010 sent to the server as ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')}.&amp;#010 &lt;P&gt;&amp;#010 For a non-databound pickList, &lt;code&gt;textMatchStyle&lt;/code&gt; is applied by &amp;#010 ${isc.DocUtils.linkForRef('method:ComboBoxItem.filterClientPickListData')}." name="textMatchStyle" valueType="String" defaultValue="&quot;startsWith&quot;" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:Canvas.setPageTop" flags="" description=" Set the page-relative top coordinate of this widget.&amp;#010 &amp;#010" name="setPageTop" type="method" definingClass="class:Canvas">
<params description="new top coordinate in pixels" optional="false" name="top" type="number">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:Dialog.okClick" flags="" description=" Handle a click on the 'ok' button of this Dialog.&amp;#010 Default implementation is to call &lt;code&gt;saveData()&lt;/code&gt;, hide the Dialog, then return&amp;#010 &lt;code&gt;true&lt;/code&gt;.  &amp;#010 Override to do something else.&amp;#010" name="okClick" type="method" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="method:ListGrid.rowOver" flags="" description=" Called when the mouse pointer enters a row&amp;#010&amp;#010" name="rowOver" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:DSRequest.sortBy" flags="IR" description="Fieldname to sortBy, prefixed with optional &quot;-&quot; indicating descending sort.  For example, to&amp;#010 sort by the field &quot;userName&quot; in ascending order, set &lt;code&gt;sortBy&lt;/code&gt; to just&amp;#010 &quot;userName&quot;.  For descending sort on &quot;userName&quot;, set &lt;code&gt;sortBy&lt;/code&gt; to &quot;-userName&quot;." name="sortBy" valueType="String" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="method:CubeGrid.getFacetValue" flags="" description=" Get facet value definition by facetId and facetValueId.  Constant time.&amp;#010&amp;#010" name="getFacetValue" type="method" definingClass="class:CubeGrid">
<seeAlso ref="class:FacetValue">
</seeAlso>
<params description="the id of the facet to retrieve" optional="false" name="facetId" type="String">
</params>
<params description="the id of the facet value to retrieve" optional="false" name="facetValueId" type="String">
</params>
<returns description="the FacetValue if found, or null" type="FacetValue"></returns>
</docItem>
<docItem ref="method:ListGrid.unfreezeField" flags="" description=" Unfreeze a frozen field, so that it will now scroll along with other fields when horizontal&amp;#010 scrolling occurs.&amp;#010&amp;#010" name="unfreezeField" type="method" definingClass="class:ListGrid">
<params optional="false" name="field" type="ListGridField or colNum or ListGridField.name">
</params>
    <groups>frozenFields</groups>
</docItem>
<docItem ref="attr:Slider.labelHeight" flags="IRW" description="The height of the labels used to display the minimum, maximum and current values of the&amp;#010 slider." name="labelHeight" valueType="integer" defaultValue="20" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="group:modal" name="modal" type="group">
    <refs>method:Window.flash</refs>
    <refs>attr:Window.isModal</refs>
    <refs>attr:Window.modalMask</refs>
    <refs>attr:Window.showModalMask</refs>
    <refs>attr:Window.modalMaskOpacity</refs>
    <refs>attr:Window.modalMaskStyle</refs>
    <refs>attr:Window.dismissOnOutsideClick</refs>
</docItem>
<docItem ref="attr:RPCResponse.status" flags="R" description="Status code for this response.  Status codes less than zero are considered errors by the&amp;#010 RPCManager, those greater than or equal to zero are considered successes.  Please see the&amp;#010 error handling section the ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager docs')} for more information on&amp;#010 what the RPCManager does with the status code and how you can override this behavior.&amp;#010 &lt;P&gt;&amp;#010 When using the SmartClient server you can set the rpcResponse.status by calling the&amp;#010 server-side method RPCResponse.setStatus().  &amp;#010 &lt;P&gt;&amp;#010 When not using the SmartClient server, the RPCManager makes no assumptions about the&amp;#010 structure of the response, so the status code just reflects the&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}: status will be &amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_TRANSPORT_ERROR','STATUS_TRANSPORT_ERROR')} if an HTTP-level error&amp;#010 occurred such as &quot;500 server error&quot;.  If you have a status code you need to transmit you can&amp;#010 simply embed it in the response (as part of ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}) and interpret it from&amp;#010 the callback.&amp;#010 &lt;P&gt;&amp;#010 With or without the SmartClient server, the ${isc.DocUtils.linkForRef('group:relogin')} status codes (such as &amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_LOGIN_REQUIRED')}) are triggered whenever special markers, such as the&amp;#010 loginRequiredMarker, appear in the body of the response.  See the ${isc.DocUtils.linkForRef('group:relogin','Relogin&amp;#010 Overview')} for details." name="status" valueType="integer" defaultValue="false" type="attr" definingClass="class:RPCResponse">
</docItem>
<docItem ref="attr:Canvas.minHeight" flags="IRWA" description="Minimum height that this Canvas can be resized to.&amp;#010 &lt;P&gt;&amp;#010 Note that a Canvas with overflow:&quot;visible&quot; has an implicit minimize size based on it's&amp;#010 contents." name="minHeight" valueType="number" defaultValue="10" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="group:xmlSerialize" name="xmlSerialize" type="group">
    <refs>attr:DataSourceField.xmlAttribute</refs>
    <refs>attr:DataSourceField.multiple</refs>
</docItem>
<docItem ref="classMethod:Class.map" flags="" description="&amp;#010 Call &lt;code&gt;method&lt;/code&gt; on each item in &lt;code&gt;argsList&lt;/code&gt; and return the Array of results.&amp;#010&amp;#010" name="map" type="classMethod" definingClass="class:Class">
<params description="Name of the method on this instance which should be called on each element of the Array" optional="false" name="methodName" type="string">
</params>
<params description="Array of items to call the method on" optional="false" name="items" type="Array">
</params>
<returns description="Array of results, one per element in the passed &quot;items&quot; Array" type="Array"></returns>
</docItem>
<docItem ref="attr:Canvas.border" flags="IRW" description="Set the CSS border of this component, as a CSS string including border-width,&amp;#010 border-style, and/or color (eg &quot;2px solid blue&quot;).&amp;#010 &lt;P&gt;&amp;#010 This property applies the same border to all four sides of this component.  Different&amp;#010 per-side borders can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}." name="border" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setBorder</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:isc.logEcho" flags="" description=" Logs the echoed object (using ${isc.DocUtils.linkForRef('classMethod:isc.echo')}) as a warning, prefixed with an&amp;#010 optional message.&amp;#010&amp;#010" name="logEcho" type="classMethod" definingClass="class:isc">
<seeAlso ref="method:Log.logWarn" description="for logging info"></seeAlso>
<params description="object to echo" optional="false" name="value" type="any">
</params>
<params description="message to log" optional="false" name="message" type="String">
</params>
</docItem>
<docItem ref="attr:DateChooser.showTodayButton" flags="IRW" description="Determines whether the &quot;Today&quot; button will be displayed, allowing the user to select &amp;#010 the current date." name="showTodayButton" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:StatefulCanvas.redrawOnStateChange" flags="IRWA" description="Whether this widget needs to redraw to reflect state change" name="redrawOnStateChange" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="classMethod:Page.getHeight" flags="" description=" Get the height of the visible portion of the window, not including browser chrome or the&amp;#010 scrollbar area.&amp;#010" name="getHeight" type="classMethod" definingClass="class:Page">
<params description="the window object" optional="true" name="wd" type="object">
</params>
<returns description="height of the page" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Log.getStackTrace" flags="" description=" Returns a &quot;stack trace&quot; - one line per method in the current call stack, showing the method&amp;#010 name and any parameters passed.&amp;#010 &lt;P&gt;&amp;#010 This API can currently only be supported in Internet Explorer.  See&amp;#010 ${isc.DocUtils.linkForRef('group:debugging')} for information on how to get equivalent information from other&amp;#010 browsers.&amp;#010&amp;#010" name="getStackTrace" type="method" definingClass="class:Log">
<returns description="stack trace.  Use eg ${isc.DocUtils.linkForRef('method:Log.logWarn')} to log to the Developer Console." type="String"></returns>
    <groups>debug</groups>
</docItem>
<docItem ref="attr:GridRenderer.baseStyle" flags="IR" description="The base name for the CSS class applied to cells. This style will have &quot;Dark&quot;, &amp;#010 &quot;Over&quot;, &quot;Selected&quot;, or &quot;Disabled&quot; appended to it according to the state of the cell." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;cell&quot;" type="attr" definingClass="class:GridRenderer">
    <getter>getBaseStyle</getter>
<seeAlso ref="method:GridRenderer.getCellStyle">
</seeAlso>
<seeAlso ref="method:GridRenderer.getBaseStyle">
</seeAlso>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:DataSourceField.propertiesOnly" flags="IR" description="For use in ${isc.DocUtils.linkForRef('group:componentSchema')} for fields that contain other components, this flag&amp;#010 suppresses auto-construction for subcomponents that appear under this field.&amp;#010 &lt;P&gt;&amp;#010 For example, the ${isc.DocUtils.linkForRef('class:VLayout')} schema sets this for its ${isc.DocUtils.linkForRef('attr:Layout.members','members')}&amp;#010 property, so that when a VLayout is constructed via XML as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;VLayout&amp;gt;&amp;#010     &amp;lt;members&amp;gt;&amp;#010         &amp;lt;ListGrid ID=&quot;myGrid&quot; .../&amp;gt;&amp;#010         &amp;lt;Toolstrip ID=&quot;myToolStrip&quot; ... /&amp;gt;&amp;#010     &amp;lt;/members&amp;gt;&amp;#010 &amp;lt;/VLayout&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The ListGrid and ToolStrip do not construct themselves automatically.  Instead, the VLayout&amp;#010 receives the properties of the ListGrid and ToolStrip as ordinary JavaScript Objects, with&amp;#010 the special property &lt;code&gt;_constructor&lt;/code&gt; set to the name of the class that should be&amp;#010 constructed." name="propertiesOnly" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentSchema</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:DynamicForm.items" description="Synonym for ${isc.DocUtils.linkForRef('attr:DynamicForm.fields')}" name="items" valueType="Array of FormItem Properties" defaultValue="null" definingClass="class:DynamicForm">
    <getter>getItems</getter>
    <setter>setItems</setter>
<seeAlso ref="attr:DynamicForm.fields">
</seeAlso>
    <groups>items</groups>
</docItem>
<docItem ref="class:AutoFitButton" deprecated="As of Isomorphic SmartClient version 5.5, autoFit behavior can be achieved using the Button class instead by setting the property ${isc.DocUtils.linkForRef('attr:Button.autoFit')} to true." description="A button that automatically sizes to the length of its title.  Implemented via the &amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property." name="AutoFitButton" type="class">
    <treeLocation>Client Reference/Control/Button</treeLocation>
<seeAlso ref="class:Button">
</seeAlso>
</docItem>
<docItem ref="type:timeFormatter" description="String designating a standard time formatter for displaying the times associated with &amp;#010 dates strings." name="timeFormatter" type="type">
<values description="String will display with seconds and am/pm indicator:&lt;code&gt;[H]H:MM:SS am|pm&lt;/code&gt;. &lt;br&gt;&amp;#010  Example: &lt;code&gt;3:25:15 pm&lt;/code&gt;" value="toTime"></values>
<values description="String will display with seconds in 24 hour time: &lt;code&gt;[H]H:MM:SS&lt;/code&gt;. &lt;br&gt;&amp;#010  Example: &lt;code&gt;15:25:15&lt;/code&gt;" value="to24HourTime"></values>
<values description="String will display with seconds, with a 2 digit hour and am/pm indicator: &amp;#010  &lt;code&gt;HH:MM:SS am|pm&lt;/code&gt; &lt;br&gt;&amp;#010  Example: &lt;code&gt;03:25:15 pm&lt;/code&gt;" value="toPaddedTime"></values>
<values description="String will display with seconds, with a 2 digit hour in 24 hour format: &amp;#010  &lt;code&gt;HH:MM:SS&lt;/code&gt; &lt;br&gt;&amp;#010  Examples: &lt;code&gt;15:25:15&lt;/code&gt;, &lt;code&gt;03:16:45&lt;/code&gt;" value="toPadded24HourTime"></values>
<values description="String will have no seconds and be in 12 hour format:&lt;code&gt;[H]H:MM am|pm&lt;/code&gt;&lt;br&gt;&amp;#010  Example: &lt;code&gt;3:25 pm&lt;/code&gt;" value="toShortTime"></values>
<values description="String will have no seconds and be in 24 hour format: &lt;code&gt;[H]H:MM&lt;/code&gt;&lt;br&gt;&amp;#010  Example:&lt;code&gt;15:25&lt;/code&gt;" value="toShort24HourTime"></values>
<values description="String will have no seconds and will display a 2 digit hour, in 12 hour clock format:&amp;#010  &lt;code&gt;HH:MM am|pm&lt;/code&gt;&lt;br&gt;&amp;#010  Exmaple: &lt;code&gt;03:25 pm&lt;/code&gt;" value="toShortPaddedTime"></values>
<values description="String will have no seconds and will display with a 2 digit hour in 24 hour clock format:&amp;#010 &lt;code&gt;HH:MM&lt;/code&gt;&lt;br&gt;&amp;#010 Examples: &lt;code&gt;15:25&lt;/code&gt;, &lt;code&gt;03:16&lt;/code&gt;" value="toShortPadded24HourTime"></values>
</docItem>
<docItem ref="attr:DynamicForm.autoFetchData" flags="IR" description="If true, when this component is first drawn, automatically call &lt;code&gt;this.fetchData()&lt;/code&gt;" name="autoFetchData" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.fetchData">
</seeAlso>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:ListGridField.sortDirection" flags="IRW" description="Specifies the default sorting direction for this column. If set to&amp;#010  &quot;ascending&quot;, the lowest value in the column is at the top of the listGrid. If set to&amp;#010  &quot;descending&quot;, the highest value in the column is at the top of the listGrid. If not&amp;#010  specified, the current value of listGrid.sortDirection is used instead." name="sortDirection" valueType="SortDirection" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.sortDirection">
</seeAlso>
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:Window.title" flags="IRW" description="title for this Window, shown in the header (if drawn)" name="title" valueType="string" defaultValue="&quot;Untitled Window&quot;" type="attr" definingClass="class:Window">
    <setter>setTitle</setter>
    <groups>appearance</groups>
    <groups>headerLabel</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Canvas.setBackgroundColor" flags="" description="			Sets the background color of this widget to newColor.&amp;#010" name="setBackgroundColor" type="method" definingClass="class:Canvas">
<params description="new color to set the widget's background to" optional="false" name="newColor" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:TabSet.tabBarAlign" flags="IR" description="Alignment of the tabBar.&amp;#010 &lt;P&gt;&amp;#010 If the position of the tabBar is &quot;top&quot; or &quot;bottom&quot;, then alignment must be &quot;left&quot; or&amp;#010 &quot;right&quot; and defaults to &quot;left&quot;.&amp;#010 &lt;P&gt;&amp;#010 If the position of the tabBar is &quot;left&quot; or &quot;right&quot;, then the alignment must be &quot;top&quot; or&amp;#010 &quot;bottom&quot; and defaults to &quot;top&quot;." name="tabBarAlign" valueType="Side" defaultValue="see below" type="attr" definingClass="class:TabSet">
    <examples>${isc.DocUtils.linkForExampleId('tabsAlign')}</examples>
    <groups>tabBar</groups>
</docItem>
<docItem ref="method:DynamicForm.getItemErrorHTML" flags="" description=" If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, this method is called for each item in the form&amp;#010 and returns the error HTML to be written out next to the item.&lt;br&gt;&amp;#010 Default implementation falls through to ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')} on the item in question.&amp;#010" name="getItemErrorHTML" type="method" definingClass="class:DynamicForm">
<params description="Form item for which the HTML should be retrieved" optional="false" name="item" type="FormItem">
</params>
<params description="Error message to display for the item, or array of error message                              strings." optional="false" name="error" type="string | array">
</params>
    <groups>validation</groups>
</docItem>
<docItem ref="method:ListGrid.getEditValue" flags="" description="&amp;#010 Returns the current temporary locally stored edit value for some field within a record &amp;#010 being edited.&amp;#010&amp;#010" name="getEditValue" type="method" definingClass="class:ListGrid">
<params description="index of the row for which the editValue should be returned" optional="false" name="rowNum" type="number">
</params>
<params description="index of the field, or fieldName, for which value should be                               returned" optional="false" name="colNum" type="number | string">
</params>
<returns description="edit value for the field in question" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ListGridField.showHover" flags="IRW" description="Whether to show hovers for this field.  The default hover will be the contents of the&amp;#010 cell the user is hovering over, and can be customized via&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.hoverHTML','field.hoverHTML()')}.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canHover')} can be set to true to cause hovers to be shown for all fields&amp;#010 by default.  In this case, &lt;code&gt;field.showHover&lt;/code&gt; can be set to false to suppress&amp;#010 hovers for an individual field.&amp;#010 &lt;P&gt;&amp;#010 All hovers can be disabled, regardless of other settings, by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.showHover')} to false." name="showHover" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <examples>${isc.DocUtils.linkForExampleId('valueHoverTips')}</examples>
</docItem>
<docItem ref="group:autoComplete" name="autoComplete" type="group">
</docItem>
<docItem ref="attr:ListGrid.showHover" flags="IRW" description="If true, and canHover is also true, when the user hovers over a cell, hover text will pop up&amp;#010 next to the mouse.  The contents of the hover is determined by ${isc.DocUtils.linkForRef('method:ListGrid.cellHoverHTML')}." name="showHover" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canHover">
</seeAlso>
<seeAlso ref="method:ListGrid.cellHoverHTML">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectCells" flags="" description="&amp;#010  Deselect cells that match a list of facetValues.  &amp;#010  Also supports an explicit list of cells or cellIds&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectCells" type="method" definingClass="class:CubeGrid">
<params description="cells to deselect" optional="false" name="cellList" type="Array of cells | facetValues object">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.ungroup" flags="" description=" Removes the grouping from the listgrid, restoring its original data&amp;#010&amp;#010" name="ungroup" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:MultiFileItem.removeButton" flags="IR" description="Button for removing files.  Supports the properties of a ${isc.DocUtils.linkForRef('object:FormItemIcon')}." name="removeButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:MultiFileItem">
</docItem>
<docItem ref="attr:StatefulCanvas.iconSpacing" flags="IR" description="Pixels between icon and title text." name="iconSpacing" valueType="integer" defaultValue="6" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:FormItem.titleHover" flags="A" description="  Optional stringMethod to fire when the user hovers over this item's title.&amp;#010  Return false to suppress default behavior of showing a hover canvas containing the&amp;#010  HTML returned by &lt;code&gt;formItem.titleHoverHTML()&lt;/code&gt; / &amp;#010  &lt;code&gt;form.titleHoverHTML()&lt;/code&gt;.&amp;#010&amp;#010" name="titleHover" type="method" definingClass="class:FormItem">
<seeAlso ref="method:FormItem.itemHover">
</seeAlso>
<seeAlso ref="method:FormItem.titleHoverHTML">
</seeAlso>
<params description="This items form" optional="false" name="form" type="DynamicForm">
</params>
<params description="Pointer to this item" optional="false" name="item" type="FormItem">
</params>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:GridRenderer.emptyMessage" flags="IRW" description="The string to display in the body of a listGrid with an empty data array, if&amp;#010 showEmptyMessage is true." name="emptyMessage" valueType="string" defaultValue="null" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.showEmptyMessage">
</seeAlso>
<seeAlso ref="attr:GridRenderer.emptyMessageStyle">
</seeAlso>
    <groups>emptyMessage</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="classAttr:Validator.notAnInteger" flags="IRA" description="Default error message to display when standard &lt;code&gt;isInteger&lt;/code&gt; type validator&amp;#010  returns false." name="notAnInteger" valueType="string" defaultValue="&quot;Must be a whole number.&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Log.logIsErrorEnabled" flags="" description=" Check whether a message logged at &quot;error&quot; priority would be visible in the log.&amp;#010 &lt;P&gt;&amp;#010 As with logDebug, category is defaulted to the current className.  Use this method to avoid&amp;#010 putting together expensive log messages if they will never appear in the log.&amp;#010&amp;#010" name="logIsErrorEnabled" type="method" definingClass="class:Log">
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:ToolbarItem.buttonConstructor" flags="IRWA" description="Use AutoFitButtons rather than simple Buttons for this toolbar's buttons by default." name="buttonConstructor" valueType="Class" defaultValue="AutoFitButton" type="attr" definingClass="class:ToolbarItem">
</docItem>
<docItem ref="method:DynamicForm.getFieldErrors" flags="" description=" Returns the current set of validation errors for some field in this form.&amp;#010" name="getFieldErrors" type="method" definingClass="class:DynamicForm">
<returns description="Error message string, or if there is more than one error      associated with this field, array of error message strings." type="string | array of strings"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="class:PropertySheet" description="Editor with a minimalist appearance, tuned for editing large numbers of properties in a&amp;#010 constrained space." name="PropertySheet" type="class">
    <treeLocation>Client Reference/Forms</treeLocation>
</docItem>
<docItem ref="classMethod:Page.getImgURL" flags="" description=" Return the full URL for app-specific or skin image.&amp;#010 &lt;P&gt;&amp;#010 To use a skin image, start the URL with &quot;[SKIN]&quot;.  Any other relative URL is assumed&amp;#010 relative to the ${isc.DocUtils.linkForRef('classMethod:Page.getAppImgDir','appImgDir')}.&amp;#010&amp;#010" name="getImgURL" type="classMethod" definingClass="class:Page">
<params description="Local file name for the image." optional="false" name="src" type="SCImgURL">
</params>
<params description="User-specified image directory,										local to" optional="true" name="imgDir" type="string">
</params>
<returns description="URL for the image." type="string"></returns>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="group:relogin" title="Relogin" description="For applications that require authentication and use session timeout, a background RPC may&amp;#010 occur with an expired session.  The ideal handling of this scenario is that, with the attempted&amp;#010 transaction still suspended, a modal dialog is used to re-authenticate the user, and then the&amp;#010 original transaction is resumed without loss of data or context.  SmartClient makes it easy to&amp;#010 implement this ideal handling &lt;i&gt;without&lt;/i&gt; having to implement session timeout handling in&amp;#010 every codepath that contacts the server, by providing central notification of session timeout,&amp;#010 and the ability to re-send a transaction that encountered session timeout.&amp;#010 &lt;P&gt;&amp;#010 When session timeout occurs, typical authentication systems intercept requests to protected&amp;#010 resources and return a page that tells the user that login is required.  With a background RPC&amp;#010 this page won't be shown to the user.&amp;#010 &lt;P&gt;&amp;#010 To enable SmartClient to detect that session timeout has occurred, a snippet of HTML called the&amp;#010 loginRequiredMarker must be added to the session timeout response sent by the authentication&amp;#010 system.  The loginRequiredMarker is standardized and does not need to be customized for your&amp;#010 deployment.  It can be added to an HTML page without visual effect, or if the response sent on&amp;#010 session timeout is not an HTML page, simply embedded in any other type of response, or sent&amp;#010 as the entirety of the response.  The loginRequiredMarker is in&amp;#010 isomorphic/login/loginRequiredMarker.html.&amp;#010 &lt;P&gt;&amp;#010 When SmartClient detects the loginRequired marker, the transaction that encountered session&amp;#010 timeout is put on hold, and ${isc.DocUtils.linkForRef('classMethod:RPCManager.loginRequired')} is called.  At this point you&amp;#010 have a few options:&amp;#010 &lt;ol&gt;&amp;#010 &amp;#010 &lt;li&gt; Leave the SmartClient application and take the user to the login page, by simply doing a&amp;#010 &lt;code&gt;window.location.replace(&lt;i&gt;myLoginURL&lt;/i&gt;)&lt;/code&gt;, the simplest but least user friendly&amp;#010 option.&amp;#010 &amp;#010 &lt;li&gt; Open a new browser window that goes to your plain HTML login form (or offer a link that&amp;#010 opens such a browser window), using a modal dialog in the application page that prompts the&amp;#010 user to login before continuing, then re-send the intercepted transaction&amp;#010 (${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction')} when the user indicates he has logged in.&amp;#010 This is simple, does not drop context, but is not seamless.&amp;#010 &amp;#010 &lt;li&gt; Use a SmartClient interface, typically a DynamicForm in a Window, to collect credentials,&amp;#010 perform login as a background RPC, and on success re-send the intercepted transaction&amp;#010 (${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction')}.  A complete example of this, which assumes&amp;#010 an authentication system that can take credentials as HTTP POST params, is included in the SDK&amp;#010 as isomorphic/login/reloginFlow.js.&amp;#010 &amp;#010 &lt;/ol&gt;&amp;#010 &lt;B&gt;Authentication via background RPC form POST&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 The approach shown in reloginFlow.js posts the credentials gathered from the user to&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.credentialsURL')}.  To make this work with an authentication system that can&amp;#010 accept credentials via HTTP POST:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; set the RPCManager.credentialsURL to the URL where credentials should be POST'd&amp;#010 &lt;li&gt; include reloginFlow.js in your page, modified, if necessary, so that the names of the&amp;#010 USERNAME and PASSWORD params match what your authentication system uses&amp;#010 &lt;li&gt; configure your authentication system to send back the loginSuccessMarker as part of a&amp;#010 successful login response, and the loginRequiredMarker as part of a failed login response&amp;#010 &lt;/ol&gt;&amp;#010 If your authentication system can accept POST'd credentials at any URL it protects, the last&amp;#010 step may be as simple as configuring the loginSuccessMarker file itself as a protected&amp;#010 resource (isomorphic/login/loginSuccess.html).&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Authentication via background SmartClient server RPC/DMI&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 If you are using the SmartClient Java server and your authentication system allows you to mark&amp;#010 a user as authenticated from Java, you can perform a normal RPC or DMI with the credentials&amp;#010 gathered from the user and send back success or failure indications as normal RPC or DMI&amp;#010 responses.  This can be useful if, in addition to logging in, you want to send back additional&amp;#010 data.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Advanced: concurrency&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 If, after loginRequired() has fired and before the user has re-authenticated, you send&amp;#010 additional RPCs to protected URLs, you will get additional loginRequired() notifications.  This&amp;#010 may happen to applications that poll for data or periodically save without user action.  You&amp;#010 may wish to avoid this by setting an application-specific flag to avoid firing requests during&amp;#010 the relogin process.  However, you must ultimately either&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction','resend')} or ${isc.DocUtils.linkForRef('classMethod:RPCManager.clearTransaction','discard')}&amp;#010 every transaction for which loginRequired() fires, or you will have a memory leak due to&amp;#010 suspended transactions.&amp;#010 &lt;P&gt;&amp;#010 Note also that there is no requirement that the relogin process blocks user interaction.&amp;#010 Applications that access multiple services may choose to simply show an unobtrusive error&amp;#010 indication such that the user can log back in at his liesure, or even log the user back in&amp;#010 automatically." name="relogin" type="group">
    <treeLocation>Client Reference/RPC</treeLocation>
    <refs>classAttr:RPCManager.credentialsURL</refs>
    <refs>classMethod:RPCManager.loginRequired</refs>
    <refs>attr:RPCRequest.containsCredentials</refs>
</docItem>
<docItem ref="attr:StatefulCanvas.selected" flags="IRW" description="Whether this component is selected.  For some components, selection affects appearance." name="selected" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <setter>setSelected</setter>
    <groups>state</groups>
</docItem>
<docItem ref="method:String.startsWith" flags="" description="			Returns true if this string starts with another string.&amp;#010" name="startsWith" type="method" definingClass="class:String">
<params description="other string to check" optional="false" name="substring" type="String">
</params>
<returns description="true == this string starts with substring" type="boolean"></returns>
    <groups>stringProcessing</groups>
</docItem>
<docItem ref="method:TreeGrid.fetchData" flags="" description=" Uses a &quot;fetch&quot; operation on the current ${isc.DocUtils.linkForRef('class:DataSource','grid.dataSource')} to retrieve data&amp;#010 that matches the provided criteria, and displays the matching data in this component as a&amp;#010 tree.&amp;#010 &lt;P&gt;&amp;#010 This method will create a ${isc.DocUtils.linkForRef('class:ResultTree')} to manage tree data, which will&amp;#010 subsequently be available as &lt;code&gt;treeGrid.data&lt;/code&gt;.  DataSource records&amp;#010 returned by the &quot;fetch&quot; operation are linked into a tree structure according to&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} declarations on DataSource fields.  See the&amp;#010 ${isc.DocUtils.linkForRef('group:treeDataBinding')} topic for complete details.&amp;#010 &lt;P&gt;&amp;#010 By default, the created ResultTree will use folder-by-folder load on demand, asking the&amp;#010 server for the children of each folder as the user opens it.&amp;#010 &lt;P&gt;&amp;#010 The ${isc.DocUtils.linkForRef('class:ResultTree')} created by &lt;code&gt;fetchData()&lt;/code&gt; can be customized by setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')} to an Object containing properties and methods to apply to&amp;#010 the created ResultTree.  For example, the property that determines whether a node is a&amp;#010 folder (${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty','isFolderProperty')}) can be customized, or&amp;#010 level-by-level loading can be disabled via&amp;#010 ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','loadDataOnDemand:false')}.&amp;#010 &lt;P&gt;&amp;#010 The callback passed to &lt;code&gt;fetchData&lt;/code&gt; will fire once, the first time that data is&amp;#010 loaded from the server.  If using folder-by-folder load on demand, use the&amp;#010 ${isc.DocUtils.linkForRef('method:ResultTree.dataArrived')} notification to be notified each time new nodes are loaded.&amp;#010 &lt;P&gt;&amp;#010 Note that, if criteria are passed to &lt;code&gt;fetchData()&lt;/code&gt;, they will be passed every&amp;#010 time a new &quot;fetch&quot; operation is sent to the server.  This allows you to retrieve multiple&amp;#010 different tree structures from the same DataSource.  However note that the server is expected&amp;#010 to always respond with an intact tree - returned nodes which do not have parents are dropped&amp;#010 from the dataset and not displayed.&amp;#010&amp;#010" name="fetchData" type="method" definingClass="class:TreeGrid">
<params description="Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument&amp;#010                      instead of a raw criteria object, will be derived by calling&amp;#010                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:FacetValue.selectionBoundary" flags="IR" description="Selection boundary determining what facets / facetValues can be selected together by&amp;#010 drag selection / shift+click selection" name="selectionBoundary" valueType="enum" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="attr:FormItemIcon.showFocused" flags="IRWA" description="Should this icon's image switch to the appropriate &quot;focused&quot; source when the user puts&amp;#010 focus on the form item or icon?" name="showFocused" valueType="boolean" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.showFocusedIcons">
</seeAlso>
    <seeAlso>formItemIcon.showFocusedWithItem</seeAlso>
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:Selection.selectAll" flags="" description="			Select ALL records of the list&amp;#010" name="selectAll" type="method" definingClass="class:Selection">
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGridField.optionDataSource" flags="IRWA" description="Derive a ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap')} by fetching records from another DataSource and extracting&amp;#010 the ${isc.DocUtils.linkForRef('attr:ListGridField.valueField','valueField')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.displayField','displayField')} in the loaded records, to derive one&amp;#010 valueMap entry per record loaded from the optionDataSource.&amp;#010 &lt;P&gt;&amp;#010 Unlike the similar use of ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} for ${isc.DocUtils.linkForRef('interface:PickList','pickLists')}&amp;#010 used during editing or filtering, &lt;code&gt;listGridField.optionDataSource&lt;/code&gt; causes the&amp;#010 entire set of records from the optionDataSource to be fetched, without paging.   Hence&amp;#010 listGridField.optionDataSource is appropriate only for smaller valueMaps.  For very&amp;#010 large valueMap situations, such as an accountId field that should be displayed as an&amp;#010 accountName where there are thousands of accounts, the recommended approach is:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; do not set listGridField.optionDataSource&amp;#010 &lt;li&gt; declare two fields in the DataSource, eg &quot;accountId&quot; and &quot;accountName&quot;.&amp;#010 &lt;li&gt; Set the ${isc.DocUtils.linkForRef('attr:ListGridField.displayField')} attribute on the data field to the&amp;#010      name of the display field.&amp;#010 &lt;li&gt; When fetching records for display in a grid, have your server send back values for &amp;#010      both fields, but show only the data field (&quot;accountId&quot;) in the grid.&amp;#010 &lt;/ul&gt;&amp;#010 In this case the cells in the accountId field will show the record value from the &amp;#010 accountName field.  This approach means the valueMap will never be loaded in its&amp;#010 entirety, instead, each loaded record contains the valueMapping for that one record, as&amp;#010 a pair of fields within the record.&amp;#010 &lt;P&gt;&amp;#010 Note that it is key that the server return &lt;b&gt;both&lt;/b&gt; the underlying stored value&amp;#010 &lt;b&gt;and&lt;/b&gt; the display value, as suggested above, because this approach allows the&amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} property to be used to provide paged valueMaps during&amp;#010 inline editing and ${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','inline filtering')}.  Note that&amp;#010 pickList.optionDataSource is a distinct setting from listGridField.optionDataSource,&amp;#010 settable via ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties')} (for editing) and &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.filterEditorProperties','field.filterEditorProperties')} (for&amp;#010 filtering)." name="optionDataSource" valueType="String" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:ListGrid.scrollRedrawDelay" flags="IRW" description="While drag scrolling in an incrementally rendered grid, time in milliseconds to wait&amp;#010 before redrawing, after the last mouse movement by the user." name="scrollRedrawDelay" valueType="integer" defaultValue="75" type="attr" definingClass="class:ListGrid">
    <groups>performance</groups>
</docItem>
<docItem ref="method:ListGrid.getVisibleRows" flags="" description=" Get the rows that are currently visible in the viewport, as an array of &amp;#010 [firstRowNum, lastRowNum]. If the grid contains no records, will return [-1,-1];&amp;#010" name="getVisibleRows" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:FormItem.width" flags="IRW" description="By default, items take up the entire width of their cell" name="width" valueType="number" defaultValue="&quot;*&quot;" type="attr" definingClass="class:FormItem">
    <examples>${isc.DocUtils.linkForExampleId('columnSpanning')}</examples>
    <groups>formLayout</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ListGrid.showFilterEditor" description="Should this listGrid display a filter row.  If true, this ListGrid&amp;#010    will be drawn with a single editable row, (separate from the body).  Values entered&amp;#010    into this row are used as filter criteria to filter this List's data." name="showFilterEditor" valueType="boolean" defaultValue="null" definingClass="class:ListGrid">
    <setter>setShowFilterEditor</setter>
    <examples>${isc.DocUtils.linkForExampleId('filter')}</examples>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:TreeGrid.displayNodeType" flags="IRW" description="Specifies the type of nodes displayed in the treeGrid." name="displayNodeType" valueType="DisplayNodeType" defaultValue="Tree.FOLDERS_AND_LEAVES" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="type:DisplayNodeType" description="for options"></seeAlso>
    <groups>treeField</groups>
</docItem>
<docItem ref="classMethod:History.addHistoryEntry" flags="" description="&amp;#010 Call this method to add a synthetic history entry.  The new history entry is added in the&amp;#010 history stack after the currently visible page - in exactly the same way as the browser&amp;#010 would treat a new page transition at this point.  In other words, if the user has navigated&amp;#010 ten pages using, say, a mixture of synthetic and real history entries, then presses back&amp;#010 five times and then triggers a call to this method, the history entry will be created at the&amp;#010 6th position in the history stack and any history entries forward of that will be destroyed.&amp;#010 &lt;p&gt;&amp;#010 This method must be called with an id.  This id can be any string - it will be URL-encoded&amp;#010 and added to the current page URL as an anchor (e.g. #foo).  This URL change allows the user&amp;#010 to bookmark this particular application state.  When the user next navigates to this history&amp;#010 entry, the id you supplied here will be passed back to the callback you supplied via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')}.&amp;#010 &lt;p&gt;&amp;#010 You may also optionally supply some arbitrary data to associate with this history entry.&amp;#010 If you do this, the data you passed in will be passed back to you as part of the callback&amp;#010 you specified via ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')}.  This data object can be anything you&amp;#010 want, but there are some caveats:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;As long as the user has not navigated away from the top-level page (i.e. the user is&amp;#010 navigating within synthetic history entries only), whatever data you pass in will be handed&amp;#010 back to you.&amp;#010 &lt;li&gt;When the user navigates away from the current page, SmartClient will attempt to&amp;#010 serialize the data into a string so that when/if the user comes back to this history entry,&amp;#010 it can be deserialized and passed back to your logic.  To take advantage of this, you need&amp;#010 to make sure that your data is serializeable.  As long as your data is a native datatype&amp;#010 (String, Number, Boolean) or a collection of such datatypes (collections meaning object&amp;#010 literals and arrays), then it will serialize correctly.  Things like pointers to the&amp;#010 document object and functions cannot be serialized.&amp;#010 &lt;li&gt;In order for the serialization to occur on a page transition, you must have the&amp;#010 SmartClient Core module loaded on the page at the time of the transition.  If it's not&amp;#010 available, the data will be lost, but you will still get a callback with the id you specify&amp;#010 if the user navigates back to this history entry later.&amp;#010 &lt;li&gt;The data associated with this history entry will persist as long as at least one&amp;#010 instance of the browser remains open on the user's machine.  Once the user closes all&amp;#010 browser instances, the data will be lost. &amp;#010 &lt;li&gt;Also, the user can trigger a history callback at any time by navigating to a bookmarked&amp;#010 history entry that may have been created in a past session, such that no data is associated&amp;#010 with that id in the current session.  How you choose to handle that situation is up to you.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010 You're always guaranteed to receive the id you associate with a history entry in the&amp;#010 callback that you specify, but the data you associated may or may not be available, so be&amp;#010 careful about how you use it.&amp;#010&amp;#010" name="addHistoryEntry" type="classMethod" definingClass="class:History">
<params description="The id you want to associate with this history entry.  This value will appear as an anchor reference at the end of the URL string.  For example, if you pass in&amp;#010 &quot;foo&quot; as the id, the URL will then have a #foo tacked on the end of it.  This id will be&amp;#010 passed back to the callback you specified in ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')} when the user&amp;#010 navigates to this history entry in the future." optional="false" name="id" type="string">
</params>
<params description="The title to show in the history drop-down for this history entry.  If not specified, the &lt;code&gt;id&lt;/code&gt; is used, unless you've set an explicit history title via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:History.setHistoryTitle')}.  Note: this currently works in IE only.  You may pass a&amp;#010 title in any other browser, but it will not change what's displayed in the history&amp;#010 drop-down." optional="true" name="title" type="string">
</params>
<params description="Arbitrary data to associate with this history entry.  When the user next navigates to this history entry, this data will be provided as an argument to your callback&amp;#010 function.  Note that the SmartClient Core module is also required to be loaded on the page&amp;#010 for this particular feature to work." optional="true" name="data" type="any">
</params>
</docItem>
<docItem ref="attr:ListGridField.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:RPCRequest.willHandleError" flags="IRW" description="With willHandleError:false, rpcResponses that indicate an error go through centralized&amp;#010 handling in the RPCManager and rpcRequest.callback is never invoked.&amp;#010 &lt;P&gt;&amp;#010 Setting willHandleError:true means that your rpcRequest.callback will receive rpcResponses&amp;#010 that have an error status and must handle them.&amp;#010 &lt;P&gt;&amp;#010 See also the error handling section in the ${isc.DocUtils.linkForRef('class:RPCManager')} docs." name="willHandleError" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="class:RPCManager">
</seeAlso>
</docItem>
<docItem ref="group:hoverTips" name="hoverTips" type="group">
    <refs>method:CubeGrid.facetLabelHoverHTML</refs>
    <refs>method:CubeGrid.facetValueHoverHTML</refs>
    <refs>attr:CubeGrid.facetValueHoverWidth</refs>
    <refs>attr:CubeGrid.facetLabelHoverWidth</refs>
    <refs>attr:CubeGrid.facetValueHoverHeight</refs>
    <refs>attr:CubeGrid.facetLabelHoverHeight</refs>
    <refs>attr:CubeGrid.facetValueHoverAlign</refs>
    <refs>attr:CubeGrid.facetLabelHoverAlign</refs>
    <refs>attr:CubeGrid.facetValueHoverVAlign</refs>
    <refs>attr:CubeGrid.facetLabelHoverVAlign</refs>
    <refs>attr:CubeGrid.facetValueHoverStyle</refs>
    <refs>attr:CubeGrid.facetLabelHoverStyle</refs>
</docItem>
<docItem ref="attr:ListGrid.alternateRecordFrequency" flags="IRW" description="The number of consecutive rows to draw in the same style before alternating, when&amp;#010 alternateRowStyles is true." name="alternateRecordFrequency" valueType="number" defaultValue="1" type="attr" definingClass="class:ListGrid">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeOffsetRight" flags="IRA" description="Amount the contained Canvas should be offset from the right.  Defaults to the size for&amp;#010 the right edge.  Set smaller to allow the contained Canvas to overlap the edge and&amp;#010 corner media." name="edgeOffsetRight" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:ResultSet.allMatchingRowsCached" flags="A" description=" Do we have a complete client-side cache of records for the current filter criteria?&amp;#010 Returns false if this is a paged data set, and the entire set of records that match&amp;#010 the current criteria has not been retrieved from the server.&amp;#010" name="allMatchingRowsCached" type="method" definingClass="class:ResultSet">
</docItem>
<docItem ref="method:CubeGrid.getCellColumn" flags="" description=" Given a record in this grid, this method returns the colNum in which the record is displayed.&amp;#010" name="getCellColumn" type="method" definingClass="class:CubeGrid">
<params description="record to find coordinates for" optional="false" name="cellRecord" type="record">
</params>
<returns description="Column number for the record. Returns -1 if the record is not found." type="integer"></returns>
</docItem>
<docItem ref="method:Canvas.getPageTop" flags="A" description=" Returns the page-relative top coordinate of the widget on the page, in pixels &amp;#010" name="getPageTop" type="method" definingClass="class:Canvas">
<returns description="GLOBAL top coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:GridRenderer.getTotalRows" flags="" description=" Return the total number of rows in the grid.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: in order to create a valid grid, you must either provide a totalRows value or implement&amp;#010 getTotalRows()&amp;#010&amp;#010" name="getTotalRows" type="method" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.totalRows">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.mouseOver" flags="A" description="&amp;#010 Executed when mouse enters this widget.  No default implementation.&amp;#010&amp;#010" name="mouseOver" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="group:pickerIcon" name="pickerIcon" type="group">
    <refs>attr:SelectItem.pickerIconWidth</refs>
    <refs>attr:SelectItem.pickerIconHeight</refs>
    <refs>attr:SelectItem.pickerIconSrc</refs>
    <refs>attr:SelectItem.pickerIconProperties</refs>
</docItem>
<docItem ref="method:TreeGrid.folderOpened" flags="" description="&amp;#010 This method is called when a folder is opened either via the user manipulating the&amp;#010 expand/collapse control in the UI or via ${isc.DocUtils.linkForRef('method:TreeGrid.openFolder')}.  You can return&amp;#010 &lt;code&gt;false&lt;/code&gt; to cancel the open.&amp;#010&amp;#010" name="folderOpened" type="method" definingClass="class:TreeGrid">
<params description="the folder (record) that is being opened" optional="false" name="node" type="TreeNode">
</params>
<returns description="false to cancel the open, true to all it to proceed" type="boolean"></returns>
</docItem>
<docItem ref="attr:ComboBoxItem.showPickerIcon" flags="IRWA" description="Show the picker icon for the combo box" name="showPickerIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:Tree.dataChanged" flags="A" description="&amp;#010 Called when the structure of this tree is changed in any way.  Intended to be observed.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Note that on a big change (many items being added or deleted) this may be called multiple times&amp;#010&amp;#010" name="dataChanged" type="method" definingClass="class:Tree">
</docItem>
<docItem ref="type:listGridViewState" description="An object containing the &quot;view state&quot; information for a listGrid.&lt;br&gt;&amp;#010 This object contains state information reflecting&lt;br&gt;&amp;#010 - ${isc.DocUtils.linkForRef('type:listGridFieldState')}&lt;br&gt;&amp;#010 - ${isc.DocUtils.linkForRef('type:listGridSortState')}&lt;br&gt;&amp;#010 - ${isc.DocUtils.linkForRef('type:listGridSelectedState')}&lt;br&gt;&amp;#010 for the grid.&lt;br&gt;&amp;#010 Note that this object is not intended to be interrogated directly, but may be stored &amp;#010 (for example) as a blob on the server for view state persistence across sessions." name="listGridViewState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:DataBoundComponent.removeOperation" flags="IRW" description="Operation ID this component should use when performing remove operations." name="removeOperation" valueType="String" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
<seeAlso ref="attr:DSRequest.operationId">
</seeAlso>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:DSResponse.invalidateCache" flags="R" description="Optional flag that can be set by the server to force ResultSets to drop any caches of&amp;#010 records from the DataSource that was the target of the operation." name="invalidateCache" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DSResponse">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="classMethod:Page.getScrollTop" flags="" description="		Get the amount that the browser window has been scrolled vertically.&amp;#010" name="getScrollTop" type="classMethod" definingClass="class:Page">
<returns description="vertical scroll amount" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:FormItem.blur" flags="" description=" Called when this FormItem loses focus.&amp;#010 &amp;#010" name="blur" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:StatefulCanvas.state" description="Current &quot;state&quot; of this widget. StatefulCanvases will have a different appearance based&amp;#010 on their current state. By default this is handled by changing the css className applied to&amp;#010 the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is&amp;#010 done.&lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the &amp;#010 appearance may also be updated by changing the src of the rendered image. See&amp;#010 ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL &amp;#010 is modified to reflect the state of the widget in this case." name="state" valueType="State" defaultValue="&quot;&quot;" definingClass="class:StatefulCanvas">
    <getter>getState</getter>
    <setter>setState</setter>
<seeAlso ref="type:State">
</seeAlso>
<seeAlso ref="group:state">
</seeAlso>
    <groups>state</groups>
</docItem>
<docItem ref="attr:RPCRequest.transport" flags="IRWA" description="Selects the transport used for this RPCRequest.  If unset, the value of&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} will be used.&amp;#010 &lt;p&gt;&amp;#010 If you're using queueing, note that all requests in the queue must use the same transport.&amp;#010 If you attempt to send a request via a different transport than those that are currently on&amp;#010 the queue, it will be sent to the server separately, ahead of the queue, and a warning will&amp;#010 be logged to the Developer Console.&amp;#010 &lt;p&gt;&amp;#010 If you specify an unknown transport, an error will be logged to the DeveloperConsole and&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} will be used instead.&amp;#010 &lt;p&gt;&amp;#010 If you specify the &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport and it is not available, a warning will be&amp;#010 logged to the Developer Console and the RPCManager will attempt to use the&amp;#010 &lt;code&gt;hiddenFrame&lt;/code&gt; transport instead for this request.  Note that some features like&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} requre the &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport and will not&amp;#010 work if the &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport is unavailable (this can happen if the end user is&amp;#010 using Internet Explorer and has disabled ActiveX).  You can check whether or not the&amp;#010 &lt;code&gt;xmlHttpRequest&lt;/code&gt; transport is currently available by calling&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')}." name="transport" valueType="RPCTransport" defaultValue="RPCManager.defaultTransport" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.defaultTransport">
</seeAlso>
</docItem>
<docItem ref="attr:SelectItem.filterLocally" flags="IRA" description="If &lt;code&gt;filterLocally&lt;/code&gt; is set for this item, and this item is showing options &amp;#010 from a dataSource, fetch the entire set of options from the server, and use these values&amp;#010 to map the item value to the appropriate display value. Also use &lt;code&gt;&quot;local&quot;&lt;/code&gt;&amp;#010 type filtering on drop down list of options.&lt;br&gt;&amp;#010 This means data will only be fetched once from the server, and then filtered on the&amp;#010 client." name="filterLocally" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:FormItem.filterLocally">
</seeAlso>
</docItem>
<docItem ref="type:State" description="Constants for the standard states for a StatefulCanvas." name="State" type="type">
<values description="state when mouse is not acting on this StatefulCanvas" value="StatefulCanvas.STATE_UP"></values>
<values description="state when mouse is down" value="StatefulCanvas.STATE_DOWN"></values>
<values description="state when mouse is over" value="StatefulCanvas.STATE_OVER"></values>
<values description="disabled" value="StatefulCanvas.STATE_DISABLED"></values>
    <groups>state</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:Canvas.contents" description="The contents of a canvas or label widget. Any HTML string is acceptable." name="contents" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" definingClass="class:Canvas">
    <getter>getContents</getter>
    <setter>setContents</setter>
<seeAlso ref="attr:Canvas.dynamicContents">
</seeAlso>
    <groups>contents</groups>
</docItem>
<docItem ref="attr:TabBar.baseLineSrc" flags="IR" description="Sets ${isc.DocUtils.linkForRef('attr:StretchImg.src')} for the ${isc.DocUtils.linkForRef('group:baseLine')} StretchImg." name="baseLineSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]baseline.gif&quot;" type="attr" definingClass="class:TabBar">
    <groups>baseLine</groups>
</docItem>
<docItem ref="classMethod:Date.parseInput" flags="" description=" Parse a date passed in as a string, returning the approprate date object.&amp;#010" name="parseInput" type="classMethod" definingClass="class:Date">
<params description="date value as a string" optional="false" name="dateString" type="string">
</params>
<params description="Format of the date string being passed.                                      If not passed, the default date input format as set up&amp;#010                                      via setInputFormat() will be used." optional="true" name="format" type="DateInputFormat">
</params>
<params description="For date formats that support a 2 digit                                  year, if parsed year is 2 digits and less than this&amp;#010                                  number, assume year to be 20xx rather than 19xx" optional="true" name="centuryThreshold" type="number">
</params>
<params description="If the string passed in was not a valid date, in some cases we can convert to a&amp;#010          valid date (for example incrementing the year if the month is greater than 12).&amp;#010          This optional parameter will suppress such conversions - anything that doesn't&amp;#010          parse directly to a valid date will simply return null." optional="true" name="suppressConversion" type="boolean">
</params>
<returns description="date value, or null if the string could not be parsed to a valid date." type="Date"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:TabSet.canCloseTabs" flags="IRW" description="Should tabs in this tabSet show an icon allowing the user to dismiss the tab by&amp;#010 clicking on it directly. May be overridden for individual tabs by setting &amp;#010 ${isc.DocUtils.linkForRef('attr:Tab.canClose')}.&lt;br&gt;&amp;#010 The URL for this icon's image will be derived from  ${isc.DocUtils.linkForRef('attr:TabSet.closeTabIcon')} by &amp;#010 default, but may be overridden by explicitly specifying ${isc.DocUtils.linkForRef('attr:Tab.closeIcon')}." name="canCloseTabs" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TabSet">
<seeAlso ref="method:TabSet.closeClick">
</seeAlso>
</docItem>
<docItem ref="attr:ToolStripSeparator.skinImgDir" flags="IR" description="Path to separator image." name="skinImgDir" valueType="URL" defaultValue="&quot;images/ToolStrip/&quot;" type="attr" definingClass="class:ToolStripSeparator">
</docItem>
<docItem ref="attr:Slider.title" flags="IRW" description="Optional display title for the slider." name="title" valueType="String" defaultValue="&quot;Set Value&quot;" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.showTitle">
</seeAlso>
</docItem>
<docItem ref="attr:SelectItem.pickerIconWidth" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the&amp;#010 size of the picker icon. If unset picker icon will be sized as a square to fit in the&amp;#010 avaliable height for the icon." name="pickerIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="class:SelectItem">
    <groups>pickerIcon</groups>
</docItem>
<docItem ref="method:List.set" flags="" description=" Change the array element at a particular position.&amp;#010 &lt;P&gt;&amp;#010 set() can be used to expand the length of the list.&amp;#010&amp;#010" name="set" type="method" definingClass="interface:List">
<params description="position in the list to change" optional="false" name="pos" type="number">
</params>
<params description="new value for that position" optional="false" name="obj" type="object">
</params>
<returns description="whatever's at that position, null if not found" type="object"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:Window.dismissOnEscape" flags="IRW" description="Should this window be dismissed (same effect as pressing the &quot;Cancel&quot; button) when the &amp;#010 user presses the &quot;Escape&quot; key?&lt;br&gt;&amp;#010 If unset default behavior depends on whether a close / cancel button is visible for&amp;#010 this item." name="dismissOnEscape" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Window">
<seeAlso ref="method:Window.shouldDismissOnEscape">
</seeAlso>
</docItem>
<docItem ref="attr:Canvas.shadowOffset" flags="IRA" description="Offset of the shadow.  Defaults to half of &lt;code&gt;shadowDepth&lt;/code&gt; if unset.&amp;#010 &lt;P&gt;&amp;#010 Because of the blurred edges, a shadow is larger than the originating component by&amp;#010 2xsoftness.  An &lt;code&gt;shadowOffset&lt;/code&gt; of 0 means that the shadow will extend around the&amp;#010 originating component equally in all directions." name="shadowOffset" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('shadows')}</examples>
    <groups>shadow</groups>
</docItem>
<docItem ref="method:CubeGrid.facetValueOut" flags="" description="    StringMethod handler fired when mouseout occurs for a facetValues header button&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueOut" type="method" definingClass="class:CubeGrid">
<params description="facetValuesObject for the appropriate header button" optional="false" name="facetValues" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="method:Tree.find" flags="" description="&amp;#010 Find a node within this tree using a string path or by attribute value.  This method can be&amp;#010 called with 1 or 2 arguments. If a single&amp;#010 argument is supplied, the value of the argument is treated as the path to the node.&amp;#010 &lt;br&gt;&amp;#010 If 2 arguments are supplied, this method will treat the first argument as a fieldName, and&amp;#010 return the first node encountered where &lt;code&gt;node[fieldName]&lt;/code&gt;matches the second &amp;#010 argument.  So for example, given this tree:&amp;#010 &lt;pre&gt;&amp;#010 foo&amp;#010   zoo&amp;#010     bar&amp;#010   moo&amp;#010     bar&amp;#010 &lt;/pre&gt;&amp;#010 Assuming your ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} is the default &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt;&amp;#010 is the name of the root node, then&amp;#010 &lt;code&gt;tree.find(&quot;foo/moo/bar&quot;)&lt;/code&gt; would return the &lt;code&gt;bar&lt;/code&gt; node under the&amp;#010 &lt;code&gt;moo&lt;/code&gt; node.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 &lt;code&gt;tree.find(&quot;name&quot;, &quot;bar&quot;)&lt;/code&gt; would return the first &lt;code&gt;bar&lt;/code&gt; node because&amp;#010 it is the first one in the list whose &lt;code&gt;name&lt;/code&gt; (default value of&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}) property matches the value&amp;#010 &lt;code&gt;bar&lt;/code&gt;.  The two argument usage is generally more interesting when your tree nodes&amp;#010 have some custom unique property that you wish to search on.  For example if your tree nodes&amp;#010 had a unique field called &quot;UID&quot;, their serialized form would look something like this:&amp;#010 &lt;pre&gt;&amp;#010 { name: &quot;foo&quot;, children: [...], UID:&quot;someUniqueId&quot;}&amp;#010 &lt;/pre&gt; &amp;#010 You could then call &lt;code&gt;tree.find(&quot;UID&quot;, &quot;someUniqueId&quot;)&lt;/code&gt; to find that node.  Note&amp;#010 that the value doesn't have to be a string - it can be any valid JS value, but since this&amp;#010 data generally comes from the server, the typical types are string, number, and boolean.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 When searching by path, trailing path delimiters are ignored.  So for example&amp;#010 &lt;code&gt;tree.find(&quot;foo/zoo/bar&quot;)&lt;/code&gt; is equivalent to&amp;#010 &lt;code&gt;tree.find(&quot;foo/zoo/bar/&quot;)&lt;/code&gt;&amp;#010 &amp;#010" name="find" type="method" definingClass="class:Tree">
<seeAlso ref="attr:Tree.root">
</seeAlso>
<seeAlso ref="attr:Tree.pathDelim">
</seeAlso>
<seeAlso ref="attr:Tree.nameProperty">
</seeAlso>
<params description="Either the path to the node to be found, or the" optional="false" name="fieldName|path" type="string">
</params>
<params description="If specified, this is the desired value for the                                   appropriate field" optional="true" name="value" type="any">
</params>
<returns description="the node matching the supplied criteria or null if not found" type="object"></returns>
    <groups>location</groups>
</docItem>
<docItem ref="group:operations" title="Operations Overview" description="SmartClient Operations are dynamic, transparent communications made from the client-side&amp;#010 SmartClient system running in the browser, to the server-side SmartClient system running in&amp;#010 a servlet engine, or to other non-SmartClient servers available via HTTP. Operations are&amp;#010 used to load new data or new behavior into a running SmartClient application. Operations are&amp;#010 also used to save data entered by users, and in general, to get the result of any process&amp;#010 which must be run on the server for security reasons.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;b&gt;RPC Operations&lt;/b&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 RPC Operations are low-level communications that send and retrieve arbitrary data.  RPC&amp;#010 Operations are supported by the ${isc.DocUtils.linkForRef('class:RPCManager')} class, which when used with the&amp;#010 SmartClient server, provides Java to JavaScript ${isc.DocUtils.linkForRef('attr:RPCRequest.data','2-way translation')} of&amp;#010 basic data structures.  The RPCManager also provides a mechanism for client-side code to be&amp;#010 invoked when an operation completes (called a &quot;callback&quot;).  RPC Operations are intended for&amp;#010 unstructured data; data that is ultimately destined for display in SmartClient components&amp;#010 will generally come from DataSource operations.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;b&gt;DataSource Operations and DataBound Components&lt;/b&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 A ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Operation')} is an operation that acts on a&amp;#010 DataSource, performing one of the basic actions that makes sense on a set of similar&amp;#010 records: &quot;fetch&quot;, &quot;add&quot;, &quot;update&quot; or &quot;remove&quot;.  Unlike RPC operations, DataSource operations&amp;#010 have specific request data and response data, for example, in the &quot;fetch&quot; DataSource&amp;#010 operation, the request data is expected to be search criteria, and the response data is&amp;#010 expected to be a list of matching DataSource records.  Although DataSource operations can be&amp;#010 invoked manually from the client, they are generally automatically invoked by DataBound&amp;#010 components.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 DataBound Components are components that understand DataSources.  Databound components&amp;#010 configured with a DataSource are able to offer complete user interactions without further&amp;#010 configuration (extensive customization is also supported).&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For example, given a DataSource, the ListGrid component supports a sophisticated inline&amp;#010 editing interaction, complete with automatically chosen editors like date pickers for dates,&amp;#010 type-aware validation, saving, and error reporting. &amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 A DataBound component supporting an interaction such as inline editing will automatically&amp;#010 submit DataSource operations to the server at appropriate times.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;b&gt;DataSource Operation Integration&lt;/b&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Integrating DataSource operations with an existing system is best approached by implementing&amp;#010 the the 4 basic DataSource operations in terms of your existing object model or data store.&amp;#010 With these 4 operations implemented, the entire range of user interactions supported by&amp;#010 SmartClient ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable components')} becomes applicable to&amp;#010 your server.  At that point authentication, authorization and other business rules can be&amp;#010 layered on top.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;b&gt;Built-in SQL Connectivity&lt;/b&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The SmartClient server comes with built-in SQL connectivity, so that SQL-based DataSources&amp;#010 can be created and used without any server-side code needing to be written.  In contrast,&amp;#010 any operation which uses custom server-side code is called a &quot;Custom Operation&quot;.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Generally it makes sense to prototype an application using Built-in DataSource Operations,&amp;#010 then on the backend, create Custom DataSource Operations to retrieve data from the data&amp;#010 store you will use in production.  As you switch from using Built-in DataSources to Custom&amp;#010 Operations, no client-side code changes will be required, because the client cares only&amp;#010 about the DataSource definition, not the data store which the data is ultimately retrieved&amp;#010 from.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;b&gt;Data Managers: ResultSet and ResultTree&lt;/b&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Data Managers manage datasets retrieved from DataSources.  Data Managers are automatically&amp;#010 created by DataBound components, but can be created directly when more control is needed.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Data Managers provide load-on-demand for datasets too large to be loaded on the client,&amp;#010 automatically invoking DataSource operations as necessary to retrieve data as it is&amp;#010 requested, and optionally fetching ahead to anticipate further requests.   Data Managers&amp;#010 will automatically perform actions locally when it is possible, for example, a sort&amp;#010 action can be performed locally with a complete cache.  Data Managers also automatically&amp;#010 manage the consistency of the client-side cache, observing update operations performed&amp;#010 against DataSources and integrating updated rows automatically.&amp;#010 &lt;br&gt;&lt;br&gt;" name="operations" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <refs>method:DataSource.fetchData</refs>
    <refs>method:DataSource.filterData</refs>
    <refs>method:DataSource.addData</refs>
    <refs>method:DataSource.updateData</refs>
    <refs>method:DataSource.removeData</refs>
    <refs>classMethod:RPCManager.handleError</refs>
    <refs>attr:DSRequest.operationId</refs>
    <refs>attr:DataBoundComponent.fetchOperation</refs>
    <refs>attr:DataBoundComponent.updateOperation</refs>
    <refs>attr:DataBoundComponent.addOperation</refs>
    <refs>attr:DataBoundComponent.removeOperation</refs>
<seeAlso ref="class:RPCManager" description="for RPC Operations"></seeAlso>
<seeAlso ref="interface:DataBoundComponent" description="for information on DataBound Components"></seeAlso>
<seeAlso ref="group:dataSourceOperations" description="for more information on DataSource Operations"></seeAlso>
<seeAlso ref="group:clientServerIntegration" description="for information on integrating DataSource Operations with existing servers"></seeAlso>
<seeAlso ref="method:DataSource.fetchData" description="for manually invoked DataSource operations"></seeAlso>
<seeAlso ref="class:ResultSet" description="for managing lists of records"></seeAlso>
<seeAlso ref="class:ResultTree" description="for managing trees of records"></seeAlso>
</docItem>
<docItem ref="method:ValuesManager.handleHiddenValidationErrors" flags="A" description=" Method to display validation error messages for a valuesManager when there is not&amp;#010 currently visible form item displaying the errors.&amp;#010 This will be called when validation fails for&lt;br&gt;&amp;#010 - a field in a hidden or undrawn member form&lt;br&gt;&amp;#010 - a hidden field in a visible member form&lt;br&gt;&amp;#010 - for databound ValuesManagers, a datasource field with specified validators, but not&amp;#010   associated item in any member.&lt;br&gt;&amp;#010 Implement this to provide custom validation error handling for these fields.&lt;br&gt;&amp;#010 By default hidden validation errors will be logged as warnings in the developerConsole.&amp;#010 Return false from this method to suppress that behavior.&amp;#010" name="handleHiddenValidationErrors" type="method" definingClass="class:ValuesManager">
<params description="The set of errors returned - this is an object of the form&lt;br&gt;                      &amp;nbsp;&amp;nbsp;&lt;code&gt;{fieldName:errors}&lt;/code&gt;&lt;br&gt;&amp;#010                      Where the 'errors' object is either a single string or an array&amp;#010                      of strings containing the error messages for the field." optional="false" name="errors" type="object">
</params>
</docItem>
<docItem ref="group:menuItems" name="menuItems" type="group">
</docItem>
<docItem ref="classMethod:FileLoader.cacheImgStates" flags="" description="&amp;#010 Caches a set of state images derived from a base image.  This is useful for caching a set of&amp;#010 images for a single component.  For example this code:&amp;#010 &lt;pre&gt;&amp;#010 isc.FileLoader.cacheImgStates(&quot;/isomorphic/skins/SmartClient/images/TreeGrid/opener.png&quot;,&amp;#010                               &quot;closed,opening,opened&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Will cause the following images to be cached:&amp;#010 &lt;pre&gt;&amp;#010 /isomorphic/skins/SmartClient/images/TreeGrid/opener_closed.png&amp;#010 /isomorphic/skins/SmartClient/images/TreeGrid/opener_opening.png&amp;#010 /isomorphic/skins/SmartClient/images/TreeGrid/opener_opened.png&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cacheImgStates" type="classMethod" definingClass="class:FileLoader">
<seeAlso ref="classMethod:FileLoader.cacheStretchImgStates">
</seeAlso>
<params description="List of base image URLs from which stateful names are to be                                    derived.  This can either be a&amp;#010                                    string with comma separated baseURLs or an Array of baseURLs." optional="false" name="baseURLs" type="String or Array">
</params>
<params description="List of states to load.  If none specified, The following                                    default list will be used:&amp;#010                                    &quot;Down,Over,Selected,Selected_Down,Selected_Over&quot;.  This can&amp;#010                                    either be a string with comma separated states or an Array&amp;#010                                    of states." optional="true" name="states" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified URLs                                      has completed caching." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="attr:TabSet.bottomEdgeOffsets" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeOffsets&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeOffsets&lt;/code&gt;, &lt;code&gt;topEdgeOffsets&lt;/code&gt; and &lt;code&gt;bottomEdgeOffsets&lt;/code&gt; &amp;#010 propertes allow the offsets of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="bottomEdgeOffsets" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:StretchImg.showTitle" flags="IRWA" description="Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be &amp;#010 displayed for this component.&lt;br&gt;&amp;#010 Applies to Image-based components only, where the title will be rendered out in a label&amp;#010 floating over the component" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImg">
</docItem>
<docItem ref="attr:DataSource.dbName" flags="IR" description="For DataSources using the ${isc.DocUtils.linkForRef('group:sqlDataSource','SmartClient SQL engine')} for&amp;#010 persistence, which database configuration to use.  Database configurations can be&amp;#010 created using the &quot;Databases&quot; tab in the Developer Console.  If unset, the default&amp;#010 database configuration is used (which also settable using the &quot;Databases&quot; tab)." name="dbName" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>serverDataIntegration</groups>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ListGrid.loadingDataMessageStyle" flags="IRW" description="The CSS style name applied to the loadingDataMessage string if displayed." name="loadingDataMessageStyle" valueType="CSSStyleName" defaultValue="&quot;loadingDataMessage&quot;" type="attr" definingClass="class:ListGrid">
    <groups>loadingDataMessage</groups>
</docItem>
<docItem ref="method:Array.and" flags="" description=" Returns true if all values between the start and end indices are true.&amp;#010&amp;#010" name="and" type="method" definingClass="object:Array">
<params description="optional start index (default is 0)" optional="true" name="start" type="number">
</params>
<params description="optional end index (default is list.length)" optional="true" name="end" type="number">
</params>
<returns description="all of the items in the array are true" type="boolean"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="attr:ImgButton.labelVPad" flags="IRW" description="Vertical padding to be applied to this widget's label. If this value is null, &amp;#010 the label will be given a vertial padding of zero.&amp;#010 &lt;p&gt;&amp;#010 The specified amount of padding is applied to the top and bottom edges of the button, so&amp;#010 the total amount of padding is 2x the specified value." name="labelVPad" valueType="number" defaultValue="null" type="attr" definingClass="class:ImgButton">
</docItem>
<docItem ref="attr:Canvas.animateHideTime" flags="IRWA" description="Default time for performing an animated hide.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateHideTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:FormItem.setValueIcons" flags="" description=" Set the valueIcons for this item&amp;#010" name="setValueIcons" type="method" definingClass="class:FormItem">
<params description="mapping of logical values for this item to icon src URLs" optional="false" name="map" type="object">
</params>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="group:dataSourceDeclaration" title="Creating DataSources" description="DataSources can be specified in XML format, in which case the ISC server is used to load the&amp;#010 DataSource in a JSP file, or DataSources can be directly created on the client via&amp;#010 JavaScript.&amp;#010 &lt;P&gt;&amp;#010 Whether a DataSource is specified in XML or JS, identical requests will ultimately be&amp;#010 submitted to the server, so the server integration pattern is the same.  However,&amp;#010 DataSources created in XML are understood by the ISC server, allowing shared validation&amp;#010 rules declared in the DataSource to be executed automatically on both the client and&amp;#010 server. Further, for prototyping purposes, the ISC server supports SQL connectivity for&amp;#010 DataSources specified in XML. This SQL connectivity allows complete database-driven&amp;#010 applications to be created without writing any server integration code.&amp;#010 &lt;P&gt;&amp;#010 DataSources created on the client use the same style of creation as DataBound components:&amp;#010 &lt;pre&gt;&amp;#010    DataSource.create({&amp;#010        ID:&quot;supplyItem&quot;,&amp;#010        fields:[&amp;#010            {name:&quot;itemName&quot;, ... }&amp;#010            ...&amp;#010        ]&amp;#010    });&amp;#010 &lt;/pre&gt;&amp;#010 Reference for all properties that can be set for DataSources, their fields and validators is&amp;#010 given in the ${isc.DocUtils.linkForRef('class:DataSource')} class reference.&amp;#010 &lt;P&gt;&amp;#010 XML DataSources use a direct analogue of this format:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;DataSource ID=&quot;supplyItem&quot;&amp;gt;&amp;#010         &amp;lt;fields&amp;gt;&amp;#010             &amp;lt;field name=&quot;itemName&quot; type=&quot;text&quot; title=&quot;Item&quot;/&amp;gt;&amp;#010             &amp;lt;field name=&quot;SKU&quot;      type=&quot;text&quot; title=&quot;SKU&quot;&amp;gt;&amp;#010                 &amp;lt;validators&amp;gt;&amp;#010                     &amp;lt;validator type=&quot;integerRange&quot; ... /&amp;gt;&amp;#010                 &amp;lt;/validators&amp;gt;&amp;#010             &amp;lt;/field&amp;gt;&amp;#010         &amp;lt;/fields&amp;gt;&amp;#010     &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 XML DataSources are loaded via a special JSP tag supported by the ISC Server:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;%&amp;#64; taglib uri=&quot;/WEB-INF/iscTaglib.xml&quot; prefix=&quot;isomorphic&quot; %&amp;gt;&amp;#010     ...&amp;#010     &amp;lt;SCRIPT&amp;gt;&amp;#010     &amp;lt;isomorphic:loadDS ID=&quot;supplyItem&quot;/&amp;gt;&amp;#010     &amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 When loading an XML DataSource, by default, the ISC Server will look for a file named&amp;#010 &lt;code&gt;&amp;lt;dataSourceId&amp;gt;.ds.xml&lt;/code&gt; in the &lt;code&gt;/shared/ds&lt;/code&gt; subdirectory under&amp;#010 webroot.  The location of this directory can be changed, or individual DataSources can be&amp;#010 placed in arbitrary locations.  For more information, see&amp;#010 &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt;.&amp;#010 &lt;p&gt;" name="dataSourceDeclaration" type="group">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
<seeAlso ref="class:DataSource">
</seeAlso>
<seeAlso ref="group:loadDSTag">
</seeAlso>
</docItem>
<docItem ref="attr:RPCRequest.actionURL" flags="IRW" description="Overrides RPCManager.actionURL for this request only.  If you're using queuing, note that queues&amp;#010 as per-URL - in other words all RPCRequests in a queue must go to a single URL.  If you attempt&amp;#010 to send a request with an actionURL that is different from those already in the queue, it&amp;#010 will be sent to the server separately, ahead of the queue,  and a warning will be logged to&amp;#010 the Developer Console." name="actionURL" valueType="URL" defaultValue="RPCManager.actionURL" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.actionURL">
</seeAlso>
</docItem>
<docItem ref="attr:TabSet.paneContainer" flags="R" description="Container where the component specified by ${isc.DocUtils.linkForRef('attr:Tab.pane')} is shown.&amp;#010 &lt;P&gt;&amp;#010 Note: paneContainer and showEdges:true for rounded tabsets: you can enable decorative&amp;#010 image-based edges on the paneContainer by setting ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','showEdges:true')}&amp;#010 via paneContainerDefaults (to skin all tabsets) or paneContainerProperties (to use&amp;#010 edges on one instance).  In this structure, the ${isc.DocUtils.linkForRef('group:baseLine')} should use media&amp;#010 that matches the appearance of the decorative edges and fully overlaps the edge of the&amp;#010 paneContainer that it is adjacent to.  In the most typical appearance (symmetric edges&amp;#010 on all 4 sides), both ${isc.DocUtils.linkForRef('attr:TabBar.baseLineCapSize')} and ${isc.DocUtils.linkForRef('attr:TabBar.baseLineThickness')}&amp;#010 match the ${isc.DocUtils.linkForRef('attr:Canvas.edgeSize','edgeSize')} set on the paneContainer.  See the&amp;#010 load_skin.js file for the &quot;SmartClient&quot; skin for an example of setting all relevant&amp;#010 properties.&amp;#010 &lt;P&gt;&amp;#010 To disable edges for a particular TabSet, which you may want to do for a TabSet that&amp;#010 is already within a clearly defined container, configure the paneContainer to show only&amp;#010 it's top edge:&amp;#010 &lt;pre&gt;&amp;#010      paneContainerProperties : { customEdges:[&quot;T&quot;] },&amp;#010 &lt;/pre&gt;&amp;#010 To completely flatten even the top edge of the TabSet:&amp;#010 &lt;pre&gt;&amp;#010      paneContainerProperties : { customEdges:[&quot;T&quot;] },&amp;#010      tabBarProperties :{ baseLineCapSize:0 },&amp;#010 &lt;/pre&gt;&amp;#010 This &quot;flattens&quot; the baseLine so that only the center image is used." name="paneContainer" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="classMethod:Log.setDefaultPriority" flags="" description=" Set the default priority of messages that will be visible.&amp;#010&amp;#010" name="setDefaultPriority" type="classMethod" definingClass="class:Log">
<params description="priority level to set" optional="false" name="priority" type="LogPriority">
</params>
<params description="Optional ISC class or instance - if passed the default priority will be set for logging &amp;#010      occurring on the class or instance only." optional="true" name="object" type="Class or Instance object">
</params>
</docItem>
<docItem ref="method:Canvas.dragStop" flags="A" description=" Executed when the mouse button is released at the end of the drag. Your widget can&amp;#010 use this opportunity to fire code based on the last location of the drag or reset any&amp;#010 visual state that was sent.&amp;#010&amp;#010" name="dragStop" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to cancel drag interaction." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:TreeGrid.rowClick" flags="" description="&amp;#010 This override to ${isc.DocUtils.linkForRef('method:ListGrid.rowClick')}.  This implementation calls through to the&amp;#010 ${isc.DocUtils.linkForRef('method:TreeGrid.nodeClick')}, ${isc.DocUtils.linkForRef('method:TreeGrid.folderClick')}, ${isc.DocUtils.linkForRef('method:TreeGrid.leafClick')} methods, as&amp;#010 appropriate unless the click was on the expand/collapse control of a folder - in which case&amp;#010 those callbacks are not fired.&amp;#010 &lt;p&gt;&amp;#010 Do not override this method unless you need a rowClick callback that fires even when the&amp;#010 user clicks on the expand/collapse control.  If you do override this method, be sure to call&amp;#010 &lt;code&gt;return this.Super(&quot;rowClick&quot;, arguments);&lt;/code&gt; at the end of your override to&amp;#010 preserver other handler that are called from the superclass (for example,&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')}.&amp;#010 &lt;p&gt;&amp;#010&amp;#010" name="rowClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.nodeClick">
</seeAlso>
<seeAlso ref="method:TreeGrid.folderClick">
</seeAlso>
<seeAlso ref="method:TreeGrid.leafClick">
</seeAlso>
<seeAlso ref="method:ListGrid.recordClick">
</seeAlso>
<params description="record that was clicked on" optional="false" name="record" type="TreeNode">
</params>
<params description="index of the row where the click occurred" optional="false" name="recordNum" type="number">
</params>
<params description="index of the col where the click occurred" optional="false" name="fieldNum" type="number">
</params>
</docItem>
<docItem ref="attr:FormItem.valueIconLeftPadding" flags="IRW" description="If we're showing a value icon, this attribute governs the amount of space between the &amp;#010 icon and the left edge of the form item cell" name="valueIconLeftPadding" valueType="number" defaultValue="0" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueIcons">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ListGrid.fields" description="An array of field objects, specifying the order, layout, formatting, and&amp;#010 sorting behavior of each field in the listGrid object.  In ListGrids, the fields&amp;#010 array specifies columns.  Each field in the fields array is a ListGridField object.&amp;#010 &lt;p&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is also set, this value acts as a set of overrides as&amp;#010 explained in ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}." name="fields" valueType="Array of ListGridField" defaultValue="null" definingClass="class:ListGrid">
    <setter>setFields</setter>
<seeAlso ref="object:ListGridField">
</seeAlso>
<seeAlso ref="method:ListGrid.setFields">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('listGridFields')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('mergedFields')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:Button.align" flags="IRW" description="Horizontal alignment of this component's title." name="align" valueType="Alignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:Button">
    <setter>setAlign</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DynamicForm.validateData" flags="" description="&amp;#010 Perform validation on the client and the server.&amp;#010&amp;#010" name="validateData" type="method" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="attr:ViewLoader.httpMethod" flags="IRW" description="Selects the HTTP method that will be used when fetching content.  Valid values are &quot;POST&quot;&amp;#010 and &quot;GET&quot;." name="httpMethod" valueType="String" defaultValue="&quot;GET&quot;" type="attr" definingClass="class:ViewLoader">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:SelectItem.hiliteColor" deprecated="As of SmartClient version 5.5, if ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} is true,  styling will be updated for this form item on focus. The hiliting effect can therefore&amp;#010  be achieved via ${isc.DocUtils.linkForRef('attr:SelectItem.textBoxStyle')} and ${isc.DocUtils.linkForRef('attr:SelectItem.controlStyle')} &amp;#010  instead." flags="IRWA" description="Background color to apply to the select item's selected value when the SelectItem &amp;#010 recieves focus, if &lt;code&gt;hiliteOnFocus&lt;/code&gt; is true." name="hiliteColor" valueType="string" defaultValue="&quot;#316AC5&quot;" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="attr:Facet.summaryTitle" flags="IR" description="title for facet summary." name="summaryTitle" valueType="String" defaultValue="cubeGrid.summaryTitle" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="classMethod:isc.getIconLeft" flags="A" description="  Returns the (offset) left-coordinate of an icon within its containing widget.&amp;#010" name="getIconLeft" type="method" definingClass="class:isc">
<params description="icon definition" optional="false" name="icon" type="object">
</params>
<returns description="icon left position in px" type="number"></returns>
</docItem>
<docItem ref="method:ListGrid.cancelEditing" flags="" description="&amp;#010  Cancel the current edit without saving.&amp;#010&amp;#010" name="cancelEditing" type="method" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="group:gridHeader" description="Properties and methods related to the ListGrid header. ListGrid headers are implemented&amp;#010 as a ${isc.DocUtils.linkForRef('class:Toolbar')} of buttons shown at the top of the ListGrid &amp;#010 (one button per column).&lt;br&gt;&amp;#010 The toolbar header provides UI for interacting with the ListGrid fields directly (sorting,&amp;#010 resizing, reordering columns, etc)." name="gridHeader" type="group">
    <refs>method:ListGrid.setHeaderHeight</refs>
    <refs>method:ListGrid.setShowHeader</refs>
    <refs>method:ListGrid.displayHeaderContextMenu</refs>
    <refs>method:ListGrid.getHeaderContextMenuItems</refs>
    <refs>attr:ListGrid.header</refs>
    <refs>attr:ListGrid.headerHeight</refs>
    <refs>attr:ListGrid.showHeader</refs>
    <refs>attr:ListGrid.headerBarStyle</refs>
    <refs>attr:ListGrid.headerBackgroundColor</refs>
    <refs>attr:ListGrid.headerButtonConstructor</refs>
    <refs>attr:ListGrid.headerBaseStyle</refs>
    <refs>attr:ListGrid.headerTitleStyle</refs>
    <refs>attr:ListGrid.headerButtonDefaults</refs>
    <refs>attr:ListGrid.headerButtonProperties</refs>
    <refs>attr:ListGrid.sorterConstructor</refs>
    <refs>attr:ListGrid.sorterDefaults</refs>
    <refs>attr:ListGrid.sorterProperties</refs>
    <refs>attr:ListGrid.showHeaderContextMenu</refs>
</docItem>
<docItem ref="method:ListGrid.getDrawnRows" flags="" description=" Get the rows that are currently drawn (exist in the DOM), as an array of [firstRowNum,&amp;#010 lastRowNum].  &amp;#010 &lt;P&gt;&amp;#010 The drawn rows differ from the ${isc.DocUtils.linkForRef('method:ListGrid.getVisibleRows','visibleRows')} because of&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio','drawAhead')}.  The drawn rows are the apppropriate range to consider if&amp;#010 you need to, eg, using ${isc.DocUtils.linkForRef('method:ListGrid.refreshCell')} to update all the cells in a column.&amp;#010 &lt;P&gt;&amp;#010 If the grid is undrawn or the ${isc.DocUtils.linkForRef('attr:ListGrid.emptyMessage')} is currently shown, returns&amp;#010 [null,null];&amp;#010&amp;#010" name="getDrawnRows" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="method:Tree.findById" flags="A" description="&amp;#010 Find the node with the specified ID.  Specifically, it returns the node whose idField&amp;#010 matches the id passed to this method. If the tree is using the &quot;parent&quot; modelType, this&amp;#010 lookup will be constant-time.  For all other modelTypes, the tree will be searched&amp;#010 recursively.&amp;#010&amp;#010" name="findById" type="method" definingClass="class:Tree">
<seeAlso ref="attr:Tree.idField">
</seeAlso>
<seeAlso ref="method:Tree.find">
</seeAlso>
<params description="ID of the node to return." optional="false" name="id" type="string">
</params>
<returns description="node with appropriate ID, or null if not found." type="object"></returns>
    <groups>location</groups>
</docItem>
<docItem ref="method:SelectItem.getValueFieldName" flags="A" description=" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.&amp;#010 If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.&amp;#010" name="getValueFieldName" type="method" definingClass="class:SelectItem">
<returns description="fieldName to use a &quot;value field&quot; in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}" type="string"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="classMethod:isc.confirm" flags="" description=" Show a modal dialog with a message, icon, and &quot;OK&quot; and &quot;Cancel&quot; buttons.&amp;#010 &lt;P&gt;&amp;#010 The callback will receive boolean true for an OK button click, or null for a Cancel click or&amp;#010 if the Dialog is dismissed via the close button.&amp;#010 &lt;P&gt;&amp;#010 Note: this does not override the native window.confirm() method.&amp;#010&amp;#010" name="confirm" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Warn">
</seeAlso>
<seeAlso ref="classMethod:isc.warn">
</seeAlso>
<seeAlso ref="method:Dialog.okClick">
</seeAlso>
<seeAlso ref="method:Dialog.cancelClick">
</seeAlso>
<seeAlso ref="classAttr:Dialog.CONFIRM_TITLE">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="Callback to fire when the                                       user clicks a button to dismiss the dialog.&amp;#010                                      This has the single parameter 'value', indicating the &amp;#010                                      value returned by the Warn dialog from 'okClick()' etc." optional="true" name="callback" type="Callback">
</params>
<params description="additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for&amp;#010                                      the Dialog, set properties.buttons to an array of buttons&amp;#010										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }" optional="true" name="properties" type="object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('dialogs')}</examples>
    <groups>Prompting</groups>
</docItem>
<docItem ref="method:Canvas.setOverflow" flags="A" description=" Update the ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} of a Canvas after it has been created.&amp;#010" name="setOverflow" type="method" definingClass="class:Canvas">
<params description="New overflow value." optional="false" name="newOverflow" type="Overflow">
</params>
    <groups>positioning</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Button.addToRadioGroup" flags="" description=" Add this widget to the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 Selecting this widget will then deselect any other StatefulCanvases with the same&amp;#010 radioGroup ID.&amp;#010 StatefulCanvases can belong to only one radioGroup, so this method will remove from &amp;#010 any other radiogroup of which this button is already a member.&amp;#010" name="addToRadioGroup" type="method" definingClass="class:Button">
<params description="- ID of the radiogroup to which this widget should be added" optional="false" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:ListGrid.valueIconRightPadding" flags="IRW" description="How much padding should there be on the right of valueIcons by default" name="valueIconRightPadding" valueType="number" defaultValue="2" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:Log.echo" flags="" description=" Return a short string representation of any object, suitable for viewing by a developer for&amp;#010 debugging purposes.&amp;#010 &lt;P&gt;&amp;#010 If passed an object containing other objects, echo will not recurse into subobjects,&amp;#010 summarizing them instead via echoLeaf().&amp;#010 &lt;P&gt;&amp;#010 NOTE: echo() is used to generate the output shown in the Log window when evaluating an&amp;#010 expression.&amp;#010 &amp;#010" name="echo" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.echoAll">
</seeAlso>
<seeAlso ref="method:Log.echoLeaf">
</seeAlso>
<params description="object to echo" optional="false" name="obj" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
    <groups>debug</groups>
</docItem>
<docItem ref="attr:Canvas.autoShowParent" flags="IRWA" description="If set to true, the widget's parent (if any) will automatically be shown whenever the&amp;#010      widget is shown." name="autoShowParent" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:ResultSet" description="ResultSets are an implementation of the ${isc.DocUtils.linkForRef('interface:List')} interface that automatically fetches &amp;#010 DataSource records when items are requested from the List.  ResultSets provide robust,&amp;#010 customizable, high-performance cache management for ListGrids and other built-in SmartClient&amp;#010 components, and can be used as cache managers by custom components.&amp;#010 &lt;P&gt;&amp;#010 ResultSets manage data paging, that is, loading records in batches as the user navigates&amp;#010 the data set.  A ResultSet will switch to using client-side sorting and filtering when&amp;#010 possible to improve responsiveness and reduce server load.  ResultSets also participate in&amp;#010 automatic cache synchronization, observing operations on DataSources and automatically&amp;#010 updating their caches.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Creation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 A ResultSet can be passed to any component that expects a List, and the List APIs can be&amp;#010 called directly on the ResultSet as long as the caller is able to deal with asynchronous&amp;#010 loading; see ${isc.DocUtils.linkForRef('method:ResultSet.getRange')}.&amp;#010 &lt;P&gt;&amp;#010 Generally ResultSets do not need to be created directly, but are created by DataBound&amp;#010 components as an automatic consequence of calling &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.  &amp;#010 For example, the ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} causes ${isc.DocUtils.linkForRef('attr:ListGrid.data')} to become an&amp;#010 automatically created &lt;code&gt;ResultSet&lt;/code&gt; object.  Automatically created ResultSets&amp;#010 can be customized via properties on ListGrids such as ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')}.  All ResultSets for a given DataSource may also be &amp;#010 customized via setting ${isc.DocUtils.linkForRef('attr:DataSource.resultSetClass')} to the name of a ResultSet &amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','subclass')} in which &amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.addProperties','defaults have been changed')}.&amp;#010 &lt;P&gt;&amp;#010 A ResultSet defaults to using data paging, setting ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.endRow')} in issued dsRequests.  Server code may always return more rows than&amp;#010 the ResultSet requests and the ResultSet will correctly integrate those rows based on&amp;#010 ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}/${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')}.  &amp;#010 Hence the server can always avoid paging mode by simply returning all matching rows.&amp;#010 &lt;P&gt;&amp;#010 A ResultSet can be created directly with just the ID of a ${isc.DocUtils.linkForRef('class:DataSource')}:&amp;#010 &lt;pre&gt;&amp;#010     isc.ResultSet.create({&amp;#010         dataSource : &quot;&lt;i&gt;dataSourceID&lt;/i&gt;&quot;&amp;#010     })&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 Directly created ResultSets are typically used by custom components, or as a means of&amp;#010 managing datasets that will be used by several components.&amp;#010 &lt;P&gt;&amp;#010 When created directly rather than via a dataBoundComponent, a newly created ResultSet will&amp;#010 not issue it's first &quot;fetch&quot; ${isc.DocUtils.linkForRef('class:DSRequest')} until data is accessed (for example, via&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.get','get()')}).  &amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Paging and total dataset length&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 When using data paging, the server communicates the total number of records that match the&amp;#010 current search criteria by setting ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows')}.  The ResultSet will then&amp;#010 return this number from ${isc.DocUtils.linkForRef('method:ResultSet.getLength','getLength()')}, and ListGrids and other&amp;#010 components will show a scrollbar that allows the user to jump to the end of the dataset&amp;#010 directly.&amp;#010 &lt;P&gt;&amp;#010 However, the ResultSet does not require that the server calculate the true length of the&amp;#010 dataset, which can be costly for an extremely large, searchable dataset.  Instead, the&amp;#010 server &lt;i&gt;may&lt;/i&gt; simply advertise a &lt;code&gt;totalRows&lt;/code&gt; value that is one page larger&amp;#010 than the last row loaded.  This results in a UI sometimes called &quot;progressive loading&quot;,&amp;#010 where the user may load more rows by scrolling past the end of the currently loaded rows,&amp;#010 but is not allowed to skip to the end of the dataset.&amp;#010 &lt;P&gt;&amp;#010 No client-side settings are required to enable this mode - it is entirely server-driven.&amp;#010 However, it is usually coupled with ${isc.DocUtils.linkForRef('attr:ListGrid.canSort','disabling sorting')}, since&amp;#010 server-side sorting would also force the server to traverse the entire dataset.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Client-side Sorting and Filtering&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If a ResultSet obtains a full cache for the current set of filter criteria, it will &amp;#010 automatically switch to client-side sorting, and will also use client-side filtering &amp;#010 if the filter criteria are later changed but appear to be &lt;i&gt;more restrictive&lt;/i&gt; than the&amp;#010 criteria in use when the ResultSet obtained a full cache.&amp;#010 &lt;P&gt;&amp;#010 The ${isc.DocUtils.linkForRef('attr:ResultSet.useClientSorting','useClientSorting')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:ResultSet.useClientFiltering','useClientFiltering')} flags can be used to disable&amp;#010 client-side sorting and filtering respectively if these behaviors don't match server-based&amp;#010 sorting and filtering.  However, because client-side sorting and filtering radically improve&amp;#010 responsiveness and reduce server load, it is better to customize the ResultSet so that it&amp;#010 can match server-side sorting and filtering behaviors.&amp;#010 &lt;P&gt;&amp;#010 Sorting behavior is primarily customized via the &quot;sort normalizer&quot; passed to&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.sortByProperty')}, either via direct calls on a standalone ResultSet, or via&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.sortNormalizer')} for a ListGrid-managed ResultSet.&amp;#010 &lt;P&gt;&amp;#010 By default, client-side filtering interprets the ${isc.DocUtils.linkForRef('type:Criteria','criteria')} passed to&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')} as a set of field values that records must match&amp;#010 (similarly to the built-in SQL/Hibernate connectors built into the SmartClient Server).&amp;#010 Custom client-side filtering logic can be implemented by overriding&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter','applyFilter()')}.  Overriding&amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.compareCriteria','compareCriteria()')} allows you to control when the ResultSet&amp;#010 uses client-side vs server-side filtering, and the ResultSet has two default &amp;#010 ${isc.DocUtils.linkForRef('attr:ResultSet.criteriaPolicy','criteria policies')} built-in.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Updates and Automatic Cache Synchronization&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 ResultSets observe any successful &quot;update&quot;, &quot;add&quot; or &quot;remove&quot; dsRequests against their&amp;#010 DataSource, regardless of the component that initiated them.  A ResultSet with a full cache&amp;#010 for the current filter criteria will integrate updates into the cache automatically.&amp;#010 &lt;P&gt;&amp;#010 Updated rows that no longer match the current filter criteria will be removed&amp;#010 automatically.  To prevent this, you can set ${isc.DocUtils.linkForRef('attr:ResultSet.neverDropUpdatedRows')}.&amp;#010 Added rows will similarly be added to the cache only if they match current filter criteria.&amp;#010 &lt;P&gt;&amp;#010 Note that the client-side filtering described above is also used to determine whether &amp;#010 updated or added rows should be in the cache.  If any aspect of automated cache update is&amp;#010 ever incorrect, ${isc.DocUtils.linkForRef('attr:ResultSet.dropCacheOnUpdate','dropCacheOnUpdate')} can be set for the&amp;#010 ResultSet or ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')} can be set for an individual dsResponse.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Data Paging with partial cache&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 When in paging mode with a partial cache, a ResultSet relies on server side sorting, setting &amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.sortBy')} to the current sort field and direction.  In order for the cache to &amp;#010 remain coherant, row numbering must continue to agree between server and client as new&amp;#010 fetches are issued, otherwise, duplicate rows or missing rows may occur.  &amp;#010 &lt;P&gt;&amp;#010 If concurrent modifications by other users are allowed, generally the server should set&amp;#010 ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')} to clear the cache when concurrent modification is&amp;#010 detected.&amp;#010 &lt;P&gt;&amp;#010 In paging mode with a partial cache, any successful &quot;update&quot; or &quot;add&quot; operation may cause&amp;#010 client and server row numbering to become out of sync.  This happens because the update&amp;#010 may affect the sort order, and client and server cannot be guaranteed to match for sets of&amp;#010 records that have equivalent values for the sort field.&amp;#010 &lt;P&gt;&amp;#010 For this reason, after an &quot;add&quot; or &quot;update&quot; operation with a partial cache, the ResultSet&amp;#010 will automatically mark cache for invalidation the next time a fetch operation is performed.&amp;#010 Alternatively, if ${isc.DocUtils.linkForRef('attr:ResultSet.updatePartialCache')} is set to false, the ResultSet will&amp;#010 simply invalidate cache immediately in this circumstance." name="ResultSet" type="class">
    <methods>method:ResultSet.allMatchingRowsCached</methods>
    <methods>method:ResultSet.allRowsCached</methods>
    <methods>method:ResultSet.getValueMap</methods>
    <methods>method:ResultSet.getLength</methods>
    <methods>method:ResultSet.indexOf</methods>
    <methods>method:ResultSet.get</methods>
    <methods>method:ResultSet.getRange</methods>
    <methods>method:ResultSet.lengthIsKnown</methods>
    <methods>method:ResultSet.rowIsLoaded</methods>
    <methods>method:ResultSet.rangeIsLoaded</methods>
    <methods>method:ResultSet.setCriteria</methods>
    <methods>method:ResultSet.getCriteria</methods>
    <methods>method:ResultSet.compareCriteria</methods>
    <methods>method:ResultSet.willFetchData</methods>
    <methods>method:ResultSet.sortByProperty</methods>
    <methods>method:ResultSet.filterLocalData</methods>
    <methods>method:ResultSet.applyFilter</methods>
    <methods>method:ResultSet.invalidateCache</methods>
    <methods>method:ResultSet.transformData</methods>
    <methods>method:ResultSet.dataArrived</methods>
    <methods>method:ResultSet.findAll</methods>
    <methods>method:ResultSet.find</methods>
    <methods>method:ResultSet.findIndex</methods>
    <methods>method:ResultSet.findNextIndex</methods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:ResultSet.fetchMode</attrs>
    <attrs>attr:ResultSet.initialData</attrs>
    <attrs>attr:ResultSet.initialLength</attrs>
    <attrs>attr:ResultSet.allRows</attrs>
    <attrs>attr:ResultSet.resultSize</attrs>
    <attrs>attr:ResultSet.fetchDelay</attrs>
    <attrs>attr:ResultSet.dataSource</attrs>
    <attrs>attr:ResultSet.fetchOperation</attrs>
    <attrs>attr:ResultSet.criteria</attrs>
    <attrs>attr:ResultSet.criteriaPolicy</attrs>
    <attrs>attr:ResultSet.useClientSorting</attrs>
    <attrs>attr:ResultSet.useClientFiltering</attrs>
    <attrs>attr:ResultSet.updateCacheFromRequest</attrs>
    <attrs>attr:ResultSet.dropCacheOnUpdate</attrs>
    <attrs>attr:ResultSet.disableCacheSync</attrs>
    <attrs>attr:ResultSet.neverDropUpdatedRows</attrs>
    <attrs>attr:ResultSet.updatePartialCache</attrs>
    <implementsInterfaces>List</implementsInterfaces>
<seeAlso ref="interface:DataBoundComponent">
</seeAlso>
<seeAlso ref="group:dataBoundComponentMethods">
</seeAlso>
<seeAlso ref="attr:DataSource.resultSetClass" description="to customize all ResultSets for a given DataSource"></seeAlso>
<seeAlso ref="method:ResultSet.getRange" description="for information on handling asynchronous loading"></seeAlso>
</docItem>
<docItem ref="attr:DataSource.serverType" flags="IR" description="For a DataSource stored in .xml format on the ISC server, indicates what server-side&amp;#010 connector to use to execute requests, that is, what happens if you call&amp;#010 dsRequest.execute() in server code." name="serverType" valueType="DSServerType" defaultValue="&quot;generic&quot;" type="attr" definingClass="class:DataSource">
    <groups>serverDataIntegration</groups>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="group:drawing" description="Rendering an object on the page" name="drawing" type="group">
    <refs>method:FormItem.getFieldName</refs>
    <refs>method:FormItem.getTitle</refs>
    <refs>method:FormItem.isDrawn</refs>
    <refs>method:Canvas.isDrawn</refs>
    <refs>method:Canvas.getInnerHTML</refs>
    <refs>method:Canvas.draw</refs>
    <refs>method:Canvas.markForRedraw</refs>
    <refs>method:Canvas.redraw</refs>
    <refs>attr:Canvas.autoDraw</refs>
    <refs>attr:Canvas.redrawOnResize</refs>
</docItem>
<docItem ref="attr:MenuItem.iconHeight" flags="IR" description="The height applied to this item's icon.  The default of &lt;code&gt;16&lt;/code&gt; can be changed&amp;#010 for all MenuItems by overriding ${isc.DocUtils.linkForRef('attr:Menu.iconHeight')}." name="iconHeight" valueType="number" defaultValue="16" type="attr" definingClass="object:MenuItem">
    <groups>menuIcons</groups>
</docItem>
<docItem ref="attr:FormItem.hoverDelay" flags="IRWA" description="If specified, this is the number of miliseconds to wait between the user rolling over &amp;#010 this form item, and triggering any hover action for it.&lt;br&gt;&amp;#010 If not specified &lt;code&gt;this.form.itemHoverDelay&lt;/code&gt; will be used instead." name="hoverDelay" valueType="number" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:List.add" flags="" description=" Add an object to this list, at the end&amp;#010&amp;#010" name="add" type="method" definingClass="interface:List">
<params description="object to add" optional="false" name="object" type="any">
</params>
<returns description="pointer to the object passed in" type="any"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:DSRequest.headerData" flags="IRW" description="For DataSources using SOAP messaging with a WSDL web service, data to be serialized to form&amp;#010 SOAP headers, as a map from the header part name to the data.  See&amp;#010 ${isc.DocUtils.linkForRef('attr:WSRequest.headerData')} for more information.&amp;#010 &lt;P&gt;&amp;#010 SOAP headers typically contain request metadata such as a session id for authentication, and&amp;#010 so &lt;code&gt;dsRequest.headerData&lt;/code&gt; is typically populated by&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}, or, for data that applies to every request sent to the&amp;#010 server, by ${isc.DocUtils.linkForRef('method:WebService.getHeaderData')}." name="headerData" valueType="Object" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="method:Canvas.setPageLeft" flags="" description=" Set the page-relative left coordinate of this widget.&amp;#010 &amp;#010" name="setPageLeft" type="method" definingClass="class:Canvas">
<params description="new left coordinate in pixels" optional="false" name="left" type="number">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:ListGrid.setFields" flags="A" description=" Sets the fields array and/or field widths to newFields and sizes, respectively.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 If newFields is specified, it is assumed that the new fields may have nothing in common with&amp;#010 the old fields, and the component is substantially rebuilt.  Consider the following methods&amp;#010 for more efficient, more incremental changes: resizeField, reorderField, showField,&amp;#010 hideField, setFieldProperty.&amp;#010&amp;#010" name="setFields" type="method" definingClass="class:ListGrid">
<params description="array of fields to draw" optional="true" name="newFields" type="List of ListGridField">
</params>
</docItem>
<docItem ref="method:PickList.getOptionDataSource" flags="" description=" Pick-lists can derive their data directly from a valueMap, or retrieve data from a &amp;#010 dataSource to display as options.&amp;#010 &amp;#010 This method will return the dataSource used to populate the pickList, or null if &amp;#010 none specified (implies this list will derive its data from the valueMap for the item).&amp;#010 Default implementation  will return ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} if specified,&amp;#010 otherwise if this is a field with a specified &lt;code&gt;foreignKey&lt;/code&gt; in a databound&amp;#010 form, returns the dataSource for the &lt;code&gt;foreignKey&lt;/code&gt;.&amp;#010 Otherwise picks up &lt;code&gt;this.form.dataSource&lt;/code&gt; if set.&amp;#010&amp;#010" name="getOptionDataSource" type="method" definingClass="interface:PickList">
<returns description="DataSource to use for fetching options" type="DataSource"></returns>
</docItem>
<docItem ref="type:Callback" description="A &lt;code&gt;Callback&lt;/code&gt; is an arbitrary action to be fired - usually passed into a &amp;#010 method to be fired asynchronously as a notificaction of some event.&lt;br&gt;&amp;#010 The &lt;code&gt;callback&lt;/code&gt; can be defined in the following formats:&lt;ul&gt;&amp;#010 &lt;li&gt;a function&lt;/li&gt;&amp;#010 &lt;li&gt;A string containing an expression to evaluate&lt;/li&gt;&amp;#010 &lt;li&gt;An object with the following properties:&lt;br&gt;&amp;#010     - target: fire in the scope of this target - when the action fires,&amp;#010       the target will be available as &lt;code&gt;this&lt;/code&gt;.&lt;br&gt;&amp;#010     - methodName: if specified we'll check for a method on the target object with this &amp;#010       name.&lt;br&gt;&amp;#010  &lt;/li&gt;&lt;/ul&gt;&amp;#010 &lt;code&gt;Callbacks&lt;/code&gt; are fired via the ${isc.DocUtils.linkForRef('classMethod:Class.fireCallback')} method, which allows&amp;#010 named parameters to be passed into the callback at runtime. If the Callback was specified&amp;#010 as a string of script, these parameters are available as local variables at eval time.&lt;br&gt;&amp;#010 For specific SmartClient methods that make use of &lt;code&gt;Callback&lt;/code&gt; objects, see&amp;#010 local documentation for information on parameters and scope." name="Callback" type="type">
</docItem>
<docItem ref="method:ListGridField.formatCellValue" flags="" description=" Return the HTML to display in cells of this field.&amp;#010 &lt;P&gt;&amp;#010 Given the raw value for this field as taken from the record Formatter to apply to the&amp;#010 static values displayed in cells for this field.&amp;#010 &lt;P&gt;&amp;#010 &lt;i&gt;Example usage&lt;/i&gt;: formatting a currency value stored in cents (so &quot;100&quot; to &quot;$1.00&quot;)&lt;br&gt;&amp;#010 The value passed to this method is the raw value for the cell.&lt;br&gt;&amp;#010 Takes precedence over &lt;code&gt;formatCellValue&lt;/code&gt; defined at the grid level for cells&amp;#010 in this field.&amp;#010 &lt;P&gt;&amp;#010 Note: this formatter will not be applied to the values displayed in cells being edited.&amp;#010 The ${isc.DocUtils.linkForRef('method:ListGridField.formatEditorValue','formatEditorValue()')} is provided for that purpose.&amp;#010&amp;#010" name="formatCellValue" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.formatCellValue">
</seeAlso>
<seeAlso ref="method:ListGridField.formatEditorValue">
</seeAlso>
<params description="raw value for the cell, from the record for the row" optional="false" name="value" type="any">
</params>
<params description="Record object for the cell. Note: If this is a new row that has not been saved, in an &amp;#010   editable grid, it has no associated record object. In this case the edit values will&amp;#010   be passed in as this parameter (see ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')})" optional="false" name="record" type="ListGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<params description="the ListGrid displaying the cell" optional="false" name="grid" type="ListGrid">
</params>
<returns description="HTML to display in the cell" type="String"></returns>
    <examples>${isc.DocUtils.linkForExampleId('formatValues')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:ListGrid.dataSource" flags="IRW" description="The DataSource that this component should bind to for default fields and for performing&amp;#010 ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.&amp;#010 &lt;P&gt;&amp;#010 Can be specified as either a DataSource instance or the String ID of a DataSource." name="dataSource" valueType="DataSource or ID" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('dataSourceFields')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="method:PickList.getClientPickListData" flags="A" description=" Returns the set of data to be displayed in this item's PickList.&amp;#010 &lt;P&gt;&amp;#010 This method will be called for non-databound form items implementing the PickList&amp;#010 interface.  The default implementation will derive data from the item's valueMap - &amp;#010 can be overridden to allow a custom set of options to be displayed.&amp;#010 &lt;P&gt;&amp;#010 Note that for PickLists that filter data based on user input&amp;#010 (${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')}), this method should return the data &lt;b&gt;before&amp;#010 filtering&lt;/b&gt;.  To customize the data returned after filtering, override&amp;#010 ${isc.DocUtils.linkForRef('method:PickList.filterClientPickListData')} instead.&amp;#010 &lt;P&gt;&amp;#010 As an example, for a formItem with ${isc.DocUtils.linkForRef('attr:PickList.valueField')} set to &quot;valueFieldName&quot;, the&amp;#010 default implementation would take a valueMap like the following:&amp;#010 &lt;pre&gt;&amp;#010     valueMap: { value1: &quot;display 1&quot;, value2: &quot;display 2&quot; }&amp;#010 &lt;/pre&gt;&amp;#010 .. and returning the following set of records: &amp;#010 &lt;pre&gt;&amp;#010     [&amp;#010          { valueFieldName : &quot;value1&quot; },&amp;#010          { valueFieldName : &quot;value2&quot; }&amp;#010     ]&amp;#010 &lt;/pre&gt;&amp;#010 Due to the valueMap, these records will appear as a two row pickList displayed as&amp;#010 &quot;display 1&quot; and &quot;display 2&quot;.&amp;#010&amp;#010" name="getClientPickListData" type="method" definingClass="interface:PickList">
<returns description="Array of record objects to be displayed in the           pickList. Note that when a user picks a record from the list, the value of the&amp;#010           field matching &lt;code&gt;item.valueField&lt;/code&gt; will be picked. Also note that the&amp;#010           fields to be displayed can be customized via &lt;code&gt;item.pickListFields&lt;/code&gt;" type="Array of ListGridRecord"></returns>
</docItem>
<docItem ref="type:listGridFieldState" description="An object containing the stored presentation information for the fields of a listGrid.&amp;#010 Information contained in a &lt;code&gt;listGridFieldState&lt;/code&gt; object includes the &amp;#010 visibility and widths of the listGrid's fields.&lt;br&gt;&amp;#010 Note that this object is a JavaScript string, and may be stored (for example) as a blob &amp;#010 on the server for state persistence across sessions." name="listGridFieldState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="method:ValuesManager.hasFieldErrors" flags="" description=" Are there any errors associated with a field in this valuesManager?&amp;#010" name="hasFieldErrors" type="method" definingClass="class:ValuesManager">
<params description="field to check for errors" optional="false" name="fieldName" type="string">
</params>
<returns description="returns true if there are any oustanding validation errors, false                   otherwise." type="boolean"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:CubeGrid.autoSizeHeaders" flags="IRW" description="Automatically size row headers to fit wrapped text" name="autoSizeHeaders" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="group:loadDMIStubsTag" title="&amp;lt;isomorphic:loadDMIStubs&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 Creates global bindings for all serverObjects defined in the &lt;code&gt;rpcBindings&lt;/code&gt;&amp;#010 section .app.xml file specified by the &lt;code&gt;ID&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt; attribute of&amp;#010 this tag.  Once you've loaded your &lt;code&gt;rpcBindings&lt;/code&gt; using this tag, you can call&amp;#010 methods on the &lt;code&gt;ServerObjects&lt;/code&gt; defined there directly.  For example, you can load&amp;#010 the example.app.xml (located in /shared/app directory of the webRoot of the SDK) like this:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadDMIStubs ID=&quot;example&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Whereas using ${isc.DocUtils.linkForRef('classMethod:DMI.call')} you would have had to invoke the &lt;code&gt;getTimeStamp&lt;/code&gt;&amp;#010 method like this:&amp;#010 &lt;pre&gt;&amp;#010 DMI.call(&quot;example&quot;, &quot;GetTimeStampDMI&quot;, &quot;getTimeStamp&quot;, new Date(), &quot;alert(data)&quot;;&amp;#010 &lt;/pre&gt;&amp;#010 Having loaded the stubs of the &lt;code&gt;example&lt;/code&gt; .app.xml, you can then call&amp;#010 &lt;code&gt;getTimeStamp&lt;/code&gt; like this:&amp;#010 &lt;pre&gt;&amp;#010 GetTimeStampDMI.getTimeStamp(new Date(), &quot;alert(data)&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 or this:&amp;#010 &lt;pre&gt;&amp;#010 GetTimeStamp.getTimeStamp({&amp;#010     arguments: [new Date()],&amp;#010     callback: &quot;alert(data)&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 or this:&amp;#010 &lt;pre&gt;&amp;#010 GetTimeStamp.call({&amp;#010     methodName: &quot;getTimeStamp&quot;,&amp;#010     arguments: [new Date()],&amp;#010     callback: &quot;alert(data)&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 As with ${isc.DocUtils.linkForRef('classMethod:DMI.call')}, the last argument must be the callback - if you don't want a&amp;#010 callback, simply specify &lt;code&gt;null&lt;/code&gt; as the callback.  The name of the global binding&amp;#010 created will be the same as the ${isc.DocUtils.linkForRef('attr:ServerObject.ID')} or the non-qualified name of the&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.className')} (java namespace, if any, will be stripped).&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;ID or name&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: String - name of .app.xml file to load (minus the .app.xml extension)&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the name of the file that contains the rpcBindings to load.&amp;#010 UI files are located in &lt;code&gt;[webroot]/shared/app&lt;/code&gt; by default.  This location is&amp;#010 changeable in &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt; by setting the config&amp;#010 parameter &lt;code&gt;project.apps&lt;/code&gt; to the directory where your .app.xml files are located.   &amp;#010 We recommend that for prototying, at least, you use the default directory." name="loadDMIStubsTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="class:DMI">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ListGridField.valueIconWidth" flags="IRW" description="Width for value icons for this listGrid field.&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}, ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconWidth')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}." name="valueIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:FormItem.left" flags="IRWA" description="Left coordinate of this item in pixels.  Applies only when the containing DynamicForm&amp;#010 sets &lt;code&gt;itemLayout:&quot;absolute&quot;&lt;/code&gt;." name="left" valueType="integer" defaultValue="0" type="attr" definingClass="class:FormItem">
    <setter>setLeft</setter>
</docItem>
<docItem ref="group:wsdlBinding" title="WSDL Binding" description="SmartClient supports automated integration with WSDL-described web services.  This support&amp;#010 consists of:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; creation of SOAP XML messages from JavaScript application data, with automatic&amp;#010 namespacing, and support for both &quot;literal&quot; and &quot;encoded&quot; SOAP messaging, and &quot;document&quot; and&amp;#010 &quot;rpc&quot; WSDL-SOAP bindings&amp;#010 &lt;li&gt; automatic decode of SOAP XML messages to JavaScript objects, with strong typing (eg an&amp;#010 XML schema &quot;date&quot; type becomes a JavaScript Date object)&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','import of XML Schema')} (contained in WSDL, or external),&amp;#010 including translating XML Schema &quot;restrictions&quot; to ISC ${isc.DocUtils.linkForRef('class:Validator','Validators')}&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 WSDL services can be contacted by using ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} or the&amp;#010 ${isc.DocUtils.linkForRef('group:loadWSDLTag','&amp;lt;isc:loadWSDL&amp;gt; JSP tag')} to load the service definition, then&amp;#010 invoking methods on the resulting ${isc.DocUtils.linkForRef('class:WebService')} object.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.callOperation')} can be used to manually invoke operations for&amp;#010 custom processing (example using ${isc.DocUtils.linkForExampleId('wsdlOperation', 'public zipcode service')},&amp;#010 examples using .NET at&amp;#010 &lt;a href='/examples/databinding/dotNET/temperatureConvert.jsp' onclick=&quot;window.open('/examples/databinding/dotNET/temperatureConvert.jsp');return false;&quot;&gt;/examples/databinding/dotNET/temperatureConvert.jsp&lt;/a&gt;).&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Fetch-only DataSource binding&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To bind a component to a web service operation, call&amp;#010 &lt;P&gt;&amp;#010 &amp;nbsp;&amp;nbsp;${isc.DocUtils.linkForRef('method:WebService.getFetchDS','WebService.getFetchDS(&lt;i&gt;operationName,elementName&lt;/i&gt;)')}&amp;#010 &lt;P&gt;&amp;#010 to obtain a DataSource which describes the structure of an XML element or XML Schema type&amp;#010 named &lt;i&gt;elementName&lt;/i&gt;, which appears in the response message for the operation named&amp;#010 &lt;i&gt;operationName&lt;/i&gt;.  A component bound to this DataSource will show fields corresponding&amp;#010 to the structure of the chosen XML element or type, that is, one field per subelement or&amp;#010 attribute.  ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} called on this DataSource (or on a&amp;#010 component bound to it) will invoke the specified web service operation, using the&amp;#010 ${isc.DocUtils.linkForRef('type:Criteria')} passed to fetchData() to fill out the input message via&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}, and using the specified XML element from the response&amp;#010 message as data.&amp;#010 &lt;P&gt;&amp;#010 Similarly, ${isc.DocUtils.linkForRef('method:WebService.getInputDS','WebService.getInputDS(&lt;i&gt;operationName&lt;/i&gt;)')} returns&amp;#010 a DataSource suitable for binding to a form that a user will fill out to provide inputs to&amp;#010 the specified web service operation.  Typical use is to let the user fill in the form, then&amp;#010 pass the results of ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')} to&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} as criteria.&amp;#010 &lt;P&gt;&amp;#010 If the input message to the web service has extra nesting, consider using&amp;#010 the ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields','useFlatFields')} property to simplify the inputs&amp;#010 required for &lt;code&gt;fetchData()&lt;/code&gt;, and/or to simplify form databinding via&amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')}.&amp;#010 &lt;P&gt;&amp;#010 Note that the WSDL tab in the Developer Console can provide a clean, simplified view of any &amp;#010 WSDL file, making it easier to pick out the appropriate &lt;code&gt;operationName&lt;/code&gt; and&amp;#010 &lt;code&gt;elementName&lt;/code&gt; parameters to pass to &lt;code&gt;getFetchDS()&lt;/code&gt; and other&amp;#010 ${isc.DocUtils.linkForRef('class:WebService')} methods.&amp;#010 &lt;P&gt;&amp;#010 Take a look at the ${isc.DocUtils.linkForExampleId('wsdlBinding', 'Google SOAP Search example')} and the&amp;#010 &lt;a href='/examples/databinding/dotNET/customerSearch.jsp' onclick=&quot;window.open('/examples/databinding/dotNET/customerSearch.jsp');return false;&quot;&gt;.NET example&lt;/a&gt;&amp;#010 (/examples/databinding/dotNET/customerSearch.jsp).&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Binding with Customized Presentation&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Because XML Schema lacks key presentation metadata such as user-viewable titles, typically&amp;#010 you cannot directly use the DataSources derived from XML Schema embedded in a WSDL file to&amp;#010 drive visual component DataBinding in your final application.&amp;#010 &lt;P&gt;&amp;#010 You can create a DataSource that has custom fields &lt;b&gt;and&lt;/b&gt; invokes a web&amp;#010 service operation by setting ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} to match the targetNamespace&amp;#010 of the ${isc.DocUtils.linkForRef('class:WebService')} (found on the &lt;code&gt;&amp;lt;definitions&amp;gt;&lt;/code&gt; element from the&amp;#010 WSDL file), and setting ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} to the name of the&amp;#010 web service operation to invoke.  &lt;code&gt;fetchData()&lt;/code&gt; called on such a DataSource will&amp;#010 invoke the web service operation named by ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')},&amp;#010 just like a DataSource returned by ${isc.DocUtils.linkForRef('method:WebService.getFetchDS')}.&amp;#010 &lt;P&gt;&amp;#010 In contrast to &lt;code&gt;getFetchDS()&lt;/code&gt;, creating a DataSource in this way gives you the&amp;#010 opportunity to:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; declare arbitrary fields, with SmartClient presentation attributes such as titles and&amp;#010 formatters&amp;#010 &lt;li&gt; extract any data from the response message, via&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','operationBinding.recordXPath')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','field.valueXPath')}, and transform it with&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse()')}&amp;#010 &lt;li&gt; transform the inbound data, if necessary, in order to add metadata such as&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')} for paging, or a sessionId for a service requiring authentication&amp;#010 &lt;/ul&gt;&amp;#010 These techniques are shown in the ${isc.DocUtils.linkForExampleId('wsdlBinding', 'Google SOAP Search example')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;XML Schema Reuse&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Having loaded a WSDL file, all of the XML Schema definitions within the service definition&amp;#010 get translated to SmartClient ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} and&amp;#010 ${isc.DocUtils.linkForRef('class:SimpleType','SimpleTypes')} via the rules described by ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')},&amp;#010 and are available to you via ${isc.DocUtils.linkForRef('method:WebService.getSchema')} and ${isc.DocUtils.linkForRef('attr:DataSourceField.type')}. &amp;#010 &lt;P&gt;&amp;#010 You can use the ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')} property to create DataSources that extend&amp;#010 from XML schema definitions, then add presentation metadata not found in XML schema.&amp;#010 &lt;P&gt;&amp;#010 Even if you choose to declare all fields manually, you can leverage XML Schema&amp;#010 &amp;lt;simpleType&amp;gt; definitions by setting ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} to the name&amp;#010 of an XML Schema simple type embedded in the WSDL file.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Round Trip Binding [fetch -&gt; edit -&gt; save]&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 For full read-write integration with a service that supports the basic&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operations')} on persistent data, &amp;#010 ${isc.DocUtils.linkForRef('class:OperationBinding','OperationBindings')} can be declared for each DataSource operation, and&amp;#010 the ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} property can be used to to bind each&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')} (fetch, update, add, remove) to a&amp;#010 corresponding web service operation.&amp;#010 &lt;P&gt;&amp;#010 For example, this code accomplishes part of the binding to the &amp;#010 &lt;a href='http://www.google.com/search?q=sforce+partner+wsdl' onclick=&quot;window.open('http://www.google.com/search?q=sforce+partner+wsdl');return false;&quot;&gt;SalesForce partner web services&lt;/a&gt;&amp;#010 (additional code is required to handle authentication and other details):&amp;#010 &lt;pre&gt;&amp;#010 isc.DataSource.create({&amp;#010    serviceNamespace : &quot;urn:partner.soap.sforce.com&quot;,&amp;#010    operationBindings : [&amp;#010        { operationType:&quot;fetch&quot;, wsOperation:&quot;query&quot;, recordName: &quot;sObject&quot; },&amp;#010        { operationType:&quot;update&quot;, wsOperation:&quot;update&quot;, recordName: &quot;SaveResult&quot; },&amp;#010        { operationType:&quot;add&quot;, wsOperation:&quot;create&quot;, recordName: &quot;SaveResult&quot; },&amp;#010        { operationType:&quot;remove&quot;, wsOperation:&quot;delete&quot;, recordName: &quot;DeleteResult&quot; }&amp;#010    ],&amp;#010    ...&amp;#010 }); &amp;#010 &lt;/pre&gt;&amp;#010 NOTE: additional code is required to handle authentication and other details, see the&amp;#010 complete code in isomorphicSDK/examples/databinding/SalesForce.&amp;#010 &lt;P&gt;&amp;#010 In this usage, any DSRequest performed on this DataSource invokes the web service operation&amp;#010 named by the &lt;code&gt;wsOperation&lt;/code&gt; property on the corresponding operationBinding, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is serialized via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} to form the input&amp;#010 message to send to the web service.  For example, if a ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} is&amp;#010 invoked and triggers a DSRequest with operationType:&quot;add&quot;, the DataSource above will invoke&amp;#010 the &quot;create&quot; operation, and ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.values')} will become&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.data')} and be serialized to form the input message of the &quot;create&quot; web&amp;#010 service operation.&amp;#010 &lt;P&gt;&amp;#010 Typical usage is:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; declare a DataSource that represents the fields of the object as you want them&amp;#010 represented in the UI.  This DataSource is considered the &quot;entity DataSource&quot;.  It may&amp;#010 extend from an XML Schema complex type via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.&amp;#010 &lt;li&gt; use ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')} to configure the entity DataSource to&amp;#010 call the appropriate web service operations for each DataSource operation, and extract&amp;#010 results via&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}/${isc.DocUtils.linkForRef('attr:OperationBinding.recordName','recordName')}&amp;#010 &lt;li&gt; bind components as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; bind ${isc.DocUtils.linkForRef('class:ListGrid','grids')} to the entity DataSource&amp;#010 &lt;li&gt; bind ${isc.DocUtils.linkForRef('class:SearchForm','SearchForms')} to the input message of the fetch operation&amp;#010 (obtained via ${isc.DocUtils.linkForRef('method:WebService.getInputDS','webService.getInputDS(&quot;operationName&quot;)')}.  This is&amp;#010 done because search inputs are frequently unrelated to the structure of the objects being&amp;#010 searched for&amp;#010 &lt;li&gt; bind forms use for editing (&quot;add&quot; and &quot;update&quot; operations) to the entity DataSource&amp;#010 &lt;/ul&gt;&amp;#010 &lt;li&gt; use&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformRequest','transformRequest')}/${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} and ${isc.DocUtils.linkForRef('attr:OperationBinding.responseDataSchema')} to&amp;#010 handle inconsistencies between the WSDL operations and the data you want in the presentation&amp;#010 layer.&amp;#010 &lt;/ol&gt;&amp;#010 A complete example of binding to the SalesForce &quot;partner&quot; web service, including&amp;#010 authentication via SOAP headers, saving data and cache sync, inline editing, validation&amp;#010 error handling and data paging, can be found in [webroot]/examples/databinding/SalesForce.&amp;#010 &lt;P&gt;&amp;#010 This requires a SalesForce account.  SalesForce currently offers &amp;#010 &lt;a href='http://www.google.com/search?hl=en&amp;q=salesforce+developer+account' onclick=&quot;window.open('http://www.google.com/search?hl=en&amp;q=salesforce+developer+account');return false;&quot;&gt;free developer accounts&lt;/a&gt;.&amp;#010 Please note: this application deals with &lt;b&gt;live data&lt;/b&gt; and if you using inline editing&amp;#010 &lt;b&gt;it will save to SalesForce&lt;/b&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Deployment&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 For best performance, using the ${isc.DocUtils.linkForRef('group:loadWSDLTag','&amp;lt;isc:loadWSDL&amp;gt; JSP tag')}&amp;#010 is recommended, as it automatically caches a translated form of the WSDL file.  If you are&amp;#010 not using the SmartClient server, the WSDL tab in the Developer Console allows you&amp;#010 to save a .js file representing a WebService object, which can then be loaded and cached&amp;#010 like a normal JavaScript file.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Creating New WSDL Services&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 If you have no existing WSDL web service but would like to use web services for integration,&amp;#010 you can implement the &quot;SmartClientOperations&quot; web service described by the&amp;#010 ${isc.DocUtils.externalLink(isc.Page.getIsomorphicDir()+&quot;system/schema/SmartClientOperations.wsdl&quot;,&quot;WSDL file&quot;)} &amp;#010 included in the SDK.  This simple, 4 operation web service can support any number of&amp;#010 DataSources.  In this case, you create your DataSources as client-side instances of&amp;#010 ${isc.DocUtils.linkForRef('class:WSDataSource')} (general client-side DataSource creation is described under&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','Creating DataSources')}).  To change the URL where ISC&amp;#010 expects to find the SmartClientOperations web service, use ${isc.DocUtils.linkForRef('method:WebService.setLocation')}&amp;#010 like so:&lt;pre&gt;&amp;#010      var service = isc.WebService.get(&quot;urn:operations.smartclient.com&quot;);&amp;#010      service.setLocation(&quot;myURL&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 To implement a web service &lt;b&gt;starting from a WSDL file&lt;/b&gt;:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;In the .NET framework, you will use the Web Services Description Language Tool &amp;#010 &lt;a href='http://www.google.com/search?q=wsdl.exe' onclick=&quot;window.open('http://www.google.com/search?q=wsdl.exe');return false;&quot;&gt;(wsdl.exe)&lt;/a&gt; to generate C# stubs that&amp;#010 you will add business logic to&amp;#010 &lt;li&gt;In Java, &lt;a href='http://ws.apache.org/axis/' onclick=&quot;window.open('http://ws.apache.org/axis/');return false;&quot;&gt;Apache Axis&lt;/a&gt; can be used to generate&amp;#010 Java stubs for implementing a web service&amp;#010 &lt;li&gt;In Perl, the &lt;a href='http://soaplite.com' onclick=&quot;window.open('http://soaplite.com');return false;&quot;&gt;SOAP:Lite&lt;/a&gt; module can be used to&amp;#010 implement web services without code generation&amp;#010 &lt;li&gt;for PHP, the NuSoap module can likewise be used to implement web services without code&amp;#010 generation&amp;#010 &lt;/ul&gt;" name="wsdlBinding" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <refs>attr:DataSource.serviceNamespace</refs>
    <refs>attr:DataSource.schemaNamespace</refs>
</docItem>
<docItem ref="method:CubeGrid.getRowFacetValues" flags="" description=" Return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')} indicating the facet values for a specific &amp;#010 row in the grid&amp;#010" name="getRowFacetValues" type="method" definingClass="class:CubeGrid">
<params description="index of the row" optional="false" name="rowNum" type="number">
</params>
<returns description="facet values for the specified row. Returns null if the specified row    is not present in the grid." type="FacetValueMap"></returns>
</docItem>
<docItem ref="attr:SimpleType.inheritsFrom" flags="IR" description="Name of another SimpleType from which this type should inherit.&amp;#010 &lt;P&gt;&amp;#010 Validators, if any, will be combined.  All other SimpleType properties default to the&amp;#010 inherited type's value." name="inheritsFrom" valueType="identifier" defaultValue="null" type="attr" definingClass="class:SimpleType">
    <examples>${isc.DocUtils.linkForExampleId('customSimpleType')}</examples>
</docItem>
<docItem ref="method:ListGrid.discardEdits" flags="A" description="&amp;#010 Cancel outstanding edits for the specified rows, discarding edit values, and hiding editors &amp;#010 if appropriate.&lt;br&gt;&amp;#010 Note that if this method is called on a new edit row (created via &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew')} for example), which has not yet been saved, this method&amp;#010 will remove the row entirely.&amp;#010 &amp;#010" name="discardEdits" type="method" definingClass="class:ListGrid">
<params description="Row to cancel" optional="false" name="rowNum" type="number">
</params>
<params description="Column to cancel. Note that this parameter is ignored in ListGrids but                        may be required in subclasses of ListGrid where each cell represents&amp;#010                        one record in the data set (EG CubeGrid)" optional="false" name="colNum" type="number">
</params>
<params description="By default this method will hide the editor if                              it is currently showing for the row in question. Passing in&amp;#010                              this parameter will leave the editor visible (and just reset&amp;#010                              the edit values underneath the editor)." optional="true" name="dontHideEditor" type="boolean">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="method:ValuesManager.clearErrors" flags="" description="			Clears all errors from member forms.&amp;#010" name="clearErrors" type="method" definingClass="class:ValuesManager">
<params description="If true, clear any visible error messages." optional="false" name="showErrors" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="method:SimpleType.normalDisplayFormatter" flags="" description=" Normal formatter for values of this type used in a ${isc.DocUtils.linkForRef('class:StaticTextItem')} or&amp;#010 ${isc.DocUtils.linkForRef('class:DetailViewer')}.&amp;#010 &lt;P&gt;&amp;#010 When this formatter is called, the SimpleType object is available as &quot;this&quot;.  &amp;#010 &lt;P&gt;&amp;#010 A formatter can make itself configurable on a per-component or per-field basis by&amp;#010 checking properties on the component or field.  For example, a formatter for account IDs&amp;#010 may want to omit a prefix in views where it is redundant, and could check a flag&amp;#010 detailViewer.omitAccountIdPrefix for this purpose.&amp;#010&amp;#010" name="normalDisplayFormatter" type="method" definingClass="class:SimpleType">
<params description="value to be formatted" optional="false" name="value" type="any">
</params>
<params description="field descriptor from the component calling the formatter, if                      applicable.  Depending on the calling component, this could be a&amp;#010                      ${isc.DocUtils.linkForRef('class:FormItem')}, ${isc.DocUtils.linkForRef('object:DetailViewerField')}, etc" optional="true" name="field" type="Field">
</params>
<params description="component calling this formatter, if applicable" optional="true" name="component" type="DataBoundComponent">
</params>
<params description="Full record, if applicable" optional="true" name="record" type="Object">
</params>
</docItem>
<docItem ref="method:FormItem.getValue" flags="" description=" Return this form items value.&amp;#010 &lt;p&gt;&amp;#010 For valueMap'd items, or items with 'mapValueToDisplay()' / 'mapDisplayToValue()'&amp;#010 defined, the data value rather than the display value is returned.&amp;#010" name="getValue" type="method" definingClass="class:FormItem">
<returns description="value of this element" type="any"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="class:MultiFileItem" description="The MultiFileItem provides an interface for a user to save one or more files that are&amp;#010 related to a DataSource record, where each file is represented by a record in a&amp;#010 related DataSource.&amp;#010 &lt;P&gt;&amp;#010 Use MultiFileItem when a record may have one or more files associated with it (such as&amp;#010 attachments to an email message) where no information about the files needs to be stored other&amp;#010 than the files themselves.  If you have several fields associated with each file (such as an&amp;#010 uploaded document with a version, comments and processes associated with it), consider&amp;#010 instead an ordinary DataSource with on field of type &quot;binary&quot;, and using the ${isc.DocUtils.linkForRef('class:FileItem')}&amp;#010 for upload.&amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('group:upload','Uploading Files')} overview for more information on upload.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;DataSource Setup&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 In a relationship sometimes called a &quot;master-detail&quot; relationship, the MultiFileItem stores&amp;#010 files in a &quot;detail&quot; DataSource which are related to a &quot;master&quot; DataSource record being&amp;#010 edited by the form which contains the MultiFileItem.&amp;#010 &lt;P&gt;&amp;#010 To use a MultiFileItem:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; declare a &quot;detail&quot; DataSource to store the related files.  At a minimum, this&amp;#010 DataSource must have:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; a ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} field&amp;#010 &lt;li&gt; a field declaring a ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} relationship to the&amp;#010 primaryKey of the &quot;master&quot; DataSource&amp;#010 &lt;li&gt; a field of type &quot;binary&quot;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','bind')} a DynamicForm to the &quot;master&quot; DataSource &amp;#010 &lt;li&gt; in the DynamicForm bound to the &quot;master&quot; DataSource, declare a field with&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.editorType','editorType')}:&quot;MultiFieldItem&quot; and a &lt;code&gt;dataSource&lt;/code&gt;&amp;#010 property set to the ID of the &quot;detail&quot; DataSource&amp;#010 &lt;/ul&gt;&amp;#010 An example &quot;detail&quot; DataSource for storing files is shown below.  This &quot;detail&quot; DataSource&amp;#010 assumes a &quot;master&quot; DataSource with ${isc.DocUtils.linkForRef('attr:DataSource.ID')} &quot;masterRecord&quot; and with a primaryKey&amp;#010 field &quot;id&quot;.&amp;#010 &lt;code&gt;&amp;#010   &amp;lt;DataSource ID=&quot;uploadedFiles&quot; serverType=&quot;sql&quot;&amp;gt;&amp;#010     &amp;lt;fields&amp;gt;&amp;#010        &amp;lt;field name=&quot;fileId&quot; type=&quot;sequence&quot; primaryKey=&quot;true&quot; hidden=&quot;true&quot;/&amp;gt;&amp;#010        &amp;lt;field name=&quot;masterRecordId&quot; type=&quot;number&quot; foreignKey=&quot;masterRecord.id&quot; hidden=&quot;true&quot;/&amp;gt;&amp;#010        &amp;lt;field name=&quot;file&quot; type=&quot;binary&quot; title=&quot;File&quot;/&amp;gt;&amp;#010     &amp;lt;/fields&amp;gt;&amp;#010   &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/code&gt;&amp;#010 &lt;P&gt;&amp;#010 Aside from a single &quot;binary&quot; field, the &quot;detail&quot; DataSource should generally have only&amp;#010 hidden fields, as shown above.  Additional internal fields (such as a &quot;lastUpdated&quot; field)&amp;#010 may be added, but will not be editable via MultiFileItem. &amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Display&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The MultiFileItem appears as a list of files related to the current record.  An optional&amp;#010 button, the ${isc.DocUtils.linkForRef('attr:MultiFileItem.removeButton','removeButton')} allows removing files.  A&amp;#010 second optional button, the ${isc.DocUtils.linkForRef('attr:MultiFileItem.editButton','editButton')}, launches a&amp;#010 picker for uploading further files.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Saving&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 In all cases, uploading a new file is an &quot;add&quot; DSRequest against the&amp;#010 ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}.&amp;#010 &lt;P&gt;&amp;#010 The MultiFileItem has two modes, according to whether the &quot;master&quot; record is being newly created&amp;#010 via an &quot;add&quot; operation or whether the master record is pre-existing (&quot;update&quot; operation).&amp;#010 &lt;P&gt;&amp;#010 If the master record is pre-existing, each file added by the user is uploaded as soon as the&amp;#010 user exits the picker launched from the edit button, and the list of files shown in the main&amp;#010 form reflects the actual list of stored files.  &amp;#010 &lt;P&gt;&amp;#010 If the master record is being newly created, files are not actually uploaded until&amp;#010 &lt;b&gt;after&lt;/b&gt; the master record is confirmed saved, and the list of fields shown in the main&amp;#010 form reflects files which will be uploaded after the master record is saved.&amp;#010 &lt;P&gt;&amp;#010 In both cases, if there are multiple files to upload, they are uploaded one at a time, as a&amp;#010 series of separate &quot;add&quot; DSRequests against the ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}.&amp;#010 &lt;P&gt;&amp;#010 Also in both cases, deletion of any file is immediate.  In the case of a pre-existing master&amp;#010 record, all files shown actually exist as DataSource records, and deletion is performed as a&amp;#010 &quot;remove&quot; DSRequest against the ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}." name="MultiFileItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:MultiFileItem.dataSource</attrs>
    <attrs>attr:MultiFileItem.removeButton</attrs>
    <attrs>attr:MultiFileItem.editButton</attrs>
    <groups>upload</groups>
</docItem>
<docItem flags="IR" type="attr" ref="attr:Button.icon" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="icon" valueType="SCImgURL" defaultValue="null" definingClass="class:Button">
    <setter>setIcon</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonIcons')}</examples>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:StretchImgButton.setSelected" flags="" description=" Select this object.&amp;#010" name="setSelected" type="method" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="method:CubeGrid.cellIsSelected" flags="" description="&amp;#010 Determine whether the cell passed in is seselected in this cubeGrid&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; tester&amp;#010" name="cellIsSelected" type="method" definingClass="class:CubeGrid">
<params description="cell to test" optional="false" name="cell" type="cell record object">
</params>
<returns description="true if any cells are selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectAllCells" flags="" description="&amp;#010  deselect all cells&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectAllCells" type="method" definingClass="class:CubeGrid">
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.recordBaseStyleProperty" flags="IRWA" description="This attribute allows custom base styles to be displayed on a per-record basis.&amp;#010 To specify a custom base-style for some record set &amp;#010 &lt;code&gt;record[listGrid.recordBaseStyleProperty]&lt;/code&gt; to the desired base style name - &amp;#010 for example if &lt;code&gt;recordBaseStyleProperty&lt;/code&gt; is &lt;code&gt;&quot;_baseStyle&quot;&lt;/code&gt;, set&amp;#010 &lt;code&gt;record._baseStyle&lt;/code&gt; to the custom base style name." name="recordBaseStyleProperty" valueType="string" defaultValue="&quot;_baseStyle&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.baseStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.displayField" flags="IR" description="Specifies an alternative field from which display values should be retrieved for this&amp;#010 item.&lt;br&gt;&amp;#010 If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound &amp;#010 to the same dataSource as the form as a whole, this is implemented by picking up the&amp;#010 value of the specified field from the Form's values object.&lt;br&gt;&amp;#010 Otherwise this item will attempt to map its underlying value to a display value&amp;#010 by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the &amp;#010 &lt;code&gt;displayField&lt;/code&gt; value from that record.&lt;br&gt;&amp;#010 This essentially enables the specified &lt;code&gt;optionDataSource&lt;/code&gt; to be used as&amp;#010 a server based ${isc.DocUtils.linkForRef('group:valueMap')}." name="displayField" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <getter>FormItem.getDisplayFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:StatefulCanvas.showFocusedAsOver" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused','showFocused')} is true for this widget, should the &amp;#010 &lt;code&gt;&quot;over&quot;&lt;/code&gt; state be used to indicate the widget as focused. If set to false,&amp;#010 a separate &lt;code&gt;&quot;focused&quot;&lt;/code&gt; state will be used." name="showFocusedAsOver" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="attr:Canvas.showCustomScrollbars" flags="IRWA" description="Whether to use the browser's native scrollbars or SmartClient-based scrollbars.&amp;#010 &lt;P&gt;&amp;#010 SmartClient-based scrollbars are skinnable, giving you complete control over look and&amp;#010 feel.  SmartClient-based scrollbars also enable some interactions not possible with&amp;#010 native scrollbars, such as ${isc.DocUtils.linkForRef('attr:ListGrid.fixedRecordHeights','variable height records')}&amp;#010 in grids in combination with ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize','data paging')}.&amp;#010 &lt;P&gt;&amp;#010 Native browser scrollbars are slightly faster simply because there are less SmartClient&amp;#010 components that need to be created, drawn and updated.  Each visible SmartClient-based&amp;#010 scrollbar on the screen has roughly the impact of two StretchImgButtons.&amp;#010 &lt;P&gt;&amp;#010 SmartClient is always aware of the size of the scrollbar, regardless of whether native&amp;#010 or custom scrollbars are used, and regardless of what operating system and/or operating&amp;#010 system &quot;theme&quot; or &quot;skin&quot; is in use.  This means SmartClient will correctly report the&amp;#010 ${isc.DocUtils.linkForRef('method:Canvas.getViewportHeight','viewport size')}, that is, the interior area of the&amp;#010 widget excluding space taken by scrollbars, which is key for exactly filling a component&amp;#010 with content without creating unnecessary scrolling.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;showCustomScrollbars&lt;/code&gt; setting is typically overridden in load_skin.js in&amp;#010 order to change the default for all SmartClient components at once, like so:&amp;#010 &lt;pre&gt;&amp;#010     isc.Canvas.addProperties({ showCustomScrollbars:false });&amp;#010 &lt;/pre&gt;" name="showCustomScrollbars" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:ListGrid.startEditingNew" flags="A" description="&amp;#010 Start editing a new row, after the last pre-existing record in the current set of data.&amp;#010 &lt;P&gt;&amp;#010 This new row will be saved via the &quot;add&quot; ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource&amp;#010 operation')}.&amp;#010 &lt;P&gt;&amp;#010 If editing is already underway elsewhere in the grid, startEditingNew() behaves just like&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}.&amp;#010&amp;#010" name="startEditingNew" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.startEditing">
</seeAlso>
<params description="Optional initial set of properties for the new record" optional="true" name="newValues" type="object">
</params>
<params description="Whether to suppress the default behavior of moving focus                                   to the newly shown editor." optional="true" name="suppressFocus" type="boolean">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="method:WebService.getOperationNames" flags="" name="getOperationNames" type="method" definingClass="class:WebService">
<returns description="names of the available operations supported by this service (array of strings)" type="Array"></returns>
    <groups>webService</groups>
</docItem>
<docItem ref="method:Date.toEuropeanShortDateTime" flags="" description=" Return this date in the format: &lt;code&gt;DD/MM/YYYY HH:MM&lt;/code&gt;.&amp;#010" name="toEuropeanShortDateTime" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Tree.root" description="If you're using the &quot;parent&quot; modelType, you can provide the root node configuration via this&amp;#010 property.  If you don't provide it, one will be auto-created for you with an empty name.&amp;#010 Read on for a description of what omitting the name property on the root node means for path&amp;#010 derivation.&amp;#010 &lt;p&gt;&amp;#010 If you're using the &quot;children&quot; modelType, you can provide the initial tree data via this&amp;#010 property.  So, for example, to construct the following tree:&amp;#010 &lt;pre&gt;&amp;#010 foo&amp;#010   bar&amp;#010 zoo&amp;#010 &lt;/pre&gt;&amp;#010 You would initialize the tree as follows: &amp;#010 &lt;pre&gt;&amp;#010 Tree.create({&amp;#010     root: { name:&quot;root&quot;, children: [&amp;#010         { name:&quot;foo&quot;, children: [&amp;#010             { name: &quot;bar&quot; }&amp;#010         ]},&amp;#010         { name: &quot;zoo&quot; }&amp;#010     ]}&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 Note that if you provide a &lt;code&gt;name&lt;/code&gt; property for the root node, then the path to&amp;#010 any node underneath it will start with that name.  So in the example above, the path to the&amp;#010 &lt;code&gt;bar&lt;/code&gt; node would be &lt;code&gt;root/foo/bar&lt;/code&gt; (assuming you're using the default&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}.  If you omit the name attribute on the root node, then it's name&amp;#010 is automatically set to the ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} value.  So in the example above, if&amp;#010 you omitted &lt;code&gt;name:&quot;root&quot;&lt;/code&gt;, then the path to the &lt;code&gt;bar&lt;/code&gt; node would be&amp;#010 &lt;code&gt;/foo/bar&lt;/code&gt;.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Note: if you initialize a Tree with no &lt;code&gt;root&lt;/code&gt; value, a root node will be&amp;#010 auto-created for you.  You can then call ${isc.DocUtils.linkForRef('method:Tree.add')} to construct the tree." name="root" valueType="TreeNode" defaultValue="null" definingClass="class:Tree">
    <getter>getRoot</getter>
    <setter>setRoot</setter>
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<seeAlso ref="method:Tree.setRoot">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('childrenArrays')}</examples>
</docItem>
<docItem ref="classAttr:ValidatorTypes.mask" flags="IR" description="Validate against a regular expression mask, specified as &lt;code&gt;validator.mask&lt;/code&gt;.&amp;#010  If validation is successful a transformation can also be specified via the&amp;#010  &lt;code&gt;validator.transformTo&lt;/code&gt; property. This should be set to a string in the&amp;#010  standard format for string replacement via the native JavaScript &lt;code&gt;replace()&lt;/code&gt;&amp;#010  method." name="mask" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
    <examples>${isc.DocUtils.linkForExampleId('valueTransform')}</examples>
</docItem>
<docItem ref="method:Canvas.animateRect" flags="" description=" Animate a reposition / resize of this canvas from its current size and postion.&amp;#010" name="animateRect" type="method" definingClass="class:Canvas">
<params description="new left position (or null for unchanged)" optional="false" name="left" type="number">
</params>
<params description="new top position (or null for unchanged)" optional="false" name="top" type="number">
</params>
<params description="new width (or null for unchanged)" optional="false" name="width" type="number">
</params>
<params description="new height (or null for unchanged)" optional="false" name="height" type="number">
</params>
<params description="When the setRect completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation" optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated setRect" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration effect to apply to the animation" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateZoom')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="method:GridRenderer.rowMouseUp" flags="A" description=" Called when a row receives a mouseup event.&amp;#010&amp;#010" name="rowMouseUp" type="method" definingClass="class:GridRenderer">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="group:access" name="access" type="group">
    <refs>method:List.get</refs>
    <refs>method:List.getLength</refs>
    <refs>method:List.isEmpty</refs>
    <refs>method:List.first</refs>
    <refs>method:List.last</refs>
    <refs>method:List.indexOf</refs>
    <refs>method:List.lastIndexOf</refs>
    <refs>method:List.findIndex</refs>
    <refs>method:List.findNextIndex</refs>
    <refs>method:List.find</refs>
    <refs>method:List.findAll</refs>
    <refs>method:List.contains</refs>
    <refs>method:List.containsAll</refs>
    <refs>method:List.equals</refs>
    <refs>method:List.getItems</refs>
    <refs>method:List.getRange</refs>
    <refs>method:List.duplicate</refs>
    <refs>method:Tree.indexOf</refs>
    <refs>method:Tree.lastIndexOf</refs>
    <refs>method:ResultSet.getLength</refs>
    <refs>method:ResultSet.indexOf</refs>
    <refs>method:ResultSet.get</refs>
    <refs>method:ResultSet.getRange</refs>
    <refs>method:ResultSet.findAll</refs>
    <refs>method:ResultSet.find</refs>
    <refs>method:ResultSet.findIndex</refs>
    <refs>method:ResultSet.findNextIndex</refs>
    <refs>method:Array.get</refs>
    <refs>method:Array.getLength</refs>
    <refs>method:Array.isEmpty</refs>
    <refs>method:Array.first</refs>
    <refs>method:Array.last</refs>
    <refs>method:Array.indexOf</refs>
    <refs>method:Array.lastIndexOf</refs>
    <refs>method:Array.contains</refs>
    <refs>method:Array.containsAll</refs>
    <refs>method:Array.equals</refs>
    <refs>method:Array.getItems</refs>
    <refs>method:Array.getRange</refs>
    <refs>method:Array.duplicate</refs>
    <refs>method:Array.findIndex</refs>
    <refs>method:Array.findNextIndex</refs>
    <refs>method:Array.find</refs>
    <refs>method:Array.findAll</refs>
</docItem>
<docItem ref="attr:PickTreeItem.loadDataOnDemand" flags="IRA" description="If this is a databound item, should the load our set of possible options be loaded&amp;#010 on demand (as submenus are displayed), or upfront?" name="loadDataOnDemand" valueType="boolean" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
</docItem>
<docItem ref="attr:Button.baseStyle" flags="IRW" description="Base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010 &lt;P&gt;&amp;#010 When the component changes state (eg becomes disabled), a suffix will be appended to this&amp;#010 style name, reflecting the following states: &quot;Over&quot;, &quot;Down&quot;, or &quot;Disabled&quot;.&amp;#010 &lt;P&gt;&amp;#010 If the widget is selected, the suffixes will be &quot;Selected&quot;, &quot;SelectedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be &quot;Focused&quot;,&amp;#010 &quot;FocusedOver&quot;, etc, or if the widget is both selected and focused, &quot;SelectedFocused&quot;,&amp;#010 &quot;SelectedFocusedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 For example, if &lt;code&gt;baseStyle&lt;/code&gt; is set to &quot;button&quot;, this component is&amp;#010 ${isc.DocUtils.linkForRef('method:Button.isSelected','selected')} and the mouse cursor is over this component, the style&amp;#010 &quot;buttonSelectedOver&quot; will be used." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;button&quot;" type="attr" definingClass="class:Button">
    <setter>setBaseStyle</setter>
</docItem>
<docItem ref="attr:ImgTab.baseStyle" flags="IR" name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;tab&quot;" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="attr:CheckboxItem.showLabel" flags="IRW" description="Should we should the label text next to the checkbox item." name="showLabel" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CheckboxItem">
</docItem>
<docItem ref="type:ImageStyle" name="ImageStyle" type="type">
<values description="Center (and don't stretch at all) the image if smaller than its enclosing frame.CENTER:&quot;center&quot;," value="Canvas.CENTER"></values>
<values description="Tile (repeat) the image if smaller than its enclosing frame." value="Canvas.TILE"></values>
<values description="Stretch the image to the size of its enclosing frame." value="Canvas.STRETCH"></values>
<values description="Allow the image to have natural size" value="Canvas.NORMAL"></values>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ValuesManager.setErrors" flags="A" description=" Sets validation errors for this valuesManager to the specified set of errors.&amp;#010 Errors should be of the format:&lt;br&gt;&amp;#010 &lt;code&gt;{field1:errors, field2:errors}&lt;/code&gt;&lt;br&gt;&amp;#010 where each &lt;code&gt;errors&lt;/code&gt; object is either a single error message string or an&amp;#010 array of error messages.&lt;br&gt;&amp;#010 If &lt;code&gt;showErrors&lt;/code&gt; is passed in, error messages will be displayed in the &amp;#010 appropriate member form items. For fields with no visible form item, &amp;#010 ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be fired instead.&lt;br&gt;&amp;#010 Note that if &lt;code&gt;showErrors&lt;/code&gt; is false, errors may be shown at any time via&amp;#010 a call to ${isc.DocUtils.linkForRef('method:ValuesManager.showErrors')}.&amp;#010&amp;#010" name="setErrors" type="method" definingClass="class:ValuesManager">
<params description="list of errors as an object with the field namesas keys" optional="false" name="errors" type="object">
</params>
<params description="If true display errors now." optional="false" name="showErrors" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:FormItem.valueField" flags="IR" description="If this form item maps data values to display values by retrieving the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property &amp;#010 denotes the the field to use as the underlying data value in records from the &amp;#010 optionDataSource.&lt;br&gt;&amp;#010 If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item." name="valueField" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <getter>FormItem.getValueFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem ref="type:ChartType" description="Known chart types.  These are visual representations of data, not separate data models,&amp;#010 although some chart types are only capable of showing a single facet of data.&amp;#010 &lt;P&gt;&amp;#010 Concrete charting implementations may use any value for &lt;code&gt;chartType&lt;/code&gt; but should&amp;#010 support the provided &lt;code&gt;chartType&lt;/code&gt; values for charts that correspond to the visual&amp;#010 presentation described below, to enable easy switching between charting engines." name="ChartType" type="type">
<values description="Values represented by vertical columns.  Typically supports stacking to                  represent two facets.  May support simultaneous stacking and clustering for&amp;#010                  3 facets." value="Column"></values>
<values description="Values represented by horizontal bars.  Typically supports stacking to                  represent two facets.  May support simultaneous stacking and clustering for&amp;#010                  3 facets." value="Bar"></values>
<values description="Values represented by a line between data points." value="Line"></values>
<values description="Circular chart with wedges representing values.  Single facet only" value="Pie"></values>
<values description="Like a pie chart with a central hole.  Single facet only" value="Doughnut"></values>
</docItem>
<docItem ref="attr:PickList.separatorRows" flags="IR" description="Array of records to show between matching and non-matching rows in the PickList.&amp;#010 &lt;P&gt;&amp;#010 Not valid for ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','databound pickLists')}." name="separatorRows" valueType="Array of ListGridRecord" defaultValue="[{isSeparator:true}]" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="method:StretchImgButton.addToRadioGroup" flags="" description=" Add this widget to the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 Selecting this widget will then deselect any other StatefulCanvases with the same&amp;#010 radioGroup ID.&amp;#010 StatefulCanvases can belong to only one radioGroup, so this method will remove from &amp;#010 any other radiogroup of which this button is already a member.&amp;#010" name="addToRadioGroup" type="method" definingClass="class:StretchImgButton">
<params description="- ID of the radiogroup to which this widget should be added" optional="false" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:StaticTextItem.clipValue" flags="IRW" description="If true, text that exceeds the specified size of the form item will be clipped" name="clipValue" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StaticTextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DynamicForm.autoFocus" flags="IRW" description="If true, when the form is drawn, focus will automatically be put into the first focusable&amp;#010 element in the form.&lt;br&gt;&amp;#010 Note that to put focus in a different item you can explicitly call &amp;#010 &lt;code&gt;dynamicForm.focusInItem(&lt;i&gt;itemName&lt;/i&gt;)&lt;/code&gt;" name="autoFocus" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.focusInItem">
</seeAlso>
    <groups>focus</groups>
</docItem>
<docItem ref="method:ListGrid.fetchData" flags="" description=" Uses a &quot;fetch&quot; operation on the current ${isc.DocUtils.linkForRef('class:DataSource','grid.dataSource')} to retrieve data&amp;#010 that matches the provided criteria, and displays the matching data in this component.&amp;#010 &lt;P&gt;&amp;#010 If there are a large number of matching records, paging will automatically be enabled, so&amp;#010 that initially a smaller number of records will be retrieved and further records will&amp;#010 be fetched as the user navigates the dataset.&amp;#010 &lt;P&gt;&amp;#010 When first called, this method will create a ${isc.DocUtils.linkForRef('class:ResultSet')}, which will be&amp;#010 configured based on component settings such as ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fetchOperation')}&amp;#010 and ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataPageSize')}, as well as the general purpose&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')}.  The ResultSet is then available as&amp;#010 &lt;code&gt;component.data&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Subsequent calls to fetchData() will simply call ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')}&amp;#010 on the created ResultSet with the passed criteria.&lt;br&gt;&amp;#010 In some cases fetchData() will not need to context the server as the new criteria can be&amp;#010 satisfied by performing a client-side filter against the currently cached set of data.&amp;#010 You can determine whether criteria will cause a fetch by calling &amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.willFetchData')}.&lt;br&gt;&amp;#010 If you need to force a server fetch, you can call ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')} via&amp;#010 &lt;code&gt;component.data.invalidateCache()&lt;/code&gt; to do so.  &amp;#010 If for any reason you need to rebuild the ResultSet, you can call&amp;#010 &lt;P&gt;&amp;#010 This method takes an optional callback parameter (set to a ${isc.DocUtils.linkForRef('type:DSCallback')}) to fire when&amp;#010 the fetch completes. Note that this callback will not fire if no server fetch is performed.&amp;#010 In this case the data is updated synchronously, so as soon as this method completes you&amp;#010 can interact with the new data. If necessary we recomment using &amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.willFetchData')} before calling this method to determine whether or not&amp;#010 a server fetch will occur.&lt;br&gt;&amp;#010 In addition to the callback parameter for this method, developers can use &amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.dataArrived')} to be notified every time ResultSet data is loaded.&amp;#010&amp;#010" name="fetchData" type="method" definingClass="class:ListGrid">
<params description="Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument&amp;#010                      instead of a raw criteria object, will be derived by calling&amp;#010                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundFetch')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:CubeGrid.autoSelectHeaders" flags="IRW" description="If true, when multiple facets appear on one side in a nested headers presentation, the&amp;#010 selection state of parent/child headers are automatically kept in sync." name="autoSelectHeaders" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="method:TabSet.getSelectedTab" flags="A" description=" Returns the currently selected tab object.  This is the object literal used to configure the&amp;#010 tab, rather than the tab button widget.&amp;#010" name="getSelectedTab" type="method" definingClass="class:TabSet">
<returns description="the currently selected Tab object" type="Tab"></returns>
</docItem>
<docItem ref="group:featureExplorerOverview" title="Feature Explorer Overview" description="The ${isc.DocUtils.linkForDocNode('FeatureExplorer', 'Feature Explorer')} is an example shell designed to help you&amp;#010 explore the capabilities of SmartClient.  Read on for a brief overview, including specific&amp;#010 instructions for using the example code in your own standalone application.&amp;#010 &lt;p&gt;&amp;#010 The tree on the left of the Feature Explorer contains examples grouped by logical&amp;#010 categories.  Selecting an example brings it up on the right side of the screen, inside a&amp;#010 tabbed view.  The default &quot;View&quot; tab shows the interactive example itself, while other&amp;#010 tabs show the underlying source.  The &quot;JS&quot; tab shows the source for the example.  There is&amp;#010 sometimes also an &quot;XML&quot; tab that shows the corresponding version in &amp;#010 ${isc.DocUtils.linkForRef('group:componentXML','Component XML')} format.  For databound examples, there are also&amp;#010 frequently additional tabs that show the ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} associated with the&amp;#010 example.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;How to create a standalone application using code from the Feature Explorer&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 The Feature Explorer shell is designed to show many examples in one place and to enable&amp;#010 experimentation by providing a way for you to modify example code and try out your changes.&amp;#010 As a result, the Feature Explorer requires some basic server support and its examples omit&amp;#010 the usual SmartClient module includes that have to be in place for using SmartClient&amp;#010 components standalone.&amp;#010 &lt;p&gt;&amp;#010 If you'd like to use example code in your application to get started quickly, create a page&amp;#010 with SmartClient includes and then take the code from the &quot;JS&quot; tab and place it between&amp;#010 &amp;lt;SCRIPT&amp;gt; blocks as described ${isc.DocUtils.linkForRef('group:nonJavaBackend','here')}.  If the example also&amp;#010 includes a datasource, place the datasource definitions in the same file before the&amp;#010 component code.  Note that DataSources (and components) written in XML require the optional&amp;#010 SmartClient server.  If you're using the server, you can include them on your page using the &amp;#010 ${isc.DocUtils.linkForRef('group:loadDSTag')} tag.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Feature Explorer difference in the LGPL package&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 The LGPL edition of SmartClient does not include the SmartClient Java Server as part of the&amp;#010 licensed software, but a trimmed down server is included in the package to support the&amp;#010 Feature Explorer shell.  There are some examples that use DataSources that would normally&amp;#010 use the SmartClient server for persistence.  In the LGPL package, these DataSources are&amp;#010 automatically turned into ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','Client Only DataSources')} and&amp;#010 the Feature Explorer loads the data for these one-time from the dataURL or testFileName&amp;#010 attributes specified on the DataSource.  Subsequent DataSource operations work against this&amp;#010 client-side dataset, which is why changes to the data aren't permanent in these examples.&amp;#010 &lt;p&gt;&amp;#010 Check out the ${isc.DocUtils.linkForRef('group:clientServerIntegration','Client-Server Integration')} overview topic for&amp;#010 an overview of your DataBinding options." name="featureExplorerOverview" type="group">
</docItem>
<docItem ref="group:identity" name="identity" type="group">
    <refs>attr:DataSource.ID</refs>
    <refs>attr:DataSource.addGlobalId</refs>
</docItem>
<docItem ref="method:CheckboxItem.setValueMap" flags="" description=" Setter method to apply a valueMap to a checkbox item.&lt;br&gt;&amp;#010 Note that if this method is overridden, the override must call&amp;#010 &lt;code&gt;this.Super(&quot;setValueMap&quot;, arguments);&lt;/code&gt; to maintain functionality in this&amp;#010 class.&amp;#010" name="setValueMap" type="method" definingClass="class:CheckboxItem">
<seeAlso ref="attr:CheckboxItem.valueMap">
</seeAlso>
    <groups>valueMap</groups>
</docItem>
<docItem ref="method:ListGrid.getFieldWidth" flags="" description=" Returns a numeric value for the width of some field within this listGrid.&amp;#010" name="getFieldWidth" type="method" definingClass="class:ListGrid">
<params description="Index or fieldName of field for which width is to be determined." optional="false" name="fieldNum" type="Number | String">
</params>
<returns description="width of the field in px, or null if the width can't be determined" type="Number"></returns>
</docItem>
<docItem ref="attr:DataSource.requestProperties" flags="IR" description="Additional properties to pass through to the ${isc.DocUtils.linkForRef('class:DSRequest')}s made by this&amp;#010 DataSource.&amp;#010 &lt;p&gt;&amp;#010 These properties are applied before ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} is called." name="requestProperties" valueType="DSRequest Properties" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="class:DSRequest">
</seeAlso>
<seeAlso ref="attr:OperationBinding.requestProperties">
</seeAlso>
    <groups>clientDataIntegration</groups>
    <groups>serverDataIntegration</groups>
</docItem>
<docItem ref="group:modification" name="modification" type="group">
    <refs>method:List.set</refs>
    <refs>method:List.addAt</refs>
    <refs>method:List.removeAt</refs>
    <refs>method:List.add</refs>
    <refs>method:List.addList</refs>
    <refs>method:List.setLength</refs>
    <refs>method:List.addListAt</refs>
    <refs>method:List.remove</refs>
    <refs>method:List.removeList</refs>
    <refs>method:List.dataChanged</refs>
    <refs>method:Array.set</refs>
    <refs>method:Array.addAt</refs>
    <refs>method:Array.removeAt</refs>
    <refs>method:Array.add</refs>
    <refs>method:Array.addList</refs>
    <refs>method:Array.setLength</refs>
    <refs>method:Array.addListAt</refs>
    <refs>method:Array.remove</refs>
    <refs>method:Array.removeList</refs>
    <refs>method:Array.dataChanged</refs>
</docItem>
<docItem ref="attr:Canvas.animateRectAcceleration" flags="IRWA" description="Default acceleration function for performing an animated move and resize.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateRectAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:RestDataSource.operationBindings" flags="IR" description="RestDataSource OperationBindings set to specify default dataProtocol per operationType.&amp;#010 Default databindings are:&amp;#010 &lt;pre&gt;&amp;#010 [ {operationType:&quot;fetch&quot;, dataProtocol:&quot;getParams&quot;},&amp;#010   {operationType:&quot;add&quot;, dataProtocol:&quot;postParams&quot;},&amp;#010   {operationType:&quot;remove&quot;, dataProtocol:&quot;postParams&quot;},&amp;#010   {operationType:&quot;update&quot;, dataProtocol:&quot;postParams&quot;} ];&amp;#010 &lt;/pre&gt;" name="operationBindings" valueType="Array of OperationBinding" defaultValue="[...]" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="classAttr:Time.PMIndicator" flags="RWA" description="String appended to times to indicate am (when not using 24 hour format)." name="PMIndicator" valueType="string" defaultValue="&quot; pm&quot;" type="classAttr" definingClass="class:Time">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:HTMLFlow.contentsURLParams" flags="IRW" description="Parameters to be sent to the contentsURL when fetching content." name="contentsURLParams" valueType="Object" defaultValue="null" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="classMethod:EventHandler.ctrlKeyDown" flags="" description="			Return true if the control key is being held down.&amp;#010			Note that this is only set reliably for keyboard events.&amp;#010&amp;#010" name="ctrlKeyDown" type="classMethod" definingClass="class:EventHandler">
<returns description="true == control key is down" type="boolean"></returns>
    <groups>keyboardEvents</groups>
</docItem>
<docItem ref="attr:FacetValue.canEdit" flags="IRW" description="Whether cells for this facetValue can be edited.  Defaults to cubeGrid.canEdit" name="canEdit" valueType="boolean" defaultValue="cubeGrid.canEdit" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="group:layoutPolicy" name="layoutPolicy" type="group">
    <refs>attr:Layout.overflow</refs>
    <refs>attr:Layout.orientation</refs>
    <refs>attr:Layout.vPolicy</refs>
    <refs>attr:Layout.hPolicy</refs>
    <refs>attr:Layout.enforcePolicy</refs>
    <refs>attr:Layout.defaultLayoutAlign</refs>
    <refs>attr:Layout.align</refs>
    <refs>attr:Layout.reverseOrder</refs>
</docItem>
<docItem ref="group:files" description="Refering to and loading other files.&amp;#010 &lt;P&gt;&amp;#010 The two main URL settings relevant to file loading are:&lt;br&gt;&amp;#010 * appDir  (where application-specific files live)&lt;br&gt;&amp;#010 * isomorphicDir (where system supplied files live)&lt;br&gt;" name="files" type="group">
    <refs>classAttr:Page.defaultUnsupportedBrowserURL</refs>
    <refs>classMethod:Page.getAppDir</refs>
    <refs>classMethod:Page.setAppImgDir</refs>
    <refs>classMethod:Page.getAppImgDir</refs>
    <refs>classMethod:Page.setAppFilesDir</refs>
    <refs>classMethod:Page.getAppFilesDir</refs>
    <refs>classMethod:Page.setIsomorphicDir</refs>
    <refs>classMethod:Page.getIsomorphicDir</refs>
    <refs>classMethod:Page.setSkinDir</refs>
    <refs>classMethod:Page.getSkinDir</refs>
    <refs>classMethod:Page.getSkinImgDir</refs>
    <refs>classMethod:Page.getImgURL</refs>
    <refs>classMethod:Page.getURL</refs>
    <refs>classMethod:Page.loadStyleSheet</refs>
</docItem>
<docItem ref="attr:DetailViewer.labelSuffix" flags="IRW" description="text to put after a label" name="labelSuffix" valueType="string" defaultValue="&quot;:&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>labels</groups>
</docItem>
<docItem ref="classMethod:Class.getClassName" flags="" description="&amp;#010	Gets the name of this class as a string.&amp;#010&amp;#010" name="getClassName" type="classMethod" definingClass="class:Class">
<returns description="name of the class" type="string"></returns>
</docItem>
<docItem ref="attr:DataSource.callbackParam" flags="IR" description="Applies only to dataFormat: &quot;json&quot;.  Specifies the name of the query parameter that&amp;#010 tells your JSON service what function to call as part of the response." name="callbackParam" valueType="String" defaultValue="&quot;callback&quot;" type="attr" definingClass="class:DataSource">
<seeAlso ref="attr:DataSource.dataFormat">
</seeAlso>
<seeAlso ref="attr:DataSource.operationBindings">
</seeAlso>
<seeAlso ref="attr:OperationBinding.callbackParam">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('xmlEditSave')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:GridRenderer.getVisibleRows" flags="" description=" Get the rows that are currently visible in the viewport, as an array of &amp;#010 [firstRowNum, lastRowNum]. If the grid contains no records, will return [-1,-1];&amp;#010" name="getVisibleRows" type="method" definingClass="class:GridRenderer">
</docItem>
<docItem ref="classMethod:Timer.clear" flags="" description="&amp;#010 Cancels the processing of a timerEvent if it has not already fired.&amp;#010&amp;#010" name="clear" type="classMethod" definingClass="class:Timer">
<params description="timerEvent object previously returned from Timer.setTimeout()" optional="false" name="timerEvent" type="object">
</params>
</docItem>
<docItem ref="method:Canvas.animateHide" flags="" description=" Hide a canvas by shrinking it vertically to zero height over a period of time.&amp;#010 This method will not fire if the widget is already drawn and visible, or has overflow&amp;#010 other than &lt;code&gt;&quot;visible&quot;&lt;/code&gt; or &lt;code&gt;&quot;hidden&quot;&lt;/code&gt;.&amp;#010" name="animateHide" type="method" definingClass="class:Canvas">
<params description="How should the content of the window be hidden during                         the hide? Supported options are &lt;ul&gt;&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;slide&quot;&lt;/code&gt; (content slides out of view as the window &amp;#010                                                  shrinks)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;wipe&quot;&lt;/code&gt; (default: content is clipped as the window &amp;#010                                                  shrinks)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;fade&quot;&lt;/code&gt; (widget fades out of view, from current &amp;#010                                              opacity to transparent)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;fly&quot;&lt;/code&gt; (widget moves offscreen to the left of its &amp;#010                                              drawn position)&amp;#010                      &lt;/ul&gt;&amp;#010      If passed an object, the &lt;code&gt;effect&lt;/code&gt; attribute of the object should be&amp;#010      one of the above effect strings - other attributes may be used to modify the effect&amp;#010      Currently this is only supported for &lt;code&gt;&quot;slide&quot;&lt;/code&gt; and &lt;code&gt;&quot;wipe&quot;&lt;/code&gt;&amp;#010      type animations where &lt;code&gt;&quot;endAt&quot;&lt;/code&gt; may be specified as &lt;code&gt;&quot;T&quot;&lt;/code&gt;&amp;#010      [the animation will hide the widget vertically towards the top edge] or &amp;#010      &lt;code&gt;&quot;L&quot;&lt;/code&gt; [the animation will shrink the widget toward the left side]." optional="false" name="effect" type="string | object">
</params>
<params description="When the hide completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation." optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated hide" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration effect function to bias the animation ratios" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateWipe')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:Label.autoFit" flags="IRW" description="If true, ignore the specified size of this widget and always size just large&amp;#010 enough to accomodate the title.  If &lt;code&gt;setWidth()&lt;/code&gt; is explicitly called on an&amp;#010 autoFit:true button, autoFit will be reset to &lt;code&gt;false&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for StretchImgButton instances, autoFit will occur horizontally only, as &amp;#010 unpredictable vertical sizing is likely to distort the media. If you do want vertical &amp;#010 auto-fit, this can be achieved by simply setting a small height, and having &amp;#010 overflow:&quot;visible&quot;" name="autoFit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Label">
    <setter>StatefulCanvas.setAutoFit</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="object:GridHilite" description="Definition of a hilite style.&amp;#010 &lt;P&gt;&amp;#010 Hilites are styling that can declaratively attached to data via setting the&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on a record to the id of a hilite declaration." name="GridHilite" type="object">
    <treeLocation>Optional Modules/Analytics/CubeGrid</treeLocation>
    <attrs>attr:GridHilite.id</attrs>
    <attrs>attr:GridHilite.style</attrs>
    <attrs>attr:GridHilite.htmlBefore</attrs>
    <attrs>attr:GridHilite.htmlAfter</attrs>
    <attrs>attr:GridHilite.disabled</attrs>
    <requiresModules>Analytics</requiresModules>
</docItem>
<docItem ref="method:Log.clearLogPriority" flags="" description=" Clear this object's priority setting for a particular category, so that the category's &amp;#010 effective priority returns to the specified priority for this category at the Log level&amp;#010 (or &lt;code&gt;Log.defaultPriority&lt;/code&gt; if not set).&lt;br&gt;&amp;#010 To clear the Page-level priority setting for this log category use &amp;#010 &lt;code&gt;isc.Log.clearPriority()&lt;/code&gt; instead.&amp;#010&amp;#010" name="clearLogPriority" type="method" definingClass="class:Log">
<seeAlso ref="classMethod:Log.clearPriority">
</seeAlso>
<params description="Category name. If not specified, all logging on this object                              will revert to default priority settings." optional="false" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:Menu.showAnimationEffect" flags="IRWA" description="When this menu is shown how should it animate into view? By default the menu will just&amp;#010 show at the specified size/position. Options for animated show effects are &lt;code&gt;&quot;fade&quot;&lt;/code&gt;&amp;#010 to fade from transparent to visible, &lt;code&gt;&quot;slide&quot;&lt;/code&gt; to slide the menu into view,&amp;#010 or &lt;code&gt;&quot;wipe&quot;&lt;/code&gt; to have the menu grow into view, revealing its content as it&amp;#010 grows. Can be overridden by passing the 'animationEffect' parameter to 'menu.show()'" name="showAnimationEffect" valueType="string" defaultValue="null" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="method:StatefulCanvas.addToRadioGroup" flags="A" description=" Add this widget to the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 Selecting this widget will then deselect any other StatefulCanvases with the same&amp;#010 radioGroup ID.&amp;#010 StatefulCanvases can belong to only one radioGroup, so this method will remove from &amp;#010 any other radiogroup of which this button is already a member.&amp;#010" name="addToRadioGroup" type="method" definingClass="class:StatefulCanvas">
<params description="- ID of the radiogroup to which this widget should be added" optional="false" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:TreeGrid.canAcceptDroppedRecords" flags="IRW" description="Indicates whether records can be dropped into this listGrid." name="canAcceptDroppedRecords" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeNode.canDrag">
</seeAlso>
<seeAlso ref="attr:TreeNode.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragReparent')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:ListGrid.selectRecords" flags="" description="&amp;#010  Select/deselect a list of records passed in explicitly, or by index.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectRecords" type="method" definingClass="class:ListGrid">
<params description="records (or row numbers) to select" optional="false" name="records" type="List of ListGridRecord | numbers">
</params>
<params description="new selection state (if null, defaults to true)" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="group:clientDataIntegration" title="Client-side Data Integration" description="SmartClient supports declarative, XPath-based binding of visual components to any server&amp;#010 capable of returning XML or JSON responses over HTTP, without the need for the&amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration','SmartClient server')}.&amp;#010 &lt;P&gt;&amp;#010 This approach is called Client-Side Data Integration, which means:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; You ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create DataSources')} in JavaScript &amp;#010 which describe the data to be loaded and manipulated in the user interface. The&amp;#010 JavaScript that creates these DataSources may be dynamically generated and/or existing&amp;#010 metadata may be ${isc.DocUtils.linkForRef('group:metadataImport','imported')}.&amp;#010 &lt;li&gt; You configure DataSources, via property and method overrides, to send appropriate&amp;#010 HTTP requests to your server, and to parse HTTP responses from your server, in order to&amp;#010 fulfill the 4 core operations of the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Protocol')}.&amp;#010 &lt;li&gt; These DataSources are then bound to &amp;#010 ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable UI components')}, which can provide a variety of&amp;#010 complete user interactions (form-based editing, grid-based editing, load on demand, ..)&amp;#010 based on these 4 core operations&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Approaches and platforms&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;WSDL integration (.NET and others)&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 If you have pre-existing WSDL services or would like to generate web services for&amp;#010 SmartClient to consume, the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Binding Overview')} covers possible&amp;#010 approaches.&amp;#010 &lt;P&gt;&amp;#010 WSDL binding is the most popular approach for integration with the .NET platform.&amp;#010 You can &amp;#010 &lt;a href='http://www.google.com/search?q=create+web+service+visual+studio' onclick=&quot;window.open('http://www.google.com/search?q=create+web+service+visual+studio');return false;&quot;&gt;use Visual Studio to create web services&lt;/a&gt;&amp;#010 from existing server-side methods, and then use SmartClient's &amp;#010 ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Binding')} system to connect to those web services.  &amp;#010 &lt;P&gt;&amp;#010 Here are a couple of examples of integration with .NET web services:&amp;#010 &lt;a href='/examples/databinding/dotNET/temperatureConvert.jsp' onclick=&quot;window.open('/examples/databinding/dotNET/temperatureConvert.jsp');return false;&quot;&gt;temperature conversion service&lt;/a&gt;,&amp;#010 and &lt;a href='/examples/databinding/dotNET/customerSearch.jsp' onclick=&quot;window.open('/examples/databinding/dotNET/customerSearch.jsp');return false;&quot;&gt;customer search service&lt;/a&gt;.&amp;#010 Both use the ${isc.DocUtils.linkForRef('method:WebService.callOperation')} method to query the web service. &lt;b&gt;Note:&lt;/b&gt;&amp;#010 These examples will only work if there's a web service running at the WSDL URLs used in the examples.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;REST integration (PHP and others)&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 For PHP and other server technologies (Cold Fusion, Ruby, Python, Perl..), integration&amp;#010 is based on simple XML or JSON delivered over HTTP, sometimes called the&amp;#010 &lt;a href='http://www.google.com/search?hl=en&amp;q=REST+HTTP' onclick=&quot;window.open('http://www.google.com/search?hl=en&amp;q=REST+HTTP');return false;&quot;&gt;REST&lt;/a&gt; (REpresentational State&amp;#010 Transfer) pattern.&amp;#010 &lt;P&gt; &amp;#010 When using this, you create a dynamic web page that generates XML or JSON data for&amp;#010 SmartClient to consume.&amp;#010 &lt;P&gt;&amp;#010 SmartClient DataSources can be configured to work with any pre-existing XML or JSON formats&amp;#010 your application is already using; see below.&amp;#010 &lt;P&gt;&amp;#010 For new applications, the ${isc.DocUtils.linkForRef('class:RestDataSource')} provides a complete XML or JSON-based&amp;#010 protocol that supports all of the features of SmartClient's databinding layer (data paging,&amp;#010 server-side validation errors, automatic cache synchronization, etc).  To use the&amp;#010 RestDataSource, simply write server code that can parse RestDataSource requests and produce&amp;#010 the required responses; example requests and responses are ${isc.DocUtils.linkForRef('class:RestDataSource','provided')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Consuming Existing XML and JSON formats&lt;/h4&gt;&amp;#010 &lt;p&gt;&amp;#010 For WSDL web services, see the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL binding topic')} first.&amp;#010 &lt;P&gt;&amp;#010 To display XML or JSON data in a visual component such as a ListGrid, you bind the component&amp;#010 to a ${isc.DocUtils.linkForRef('class:DataSource')} which provides the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','URL')} of the service, as&amp;#010 well as a declaration of how to form inputs to the service and how to interpret service&amp;#010 responses as DataSource records.&amp;#010 &lt;P&gt;&amp;#010 An XPath expression, the ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}, is applied to&amp;#010 the service response to select the XML elements or JSON objects that should be interpreted&amp;#010 as DataSource records.  Then, for each field of the DataSource, an optional&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} can be declared which selects the value for the field&amp;#010 from within each of the XML elements or JSON objects selected by the recordXPath.  If no&amp;#010 valueXPath is specified, the field name itself is taken as an XPath, which will select the&amp;#010 same-named subelement or property from the record element or object.&amp;#010 &lt;P&gt;&amp;#010 For example, the following code defines a DataSource that a ListGrid could bind to in order&amp;#010 to display an RSS 2.0 feed.&amp;#010 &lt;PRE&gt;&amp;#010    isc.DataSource.create({&amp;#010        dataURL:feedURL,&amp;#010        recordXPath:&quot;//item&quot;,&amp;#010        fields:[&amp;#010            { name:&quot;title&quot; },&amp;#010            { name:&quot;link&quot; },&amp;#010            { name:&quot;description&quot; }&amp;#010        ]&amp;#010    });&amp;#010 &lt;/PRE&gt;&amp;#010 A representative slice of an RSS 2.0 feed follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot; ?&amp;gt; &amp;#010     &amp;lt;rss version=&quot;2.0&quot;&amp;gt;&amp;#010     &amp;lt;channel&amp;gt;&amp;#010       &amp;lt;title&amp;gt;feed title&amp;lt;/title&amp;gt; &amp;#010       ...&amp;#010       &amp;lt;item&amp;gt;&amp;#010         &amp;lt;title&amp;gt;article title&amp;lt;/title&amp;gt; &amp;#010         &amp;lt;link&amp;gt;url of article&amp;lt;/link&amp;gt; &amp;#010         &amp;lt;description&amp;gt;&amp;#010            article description&amp;#010         &amp;lt;/description&amp;gt; &amp;#010       &amp;lt;/item&amp;gt;&amp;#010       &amp;lt;item&amp;gt;&amp;#010          ...&amp;#010 &lt;/pre&gt;&amp;#010 Here, the recordXPath selects a list of &amp;lt;item&amp;gt; elements.  Since the intended values&amp;#010 for each DataSource field appear as a simple subelements of each &amp;lt;item&amp;gt; element (eg&amp;#010 &amp;lt;description&amp;gt;), the field name is sufficient to select the correct values, and no&amp;#010 explicit valueXPath needs to be specified.&amp;#010 &lt;P&gt;&amp;#010 A running version of this example is available here: ${isc.DocUtils.linkForExampleId('rssFeed')}.  Further&amp;#010 examples of simple XML or JSON data loading using files stored on disk as the&amp;#010 &quot;service&quot; to contact: the ${isc.DocUtils.linkForExampleId('simpleJSON', 'Simple JSON')} example shows loading&amp;#010 data from a JSON file into a databound grid, and the&amp;#010 ${isc.DocUtils.linkForExampleId('xpathBinding', 'XPath Binding example')} shows loading XML and processing it with&amp;#010 XPaths.&amp;#010 &lt;P&gt;&amp;#010 &lt;H4&gt;Round Tripping: Loading, Editing and Saving&lt;/H4&gt;&amp;#010 &lt;P&gt;&amp;#010 For WSDL web services, see the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL binding topic')} first.&amp;#010 &lt;P&gt;&amp;#010 When a user triggers a DSRequest (eg, completes an inline edit in a grid), the request&amp;#010 data will be sent to the dataURL.  The ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')}&amp;#010 describes request and response data expected for each operation type.  &amp;#010 &lt;P&gt;&amp;#010 By using settings such as ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}, you can control how&amp;#010 DSRequests are sent to your backend so that you can handle them most easily.  By using the&amp;#010 same properties used to initially load data (eg&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}), you can control how SmartClient forms the&amp;#010 DSResponses that are then interpreted by ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Controlling how DSRequests are sent&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 According to the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')} being used, the&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource request data')}, if any, either becomes HTTP&amp;#010 params (sent by GET or POST), or an XML message as put together by&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.  For a DataSource invoking a WSDL-described web&amp;#010 service, XML serialization automatically handles namespacing and SOAP encoding.&amp;#010 &lt;P&gt;&amp;#010 Note that, by default, just ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is sent, not any of the metadata such&amp;#010 as ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')}.  This can be customized via&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}.&amp;#010 &lt;P&gt;&amp;#010 The URL to contact is set via the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL','dataURL')}&amp;#010 property.  If using a Web Service, the &lt;code&gt;dataURL&lt;/code&gt; defaults to the service location&amp;#010 URL embedded in the WSDL file.&amp;#010 &lt;P&gt;&amp;#010 For example, in the default configuration for non-WSDL binding, since&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','dataProtocol')} is &quot;getParams&quot;, ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is&amp;#010 sent as HTTP params in an HTTP &quot;GET&quot; operation.  Given:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; changes to an existing record, hence an &quot;update&quot; request&amp;#010 &lt;li&gt; a ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} field of &quot;id&quot; with value &quot;5&quot; on the&amp;#010 record to be updated&amp;#010 &lt;li&gt; a field &quot;age&quot; being changed to &quot;32&quot;&amp;#010 &lt;li&gt; &quot;dataURL&quot; of &quot;save.php&quot;&amp;#010 &lt;/ul&gt;&amp;#010 You will see an HTTP GET to the URL &lt;code&gt;save.php?id=5&amp;age=32&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Forming a DSResponse from the response data&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 A ${isc.DocUtils.linkForRef('class:DSResponse')} is created from the response data by using XPath&amp;#010 expressions declared in the schema (${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')} and &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','valueXPath')}) to extract DataSource record and field&amp;#010 values.&amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForExampleId('xmlEditSave', '&quot;Edit and Save&quot;')} example for sample XML responses for&amp;#010 all four operationTypes.  &amp;#010 &lt;P&gt;&amp;#010 Similar to input processing, by default DataSource layer metadata, such as&amp;#010 ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}, is not extracted from the response data.  You can&amp;#010 implement ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} to fill out the metadata fields of&amp;#010 the ${isc.DocUtils.linkForRef('class:DSResponse')}, in order to allow more DataSource features, such as paging and&amp;#010 validation errors, to be used with a web service that supports such features.  &amp;#010 &lt;P&gt;&amp;#010 See the ${isc.DocUtils.linkForExampleId('xmlServerValidationErrors', 'XML')} and &amp;#010 ${isc.DocUtils.linkForExampleId('jsonServerValidationErrors', 'JSON')} versions of the transformResponse()&amp;#010 example for an example of providing validation errors in XML or JSON responses." name="clientDataIntegration" type="group">
    <treeLocation>Concepts/Client-Server Integration</treeLocation>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <refs>method:DataSourceField.getFieldValue</refs>
    <refs>attr:DataSource.dataFormat</refs>
    <refs>attr:DataSource.callbackParam</refs>
    <refs>attr:DataSource.requestProperties</refs>
    <refs>attr:DataSource.dataTransport</refs>
    <refs>attr:DataSource.dropExtraFields</refs>
    <refs>attr:DataSource.serviceNamespace</refs>
    <refs>attr:DataSource.schemaNamespace</refs>
    <refs>attr:DataSource.recordXPath</refs>
    <refs>attr:DataSource.dataURL</refs>
    <refs>attr:DataSource.tagName</refs>
    <refs>attr:DataSourceField.valueXPath</refs>
    <refs>attr:OperationBinding.operationType</refs>
    <refs>attr:OperationBinding.operationId</refs>
    <refs>attr:OperationBinding.wsOperation</refs>
    <refs>attr:OperationBinding.dataURL</refs>
    <refs>attr:OperationBinding.dataProtocol</refs>
    <refs>attr:OperationBinding.dataFormat</refs>
    <refs>attr:OperationBinding.dataTransport</refs>
    <refs>attr:OperationBinding.callbackParam</refs>
    <refs>attr:OperationBinding.requestProperties</refs>
    <refs>attr:OperationBinding.defaultParams</refs>
    <refs>attr:OperationBinding.recordXPath</refs>
    <refs>attr:OperationBinding.recordName</refs>
    <refs>attr:OperationBinding.responseDataSchema</refs>
    <refs>attr:OperationBinding.useFlatFields</refs>
    <refs>attr:OperationBinding.xmlNamespaces</refs>
    <refs>type:DSDataFormat</refs>
    <refs>type:DSProtocol</refs>
</docItem>
<docItem exampleConfig="TreeGrid.xml" type="class" ref="class:TreeGrid" description="The Isomorphic SmartClient system supports hierarchical data (also referred to as tree data&amp;#010 due to its &quot;branching&quot; organization) with:&amp;#010 &lt;ul&gt;&amp;#010   &lt;li&gt; the ${isc.DocUtils.linkForRef('class:Tree')} class, which manipulates hierarchical data sets&amp;#010   &lt;li&gt; the TreeGrid widget class, which extends the ListGrid class to visually&amp;#010        present tree data in an expandable/collapsible format.&amp;#010 &lt;/ul&gt;&amp;#010 For information on DataBinding Trees, see ${isc.DocUtils.linkForRef('group:treeDataBinding')}.&amp;#010 &lt;p&gt;&amp;#010 A TreeGrid works just like a ${isc.DocUtils.linkForRef('class:ListGrid')}, except one column (specified by&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGridField.treeField')} shows a heirarchical ${isc.DocUtils.linkForRef('class:Tree')}.  A TreeGrid is not limited&amp;#010 to displaying just the ${isc.DocUtils.linkForRef('class:Tree')} column - you can define additional columns (via&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.fields')}) which will render just like the columns of a ${isc.DocUtils.linkForRef('class:ListGrid')}, and&amp;#010 support all of the functionality of ListGrid columns, such as&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue','formatters')}.&amp;#010 &lt;p&gt;&amp;#010 Except where explicitly overridden, ${isc.DocUtils.linkForRef('class:ListGrid')} methods, callbacks, and properties&amp;#010 apply to TreeGrids as well.  The ${isc.DocUtils.linkForRef('class:ListGrid')} defines some methods as taking/returning&amp;#010 ${isc.DocUtils.linkForRef('object:ListGridField')} and ${isc.DocUtils.linkForRef('object:ListGridRecord')}.  When using those methods in a TreeGrid,&amp;#010 those types will be ${isc.DocUtils.linkForRef('object:TreeGridField')} and ${isc.DocUtils.linkForRef('object:TreeNode')}, respectively." name="TreeGrid">
    <methods>method:TreeGrid.toggleFolder</methods>
    <methods>method:TreeGrid.openFolder</methods>
    <methods>method:TreeGrid.closeFolder</methods>
    <methods>method:TreeGrid.getOpenState</methods>
    <methods>method:TreeGrid.setOpenState</methods>
    <methods>method:TreeGrid.getSelectedPaths</methods>
    <methods>method:TreeGrid.setSelectedPaths</methods>
    <methods>method:TreeGrid.getViewState</methods>
    <methods>method:TreeGrid.setViewState</methods>
    <methods>method:TreeGrid.setData</methods>
    <methods>method:TreeGrid.canEditCell</methods>
    <methods>method:TreeGrid.rowClick</methods>
    <methods>method:TreeGrid.recordDoubleClick</methods>
    <methods>method:TreeGrid.openLeaf</methods>
    <methods>method:TreeGrid.getDragTrackerIcon</methods>
    <methods>method:TreeGrid.willAcceptDrop</methods>
    <methods>method:TreeGrid.getEventRow</methods>
    <methods>method:TreeGrid.getDropFolder</methods>
    <methods>method:TreeGrid.transferSelectedData</methods>
    <methods>method:TreeGrid.folderDrop</methods>
    <methods>method:TreeGrid.getNodeTitle</methods>
    <methods>method:TreeGrid.getOpenIcon</methods>
    <methods>method:TreeGrid.getExtraIcon</methods>
    <methods>method:TreeGrid.getIcon</methods>
    <methods>method:TreeGrid.setNodeIcon</methods>
    <methods>method:TreeGrid.folderOpened</methods>
    <methods>method:TreeGrid.folderClosed</methods>
    <methods>method:TreeGrid.folderClick</methods>
    <methods>method:TreeGrid.leafClick</methods>
    <methods>method:TreeGrid.nodeClick</methods>
    <methods>method:TreeGrid.folderContextClick</methods>
    <methods>method:TreeGrid.leafContextClick</methods>
    <methods>method:TreeGrid.nodeContextClick</methods>
    <methods>method:TreeGrid.fetchData</methods>
    <methods>method:TreeGrid.filterData</methods>
    <treeLocation>Client Reference/Grids</treeLocation>
    <attrs>attr:TreeGrid.animateFolders</attrs>
    <attrs>attr:TreeGrid.animateFolderTime</attrs>
    <attrs>attr:TreeGrid.animateFolderSpeed</attrs>
    <attrs>attr:TreeGrid.animateFolderEffect</attrs>
    <attrs>attr:TreeGrid.dataSource</attrs>
    <attrs>attr:TreeGrid.data</attrs>
    <attrs>attr:TreeGrid.initialData</attrs>
    <attrs>attr:TreeGrid.loadDataOnDemand</attrs>
    <attrs>attr:TreeGrid.fields</attrs>
    <attrs>attr:TreeGrid.treeFieldTitle</attrs>
    <attrs>attr:TreeGrid.showRoot</attrs>
    <attrs>attr:TreeGrid.separateFolders</attrs>
    <attrs>attr:TreeGrid.displayNodeType</attrs>
    <attrs>attr:TreeGrid.canDragRecordsOut</attrs>
    <attrs>attr:TreeGrid.canAcceptDroppedRecords</attrs>
    <attrs>attr:TreeGrid.canReorderRecords</attrs>
    <attrs>attr:TreeGrid.canDropOnLeaves</attrs>
    <attrs>attr:TreeGrid.canReparentNodes</attrs>
    <attrs>attr:TreeGrid.dragDataAction</attrs>
    <attrs>attr:TreeGrid.parentAlreadyContainsChildMessage</attrs>
    <attrs>attr:TreeGrid.cantDragIntoSelfMessage</attrs>
    <attrs>attr:TreeGrid.cantDragIntoChildMessage</attrs>
    <attrs>attr:TreeGrid.indentSize</attrs>
    <attrs>attr:TreeGrid.iconSize</attrs>
    <attrs>attr:TreeGrid.folderIcon</attrs>
    <attrs>attr:TreeGrid.dropIconSuffix</attrs>
    <attrs>attr:TreeGrid.openIconSuffix</attrs>
    <attrs>attr:TreeGrid.closedIconSuffix</attrs>
    <attrs>attr:TreeGrid.nodeIcon</attrs>
    <attrs>attr:TreeGrid.showOpenIcons</attrs>
    <attrs>attr:TreeGrid.showDropIcons</attrs>
    <attrs>attr:TreeGrid.customIconProperty</attrs>
    <attrs>attr:TreeGrid.showCustomIconOpen</attrs>
    <attrs>attr:TreeGrid.showCustomIconDrop</attrs>
    <attrs>attr:TreeGrid.customIconOpenProperty</attrs>
    <attrs>attr:TreeGrid.customIconDropProperty</attrs>
    <attrs>attr:TreeGrid.folderOpenImage</attrs>
    <attrs>attr:TreeGrid.folderClosedImage</attrs>
    <attrs>attr:TreeGrid.folderDropImage</attrs>
    <attrs>attr:TreeGrid.fileImage</attrs>
    <attrs>attr:TreeGrid.manyItemsImage</attrs>
    <attrs>attr:TreeGrid.showConnectors</attrs>
    <attrs>attr:TreeGrid.openerImage</attrs>
    <attrs>attr:TreeGrid.connectorImage</attrs>
    <implementsInterfaces>DataBoundComponent</implementsInterfaces>
</docItem>
<docItem ref="attr:ListGridField.icon" flags="IR" description="Optional icon to show next to the title for this field. &amp;#010 Should be set to a URL to an image. Relative paths will be evaluated starting at&amp;#010 the imgDir of this component. This URL is partial - it may be updated to indicate&amp;#010 the current disabled (etc) state of the field." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="object:ListGridField">
</docItem>
<docItem ref="attr:FusionChart.fusionVersion" flags="IR" description="Version of FusionCharts to assume.  If version is &quot;2.3&quot;, different names are used for&amp;#010 the .swf files for each chart (to match the default names in FusionCharts 2.3), and a&amp;#010 lower version of Flash is required (6.0)." name="fusionVersion" valueType="String" defaultValue="&quot;3.0&quot;" type="attr" definingClass="class:FusionChart">
</docItem>
<docItem ref="attr:Window.showMinimizeButton" flags="IRW" description="If true, show a minimize button in the header--clicking it minimizes the Window." name="showMinimizeButton" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <setter>setShowMinimizeButton</setter>
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:SliderItem.numValues" flags="IRW" description="The number of discrete values represented by slider. If specified, the range of valid&amp;#010 values (between &lt;code&gt;minValue&lt;/code&gt; and &lt;code&gt;maxValue&lt;/code&gt;) will be divided into&amp;#010 this many steps. As the thumb is moved along the track it will only select these values&amp;#010 and appear to jump between the steps." name="numValues" valueType="integer" defaultValue="null" type="attr" definingClass="class:SliderItem">
    <examples>${isc.DocUtils.linkForExampleId('sliderItem')}</examples>
</docItem>
<docItem ref="attr:CubeGrid.wrapFacetValueTitles" flags="IRW" description="Whether to allow text wrapping on facet value titles" name="wrapFacetValueTitles" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:ButtonItem.endRow" flags="IRW" description="These items are in a row by themselves by default" name="endRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ButtonItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="method:ListGrid.stopHover" flags="" description=" Notification that the user is no longer hovering over some cell. Hides the current hover canvas&amp;#010 if one is showing. &amp;#010" name="stopHover" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:GridHilite.htmlAfter" flags="IR" description="HTML to append to the end of cell values where this hilite is applied." name="htmlAfter" valueType="HTML" defaultValue="null" type="attr" definingClass="object:GridHilite">
</docItem>
<docItem ref="group:data_and_metadata" name="data_and_metadata" type="group">
    <refs>method:CubeGrid.setFacetTitle</refs>
    <refs>method:CubeGrid.setFacetValueTitle</refs>
</docItem>
<docItem ref="attr:ToolbarItem.startRow" flags="IRW" description="these items are in a row by themselves by default" name="startRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ToolbarItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:TabSet" description="The TabSet class allows components on several panes to share the same space. The tabs at &amp;#010 the top can be selected by the user to show each pane. &amp;#010 &lt;P&gt;&amp;#010 Tabs are configured via the &lt;code&gt;tabs&lt;/code&gt; property, each of which has a&amp;#010 &lt;code&gt;pane&lt;/code&gt; property which will be displayed in the main pane when that tab is&amp;#010 selected." name="TabSet" type="class">
    <methods>method:TabSet.getPaneContainerEdges</methods>
    <methods>method:TabSet.setTabTitle</methods>
    <methods>method:TabSet.enableTab</methods>
    <methods>method:TabSet.disableTab</methods>
    <methods>method:TabSet.addTab</methods>
    <methods>method:TabSet.addTabs</methods>
    <methods>method:TabSet.removeTab</methods>
    <methods>method:TabSet.removeTabs</methods>
    <methods>method:TabSet.closeClick</methods>
    <methods>method:TabSet.tabIconClick</methods>
    <methods>method:TabSet.getTabObject</methods>
    <methods>method:TabSet.getTab</methods>
    <methods>method:TabSet.getTabPane</methods>
    <methods>method:TabSet.getTabNumber</methods>
    <methods>method:TabSet.updateTab</methods>
    <methods>method:TabSet.scrollForward</methods>
    <methods>method:TabSet.scrollBack</methods>
    <methods>method:TabSet.getSelectedTab</methods>
    <methods>method:TabSet.getSelectedTabNumber</methods>
    <methods>method:TabSet.selectTab</methods>
    <methods>method:TabSet.tabSelected</methods>
    <methods>method:TabSet.tabDeselected</methods>
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:TabSet.tabs</attrs>
    <attrs>attr:TabSet.tabBar</attrs>
    <attrs>attr:TabSet.tabProperties</attrs>
    <attrs>attr:TabSet.tabBarPosition</attrs>
    <attrs>attr:TabSet.tabBarAlign</attrs>
    <attrs>attr:TabSet.tabBarThickness</attrs>
    <attrs>attr:TabSet.selectedTab</attrs>
    <attrs>attr:TabSet.canCloseTabs</attrs>
    <attrs>attr:TabSet.closeTabIcon</attrs>
    <attrs>attr:TabSet.tabBarControls</attrs>
    <attrs>attr:TabSet.showTabScroller</attrs>
    <attrs>attr:TabSet.showTabPicker</attrs>
    <attrs>attr:TabSet.animateTabScrolling</attrs>
    <attrs>attr:TabSet.scrollerButtonSize</attrs>
    <attrs>attr:TabSet.pickerButtonSize</attrs>
    <attrs>attr:TabSet.skinImgDir</attrs>
    <attrs>attr:TabSet.symmetricScroller</attrs>
    <attrs>attr:TabSet.scrollerSrc</attrs>
    <attrs>attr:TabSet.scrollerHSrc</attrs>
    <attrs>attr:TabSet.scrollerVSrc</attrs>
    <attrs>attr:TabSet.symmetricPickerButton</attrs>
    <attrs>attr:TabSet.pickerButtonSrc</attrs>
    <attrs>attr:TabSet.pickerButtonHSrc</attrs>
    <attrs>attr:TabSet.pickerButtonVSrc</attrs>
    <attrs>attr:TabSet.paneContainer</attrs>
    <attrs>attr:TabSet.paneContainerClassName</attrs>
    <attrs>attr:TabSet.paneContainerOverflow</attrs>
    <attrs>attr:TabSet.symmetricEdges</attrs>
    <attrs>attr:TabSet.leftEdgeSizes</attrs>
    <attrs>attr:TabSet.topEdgeSizes</attrs>
    <attrs>attr:TabSet.bottomEdgeSizes</attrs>
    <attrs>attr:TabSet.rightEdgeSizes</attrs>
    <attrs>attr:TabSet.leftEdgeOffsets</attrs>
    <attrs>attr:TabSet.rightEdgeOffsets</attrs>
    <attrs>attr:TabSet.topEdgeOffsets</attrs>
    <attrs>attr:TabSet.bottomEdgeOffsets</attrs>
    <attrs>attr:TabSet.showPaneContainerEdges</attrs>
    <attrs>attr:TabSet.showPartialEdges</attrs>
</docItem>
<docItem ref="attr:DSResponse.errors" flags="R" description="Server-side validation errors for an attempted &quot;update&quot; or &quot;add&quot; operation, as a JS Object&amp;#010 where each property name is a field name from the record and each property value is an error&amp;#010 message to be shown to the user.  For example:&lt;pre&gt;&amp;#010     dsResponse.errors = {&amp;#010         userId : &quot;A user with this userId already exists&quot;,&amp;#010         orderId : &quot;No Order with ID '6A18294' exists&quot;&amp;#010     }&amp;#010 &lt;/pre&gt;&amp;#010 The Java API DSResponse.addError(fieldName, errorMessage) is used to send server-side errors&amp;#010 to the client.  See the Java Server Reference for details." name="errors" valueType="Object" defaultValue="null" type="attr" definingClass="class:DSResponse">
<seeAlso ref="method:DataSource.handleError">
</seeAlso>
    <groups>errorHandling</groups>
</docItem>
<docItem ref="attr:DynamicForm.showErrorStyle" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorStyle" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="attr:ImgButton.showRollOver" flags="IRW" description="Should we visibly change state when the mouse goes over this object?" name="showRollOver" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:FormItem.defaultValue" flags="IRW" description="Value used when no value is provided for this item. Note that whenever this item's value&amp;#010 is cleared by the user or set to &lt;code&gt;null&lt;/code&gt; programatically, it will be reverted&amp;#010 to the &lt;code&gt;defaultValue&lt;/code&gt;. Developers should use the ${isc.DocUtils.linkForRef('attr:DynamicForm.values')} &amp;#010 object if their intention is to provide an initial value for a field in a form rather &amp;#010 than a value to use in place of &lt;code&gt;null&lt;/code&gt;." name="defaultValue" valueType="any" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="method:FormItem.defaultDynamicValue">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('fieldEnableDisable')}</examples>
    <groups>basics</groups>
</docItem>
<docItem ref="class:ImgButton" description="A Img that behaves like a button, going through up/down/over state transitions in response to&amp;#010 user events.  Supports an optional title, and will auto-size to accomodate the title text if&amp;#010 &lt;code&gt;overflow&lt;/code&gt; is set to &quot;visible&quot;.&amp;#010 &lt;P&gt;&amp;#010 An examples of use is Window minimize/close buttons." name="ImgButton" type="class">
    <methods>method:ImgButton.getTitle</methods>
    <methods>method:ImgButton.setTitle</methods>
    <methods>method:ImgButton.setIconOrientation</methods>
    <methods>method:ImgButton.setIcon</methods>
    <methods>method:ImgButton.setAutoFit</methods>
    <methods>method:ImgButton.setBaseStyle</methods>
    <methods>method:ImgButton.select</methods>
    <methods>method:ImgButton.deselect</methods>
    <methods>method:ImgButton.isSelected</methods>
    <methods>method:ImgButton.setSelected</methods>
    <methods>method:ImgButton.addToRadioGroup</methods>
    <methods>method:ImgButton.removeFromRadioGroup</methods>
    <methods>method:ImgButton.setActionType</methods>
    <methods>method:ImgButton.getActionType</methods>
    <methods>method:ImgButton.setState</methods>
    <methods>method:ImgButton.setDisabled</methods>
    <methods>method:ImgButton.getState</methods>
    <methods>method:ImgButton.action</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:ImgButton.title</attrs>
    <attrs>attr:ImgButton.hiliteAccessKey</attrs>
    <attrs>attr:ImgButton.icon</attrs>
    <attrs>attr:ImgButton.iconSize</attrs>
    <attrs>attr:ImgButton.iconWidth</attrs>
    <attrs>attr:ImgButton.iconHeight</attrs>
    <attrs>attr:ImgButton.iconOrientation</attrs>
    <attrs>attr:ImgButton.iconAlign</attrs>
    <attrs>attr:ImgButton.iconSpacing</attrs>
    <attrs>attr:ImgButton.showDisabledIcon</attrs>
    <attrs>attr:ImgButton.showRollOverIcon</attrs>
    <attrs>attr:ImgButton.showFocusedIcon</attrs>
    <attrs>attr:ImgButton.showDownIcon</attrs>
    <attrs>attr:ImgButton.showSelectedIcon</attrs>
    <attrs>attr:ImgButton.autoFit</attrs>
    <attrs>attr:ImgButton.baseStyle</attrs>
    <attrs>attr:ImgButton.selected</attrs>
    <attrs>attr:ImgButton.radioGroup</attrs>
    <attrs>attr:ImgButton.actionType</attrs>
    <attrs>attr:ImgButton.state</attrs>
    <attrs>attr:ImgButton.showDisabled</attrs>
    <attrs>attr:ImgButton.showDown</attrs>
    <attrs>attr:ImgButton.showFocus</attrs>
    <attrs>attr:ImgButton.showFocused</attrs>
    <attrs>attr:ImgButton.showRollOver</attrs>
    <attrs>attr:ImgButton.align</attrs>
    <attrs>attr:ImgButton.valign</attrs>
    <attrs>attr:ImgButton.showTitle</attrs>
    <attrs>attr:ImgButton.labelHPad</attrs>
    <attrs>attr:ImgButton.labelVPad</attrs>
    <attrs>attr:ImgButton.src</attrs>
</docItem>
<docItem ref="method:ListGrid.editorExit" flags="A" description=" Callback fired when the user attempts to navigate away from the current edit cell, &amp;#010 or complete the current edit.&amp;#010 &lt;P&gt;&amp;#010 Return false from this method to cancel the default behavior (Saving / cancelling the&amp;#010 current edit / moving to the next edit cell).&amp;#010 &lt;P&gt;&amp;#010 This callback is typically used to dynamically update values or value maps for related&amp;#010 fields (via ${isc.DocUtils.linkForRef('method:ListGrid.setEditValue')} and ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap')} respectively, or to&amp;#010 implement custom navigation (via ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing(rowNum,colNum)')}.&amp;#010 &lt;P&gt;&amp;#010 Can be overriden at the field level as field.editorExit.&amp;#010&amp;#010" name="editorExit" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.editorExit">
</seeAlso>
<params description="How was the edit completion fired?" optional="false" name="editCompletionEvent" type="EditCompletionEvent">
</params>
<params description="record for the cell being edited" optional="false" name="record" type="ListGridRecord">
</params>
<params description="new value for the cell being edited" optional="false" name="newValue" type="any">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus&amp;#010                      in this edit cell." type="boolean"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="group:dragndrop" name="dragndrop" type="group">
    <refs>attr:Toolbar.canReorderItems</refs>
    <refs>attr:Toolbar.canResizeItems</refs>
    <refs>attr:Toolbar.canAcceptDrop</refs>
</docItem>
<docItem exampleConfig="DateItem.xml" ref="class:DateItem" description="Item for manipulating Dates.&amp;#010 &lt;p&gt;&amp;#010 Can be rendered as a text field, or as 3 selects for day, month, year.  Includes optional&amp;#010 pop-up picker." name="DateItem" type="class">
    <attrs>attr:DateItem.useTextField</attrs>
    <attrs>attr:DateItem.textAlign</attrs>
    <attrs>attr:DateItem.invalidDateStringMessage</attrs>
    <attrs>attr:DateItem.startDate</attrs>
    <attrs>attr:DateItem.endDate</attrs>
    <attrs>attr:DateItem.centuryThreshold</attrs>
    <attrs>attr:DateItem.displayFormat</attrs>
    <attrs>attr:DateItem.inputFormat</attrs>
    <examples>${isc.DocUtils.linkForExampleId('dateItem')}</examples>
</docItem>
<docItem ref="attr:CubeGrid.chartConstructor" flags="IR" description="Name of the SmartClient Class to be used when creating charts.  Must support the&amp;#010 ${isc.DocUtils.linkForRef('interface:Chart')} interface." name="chartConstructor" valueType="Classname" defaultValue="&quot;FusionChart&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="method:ListGrid.reorderField" flags="A" description=" Reorder a particular field &amp;#010&amp;#010" name="reorderField" type="method" definingClass="class:ListGrid">
<params description="Number of the field to reorder" optional="false" name="fieldNum" type="number">
</params>
<params description="New position for that field" optional="false" name="moveToPosition" type="number">
</params>
</docItem>
<docItem ref="method:ListGrid.setShowFilterEditor" flags="" description=" Setter for the ${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')} property. Allows the filter editor to be&amp;#010 shown or hidden at runtime.&amp;#010" name="setShowFilterEditor" type="method" definingClass="class:ListGrid">
<params description="true if the filter editor should be shown, false if it should be hidden" optional="false" name="value" type="boolean">
</params>
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:Canvas.minWidth" flags="IRWA" description="Minimum width that this Canvas can be resized to.&amp;#010 &lt;P&gt;&amp;#010 Note that a Canvas with overflow:&quot;visible&quot; has an implicit minimize size based on it's&amp;#010 contents." name="minWidth" valueType="number" defaultValue="10" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Class.isA" flags="" description="&amp;#010	Returns whether this object is of a particular class by class name, either as a direct&amp;#010	instance of that class or as subclass of that class, or by implementing an interface&amp;#010  that has been mixed into the class.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010	NOTE: this only applies to ISC's class system, eg:  &lt;code&gt;myInstance.isA(&quot;Object&quot;)&lt;/code&gt; will be&amp;#010	false.&amp;#010&amp;#010" name="isA" type="method" definingClass="class:Class">
<params description="Class name to test against" optional="false" name="className" type="string">
</params>
<returns description="whether this object is of that Class                                   or a subClass of that Class" type="boolean"></returns>
</docItem>
<docItem ref="attr:CubeGrid.baseStyle" flags="IR" description="The base name for the CSS class applied to cells. This style will have &quot;Dark&quot;, &amp;#010 &quot;Over&quot;, &quot;Selected&quot;, or &quot;Disabled&quot; appended to it according to the state of the cell." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;cubeCell&quot;" type="attr" definingClass="class:CubeGrid">
    <getter>getBaseStyle</getter>
<seeAlso ref="method:CubeGrid.getCellStyle">
</seeAlso>
<seeAlso ref="method:CubeGrid.getBaseStyle">
</seeAlso>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:Canvas.resizeBarTarget" flags="IR" description="When this Canvas is included as a member in a Layout, and ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar')} is set to&amp;#010 &lt;code&gt;true&lt;/code&gt; so that a resizeBar is created, &lt;code&gt;resizeBarTarget:&quot;next&quot;&lt;/code&gt; can be&amp;#010 set to indicate that the resizeBar should resize the next member of the layout rather than&amp;#010 this one.  For resizeBars that support hiding their target member when clicked on, &amp;#010 &lt;code&gt;resizeBarTarget:&quot;next&quot;&lt;/code&gt; also means that the next member will be the one hidden.&amp;#010 &lt;P&gt;&amp;#010 This is typically used to create a 3-way split pane, where left and right-hand sections can&amp;#010 be resized or hidden to allow a center section to expand.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; as with any Layout, to ensure all available space is used, one or more members&amp;#010 must maintain a flexible size (eg 75%, or *).  In a two pane Layout with a normal resize&amp;#010 bar, to fill all space after a user resizes, the member on the &lt;b&gt;right&lt;/b&gt; should have&amp;#010 flexible size.  With resizeBarTarget:&quot;next&quot;, the member on the &lt;b&gt;left&lt;/b&gt; should have&amp;#010 flexible size." name="resizeBarTarget" valueType="String" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showResizeBar">
</seeAlso>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="method:CubeGrid.enableHilite" flags="" description=" Enable / disable a ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites','hilite')}&amp;#010&amp;#010" name="enableHilite" type="method" definingClass="class:CubeGrid">
<params description="ID of hilite to enable" optional="false" name="hiliteID" type="string">
</params>
<params description="new enabled state to apply - if null, defaults to true" optional="true" name="enable" type="boolean">
</params>
    <groups>hiliting</groups>
</docItem>
<docItem ref="class:Time" description="Class with helper methods for converting dates to and from formatted time strings." name="Time" type="class">
    <classAttrs>classAttr:Time.UTCHoursOffset</classAttrs>
    <classAttrs>classAttr:Time.displayFormat</classAttrs>
    <classAttrs>classAttr:Time.shortDisplayFormat</classAttrs>
    <classAttrs>classAttr:Time.AMIndicator</classAttrs>
    <classAttrs>classAttr:Time.PMIndicator</classAttrs>
    <classMethods>classMethod:Time.toTime</classMethods>
    <classMethods>classMethod:Time.toShortTime</classMethods>
    <classMethods>classMethod:Time.parseInput</classMethods>
    <classMethods>classMethod:Time.createDate</classMethods>
    <classMethods>classMethod:Time.setShortDisplayFormat</classMethods>
    <classMethods>classMethod:Time.setNormalDisplayFormat</classMethods>
    <classMethods>classMethod:Time.compareTimes</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="method:ListGrid.rowClick" flags="A" description="&amp;#010 Event handler for when rows in the body are clicked upon. The default implementation handles&amp;#010 firing ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')} if appropriate, and fires&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.recordClick')} and/or ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} if set. Developers&amp;#010 should typically implement recordClick rather than overriding this method.&amp;#010&amp;#010" name="rowClick" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.recordClick">
</seeAlso>
<params description="record object returned from getCellRecord()" optional="false" name="record" type="ListGridRecord">
</params>
<params description="index of the row where the click occurred" optional="false" name="recordNum" type="number">
</params>
<params description="index of the col where the click occurred" optional="false" name="fieldNum" type="number">
</params>
<params description="indicates whether this was a synthesized record                                              click in response to a keyboard event" optional="true" name="keyboardGenerated" type="boolean">
</params>
<returns type="boolean">
</returns>
    <groups>events</groups>
    <groups>events</groups>
</docItem>
<docItem ref="attr:ResultSet.disableCacheSync" flags="IRA" description="By default when the data of this ResultSet's dataSource is modified, the ResultSet will&amp;#010 be updated to display these changes.&amp;#010 Set this flag to true to disable this behavior." name="disableCacheSync" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ResultSet">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeExactLength" flags="IRA" description="Default error message to display when standard &lt;code&gt;lengthRange&lt;/code&gt; type validator&amp;#010 has &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt; set to the same value,&amp;#010 and returns false because the value passed is not the same length as these limits.&lt;br&gt;&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeExactLength" valueType="string" defaultValue="&quot;Must be exactly ${max} characters&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:DynamicForm.validate" flags="" description=" Validates the form without submitting it, and redraws the form to display error messages&amp;#010 if there are any validation errors. Returns true if validation succeeds, or false if&amp;#010 validation fails.&lt;br&gt;&amp;#010 For databound forms, any Datasource field validators will be run even if there is no &amp;#010 associated item in the form.&lt;br&gt;&amp;#010 Validators will also be run on hidden form items&lt;br&gt;&amp;#010 In both these cases, validation failure can be handled via &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}&amp;#010&amp;#010" name="validate" type="method" definingClass="class:DynamicForm">
<params description="Should validators be processed for non-visible fields         such as dataSource fields with no associated item or fields with visibility set to&amp;#010         &lt;code&gt;&quot;hidden&quot;&lt;/code&gt;?" optional="false" name="validateHiddenFields" type="boolean">
</params>
<returns description="true if validation succeeds, or false if validation fails." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('validationType')}</examples>
    <groups>validation</groups>
</docItem>
<docItem ref="class:Toolbar" description="A Toolbar creates a vertical or horizontal strip of similar components (typically Buttons)&amp;#010 and provides managed resizing and reordering behavior over those components.&amp;#010 &lt;p&gt;&amp;#010 If you are creating a bar with a mixture of different elements (eg some MenuButtons, some&amp;#010 Labels, some Buttons, some custom components), you want to use a ${isc.DocUtils.linkForRef('class:ToolStrip')}.  A&amp;#010 Toolbar is better suited for managing a set of highly similar, interchangeable components,&amp;#010 such as ListGrid headers." name="Toolbar" type="class">
    <methods>method:Toolbar.getButton</methods>
    <methods>method:Toolbar.getButtonNumber</methods>
    <methods>method:Toolbar.selectButton</methods>
    <methods>method:Toolbar.deselectButton</methods>
    <methods>method:Toolbar.itemClick</methods>
    <methods>method:Toolbar.itemDragResized</methods>
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:Toolbar.buttons</attrs>
    <attrs>attr:Toolbar.vertical</attrs>
    <attrs>attr:Toolbar.buttonConstructor</attrs>
    <attrs>attr:Toolbar.canReorderItems</attrs>
    <attrs>attr:Toolbar.canResizeItems</attrs>
    <attrs>attr:Toolbar.canAcceptDrop</attrs>
    <attrs>attr:Toolbar.buttonDefaults</attrs>
</docItem>
<docItem ref="interface:DataBoundComponent" description="A DataBoundComponent is a widget that can configure itself for viewing or editing objects which&amp;#010 share a certain schema by &quot;binding&quot; to the schema for that object (called a &quot;DataSource&quot;).&amp;#010 &lt;P&gt;&amp;#010 A schema (or DataSource) describes an object as consisting of a set of properties (or&amp;#010 &quot;fields&quot;).&amp;#010 &lt;P&gt;&amp;#010 DataBoundComponents have a ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','common set of APIs')} for&amp;#010 dealing with binding to DataSources, &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','overriding or augmenting')} the schema information&amp;#010 provided by a DataSource, and manipulating objects or sets of object from the DataSource.&amp;#010 &lt;P&gt;&amp;#010 The following visual components currently support databinding:&lt;pre&gt;&amp;#010   ${isc.DocUtils.linkForRef('class:DynamicForm')}&amp;#010   ${isc.DocUtils.linkForRef('class:DetailViewer')}&amp;#010   ${isc.DocUtils.linkForRef('class:ListGrid')}&amp;#010   ${isc.DocUtils.linkForRef('class:TreeGrid')}&amp;#010   ${isc.DocUtils.linkForRef('class:CubeGrid')}&amp;#010 &lt;/pre&gt;&amp;#010 The following non-visual components also support databinding:&lt;pre&gt;&amp;#010   ${isc.DocUtils.linkForRef('class:ValuesManager')}&amp;#010   ${isc.DocUtils.linkForRef('class:ResultSet')}&amp;#010   ${isc.DocUtils.linkForRef('class:ResultTree')}&amp;#010 &lt;/pre&gt;" name="DataBoundComponent" type="interface">
    <methods>method:DataBoundComponent.setDataSource</methods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:DataBoundComponent.dataSource</attrs>
    <attrs>attr:DataBoundComponent.dataPageSize</attrs>
    <attrs>attr:DataBoundComponent.fields</attrs>
    <attrs>attr:DataBoundComponent.useAllDataSourceFields</attrs>
    <attrs>attr:DataBoundComponent.showHiddenFields</attrs>
    <attrs>attr:DataBoundComponent.showDetailFields</attrs>
    <attrs>attr:DataBoundComponent.showComplexFields</attrs>
    <attrs>attr:DataBoundComponent.fetchOperation</attrs>
    <attrs>attr:DataBoundComponent.updateOperation</attrs>
    <attrs>attr:DataBoundComponent.addOperation</attrs>
    <attrs>attr:DataBoundComponent.removeOperation</attrs>
    <attrs>attr:DataBoundComponent.useFlatFields</attrs>
</docItem>
<docItem ref="classMethod:RPCManager.handleError" flags="" description=" &lt;code&gt;handleError&lt;/code&gt; will be called if ${isc.DocUtils.linkForRef('attr:RPCResponse.status')} is negative and&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} was not set.&amp;#010 &lt;p&gt;&amp;#010 This method is called for both ${isc.DocUtils.linkForRef('class:DSResponse')}s and ${isc.DocUtils.linkForRef('class:RPCResponse')}s that have a&amp;#010 non-success status.  You can check whether the response is a DSResponse by checking&amp;#010 &lt;code&gt;response.isDSResponse&lt;/code&gt;.&amp;#010 &lt;p&gt;&amp;#010 By default &lt;code&gt;handleError()&lt;/code&gt; always logs a warning.  In addition, if&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCResponse.data','response.data')} was set to a String, a warning dialog will be&amp;#010 shown to the user with response.data as the message, which allows the server to send&amp;#010 user error messages back without writing custom client-side error handling.&amp;#010 &lt;p&gt;&amp;#010 To do custom error handling that is specific to a particular component or type of&amp;#010 request, set ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} and deal with errors in the&amp;#010 rpcRequest.callback.  To change the default system-wide error handling, override this&amp;#010 method.  Note that since &lt;code&gt;handleError()&lt;/code&gt; is a class method, to override it&amp;#010 you will call ${isc.DocUtils.linkForRef('classMethod:Class.addClassProperties','addClassProperties()')} rather than&amp;#010 addProperties(), like so:&amp;#010 &lt;pre&gt;&amp;#010     isc.RPCManager.addClassProperties({&amp;#010         handleError : function (response, request) { .. custom handling .. }&amp;#010     })&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 If you're using the xmlHttpRequest ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}, you can access the &amp;#010 &lt;a href='http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html' onclick=&quot;window.open('http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html');return false;&quot;&gt;HTTP status code&lt;/a&gt;&amp;#010 of the response (eg 404 Not Found or 500 Server Error) as ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}.&amp;#010 &lt;P&gt;&amp;#010 For very advanced usage, the response.xmlHttpRequest contains the native XMLHttpRequest&amp;#010 object used to make the request.  Accessing this object is subject to possible&amp;#010 cross-platform bugs and inconsistencies, and Isomorphic recommends that you wrap any&amp;#010 access to the XMLHttpRequest object in a try/catch block because some browsers may throw&amp;#010 exceptions when certain attributes of this object are accessed.  For example, if you try&amp;#010 to access XMLHttpRequest.status (for the HTTP status code) when the network cable &amp;#010 is unpluged in Windows, you'll get an Exception in Firefox.&amp;#010&amp;#010" name="handleError" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="method:DataSource.handleError">
</seeAlso>
<params description="the RPCResponse or DSResponse object returned from the server" optional="false" name="response" type="Response">
</params>
<params description="the RPCRequest or DSRequest that was sent to the server" optional="false" name="request" type="Request">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:SerializationContext.useFlatFields" flags="IR" description="Enables flat serialization mode, as described for ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')}." name="useFlatFields" valueType="boolean" defaultValue="null" type="attr" definingClass="object:SerializationContext">
</docItem>
<docItem ref="attr:CubeGrid.columnFacets" flags="IRW" description="The list of facets that will appear on top of the body" name="columnFacets" valueType="array" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:ImgButton.valign" flags="IRW" description="Vertical alignment of this component's title." name="valign" valueType="VerticalAlignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:ImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetValueHoverVAlign" flags="IRWA" description="Allows the developer to override the vertical text alignment of hover tips shown for&amp;#010 facet values.  If unspecified the hover canvas content alignment will be set by&amp;#010 &lt;code&gt;this.hoverVAlign&lt;/code&gt; if specified." name="facetValueHoverVAlign" valueType="VerticalAlignment" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverVAlign">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="attr:ListGrid.generateDoubleClickOnEnter" flags="IRWA" description="If true, when the user navigates to a cell using arrow keys and hits Enter, &amp;#010 the cell will respond to a double click event." name="generateDoubleClickOnEnter" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="method:FormItem.getTitle" flags="A" description="	Return the title of this formItem&amp;#010" name="getTitle" type="method" definingClass="class:FormItem">
<returns description="title for the formItem" type="HTML"></returns>
    <groups>drawing</groups>
</docItem>
<docItem ref="method:List.intersect" flags="" description=" Return the list of items that are in both this list and the passed-in list(s).&amp;#010&amp;#010" name="intersect" type="method" definingClass="interface:List">
<params description="lists to intersect with" optional="false" name="lists" type="all List arguments">
</params>
<returns description="intersection" type="List"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="method:Array.add" flags="" description=" Add an object to this list, at the end&amp;#010&amp;#010" name="add" type="method" definingClass="object:Array">
<params description="object to add" optional="false" name="object" type="any">
</params>
<returns description="pointer to the object passed in" type="any"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="method:ListGrid.rowMouseUp" flags="" description=" Called when a row receives a mouseup event.&amp;#010&amp;#010" name="rowMouseUp" type="method" definingClass="class:ListGrid">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:CubeGrid.getColumnFacetLayout" flags="" description=" Get the current heights of the column facets, as:&lt;br&gt; &amp;#010 [ {facetId:facetId, height:currentHeight}, ... ]&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getColumnFacetLayout" type="method" definingClass="class:CubeGrid">
<returns description="array of {facetId:facetId, height:height} objects" type="array"></returns>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeBottom" flags="IR" description="Height in pixels for bottom corners and edges.  Defaults to edgeSize when unset." name="edgeBottom" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.separatorRows" flags="IR" description="Array of records to show between matching and non-matching rows in the PickList.&amp;#010 &lt;P&gt;&amp;#010 Not valid for ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource','databound pickLists')}." name="separatorRows" valueType="Array of ListGridRecord" defaultValue="[{isSeparator:true}]" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:StretchImgButton.radioGroup" flags="IRWA" description="String identifier for this canvas's mutually exclusive selection group." name="radioGroup" valueType="string" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:RestDataSource.updateDataURL" flags="IR" description="Custom dataURL for update type operations" name="updateDataURL" valueType="string" defaultValue="null" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="group:componentXML" title="Component XML" description="As covered in the &lt;i&gt;QuickStart Guide&lt;/i&gt; Chapter 4, &lt;i&gt;Coding&lt;/i&gt;, SmartClient &amp;#010 components can be created in either XML or JavaScript format.  This section covers some of&amp;#010 the details of using the XML format, called &quot;SmartClient component XML&quot;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Referring to previously created components&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To refer to another component by ID in XML, use &amp;lt;Canvas ref=/&amp;gt;.  For example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Canvas ID=&quot;myCanvas&quot;/&amp;gt;&amp;#010 &amp;lt;Canvas ID=&quot;myCanvas2&quot;/&amp;gt;&amp;#010 &amp;lt;VLayout&amp;gt;&amp;#010     &amp;lt;members&amp;gt;&amp;#010         &amp;lt;Canvas ref=&quot;myCanvas&quot;/&amp;gt;&amp;#010         &amp;lt;Canvas ref=&quot;myCanvas2&quot;/&amp;gt;&amp;#010     &amp;lt;/members&amp;gt;&amp;#010 &amp;lt;/VLayout&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;JavaScript expressions&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To embed a JavaScript expression into component XML, use the &amp;lt;JS&amp;gt; tag.  For example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;VLayout&amp;gt;&amp;#010     &amp;lt;width&amp;gt;&amp;lt;JS&amp;gt;isc.Page.getWidth() - 20&amp;lt;/JS&amp;gt;&amp;lt;/width&amp;gt;&amp;#010 &amp;lt;/VLayout&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Note that, like all component XML properties, the &lt;code&gt;width&lt;/code&gt; property can be&amp;#010 specified either as an XML attribute or as a subelement.  Expressing it as a subelement, as&amp;#010 shown above, allows the &amp;lt;JS&amp;gt; tag to be used.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Embedding Methods&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('group:stringMethods','StringMethods')} such as ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')},&amp;#010 JavaScript code can be used as an ordinary element value:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;ListGrid&amp;gt;&amp;#010     &amp;lt;recordClick&amp;gt;if (record.age &gt; 65) doSomething()&amp;lt;/recordClick&amp;gt;&amp;#010 &amp;lt;/ListGrid&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 To embed an actual function definition, use the &amp;lt;JS&amp;gt; tag described above.  For&amp;#010 example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;ListGrid&amp;gt;&amp;#010     &amp;lt;recordClick&amp;gt;&amp;lt;JS&amp;gt;function (viewer, record, recordNum, field) {&amp;#010          if (record.age &gt; 65) doSomething();&amp;#010     }&amp;lt;/JS&amp;gt;&amp;lt;/recordClick&amp;gt;&amp;#010 &amp;lt;/ListGrid&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Unfortunately, characters commonly used in JavaScript code, such as ampersand (&amp;amp;), are&amp;#010 not legal inside XML element or attribute values.  For example, the expression &quot;record !=&amp;#010 null &amp;&amp; record.age &gt; 65&quot; must be written as shown below, or it is not considered valid XML:&amp;#010 &lt;P&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;ListGrid&amp;gt;&amp;#010     &amp;lt;recordClick&amp;gt;&amp;#010         if (record.status != null &amp;amp;amp;&amp;amp;amp; record.age &gt; 65) doSomething()&amp;#010     &amp;lt;/recordClick&amp;gt;&amp;#010 &amp;lt;/ListGrid&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 An alternative, for larger blocks of code, is to use the XML standard &quot;CDATA&quot; (character&amp;#010 data) processing directive, which allows ampersand and other characters to be used without&amp;#010 special notation:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;ListGrid&amp;gt;&amp;#010     &amp;lt;recordClick&amp;gt;&amp;lt;![CDATA[&amp;#010         if (record.status != null &amp;&amp; record.age &gt; 65) doSomething()&amp;#010     ]]&amp;gt;&amp;lt;/recordClick&amp;gt;&amp;#010 &amp;lt;/ListGrid&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 Overall, embedding code in XML can be awkward.  Isomorphic generally recommends that&amp;#010 signficant chunks of JavaScript code, such as non-trivial custom components, be moved to&amp;#010 separate, purely JavaScript files, while code embedded in component XML is limited to simple&amp;#010 expressions and short functions.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Troubleshooting&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 XML parsing errors, which happen when XML is not well-formed and would be rejected by any&amp;#010 standard XML parser, are reported in the server-side log, and, when possible, also in the&amp;#010 client-side log within the &quot;Results&quot; tab of the Developer Console.&amp;#010 &lt;P&gt;&amp;#010 Other issues with component XML can result from incorrect use of SmartClient component XML&amp;#010 tags.  For example, you may specify a property and it may appear to have no effect even&amp;#010 though it clearly works in other, JavaScript-based examples.  If you get this symptom, you&amp;#010 can troubleshoot by looking at the JavaScript code SmartClient generates from component XML.&amp;#010 &lt;P&gt;&amp;#010 SmartClient always translates SmartClient component XML to JavaScript format before&amp;#010 execution.  This is done automatically by the &amp;lt;isomorphic:XML&amp;gt; tag for XML embedded in&amp;#010 a .jsp file, and you can &quot;View Source&quot; with your browser to see the generated XML.  You can&amp;#010 also use the &quot;Eval XML&quot; section in the &quot;Results&quot; tab of the Developer Console to see&amp;#010 the generated JavaScript (&quot;Show JS&quot; button) and to dynamically execute component XML (&quot;Eval&amp;#010 XML&quot; button).  These facilities will help you troubleshoot issues with incorrectly specified&amp;#010 XML.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Custom Properties&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If you specify a custom property on a component in XML, for example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Canvas myProperty=&quot;false&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The value of the property will be a JavaScript String.  In the above example, it would be&amp;#010 the string &quot;false&quot;, which is considered a boolean true value in the JavaScript language.&amp;#010 If you want a different JavaScript type, you can force a property to be interpreted as a&amp;#010 given type by using the &quot;xsi:type&quot; attribute:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Canvas&amp;gt;&amp;#010     &amp;lt;myProperty xsi:type=&quot;xsd:boolean&quot;&amp;gt;false&amp;lt;/myProperty&amp;gt;&amp;#010 &amp;lt;/Canvas&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The same notation works when you want to declare that an entire subobject has a given type.&amp;#010 For example, this would cause the custom property &quot;myListGrid&quot; to have a live&amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid')} instance as it's value.  All of the properties on the &amp;lt;myListGrid&amp;gt; tag&amp;#010 will be correctly interpreted as ListGrid properties and have the correct types.&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Canvas&amp;gt;&amp;#010     &amp;lt;myListGrid xsi:type=&quot;ListGrid&quot; width=&quot;500&quot; height=&quot;600&quot;/&amp;gt;&amp;#010 &amp;lt;/Canvas&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 If you do not want an actual live ListGrid, but rather a JavaScript Object containing&amp;#010 properties for later construction of a ListGrid, use the &lt;code&gt;propertiesOnly&lt;/code&gt;&amp;#010 attribute.  For example, this code would cause the property &quot;listGridProperties&quot; to be a&amp;#010 JavaScript Object with properties &quot;width&quot; and &quot;height&quot;, whose values would be JavaScript&amp;#010 Numbers.&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Canvas&amp;gt;&amp;#010     &amp;lt;listGridProperties xsi:type=&quot;ListGrid&quot; propertiesOnly=&quot;true&quot; &amp;#010                          width=&quot;500&quot; height=&quot;600&quot;/&amp;gt;&amp;#010 &amp;lt;/Canvas&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 For your reference: &quot;xsi&quot; stands for &quot;XML Schema Instance&quot;; this notation derives from XML&amp;#010 Schema standards for explicitly specifying type inline.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Custom Components&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 If you use ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','defineClass()')} to define a new component class&amp;#010 &quot;MyListGrid&quot; which is a subclass of the built-in component ListGrid, you can create it in&amp;#010 XML as shown below:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;ListGrid constructor=&quot;MyListGrid&quot; width=&quot;500&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 By using the &amp;lt;ListGrid&amp;gt; tag you advertise that properties should be interpreted &amp;#010 as &lt;code&gt;ListGrid&lt;/code&gt; properties.  By specifying &lt;code&gt;constructor&lt;/code&gt;&amp;#010 you tell SmartClient what class to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Component Schema&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Instead of using the &lt;code&gt;constructor&lt;/code&gt; and &lt;code&gt;xsi:type&lt;/code&gt; attributes for&amp;#010 custom components and custom properties, you can create a ${isc.DocUtils.linkForRef('group:componentSchema')} that&amp;#010 describes the custom component.  Declaring a component schema allows you to use your&amp;#010 component just like the built-in SmartClient components, and also allows your component to&amp;#010 be used within ${isc.DocUtils.linkForRef('group:visualBuilder')}." name="componentXML" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="method:DataSource.handleError" flags="A" description=" If you define this method on a DataSource, it will be called whenever the server returns&amp;#010 a DSResponse with a status other than ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_SUCCESS')}.  You can use&amp;#010 this hook to do DataSource-specific error handling.  Unless you return&amp;#010 &lt;code&gt;false&lt;/code&gt; from this method, ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')} will be called by&amp;#010 SmartClient right after this method completes.&amp;#010 &amp;#010" name="handleError" type="method" definingClass="class:DataSource">
<seeAlso ref="classMethod:RPCManager.handleError">
</seeAlso>
<params description="the DSResponse or DSResponse object returned from the server" optional="false" name="response" type="DSResponse">
</params>
<params description="the DSRequest or DSRequest that was sent to the server" optional="false" name="request" type="DSRequest">
</params>
<returns description="false to suppress ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')}" type="boolean"></returns>
    <groups>errorHandling</groups>
</docItem>
<docItem ref="group:devTools" name="devTools" type="group">
</docItem>
<docItem ref="attr:StatefulCanvas.showFocused" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  If&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is &lt;code&gt;true&lt;/code&gt;, the &lt;b&gt;&lt;code&gt;&quot;over&quot;&lt;/code&gt;&lt;/b&gt;&amp;#010 will be used to indicate focus. Otherwise a separate &lt;b&gt;&lt;code&gt;&quot;focused&quot;&lt;/code&gt;&lt;/b&gt; state&amp;#010 will be used." name="showFocused" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="method:StretchImgButton.getActionType" flags="" description=" Return the 'actionType' for this canvas (radio / checkbox / button)&amp;#010" name="getActionType" type="method" definingClass="class:StretchImgButton">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:Tree.isOpen" flags="" description="&amp;#010 Is a particular node open or closed (works for leaves and folders).&amp;#010&amp;#010" name="isOpen" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node is open" type="boolean"></returns>
</docItem>
<docItem exampleConfig="VLayout.xml" ref="class:VLayout" description="A subclass of Layout that applies a sizing policy along the vertical axis, interpreting&amp;#010  percent and &quot;*&quot; sizes as proportions of the height of the layout. VLayouts will set any&amp;#010  members that do not have explict widths to match the layout." name="VLayout" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
<seeAlso ref="attr:Layout.vPolicy">
</seeAlso>
</docItem>
<docItem ref="method:Button.getActionType" flags="" description=" Return the 'actionType' for this canvas (radio / checkbox / button)&amp;#010" name="getActionType" type="method" definingClass="class:Button">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:RichTextItem.colSpan" flags="IRW" description="By default RichTextItems take up an entire row" name="colSpan" valueType="number | string" defaultValue="&quot;*&quot;" type="attr" definingClass="class:RichTextItem">
</docItem>
<docItem ref="method:Array.getRange" flags="" description=" Return the items between position start and end, non-inclusive at the end.&amp;#010&amp;#010" name="getRange" type="method" definingClass="object:Array">
<params description="start position" optional="false" name="start" type="number">
</params>
<params description="end position" optional="false" name="end" type="number">
</params>
<returns description="subset of the array from start -&gt; end-1" type="Array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="classMethod:isc.ask" flags="" description=" Show a modal dialog with a message, icon, and &quot;Yes&quot; and &quot;No&quot; buttons.&amp;#010 &lt;P&gt;&amp;#010 The callback will receive boolean true for an OK button click, boolean false for a No button&amp;#010 click, or null if the Dialog is dismissed via the close button.&amp;#010&amp;#010" name="ask" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Warn">
</seeAlso>
<seeAlso ref="classMethod:isc.warn">
</seeAlso>
<seeAlso ref="method:Dialog.yesClick">
</seeAlso>
<seeAlso ref="method:Dialog.noClick">
</seeAlso>
<seeAlso ref="classAttr:Dialog.ASK_TITLE">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="Callback to fire when the                                       user clicks a button to dismiss the dialog.&amp;#010                                      This has the single parameter 'value', indicating the &amp;#010                                      value returned by the Warn dialog from 'okClick()' etc." optional="true" name="callback" type="Callback">
</params>
<params description="additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for&amp;#010                                      the Dialog, set properties.buttons to an array of buttons&amp;#010										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }" optional="true" name="properties" type="object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('dialogs')}</examples>
    <groups>Prompting</groups>
</docItem>
<docItem ref="method:ListGrid.getSelectedRecord" flags="" description=" Return the first selected record in this component.&lt;br&gt;&lt;br&gt;&amp;#010 This method is appropriate if &lt;code&gt;${isc.DocUtils.linkForRef('attr:ListGrid.selectionType')}&lt;/code&gt; is&amp;#010 &lt;code&gt;&quot;single&quot;&lt;/code&gt;, or if you only care about the first selected record in&amp;#010 a multiple-record selection. To access all selected records, use&amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('method:ListGrid.getSelection')}&lt;/code&gt; instead.&amp;#010" name="getSelectedRecord" type="method" definingClass="class:ListGrid">
<returns description="first selected record, or null if nothing selected" type="ListGridRecord"></returns>
    <examples>${isc.DocUtils.linkForExampleId('databoundRemove')}</examples>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Canvas.init" flags="A" description="&amp;#010 This method performs some basic initialization common to all UI components.  To do custom UI&amp;#010 component initialization, you should generally override ${isc.DocUtils.linkForRef('method:Canvas.initWidget')}.  This&amp;#010 method does the following, in order:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Sets up a global reference to this instance as described in ${isc.DocUtils.linkForRef('attr:Canvas.ID')}.&amp;#010 &lt;li&gt;Ensures certain numeric properties have numeric values (e.g. width, height, padding,&amp;#010 margin)&amp;#010 &lt;li&gt;Ensures ${isc.DocUtils.linkForRef('attr:Canvas.children')} and ${isc.DocUtils.linkForRef('attr:Canvas.peers')} are Arrays.&amp;#010 &lt;li&gt;Calls ${isc.DocUtils.linkForRef('method:Canvas.initWidget')}&amp;#010 &lt;li&gt;Creates ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')} and ${isc.DocUtils.linkForRef('attr:Canvas.showShadow','shadow')}, if so configured.&amp;#010 &lt;li&gt;Calls ${isc.DocUtils.linkForRef('method:Canvas.draw')} if ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw')} is set on instance or globally.&amp;#010 &lt;/ul&gt;&amp;#010 Unless you're in an advanced scenario where you need to inject code before the above&amp;#010 logic executes, place your initialization logic in initWidget() rather than init().  If you&amp;#010 do decided to override this method, you must call the superclass implementation like so:&amp;#010 &lt;pre&gt;&amp;#010    this.Super(&quot;init&quot;, arguments);&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="init" type="method" definingClass="class:Canvas">
<params description="All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}" optional="true" name="arguments 0-N" type="any">
</params>
</docItem>
<docItem ref="classMethod:Log.timeMethod" flags="" description=" &amp;#010  Observe a method on an object, logging execution time whenever the method is called.&amp;#010 &lt;P&gt;&amp;#010  Call a second time with identical arguments to disable tracing.&amp;#010&amp;#010" name="timeMethod" type="classMethod" definingClass="class:Log">
<params description="object to observe" optional="false" name="object" type="object">
</params>
<params description="name of the method to observe" optional="false" name="methodName" type="string">
</params>
    <groups>debug</groups>
</docItem>
<docItem ref="type:LayoutPolicy" description="Policy controlling how the Layout will manage member sizes on this axis.&amp;#010  &lt;P&gt;&amp;#010  See also ${isc.DocUtils.linkForRef('attr:Layout.overflow')}." name="LayoutPolicy" type="type">
<values description="Layout does not try to size members on the axis at all, merely stacking them (length&amp;#010  axis) and leaving them at default breadth." value="Layout.NONE"></values>
<values description="Layout sizes members so that they fill the specified size of the layout.  The rules&amp;#010  are:&amp;#010  &lt;ul&gt;&amp;#010  &lt;li&gt; Any component given an initial pixel size, programmatically resized to a specific&amp;#010  pixel size, or drag resized by user action is left at that exact size&amp;#010  &lt;li&gt; Any component that ${isc.DocUtils.linkForRef('attr:Button.autoFit','autofits')} is given exactly the space it&amp;#010  needs, never forced to take up more.&amp;#010  &lt;li&gt; All other components split the remaining space equally, or according to their&amp;#010  relative percentages.&amp;#010  &lt;/ul&gt;" value="Layout.FILL"></values>
</docItem>
<docItem ref="method:Canvas.animateMove" flags="" description=" Animate a reposition of this canvas from its current position to the specified position&amp;#010" name="animateMove" type="method" definingClass="class:Canvas">
<params description="new left position (or null for unchanged)" optional="false" name="left" type="number">
</params>
<params description="new top position (or null for unchanged)" optional="false" name="top" type="number">
</params>
<params description="When the move completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation" optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated move" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration effect to bias the ratios" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateMove')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="method:Canvas.getInnerHeight" flags="A" description="  Returns the amount of space available for (an) absolutely positioned child widget(s) or &amp;#010  HTML content, without introducing clipping, scrolling or overflow.&lt;br&gt;&amp;#010  This is the space within the viewport of the widget (including padding, but excluding &amp;#010  margins, borders or scrollbars) rendered at its specified size.&amp;#010&amp;#010" name="getInnerHeight" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getInnerWidth">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerContentHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerContentWidth">
</seeAlso>
<returns description="inner height of the widget in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:ResultSet.updatePartialCache" flags="IRA" description="If set to true, updated and added rows will be integrated into the client-side cache&amp;#010 even if paging is enabled and cache is partial.  If &lt;code&gt;updatePartialCache&lt;/code&gt; is&amp;#010 false, the cache will be invalidated and new data fetched.&amp;#010 &lt;P&gt;&amp;#010 If updatePartialCache is enabled and an &quot;add&quot; or &quot;update&quot; operation succeeds with a partial&amp;#010 cache:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; updated rows will remain in their current position.  No attempt will be made to sort&amp;#010 them into a new position even if the sort field was updated.&amp;#010 &lt;li&gt; newly added rows will be added at either the end (first preference) or beginning of&amp;#010 the dataset if that part of the dataset is cached and was most recently requested.&amp;#010 If not, the new row is added at the end of the most recently requested contiguously&amp;#010 cached range&amp;#010 &lt;/ul&gt;&amp;#010 The cache will then be dropped the next time rows are fetched, to prevent problems with&amp;#010 inconsistent row numbering between the server and client, which could otherwise lead to&amp;#010 duplicate rows or rows being skipped entirely." name="updatePartialCache" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultSet">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="method:TreeGrid.getDragTrackerIcon" flags="" description=" Return an icon to display as a drag tracker when the user drags some node(s).&lt;br&gt;&amp;#010 Default implementation:&lt;br&gt;&amp;#010 If multiple nodes are selected and ${isc.DocUtils.linkForRef('attr:TreeGrid.manyItemsImage')} is defined, this&amp;#010 image wlll be returned&lt;br&gt;&amp;#010 Otherwise returns the result of ${isc.DocUtils.linkForRef('method:TreeGrid.getIcon')} for the first node being &amp;#010 dragged.&amp;#010 &lt;p&gt;&amp;#010 Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to &lt;code&gt;&quot;icon&quot;&lt;/code&gt;. &amp;#010" name="getDragTrackerIcon" type="method" definingClass="class:TreeGrid">
<params description="Records being dragged" optional="false" name="records" type="Array of ListGridRecord">
</params>
<returns description="Image URL of icon to display" type="string"></returns>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="attr:WebService.serviceNamespace" flags="R" description="Namespace of this WebService, derived from the &lt;code&gt;targetNamespace&lt;/code&gt;&amp;#010 attribute of the &lt;code&gt;&amp;lt;wsdl:definitions&amp;gt;&lt;/code&gt; element." name="serviceNamespace" valueType="URI" defaultValue="null" type="attr" definingClass="class:WebService">
    <groups>webService</groups>
</docItem>
<docItem ref="method:Canvas.getPageLeft" flags="A" description=" Returns the page-relative left coordinate of the widget on the page, in pixels.&amp;#010" name="getPageLeft" type="method" definingClass="class:Canvas">
<returns description="global left coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:Canvas.dragTarget" flags="IRWA" description="A different widget that should be actually dragged when dragging initiates on this&amp;#010      widget. One example of this is to have a child widget that drags its parent, as with a&amp;#010      drag box. Because the parent automatically repositions its children, setting the drag&amp;#010      target of the child to the parent and then dragging the child will result in both&amp;#010      widgets being moved.&lt;br&gt;&amp;#010      Valid dragTarget values are:&lt;br&gt;&amp;#010      - &lt;code&gt;null&lt;/code&gt; (default) [this widget is its own drag target]&lt;br&gt;&amp;#010      - Pointer to another widget, or widget ID&lt;br&gt;&amp;#010      - &lt;code&gt;&quot;parent&quot;&lt;/code&gt; drag target is this widget's &amp;#010         ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}&lt;br&gt;&amp;#010      - &lt;code&gt;&quot;top&quot;&lt;/code&gt; drag target is this widget's &amp;#010         ${isc.DocUtils.linkForRef('attr:Canvas.topElement','topElement')}&lt;br&gt;" name="dragTarget" valueType="Canvas | String" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="classMethod:EventHandler.getDragTarget">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Button.showRollOver" flags="IRW" description="Should we visibly change state when the mouse goes over this object?" name="showRollOver" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <examples>${isc.DocUtils.linkForExampleId('buttonStates')}</examples>
    <groups>state</groups>
</docItem>
<docItem ref="method:Button.setAlign" flags="" description=" Sets the (horizontal) alignment of this buttons content.&amp;#010" name="setAlign" type="method" definingClass="class:Button">
    <groups>positioning</groups>
</docItem>
<docItem ref="classMethod:isA.Object" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a non-null object&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  NOTE: This will return false for objects of type number, string, boolean, function, &amp;#010  undefined.  It will also return false for the null value.&amp;#010  For other objects, including arrays, regular expressions, date objects, and JS object &amp;#010  literals it will return true.&amp;#010&amp;#010" name="Object" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is an object" type="boolean"></returns>
</docItem>
<docItem ref="attr:groupNode.groupTitle" flags="R" description="The computed title for the group, which results from ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle')}" name="groupTitle" valueType="HTML" defaultValue="see below" type="attr" definingClass="object:groupNode">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="classMethod:RPCManager.sendQueue" flags="" description="&amp;#010 Send all currently queued requests to the server.  You need only call this method if you are&amp;#010 using queuing otherwise your requests are synchronously submitted to the server.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 NOTE: if you aren't the caller who first enables queuing (startQueue() returns&amp;#010 true), you should in general avoid calling sendQueue(), because whoever was&amp;#010 first to enable queuing may have more requests to add to the same queue.&amp;#010&amp;#010" name="sendQueue" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="classMethod:RPCManager.send">
</seeAlso>
<seeAlso ref="classMethod:RPCManager.sendRequest">
</seeAlso>
<seeAlso ref="classMethod:RPCManager.startQueue">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:PickList.pickListHeaderHeight" flags="IRW" description="If this pick list is showing multiple fields, this property determines the height of&amp;#010 the column headers for those fields. Set to zero to suppress the headers entirely." name="pickListHeaderHeight" valueType="number" defaultValue="22" type="attr" definingClass="interface:PickList">
<seeAlso ref="attr:PickList.pickListFields">
</seeAlso>
</docItem>
<docItem ref="type:DragAppearance" description="Different types of effects for showing dragging behavior." name="DragAppearance" type="type">
<values description="No default drag appearance is indicated. Your custom dragging routines should&amp;#010      implement some behavior that indicates that the user is in a dragging situation,&amp;#010      and where the mouse is." value="&quot;none&quot;"></values>
<values description="A &quot;drag tracker&quot; object is automatically shown and moved around with the&amp;#010      mouse. This is generally set to an icon that represents what is being dragged. The&amp;#010      default tracker is a 10 pixel black square, but you can customize this icon. This&amp;#010      dragAppearance is not recommended for use with drag resizing or drag moving." value="&quot;tracker&quot;"></values>
<values description="The target object is actually moved, resized, etc. in real time. This is&amp;#010      recommended for drag repositioning, but not for drag resizing of complex objects." value="&quot;target&quot;"></values>
<values description="An outline the size of the target object is moved, resized, etc. with the&amp;#010      mouse. This is recommended for drag resizing, especially for objects that take a&amp;#010      significant amount of time to draw." value="&quot;outline&quot;"></values>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classMethod:Log.isEnabledFor" flags="" description=" Would a message logged to the given category at the given priority appear in the Log?&amp;#010 &lt;P&gt;&amp;#010 NOTE: if there is no specific priority setting for a given category, the&amp;#010 &lt;code&gt;Log.defaultPriority&lt;/code&gt; is used.&amp;#010&amp;#010" name="isEnabledFor" type="classMethod" definingClass="class:Log">
<params description="category name" optional="false" name="category" type="String">
</params>
<params description="priority level to check" optional="false" name="priority" type="LogPriority">
</params>
</docItem>
<docItem ref="attr:ImgProperties.extraStuff" flags="IRW" description="Specifies the additional attributes to write in the tag." name="extraStuff" valueType="string" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="attr:ActiveXControl.classID" flags="IR" description="This sets the value of the classID property on the object.  This is meant to give you&amp;#010  complete control over the generated HTML.  In practice it may be more handy to set the uuid&amp;#010  property on this object and let the classID be generated from that." name="classID" valueType="string" defaultValue="null" type="attr" definingClass="class:ActiveXControl">
<seeAlso ref="attr:ActiveXControl.uuid">
</seeAlso>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:StatefulCanvas.title" description="The text title to display in this button." name="title" valueType="string" defaultValue="varies" definingClass="class:StatefulCanvas">
    <getter>getTitle</getter>
    <setter>setTitle</setter>
    <groups>basics</groups>
</docItem>
<docItem ref="attr:GridHilite.id" flags="IR" description="Unique id for this hilite definition.  To apply this hilite to a record, set&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on the record to this id.  &amp;#010 &lt;P&gt;&amp;#010 For example, in a CubeGrid containing &quot;region&quot; and &quot;metric&quot; facets and with a &amp;#010 &lt;code&gt;hiliteProperty&lt;/code&gt; of &quot;_hilite&quot;, the following cell record would have the&amp;#010 &quot;redBG&quot; hilite applied to it:&amp;#010 &lt;pre&gt;&amp;#010     { region:&quot;West&quot;, metric:&quot;Profit&quot;, _value:&quot;$50k&quot;, _hilite:&quot;redBG&quot; }&amp;#010 &lt;/pre&gt;" name="id" valueType="String" defaultValue="null" type="attr" definingClass="object:GridHilite">
</docItem>
<docItem ref="type:EnterKeyEditAction" description="What to do when a user hits enter while editing a cell" name="EnterKeyEditAction" type="type">
<values description="end editing" value="&quot;done&quot;"></values>
<values description="edit the next editable cell in the record" value="&quot;nextCell&quot;"></values>
<values description="edit the same field in the next editable record" value="&quot;nextRow&quot;"></values>
<values description="edit the first editable cell in next editable record" value="&quot;nextRowStart&quot;"></values>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ToolStrip.separatorClass" flags="IRW" description="Class to create when the string &quot;separator&quot; appears in ${isc.DocUtils.linkForRef('attr:ToolStrip.members')}." name="separatorClass" valueType="String" defaultValue="&quot;ToolStripSeparator&quot;" type="attr" definingClass="class:ToolStrip">
</docItem>
<docItem ref="method:Array.getProperty" flags="" description=" Return a new array where the value of item i is the value of &quot;property&quot; of item i in this&amp;#010 array.  If an item doesn't have that property or is null, return item will be null.&amp;#010&amp;#010" name="getProperty" type="method" definingClass="object:Array">
<params description="name of the property to look for" optional="false" name="property" type="string">
</params>
<returns description="array of the values of property in each item of this list" type="array"></returns>
    <groups>iteration</groups>
</docItem>
<docItem ref="type:FormItemType" description="DynamicForms automatically choose the FormItem type for a field based on the&amp;#010 &lt;code&gt;type&lt;/code&gt; property of the field.  The table below describes the default FormItem&amp;#010 chosen for various values of the &lt;code&gt;type&lt;/code&gt; property.&amp;#010 &lt;P&gt;&amp;#010 You can also set ${isc.DocUtils.linkForRef('attr:FormItem.editorType','field.editorType')} to the classname of a&amp;#010 ${isc.DocUtils.linkForRef('class:FormItem')} to override this default mapping." name="FormItemType" type="type">
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:TextItem')}, unless the lenght of the field (as specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} attribute) is larger than the value&amp;#010 specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.longTextEditorThreshold')}, a&amp;#010 ${isc.DocUtils.linkForRef('class:TextAreaItem')} is shown." value="&quot;text&quot;"></values>
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:CheckboxItem')}" value="&quot;boolean&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt; by default.                     Consider setting editorType:${isc.DocUtils.linkForRef('class:SpinnerItem')}." value="&quot;integer&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt; by default.                     Consider setting editorType:${isc.DocUtils.linkForRef('class:SpinnerItem')}." value="&quot;float&quot;"></values>
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:DateItem')}" value="&quot;date&quot;"></values>
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:TimeItem')}" value="&quot;time&quot;"></values>
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:SelectItem')}.  Also true for any field that                   specifies a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap')}.  &amp;#010                   Consider setting editorType:${isc.DocUtils.linkForRef('class:ComboBoxItem')}." value="&quot;enum&quot;"></values>
<values description="Same as &lt;code&gt;text&lt;/code&gt;" value="&quot;sequence&quot;"></values>
<values description="If ${isc.DocUtils.linkForRef('attr:DataSourceField.canEdit')}&lt;code&gt;:false&lt;/code&gt; is set on the field, the value is rendered as a ${isc.DocUtils.linkForRef('class:LinkItem')}.  Otherwise the field is rendered as a&amp;#010 ${isc.DocUtils.linkForRef('class:TextItem')}." value="&quot;link&quot;"></values>
<values value="&quot;image&quot;">
</values>
<values value="&quot;imageFile&quot;">
</values>
<values description="Rendered as a ${isc.DocUtils.linkForRef('class:UploadItem')}" value="&quot;binary&quot;"></values>
<seeAlso ref="attr:FormItem.type">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
</docItem>
<docItem ref="attr:ImgTab.capSize" flags="IRW" description="How big are the end pieces by default" name="capSize" valueType="number" defaultValue="2" type="attr" definingClass="class:ImgTab">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:TreeGrid.getEventRow" flags="" description=" Returns the row number of the most recent mouse event.&amp;#010" name="getEventRow" type="method" definingClass="class:TreeGrid">
<params description="optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event" optional="false" name="y" type="number">
</params>
<returns description="row number, or -2 if beyond last drawn row" type="number"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Canvas.canDropBefore" flags="IRWA" description="When explicitly set to false, disallows drop before this member in the Layout." name="canDropBefore" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="class:Layout">
</seeAlso>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:BlurbItem.colSpan" flags="IRW" description="By default, texts span all remaining columns" name="colSpan" valueType="number" defaultValue="&quot;*&quot;" type="attr" definingClass="class:BlurbItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:XMLTools.serializeToString" flags="" description=" Takes an XMLDocument and returns it as a String.&amp;#010 &lt;P&gt;&amp;#010 This method is not supported on the Safari web browser versions prior to 3.0.3.&amp;#010&amp;#010" name="serializeToString" type="classMethod" definingClass="class:XMLTools">
<params description="XML document to apply the transform to" optional="false" name="inputDocument" type="XMLDocument">
</params>
<returns description="XML document as a String" type="String"></returns>
    <groups>xmlTransform</groups>
</docItem>
<docItem ref="attr:DynamicForm.errorItemCellStyle" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in &amp;#010 a single item rendered at the top of the form.&lt;br&gt;&amp;#010 This attribute specifies the cellStyle to apply to this item." name="errorItemCellStyle" valueType="string" defaultValue="&quot;formCellError&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="attr:ServerObject.attributeName" flags="IR" description="Specifies the name of the attribute by which to look up the DMI instance.  This attribute is&amp;#010 consulted only when the value of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is &lt;code&gt;&quot;attribute&quot;&lt;/code&gt;." name="attributeName" valueType="String" defaultValue="null" type="attr" definingClass="class:ServerObject">
<seeAlso ref="attr:ServerObject.attributeScope">
</seeAlso>
<seeAlso ref="attr:ServerObject.lookupStyle">
</seeAlso>
</docItem>
<docItem ref="group:networkPerformance" title="Network Performance" description="This section describes various methods for optimizing delivery of your SmartClient-based&amp;#010 application to the browser.  The various techniques discussed here should enable you to&amp;#010 drastically reduce the time to load your SmartClient based application and to cut down on&amp;#010 bandwidth costs and server-side CPU usage.&amp;#010&amp;#010 There are three main ways of improving the performance of your application:&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Compression&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 You'll want to deliver as much of your application assets compressed as possible.  For a start, the&amp;#010 SmartClient modules come pre-compressed.  The ${isc.DocUtils.linkForRef('group:compression')} section describes how&amp;#010 to make sure that SmartClient modules and your application logic are delivered compressed&amp;#010 and how to enable dynamic compression of your dynamic content.&amp;#010 &lt;p&gt;&amp;#010 Compression drastically reduces transfer times to the browser.  Compression ratios for css&amp;#010 and javascript files can be as high as 8:1.&amp;#010&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Caching&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The ${isc.DocUtils.linkForRef('group:caching')} section deals with delivering as much content as possible with&amp;#010 caching headers.  Setting these headers allows the end-user's browser and any intermediary&amp;#010 proxies to keep a local copy of the file across browser reloads, ensuring the subsequent&amp;#010 visits require almost no fetches from the server.  Eliminating these fetches is also&amp;#010 important for the reasons explained under File Assembly below.&amp;#010 &amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;File Assembly&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Modern browsers limit the number of HTTP connections they use to fetch the assets required&amp;#010 to render your pages - typically to just 2 connections.  As a result, connection latency can&amp;#010 play a much higher role than available bandwidth and the two connection limit effectively&amp;#010 drastically limits the user's usable bandwidth.  For this reason, it's important to minimize&amp;#010 the number of HTTP requests made to the server.  The File Assembly services make it easy to&amp;#010 deliver multiple css and javascript file via one HTTP response.  Assembling files together&amp;#010 also helps to increase the compression ratio because the commpression engine has more&amp;#010 redundant data to work with.&amp;#010&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;FileLoader&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 The FileLoader is a standalone client-side module that allows you to performing caching or&amp;#010 loading of various resources in the background on any page.  The typical usage pattern is to&amp;#010 use this module to pre-cache SmartClient modules, skin images, and application logic while&amp;#010 the user is, for example filling in a login form.  See the ${isc.DocUtils.linkForRef('class:FileLoader')} documentation&amp;#010 on usage.&amp;#010&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;SSL Considerations&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 Some quirks to be aware of when optimizing for pages servied via HTTPS:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If your top-level https page loads an image via http, IE will pop a warning to the user&amp;#010 asking if it's ok to serve the &quot;unsecure&quot; content.  Firefox does not pop an alert, bug shows&amp;#010 a different lock icon to indicate that not all content is served from a secure server.&amp;#010 &lt;li&gt;Firefox will not write images fetched via SSL to disk, even if expires headers are set.&amp;#010 But it will cache them in memory for the duration of the browser session.  This makes the&amp;#010 use of the ${isc.DocUtils.linkForRef('class:FileLoader')} even more important for SSL applications.  IE will cache SSL&amp;#010 content across browser restarts.&amp;#010 &lt;li&gt;If your only concern is with actual security and not with perception, it makes a lot of&amp;#010 sense to serve the top-level page via plain HTTP and then use the SmartClient RPC mechanism&amp;#010 to fetch sensitive data with no-cache headers via HTTPS.  Unfortunately this almost never&amp;#010 practical because most users look for the secure lock icon on the top-level page and may&amp;#010 become worried that the application is not secure if they don't see it.&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 &lt;p&gt;&amp;#010 &lt;u&gt;&lt;b&gt;Other Tips&lt;/b&gt;&lt;/u&gt;&amp;#010 &lt;p&gt;&amp;#010 1.  Modern applications often use a number of cookies to keep track of session state,&amp;#010 application state, etc.  If you don't limit the paths these cookies are served for, you can&amp;#010 easily end up with these cookies being sent to the server with every HTTP request as&amp;#010 part of the HTTP headers.  This can severely limit bandwidth where a large number of&amp;#010 requests are made - typically for skin images.  Also note that most technologies used by&amp;#010 end-users to connect to the internet such as DSL and Cable are half-duplex, meaning that&amp;#010 downstream must pause for upstream traffic to be sent and these connections also are&amp;#010 asymmetric, allowing much faster download speeds than upload speeds.  As a result, the&amp;#010 limited upstream capability of most connections ends up limiting the download bandwidth by&amp;#010 delayng the download of other assets required to render the page.&amp;#010 &lt;p&gt;&amp;#010 2.  Whenever possible, don't sent the &quot;Cache-Control&quot; header to &quot;private&quot; - this tells&amp;#010 intermediary proxies to not allow caching of the specified content, eliminating that cache&amp;#010 as a useful intermediary for other users behind it.&amp;#010 &lt;p&gt;&amp;#010 3.  For a good overview of performance considerations, see this post:&amp;#010 &lt;a href='http://www.die.net/musings/page_load_time/' onclick=&quot;window.open('http://www.die.net/musings/page_load_time/');return false;&quot;&gt;http://www.die.net/musings/page_load_time/&lt;/a&gt;" name="networkPerformance" type="group">
    <treeLocation>Optional Modules</treeLocation>
</docItem>
<docItem ref="classMethod:XMLTools.transformNodes" flags="" description=" Apply an XSLT Stylesheet to an XML Document.&amp;#010 &lt;P&gt;&amp;#010 This method cannot currently be supported on the Safari web browser versions prior to&amp;#010 3.0.3.&amp;#010&amp;#010" name="transformNodes" type="classMethod" definingClass="class:XMLTools">
<params description="XML document to apply the transform to" optional="false" name="inputDocument" type="XMLDocument">
</params>
<params description="XSLT stylesheet to use for transform" optional="false" name="styleSheet" type="XMLDocument">
</params>
<returns description="stylesheet output" type="String"></returns>
    <groups>xmlTransform</groups>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_LOGIN_INCORRECT" flags="R" description="Indicates that the RPC has been intercepted by an authenticator that requires the user&amp;#010 to log in." name="STATUS_LOGIN_INCORRECT" valueType="integer" defaultValue="-5" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="method:CubeGrid.setEditValue" flags="A" description="&amp;#010 Set the edit value for some cell in the cube grid.&lt;p&gt;&amp;#010 Note that cubeGrids display one record per cell - the value passed in should be the &amp;#010 desired edit value for the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty')} of the record.&amp;#010&amp;#010" name="setEditValue" type="method" definingClass="class:CubeGrid">
<params description="Row number" optional="false" name="rowNum" type="number">
</params>
<params description="Column number" optional="false" name="colNum" type="number">
</params>
<params description="New value for the record" optional="false" name="value" type="any">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ListGrid.dateInputFormat" flags="IRWA" description="If this is an editable listGrid, this property will specify the &amp;#010 ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} applied to editors for fields of type &amp;#010 &lt;code&gt;&quot;date&quot;&lt;/code&gt;" name="dateInputFormat" valueType="DateInputFormat" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.dateFormatter">
</seeAlso>
</docItem>
<docItem ref="method:DataSource.getXMLRequestBody" flags="A" description=" Get the XML to be posted to the dataURL based on the passed DSRequest.&amp;#010 &lt;P&gt;&amp;#010 This API is intended to be overriden in order to integrate with web services that&amp;#010 expect XML messages rather than simple HTTP parameters, but lack a&amp;#010 WSDL description.  For WSDL-described web services, having loaded the service&amp;#010 description, SmartClient knows the correct XML message structure, so customization is&amp;#010 best done by modifying the JavaScript data that is used to form the message.&amp;#010&amp;#010" name="getXMLRequestBody" type="method" definingClass="class:DataSource">
<seeAlso ref="classMethod:XMLTools.loadWSDL" description="for integration with WSDL-described web services"></seeAlso>
<params description="the request to encode as an XML message." optional="false" name="dsRequest" type="DSRequest">
</params>
<returns description="the entire XML request as a String, including SOAP envelope if SOAP is used" type="String"></returns>
</docItem>
<docItem ref="attr:Canvas.hoverStyle" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, this property can be used to specify the&amp;#010 css style to apply to the hover canvas." name="hoverStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('customHovers')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:FormItem.disabled" description="Whether this item is disabled.  Can be updated at runtime via the &lt;code&gt;setDisabled()&lt;/code&gt;&amp;#010 method.  Note that if the widget containing this formItem is disabled, the formItem will&amp;#010 behave in a disabled manner regardless of the setting of the item.disabled property.&amp;#010 &lt;p&gt;&amp;#010 Note that not all items can be disabled, and not all browsers show an obvious disabled style&amp;#010 for native form elements." name="disabled" valueType="boolean" defaultValue="false" definingClass="class:FormItem">
    <setter>setDisabled</setter>
<seeAlso ref="method:FormItem.setDisabled">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('fieldEnableDisable')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:metadataImport" title="Metadata Import" description="In SmartClient, metadata is expressed through ${isc.DocUtils.linkForRef('class:DataSource','DataSources')}, which in turn&amp;#010 drive ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.  If you have existing metadata, there&amp;#010 are several possible approaches to transforming it to SmartClient DataSources, either one&amp;#010 time or on the fly.&amp;#010 &lt;P&gt;&amp;#010 There are two possible targets for metadata import: XML format or JavaScript format.&amp;#010 The XML format is more general purpose, since the ISC server can transform it to JavaScript&amp;#010 via the ${isc.DocUtils.linkForRef('group:loadDSTag','loadDS tag')}, and DataSources in XML format can be used by the&amp;#010 ISC server for server-side validation (this split is covered in more detail under&amp;#010 ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','Data Source Declaration')}).&amp;#010 &lt;P&gt;&amp;#010 You may also transform your metadata dynamically (while the application is running in&amp;#010 production) or staticly (one time ever or at packaging time).  Generally for a static&amp;#010 or dynamic transform targetting JavaScript format you will want to produce one .js file&amp;#010 containing all your DataSource definitions, to be loaded by your application via a normal&amp;#010 &amp;lt;SCRIPT SRC&amp;gt; tag.  For a static transform targetting XML format, you will want to&amp;#010 produce a series of .ds.xml files and place them in the directories expected by the ISC&amp;#010 server (see ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','DataSource Declaration')}).  Staticly generated&amp;#010 XML DataSources can be delivered to the browser as a single .js file via a .jsp containing&amp;#010 several ${isc.DocUtils.linkForRef('group:loadDSTag','&lt;code&gt;loadDS&lt;/code&gt; tags')}.&amp;#010 &lt;P&gt;&amp;#010 If you want to do dynamic transform targetting XML format and use ISC server-side&amp;#010 validation, the server-side API DataSource.fromXML() can be used to create a DataSource&amp;#010 dynamically from XML, so that you can then call DataSource.validate().  Either the XML&amp;#010 DataSource definition or the live DataSource itself can be passed to the server-side API&amp;#010 XML.toJS() to produce JavaScript.&amp;#010 &lt;P&gt;&amp;#010 How to actually produce JavaScript or XML DataSource definitions from your existing metadata&amp;#010 depends on the format of your metadata.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;XML Schema&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The method ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')} and the &amp;#010 ${isc.DocUtils.linkForRef('group:loadXMLSchemaTag','loadXMLSchema JSP tag')} provide dynamic transform of XML Schema&amp;#010 to JavaScript.  This is essentially accomplished by running&amp;#010 &lt;code&gt;isomorphic/system/schema/schemaTranslator.xsl&lt;/code&gt; on the XML schema file to produce&amp;#010 XML DataSource definitions, and then translating those to JavaScript.  You can run the&amp;#010 &lt;code&gt;schemaTranslator&lt;/code&gt; stylesheet using any standard XSLT processor and capture the&amp;#010 XML output.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Java Beans&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Metadata available via Java's &quot;reflection&quot; APIs allows a basic DataSource to be generated&amp;#010 from Java beans.  Sample Java code can be found in&amp;#010 &lt;code&gt;examples/server_integraton/DataSourceGenerator.java&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Other XML formats&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If you are familiar with XSLT or other XML transform languages, you&amp;#010 could use it to do an XML to XML transform, and then use XML.toJS() to get to JavaScript.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Schema represented as Java Objects&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If you are targetting XML, hand-coded generation of DataSource XML is straightforward, and&amp;#010 from XML you can use XML.toJS() to get to JavaScript." name="metadataImport" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
</docItem>
<docItem ref="attr:FormItem.titleStyle" flags="IRW" description="Base CSS class name for a form item's title." name="titleStyle" valueType="FormItemBaseStyle" defaultValue="&quot;formTitle&quot;" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>title</groups>
</docItem>
<docItem ref="attr:SelectItem.showPickerIcon" flags="IRW" description="Should we show a special 'picker' icon for this form item. Picker icons are customizeable&amp;#010 via ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconProperties')}. By default they will be rendered inside the &amp;#010 Form Item's &quot;control box&quot; area, and will call ${isc.DocUtils.linkForRef('method:SelectItem.showPicker')} when clicked." name="showPickerIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="classMethod:EventHandler.getDragRect" flags="" description=" During a drag with ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance','dragAppearance')} of either &quot;target&quot; or&amp;#010 &quot;outline&quot;, returns the page-relative coordinates of whatever element is being dragged.&amp;#010 &lt;P&gt;&amp;#010 Calling this method allows you to write drag and drop logic that works identically even if&amp;#010 &lt;code&gt;dragAppearance&lt;/code&gt; is subsequently changed.&amp;#010&amp;#010" name="getDragRect" type="classMethod" definingClass="class:EventHandler">
<returns description="global (page-relative) coordinates and size of the dragged element, as a                       4-element array [left,top,width,height], or null if not dragging" type="Rect"></returns>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:DataSource.dataURL" flags="IR" description="Default URL to contact to fulfill all DSRequests.  Can also be set on a&amp;#010 per-operationType basis via ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL')}.&amp;#010 &lt;P&gt;&amp;#010 NOTE: Best practice is to use the same &lt;code&gt;dataURL&lt;/code&gt; for all DataSources which&amp;#010 fulfill DSRequests via the server-side RPCManager API.  Otherwise, cross-DataSource&amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','operation queueing')} will not be possible." name="dataURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('jsonDataSource')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="classAttr:Hover.leftOffset" flags="RW" description="When positioining the hover canvas, this will be the default left offset from the &amp;#010 mousepointer, if no explicit position was passed to the ${isc.DocUtils.linkForRef('classMethod:Hover.show')} method" name="leftOffset" valueType="number" defaultValue="15" type="classAttr" definingClass="class:Hover">
</docItem>
<docItem ref="group:databinding" title="DataBinding" description="DataBinding means the automatic, highly customizable process of 'binding' a UI component&amp;#010 to a DataSource, so that a UI component displays, edits and saves DataSource records&amp;#010 using appropriate formatters, editors, validation rules, and persistance logic." name="databinding" type="group">
    <refs>attr:ListGrid.fields</refs>
    <refs>attr:ListGrid.dataSource</refs>
    <refs>attr:ListGrid.useAllDataSourceFields</refs>
    <refs>attr:ListGrid.showDetailFields</refs>
    <refs>attr:ListGrid.dataProperties</refs>
    <refs>attr:TreeGrid.dataSource</refs>
    <refs>attr:TreeGrid.loadDataOnDemand</refs>
    <refs>attr:TreeGrid.fields</refs>
    <refs>attr:PickList.showOptionsFromDataSource</refs>
    <refs>attr:SelectItem.showOptionsFromDataSource</refs>
    <refs>attr:ComboBoxItem.showOptionsFromDataSource</refs>
    <refs>attr:DataBoundComponent.dataSource</refs>
    <refs>attr:DataBoundComponent.dataPageSize</refs>
    <refs>attr:DataBoundComponent.fields</refs>
    <refs>attr:DataBoundComponent.useAllDataSourceFields</refs>
    <refs>attr:DataBoundComponent.showHiddenFields</refs>
    <refs>attr:DataBoundComponent.showDetailFields</refs>
    <refs>attr:DataBoundComponent.showComplexFields</refs>
    <refs>attr:ListGrid.autoFetchData</refs>
    <refs>attr:DynamicForm.autoFetchData</refs>
<seeAlso ref="interface:DataBoundComponent">
</seeAlso>
</docItem>
<docItem ref="method:ResultSet.willFetchData" flags="" description=" Will changing the criteria for this resultSet require fetching new data from the server, &amp;#010 or can the new criteria be satisfied from data already cached on the client?&lt;br&gt;&amp;#010 Second &lt;code&gt;textMatchStyle&lt;/code&gt; parameter determines whether a change of text-match style&amp;#010 will require a server fetch - for example if filter is being changed between&amp;#010 an exact match (from e.g: ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}) and a substring match &amp;#010 (from e.g: ${isc.DocUtils.linkForRef('method:ListGrid.filterData')}).&lt;br&gt;&amp;#010 This method can be used to determine whether ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} or &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.filterData')} would cause a server side fetch when passed a certain set of &amp;#010 criteria.&amp;#010" name="willFetchData" type="method" definingClass="class:ResultSet">
<params description="new criteria to test." optional="false" name="newCriteria" type="Criteria">
</params>
<params description="New text match style. If not passed assumes       textMatchStyle will not be modified." optional="true" name="textMatchStyle" type="String">
</params>
<returns description="true if server fetch would be required to satisfy new criteria." type="boolean"></returns>
</docItem>
<docItem ref="attr:DetailViewer.headerStyle" flags="IRW" description="CSS style for a header" name="headerStyle" valueType="CSSStyleName" defaultValue="&quot;detailHeader&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Slider.valueIsChanging" flags="A" description=" Call this method in your ${isc.DocUtils.linkForRef('method:Slider.valueChanged')} handler to determine whether the&amp;#010 value change is due to an ongoing drag interaction (true) or due to a thumb-release,&amp;#010 mouse click, keypress, or programmatic event (false). You may choose to execute temporary or&amp;#010 partial updates while the slider thumb is dragged, and final updates or persistence of the value&amp;#010 in response to the other events.&amp;#010&amp;#010" name="valueIsChanging" type="method" definingClass="class:Slider">
<returns description="true if user is still dragging the slider thumb, false otherwise" type="boolean"></returns>
</docItem>
<docItem ref="classAttr:RPCManager.promptCursor" flags="IRW" description="Controls the default cursor shown when ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')} is set to&amp;#010 &lt;code&gt;&quot;cursor&quot;&lt;/code&gt;.  Overrideable by ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.&amp;#010 &lt;p&gt;&amp;#010 In Safari, IE 5.5 and Firefox 1.0 the default value is &quot;wait&quot;, on all other platforms it is&amp;#010 &quot;progress&quot;.  The reason for this split is that the above-mentioned browsers do not support&amp;#010 CSS2.1 - which is required for the &quot;progress&quot; cursor type." name="promptCursor" valueType="String" defaultValue="browser-dependent" type="classAttr" definingClass="class:RPCManager">
<seeAlso ref="attr:RPCRequest.promptCursor">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem ref="classMethod:FileLoader.cacheShadows" flags="" description="&amp;#010 Caches a set of shadow images at various depths.  For example this code:&amp;#010 &lt;pre&gt;&amp;#010 isc.FileLoader.cacheShadows(&quot;/isomorphic/skins/SmartClient/images/shared/shadows&quot;, &quot;5&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Will cause the following images to be cached:&amp;#010 &lt;pre&gt;&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TL.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_T.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TR.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_L.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_R.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BL.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_B.png&amp;#010 /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BR.png&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cacheShadows" type="classMethod" definingClass="class:FileLoader">
<params description="Base directory containing the shadow images." optional="false" name="baseDir" type="String">
</params>
<params description="List of depths to load. These values corresponds to the Canvas                                    attribute ${isc.DocUtils.linkForRef('attr:Canvas.shadowDepth')}.   This can either be&amp;#010                                    a string with comma separated depths or an Array of depths." optional="false" name="depths" type="String or Array">
</params>
<params description="Name of the base shadow image from which list of URLs is                                    generated.  If not specified, this defaults to &quot;ds.png&quot;." optional="true" name="baseShadowImage" type="String">
</params>
<params description="Optional code to execute when the last of the specified URLs                                      has completed caching." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="classMethod:RPCManager.send" flags="" description="&amp;#010 This method is a convenience wrapper on &lt;code&gt;RPCManager.sendRequest()&lt;/code&gt; - it calls&amp;#010 through to sendRequest().&amp;#010&amp;#010" name="send" type="classMethod" definingClass="class:RPCManager">
<seeAlso ref="classMethod:RPCManager.sendRequest">
</seeAlso>
<seeAlso ref="class:RPCRequest">
</seeAlso>
<params description="data to be passed to the server" optional="false" name="data" type="any">
</params>
<params description="method to call on RPC completion" optional="true" name="callback" type="RPCCallback">
</params>
<params description="object literal containing any additional properties                                        you want to set - these will be applied to the&amp;#010                                        RPCRequest object that will be auto-created for you." optional="true" name="requestParams" type="Object">
</params>
</docItem>
<docItem ref="method:Class.init" flags="A" description="	&amp;#010 Initialize a new instance of this Class.  This method is called automatically by&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.create')}.  &amp;#010 &lt;p&gt;&amp;#010 Override this method to provide initialization logic for your class.  If your class is&amp;#010 a subclass of a UI component (i.e. descendant of ${isc.DocUtils.linkForRef('class:Canvas')}), override&amp;#010 ${isc.DocUtils.linkForRef('method:Canvas.initWidget')} instead. &amp;#010&amp;#010" name="init" type="method" definingClass="class:Class">
<params description="All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}" optional="true" name="arguments 0-N" type="any">
</params>
</docItem>
<docItem ref="attr:DynamicForm.encoding" flags="IRWA" description="encoding for the form, use MULTIPART_ENCODING for file upload forms" name="encoding" valueType="Encoding" defaultValue="DynamicForm.NORMAL" type="attr" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="method:WebService.getSchema" flags="" description=" Get the schema definition of any complexType or element of complexType defined in any&amp;#010 &amp;lt;schema&amp;gt; blocks in the WSDL file this WebService represents.&amp;#010 &amp;#010" name="getSchema" type="method" definingClass="class:WebService">
<params description="name of type or element" optional="false" name="schemaName" type="String">
</params>
<params description="optional type of schema to return, either &quot;element&quot; for                              xs:element definitions only or &quot;type&quot; for xs:complexType&amp;#010                              definitions.  If unspecified, either will be returned,&amp;#010                              with types preferred if names collide" optional="true" name="schemaType" type="String">
</params>
<returns description="requested schema" type="DataSource"></returns>
    <groups>webService</groups>
</docItem>
<docItem ref="method:ValuesManager.getMemberValues" flags="" description="  Returns the subset of this valuesManager's values associated with some member form.&amp;#010  &amp;#010" name="getMemberValues" type="method" definingClass="class:ValuesManager">
<params description="ID of the member form for which we want to retrieve the values." optional="false" name="ID" type="string">
</params>
<returns description="a map of the values for the appropriate member form." type="object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:PickList.showAllOptions" flags="IR" description="If true, even non-matching options will be shown, with configurable &amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator rows')} in between.  Not valid for&amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','databound pickLists')}." name="showAllOptions" valueType="boolean" defaultValue="null" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="attr:DynamicForm.validationURL" flags="IRW" description="validationURL can be set to do server-side validation against a different URL from where&amp;#010 the form will ultimately save, as part of an incremental upgrade strategy for Struts and&amp;#010 Struts-like applications.  &amp;#010 &lt;P&gt;&amp;#010 If set, calling ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} causes an RPC to be sent to this URL to&amp;#010 perform server-side validation of the form values.  If the validation fails, the&amp;#010 validation errors returned by the server are rendered in the form.  If the validation&amp;#010 succeeds, the form is submitted to the URL specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.action')}.&amp;#010 &lt;p&gt;&amp;#010 The form values are available on the server as request parameters (just like a normal form&amp;#010 submit) and also as the values of a DSRequest sent as an RPC alongside the normal&amp;#010 submit.&amp;#010 &lt;p&gt;&amp;#010 The expected response to this request is a DSResponse sent via the RPC mechanism.  If&amp;#010 validation is successful, an empty response with the STATUS_SUCCESS status code is&amp;#010 sufficient.  If there are validation errors, the DSResponse should have the status set to &amp;#010 STATUS_VALIDATION_ERROR and the errors should be set on the response via the&amp;#010 addError()/setErrorReport() API on DSResponse.  See the javadoc for DSResponse for&amp;#010 details.&amp;#010 &lt;P&gt;&amp;#010 See the Struts examples in &lt;code&gt;[webroot]/examples/struts&lt;/code&gt; for usage examples." name="validationURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
    <groups>validation</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.width" description="Size for this component's horizontal dimension.&amp;#010 &lt;P&gt;&amp;#010 Can be a number of pixels, or a percentage like &quot;50%&quot;. Percentage sizes are resolved to&amp;#010 pixel values as follows:&amp;#010 &lt;UL&gt;&amp;#010 &lt;LI&gt;If a canvas has a specified ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')}, sizing will be&amp;#010     a percentage of the size of that widget (see also ${isc.DocUtils.linkForRef('attr:Canvas.percentBox')}).&lt;/LI&gt;&amp;#010 &lt;LI&gt;Otherwise, if a canvas has a ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')}, and&amp;#010     ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is set for the widget, sizing will be a percentage of&amp;#010     the size of that widget (see also ${isc.DocUtils.linkForRef('attr:Canvas.percentBox')}).&lt;/LI&gt;&amp;#010 &lt;LI&gt;Otherwise if this is a child of some other canvas, percentages will be based on the &amp;#010     inner size of the ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}'s viewport.&lt;/LI&gt;&amp;#010 &lt;LI&gt;Otherwise, for top level widgets, sizing is calculated as a percentage of page size.&lt;/LI&gt;&amp;#010 &lt;/UL&gt;&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('class:Layout','Layouts')} may specially interpret percentage sizes on their children,&amp;#010 and also allow &quot;*&quot; as a size.&amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} is set to &quot;visible&quot;, this size is a&amp;#010 minimum, and the component may overflow to show all content and/or children.&amp;#010 &lt;P&gt;&amp;#010 If trying to establish a default width for a custom component, set&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.defaultWidth','defaultWidth')} instead." name="width" valueType="Number or String" defaultValue="null" definingClass="class:Canvas">
    <getter>getWidth</getter>
    <setter>setWidth</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ListGridField.editorEnter" flags="A" description=" Callback fired when the user first starts editing a cell.&lt;br&gt;&amp;#010&amp;#010" name="editorEnter" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.editorEnter">
</seeAlso>
<params description="record for the cell being edited" optional="false" name="record" type="object">
</params>
<params description="value for the cell being edited" optional="false" name="value" type="any">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<params description="ListGrid to which this field belongs" optional="false" name="grid" type="ListGrid">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:ListGrid.groupIndentSize" flags="IRW" description="Default number of pixels by which to indent subgroups relative to parent group." name="groupIndentSize" valueType="Number" defaultValue="20" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
<seeAlso ref="method:ListGrid.getGroupNodeHTML">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="classMethod:isc.makeReverseMap" flags="" description=" Given a key:value map, return a new map as value:key.&amp;#010 &lt;P&gt;&amp;#010 If the same value appears more than once, the key will correspond to the last instance of that&amp;#010 value.&amp;#010&amp;#010" name="makeReverseMap" type="classMethod" definingClass="class:isc">
<params description="object of key:value pairs" optional="false" name="valueMap" type="object">
</params>
<returns description="reversed value map" type="object"></returns>
</docItem>
<docItem ref="type:SCImgURL" description="Properties that refer to images by URL, such as ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.icon')}, are&amp;#010 specially interpreted in SmartClient to allow for simpler and more uniform image URLs,&amp;#010 and to allow applications to be restructured more easily.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;the application image directory&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 When specifying URLs to image files via SmartClient component properties such as&amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')}, any relative path is assumed to be relative to the &quot;application image&amp;#010 directory&quot; (&lt;code&gt;appImgDir&lt;/code&gt;).  The application image directory can be set via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Page.setAppImgDir')}, and defaults to &quot;images/&quot;, representing the typical practice of&amp;#010 placing images in a subdirectory relative to the URL at which the application is accessed.&amp;#010 &lt;P&gt;&amp;#010 For applications that may be launched from multiple URLs, the &lt;code&gt;appImgDir&lt;/code&gt; can be &amp;#010 set to the correct relative path to the image directory by calling&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Page.setAppImgDir')} before any SmartClient components are created.  This enables&amp;#010 applications or components of an application to be launched from multiple locations, or to&amp;#010 be relocated, without changing any image URLs supplied to SmartClient components.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;the &quot;[SKIN]&quot; URL prefix&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The special prefix &quot;[SKIN]&quot; can be used to refer to images within the skin folder&amp;#010 whenever image URLs are supplied to SmartClient components.&amp;#010 &lt;P&gt;&amp;#010 The value of &quot;[SKIN]&quot; is the combination of: &amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; the &quot;skin directory&quot;, established in &lt;code&gt;load_skin.js&lt;/code&gt; via ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')},&amp;#010 plus..&amp;#010 &lt;li&gt; the setting for ${isc.DocUtils.linkForRef('attr:Canvas.skinImgDir','skinImgDir')} on the component where you set an&amp;#010 image URL property&amp;#010 &lt;/ul&gt;&amp;#010 &lt;code&gt;skinImgDir&lt;/code&gt; defaults to &quot;images/&quot;, so creating an ${isc.DocUtils.linkForRef('class:Img')} component with&amp;#010 ${isc.DocUtils.linkForRef('attr:Img.src')} set to &quot;[SKIN]myButton/button.gif&quot; will expand to &lt;code&gt;Page.getSkinDir() +&amp;#010 &quot;/images/myButton/button.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Some components that use a large number of images use &lt;code&gt;skinImgDir&lt;/code&gt; to group them&amp;#010 together and make it possible to relocate all the media for the component with a single setting.&amp;#010 For example, the ${isc.DocUtils.linkForRef('class:TreeGrid')} class sets &lt;code&gt;skinImgDir&lt;/code&gt; to &quot;images/TreeGrid/&quot;.&amp;#010 This allows ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} to be set to just &quot;[SKIN]folder.gif&quot; but refer to&amp;#010 &lt;code&gt;Page.getSkinDir() + &quot;/images/TreeGrid/folder.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 A custom subclass of TreeGrid can set &lt;code&gt;skinImgDir&lt;/code&gt; to a different path, such as &amp;#010 &quot;/images/MyTreeGrid&quot;, to source all media from a different location.&amp;#010 &lt;P&gt;&amp;#010 TIPS:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; subcomponents may not share the parent component's setting for skinImgDir.  For&amp;#010 example, the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')} has the default setting for &quot;skinImgDir&quot;&amp;#010 (&quot;images/&quot;), so the ${isc.DocUtils.linkForRef('attr:Img.src','src')} property used with this component is set to&amp;#010 &quot;[SKIN]/Window/minimize.png&quot; (in the &quot;SmartClient&quot; sample skin).&amp;#010 &lt;li&gt; for a particular image, the skinImgDir setting on the component may not be&amp;#010 convenient.  The prefix &quot;[SKINIMG]&quot; can be used to refer to &lt;code&gt;Page.getSkinDir() +&amp;#010 &quot;/images&quot;&lt;/code&gt; regardless of the setting for &lt;code&gt;skinImgDir&lt;/code&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;B&gt;Stateful image URLs&lt;/B&gt;&amp;#010 &lt;P&gt;&amp;#010 Many image URLs in SmartClient are &quot;stateful&quot;, meaning that the actual URL used to fetch an&amp;#010 image will vary according to the component's state (eg, &quot;Disabled&quot;), generally, by adding a&amp;#010 suffix to the image URL.  See the ${isc.DocUtils.linkForRef('group:skinning','Skinning Overview')} for more&amp;#010 information on statefulness and the ${isc.DocUtils.linkForRef('attr:Img.src')} documentation for information on how&amp;#010 stateful image URLs are formed." name="SCImgURL" type="type">
</docItem>
<docItem ref="attr:RPCRequest.containsCredentials" flags="IRWA" description="For use during ${isc.DocUtils.linkForRef('group:relogin','Relogin')}, this property marks this request an attempt to&amp;#010 login, therefore a response containing the &lt;code&gt;loginRequiredMarker&lt;/code&gt; is a normal&amp;#010 condition and should result in the status code ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_LOGIN_INCORRECT')}&amp;#010 rather than a call to ${isc.DocUtils.linkForRef('classMethod:RPCManager.loginRequired','loginRequired()')}.&amp;#010 &lt;P&gt;&amp;#010 It is not required to set &lt;code&gt;containsCredentials&lt;/code&gt;, however, it does typically&amp;#010 simplify relogin logic by separating the handling of RPCs that are login attempts from RPCs&amp;#010 that are not." name="containsCredentials" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
    <groups>relogin</groups>
</docItem>
<docItem ref="attr:Menu.checkmarkImage" flags="IRWA" description="Default image to display for checkmarked items. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.&amp;#010 Valid src, width and height must be specified." name="checkmarkImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="classMethod:FileLoader.cacheEdgeImages" flags="" description="&amp;#010 Caches a set of edge images derived from a base image.&amp;#010 For example this code:&amp;#010 &lt;pre&gt;&amp;#010 isc.FileLoader.cacheEdgeImages(&quot;/isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6.png&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Will cause the following images to be cached:&amp;#010 &lt;pre&gt;&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TL.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_T.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TR.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_L.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_R.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BL.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_B.png&amp;#010 /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BR.png&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cacheEdgeImages" type="classMethod" definingClass="class:FileLoader">
<params description="List of base image URLs from which position-specific edge                                    names are to be derived.  This can either be a&amp;#010                                    string with comma separated baseURLs or an Array of baseURLs." optional="false" name="baseURLs" type="String or Array">
</params>
<params description="If true, also causes the center image to be cached.  Default                                    is false." optional="true" name="showCenter" type="Boolean">
</params>
<params description="List of edges to load.  If none specified, The following                                    default list will be used:&amp;#010                                    &quot;TL,T,TR,L,R,BL,B,BR&quot;.  The list of valid values is the&amp;#010                                    set of extensions specified by&amp;#010                                    ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeImage')}. This can&amp;#010                                    either be a string with comma separated edge extension or an&amp;#010                                    Array of edge extensions." optional="true" name="edges" type="String or Array">
</params>
<params description="List of colors to cache.  If not specified, no color is                                     specified.  The list of valid colors are those that you have&amp;#010                                     specified as ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeColor')}.&amp;#010                                    This can either be a string with comma separated colors or an Array&amp;#010                                    of colors." optional="true" name="colors" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified URLs                                      has completed caching." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="group:layoutMember" description="Properties that can be set on members of a layout to control how the layout is done" name="layoutMember" type="group">
    <refs>method:Canvas.setShowResizeBar</refs>
    <refs>method:Layout.getMemberOffset</refs>
    <refs>method:Layout.getMemberDefaultBreadth</refs>
    <refs>attr:Layout.defaultLayoutAlign</refs>
    <refs>attr:Layout.memberOverlap</refs>
    <refs>attr:Canvas.layoutAlign</refs>
    <refs>attr:Canvas.showResizeBar</refs>
    <refs>attr:Canvas.resizeBarTarget</refs>
    <refs>attr:Canvas.extraSpace</refs>
    <refs>classAttr:isc.itemIndent</refs>
    <refs>classAttr:isc.itemStartIndent</refs>
    <refs>classAttr:isc.itemEndIndent</refs>
    <refs>attr:Canvas.canDropBefore</refs>
</docItem>
<docItem ref="attr:StretchImg.items" flags="IRW" description="The list of images to display as an array of objects specifying the image names and&amp;#010 sizes.&amp;#010 &lt;P&gt;&amp;#010 The &quot;name&quot; is appended as a suffix to the ${isc.DocUtils.linkForRef('attr:StretchImg.src')} URL in order to fetch separate&amp;#010 media files for each image.&amp;#010 &lt;P&gt;&amp;#010 The height and width can be set to a number, &quot;*&quot; (remaining space, divided amongst all&amp;#010 images that specify &quot;*&quot;) or to the name of a property on the StretchImg component, such&amp;#010 as ${isc.DocUtils.linkForRef('attr:StretchImg.capSize')}.  &amp;#010 &lt;P&gt;&amp;#010 Height or width is only used on the axis on which images are stacked.  For example, if&amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true, images stack vertically and heights are used to size images on&amp;#010 the vertical axis, but all images will have width matching the overall component size.&amp;#010 &lt;P&gt;&amp;#010 For example, the default setting for &lt;code&gt;items&lt;/code&gt;, which is used to produce&amp;#010 stretchable buttons and headers with fixed-size endcaps, is as follows:&amp;#010 &lt;pre&gt;&amp;#010   items:[&amp;#010        {height:&quot;capSize&quot;, name:&quot;start&quot;, width:&quot;capSize&quot;},&amp;#010        {height:&quot;*&quot;, name:&quot;stretch&quot;, width:&quot;*&quot;},&amp;#010        {height:&quot;capSize&quot;, name:&quot;end&quot;, width:&quot;capSize&quot;}&amp;#010   ]&amp;#010 &lt;/pre&gt;" name="items" valueType="Array of Object" defaultValue="see below" type="attr" definingClass="class:StretchImg">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.showErrorStyle" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorStyle" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>validation</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:PickList.optionDataSource" flags="IRA" description="If set, this FormItem will derive data to show in the PickList by fetching records from&amp;#010 the specified &lt;code&gt;optionDataSource&lt;/code&gt;.  The fetched data will be used as a&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in&amp;#010 the loaded records, to derive one valueMap entry per record loaded from the&amp;#010 optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by&amp;#010 setting ${isc.DocUtils.linkForRef('attr:PickList.pickListFields')}.&amp;#010 &lt;P&gt;&amp;#010 The data will be retrieved via a &quot;fetch&quot; operation on the DataSource, passing the &amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing&amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.optionFilterContext')} (if set) as DSRequest properties.&amp;#010 &lt;P&gt;&amp;#010 The fetch will be triggered when the pickList is first shown, or, you can set&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is&amp;#010 first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually &amp;#010 trigger a fetch.&amp;#010 &lt;P&gt;&amp;#010 Data paging is automatically enabled if the optionDataSource supports it.  As the&amp;#010 pickList is scrolled by the user, requests for additional data will be automatically&amp;#010 issued.&amp;#010 &lt;P&gt;&amp;#010 For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,&amp;#010 with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.&amp;#010 If your dataSource is not capable of filtering results by search criteria (eg the&amp;#010 dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:PickList.filterLocally')} to have the&amp;#010 entire dataset loaded up front and filtering performed in the browser.  This disables&amp;#010 data paging.&amp;#010 &lt;P&gt;&amp;#010 Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}&amp;#010 behaviors, eg, fetching individual display values before the pickList is shown.&amp;#010 &lt;P&gt;&amp;#010 Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is &lt;b&gt;also&lt;/b&gt; specified&amp;#010 for the field (either directly in the form item or as part of the field definition in&amp;#010 the dataSource), it will be preferred to the data derived from the optionDataSource for&amp;#010 whatever mappings are present." name="optionDataSource" valueType="DataSource | String" defaultValue="null" type="attr" definingClass="interface:PickList">
    <getter>getOptionDataSource</getter>
</docItem>
<docItem ref="attr:ToolStrip.vertical" flags="IRW" description="Indicates whether the components are drawn horizontally from left to right (false), or&amp;#010 vertically from top to bottom (true)." name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ToolStrip">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DynamicForm.addFieldErrors" flags="" description=" Adds field validation error[s] to the specified field. Errors passed in will be added&amp;#010 to any existing errors on the field caused by validation or a previous call to this method.&amp;#010 &lt;br&gt;&amp;#010 The errors parameter may be passed in as a string (a single error message), or an array of&amp;#010 strings.&lt;br&gt;&amp;#010 The showErrors parameter allows the errors to be displayed immediately. Alternatively, call&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')} to display the errors for this field.&amp;#010" name="addFieldErrors" type="method" definingClass="class:DynamicForm">
<params description="field to apply the new errors to" optional="false" name="fieldName" type="string">
</params>
<params description="errors to apply to the field in question" optional="false" name="errors" type="string | array of strings">
</params>
<params description="If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display" optional="false" name="show" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:DataBoundComponent.updateOperation" flags="IRW" description="Operation ID this component should use when performing update operations." name="updateOperation" valueType="String" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
<seeAlso ref="attr:DSRequest.operationId">
</seeAlso>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.defaultValue" flags="IRW" description="Static default value for this ComboBoxItem. To default to the first option use&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} instead." name="defaultValue" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="method:CubeGrid.hiliteCellList" flags="" description="&amp;#010      apply a hilite to an array of cells.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="hiliteCellList" type="method" definingClass="class:CubeGrid">
<params description="cells to hilite" optional="false" name="cellObjList" type="Array of cell objects">
</params>
<params description="ID of hilite to apply to cells" optional="false" name="hiliteID" type="string">
</params>
<returns description="true if the cells were successfully hilited." type="boolean"></returns>
    <groups>hiliting</groups>
</docItem>
<docItem ref="attr:MenuItem.checkIf" flags="IR" description="A string of script that is evaluated to a boolean value for the item's checked property&amp;#010 whenever the menu is shown or a shortcut key is pressed.&amp;#010 &lt;p&gt;&amp;#010 If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.checked')} instead." name="checkIf" valueType="expression" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('menuDynamicItems')}</examples>
    <groups>dynamicMenuItem</groups>
</docItem>
<docItem ref="method:Canvas.getVisibleHeight" flags="A" description="      Return the visible height of the Canvas.&amp;#010&amp;#010" name="getVisibleHeight" type="method" definingClass="class:Canvas">
<returns description="visible height in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:RestDataSource.transformResponse" flags="" description=" RestDataSource.transformResponse() implemented to extract data and meta-data properties&amp;#010 from the XML Response provided by the server.&lt;br&gt;&amp;#010 See ${isc.DocUtils.linkForRef('class:RestDataSource','RestDataSource overview')} for a description of the &amp;#010 standard data format expected to returned from the server.&amp;#010" name="transformResponse" type="method" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:CubeGrid.canEdit" flags="IRW" description="Whether cells can be edited in this grid.  Can be override on a per-facetValue basis." name="canEdit" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>cellEditing</groups>
</docItem>
<docItem ref="attr:DateChooser.headerStyle" flags="IRW" description="CSS style applied to the day-of-week headers." name="headerStyle" valueType="string" defaultValue="&quot;dateChooserButtonDisabled&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:DateChooser.nextMonthIconHeight" flags="IRW" description="Height of the icon for the next month button" name="nextMonthIconHeight" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="group:appearance" description="Properties defining an object's apperance" name="appearance" type="group">
    <refs>method:GridRenderer.getCellStyle</refs>
    <refs>method:GridRenderer.cellIsEnabled</refs>
    <refs>method:GridRenderer.refreshCellStyle</refs>
    <refs>method:GridRenderer.refreshCell</refs>
    <refs>method:GridRenderer.refreshRow</refs>
    <refs>method:ListGrid.getCellStyle</refs>
    <refs>method:ListGrid.refreshCellStyle</refs>
    <refs>method:ListGridField.getFieldTitle</refs>
    <refs>method:ListGridField.getSummaryTitle</refs>
    <refs>method:ListGrid.refreshCell</refs>
    <refs>method:ListGrid.refreshRow</refs>
    <refs>method:TextItem.getHint</refs>
    <refs>method:CubeGrid.getCellStyle</refs>
    <refs>method:StatefulCanvas.setState</refs>
    <refs>method:StatefulCanvas.setTitle</refs>
    <refs>method:Button.setTitle</refs>
    <refs>method:Button.setState</refs>
    <refs>method:Img.setSrc</refs>
    <refs>method:Img.resetSrc</refs>
    <refs>method:StretchImg.setState</refs>
    <refs>method:ImgButton.setTitle</refs>
    <refs>method:ImgButton.setState</refs>
    <refs>method:StretchImgButton.setTitle</refs>
    <refs>method:StretchImgButton.setState</refs>
    <refs>method:Canvas.setPadding</refs>
    <refs>method:Canvas.setBackgroundColor</refs>
    <refs>method:Canvas.setBackgroundImage</refs>
    <refs>method:Canvas.setBorder</refs>
    <refs>method:Canvas.setClassName</refs>
    <refs>method:Canvas.setStyleName</refs>
    <refs>method:Window.setStatus</refs>
    <refs>method:Window.setSrc</refs>
    <refs>method:Window.centerInPage</refs>
    <refs>attr:DetailViewer.recordsPerBlock</refs>
    <refs>attr:DetailViewer.blockSeparator</refs>
    <refs>attr:DetailViewer.showEmptyField</refs>
    <refs>attr:DetailViewer.emptyCellValue</refs>
    <refs>attr:DetailViewer.labelStyle</refs>
    <refs>attr:DetailViewer.cellStyle</refs>
    <refs>attr:DetailViewer.headerStyle</refs>
    <refs>attr:DetailViewer.separatorStyle</refs>
    <refs>attr:ListGrid.styleName</refs>
    <refs>attr:ListGridField.type</refs>
    <refs>attr:ListGridField.title</refs>
    <refs>attr:ListGridField.showIf</refs>
    <refs>attr:ListGridField.summaryTitle</refs>
    <refs>attr:ListGridField.width</refs>
    <refs>attr:ListGridField.align</refs>
    <refs>attr:ListGridField.headerBaseStyle</refs>
    <refs>attr:ListGridField.headerTitleStyle</refs>
    <refs>attr:ListGridField.cellAlign</refs>
    <refs>attr:ListGridField.baseStyle</refs>
    <refs>attr:ListGrid.bodyBackgroundColor</refs>
    <refs>attr:ListGrid.bodyStyleName</refs>
    <refs>attr:ListGrid.leaveScrollbarGap</refs>
    <refs>attr:ListGrid.dateFormatter</refs>
    <refs>attr:ListGrid.timeFormatter</refs>
    <refs>attr:ListGrid.editFailedBaseStyle</refs>
    <refs>attr:ListGrid.editFailedCSSText</refs>
    <refs>attr:ListGrid.editPendingBaseStyle</refs>
    <refs>attr:ListGrid.editPendingCSSText</refs>
    <refs>attr:ListGrid.recordBaseStyleProperty</refs>
    <refs>attr:ListGrid.frozenBaseStyle</refs>
    <refs>attr:ListGrid.showRollOver</refs>
    <refs>attr:ListGrid.selectionType</refs>
    <refs>attr:ListGrid.showHeader</refs>
    <refs>attr:ListGrid.headerBarStyle</refs>
    <refs>attr:ListGrid.headerBackgroundColor</refs>
    <refs>attr:ListGrid.headerButtonConstructor</refs>
    <refs>attr:ListGrid.headerBaseStyle</refs>
    <refs>attr:ListGrid.headerTitleStyle</refs>
    <refs>attr:ListGrid.frozenHeaderBaseStyle</refs>
    <refs>attr:ListGrid.frozenHeaderTitleStyle</refs>
    <refs>attr:ListGrid.headerButtonDefaults</refs>
    <refs>attr:ListGrid.headerButtonProperties</refs>
    <refs>attr:ListGrid.sorterConstructor</refs>
    <refs>attr:ListGrid.sorterDefaults</refs>
    <refs>attr:ListGrid.sorterProperties</refs>
    <refs>attr:ListGrid.showSortArrow</refs>
    <refs>attr:ListGrid.skinImgDir</refs>
    <refs>attr:ListGrid.sortAscendingImage</refs>
    <refs>attr:ListGrid.sortDescendingImage</refs>
    <refs>attr:TreeGrid.indentSize</refs>
    <refs>attr:DateChooser.firstDayOfWeek</refs>
    <refs>attr:DynamicForm.longTextEditorThreshold</refs>
    <refs>attr:DynamicForm.longTextEditorType</refs>
    <refs>attr:DynamicForm.errorOrientation</refs>
    <refs>attr:FormItem.type</refs>
    <refs>attr:FormItem.editorType</refs>
    <refs>attr:FormItem.dateFormatter</refs>
    <refs>attr:FormItem.timeFormatter</refs>
    <refs>attr:FormItem.visible</refs>
    <refs>attr:FormItem.disabled</refs>
    <refs>attr:FormItem.align</refs>
    <refs>attr:FormItem.textAlign</refs>
    <refs>attr:FormItem.showErrorIcon</refs>
    <refs>attr:FormItem.showErrorText</refs>
    <refs>attr:FormItem.showErrorStyle</refs>
    <refs>attr:FormItem.errorOrientation</refs>
    <refs>attr:FormItem.hint</refs>
    <refs>attr:FormItem.showHint</refs>
    <refs>attr:FormItem.showFocused</refs>
    <refs>attr:FormItem.showDisabled</refs>
    <refs>attr:FormItem.cellStyle</refs>
    <refs>attr:FormItem.hintStyle</refs>
    <refs>attr:FormItem.textBoxStyle</refs>
    <refs>attr:FormItem.cellClassName</refs>
    <refs>attr:FormItem.errorCellClassName</refs>
    <refs>attr:FormItem.hintClassName</refs>
    <refs>attr:TextItem.width</refs>
    <refs>attr:TextItem.height</refs>
    <refs>attr:TextItem.textBoxStyle</refs>
    <refs>attr:BlurbItem.showTitle</refs>
    <refs>attr:BlurbItem.colSpan</refs>
    <refs>attr:BlurbItem.textBoxStyle</refs>
    <refs>attr:BlurbItem.wrap</refs>
    <refs>attr:BlurbItem.clipValue</refs>
    <refs>attr:ButtonItem.baseStyle</refs>
    <refs>attr:ButtonItem.showTitle</refs>
    <refs>attr:SelectItem.height</refs>
    <refs>attr:SelectOtherItem.separatorTitle</refs>
    <refs>attr:SelectOtherItem.otherTitle</refs>
    <refs>attr:SelectItem.textBoxStyle</refs>
    <refs>attr:SelectItem.controlStyle</refs>
    <refs>attr:SelectItem.pickerIconStyle</refs>
    <refs>attr:SelectItem.showFocused</refs>
    <refs>attr:SelectItem.multiple</refs>
    <refs>attr:CheckboxItem.titleStyle</refs>
    <refs>attr:CheckboxItem.textBoxStyle</refs>
    <refs>attr:CheckboxItem.checkedImage</refs>
    <refs>attr:CheckboxItem.uncheckedImage</refs>
    <refs>attr:CheckboxItem.unsetImage</refs>
    <refs>attr:HeaderItem.defaultValue</refs>
    <refs>attr:HeaderItem.showTitle</refs>
    <refs>attr:HeaderItem.textBoxStyle</refs>
    <refs>attr:HeaderItem.colSpan</refs>
    <refs>attr:HeaderItem.startRow</refs>
    <refs>attr:HeaderItem.endRow</refs>
    <refs>attr:HiddenItem.showTitle</refs>
    <refs>attr:HiddenItem.colSpan</refs>
    <refs>attr:HiddenItem.rowSpan</refs>
    <refs>attr:StaticTextItem.wrap</refs>
    <refs>attr:StaticTextItem.clipValue</refs>
    <refs>attr:StaticTextItem.textBoxStyle</refs>
    <refs>attr:RadioGroupItem.vertical</refs>
    <refs>attr:DateItem.textAlign</refs>
    <refs>attr:DateItem.startDate</refs>
    <refs>attr:DateItem.endDate</refs>
    <refs>attr:DateItem.centuryThreshold</refs>
    <refs>attr:SpacerItem.showTitle</refs>
    <refs>attr:SpacerItem.width</refs>
    <refs>attr:SpacerItem.height</refs>
    <refs>attr:RowSpacerItem.showTitle</refs>
    <refs>attr:RowSpacerItem.colSpan</refs>
    <refs>attr:RowSpacerItem.startRow</refs>
    <refs>attr:RowSpacerItem.endRow</refs>
    <refs>attr:TextAreaItem.wrap</refs>
    <refs>attr:TextAreaItem.width</refs>
    <refs>attr:TextAreaItem.height</refs>
    <refs>attr:TextAreaItem.textBoxStyle</refs>
    <refs>attr:ToolbarItem.showTitle</refs>
    <refs>attr:ToolbarItem.startRow</refs>
    <refs>attr:ToolbarItem.endRow</refs>
    <refs>attr:ToolbarItem.colSpan</refs>
    <refs>attr:ToolbarItem.buttonBaseStyle</refs>
    <refs>attr:CubeGrid.styleName</refs>
    <refs>attr:CubeGrid.bodyStyleName</refs>
    <refs>attr:CubeGrid.alternateRecordStyles</refs>
    <refs>attr:StatefulCanvas.align</refs>
    <refs>attr:StatefulCanvas.valign</refs>
    <refs>attr:Button.align</refs>
    <refs>attr:Button.valign</refs>
    <refs>attr:Img.src</refs>
    <refs>attr:Img.activeAreaHTML</refs>
    <refs>attr:Img.imageType</refs>
    <refs>attr:StretchImg.vertical</refs>
    <refs>attr:StretchImg.capSize</refs>
    <refs>attr:StretchImg.src</refs>
    <refs>attr:StretchImg.hSrc</refs>
    <refs>attr:StretchImg.vSrc</refs>
    <refs>attr:StretchImg.imageType</refs>
    <refs>attr:StretchImg.items</refs>
    <refs>attr:Progressbar.percentDone</refs>
    <refs>attr:Progressbar.length</refs>
    <refs>attr:Progressbar.breadth</refs>
    <refs>attr:Progressbar.vertical</refs>
    <refs>attr:Progressbar.src</refs>
    <refs>attr:Toolbar.vertical</refs>
    <refs>attr:Toolbar.buttonConstructor</refs>
    <refs>attr:Toolbar.buttonDefaults</refs>
    <refs>attr:ToolStrip.styleName</refs>
    <refs>attr:ToolStrip.vertical</refs>
    <refs>attr:ImgButton.align</refs>
    <refs>attr:ImgButton.valign</refs>
    <refs>attr:ImgButton.src</refs>
    <refs>attr:StretchImgButton.align</refs>
    <refs>attr:StretchImgButton.valign</refs>
    <refs>attr:StretchImgButton.vertical</refs>
    <refs>attr:StretchImgButton.capSize</refs>
    <refs>attr:Scrollbar.btnSize</refs>
    <refs>attr:Scrollbar.showCorner</refs>
    <refs>attr:Scrollbar.allowThumbDownState</refs>
    <refs>attr:Scrollbar.showTrackEnds</refs>
    <refs>attr:Splitbar.src</refs>
    <refs>attr:Splitbar.hSrc</refs>
    <refs>attr:Splitbar.vSrc</refs>
    <refs>attr:Splitbar.capSize</refs>
    <refs>attr:ImgSplitbar.src</refs>
    <refs>attr:Canvas.autoShowParent</refs>
    <refs>attr:Canvas.visibility</refs>
    <refs>attr:Canvas.className</refs>
    <refs>attr:Canvas.styleName</refs>
    <refs>attr:Canvas.margin</refs>
    <refs>attr:Canvas.padding</refs>
    <refs>attr:Canvas.border</refs>
    <refs>attr:Canvas.backgroundColor</refs>
    <refs>attr:Canvas.backgroundImage</refs>
    <refs>attr:Canvas.backgroundRepeat</refs>
    <refs>attr:ImgTab.capSize</refs>
    <refs>attr:Window.modalMask</refs>
    <refs>attr:Window.showModalMask</refs>
    <refs>attr:Window.modalMaskOpacity</refs>
    <refs>attr:Window.modalMaskStyle</refs>
    <refs>attr:Window.autoCenter</refs>
    <refs>attr:Window.showBody</refs>
    <refs>attr:Window.bodyStyle</refs>
    <refs>attr:Window.bodyColor</refs>
    <refs>attr:Window.hiliteBodyColor</refs>
    <refs>attr:Window.items</refs>
    <refs>attr:Window.src</refs>
    <refs>attr:Window.contentsType</refs>
    <refs>attr:Window.bodyConstructor</refs>
    <refs>attr:Window.bodyDefaults</refs>
    <refs>attr:Window.contentLayout</refs>
    <refs>attr:Window.autoSize</refs>
    <refs>attr:Window.showHeader</refs>
    <refs>attr:Window.showHeaderBackground</refs>
    <refs>attr:Window.headerStyle</refs>
    <refs>attr:Window.headerSrc</refs>
    <refs>attr:Window.hiliteHeaderStyle</refs>
    <refs>attr:Window.hiliteHeaderSrc</refs>
    <refs>attr:Window.showTitle</refs>
    <refs>attr:Window.title</refs>
    <refs>attr:Window.headerLabelDefaults</refs>
    <refs>attr:Window.showHeaderIcon</refs>
    <refs>attr:Window.headerIconDefaults</refs>
    <refs>attr:Window.showCloseButton</refs>
    <refs>attr:Window.showMinimizeButton</refs>
    <refs>attr:Window.minimized</refs>
    <refs>attr:Window.defaultMinimizeHeight</refs>
    <refs>attr:Window.minimizeHeight</refs>
    <refs>attr:Window.animateMinimize</refs>
    <refs>attr:Window.minimizeTime</refs>
    <refs>attr:Window.minimizeAcceleration</refs>
    <refs>attr:Window.maximized</refs>
    <refs>attr:Window.showMaximizeButton</refs>
    <refs>attr:Window.showFooter</refs>
    <refs>attr:Window.footerHeight</refs>
    <refs>attr:Window.showStatusBar</refs>
    <refs>attr:Window.showResizer</refs>
    <refs>attr:Dialog.styleName</refs>
    <refs>attr:Dialog.showToolbar</refs>
    <refs>type:SortArrow</refs>
    <refs>type:FormItemBaseStyle</refs>
    <refs>type:Alignment</refs>
    <refs>type:VerticalAlignment</refs>
    <refs>type:Direction</refs>
    <refs>type:ImageStyle</refs>
    <refs>type:CSSStyleName</refs>
</docItem>
<docItem ref="method:ListGrid.transferSelectedData" flags="" description=" Simulates a drag / drop type transfer of the selected records in some other grid to this&amp;#010 listGrid, without requiring any user interaction.&lt;br&gt;&amp;#010 See the ${isc.DocUtils.linkForRef('group:dragging')} documentation for an overview of list grid drag/drop data&amp;#010 transfer.&amp;#010" name="transferSelectedData" type="method" definingClass="class:ListGrid">
<params description="source grid from which the records will be tranferred" optional="false" name="sourceGrid" type="ListGrid">
</params>
<params description="target index (drop position) of the rows within this grid." optional="true" name="index" type="integer">
</params>
    <examples>${isc.DocUtils.linkForExampleId('dragListMove')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="method:SelectItem.getSelectedRecord" flags="" description=" Returns the entire record object associated with the current value for this item&amp;#010 (or null if no matching record exists in the PickList data).&lt;br&gt;&amp;#010 Most commonly used for databound pickListItems to retrieve the values of other fields&amp;#010 in the record&amp;#010&amp;#010" name="getSelectedRecord" type="method" definingClass="class:SelectItem">
<returns description="record object" type="object"></returns>
</docItem>
<docItem ref="attr:TabBar.baseLineThickness" flags="IR" description="Thickness of the baseLine, in pixels.  This should be set to match the media specified&amp;#010 by ${isc.DocUtils.linkForRef('attr:TabBar.baseLineSrc')}.  The baseLineThickness also determines the degree of overlap with&amp;#010 the TabSet's paneContainer when using decorative edges - see ${isc.DocUtils.linkForRef('attr:TabSet.paneContainer')}&amp;#010 for details." name="baseLineThickness" valueType="number" defaultValue="1" type="attr" definingClass="class:TabBar">
    <groups>baseLine</groups>
</docItem>
<docItem ref="classMethod:isA.nonemptyString" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a non-empty String?&lt;br&gt;&lt;br&gt;&amp;#010	&amp;#010" name="nonemptyString" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a non-empty string" type="boolean"></returns>
</docItem>
<docItem ref="method:FormItem.getValueIcon" flags="" description=" If specified this stringMethod allows the developer to specify the image source for an &amp;#010 icon to be displayed for the current form item value. &amp;#010 Takes presidence over ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')}&amp;#010" name="getValueIcon" type="method" definingClass="class:FormItem">
<params description="value of the item for which an item should be returned." optional="false" name="value" type="any">
</params>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:ResultSet.criteriaPolicy" flags="IRWA" description="Decides under what conditions the cache should be dropped when the ${isc.DocUtils.linkForRef('type:Criteria')}&amp;#010 changes" name="criteriaPolicy" valueType="CriteriaPolicy" defaultValue="null" type="attr" definingClass="class:ResultSet">
<seeAlso ref="type:Criteria">
</seeAlso>
<seeAlso ref="attr:DataSource.criteriaPolicy">
</seeAlso>
</docItem>
<docItem ref="attr:TreeGrid.indentSize" flags="IRW" description="The amount of indentation (in pixels) to add to a node's icon/title for each level&amp;#010          down in this tree's hierarchy." name="indentSize" valueType="number" defaultValue="20" type="attr" definingClass="class:TreeGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:GridRenderer.cellIsEnabled" flags="A" description=" Whether this cell should be considered enabled.  Affects whether events will fire for the&amp;#010 cell, and the default styling behavior in getCellStyle. &amp;#010&amp;#010" name="cellIsEnabled" type="method" definingClass="class:GridRenderer">
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether this record is enabled or not" type="boolean"></returns>
    <groups>selection</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:GridRenderer.recordCustomStyleProperty" flags="IRW" description="Denotes the name of a property that can be set on records to display a custom style.&amp;#010 For example if this property is set to &lt;code&gt;&quot;customStyle&quot;&lt;/code&gt;, setting &amp;#010 &lt;code&gt;record.customStyle&lt;/code&gt; to a css styleName will cause the record in question to&amp;#010 render out with that styling applied to it.  Note that this will be a static &amp;#010 style - it will not be modified as the state of the record (selected / over etc) changes." name="recordCustomStyleProperty" valueType="&quot;customStyle&quot;" defaultValue="string" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.getCellStyle">
</seeAlso>
</docItem>
<docItem ref="attr:Layout.align" flags="IRW" description="Alignment of all members in this Layout on the length axis.  Defaults to &quot;top&quot; for&amp;#010 vertical Layouts, and &quot;left&quot; for horizontal Layouts." name="align" valueType="Alignment or VerticalAlignment" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="method:StatefulCanvas.getActionType" flags="A" description=" Return the 'actionType' for this canvas (radio / checkbox / button)&amp;#010" name="getActionType" type="method" definingClass="class:StatefulCanvas">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:CubeGrid.getEventRow" flags="" description=" Returns the row number of the most recent mouse event.&amp;#010" name="getEventRow" type="method" definingClass="class:CubeGrid">
<params description="optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event" optional="false" name="y" type="number">
</params>
<returns description="row number, or -2 if beyond last drawn row" type="number"></returns>
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:TreeGrid.cantDragIntoSelfMessage" flags="IR" description="Message displayed when user attempts to drop a dragged node onto itself." name="cantDragIntoSelfMessage" valueType="String" defaultValue="&quot;You can't drag an item into itself.&quot;" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.canDragRecordsOut">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canAcceptDroppedRecords">
</seeAlso>
<seeAlso ref="attr:TreeGrid.canReorderRecords">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:DynamicForm.fixedColWidths" flags="IRW" description="If true, we ensure that column widths are at least as large as you specify them.  This&amp;#010 means that if any single column overflows (due to, eg, a long unbreakable title),&amp;#010 the form as a whole overflows.&amp;#010 &lt;P&gt;&amp;#010 If false, columns will have their specified sizes as long as no column overflows.  If&amp;#010 any column overflows, space will be taken from any other columns that aren't filling the&amp;#010 available room, until there is no more free space, in which case the form as a whole&amp;#010 overflows." name="fixedColWidths" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
    <groups>tableLayout</groups>
</docItem>
<docItem ref="attr:ListGrid.valueIconSize" flags="IRW" description="Default width and height of value icons for this ListGrid.&amp;#010 Can be overridden at the listGrid level via explicit ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconHeight')}, or at the field level via ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')},&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')} and {ListGridField.valueIconHeight}" name="valueIconSize" valueType="number" defaultValue="16" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.valueIconWidth">
</seeAlso>
<seeAlso ref="attr:ListGrid.valueIconHeight">
</seeAlso>
<seeAlso ref="attr:ListGridField.valueIconSize">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetValueHoverHeight" flags="IRWA" description="If specified and &lt;code&gt;this.showHover&lt;/code&gt; is true, this is the default height to apply&amp;#010 to hover tips shown for facetValues. If unset, hover canvas will be sized to &amp;#010 &lt;code&gt;this.hoverHeight&lt;/code&gt; if specified instead." name="facetValueHoverHeight" valueType="measure" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverHeight">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:Tree.openFolder" flags="" description="&amp;#010 Open a particular node&amp;#010&amp;#010" name="openFolder" type="method" definingClass="class:Tree">
<seeAlso ref="method:ResultTree.dataArrived">
</seeAlso>
<params description="node to open" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="attr:Window.header" flags="R" description="Header for the Window, based on an HLayout" name="header" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem flags="IR" type="attr" ref="attr:Canvas.showShadow" description="Whether to show a drop shadow for this Canvas" name="showShadow" valueType="boolean" defaultValue="false" definingClass="class:Canvas">
    <setter>setShowShadow</setter>
    <examples>${isc.DocUtils.linkForExampleId('shadows')}</examples>
    <groups>shadow</groups>
</docItem>
<docItem ref="class:SpinnerItem" description="Item for picking a number. Includes arrow buttons to increase / decrease the value" name="SpinnerItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:SpinnerItem.step</attrs>
    <attrs>attr:SpinnerItem.max</attrs>
    <attrs>attr:SpinnerItem.min</attrs>
    <examples>${isc.DocUtils.linkForExampleId('spinnerItem')}</examples>
</docItem>
<docItem ref="classMethod:isc.warn" flags="" description=" Show a modal dialog with a message, icon, and &quot;OK&quot; button.&amp;#010 &lt;P&gt;&amp;#010 The callback will receive boolean true for an OK button click, or null if the Dialog is&amp;#010 dismissed via the close button.&amp;#010&amp;#010" name="warn" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Warn">
</seeAlso>
<seeAlso ref="classMethod:isc.say">
</seeAlso>
<seeAlso ref="classMethod:isc.ask">
</seeAlso>
<seeAlso ref="method:Dialog.okClick">
</seeAlso>
<seeAlso ref="classAttr:Dialog.WARN_TITLE">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="Optional Callback to fire when the user                                       dismisses the dialog. This has the single parameter&amp;#010                                      'value', indicating the value returned by the Warn&amp;#010                                      dialog from 'okClick()' etc." optional="true" name="callback" type="Callback">
</params>
<params description="additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for&amp;#010                                      the Dialog, set properties.buttons to an array of buttons&amp;#010										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }" optional="true" name="properties" type="object">
</params>
    <groups>Prompting</groups>
</docItem>
<docItem ref="method:FacetValue.getCellValue" flags="" description=" Callout to determine custom value to display for cells displayed for this facetValue&amp;#010 &lt;P&gt;&amp;#010 Can only be set on the ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId','metric facet')}, or if no metric facet&amp;#010 is specified, on the innermost column facet.&amp;#010&amp;#010" name="getCellValue" type="method" definingClass="class:FacetValue">
<params description="this facetValue's CubeGrid" optional="false" name="viewer" type="CubeGrid">
</params>
<params description="cell record" optional="false" name="record" type="object">
</params>
<params description="row value for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column value for the cell" optional="false" name="colNum" type="number">
</params>
<returns description="HTML to display" type="string"></returns>
</docItem>
<docItem ref="group:dragdrop" description="Dragging objects and dropping them onto other objects" name="dragdrop" type="group">
    <refs>method:Canvas.setDragTracker</refs>
    <refs>method:Canvas.willAcceptDrop</refs>
    <refs>method:Canvas.getHSnapPosition</refs>
    <refs>method:Canvas.getVSnapPosition</refs>
    <refs>method:Canvas.shouldSnapOnDrop</refs>
    <refs>classMethod:EventHandler.getDragRect</refs>
    <refs>classMethod:Canvas.getEventEdge</refs>
    <refs>attr:GridRenderer.snapToCells</refs>
    <refs>attr:GridRenderer.snapInsideBorder</refs>
    <refs>attr:TreeGrid.canDragRecordsOut</refs>
    <refs>attr:TreeGrid.canAcceptDroppedRecords</refs>
    <refs>attr:TreeGrid.canReorderRecords</refs>
    <refs>attr:TreeGrid.canReparentNodes</refs>
    <refs>attr:TreeGrid.manyItemsImage</refs>
    <refs>attr:Layout.canDropComponents</refs>
    <refs>attr:Layout.dropLineThickness</refs>
    <refs>attr:Layout.showDragPlaceHolder</refs>
    <refs>attr:Layout.placeHolderProperties</refs>
    <refs>attr:Layout.placeHolderDefaults</refs>
    <refs>attr:Canvas.canDrag</refs>
    <refs>attr:Canvas.dragStartDistance</refs>
    <refs>attr:Canvas.dragIntersectStyle</refs>
    <refs>attr:Canvas.canDragReposition</refs>
    <refs>attr:Canvas.dragRepositionCursor</refs>
    <refs>attr:Canvas.canDragResize</refs>
    <refs>attr:Canvas.resizeFrom</refs>
    <refs>attr:Canvas.edgeCursorMap</refs>
    <refs>attr:Canvas.keepInParentRect</refs>
    <refs>attr:Canvas.dragAppearance</refs>
    <refs>attr:Canvas.dragType</refs>
    <refs>attr:Canvas.dragTarget</refs>
    <refs>attr:Canvas.showDragShadow</refs>
    <refs>attr:Canvas.dragOpacity</refs>
    <refs>attr:Canvas.canDrop</refs>
    <refs>attr:Canvas.canAcceptDrop</refs>
    <refs>attr:Canvas.dropTypes</refs>
    <refs>attr:Canvas.snapToGrid</refs>
    <refs>attr:Canvas.snapResizeToGrid</refs>
    <refs>attr:Canvas.childrenSnapToGrid</refs>
    <refs>attr:Canvas.childrenSnapResizeToGrid</refs>
    <refs>attr:Canvas.snapHGap</refs>
    <refs>attr:Canvas.snapVGap</refs>
    <refs>attr:Canvas.snapHDirection</refs>
    <refs>attr:Canvas.snapVDirection</refs>
    <refs>attr:Canvas.snapAxis</refs>
    <refs>attr:Canvas.snapOnDrop</refs>
    <refs>attr:Window.keepInParentRect</refs>
    <refs>type:DragAppearance</refs>
</docItem>
<docItem ref="method:ValuesManager.getFieldErrors" flags="" description=" Returns any validation errors for some field in this valuesManager.&amp;#010 Errors will be returned as either a string (a single error message), or an array &amp;#010 of strings. If no errors are present, will return null.&amp;#010" name="getFieldErrors" type="method" definingClass="class:ValuesManager">
<params description="fieldName to check for errors" optional="false" name="fieldName" type="string">
</params>
<returns description="error messages for the field passed in" type="string | array of strings"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:ListGridField.canToggle" flags="IRWA" description="Allows a boolean or ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','valueMapped')} field to be edited by simply clicking on&amp;#010 it to cycle values.&amp;#010 &lt;P&gt;&amp;#010 To enable this feature, ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')} must be set to true.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent')} is set to &quot;click&quot;, when the user clicks on the field, &amp;#010 the value will be toggled, and inline editing will be triggered as usual.&lt;br&gt;&amp;#010 Otherwise the toggled value will be saved immediately to the server, or if &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')} has been set to false, will be stored as an edit value&amp;#010 for the record." name="canToggle" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="method:Window.addItem" flags="A" description="			Adds a widget to the window. &amp;#010" name="addItem" type="method" definingClass="class:Window">
<params description="the widget to be added" optional="false" name="item" type="Canvas">
</params>
<returns description="array of widgets added" type="array"></returns>
    <groups>windowItems</groups>
</docItem>
<docItem ref="attr:FormItem.defaultIconSrc" flags="IRWA" description="Default icon image source.     &amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component.&amp;#010 To specify image source for a specific icon use the &lt;code&gt;icon.src&lt;/code&gt; property.&lt;br&gt;&amp;#010 If this item is drawn in the disabled state, the url will be modified by adding &amp;#010 &quot;_Disabled&quot; to get a disabled state image for the icon.&amp;#010 If &lt;code&gt;icon.showOver&lt;/code&gt; is true, this url will be modified by adding &quot;_Over&quot; to get&amp;#010 an over state image for the icon." name="defaultIconSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/default_formItem_icon.gif&quot;" type="attr" definingClass="class:FormItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:SelectItem.fetchData" flags="" description=" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).&lt;br&gt;&amp;#010 Performs a fetch type operation on this item's DataSource to retrieve the set of valid&amp;#010 options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.&amp;#010" name="fetchData" type="method" definingClass="class:SelectItem">
<params description="Callback to fire when the fetch completes. Callback will               fire with 2 parameters: &lt;code&gt;item&lt;/code&gt; a pointer to the form item and&amp;#010              &lt;code&gt;dsResponse&lt;/code&gt; the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server." optional="false" name="callback" type="callback">
</params>
<params description="properties to apply to the              dsRequest for this fetch." optional="false" name="requestProperties" type="dsRequest properties">
</params>
</docItem>
<docItem ref="class:FileItem" description="Binary data interface for use in DynamicForms. Allows users to select a single file for upload" name="FileItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <groups>upload</groups>
</docItem>
<docItem ref="attr:Button.showFocused" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  If&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is &lt;code&gt;true&lt;/code&gt;, the &lt;b&gt;&lt;code&gt;&quot;over&quot;&lt;/code&gt;&lt;/b&gt;&amp;#010 will be used to indicate focus. Otherwise a separate &lt;b&gt;&lt;code&gt;&quot;focused&quot;&lt;/code&gt;&lt;/b&gt; state&amp;#010 will be used." name="showFocused" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <groups>state</groups>
</docItem>
<docItem ref="attr:ListGridField.showValueIconOnly" flags="IRW" description="If this field has a valueIcons property specified, setting this property causes &amp;#010 the valueIcon for each value to be displayed in the cell without also showing the&amp;#010 record's value for the field.&amp;#010 If unset the default behavior is to show the icon only if an explicit valueMap is&amp;#010 specified as well in addition to a valueIcons map, otherwise show both the valueIcon and&amp;#010 value for the cell.&lt;br&gt;&amp;#010 Note that if this field is editable ${isc.DocUtils.linkForRef('attr:FormItem.showValueIconOnly')} will be passed&amp;#010 through to editors displayed in this field." name="showValueIconOnly" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
<seeAlso ref="attr:ListGridField.suppressValueIcon">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:GridRenderer.rowContextClick" flags="A" description=" Called when a row receives a contextclick event.&amp;#010" name="rowContextClick" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:ListGrid.getEditedRecord" flags="" description=" Returns the combination of unsaved edits (if any) and original values (if any) for a given&amp;#010 row being edited.&amp;#010 &lt;P&gt;&amp;#010 The returned value is never null, and can be freely modified.&amp;#010&amp;#010" name="getEditedRecord" type="method" definingClass="class:ListGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="valuesID" type="number | Object">
</params>
<returns description="A copy of the record with unsaved edits included" type="Object"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Tree.lastIndexOf" flags="" description=" Return the position in the list of the last instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking before that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="lastIndexOf" type="method" definingClass="class:Tree">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="last index to consider" optional="true" name="pos" type="number">
</params>
<params description="earliest index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:FormItem.show" flags="I" description=" Show this form item.&amp;#010 &lt;BR&gt;&lt;BR&gt;&amp;#010 This will cause the form to redraw.  If this item had an item.showIf expression, it will&amp;#010 be destroyed.&amp;#010" name="show" type="method" definingClass="class:FormItem">
</docItem>
<docItem ref="attr:ListGridField.escapeKeyEditAction" flags="IRW" description="What to do when a user hits escape while editing this field?&lt;br&gt;&amp;#010 Overrides the &lt;code&gt;escapeKeyEditAction&lt;/code&gt; as specified at the listGrid level while &amp;#010 focus is in this field." name="escapeKeyEditAction" valueType="EscapeKeyEditAction" defaultValue="&quot;cancel&quot;" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="group:basics" description="Basic definition of a DataSource field" name="basics" type="group">
    <refs>attr:DetailViewer.data</refs>
    <refs>attr:FormItem.name</refs>
    <refs>attr:FormItem.title</refs>
    <refs>attr:FormItem.defaultValue</refs>
    <refs>attr:FormItem.ID</refs>
    <refs>attr:FormItem.prompt</refs>
    <refs>attr:DateItem.useTextField</refs>
    <refs>attr:DataSourceField.name</refs>
    <refs>attr:DataSourceField.type</refs>
    <refs>attr:StatefulCanvas.title</refs>
    <refs>attr:Button.title</refs>
    <refs>attr:Button.wrap</refs>
    <refs>attr:ImgButton.title</refs>
    <refs>attr:StretchImgButton.title</refs>
    <refs>attr:Canvas.ID</refs>
</docItem>
<docItem ref="method:List.last" flags="" description=" Return the last item in this list&amp;#010&amp;#010" name="last" type="method" definingClass="interface:List">
<returns description="last item in the list" type="any"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="group:viewState" name="viewState" type="group">
    <refs>method:ListGrid.getFieldState</refs>
    <refs>method:ListGrid.setFieldState</refs>
    <refs>method:ListGrid.getSelectedState</refs>
    <refs>method:ListGrid.setSelectedState</refs>
    <refs>method:ListGrid.getSortState</refs>
    <refs>method:ListGrid.setSortState</refs>
    <refs>method:ListGrid.getViewState</refs>
    <refs>method:ListGrid.setViewState</refs>
    <refs>method:TreeGrid.getOpenState</refs>
    <refs>method:TreeGrid.setOpenState</refs>
    <refs>method:TreeGrid.getSelectedPaths</refs>
    <refs>method:TreeGrid.setSelectedPaths</refs>
    <refs>method:TreeGrid.getViewState</refs>
    <refs>method:TreeGrid.setViewState</refs>
    <refs>type:listGridFieldState</refs>
    <refs>type:listGridSelectedState</refs>
    <refs>type:listGridSortState</refs>
    <refs>type:listGridViewState</refs>
    <refs>type:treeGridOpenState</refs>
    <refs>type:treeGridViewState</refs>
</docItem>
<docItem ref="attr:ListGrid.groupByField" flags="IR" description="List of fields to group grid records. If only a single field is used, that field&amp;#010 may be specified as a string. After initialization, use ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')} &amp;#010 to update the grouping field list, instead of modifying groupByField directly." name="groupByField" valueType="String or Array of String" defaultValue="see below" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dynamicGrouping')}</examples>
    <groups>grouping</groups>
</docItem>
<docItem ref="method:ListGrid.refreshRow" flags="" description=" Refresh an entire row of cells without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cells' values, CSS classes, and CSS text will be refreshed, to the current values&amp;#010 returned by getCellValue(), getCellStyle() and getCellCSSText() respectively.&amp;#010&amp;#010" name="refreshRow" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.refreshCellStyle" description="to update just styling"></seeAlso>
<seeAlso ref="method:ListGrid.refreshCell">
</seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Array.findNextIndex" flags="" description=" Like ${isc.DocUtils.linkForRef('method:Array.findIndex')}, but inspects a range from startIndex to endIndex.&amp;#010&amp;#010" name="findNextIndex" type="method" definingClass="object:Array">
<params description="first index to consider" optional="false" name="startIndex" type="int">
</params>
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<params description="last index to consider" optional="true" name="endIndex" type="int">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="classMethod:Class.isA" flags="" description="&amp;#010 Returns whether this class object is the provided class or is a subclass of the provided&amp;#010 class, or implements the provided interface.&amp;#010&amp;#010" name="isA" type="classMethod" definingClass="class:Class">
<params description="Class name to test against" optional="false" name="className" type="string">
</params>
<returns description="true == this Class is a subclass of the provided classname" type="boolean"></returns>
</docItem>
<docItem ref="method:Slider.getValue" flags="" description=" Returns the current slider value.&amp;#010&amp;#010" name="getValue" type="method" definingClass="class:Slider">
<returns description="current slider value" type="float"></returns>
</docItem>
<docItem ref="attr:StretchImgButton.iconOrientation" flags="IR" description="If this button is showing an icon should it appear to the left or right of the title?&amp;#010 valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; and &lt;code&gt;&quot;right&quot;&lt;/code&gt;." name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" type="attr" definingClass="class:StretchImgButton">
    <setter>setIconOrientation</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:textDirection" name="textDirection" type="group">
</docItem>
<docItem ref="attr:DataSourceField.name" flags="IR" description="Name for this field.  &amp;#010 &lt;p&gt;&amp;#010 The field name is also the property in each DataSource record which holds the value for this&amp;#010 field.&amp;#010 &lt;P&gt;&amp;#010 Must be unique across all fields within the DataSource." name="name" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>basics</groups>
</docItem>
<docItem ref="attr:RestDataSource.jsonRecordXPath" flags="IR" description="&lt;code&gt;recordXPath&lt;/code&gt; mapping to the data node of json returned by the server.&amp;#010 Applies if this.dataFormat is set to &lt;code&gt;&quot;json&quot;&lt;/code&gt;&lt;br&gt;&amp;#010 The default value will pick up data from a response structured as follows:&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 {response:&amp;#010  {status:0,&amp;#010   data:[&amp;#010      {field1:&quot;value&quot;, field2:&quot;value&quot;},&amp;#010      {field1:&quot;value&quot;, field2:&quot;value&quot;}&amp;#010   ]&amp;#010 }&amp;#010 &lt;/pre&gt;" name="jsonRecordXPath" valueType="string" defaultValue="&quot;/response/data&quot;" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="attr:Canvas.animateResizeTime" flags="IRWA" description="Default time for performing an animated resize.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateResizeTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="class:RPCResponse" description="Encapsulates an RPC response from the server.  Instances of this class are automatically created&amp;#010 and optionally passed to you in the callback you specify as part of your RPCRequest." name="RPCResponse" type="class">
    <classAttrs>classAttr:RPCResponse.STATUS_SUCCESS</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_FAILURE</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_VALIDATION_ERROR</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_LOGIN_INCORRECT</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_LOGIN_REQUIRED</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_LOGIN_SUCCESS</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_TRANSPORT_ERROR</classAttrs>
    <classAttrs>classAttr:RPCResponse.STATUS_SERVER_TIMEOUT</classAttrs>
    <treeLocation>Client Reference/RPC</treeLocation>
    <attrs>attr:RPCResponse.data</attrs>
    <attrs>attr:RPCResponse.status</attrs>
    <attrs>attr:RPCResponse.httpResponseCode</attrs>
    <attrs>attr:RPCResponse.clientContext</attrs>
    <attrs>attr:RPCResponse.transactionNum</attrs>
<seeAlso ref="class:RPCRequest">
</seeAlso>
<seeAlso ref="type:RPCCallback">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.getTop" flags="" description="			Return the top coordinate of this object, relative to its enclosing context, in pixels.&amp;#010" name="getTop" type="method" definingClass="class:Canvas">
<returns description="top coordinate" type="number"></returns>
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:DetailViewer.showEmptyMessage" flags="IRWA" description="Show ${isc.DocUtils.linkForRef('attr:DetailViewer.emptyMessage')} when there is no data to display?" name="showEmptyMessage" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DetailViewer">
<seeAlso ref="attr:DetailViewer.emptyMessage">
</seeAlso>
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetLabelHoverStyle" flags="IRWA" description="Allows the developer to override the css class applied to  hover tips shown for&amp;#010 facet labels.  If unspecified, and &lt;code&gt;this.hoverStyle&lt;/code&gt; is not null, that &amp;#010 css class will be applied to facet label hovers instead." name="facetLabelHoverStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverStyle">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="attr:Canvas.padding" flags="IRW" description="Set the CSS padding of this component, in pixels.  Padding provides space between the&amp;#010 border and the component's contents.&amp;#010 &lt;P&gt;&amp;#010 This property sets the same thickness of padding on every side.  Differing per-side&amp;#010 padding can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.&amp;#010 &lt;P&gt;&amp;#010 Note that CSS padding does not affect the placement of ${isc.DocUtils.linkForRef('attr:Canvas.children')}.  To&amp;#010 provide a blank area around children, either use ${isc.DocUtils.linkForRef('attr:Canvas.margin','CSS margins')} or use&amp;#010 a ${isc.DocUtils.linkForRef('class:Layout')} as the parent instead, and use properties such as&amp;#010 ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')} to create blank space." name="padding" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setPadding</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.dropMove" flags="A" description="&amp;#010 Executed whenever the compatible dragged object is moved over this drop target. You&amp;#010 can use this to show a custom visual indication of where the drop would occur within the&amp;#010 widget.&amp;#010&amp;#010" name="dropMove" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customDrag')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="classAttr:Dialog.Warn" flags="A" description="A singleton Dialog instance that will show text to the user and provide buttons for their&amp;#010 response.  The Dialog will expand to show all the text that you put into it.&lt;br&gt;&amp;#010 This can be used in cases where a developer would alternatively make use of the native&amp;#010 JavaScript &lt;code&gt;alert()&lt;/code&gt; and &lt;code&gt;confirm()&lt;/code&gt; methods.  The main differences&amp;#010 between those methods and using the Warn object are:&lt;br&gt;&amp;#010 - The Warn object can be customized by modifying which buttons are visible, the style &amp;#010   applied to it, etc.&lt;br&gt;&amp;#010 - The &lt;code&gt;isc.ask()&lt;/code&gt; and &lt;code&gt;isc.warn()&lt;/code&gt; methods are asynchronous - rather &amp;#010   than returning a value indicating the user's response, a callback method will be fired&amp;#010   when the user interacts with the dialog.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Notes:&lt;br&gt;&amp;#010  Because this is a singleton object, properties set on the Warn object directly will persist &amp;#010  each time it is shown.&lt;br&gt;&amp;#010  Developers should use the &lt;code&gt;warn()&lt;/code&gt; or &lt;code&gt;ask()&lt;/code&gt; methods to show and&amp;#010  hide this object rather than manipulating the Dialog directly." name="Warn" valueType="object" defaultValue="dialog instance properties" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="classMethod:isc.warn">
</seeAlso>
<seeAlso ref="classMethod:isc.ask">
</seeAlso>
    <groups>Prompting</groups>
</docItem>
<docItem ref="method:ListGrid.setFieldError" flags="" description=" Set a validation error for some cell.&amp;#010" name="setFieldError" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellErrors">
</seeAlso>
<seeAlso ref="method:ListGrid.setRowErrors">
</seeAlso>
<params description="row index of cell to add validation error for" optional="false" name="rowNum" type="number">
</params>
<params description="col index or field name of cell to add validation error for" optional="false" name="fieldName" type="number | string">
</params>
<params description="validation error/errors for the cell." optional="false" name="errorMessage" type="string | array of strings">
</params>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.displayField" flags="IRWA" description="Specifies an alternative field from which display values should be retrieved for this&amp;#010 item.&lt;br&gt;&amp;#010 If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound &amp;#010 to the same dataSource as the form as a whole, this is implemented by picking up the&amp;#010 value of the specified field from the Form's values object.&lt;br&gt;&amp;#010 Otherwise this item will attempt to map its underlying value to a display value&amp;#010 by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the &amp;#010 &lt;code&gt;displayField&lt;/code&gt; value from that record.&lt;br&gt;&amp;#010 This essentially enables the specified &lt;code&gt;optionDataSource&lt;/code&gt; to be used as&amp;#010 a server based ${isc.DocUtils.linkForRef('group:valueMap')}." name="displayField" valueType="string" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
    <getter>FormItem.getDisplayFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem ref="method:StatefulCanvas.setTitle" flags="" description=" Set the title.&amp;#010" name="setTitle" type="method" definingClass="class:StatefulCanvas">
<params description="new title" optional="false" name="newTitle" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:HeaderItem.startRow" flags="IRW" description="these items are in a row by themselves by default" name="startRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.errorIconSrc" flags="IRW" description="URL of the image to show as an error icon, if we're showing icons when validation&amp;#010 errors occur." name="errorIconSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/validation_error_icon.png&quot;" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.showErrorIcon">
</seeAlso>
    <groups>errorIcon</groups>
</docItem>
<docItem ref="classMethod:ClassFactory.newInstance" flags="" description="&amp;#010 Given the name of a class, create an instance of that class.&amp;#010	&amp;#010" name="newInstance" type="classMethod" definingClass="object:ClassFactory">
<params description="Name of a class.							(ClassObject)	Actual class object to use." optional="false" name="className" type="string">
</params>
<params description="Properties to apply to the instance." optional="true" name="props" type="object">
</params>
<params description="More properties to apply to the instance." optional="true" name="props2" type="object">
</params>
<params description="Yet more properties to apply to the instance." optional="true" name="props3" type="object">
</params>
<returns description="Pointer to the new class." type="class"></returns>
</docItem>
<docItem ref="group:i18nMessages" description="The properties in this group are default system messages that a localized &amp;#010 application will want to override on a per-locale basis" name="i18nMessages" type="group">
    <refs>method:ListGrid.getRequiredFieldMessage</refs>
    <refs>method:ListGrid.getToggleFreezeText</refs>
    <refs>method:ListGrid.getGroupByText</refs>
    <refs>classAttr:Validator.notABoolean</refs>
    <refs>classAttr:Validator.notAString</refs>
    <refs>classAttr:Validator.notAnInteger</refs>
    <refs>classAttr:Validator.notADecimal</refs>
    <refs>classAttr:Validator.notADate</refs>
    <refs>classAttr:Validator.mustBeLessThan</refs>
    <refs>classAttr:Validator.mustBeGreaterThan</refs>
    <refs>classAttr:Validator.mustBeLaterThan</refs>
    <refs>classAttr:Validator.mustBeEarlierThan</refs>
    <refs>classAttr:Validator.mustBeShorterThan</refs>
    <refs>classAttr:Validator.mustBeLongerThan</refs>
    <refs>classAttr:Validator.mustBeExactLength</refs>
    <refs>classAttr:Validator.requiredField</refs>
    <refs>classAttr:Validator.notOneOf</refs>
    <refs>classAttr:RPCManager.defaultPrompt</refs>
    <refs>classAttr:RPCManager.timeoutErrorMessage</refs>
    <refs>classAttr:RPCManager.removeDataPrompt</refs>
    <refs>classAttr:RPCManager.saveDataPrompt</refs>
    <refs>classAttr:RPCManager.fetchDataPrompt</refs>
    <refs>classAttr:Date.shortDayNames</refs>
    <refs>classAttr:Date.shortMonthNames</refs>
    <refs>classAttr:Time.AMIndicator</refs>
    <refs>classAttr:Time.PMIndicator</refs>
    <refs>classAttr:Dialog.OK_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.APPLY_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.YES_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.NO_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.CANCEL_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.CONFIRM_TITLE</refs>
    <refs>classAttr:Dialog.SAY_TITLE</refs>
    <refs>classAttr:Dialog.WARN_TITLE</refs>
    <refs>classAttr:Dialog.ASK_TITLE</refs>
    <refs>classAttr:Dialog.ASK_FOR_VALUE_TITLE</refs>
    <refs>classAttr:Dialog.LOGIN_TITLE</refs>
    <refs>classAttr:Dialog.USERNAME_TITLE</refs>
    <refs>classAttr:Dialog.PASSWORD_TITLE</refs>
    <refs>classAttr:Dialog.LOGIN_BUTTON_TITLE</refs>
    <refs>classAttr:Dialog.LOGIN_ERROR_MESSAGE</refs>
    <refs>attr:GridRenderer.emptyMessage</refs>
    <refs>attr:ListGrid.emptyMessage</refs>
    <refs>attr:ListGrid.loadingDataMessage</refs>
    <refs>attr:ListGrid.loadingMessage</refs>
    <refs>attr:ListGrid.cancelEditingConfirmationMessage</refs>
    <refs>attr:ListGrid.confirmDiscardEditsMessage</refs>
    <refs>attr:ListGrid.discardEditsSaveButtonTitle</refs>
    <refs>attr:ListGrid.freezeOnRightText</refs>
    <refs>attr:ListGrid.freezeOnLeftText</refs>
    <refs>attr:ListGrid.sortFieldAscendingText</refs>
    <refs>attr:ListGrid.sortFieldDescendingText</refs>
    <refs>attr:ListGrid.fieldVisibilitySubmenuTitle</refs>
    <refs>attr:ListGrid.ungroupText</refs>
    <refs>attr:TreeGrid.parentAlreadyContainsChildMessage</refs>
    <refs>attr:TreeGrid.cantDragIntoSelfMessage</refs>
    <refs>attr:TreeGrid.cantDragIntoChildMessage</refs>
    <refs>attr:MenuButton.title</refs>
    <refs>attr:DateChooser.todayButtonTitle</refs>
    <refs>attr:DateChooser.cancelButtonTitle</refs>
    <refs>attr:DynamicForm.errorsPreamble</refs>
    <refs>attr:DynamicForm.unknownErrorMessage</refs>
    <refs>attr:SelectOtherItem.otherTitle</refs>
    <refs>attr:SelectOtherItem.selectOtherPrompt</refs>
    <refs>attr:ValuesManager.unknownErrorMessage</refs>
    <refs>attr:Button.title</refs>
    <refs>attr:Window.title</refs>
<seeAlso ref="group:i18n">
</seeAlso>
</docItem>
<docItem ref="attr:StatefulCanvas.iconSize" flags="IR" description="Size in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;iconWidth&lt;/code&gt; and &lt;code&gt;iconHeight&lt;/code&gt; properties can be used to&amp;#010 configure width and height separately." name="iconSize" valueType="integer" defaultValue="16" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ListGrid.cellChanged" flags="" description=" Fires after user edits have been successfully saved to the server, when the new value&amp;#010 doesn't match the value before editing.&amp;#010 &lt;p&gt;&amp;#010 If you want immediate notification of a changes &lt;b&gt;before&lt;/b&gt; changes has been saved to the&amp;#010 server, implement ${isc.DocUtils.linkForRef('method:ListGridField.change','field.change()')} or&amp;#010 ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} instead.&amp;#010 &lt;P&gt;&amp;#010 You can supply this method on the listGrid instance or on the listGridField(s) that you&amp;#010 want to receive cellChanged events for.  If both a field and the listGrid define a&amp;#010 cellChanged method and that field receives an edit save, only the one defined on the&amp;#010 field is called.&amp;#010&amp;#010" name="cellChanged" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.cellChanged">
</seeAlso>
<params description="record for the cell being changed" optional="false" name="record" type="ListGridRecord">
</params>
<params description="new value for the cell" optional="false" name="newValue" type="any">
</params>
<params description="old value for the cell" optional="false" name="oldValue" type="any">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<params description="grid where cell was changed.  Also available as &quot;this&quot;" optional="false" name="grid" type="ListGrid">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:TabSet.selectedTab" flags="IRW" description="Specifies the index of the initially selected tab." name="selectedTab" valueType="number" defaultValue="0" type="attr" definingClass="class:TabSet">
    <getter>getSelectedTab</getter>
    <groups>tabBar</groups>
</docItem>
<docItem ref="method:ListGrid.getEditedCell" flags="" description=" Returns the current value of a cell. If the cell has an outstanding edit value, this will&amp;#010 be returned, otherwise the underlying value of the record will be returned.&amp;#010&amp;#010" name="getEditedCell" type="method" definingClass="class:ListGrid">
<params description="rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys" optional="false" name="record" type="number | Object">
</params>
<params description="colNum or fieldName of the cell" optional="false" name="field" type="number | string">
</params>
<returns description="Current edit value, or underlying value for the cell" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="group:visibility" description="Whether an object can be seen" name="visibility" type="group">
    <refs>method:Menu.showContextMenu</refs>
    <refs>method:Menu.hideContextMenu</refs>
    <refs>method:Menu.showSubmenu</refs>
    <refs>method:Canvas.show</refs>
    <refs>method:Canvas.hide</refs>
    <refs>method:Canvas.isVisible</refs>
    <refs>type:Visibility</refs>
</docItem>
<docItem ref="attr:SectionStackSection.items" flags="I" description="List of Canvases that constitute the section.  These Canvases will be shown and hidden&amp;#010 together." name="items" valueType="Array of Canvas" defaultValue="null" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem exampleConfig="DynamicForm.xml" type="class" ref="class:DynamicForm" description="The DynamicForm manages a collection of FormItems which represent user input controls.  The&amp;#010 DynamicForm provides layout, value management, validation and databinding for the controls&amp;#010 it manages.&amp;#010 &lt;P&gt;&amp;#010 To create a DynamicForm, set ${isc.DocUtils.linkForRef('attr:DynamicForm.fields')} to an Array of Objects describing the&amp;#010 FormItems you want to use.  For example:&amp;#010 &lt;pre&gt;&amp;#010    isc.DynamicForm.create({&amp;#010        fields:[&amp;#010            {name:&quot;userName&quot;, type:&quot;text&quot;},  // creates a TextItem&amp;#010            {name:&quot;usState&quot;, type:&quot;select&quot;}  // creates a SelectItem&amp;#010        ]&amp;#010    })&amp;#010 &lt;/pre&gt;&amp;#010 The item &lt;code&gt;name&lt;/code&gt; is an identifier for the item that must be unique just within&amp;#010 this form.  It is used:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; as the property name under which the item's value is stored in the form (the form's&amp;#010      current values are accessible as ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')}&amp;#010 &lt;li&gt; when retrieving the FormItem's current value (via&amp;#010      ${isc.DocUtils.linkForRef('method:DynamicForm.getValue','form.getValue()')}) &amp;#010 &lt;li&gt; to retrieve the item itself via ${isc.DocUtils.linkForRef('method:DynamicForm.getItem','form.getItem()')}&amp;#010 &lt;/ul&gt;&amp;#010 The item &lt;code&gt;type&lt;/code&gt; controls what kind of FormItem is created.  See&amp;#010 ${isc.DocUtils.linkForRef('type:FormItemType')}.&amp;#010 &lt;P&gt;&amp;#010 The ${isc.DocUtils.linkForRef('attr:FormItem.title','title')} and ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue','defaultValue')} are also&amp;#010 commonly specified.  All FormItems share a common set of properties for controlling&amp;#010 ${isc.DocUtils.linkForRef('group:formLayout','form layout')}.  Other properties common to all FormItems are&amp;#010 documented on the ${isc.DocUtils.linkForRef('class:FormItem')} class, and properties specific to particular FormItems are&amp;#010 documented on the respective FormItems.  &amp;#010 &lt;P&gt;&amp;#010 NOTE: For very simple forms consisting of exactly one item, you still use a DynamicForm.&amp;#010 See the &quot;fontSelector&quot; form in the ${isc.DocUtils.linkForExampleId('toolstrip', 'Toolstrip example')}." name="DynamicForm">
    <methods>method:DynamicForm.getEditorType</methods>
    <methods>method:DynamicForm.setItems</methods>
    <methods>method:DynamicForm.setFields</methods>
    <methods>method:DynamicForm.getFields</methods>
    <methods>method:DynamicForm.getItems</methods>
    <methods>method:DynamicForm.setValues</methods>
    <methods>method:DynamicForm.rememberValues</methods>
    <methods>method:DynamicForm.resetValues</methods>
    <methods>method:DynamicForm.clearValues</methods>
    <methods>method:DynamicForm.valuesHaveChanged</methods>
    <methods>method:DynamicForm.getValues</methods>
    <methods>method:DynamicForm.getValuesAsCriteria</methods>
    <methods>method:DynamicForm.getItem</methods>
    <methods>method:DynamicForm.getField</methods>
    <methods>method:DynamicForm.getValue</methods>
    <methods>method:DynamicForm.setValue</methods>
    <methods>method:DynamicForm.showItem</methods>
    <methods>method:DynamicForm.hideItem</methods>
    <methods>method:DynamicForm.setValueMap</methods>
    <methods>method:DynamicForm.getErrors</methods>
    <methods>method:DynamicForm.getFieldErrors</methods>
    <methods>method:DynamicForm.setErrors</methods>
    <methods>method:DynamicForm.setError</methods>
    <methods>method:DynamicForm.addFieldErrors</methods>
    <methods>method:DynamicForm.setFieldErrors</methods>
    <methods>method:DynamicForm.clearFieldErrors</methods>
    <methods>method:DynamicForm.clearErrors</methods>
    <methods>method:DynamicForm.hasErrors</methods>
    <methods>method:DynamicForm.hasFieldErrors</methods>
    <methods>method:DynamicForm.getItemErrorHTML</methods>
    <methods>method:DynamicForm.submitForm</methods>
    <methods>method:DynamicForm.setAction</methods>
    <methods>method:DynamicForm.validate</methods>
    <methods>method:DynamicForm.getValidatedValues</methods>
    <methods>method:DynamicForm.showErrors</methods>
    <methods>method:DynamicForm.showFieldErrors</methods>
    <methods>method:DynamicForm.focusInItem</methods>
    <methods>method:DynamicForm.itemHoverHTML</methods>
    <methods>method:DynamicForm.titleHoverHTML</methods>
    <methods>method:DynamicForm.itemChange</methods>
    <methods>method:DynamicForm.itemKeyPress</methods>
    <methods>method:DynamicForm.submitValues</methods>
    <methods>method:DynamicForm.handleHiddenValidationErrors</methods>
    <methods>method:DynamicForm.editNewRecord</methods>
    <methods>method:DynamicForm.editRecord</methods>
    <methods>method:DynamicForm.editSelectedData</methods>
    <methods>method:DynamicForm.validateData</methods>
    <methods>method:DynamicForm.reset</methods>
    <methods>method:DynamicForm.cancel</methods>
    <methods>method:DynamicForm.submit</methods>
    <methods>method:DynamicForm.saveData</methods>
    <methods>method:DynamicForm.fetchData</methods>
    <methods>method:DynamicForm.filterData</methods>
    <treeLocation>Client Reference/Forms</treeLocation>
    <attrs>attr:DynamicForm.items</attrs>
    <attrs>attr:DynamicForm.fields</attrs>
    <attrs>attr:DynamicForm.values</attrs>
    <attrs>attr:DynamicForm.itemLayout</attrs>
    <attrs>attr:DynamicForm.numCols</attrs>
    <attrs>attr:DynamicForm.fixedColWidths</attrs>
    <attrs>attr:DynamicForm.colWidths</attrs>
    <attrs>attr:DynamicForm.minColWidth</attrs>
    <attrs>attr:DynamicForm.cellPadding</attrs>
    <attrs>attr:DynamicForm.cellBorder</attrs>
    <attrs>attr:DynamicForm.sectionVisibilityMode</attrs>
    <attrs>attr:DynamicForm.longTextEditorThreshold</attrs>
    <attrs>attr:DynamicForm.longTextEditorType</attrs>
    <attrs>attr:DynamicForm.valuesManager</attrs>
    <attrs>attr:DynamicForm.titleOrientation</attrs>
    <attrs>attr:DynamicForm.titlePrefix</attrs>
    <attrs>attr:DynamicForm.rightTitlePrefix</attrs>
    <attrs>attr:DynamicForm.titleSuffix</attrs>
    <attrs>attr:DynamicForm.rightTitleSuffix</attrs>
    <attrs>attr:DynamicForm.titleWidth</attrs>
    <attrs>attr:DynamicForm.wrapItemTitles</attrs>
    <attrs>attr:DynamicForm.showInlineErrors</attrs>
    <attrs>attr:DynamicForm.showErrorIcons</attrs>
    <attrs>attr:DynamicForm.showErrorText</attrs>
    <attrs>attr:DynamicForm.showErrorStyle</attrs>
    <attrs>attr:DynamicForm.errorOrientation</attrs>
    <attrs>attr:DynamicForm.errorItemProperties</attrs>
    <attrs>attr:DynamicForm.errorItemCellStyle</attrs>
    <attrs>attr:DynamicForm.errorsPreamble</attrs>
    <attrs>attr:DynamicForm.showTitlesWithErrorMessages</attrs>
    <attrs>attr:DynamicForm.hiliteRequiredFields</attrs>
    <attrs>attr:DynamicForm.requiredTitlePrefix</attrs>
    <attrs>attr:DynamicForm.requiredRightTitlePrefix</attrs>
    <attrs>attr:DynamicForm.requiredTitleSuffix</attrs>
    <attrs>attr:DynamicForm.requiredRightTitleSuffix</attrs>
    <attrs>attr:DynamicForm.itemHoverDelay</attrs>
    <attrs>attr:DynamicForm.itemHoverWidth</attrs>
    <attrs>attr:DynamicForm.itemHoverHeight</attrs>
    <attrs>attr:DynamicForm.itemHoverAlign</attrs>
    <attrs>attr:DynamicForm.itemHoverVAlign</attrs>
    <attrs>attr:DynamicForm.itemHoverStyle</attrs>
    <attrs>attr:DynamicForm.itemHoverOpacity</attrs>
    <attrs>attr:DynamicForm.errors</attrs>
    <attrs>attr:DynamicForm.validateOnChange</attrs>
    <attrs>attr:DynamicForm.unknownErrorMessage</attrs>
    <attrs>attr:DynamicForm.autoFocus</attrs>
    <attrs>attr:DynamicForm.selectOnFocus</attrs>
    <attrs>attr:DynamicForm.canFocus</attrs>
    <attrs>attr:DynamicForm.validationURL</attrs>
    <attrs>attr:DynamicForm.disableValidation</attrs>
    <attrs>attr:DynamicForm.cancelParamName</attrs>
    <attrs>attr:DynamicForm.cancelParamValue</attrs>
    <attrs>attr:DynamicForm.action</attrs>
    <attrs>attr:DynamicForm.target</attrs>
    <attrs>attr:DynamicForm.method</attrs>
    <attrs>attr:DynamicForm.encoding</attrs>
    <attrs>attr:DynamicForm.canSubmit</attrs>
    <attrs>attr:DynamicForm.saveOnEnter</attrs>
    <attrs>attr:DynamicForm.autoFetchData</attrs>
    <attrs>attr:DynamicForm.initialCriteria</attrs>
    <implementsInterfaces>DataBoundComponent</implementsInterfaces>
</docItem>
<docItem exampleConfig="ButtonItem.xml" ref="class:ButtonItem" description="FormItem for adding a Button to a form." name="ButtonItem" type="class">
    <methods>method:ButtonItem.click</methods>
    <attrs>attr:ButtonItem.baseStyle</attrs>
    <attrs>attr:ButtonItem.showTitle</attrs>
    <attrs>attr:ButtonItem.startRow</attrs>
    <attrs>attr:ButtonItem.endRow</attrs>
    <attrs>attr:ButtonItem.buttonConstructor</attrs>
    <attrs>attr:ButtonItem.buttonProperties</attrs>
</docItem>
<docItem ref="class:Menu" description="The Menu widget class implements interactive menu widgets, with optional icons, submenus,&amp;#010 and shortcut keys.&amp;#010 &lt;p&gt;&amp;#010 A Menu is initialized with an Array of items, specified as menu.data, each of which represents&amp;#010 one row in the menu's display and specifies the action to take when that menu item is selected.&amp;#010 &lt;p&gt;&amp;#010 Generally to create a context menu for a component, provide a Menu instance for the &amp;#010 &lt;code&gt;contextMenu&lt;/code&gt; property.  Note that some components have special context menu support&amp;#010 because they have distinct regions or because they have a default set of context menu actions&amp;#010 available.&amp;#010 &lt;p&gt;&amp;#010 If you want a button that pops up a menu when clicked, or a bar of such buttons, see the&amp;#010 MenuButton and MenuBar classes." name="Menu" type="class">
    <methods>method:Menu.itemClick</methods>
    <methods>method:Menu.showContextMenu</methods>
    <methods>method:Menu.setData</methods>
    <methods>method:Menu.setItems</methods>
    <methods>method:Menu.hideContextMenu</methods>
    <methods>method:Menu.showSubmenu</methods>
    <methods>method:Menu.getSubmenu</methods>
    <methods>method:Menu.setItemEnabled</methods>
    <methods>method:Menu.setItemChecked</methods>
    <methods>method:Menu.setItemTitle</methods>
    <methods>method:Menu.setItemIcon</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:Menu.data</attrs>
    <attrs>attr:Menu.items</attrs>
    <attrs>attr:Menu.fields</attrs>
    <attrs>attr:Menu.defaultWidth</attrs>
    <attrs>attr:Menu.cellHeight</attrs>
    <attrs>attr:Menu.autoDraw</attrs>
    <attrs>attr:Menu.useKeys</attrs>
    <attrs>attr:Menu.showKeys</attrs>
    <attrs>attr:Menu.showIcons</attrs>
    <attrs>attr:Menu.showSubmenus</attrs>
    <attrs>attr:Menu.submenuDirection</attrs>
    <attrs>attr:Menu.emptyMessage</attrs>
    <attrs>attr:Menu.iconWidth</attrs>
    <attrs>attr:Menu.iconHeight</attrs>
    <attrs>attr:Menu.showAnimationEffect</attrs>
    <attrs>attr:Menu.submenuImage</attrs>
    <attrs>attr:Menu.submenuDisabledImage</attrs>
    <attrs>attr:Menu.checkmarkImage</attrs>
    <attrs>attr:Menu.checkmarkDisabledImage</attrs>
    <attrs>attr:Menu.canSelectParentItems</attrs>
    <attrs>attr:Menu.autoDismiss</attrs>
<seeAlso ref="attr:Menu.data">
</seeAlso>
<seeAlso ref="attr:Canvas.contextMenu">
</seeAlso>
<seeAlso ref="class:MenuButton">
</seeAlso>
<seeAlso ref="class:MenuBar">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
</docItem>
<docItem ref="attr:ListGrid.canHover" flags="IRW" description="If true, cellHover and rowHover events will fire when the user leaves the mouse over a &amp;#010 row / cell." name="canHover" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.showHover">
</seeAlso>
<seeAlso ref="attr:ListGridField.showHover">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('valueHoverTips')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:SelectOtherItem.otherTitle" flags="IRW" description="title for the Other... item" name="otherTitle" valueType="string" defaultValue="&quot;Other...&quot;" type="attr" definingClass="class:SelectOtherItem">
    <groups>appearance</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Canvas.keyUp" flags="A" description="&amp;#010 Executed when a key is released on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}: true). &amp;#010 &lt;P&gt;&amp;#010 Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that&amp;#010 was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine&amp;#010 whether modifier keys were down.&amp;#010&amp;#010" name="keyUp" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canFocus">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:Chart.getFacetValue" flags="" description=" Get facet value definition by facetId and facetValueId.&amp;#010" name="getFacetValue" type="method" definingClass="interface:Chart">
<seeAlso ref="class:FacetValue">
</seeAlso>
<params description="the id of the facet to retrieve" optional="false" name="facetId" type="String">
</params>
<params description="the id of the facet value to retrieve" optional="false" name="facetValueId" type="String">
</params>
<returns description="the FacetValue if found, or null" type="FacetValue"></returns>
</docItem>
<docItem ref="attr:SectionStack.canResizeSections" flags="IRA" description="Whether sections can be drag resized by the user dragging the section header.&amp;#010 &lt;P&gt;&amp;#010 Note that, with &lt;code&gt;canResizeSections:true&lt;/code&gt;, not all sections can be resized:&amp;#010 sections that contain only ${isc.DocUtils.linkForRef('attr:Button.autoFit','autofitting')} components or that are&amp;#010 marked with ${isc.DocUtils.linkForRef('attr:SectionStackSection.resizeable','section.resizeable:false')} will not be&amp;#010 resizeable." name="canResizeSections" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SectionStack">
</docItem>
<docItem ref="attr:SectionStackSection.title" flags="IR" description="Title to show for the section" name="title" valueType="String" defaultValue="null" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem ref="attr:ImgProperties.imgDir" flags="IRW" description="Specifies the image-specific image directory to override the default." name="imgDir" valueType="URL" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="method:ListGrid.rowHover" flags="" description=" Called when the mouse hovers over a row if this.canHover is true. &amp;#010  Returning false will suppress the hover text from being shown if this.showHover is true.&amp;#010&amp;#010" name="rowHover" type="method" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event (default behavior of showing the hover)" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:CubeGrid.wrapFacetTitles" flags="IRW" description="Whether to allow text wrapping on facet titles" name="wrapFacetTitles" valueType="boolean" defaultValue="false" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="group:drawContext" name="drawContext" type="group">
    <refs>type:DrawPosition</refs>
</docItem>
<docItem ref="group:componentSchema" title="Component Schema" description="A component schema is a special type of DataSource that describes a custom component.  &amp;#010 &lt;P&gt;&amp;#010 Declaring a component schema for your custom component allows you to:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; use simpler XML when creating your custom component: avoid having to specify the&amp;#010 &lt;code&gt;constructor&lt;/code&gt; and &lt;code&gt;xsi:type&lt;/code&gt; attributes as described under&amp;#010 ${isc.DocUtils.linkForRef('group:componentXML')}&amp;#010 &lt;li&gt; use your custom component within ${isc.DocUtils.linkForRef('group:visualBuilder')}&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Example of a Component Schema&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 It's most basic form, a component schema for a custom subclass of ListGrid called&amp;#010 &quot;MyListGrid&quot; looks like this:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;DataSource serverType=&quot;component&quot; ID=&quot;MyListGrid&quot; &amp;#010             inheritsFrom=&quot;ListGrid&quot; instanceConstructor=&quot;MyListGrid&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 With this definition saved as &quot;MyListGrid.ds.xml&quot; in the project dataSources directory&amp;#010 ([webroot]/shared/ds/ by default), you can now create an instance of MyListGrid with just:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;MyListGrid width=&quot;500&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Note: you may need to restart your servlet engine/J2EE container before this example will&amp;#010 work.&amp;#010 &lt;P&gt;&amp;#010 The attributes set directly on the DataSource tag have special meaning for a component&amp;#010 schema definition:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:DataSource.serverType','serverType')}=&quot;component&quot; indicates this DataSource describes&amp;#010 a component, as opposed to a SQL table or other data provider&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:DataSource.ID','ID')} means the tagName that will be used to create your custom&amp;#010 component.  This must match the first component of the filename (ID=&quot;MyListGrid&quot; means the&amp;#010 filename must be MyListGrid.ds.xml) and typically also matches the name of the class.&amp;#010 &lt;li&gt;${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}=&quot;ListGrid&quot; inherits the ListGrid property definitions via&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.  &amp;#010 &lt;li&gt;instanceConstructor=&quot;MyListGrid&quot; indicates the SmartClient class that&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} should be called on to construct an instance.&amp;#010 &lt;li&gt;showLocalFieldsOnly is a boolean that, when set to true, tells the ${isc.DocUtils.linkForRef('group:visualBuilder')}&amp;#010 to show only the fields declared in this schema in the component editor.  Otherwise fields&amp;#010 inherited via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')} (all the way up the chain) are also included.&amp;#010 &lt;li&gt;showSuperClassEvents is a boolean that, like showLocalFieldsOnly, optionally restricts&amp;#010 the list of events shown in the Events tab of the ${isc.DocUtils.linkForRef('group:visualBuilder')} to those defined in&amp;#010 this schema only.&amp;#010 &lt;li&gt;showSuperClassActions is a boolean that optionally restricts the list of actions shown&amp;#010 in the menu when you map a component Event to a component Action within ${isc.DocUtils.linkForRef('group:visualBuilder')}&amp;#010 to those defined in this schema only.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Declaring custom properties&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Custom properties are declared via ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} as for an ordinary&amp;#010 ${isc.DocUtils.linkForRef('class:DataSource')}.  As with ordinary DataSources, it is legal to redeclare inherited fields&amp;#010 in order to modify properties such as ${isc.DocUtils.linkForRef('attr:DataSourceField.editorType','field.editorType')}.&amp;#010 &lt;P&gt;&amp;#010 The following DataSourceField properties have special significance when a component schema&amp;#010 is used to process ${isc.DocUtils.linkForRef('group:componentXML','component XML')}:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} declares the type of the field, and hence the&amp;#010 type of the JavaScript value your custom class will be initialized with.  In order to&amp;#010 declare subcomponents, can be set to the name of another component (built-in or custom).  &amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','field.multiple')} declares that the field should always be&amp;#010 array-valued even when only a single value is provided.  Also indicates that the field name&amp;#010 should be used as a &quot;wrapper tag&quot; in the XML format for the component.&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.propertiesOnly','field.propertiesOnly')}.  For fields that hold&amp;#010 subcomponents, suppresses auto-construction to avoid ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw','double drawing')}&amp;#010 and to allow subcomponents to be modified by their parent component before they are created&amp;#010 and drawn&amp;#010 &lt;/ul&gt;&amp;#010 When a component is edited within Visual Builder, the DataSource properties that normally&amp;#010 influence databound forms will influence the Component Editor (for example, field.title,&amp;#010 field.editorType).  In addition, the following properties have special signficance in&amp;#010 component editing and component drag and drop:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.inapplicable','field.inapplicable')} indicates that an inherited&amp;#010 field is inapplicable in this component.&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.group','field.group')} indicates what group the property should be&amp;#010 placed in when editing in Visual Builder.&amp;#010 &lt;li&gt; ${isc.DocUtils.linkForRef('attr:DataSourceField.xmlAttribute','field.xmlAttribute')}: indicates this field should&amp;#010 serialize as an XML attribute.  Note that when constructing the component from XML, either&amp;#010 an attribute or a subelement will continue to be accepted as means of specifying the field&amp;#010 value, so this property is primarily set in order to make code generated by Visual Builder&amp;#010 maximally compact or to make it conform to externally set standards.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Declaring Events and Actions&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Events and Actions are declared via a methods array.  In order for a method to be considered&amp;#010 an event, it needs to have a method definition in the methods array (or be publicly&amp;#010 documented in the SmartClient reference) and have been added to&amp;#010 the class as a ${isc.DocUtils.linkForRef('group:stringMethods','StringMethod')} via ${isc.DocUtils.linkForRef('classMethod:Class.registerStringMethods')}.&amp;#010 &lt;p&gt;&amp;#010 In order for a method to be considered an action, it needs to have a method definition in&amp;#010 the methods array and have the &lt;code&gt;action&lt;/code&gt; property set to &lt;code&gt;true&lt;/code&gt;.  For&amp;#010 example, the following is a definition of the 'hide' action available on any Canvas, as&amp;#010 copied from Canvas.ds.xml:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;methods&amp;gt;&amp;#010         &amp;lt;method name=&quot;hide&quot; title=&quot;Hide&quot; action=&quot;true&quot;/&amp;gt;&amp;#010     &amp;lt;/methods&amp;gt;&amp;#010 &lt;/pre&gt;" name="componentSchema" type="group">
    <treeLocation>Concepts/Component XML</treeLocation>
    <refs>attr:DataSourceField.xmlAttribute</refs>
    <refs>attr:DataSourceField.multiple</refs>
    <refs>attr:DataSourceField.propertiesOnly</refs>
    <refs>attr:DataSourceField.inapplicable</refs>
    <refs>attr:DataSourceField.group</refs>
</docItem>
<docItem ref="attr:ImgSplitbar.hSrc" flags="IR" description="Default src to display when ${isc.DocUtils.linkForRef('attr:ImgSplitbar.vertical')} is false, &amp;#010 and ${isc.DocUtils.linkForRef('attr:ImgSplitbar.src')} is unset." name="hSrc" valueType="string" defaultValue="[SKIN]hgrip.png" type="attr" definingClass="class:ImgSplitbar">
<seeAlso ref="attr:ImgSplitbar.src">
</seeAlso>
</docItem>
<docItem ref="attr:Window.restoreButton" flags="R" description="ImgButton that restores the Window via ${isc.DocUtils.linkForRef('method:Window.restore')}." name="restoreButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:ToolStripSeparator.vSrc" flags="IRW" description="Image for vertically oriented separator (for horizontal toolstrips)." name="vSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]separator.png&quot;" type="attr" definingClass="class:ToolStripSeparator">
</docItem>
<docItem ref="group:headerMenuButton" name="headerMenuButton" type="group">
    <refs>attr:ListGrid.showHeaderMenuButton</refs>
    <refs>attr:ListGrid.headerMenuButtonConstructor</refs>
    <refs>attr:ListGrid.headerMenuButton</refs>
    <refs>attr:ListGrid.headerMenuButtonIcon</refs>
    <refs>attr:ListGrid.headerMenuButtonIconWidth</refs>
    <refs>attr:ListGrid.headerMenuButtonIconHeight</refs>
    <refs>attr:ListGrid.headerMenuButtonWidth</refs>
    <refs>attr:ListGrid.headerMenuButtonHeight</refs>
</docItem>
<docItem ref="attr:ListGrid.editByCell" flags="IRW" description="Determines whether when the user edits a cell in this listGrid the entire row becomes&amp;#010      editable, or just the cell that recieved the edit event.&lt;br&gt;&lt;br&gt;&amp;#010      No effect if this.canEdit is false or null." name="editByCell" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canEdit">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('editByCell')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Facet.title" flags="IRW" description="User-visible title of this facet.  Shown on the facet label in the CubeGrid." name="title" valueType="String" defaultValue="null" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="method:CubeGrid.getRowFacetLayout" flags="" description=" Get the current widths of the row facets, as:&lt;br&gt; &amp;#010 [ {facetId:facetId, width:currentWidth }, ... ]&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getRowFacetLayout" type="method" definingClass="class:CubeGrid">
<returns description="array of {facetId:facetId, width:width} objects" type="array"></returns>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:DynamicForm.titlePrefix" flags="IRW" description="The string prepended to the title of every item in this form." name="titlePrefix" valueType="string" defaultValue="&quot;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="classMethod:ClassFactory.defineClass" flags="" description="&amp;#010 Create a new class, which can then be used to create instances of this object type.&amp;#010 &lt;P&gt;&amp;#010 The new Class is returned by &lt;code&gt;defineClass&lt;/code&gt;, is available as&amp;#010 &lt;code&gt;isc.&lt;i&gt;ClassName&lt;/i&gt;&lt;/code&gt; and is also available in global scope if not in&amp;#010 ${isc.DocUtils.linkForRef('class:isc','portal mode')}.&amp;#010 &lt;P&gt;&amp;#010 Also creates a new function &lt;code&gt;${isc.DocUtils.linkForRef('object:isA','class:isA')}.&lt;i&gt;ClassName()&lt;/i&gt;&lt;/code&gt; object&amp;#010 for identifying instances of this Class.&amp;#010&amp;#010" name="defineClass" type="classMethod" definingClass="object:ClassFactory">
<params description="Name for the new class." optional="false" name="className" type="string">
</params>
<params description="Optional SuperClass Class object or name" optional="true" name="superClass" type="Class">
</params>
<returns description="Returns the new Class object." type="Class"></returns>
</docItem>
<docItem ref="attr:DynamicForm.showErrorText" flags="IRW" description="${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are&amp;#010 displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.&amp;#010 These properties are boolean values, and can be set on a DynamicForm to control the &amp;#010 behavior form-wide, or set on individual FormItems.&amp;#010 &lt;P&gt;&amp;#010 The HTML displayed next to a form item with errors is generated by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.&amp;#010 The default implemenation of that method respects &lt;code&gt;showErrorIcons&lt;/code&gt; and&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorIcons&lt;/code&gt;, or &lt;code&gt;showErrorIcon&lt;/code&gt; at the FormItem level controls&amp;#010 whether an error icon should appear next to fields which have validation errors.  The icon's&amp;#010 appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;showErrorText&lt;/code&gt; determines whether the text of the validation error should be&amp;#010 displayed next to fields which have validation errors. The attribute&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the &amp;#010 form item's title + &lt;code&gt;&quot;:&quot;&lt;/code&gt; (may be desired if the item has &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative &amp;#010 to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}&lt;code&gt;:false&lt;/code&gt; and&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}&lt;code&gt;:&quot;left&quot;&lt;/code&gt; creates a compact validation error display&amp;#010 consisting of just an icon, to the left of the item with the error message&amp;#010 available via a hover (similar appearance to ListGrid validation error display).  &amp;#010 &lt;P&gt;&amp;#010 In addition to this, &lt;code&gt;showErrorStyle&lt;/code&gt; determines whether fields  with validation&amp;#010 errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a &amp;#010 discussion for how error styling is calculated." name="showErrorText" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="type:EdgeSizes" description="Object used to specify custom edge sizes or offsets.&amp;#010 Specified as an object where &lt;code&gt;defaultSize&lt;/code&gt; will map to the default edge size or &amp;#010 offset for the canvsa (${isc.DocUtils.linkForRef('attr:Canvas.edgeSize')}, or ${isc.DocUtils.linkForRef('attr:Canvas.edgeOffset')} and&amp;#010 &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and&amp;#010 &lt;code&gt;bottom&lt;/code&gt; will map to the&amp;#010 ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeTop','edgeTop')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetTop','edgeOffsetTop')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeLeft','edgeLeft')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetLeft','edgeOffsetLeft')},&amp;#010 ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeRight','edgeRight')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetRight','edgeOffsetRight')},&amp;#010 and ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeBottom','edgeBottom')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetBottom','edgeOffsetBottom')}&amp;#010 attributes on the paneContainer respectively. Note that not all these properties have to be&amp;#010 set - if unset standard edge sizing rules will apply." name="EdgeSizes" type="type">
</docItem>
<docItem ref="method:PickList.getDisplayFieldName" flags="" description=" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.&amp;#010 If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method&amp;#010 will return the title field for the &lt;code&gt;optionDataSource&lt;/code&gt;&amp;#010" name="getDisplayFieldName" type="method" definingClass="interface:PickList">
<returns description="display field name, or null" type="String"></returns>
</docItem>
<docItem ref="classMethod:Page.getIsomorphicDir" flags="" description="		Return the root directory for Isomorphic-specific files.&amp;#010&amp;#010" name="getIsomorphicDir" type="classMethod" definingClass="class:Page">
<returns description="IsomorphicDir URL." type="string"></returns>
    <groups>files</groups>
</docItem>
<docItem ref="classMethod:isc.sortObject" flags="" description=" Given a simple javascript object, return that object sorted by keys, such that when iterating&amp;#010 through the properties of the object, they will show up in sorted order.&lt;br&gt;&amp;#010 Usage example - may be used to sort a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','formItem valueMap')} defined&amp;#010 as an object.&amp;#010" name="sortObject" type="classMethod" definingClass="class:isc">
<params description="Object to sort" optional="false" name="object" type="object">
</params>
<params description="Comparitor function to use when sorting the objects keys" optional="true" name="comparitor" type="function">
</params>
<returns description="sorted version of the object passed in." type="object"></returns>
</docItem>
<docItem ref="attr:ListGrid.dataProperties" flags="IRWA" description="For databound ListGrids, this attribute can be used to customize the ${isc.DocUtils.linkForRef('class:ResultSet')}&amp;#010 object created for this grid when data is fetched" name="dataProperties" valueType="object" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:DSRequest.clientContext" flags="IRW" description="The context object used to send the DSRequest, or the &lt;code&gt;context&lt;/code&gt; argument to any&amp;#010 higher-level API that ultimately performs an RPC." name="clientContext" valueType="Object" defaultValue="{}" type="attr" definingClass="class:DSRequest">
<seeAlso ref="attr:DSResponse.clientContext">
</seeAlso>
<seeAlso ref="attr:RPCRequest.clientContext">
</seeAlso>
</docItem>
<docItem ref="group:find" name="find" type="group">
    <refs>method:List.findIndex</refs>
    <refs>method:List.findNextIndex</refs>
    <refs>method:List.find</refs>
    <refs>method:List.findAll</refs>
    <refs>method:ResultSet.findAll</refs>
    <refs>method:ResultSet.find</refs>
    <refs>method:ResultSet.findIndex</refs>
    <refs>method:ResultSet.findNextIndex</refs>
    <refs>method:Array.findIndex</refs>
    <refs>method:Array.findNextIndex</refs>
    <refs>method:Array.find</refs>
    <refs>method:Array.containsProperty</refs>
    <refs>method:Array.findAll</refs>
</docItem>
<docItem ref="method:ListGrid.setDragTracker" flags="" description=" Sets the custom tracker HTML to display next to the mouse when the user initiates a drag&amp;#010 operation on this grid. Default implementation will examine ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')}&amp;#010 and set the custom drag tracker to display the appropriate HTML based on the selected record.&amp;#010 &lt;br&gt;&amp;#010 To display custom drag tracker HTML, this method may be overridden - call &amp;#010 ${isc.DocUtils.linkForRef('classMethod:EventHandler.setDragTracker')} to actually update the drag tracker HTML.&amp;#010" name="setDragTracker" type="method" definingClass="class:ListGrid">
<returns description="returns false by default to suppress 'setDragTracker' on any ancestors                   of this listGrid." type="boolean"></returns>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="classMethod:Page.getWidth" flags="" description=" Get the width of the visible portion of the window, not including browser chrome or the&amp;#010 scrollbar area.&amp;#010" name="getWidth" type="classMethod" definingClass="class:Page">
<params description="the window object" optional="true" name="wd" type="object">
</params>
<returns description="width of the page" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:CubeGrid.setFacetValueTitle" flags="" description="&amp;#010      set the title for a facet value&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; setter&amp;#010" name="setFacetValueTitle" type="method" definingClass="class:CubeGrid">
<params description="facet to update" optional="false" name="facetId" type="id">
</params>
<params description="facetValue to update" optional="false" name="facetValueId" type="id">
</params>
<params description="title for the facet" optional="false" name="newTitle" type="string">
</params>
    <groups>data_and_metadata</groups>
</docItem>
<docItem ref="group:imageEdges" name="imageEdges" type="group">
    <refs>class:EdgedCanvas</refs>
    <refs>attr:Canvas.showEdges</refs>
    <refs>attr:Canvas.edgeSize</refs>
    <refs>attr:Canvas.edgeOffset</refs>
    <refs>attr:Canvas.edgeImage</refs>
    <refs>attr:Canvas.customEdges</refs>
    <refs>attr:Canvas.edgeBackgroundColor</refs>
    <refs>attr:Canvas.edgeShowCenter</refs>
    <refs>attr:Canvas.edgeCenterBackgroundColor</refs>
    <refs>attr:EdgedCanvas.skinImgDir</refs>
    <refs>attr:EdgedCanvas.edgeImage</refs>
    <refs>attr:EdgedCanvas.edgeColor</refs>
    <refs>attr:EdgedCanvas.customEdges</refs>
    <refs>attr:EdgedCanvas.showCenter</refs>
    <refs>attr:EdgedCanvas.edgeSize</refs>
    <refs>attr:EdgedCanvas.edgeLeft</refs>
    <refs>attr:EdgedCanvas.edgeRight</refs>
    <refs>attr:EdgedCanvas.edgeTop</refs>
    <refs>attr:EdgedCanvas.edgeBottom</refs>
    <refs>attr:EdgedCanvas.edgeOffset</refs>
    <refs>attr:EdgedCanvas.edgeOffsetTop</refs>
    <refs>attr:EdgedCanvas.edgeOffsetBottom</refs>
    <refs>attr:EdgedCanvas.edgeOffsetLeft</refs>
    <refs>attr:EdgedCanvas.edgeOffsetRight</refs>
    <refs>attr:EdgedCanvas.centerBackgroundColor</refs>
</docItem>
<docItem ref="attr:Splitbar.showRollOverGrip" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the&amp;#010 'Over' state on the grip image when the user rolls over on this widget. &amp;#010 Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showRollOver')} is false" name="showRollOverGrip" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:ListGrid.selectionType" flags="IRW" description="Defines a listGrid's clickable-selection behavior." name="selectionType" valueType="SelectionStyle" defaultValue="Selection.MULTIPLE" type="attr" definingClass="class:ListGrid">
<seeAlso ref="type:SelectionStyle">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('multipleSelect')}</examples>
    <groups>selection</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Applet.name" flags="IR" description="Sets the 'name' attribute on the applet object.  If a name is not provided it will be&amp;#010  auto-generated.  Note that in general you don't need to set this.  If you have a handle to&amp;#010  your ISC Applet object you can simply call ${isc.DocUtils.linkForRef('method:Applet.getPluginHandle')} to get a&amp;#010  handle to the element." name="name" valueType="string" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="method:Applet.getPluginHandle">
</seeAlso>
</docItem>
<docItem ref="attr:ResultTree.loadDataOnDemand" flags="IR" description="Does this resultTree load data incrementally as folders within the tree are opened, or&amp;#010 is it all loaded in a single request?" name="loadDataOnDemand" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultTree">
<seeAlso ref="attr:TreeGrid.loadDataOnDemand">
</seeAlso>
</docItem>
<docItem ref="attr:FormItem.prompt" flags="IRW" description="This text is shown as a tooltip prompt when the cursor hovers over this item." name="prompt" valueType="string" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>basics</groups>
</docItem>
<docItem ref="attr:ListGrid.dateFormatter" flags="IRW" description="Display format to use for fields specified as type 'date'.  Default is to use the&amp;#010 system-wide default short date format, configured via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to &amp;#010 change the format used by this grid.  May also be specified at the field level via&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')}.&lt;br&gt;&amp;#010 If this field is editable the dateFormatter will also be passed to the editor created&amp;#010 to edit this field as ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')}.&amp;#010 In this case you may also need to set ${isc.DocUtils.linkForRef('attr:ListGrid.dateInputFormat')}." name="dateFormatter" valueType="DateDisplayFormat" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridField.displayFormat">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:KeyRegistry" name="KeyRegistry" type="group">
    <refs>classMethod:Page.registerKey</refs>
    <refs>classMethod:Page.unregisterKey</refs>
</docItem>
<docItem ref="attr:Flashlet.name" flags="IR" description="Sets the 'name' attribute on the flashlet object.  If a name is not provided it will be&amp;#010  auto-generated.  Note that in general you don't need to set this.  If you have a handle to&amp;#010  your ISC Flashlet object you can simply call ${isc.DocUtils.linkForRef('method:Flashlet.getPluginHandle')} to get a&amp;#010  handle to the element." name="name" valueType="string" defaultValue="null" type="attr" definingClass="class:Flashlet">
<seeAlso ref="method:Flashlet.getPluginHandle">
</seeAlso>
</docItem>
<docItem ref="attr:SectionStackSection.canCollapse" flags="I" description="This attribute controls whether or not the expand/collapse UI control is shown on the&amp;#010 header of this section.  Any section can still be expanded/collapsed programmatically,&amp;#010 regardless of this setting." name="canCollapse" valueType="boolean" defaultValue="true" type="attr" definingClass="object:SectionStackSection">
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="group:xmlClientVsServer" description="Server benefits&amp;#010 - faster client-side processing&amp;#010 Server neutral&amp;#010 - heavy customization of XML transform, if any, written in Java&amp;#010&amp;#010 Client benefits&amp;#010 - faster server-side processing&amp;#010 Client neutral&amp;#010 - heavy customization of XML transform, if any, written in JavaScript" name="xmlClientVsServer" type="group">
</docItem>
<docItem ref="attr:RichTextEditor.fontControls" flags="IRA" description="Default font control group. Consists of an array of &amp;#010  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,&amp;#010  include &lt;code&gt;&quot;fontControls&quot;&lt;/code&gt; in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array" name="fontControls" valueType="array" defaultValue="[&quot;fontSelector&quot;, &quot;fontSizeSelector&quot;]" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="group:clickMask" name="clickMask" type="group">
    <refs>method:Canvas.showClickMask</refs>
    <refs>method:Canvas.hideClickMask</refs>
    <refs>method:Canvas.clickMaskUp</refs>
    <refs>type:clickMaskMode</refs>
</docItem>
<docItem ref="method:PickList.getSelectedRecord" flags="" description=" Returns the entire record object associated with the current value for this item&amp;#010 (or null if no matching record exists in the PickList data).&lt;br&gt;&amp;#010 Most commonly used for databound pickListItems to retrieve the values of other fields&amp;#010 in the record&amp;#010&amp;#010" name="getSelectedRecord" type="method" definingClass="interface:PickList">
<returns description="record object" type="object"></returns>
</docItem>
<docItem ref="classMethod:isA.List" flags="" description=" Does &lt;code&gt;object&lt;/code&gt; implement the  &lt;code&gt;List&lt;/code&gt; interface?&amp;#010" name="List" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="&lt;code&gt;true&lt;/code&gt; if the object is an Array or belongs to another class that                   implements the &lt;code&gt;List&lt;/code&gt; API." type="boolean"></returns>
</docItem>
<docItem ref="method:DynamicForm.clearErrors" flags="" description="	Clears all errors for this DynamicForm.&amp;#010" name="clearErrors" type="method" definingClass="class:DynamicForm">
<params description="If true, redraw the form to clear any visible error messages." optional="false" name="show" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="group:fill" name="fill" type="group">
</docItem>
<docItem ref="method:CellSelection.getSelectedCells" flags="" description="  Returns an array of the currently selected cells.  Each cell is returned as a 2 element&amp;#010  array in the form &lt;code&gt;[rowNum, colNum]&lt;/code&gt;.&amp;#010" name="getSelectedCells" type="method" definingClass="class:CellSelection">
<returns description="an array of the selected cells, as 2 element arrays" type="array"></returns>
    <groups>selection</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Canvas.edgeSize" flags="IR" description="Size in pixels for corners and edges" name="edgeSize" valueType="number" defaultValue="10" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('edges')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem flags="IR" type="attr" ref="attr:Progressbar.length" description="Length of the progressbar in pixels. This is effectively height for a vertical&amp;#010 progressbar, or width for a horizontal progressbar.&amp;#010 &lt;P&gt;&amp;#010 This property must be set instead of setting &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;." name="length" valueType="number" defaultValue="100" definingClass="class:Progressbar">
    <getter>getLength</getter>
    <setter>setLength</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:PickList.animationTime" flags="IRWA" description="If this.animatePickList is true - this specifies the duration of the animation effect&amp;#010 applied when showing the pickList" name="animationTime" valueType="number" defaultValue="200" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="type:DSDataFormat" description="Indicates the format to be used for HTTP requests and responses when&amp;#010 fulfilling DSRequests (eg ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} is called).&amp;#010 &lt;P&gt;&amp;#010 Note that ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} is only available for&amp;#010 &quot;iscServer&quot; requests." name="DSDataFormat" type="type">
<values description="Make an HTTP request in a format recognized by the ISC server and expect ISC server&amp;#010 response format.  ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')} can then be&amp;#010 used to connect to any kind of data store or web service." value="&quot;iscServer&quot;"></values>
<values description="Expect XML responses.  Request format depends on the setting for&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.  This is the correct setting when&amp;#010 consuming RSS feeds, XML web services (whether SOAP, REST, XML-RPC or custom format),&amp;#010 and XML flat files directly from the browser.&amp;#010 &lt;P&gt;&amp;#010 A DSResponse will be derived from the returned XML via the process described under&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')}." value="&quot;xml&quot;"></values>
<values description="Expect response in JSON &lt;a href='http://json.org' onclick=&quot;window.open('http://json.org');return false;&quot;&gt;(Java Script Object Notation)&lt;/a&gt;&amp;#010 format, ready to be eval()'d. Response should either be a naked object literal:&lt;br&gt;&amp;#010 &lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{status:0, startRow:0, endRow:50, data:[ ...]}&lt;/code&gt;&lt;br&gt;&amp;#010 or a string that evals to return a valid response object:&lt;br&gt;&amp;#010 &lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var response = {status:0, startRow:0, endRow:50, data:[ ...]};&amp;#010 &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;response;&lt;/code&gt;&lt;br&gt;&amp;#010 Request format depends on the setting for ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.  &amp;#010 See also ${isc.DocUtils.linkForRef('class:XJSONDataSource')}." value="&quot;json&quot;"></values>
<values description="SmartClient will not attempt to parse the response, instead,&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} must be implemented.&amp;#010 &lt;code&gt;transformResponse&lt;/code&gt; will receive the &quot;data&quot; parameter as a String, and must&amp;#010 parse this String into an Array of Objects, which should be set as&amp;#010 ${isc.DocUtils.linkForRef('attr:DSResponse.data')}.  Request format depends on the setting for&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.&amp;#010 &lt;P&gt;&amp;#010 Note that, unlike either the &quot;json&quot; or &quot;xml&quot; settings of &lt;code&gt;dataFormat&lt;/code&gt;, you&amp;#010 are responsible for ensuring that parsed values are the correct type, for example, using&amp;#010 the JavaScript built-ins &lt;code&gt;parseInt&lt;/code&gt; and &lt;code&gt;parseFloat&lt;/code&gt; on integer&amp;#010 and decimal values respectively, and using &lt;code&gt;new Date()&lt;/code&gt; to construct valid&amp;#010 Dates." value="&quot;custom&quot;"></values>
    <examples>${isc.DocUtils.linkForExampleId('simpleJSON')}</examples>
    <groups>clientDataIntegration</groups>
    <groups>serverDataIntegration</groups>
</docItem>
<docItem ref="attr:Chart.threeD" flags="IR" description="Whether to show chart in a 3D appearance, for charts that support this." name="threeD" valueType="boolean" defaultValue="true" type="attr" definingClass="interface:Chart">
    <groups>chartAppearance</groups>
</docItem>
<docItem ref="classMethod:FileLoader.cacheISC" flags="" description="&amp;#010 Caches the specified SmartClient modules and skin.  Calling this method is equivalent to using&amp;#010 the &lt;code&gt;loadISC&lt;/code&gt; JSP tag with &lt;code&gt;cacheOnly=&quot;true&quot;&lt;/code&gt;.&amp;#010&amp;#010" name="cacheISC" type="classMethod" definingClass="class:FileLoader">
<params description="Name of the skin to load.  If not specified, the skin specified by the                        default ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultSkin')} will be used.&amp;#010                        Instead of a skin name, you can specify a skinDir - this works just&amp;#010                        like ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - the skin assumed to be a skinDir if&amp;#010                        there's at least one forward slash (/) in the name." optional="true" name="skin" type="String">
</params>
<params description="List of modules to load.  If not specified, the list of modules                                   specified by the default&amp;#010                                   ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultModules')} will be used.  You&amp;#010                                   can specify modules as &quot;Core,Foundation&quot; or as [&quot;Core&quot;,&amp;#010                                   &quot;Foundation&quot;]" optional="true" name="modules" type="String or List">
</params>
<params description="Optional code to execute when all specified modules and                                      skin have been cached." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="attr:ListGrid.rowEndEditAction" flags="IRWA" description="If the user is editing a record in this listGrid, and attempts to navigate to a field&amp;#010 beyond the end of the row, via tab (or shift-tab off the first editable field), this &amp;#010 property determines what action to take:&lt;ul&gt;&amp;#010 &lt;li&gt;&quot;next&quot;: start editing the next (or previous) record in the list&amp;#010 &lt;li&gt;&quot;same&quot;: put focus back into the first editable field of the same record.&amp;#010 &lt;li&gt;&quot;done&quot;: hide the editor&amp;#010 &lt;li&gt;&quot;stop&quot;: leave focus in the cell being edited&amp;#010 &lt;/ul&gt;" name="rowEndEditAction" valueType="RowEndEditAction" defaultValue="&quot;next&quot;" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="class:CellSelection" description="Maintains a representation of selection over a 2-dimensional grid of objects.&lt;br&gt;&amp;#010  Automtatically created to manage cell-selection on ${isc.DocUtils.linkForRef('class:CubeGrid')} widgets." name="CellSelection" type="class">
    <methods>method:CellSelection.cellIsSelected</methods>
    <methods>method:CellSelection.anySelected</methods>
    <methods>method:CellSelection.getSelectedCells</methods>
    <methods>method:CellSelection.selectCell</methods>
    <methods>method:CellSelection.deselectCell</methods>
    <methods>method:CellSelection.selectCellList</methods>
    <methods>method:CellSelection.deselectCellList</methods>
    <methods>method:CellSelection.selectSingleCell</methods>
    <treeLocation>Client Reference/System/Selection</treeLocation>
</docItem>
<docItem ref="method:Class.delayCall" flags="" description="  This is a helper to delay a call to some method on this object by some specified&amp;#010  amount of time.&amp;#010" name="delayCall" type="method" definingClass="class:Class">
<params description="name of the method to call" optional="false" name="methodName" type="string">
</params>
<params description="array of arguments to pass to the method in question" optional="true" name="arrayArgs" type="array">
</params>
<params description="Number of ms to delay the call by - defaults to zero (so just pulls                        execution of the method out of the current execution thread." optional="true" name="time" type="number">
</params>
<returns description="Timer ID for the delayed call - can be passed to                       ${isc.DocUtils.linkForRef('classMethod:Timer.clear')} to cancel the call before it executes" type="string"></returns>
</docItem>
<docItem ref="method:Class.addProperties" flags="" description="	&amp;#010 	Add properties or methods to this specific instance.  &amp;#010	Properties with the same name as existing properties will override.&amp;#010&amp;#010" name="addProperties" type="method" definingClass="class:Class">
<params description="Object containing name:value pairs to be added to this object" optional="true" name="arguments 0-N" type="object">
</params>
<returns description="the object after properties have been added to it" type="object"></returns>
</docItem>
<docItem ref="attr:StretchImgButton.iconWidth" flags="IR" description="Width in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:OperationBinding.methodArguments" flags="IR" description="You can explicitly declare the arguments to be passed to&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} using this attribute.  This isn't required - in the&amp;#010 absense of &lt;code&gt;methodArguments&lt;/code&gt;, the DMI implementation will still automagically&amp;#010 pass a stock set of arguments to your method (see the overview in ${isc.DocUtils.linkForRef('class:ServerObject')}), but&amp;#010 specifying arguments explicitly gives you more flexibility in what can be passed.&amp;#010 &lt;p&gt;&amp;#010 The format for specifying &lt;code&gt;methodArguments&lt;/code&gt; is as a comma separated list of VTL&amp;#010 (Velocity Template Language) expressions.  See the&amp;#010 &lt;a href='http://jakarta.apache.org/velocity/docs/vtl-reference-guide.html' onclick=&quot;window.open('http://jakarta.apache.org/velocity/docs/vtl-reference-guide.html');return false;&quot;&gt;VTL Reference&lt;/a&gt;&amp;#010 and &lt;a href='http://jakarta.apache.org/velocity/docs/user-guide.html' onclick=&quot;window.open('http://jakarta.apache.org/velocity/docs/user-guide.html');return false;&quot;&gt;Velocity User Guide&lt;/a&gt; &amp;#010 for an overview of how to use VTL.&amp;#010 &lt;p&gt;&amp;#010 The Velocity context is pre-populated with the following variables - you can pass these&amp;#010 verbatim as arguments, or call methods on these objects and pass the resulting values:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;dsRequest: instance of the current DSRequest&amp;#010 &lt;li&gt;request: the current HttpServletRequest&amp;#010 &lt;li&gt;response: the current HttpServletResponse&amp;#010 &lt;li&gt;rpcManager: the instance of RPCManager for this request&amp;#010 &lt;li&gt;dataSource: a DataSource instance for this request&amp;#010 &lt;/ul&gt;&amp;#010 So, for example, if you had a method signature like the following:&amp;#010 &lt;p&gt;&lt;code&gt;&amp;#010 public DSResponse fetch(SupplyItem creteria, long startRow, long endRow)&amp;#010 &lt;/code&gt;&lt;p&gt;&amp;#010 You can invoke it by specifying &lt;code&gt;methodArguments&lt;/code&gt; as follows:&amp;#010 &lt;p&gt;&lt;code&gt;&amp;#010 methodArguments=&quot;$dsRequest.criteria, $dsRequest.startRow, $dsRequest.endRow&quot;&amp;#010 &lt;/code&gt;&lt;/p&gt;&amp;#010 Without &lt;code&gt;methodArguments&lt;/code&gt;, there would be no way for you to specify&amp;#010 &lt;code&gt;startRow/endRow&lt;/code&gt; as arguments.  You could, of course, simply declare the method&amp;#010 to take a &lt;code&gt;DSRequest&lt;/code&gt; object and call &lt;code&gt;getStartRow()/getEndRow()&lt;/code&gt; in&amp;#010 the body of the method." name="methodArguments" valueType="string" defaultValue="null" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="class:ServerObject">
</seeAlso>
</docItem>
<docItem ref="classAttr:ValidatorTypes.substringCount" flags="IR" description="Determine whether a string value contains some substring multiple times.&amp;#010  The substring to check for is specified via &lt;code&gt;validator.substring&lt;/code&gt;.&amp;#010  The &lt;code&gt;validator.operator&lt;/code&gt; property allows you to specify how to test&amp;#010  the number of substring occurrances. Valid values for this property are&amp;#010  &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;,&amp;#010  &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;br&gt;&amp;#010  The number of matches to check for is specified via &lt;code&gt;validator.count&lt;/code&gt;." name="substringCount" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="method:Date.getShortYear" flags="" description="      Return a 2 digit year for this date.&amp;#010" name="getShortYear" type="method" definingClass="class:Date">
<returns description="year number, padded to 2 characters" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem exampleConfig="Canvas.xml" ref="class:Canvas" description="Canvas is the base abstraction for cross-browser DHTML drawing.&amp;#010		All DHTML widgets inherit from the Canvas class." name="Canvas" type="class">
    <methods>method:Canvas.animateMove</methods>
    <methods>method:Canvas.animateResize</methods>
    <methods>method:Canvas.animateRect</methods>
    <methods>method:Canvas.animateFade</methods>
    <methods>method:Canvas.animateScroll</methods>
    <methods>method:Canvas.animateShow</methods>
    <methods>method:Canvas.animateHide</methods>
    <methods>method:Canvas.setShowResizeBar</methods>
    <methods>method:Canvas.init</methods>
    <methods>method:Canvas.initWidget</methods>
    <methods>method:Canvas.isDrawn</methods>
    <methods>method:Canvas.getID</methods>
    <methods>method:Canvas.getInnerHTML</methods>
    <methods>method:Canvas.draw</methods>
    <methods>method:Canvas.setHtmlElement</methods>
    <methods>method:Canvas.setHtmlPosition</methods>
    <methods>method:Canvas.markForRedraw</methods>
    <methods>method:Canvas.redraw</methods>
    <methods>method:Canvas.clear</methods>
    <methods>method:Canvas.destroy</methods>
    <methods>method:Canvas.addChild</methods>
    <methods>method:Canvas.removePeer</methods>
    <methods>method:Canvas.removeChild</methods>
    <methods>method:Canvas.addPeer</methods>
    <methods>method:Canvas.setSnapTo</methods>
    <methods>method:Canvas.getSnapTo</methods>
    <methods>method:Canvas.setSnapEdge</methods>
    <methods>method:Canvas.getSnapEdge</methods>
    <methods>method:Canvas.getParentElements</methods>
    <methods>method:Canvas.contains</methods>
    <methods>method:Canvas.showClickMask</methods>
    <methods>method:Canvas.hideClickMask</methods>
    <methods>method:Canvas.clickMaskUp</methods>
    <methods>method:Canvas.setRect</methods>
    <methods>method:Canvas.getLeft</methods>
    <methods>method:Canvas.setLeft</methods>
    <methods>method:Canvas.getTop</methods>
    <methods>method:Canvas.setTop</methods>
    <methods>method:Canvas.getWidth</methods>
    <methods>method:Canvas.setWidth</methods>
    <methods>method:Canvas.getHeight</methods>
    <methods>method:Canvas.setHeight</methods>
    <methods>method:Canvas.getRight</methods>
    <methods>method:Canvas.setRight</methods>
    <methods>method:Canvas.getBottom</methods>
    <methods>method:Canvas.setBottom</methods>
    <methods>method:Canvas.getScrollWidth</methods>
    <methods>method:Canvas.getScrollHeight</methods>
    <methods>method:Canvas.getScrollLeft</methods>
    <methods>method:Canvas.getScrollTop</methods>
    <methods>method:Canvas.setPageLeft</methods>
    <methods>method:Canvas.setPageTop</methods>
    <methods>method:Canvas.getPageLeft</methods>
    <methods>method:Canvas.getPageTop</methods>
    <methods>method:Canvas.getPageRight</methods>
    <methods>method:Canvas.getPageBottom</methods>
    <methods>method:Canvas.setMargin</methods>
    <methods>method:Canvas.setPadding</methods>
    <methods>method:Canvas.containsPoint</methods>
    <methods>method:Canvas.visibleAtPoint</methods>
    <methods>method:Canvas.intersects</methods>
    <methods>method:Canvas.intersectsRect</methods>
    <methods>method:Canvas.containsEvent</methods>
    <methods>method:Canvas.getOffsetX</methods>
    <methods>method:Canvas.getOffsetY</methods>
    <methods>method:Canvas.getScrollbarSize</methods>
    <methods>method:Canvas.getViewportWidth</methods>
    <methods>method:Canvas.getViewportHeight</methods>
    <methods>method:Canvas.getInnerHeight</methods>
    <methods>method:Canvas.getInnerWidth</methods>
    <methods>method:Canvas.getInnerContentHeight</methods>
    <methods>method:Canvas.getInnerContentWidth</methods>
    <methods>method:Canvas.getVisibleWidth</methods>
    <methods>method:Canvas.getVisibleHeight</methods>
    <methods>method:Canvas.moveBy</methods>
    <methods>method:Canvas.moveTo</methods>
    <methods>method:Canvas.getVSnapOrigin</methods>
    <methods>method:Canvas.getHSnapOrigin</methods>
    <methods>method:Canvas.showNextTo</methods>
    <methods>method:Canvas.resizeBy</methods>
    <methods>method:Canvas.setPercentSource</methods>
    <methods>method:Canvas.layoutChildren</methods>
    <methods>method:Canvas.resizeTo</methods>
    <methods>method:Canvas.parentResized</methods>
    <methods>method:Canvas.setDragTracker</methods>
    <methods>method:Canvas.shouldDragScroll</methods>
    <methods>method:Canvas.setOverflow</methods>
    <methods>method:Canvas.adjustForContent</methods>
    <methods>method:Canvas.getScrollBottom</methods>
    <methods>method:Canvas.getScrollRight</methods>
    <methods>method:Canvas.scrollToTop</methods>
    <methods>method:Canvas.scrollToBottom</methods>
    <methods>method:Canvas.scrollToLeft</methods>
    <methods>method:Canvas.scrollToRight</methods>
    <methods>method:Canvas.scrollBy</methods>
    <methods>method:Canvas.scrollByPercent</methods>
    <methods>method:Canvas.scrollTo</methods>
    <methods>method:Canvas.scrolled</methods>
    <methods>method:Canvas.scrollToPercent</methods>
    <methods>method:Canvas.show</methods>
    <methods>method:Canvas.hide</methods>
    <methods>method:Canvas.isVisible</methods>
    <methods>method:Canvas.setEnabled</methods>
    <methods>method:Canvas.setDisabled</methods>
    <methods>method:Canvas.enable</methods>
    <methods>method:Canvas.disable</methods>
    <methods>method:Canvas.isDisabled</methods>
    <methods>method:Canvas.isEnabled</methods>
    <methods>method:Canvas.setCanFocus</methods>
    <methods>method:Canvas.focus</methods>
    <methods>method:Canvas.blur</methods>
    <methods>method:Canvas.setAccessKey</methods>
    <methods>method:Canvas.setTabIndex</methods>
    <methods>method:Canvas.bringToFront</methods>
    <methods>method:Canvas.sendToBack</methods>
    <methods>method:Canvas.moveAbove</methods>
    <methods>method:Canvas.moveBelow</methods>
    <methods>method:Canvas.getContents</methods>
    <methods>method:Canvas.setContents</methods>
    <methods>method:Canvas.setBackgroundColor</methods>
    <methods>method:Canvas.setBackgroundImage</methods>
    <methods>method:Canvas.setBorder</methods>
    <methods>method:Canvas.setOpacity</methods>
    <methods>method:Canvas.setCursor</methods>
    <methods>method:Canvas.handleHover</methods>
    <methods>method:Canvas.updateHover</methods>
    <methods>method:Canvas.hoverHidden</methods>
    <methods>method:Canvas.hover</methods>
    <methods>method:Canvas.getHoverHTML</methods>
    <methods>method:Canvas.setClassName</methods>
    <methods>method:Canvas.setStyleName</methods>
    <methods>method:Canvas.showContextMenu</methods>
    <methods>method:Canvas.hideContextMenu</methods>
    <methods>method:Canvas.mouseOver</methods>
    <methods>method:Canvas.mouseDown</methods>
    <methods>method:Canvas.rightMouseDown</methods>
    <methods>method:Canvas.mouseStillDown</methods>
    <methods>method:Canvas.mouseMove</methods>
    <methods>method:Canvas.mouseOut</methods>
    <methods>method:Canvas.mouseUp</methods>
    <methods>method:Canvas.click</methods>
    <methods>method:Canvas.doubleClick</methods>
    <methods>method:Canvas.mouseWheel</methods>
    <methods>method:Canvas.dragRepositionStart</methods>
    <methods>method:Canvas.dragRepositionMove</methods>
    <methods>method:Canvas.dragRepositionStop</methods>
    <methods>method:Canvas.dragStart</methods>
    <methods>method:Canvas.dragMove</methods>
    <methods>method:Canvas.dragStop</methods>
    <methods>method:Canvas.dropOver</methods>
    <methods>method:Canvas.dropMove</methods>
    <methods>method:Canvas.dropOut</methods>
    <methods>method:Canvas.drop</methods>
    <methods>method:Canvas.keyDown</methods>
    <methods>method:Canvas.keyUp</methods>
    <methods>method:Canvas.keyPress</methods>
    <methods>method:Canvas.willAcceptDrop</methods>
    <methods>method:Canvas.getHSnapPosition</methods>
    <methods>method:Canvas.getVSnapPosition</methods>
    <methods>method:Canvas.shouldSnapOnDrop</methods>
    <methods>method:Canvas.getImgURL</methods>
    <methods>method:Canvas.imgHTML</methods>
    <methods>method:Canvas.getImage</methods>
    <methods>method:Canvas.setImage</methods>
    <methods>method:Canvas.linkHTML</methods>
    <methods>method:Canvas.setShowShadow</methods>
    <methods>method:Canvas.hiliteCharacter</methods>
    <methods>method:Canvas.focusChanged</methods>
    <classAttrs>classAttr:Canvas.TAB_INDEX_FLOOR</classAttrs>
    <classMethods>classMethod:Canvas.getEventEdge</classMethods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:Canvas.animateTime</attrs>
    <attrs>attr:Canvas.animateAcceleration</attrs>
    <attrs>attr:Canvas.animateMoveTime</attrs>
    <attrs>attr:Canvas.animateResizeTime</attrs>
    <attrs>attr:Canvas.animateRectTime</attrs>
    <attrs>attr:Canvas.animateFadeTime</attrs>
    <attrs>attr:Canvas.animateScrollTime</attrs>
    <attrs>attr:Canvas.animateShowTime</attrs>
    <attrs>attr:Canvas.animateHideTime</attrs>
    <attrs>attr:Canvas.animateMoveAcceleration</attrs>
    <attrs>attr:Canvas.animateResizeAcceleration</attrs>
    <attrs>attr:Canvas.animateRectAcceleration</attrs>
    <attrs>attr:Canvas.animateScrollAcceleration</attrs>
    <attrs>attr:Canvas.animateShowAcceleration</attrs>
    <attrs>attr:Canvas.animateHideAcceleration</attrs>
    <attrs>attr:Canvas.layoutAlign</attrs>
    <attrs>attr:Canvas.showResizeBar</attrs>
    <attrs>attr:Canvas.resizeBarTarget</attrs>
    <attrs>attr:Canvas.extraSpace</attrs>
    <attrs>attr:Canvas.ID</attrs>
    <attrs>attr:Canvas.autoDraw</attrs>
    <attrs>attr:Canvas.parentElement</attrs>
    <attrs>attr:Canvas.topElement</attrs>
    <attrs>attr:Canvas.masterElement</attrs>
    <attrs>attr:Canvas.children</attrs>
    <attrs>attr:Canvas.peers</attrs>
    <attrs>attr:Canvas.htmlElement</attrs>
    <attrs>attr:Canvas.htmlPosition</attrs>
    <attrs>attr:Canvas.matchElement</attrs>
    <attrs>attr:Canvas.position</attrs>
    <attrs>attr:Canvas.left</attrs>
    <attrs>attr:Canvas.top</attrs>
    <attrs>attr:Canvas.width</attrs>
    <attrs>attr:Canvas.height</attrs>
    <attrs>attr:Canvas.defaultWidth</attrs>
    <attrs>attr:Canvas.defaultHeight</attrs>
    <attrs>attr:Canvas.minWidth</attrs>
    <attrs>attr:Canvas.maxWidth</attrs>
    <attrs>attr:Canvas.minHeight</attrs>
    <attrs>attr:Canvas.maxHeight</attrs>
    <attrs>attr:Canvas.autoShowParent</attrs>
    <attrs>attr:Canvas.visibility</attrs>
    <attrs>attr:Canvas.canSelectText</attrs>
    <attrs>attr:Canvas.className</attrs>
    <attrs>attr:Canvas.styleName</attrs>
    <attrs>attr:Canvas.contents</attrs>
    <attrs>attr:Canvas.dynamicContents</attrs>
    <attrs>attr:Canvas.dynamicContentsVars</attrs>
    <attrs>attr:Canvas.margin</attrs>
    <attrs>attr:Canvas.padding</attrs>
    <attrs>attr:Canvas.border</attrs>
    <attrs>attr:Canvas.backgroundColor</attrs>
    <attrs>attr:Canvas.backgroundImage</attrs>
    <attrs>attr:Canvas.backgroundRepeat</attrs>
    <attrs>attr:Canvas.appImgDir</attrs>
    <attrs>attr:Canvas.skinImgDir</attrs>
    <attrs>attr:Canvas.cursor</attrs>
    <attrs>attr:Canvas.disabledCursor</attrs>
    <attrs>attr:Canvas.opacity</attrs>
    <attrs>attr:Canvas.overflow</attrs>
    <attrs>attr:Canvas.showCustomScrollbars</attrs>
    <attrs>attr:Canvas.scrollbarSize</attrs>
    <attrs>attr:Canvas.disabled</attrs>
    <attrs>attr:Canvas.enabled</attrs>
    <attrs>attr:Canvas.redrawOnResize</attrs>
    <attrs>attr:Canvas.canFocus</attrs>
    <attrs>attr:Canvas.tabIndex</attrs>
    <attrs>attr:Canvas.accessKey</attrs>
    <attrs>attr:Canvas.contextMenu</attrs>
    <attrs>attr:Canvas.prompt</attrs>
    <attrs>attr:Canvas.canDrag</attrs>
    <attrs>attr:Canvas.dragStartDistance</attrs>
    <attrs>attr:Canvas.canDragScroll</attrs>
    <attrs>attr:Canvas.dragScrollDelay</attrs>
    <attrs>attr:Canvas.dragIntersectStyle</attrs>
    <attrs>attr:Canvas.canDragReposition</attrs>
    <attrs>attr:Canvas.dragRepositionCursor</attrs>
    <attrs>attr:Canvas.canDragResize</attrs>
    <attrs>attr:Canvas.resizeFrom</attrs>
    <attrs>attr:Canvas.canHover</attrs>
    <attrs>attr:Canvas.hoverDelay</attrs>
    <attrs>attr:Canvas.showHover</attrs>
    <attrs>attr:Canvas.hoverWidth</attrs>
    <attrs>attr:Canvas.hoverHeight</attrs>
    <attrs>attr:Canvas.hoverAlign</attrs>
    <attrs>attr:Canvas.hoverVAlign</attrs>
    <attrs>attr:Canvas.hoverWrap</attrs>
    <attrs>attr:Canvas.hoverStyle</attrs>
    <attrs>attr:Canvas.hoverOpacity</attrs>
    <attrs>attr:Canvas.hoverMoveWithMouse</attrs>
    <attrs>attr:Canvas.edgeCursorMap</attrs>
    <attrs>attr:Canvas.keepInParentRect</attrs>
    <attrs>attr:Canvas.dragAppearance</attrs>
    <attrs>attr:Canvas.dragType</attrs>
    <attrs>attr:Canvas.dragTarget</attrs>
    <attrs>attr:Canvas.showDragShadow</attrs>
    <attrs>attr:Canvas.dragOpacity</attrs>
    <attrs>attr:Canvas.canDrop</attrs>
    <attrs>attr:Canvas.canAcceptDrop</attrs>
    <attrs>attr:Canvas.canDropBefore</attrs>
    <attrs>attr:Canvas.dropTypes</attrs>
    <attrs>attr:Canvas.mouseStillDownInitialDelay</attrs>
    <attrs>attr:Canvas.mouseStillDownDelay</attrs>
    <attrs>attr:Canvas.doubleClickDelay</attrs>
    <attrs>attr:Canvas.noDoubleClicks</attrs>
    <attrs>attr:Canvas.percentSource</attrs>
    <attrs>attr:Canvas.percentBox</attrs>
    <attrs>attr:Canvas.snapTo</attrs>
    <attrs>attr:Canvas.snapEdge</attrs>
    <attrs>attr:Canvas.snapOffsetLeft</attrs>
    <attrs>attr:Canvas.snapOffsetTop</attrs>
    <attrs>attr:Canvas.snapToGrid</attrs>
    <attrs>attr:Canvas.snapResizeToGrid</attrs>
    <attrs>attr:Canvas.childrenSnapToGrid</attrs>
    <attrs>attr:Canvas.childrenSnapResizeToGrid</attrs>
    <attrs>attr:Canvas.snapHGap</attrs>
    <attrs>attr:Canvas.snapVGap</attrs>
    <attrs>attr:Canvas.snapHDirection</attrs>
    <attrs>attr:Canvas.snapVDirection</attrs>
    <attrs>attr:Canvas.snapAxis</attrs>
    <attrs>attr:Canvas.snapOnDrop</attrs>
    <attrs>attr:Canvas.destroyed</attrs>
    <attrs>attr:Canvas.destroying</attrs>
    <attrs>attr:Canvas.showEdges</attrs>
    <attrs>attr:Canvas.edgeSize</attrs>
    <attrs>attr:Canvas.edgeOffset</attrs>
    <attrs>attr:Canvas.edgeImage</attrs>
    <attrs>attr:Canvas.customEdges</attrs>
    <attrs>attr:Canvas.edgeBackgroundColor</attrs>
    <attrs>attr:Canvas.edgeShowCenter</attrs>
    <attrs>attr:Canvas.edgeCenterBackgroundColor</attrs>
    <attrs>attr:Canvas.showShadow</attrs>
    <attrs>attr:Canvas.shadowDepth</attrs>
    <attrs>attr:Canvas.shadowOffset</attrs>
    <attrs>attr:Canvas.shadowSoftness</attrs>
    <attrs>attr:Canvas.shadowImage</attrs>
</docItem>
<docItem ref="method:Array.unsort" flags="A" description="		Turn sorting off for this array, indicating that the current sort&amp;#010		order should be preserved.  Return true if this is supported in thist List.&amp;#010&amp;#010		Some implementations may not support this -- they should return false&amp;#010		to indicate to the caller that sort order must be maintained (eg: in&amp;#010		the case where sort order is dervied from the server, etc).&amp;#010&amp;#010" name="unsort" type="method" definingClass="object:Array">
<returns description="true == list supports unsorting, false == not supported." type="boolean"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="attr:PickList.pickListCriteria" flags="IRWA" description="If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is&amp;#010 set) this property can be used to provide static filter criteria when retrieving the data&amp;#010 for the pickList." name="pickListCriteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="method:CellSelection.cellIsSelected" flags="" description="			Return true if a particular item is selected&amp;#010" name="cellIsSelected" type="method" definingClass="class:CellSelection">
<params description="row index of the cell to check" optional="false" name="rowNum" type="number">
</params>
<params description="column index of the cell to check" optional="false" name="colNum" type="number">
</params>
<returns description="true == object is selected								false == object is not selected" type="boolean"></returns>
    <groups>selection</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:StretchImgButton.selected" flags="IRW" description="Whether this component is selected.  For some components, selection affects appearance." name="selected" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <setter>setSelected</setter>
    <groups>state</groups>
</docItem>
<docItem ref="method:CubeGrid.getEditValue" flags="" description="&amp;#010 Returns the current temporary locally stored edit value for a cell being edited.&amp;#010 Note this is the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty','valueProperty')} that will be saved for the&amp;#010 cell in question.&amp;#010&amp;#010" name="getEditValue" type="method" definingClass="class:CubeGrid">
<params description="index of the row for which the editValue should be returned" optional="false" name="rowNum" type="number">
</params>
<params description="index of column for which value should be returned" optional="false" name="colNum" type="number">
</params>
<returns description="edit value for the cell" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="method:DynamicForm.hideItem" flags="" description=" Hide a form item via ${isc.DocUtils.linkForRef('method:FormItem.hide')}&amp;#010" name="hideItem" type="method" definingClass="class:DynamicForm">
<params description="Name of the item to show" optional="false" name="itemName" type="string">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:Window.maximized" flags="IRW" description="Is this window maximized. If true at init time, the window will be drawn maximized.&amp;#010 To set this property at runtime use ${isc.DocUtils.linkForRef('method:Window.maximize')} or ${isc.DocUtils.linkForRef('method:Window.restore')}." name="maximized" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="method:ListGrid.getEditRow" flags="" description="&amp;#010  Returns the index of the row being edited.&amp;#010&amp;#010" name="getEditRow" type="method" definingClass="class:ListGrid">
<returns description="Index of the current edit row" type="number"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Window.bodyStyle" flags="IRW" description="Style of the Window body." name="bodyStyle" valueType="string" defaultValue="&quot;windowBody&quot;" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="method:Canvas.setEnabled" deprecated="As of Smartclient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('method:Canvas.setDisabled')}" flags="A" description=" set the enabled state of this object.&amp;#010&amp;#010" name="setEnabled" type="method" definingClass="class:Canvas">
<params description="pass false to disable or anything else to enable" optional="false" name="newState" type="boolean">
</params>
    <groups>enable</groups>
</docItem>
<docItem ref="method:ValuesManager.addMembers" flags="" description="  Add multiple new member forms to this valuesManager.&amp;#010" name="addMembers" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:ValuesManager.addMember">
</seeAlso>
<params description="array of forms to add to this valuesManager as members." optional="false" name="members" type="array">
</params>
    <groups>members</groups>
</docItem>
<docItem ref="classAttr:Hover.moveWithMouse" flags="RWA" description="When the Hover canvas is shown by default, should it move as the user moves the&amp;#010 mouse pointer?&lt;br&gt;&amp;#010 May be overridden by including a &lt;code&gt;moveWithMouse&lt;/code&gt; attribute on the &amp;#010 properties block passed to ${isc.DocUtils.linkForRef('classMethod:Hover.show')}" name="moveWithMouse" valueType="boolean" defaultValue="false" type="classAttr" definingClass="class:Hover">
</docItem>
<docItem ref="method:Layout.reorderMembers" flags="" description=" Move a range of members to a new position&amp;#010		    &amp;#010" name="reorderMembers" type="method" definingClass="class:Layout">
<params description="beginning of range of members to move" optional="false" name="start" type="number">
</params>
<params description="end of range of members to move, non-inclusive" optional="false" name="end" type="number">
</params>
<params description="new position to move the members to" optional="false" name="newPosition" type="number">
</params>
</docItem>
<docItem ref="method:Window.setShowCloseButton" flags="" description=" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showCloseButton')} to show / hide the closeButton&amp;#010" name="setShowCloseButton" type="method" definingClass="class:Window">
<seeAlso ref="attr:Window.headerControls">
</seeAlso>
<seeAlso ref="attr:Window.showCloseButton">
</seeAlso>
</docItem>
<docItem ref="class:MenuButton" description="Simple subclass of button associated with a menu widget (gets shown below the button)." name="MenuButton" type="class">
    <methods>method:MenuButton.setShowMenuButtonImage</methods>
    <methods>method:MenuButton.setShowMenuBelow</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:MenuButton.title</attrs>
    <attrs>attr:MenuButton.height</attrs>
    <attrs>attr:MenuButton.showMenuButtonImage</attrs>
    <attrs>attr:MenuButton.menuButtonImage</attrs>
    <attrs>attr:MenuButton.menuButtonImageUp</attrs>
    <attrs>attr:MenuButton.hiliteAccessKey</attrs>
    <attrs>attr:MenuButton.showMenuBelow</attrs>
    <attrs>attr:MenuButton.menu</attrs>
    <attrs>attr:MenuButton.menuAnimationEffect</attrs>
</docItem>
<docItem ref="method:ListGrid.getFieldName" flags="A" description=" Given a column number or field id, return the field name of a field.&amp;#010" name="getFieldName" type="method" definingClass="class:ListGrid">
<params description="number or id of the field." optional="false" name="colNum" type="number or id">
</params>
<returns description="Name of the field." type="string"></returns>
    <groups>display</groups>
</docItem>
<docItem ref="method:CubeGrid.selectCells" flags="" description="&amp;#010  Select/deselect cells that match a list of facetValues.  &amp;#010  Also supports an explicit list of cells or cellIds&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectCells" type="method" definingClass="class:CubeGrid">
<params description="cells to select" optional="false" name="cellList" type="Array of cells | facetValues object">
</params>
<params description="new selection state (if null, defaults to true)" optional="true" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:SearchForm.search" flags="" description=" Triggered when a SubmitItem is included in the form is submitted and gets pressed.&amp;#010 &amp;#010" name="search" type="method" definingClass="class:SearchForm">
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
<seeAlso ref="method:DynamicForm.submitValues">
</seeAlso>
<params description="the search criteria from the form" optional="false" name="criteria" type="Criteria">
</params>
<params description="the form being submitted" optional="false" name="form" type="SearchForm">
</params>
    <groups>submitting</groups>
</docItem>
<docItem ref="class:BrowserPlugin" description="Container for a Browser Plugin." name="BrowserPlugin" type="class">
    <treeLocation>Optional Modules/Client Bridges</treeLocation>
    <requiresModules>PluginBridges</requiresModules>
</docItem>
<docItem ref="attr:ListGrid.groupLeadingIndent" flags="IRW" description="Default number of pixels by which to indent all groups." name="groupLeadingIndent" valueType="Number" defaultValue="20" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
<seeAlso ref="method:ListGrid.getGroupNodeHTML">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:FormItem.emptyDisplayValue" flags="IRW" description="Text to display when this form item has a null or undefined value." name="emptyDisplayValue" valueType="string" defaultValue="&quot;&quot;" type="attr" definingClass="class:FormItem">
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:RPCRequest.ignoreTimeout" flags="IRWA" description="When set to true, no reply is expected from the server.  However, if a reply is received, it will&amp;#010 be processed.&lt;p&gt;&amp;#010&amp;#010 Note: setting this to true, forces ${isc.DocUtils.linkForRef('attr:RPCRequest.sendNoQueue')} to &lt;code&gt;true&lt;/code&gt; for&amp;#010 this request." name="ignoreTimeout" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="method:Dialog.noClick" flags="" description=" Handle a click on the 'no' button of this Dialog.&amp;#010 Default implementation is to return &lt;code&gt;false&lt;/code&gt;.&amp;#010 Override to do something else.&amp;#010" name="noClick" type="method" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="method:StretchImgButton.deselect" flags="" description=" Select this object.&amp;#010" name="deselect" type="method" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="attr:DataSource.useLocalValidators" flags="A" description="Whether to attempt validation on the client at all for this DataSource.&amp;#010 &lt;p&gt;&amp;#010 Disabling client-side validation entirely is a good way to test server-side validation." name="useLocalValidators" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSource">
    <groups>validation</groups>
</docItem>
<docItem ref="method:DataSource.getField" flags="" description=" Return the field definition object.&amp;#010" name="getField" type="method" definingClass="class:DataSource">
<params description="Name of the field to retrieve" optional="false" name="fieldName" type="String">
</params>
<returns description="field object" type="DataSourceField"></returns>
</docItem>
<docItem ref="group:printing" name="printing" type="group">
</docItem>
<docItem ref="attr:Canvas.backgroundImage" flags="IR" description="URL for a background image for this widget (corresponding to the CSS &quot;background-image&quot;&amp;#010 attribute)." name="backgroundImage" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setBackgroundImage</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ResultSet.transformData" flags="" description=" &lt;code&gt;transformData()&lt;/code&gt; provides an opportunity to modify data that has been&amp;#010 returned from the server, before it has been integrated into the client-side cache.&amp;#010 &lt;P&gt;&amp;#010 If data is not immediately suited for client-side use when it is returned from the&amp;#010 ultimate data store, this method allows it to be transformed on the client so that such&amp;#010 transform operations do not impact server scalability.&amp;#010 &lt;P&gt;&amp;#010 It is legal for &lt;code&gt;transformData()&lt;/code&gt; to modify not only the records, but also&amp;#010 their number (by modifying startRow and endRow on the ${isc.DocUtils.linkForRef('class:DSResponse')} object).&amp;#010 &lt;P&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} for an alternative entry point which&amp;#010 applies to all DSResponses for a DataSource.&amp;#010&amp;#010" name="transformData" type="method" definingClass="class:ResultSet">
<params description="data returned from the server" optional="false" name="newData" type="any">
</params>
<params description="the DSResponse object returned by the                             server" optional="false" name="dsResponse" type="DSResponse">
</params>
<returns description="the modified data, ready to be cached" type="Array of Objects"></returns>
</docItem>
<docItem ref="attr:DataSourceField.type" flags="IR" description="Type of this field.  Required for all DataSource fields.&amp;#010 &lt;P&gt;&amp;#010 Field type may imply automatic validators (for example, an integer field cannot accept the&amp;#010 value &quot;foo&quot;).  Field type also affects the default behaviors of DataBound components, for&amp;#010 example, if a field is declared of type &quot;date&quot;, components that edit that field will&amp;#010 automatically choose a date-editing interface with pop-up date picker." name="type" valueType="FieldType" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>basics</groups>
</docItem>
<docItem ref="method:CubeGrid.deselectAllFacetValues" flags="" description="&amp;#010 deselect all headers in a headerBar (specified by facetId) or&amp;#010 all headerBars (if no facetId)&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectAllFacetValues" type="method" definingClass="class:CubeGrid">
<params description="ID of facet - if null, selects all headerbars' headers" optional="true" name="facetId" type="string">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="class:HTMLPane" description="Use the HTMLPane component to display HTML content in a pane of specified size. If the HTML&amp;#010 content is larger than the size of the pane, the pane will provide scrollbars for viewing&amp;#010 clipped content.&amp;#010 &lt;P&gt;&amp;#010 You can set the size of an HTMLPane directly via the width and height properties, or&amp;#010 indirectly by placing the HTMLPane in a container component (${isc.DocUtils.linkForRef('class:Layout')}, ${isc.DocUtils.linkForRef('class:Window')}, &amp;#010 ${isc.DocUtils.linkForRef('class:SectionStack')}, etc) that manages the sizes of its members." name="HTMLPane" type="class">
    <treeLocation>Client Reference/Foundation</treeLocation>
    <examples>${isc.DocUtils.linkForExampleId('htmlPane')}</examples>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED" flags="R" description="Indicates that too many authentication attempts have been made and the server refuses to&amp;#010 accept any more login attempts." name="STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED" valueType="integer" defaultValue="-6" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="attr:PickTreeItem.canSelectParentItems" flags="IRW" description="If true, clicking or pressing Enter on a menu item that has a submenu will&amp;#010		select that item (with standard behavior of hiding the menus, calling click&amp;#010		handlers, etc) instead of showing the submenu." name="canSelectParentItems" valueType="boolean" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
    <examples>${isc.DocUtils.linkForExampleId('treesEditing')}</examples>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:FusionChart.chartProperties" flags="IRA" description="Properties to passthrough to the 'graph' element of the XML generated for FusionCharts.&amp;#010 &lt;P&gt;&amp;#010 Some automatic conversions are done:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; boolean values become '0' and '1' as FusionCharts expects &lt;/li&gt;&amp;#010 &lt;li&gt; color values with a leading '#' have the '#' stripped to match FusionCharts &lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="chartProperties" valueType="Object" defaultValue="null" type="attr" definingClass="class:FusionChart">
</docItem>
<docItem ref="attr:Layout.leaveScrollbarGap" flags="IR" description="Whether to leave a gap for a vertical scrollbar even when one is not actually present.&amp;#010 &lt;P&gt;&amp;#010 This setting avoids the layout resizing all members when the vertical scrollbar is&amp;#010 introduced or removed, which can avoid unnecessary screen shifting and improve&amp;#010 performance." name="leaveScrollbarGap" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Layout">
</docItem>
<docItem ref="method:List.addAt" flags="" description=" Add a single item to this array at a specific position in the list, sliding other items over&amp;#010 to fit.&amp;#010&amp;#010" name="addAt" type="method" definingClass="interface:List">
<params description="object to add" optional="false" name="obj" type="object">
</params>
<params description="position in the list to add at" optional="false" name="pos" type="number">
</params>
<returns description="object that was added" type="object"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:Applet.classID" flags="IR" description="This attribute is used only with useTag: &quot;object&quot;.  In combination with &amp;#010  ${isc.DocUtils.linkForRef('attr:Applet.objectCodeBase')} this tag specifies the minimum JVM version required to view&amp;#010  this applet and the URL from which the JVM can be downloaded.&amp;#010  &lt;p&gt;&amp;#010  The default settings match the default behavior of the &amp;lt;applet&amp;gt; tag which requires JVM&amp;#010  1.3 or higher.&amp;#010  &lt;p&gt;&amp;#010  The default classID is: &quot;clsid:8AD9C840-044E-11D1-B3E9-00805F499D93&quot;&amp;#010  &lt;p&gt;&amp;#010  For notes on this feature see: &lt;a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie' onclick=&quot;window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie');return false;&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie&lt;/a&gt;" name="classID" valueType="string" defaultValue="see below" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.objectCodeBase">
</seeAlso>
</docItem>
<docItem ref="attr:StatefulCanvas.showDisabled" flags="IRW" description="Should we visibly change state when disabled?" name="showDisabled" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="class:SVG" description="ISC Abstraction for SVG controls" name="SVG" type="class">
    <treeLocation>Optional Modules/Client Bridges</treeLocation>
    <attrs>attr:SVG.pluginsPage</attrs>
    <attrs>attr:SVG.src</attrs>
    <requiresModules>PluginBridges</requiresModules>
</docItem>
<docItem ref="method:FormItem.itemHover" flags="A" description="  Optional stringMethod to fire when the user hovers over this item.&amp;#010  Return false to suppress default behavior of showing a hover canvas containing the&amp;#010  HTML returned by &lt;code&gt;formItem.itemHoverHTML()&lt;/code&gt; / &amp;#010  &lt;code&gt;form.itemHoverHTML()&lt;/code&gt;.&amp;#010&amp;#010" name="itemHover" type="method" definingClass="class:FormItem">
<seeAlso ref="method:FormItem.titleHover">
</seeAlso>
<seeAlso ref="method:FormItem.itemHoverHTML">
</seeAlso>
<params description="This items form" optional="false" name="form" type="DynamicForm">
</params>
<params description="Pointer to this item" optional="false" name="item" type="FormItem">
</params>
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:Array.removeAt" flags="" description=" Remove the item at the specified position, rearranging all subsequent items to fill the gap&amp;#010&amp;#010" name="removeAt" type="method" definingClass="object:Array">
<params description="position to remove" optional="false" name="pos" type="number">
</params>
<returns description="item that was removed" type="any"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:Slider.roundValues" flags="IRW" description="Specifies whether the slider value should be rounded to the nearest integer." name="roundValues" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="method:ResultSet.rangeIsLoaded" flags="A" description=" Whether the given range of rows has been loaded.&amp;#010&amp;#010 Unlike getRange(), will not trigger a server fetch.  &amp;#010&amp;#010" name="rangeIsLoaded" type="method" definingClass="class:ResultSet">
<params description="start position, inclusive" optional="false" name="startRow" type="number">
</params>
<params description="end position, exclusive" optional="false" name="endRow" type="number">
</params>
<returns description="true if all rows in the given range have been loaded, false if any rows in                   the range have not been loaded or are still in the process of being loaded" type="boolean"></returns>
</docItem>
<docItem ref="attr:TabSet.skinImgDir" flags="IR" description="Default directory for skin images (those defined by the class), relative to the&amp;#010 Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}." name="skinImgDir" valueType="string" defaultValue="&quot;images/TabSet/&quot;" type="attr" definingClass="class:TabSet">
    <groups>images</groups>
</docItem>
<docItem ref="attr:StretchImgButton.titleStyle" flags="IRW" description="CSS style applied to the title text only.  Defaults to ${isc.DocUtils.linkForRef('attr:StretchImgButton.baseStyle')} when unset.&amp;#010 &lt;P&gt;&amp;#010 With a separate &lt;code&gt;titleStyle&lt;/code&gt; and ${isc.DocUtils.linkForRef('attr:StretchImgButton.baseStyle')} set, you can provide a&amp;#010 backgroundColor via &lt;code&gt;baseStyle&lt;/code&gt; that will allow translucent .png media to be&amp;#010 &quot;tinted&quot; by the underlying background color, so that a single set of media can provide&amp;#010 range of color options.  In this usage, the &lt;code&gt;titleStyle&lt;/code&gt; should generally not&amp;#010 specify a background color as this would block out the media that appears behind the&amp;#010 title." name="titleStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <setter>setTitleStyle</setter>
</docItem>
<docItem ref="attr:ListGrid.sortDescendingImage" flags="IRWA" description="Image to show when sorting descending. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format." name="sortDescendingImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:PickList.valueField" flags="IRA" description="If this form item maps data values to display values by retrieving the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property &amp;#010 denotes the the field to use as the underlying data value in records from the &amp;#010 optionDataSource.&lt;br&gt;&amp;#010 If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item." name="valueField" valueType="string" defaultValue="null" type="attr" definingClass="interface:PickList">
    <getter>FormItem.getValueFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem ref="method:DateChooser.setData" flags="" description=" Set the picker to show the given date.&amp;#010 &amp;#010" name="setData" type="method" definingClass="class:DateChooser">
<params description="new value" optional="false" name="date" type="Date">
</params>
</docItem>
<docItem ref="attr:LinkItem.linkTitle" flags="IRW" description="Optional title text to display for this item's link. If unspecified the value of the item&amp;#010 will be the title text as well as the target of the link." name="linkTitle" valueType="string" defaultValue="null" type="attr" definingClass="class:LinkItem">
    <setter>setLinkTitle</setter>
</docItem>
<docItem ref="attr:DateChooser.cancelButtonTitle" flags="IRW" description="Title for the cancellation button." name="cancelButtonTitle" valueType="string" defaultValue="&quot;Cancel&quot;" type="attr" definingClass="class:DateChooser">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Facet.canCollapse" flags="IR" description="For tree facets, whether expand/collapse controls should be shown." name="canCollapse" valueType="boolean" defaultValue="facet.isTree" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="attr:Window.canDragResize" flags="IRW" description="Can the window be drag-resized? If true the window may be drag resized from its edges,&amp;#010 and if showing, via the resiszer icon in the footer." name="canDragResize" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.showResizer">
</seeAlso>
    <groups>dragging</groups>
    <groups>resizing</groups>
</docItem>
<docItem ref="method:RichTextEditor.getValue" flags="" description="  Retrieves the current value of the edit area.&amp;#010" name="getValue" type="method" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="method:DynamicForm.editSelectedData" flags="" description="&amp;#010 Edit the record selected in the specified selection component (typically a&amp;#010 ${isc.DocUtils.linkForRef('class:ListGrid')}).&amp;#010 &lt;P&gt;&amp;#010 Updates the values of this editor to match the selected record's values.&amp;#010 &lt;P&gt;&amp;#010 If this form has a dataSource, then saving via ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will use the &amp;#010 &quot;update&quot; operation type.&amp;#010&amp;#010" name="editSelectedData" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected&amp;#010     record(s) is/are to be edited" optional="false" name="selectionComponent" type="ListGrid or ID">
</params>
    <examples>${isc.DocUtils.linkForExampleId('updateOperation')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:DynamicForm.setItems" flags="" description=" Synonym for ${isc.DocUtils.linkForRef('method:DynamicForm.setFields')}&amp;#010&amp;#010" name="setItems" type="method" definingClass="class:DynamicForm">
<params description="list of new items to show in the form" optional="false" name="itemList" type="Array of objects">
</params>
    <groups>elements</groups>
</docItem>
<docItem ref="attr:Slider.thumbSrc" flags="IRW" description="The base filename for the slider thumb images.&amp;#010 The filenames for the thumb icons are assembled from this base filename and the state of the&amp;#010 thumb, as follows:&lt;br&gt;&amp;#010 Assume the thumbSrc is set to &lt;code&gt;{baseName}.{extension}&lt;/code&gt;&lt;br&gt;&amp;#010 The full set of images to be displayed is:&lt;br&gt;&amp;#010 For horizontal sliders:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}.{extension}&lt;/code&gt;: default enabled appearance.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_down.{extension}&lt;/code&gt;:  appearance when the slider is enabled and the&amp;#010     thumb is clicked.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_off.{extension}&lt;/code&gt;:  appearance when the slider is disabled.&amp;#010 &lt;/ul&gt;&amp;#010 For vertical sliders:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}.{extension}&lt;/code&gt;: default enabled appearance.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_down.{extension}&lt;/code&gt;:  appearance when the slider is enabled and the&amp;#010     thumb is clicked.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_off.{extension}&lt;/code&gt;:  appearance when the slider is disabled.&amp;#010 &lt;/ul&gt;" name="thumbSrc" valueType="String" defaultValue="&quot;thumb.gif&quot;" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="group:statusCodes" description="Status codes returned by the server as rpcResponse.status.&lt;br&gt;&amp;#010 See the error handling doc section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager')} for more &amp;#010 information on these codes" name="statusCodes" type="group">
    <refs>classAttr:RPCResponse.STATUS_SUCCESS</refs>
    <refs>classAttr:RPCResponse.STATUS_FAILURE</refs>
    <refs>classAttr:RPCResponse.STATUS_VALIDATION_ERROR</refs>
    <refs>classAttr:RPCResponse.STATUS_LOGIN_INCORRECT</refs>
    <refs>classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED</refs>
    <refs>classAttr:RPCResponse.STATUS_LOGIN_REQUIRED</refs>
    <refs>classAttr:RPCResponse.STATUS_LOGIN_SUCCESS</refs>
    <refs>classAttr:RPCResponse.STATUS_TRANSPORT_ERROR</refs>
    <refs>classAttr:RPCResponse.STATUS_SERVER_TIMEOUT</refs>
</docItem>
<docItem ref="method:DynamicForm.showItem" flags="" description=" Show a form item via ${isc.DocUtils.linkForRef('method:FormItem.show')}&amp;#010" name="showItem" type="method" definingClass="class:DynamicForm">
<params description="Name of the item to show" optional="false" name="itemName" type="string">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:Slider.numValues" flags="IRW" description="The number of discrete values represented by slider. If specified, the range of valid&amp;#010 values (between &lt;code&gt;minValue&lt;/code&gt; and &lt;code&gt;maxValue&lt;/code&gt;) will be divided into&amp;#010 this many steps. As the thumb is moved along the track it will only select these values&amp;#010 and appear to jump between the steps." name="numValues" valueType="integer" defaultValue="null" type="attr" definingClass="class:Slider">
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="classAttr:isc.itemIndent" flags="IRW" description="Size, in pixels, of indentation of all member items. Items will be offset&amp;#010 and reduced in width by this amount. Overridden by&amp;#010 ${isc.DocUtils.linkForRef('classAttr:isc.itemStartIndent')} or ${isc.DocUtils.linkForRef('classAttr:isc.itemEndIndent')}.&amp;#010 Setting itemIndent is equivalent to setting itemStartIndent to the same amount&amp;#010 and itemEndIndent to 0." name="itemIndent" valueType="Number" defaultValue="0" type="attr" definingClass="class:isc">
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:DataSourceField.required" flags="IR" description="Indicates this field must be non-null in order for a record to pass validation.&amp;#010 &lt;P&gt;&amp;#010 Note that &lt;code&gt;required&lt;/code&gt; should not be set for a server-generated field, such as a&amp;#010 sequence, or validation will fail on the client." name="required" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSourceField">
    <groups>dataType</groups>
</docItem>
<docItem ref="group:dataChanged" title="Data Changes" description="Operations that change the Array" name="dataChanged" type="group">
</docItem>
<docItem ref="method:Canvas.dragMove" flags="A" description=" Executed every time the mouse moves while dragging this canvas.&amp;#010&amp;#010" name="dragMove" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to cancel drag interaction." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dragPan')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:Window.restore" flags="" description=" Restores the window to its specified height and width after a call to ${isc.DocUtils.linkForRef('method:Window.minimize')} or &amp;#010 ${isc.DocUtils.linkForRef('method:Window.maximize')}. Called from a click on the restore button shown in place of the &amp;#010 minimize or maximize button when the window is minimized or maximized.&lt;br&gt;&amp;#010 Resizing will occur as an animation if ${isc.DocUtils.linkForRef('attr:Window.animateMinimize')} is true.&amp;#010" name="restore" type="method" definingClass="class:Window">
</docItem>
<docItem ref="attr:ListGrid.longTextEditorThreshold" flags="IRW" description="When the length of the field specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} exceeds this&amp;#010 value, the ListGrid shows an edit field of type ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorType')}&amp;#010 rather than the standard text field when the field enters inline edit mode." name="longTextEditorThreshold" valueType="integer" defaultValue="255" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="method:StretchImgButton.action" flags="" description=" This property contains the default 'action' for the Button to fire when activated.&amp;#010" name="action" type="method" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:Array.last" flags="" description=" Return the last item in this list&amp;#010&amp;#010" name="last" type="method" definingClass="object:Array">
<returns description="last item in the list" type="any"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverDelay" flags="IRW" description="If the user rolls over an item, how long a delay before we fire any hover action / show&amp;#010 a hover for that item?" name="itemHoverDelay" valueType="number" defaultValue="500" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverDelay">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="group:dataChanges" name="dataChanges" type="group">
</docItem>
<docItem ref="attr:HTMLFlow.captureSCComponents" flags="IR" description="If true, SmartClient components created while executing the loaded HTML are captured&amp;#010 for rendering inside the HTMLFlow." name="captureSCComponents" valueType="boolean" defaultValue="true" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="method:Flashlet.getPluginHandle" flags="A" description=" &amp;#010  Returns a handle to the flashlet DOM element (valid only after the component has been drawn).  &amp;#010&amp;#010" name="getPluginHandle" type="method" definingClass="class:Flashlet">
</docItem>
<docItem ref="attr:StatefulCanvas.iconHeight" flags="IR" description="Height in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:eventHandling" name="eventHandling" type="group">
    <refs>method:DynamicForm.focusInItem</refs>
    <refs>method:FormItem.focusInItem</refs>
    <refs>method:FormItem.blurItem</refs>
    <refs>method:FormItem.focus</refs>
    <refs>method:FormItem.blur</refs>
    <refs>method:FormItem.click</refs>
    <refs>method:FormItem.change</refs>
    <refs>method:FormItem.changed</refs>
    <refs>method:FormItem.keyPress</refs>
    <refs>method:ButtonItem.click</refs>
</docItem>
<docItem ref="class:Tree" description="A Tree is a data model representing a set of objects linked into a hierarchy.&amp;#010 &lt;P&gt;&amp;#010 A Tree has no visual presentation, it is displayed by a ${isc.DocUtils.linkForRef('class:TreeGrid')} when supplied as&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.data')}.  &amp;#010 &lt;P&gt;&amp;#010 A Tree can be constructed out of a List of objects with interlinked by IDs or via explicitly&amp;#010 specified Arrays of child objects.  See ${isc.DocUtils.linkForRef('attr:Tree.modelType')} for an explanation of how&amp;#010 to pass data to a Tree.&amp;#010 &lt;P&gt;&amp;#010 Typical usage is to call ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')} to cause automatic creation of a &amp;#010 ${isc.DocUtils.linkForRef('class:ResultTree')}, which is a type of Tree that automatically handles loading data on &amp;#010 demand.  For information on DataBinding Trees, see ${isc.DocUtils.linkForRef('group:treeDataBinding')}." name="Tree" type="class">
    <methods>method:Tree.isRoot</methods>
    <methods>method:Tree.linkNodes</methods>
    <methods>method:Tree.getRoot</methods>
    <methods>method:Tree.setRoot</methods>
    <methods>method:Tree.getName</methods>
    <methods>method:Tree.getTitle</methods>
    <methods>method:Tree.getPath</methods>
    <methods>method:Tree.getParentPath</methods>
    <methods>method:Tree.getParent</methods>
    <methods>method:Tree.getParents</methods>
    <methods>method:Tree.getLevel</methods>
    <methods>method:Tree.isFolder</methods>
    <methods>method:Tree.isLeaf</methods>
    <methods>method:Tree.findById</methods>
    <methods>method:Tree.find</methods>
    <methods>method:Tree.getChildren</methods>
    <methods>method:Tree.getFolders</methods>
    <methods>method:Tree.getLeaves</methods>
    <methods>method:Tree.hasChildren</methods>
    <methods>method:Tree.hasFolders</methods>
    <methods>method:Tree.hasLeaves</methods>
    <methods>method:Tree.isDescendantOf</methods>
    <methods>method:Tree.getDescendants</methods>
    <methods>method:Tree.getDescendantFolders</methods>
    <methods>method:Tree.getDescendantLeaves</methods>
    <methods>method:Tree.dataChanged</methods>
    <methods>method:Tree.add</methods>
    <methods>method:Tree.addList</methods>
    <methods>method:Tree.move</methods>
    <methods>method:Tree.remove</methods>
    <methods>method:Tree.removeList</methods>
    <methods>method:Tree.isOpen</methods>
    <methods>method:Tree.openFolder</methods>
    <methods>method:Tree.openFolders</methods>
    <methods>method:Tree.closeFolder</methods>
    <methods>method:Tree.closeFolders</methods>
    <methods>method:Tree.openAll</methods>
    <methods>method:Tree.closeAll</methods>
    <methods>method:Tree.getOpenList</methods>
    <methods>method:Tree.getLength</methods>
    <methods>method:Tree.indexOf</methods>
    <methods>method:Tree.lastIndexOf</methods>
    <treeLocation>Client Reference/System</treeLocation>
    <attrs>attr:Tree.modelType</attrs>
    <attrs>attr:Tree.isFolderProperty</attrs>
    <attrs>attr:Tree.defaultIsFolder</attrs>
    <attrs>attr:Tree.pathDelim</attrs>
    <attrs>attr:Tree.nameProperty</attrs>
    <attrs>attr:Tree.titleProperty</attrs>
    <attrs>attr:Tree.idField</attrs>
    <attrs>attr:Tree.parentIdField</attrs>
    <attrs>attr:Tree.childrenProperty</attrs>
    <attrs>attr:Tree.openProperty</attrs>
    <attrs>attr:Tree.data</attrs>
    <attrs>attr:Tree.rootValue</attrs>
    <attrs>attr:Tree.root</attrs>
    <attrs>attr:Tree.showRoot</attrs>
    <attrs>attr:Tree.autoOpenRoot</attrs>
    <attrs>attr:Tree.defaultNodeTitle</attrs>
</docItem>
<docItem ref="method:Window.shouldDismissOnEscape" flags="" description=" Should this window be dismissed (same effect as pressing the &quot;Cancel&quot; button) when the &amp;#010 user presses the &quot;Escape&quot; key?&lt;br&gt;&amp;#010 Default behavior: if ${isc.DocUtils.linkForRef('attr:Window.dismissOnEscape')} is set, just return it. Otherwise return&amp;#010 true if this window is showing a &quot;close&quot; control in the header &amp;#010 (see ${isc.DocUtils.linkForRef('attr:Window.headerControls')}).&amp;#010" name="shouldDismissOnEscape" type="method" definingClass="class:Window">
<returns description="true if the window should be dismissed when the user hits escape" type="boolean"></returns>
</docItem>
<docItem ref="method:SectionStack.getSectionHeader" flags="" description=" Return the SectionHeader for a section.&amp;#010 &lt;P&gt;&amp;#010 This will be an instance of the ${isc.DocUtils.linkForRef('attr:SectionStack.sectionHeaderClass')}.  Since different&amp;#010 SectionStacks may use different header classes, be careful about what APIs you rely on&amp;#010 for the section header unless you have explicitly set the&amp;#010 &lt;code&gt;sectionHeaderClass&lt;/code&gt;.  In particular, use APIs such as&amp;#010 ${isc.DocUtils.linkForRef('method:SectionStack.setSectionTitle')} to manipulate header indirectly wherever possible, as high&amp;#010 performance SectionStacks designed for very large numbers of sections may cache and&amp;#010 re-use headers or use other strategies that would make it invalid to store a pointer to&amp;#010 a section header, assumed the header is a layout member, etc.&amp;#010&amp;#010" name="getSectionHeader" type="method" definingClass="class:SectionStack">
<params description="ID or index of the section for which you want the header" optional="false" name="section" type="String or Number">
</params>
<returns description="the section header indicated" type="SectionHeader"></returns>
</docItem>
<docItem ref="method:Canvas.hideContextMenu" flags="A" description="&amp;#010 The default implementation of this method hides the contextMenu currently being shown for this&amp;#010 component (which occurs when the mouse button that toggles the context menu is released).&amp;#010 Override if you want some other behavior.	&amp;#010&amp;#010" name="hideContextMenu" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.showContextMenu">
</seeAlso>
<seeAlso ref="method:Menu.hideContextMenu">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="attr:Window.showHeaderIcon" flags="IRW" description="If true, we show an icon on the left in the header." name="showHeaderIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <setter>setShowHeaderIcon</setter>
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="method:Canvas.getInnerContentWidth" flags="A" description="  Returns the amount of space available for interior content (or relatively positioned child&amp;#010  widget(s)) without introducing clipping, scrolling or overflow.&lt;br&gt;&amp;#010  This is the space within the viewport of the widget (not including padding, and excluding &amp;#010  margins, borders or scrollbars) rendered at its specified size.&amp;#010&amp;#010" name="getInnerContentWidth" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getInnerContentHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerWidth">
</seeAlso>
<returns description="inner height of the widget in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Validator.condition" flags="" description=" For a validator that is not one of the built-in ${isc.DocUtils.linkForRef('class:ValidatorTypes')}, a function or&amp;#010 String expression to evaluate to see if this validator passes or fails.&amp;#010 &lt;p&gt;&amp;#010 Because the validator declaration itself is passed as a parameter to&amp;#010 &lt;code&gt;condition()&lt;/code&gt;, you can effectively parameterize the validator.  For example, to&amp;#010 create a validator that checks that the value is after a certain date:&lt;pre&gt; &amp;#010     { type:&quot;custom&quot;, afterDate:new Date(), &amp;#010       condition:&quot;value.getTime() &gt; validator.afterDate.getTime()&quot; }&amp;#010 &lt;/pre&gt;&amp;#010 Reusable validators, like the above, can be registered as a standard validatorType by&amp;#010 calling ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')}.&amp;#010 &lt;P&gt;&amp;#010 Note that, if a field is declared with a builtin ${isc.DocUtils.linkForRef('type:FieldType')}, the value passed in&amp;#010 will already have been converted to the specified type, if possible.&amp;#010&amp;#010" name="condition" type="method" definingClass="class:Validator">
<params description="FormItem or DataSourceField on which this                                           validator was declared.  NOTE: FormItem will not&amp;#010                                           be available during a save performed without a&amp;#010                                           form (eg programmatic save) or if the field &amp;#010                                           is not available in the form." optional="false" name="item" type="DataSourceField or FormItem">
</params>
<params description="Validator declaration from eg                              ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}." optional="false" name="validator" type="Validator">
</params>
<params description="value to validate" optional="false" name="value" type="any">
</params>
<returns description="whether the value passed validation.  True for passed, false for fail." type="boolean"></returns>
</docItem>
<docItem ref="attr:FormItem.showOverIcons" flags="IRWA" description="If we're showing icons, should we change their image source to the appropriate &lt;i&gt;over&lt;/i&gt;&amp;#010  source when the user rolls over (or puts focus onto) them?  Can be overridden on a per&amp;#010  icon basis by the formItemIcon &lt;code&gt;showOver&lt;/code&gt; property." name="showOverIcons" valueType="boolean" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:ImgTab.showFocused" flags="IRW" description="Should we visibly change state when the tab recieves keyboard focus?" name="showFocused" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgTab">
</docItem>
<docItem ref="class:RowSpacerItem" description="Form item that renders as a blank row in the form layout.&lt;br&gt;&amp;#010 Set ${isc.DocUtils.linkForRef('attr:RowSpacerItem.startRow')} to &lt;code&gt;false&lt;/code&gt; to create a rowSpacer that simply&amp;#010 takes up every remaining column in the current row rather than starting a new row." name="RowSpacerItem" type="class">
    <attrs>attr:RowSpacerItem.showTitle</attrs>
    <attrs>attr:RowSpacerItem.colSpan</attrs>
    <attrs>attr:RowSpacerItem.startRow</attrs>
    <attrs>attr:RowSpacerItem.endRow</attrs>
</docItem>
<docItem ref="attr:ListGrid.sorterDefaults" flags="IRA" description="Defaults to apply to the corner sort button. To modify this object, use&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','ListGrid.changeDefaults()')} rather than replacing with an&amp;#010 entirely new object." name="sorterDefaults" valueType="object" defaultValue="{...}" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Label.dynamicContents" flags="IRWA" description="Dynamic contents allows the contents string to be treated as a simple, but powerful&amp;#010 template.  When this attribute is set to true, expressions of the form \${arbitrary JS&amp;#010 here} are replaced by the result of the evaluation of the JS code inside the curly&amp;#010 brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation&amp;#010 of the expressions in the contents string you can call markForRedraw() on the canvas.&amp;#010 &lt;p&gt;&amp;#010 You can use this feature to build some simple custom components. For example, let's say&amp;#010 you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do&amp;#010 this by observing the valueChanged() method on the slider and calling setContents() on&amp;#010 your canvas with the new string or you can set the contents of the canvas to something&amp;#010 like:&amp;#010 &lt;p&gt;&lt;code&gt;&amp;#010 &quot;The slider value is \${sliderInstance.getValue()}.&quot;&amp;#010 &lt;/code&gt;&lt;p&gt;&amp;#010 Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider&amp;#010 and call canvas.markForRedraw() in that observation.  This approach is cleaner than&amp;#010 setContents() when the Canvas is aggregating several values or dynamic expressions.&amp;#010 Like so:&amp;#010 &lt;p&gt;&amp;#010 &lt;pre&gt;&amp;#010 Slider.create({&amp;#010     ID: &quot;mySlider&quot;&amp;#010 });&amp;#010&amp;#010 Canvas.create({&amp;#010     ID: &quot;myCanvas&quot;,&amp;#010     dynamicContents: true,&amp;#010     contents: &quot;The slider value is \${mySlider.getValue()}.&quot;&amp;#010 });&amp;#010     &amp;#010 myCanvas.observe(mySlider, &quot;valueChanged&quot;, &amp;#010                  &quot;observer.markForRedraw()&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 You can embed an arbitrary number of dynamic expressions in the contents string.  The&amp;#010 search and replace is optimized for speed.&amp;#010 &lt;p&gt;&amp;#010 If an error occurs during the evaluation of one of the expressions, a warning is logged&amp;#010 to the ISC Developer Console and the error string is embedded in place of the expected&amp;#010 value in the Canvas.&amp;#010 &lt;p&gt;&amp;#010 The value of a function is its return value.  The value of any variable is the same as&amp;#010 that returned by its toString() representation.&amp;#010 &lt;p&gt;&amp;#010 Inside the evalution contentext, &lt;code&gt;this&lt;/code&gt; points to the canvas instance that&amp;#010 has the dynamicContents string as its contents - in other words the canvas instance on&amp;#010 which the template is declared." name="dynamicContents" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Label">
<seeAlso ref="attr:Label.contents">
</seeAlso>
<seeAlso ref="attr:Canvas.dynamicContentsVars">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dynamicContents')}</examples>
    <groups>contents</groups>
</docItem>
<docItem ref="classAttr:Validator.notADecimal" flags="IRA" description="Default error message to display when standard &lt;code&gt;isFloat&lt;/code&gt; type validator&amp;#010  returns false." name="notADecimal" valueType="string" defaultValue="&quot;Must be a valid decimal.&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:ValuesManager.getValue" flags="" description=" Returns the value for some field.&amp;#010" name="getValue" type="method" definingClass="class:ValuesManager">
<params description="Which value to be returned" optional="false" name="fieldName" type="string">
</params>
<returns description="current value of the appropriate field" type="any"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="class:ResultTree" description="ResultTrees are an implementation of the ${isc.DocUtils.linkForRef('class:Tree')} API, used to handle hierarchical&amp;#010  data, whose nodes are DataSource records which are retrieved from a server." name="ResultTree" type="class">
    <methods>method:ResultTree.invalidateCache</methods>
    <methods>method:ResultTree.dataArrived</methods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:ResultTree.dataSource</attrs>
    <attrs>attr:ResultTree.loadDataOnDemand</attrs>
    <attrs>attr:ResultTree.defaultIsFolder</attrs>
    <attrs>attr:ResultTree.updateCacheFromRequest</attrs>
    <attrs>attr:ResultTree.disableCacheSync</attrs>
</docItem>
<docItem ref="attr:PickList.animatePickList" flags="IRWA" description="If true, when the pickList is shown, it will be shown via an animated reveal effect" name="animatePickList" valueType="boolean" defaultValue="null" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="attr:Window.minimizeButton" flags="R" description="ImgButton shown in the header that will minimize this Window by calling ${isc.DocUtils.linkForRef('method:Window.minimize')}." name="minimizeButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="method:EBay.setAuthToken" flags="" description="&amp;#010 eBay web services require an authentication token to be passed with every request.  You&amp;#010 can obtain a token from &lt;a href='http://developer.ebay.com/' onclick=&quot;window.open('http://developer.ebay.com/');return false;&quot;&gt;http://developer.ebay.com/&lt;/a&gt;.  Before using any&amp;#010 eBay web services, call this method to set the token provided to you by eBay.&amp;#010 &amp;#010" name="setAuthToken" type="method" definingClass="class:EBay">
<params description="Your authToken, provided to you by eBay." optional="false" name="authToken" type="string">
</params>
</docItem>
<docItem ref="method:Canvas.hiliteCharacter" flags="A" description="			Given a string and a character, hilite the first occurrance of the character in the&amp;#010          string (if it occurs), preferring uppercase to lowercase.&amp;#010&amp;#010" name="hiliteCharacter" type="method" definingClass="class:Canvas">
<params description="String to return with hilited character" optional="false" name="string" type="string">
</params>
<params description="Character to hilite" optional="false" name="character" type="character">
</params>
<params description="Prefix to apply to hilighted character - defaults to                                      &quot;&amp;lt;span style='text-decoration:underline;'&amp;gt;&quot;" optional="true" name="hilitePrefix" type="string">
</params>
<params description="Suffix to apply to hiliteed character - defaults to                                          &quot;&amp;lt;/span&amp;gt;&quot;" optional="true" name="hiliteSuffix" type="string">
</params>
<returns description="The string passed in, with the first occurrance of the hilite                          character enclosed by the 'hilitePrefix' and 'hiliteSuffix'" type="string"></returns>
    <groups>utils</groups>
</docItem>
<docItem ref="type:CSSStyleName" description="CSS class name to apply to some HTML element on this page. This is a string that should&amp;#010 match the css class defined for the page in an external stylesheet or in inline &amp;#010 html &amp;lt;STYLE&amp;gt; tags.&amp;#010 &lt;P&gt;&amp;#010 As a general rule, wherever it is possible to provide a CSS styleName (such as&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.styleName')} or ${isc.DocUtils.linkForRef('attr:Button.baseStyle')}, your CSS style can specify border,&amp;#010 margins, padding, and any CSS attributes controlling background or text styling.  You&amp;#010 should not specify any CSS properties related to positioning, clipping, sizing or&amp;#010 visibility (such as &quot;overflow&quot;, &quot;position&quot;, &quot;display&quot;, &quot;visibility&quot; and &quot;float&quot;), using&amp;#010 the SmartClient APIs for this kind of control.&amp;#010 &lt;P&gt;&amp;#010 Because text wrapping cannot be consistently controlled cross-browser from CSS alone,&amp;#010 you should use SmartClient properties such as ${isc.DocUtils.linkForRef('attr:Button.wrap')} instead of the&amp;#010 corresponding CSS properties, when provided.&amp;#010 &lt;P&gt;&amp;#010 Content contained within SmartClient components can use arbitrary CSS, with the &amp;#010 caveat that the content should be tested on all supported browsers, just as content&amp;#010 outside of SmartClient must be." name="CSSStyleName" type="type">
    <examples>${isc.DocUtils.linkForExampleId('consistentSizing')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:FormItem.isDrawn" flags="" description=" Returns true if this item has been written out into the DOM.&amp;#010&amp;#010" name="isDrawn" type="method" definingClass="class:FormItem">
    <groups>drawing</groups>
</docItem>
<docItem ref="classMethod:Class.setInstanceProperty" flags="" description="&amp;#010	Sets a named property from the instance defaults for this object.&amp;#010&amp;#010" name="setInstanceProperty" type="classMethod" definingClass="class:Class">
<params description="name of the property to return" optional="false" name="property" type="string">
</params>
<params description="value to set to" optional="false" name="value" type="any">
</params>
</docItem>
<docItem ref="attr:Toolbar.buttonConstructor" flags="IRWA" description="Default constructor for toolbar items." name="buttonConstructor" valueType="Class" defaultValue="Button" type="attr" definingClass="class:Toolbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.cellIdProperty" flags="IR" description="Name of the property in a cell record that holds it's unique ID.  Note cell record IDs are&amp;#010 optional." name="cellIdProperty" valueType="id" defaultValue="&quot;ID&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:MenuItem.enableIf" flags="IR" description="A string of script that is evaluated to a boolean value for the item's enabled property&amp;#010 whenever the menu is shown or a shortcut key is pressed.&amp;#010 &lt;p&gt;&amp;#010 If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.enabled')} instead." name="enableIf" valueType="expression" defaultValue="null" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('menuDynamicItems')}</examples>
    <groups>dynamicMenuItem</groups>
</docItem>
<docItem ref="attr:OperationBinding.dataProtocol" flags="IR" description="Controls the format in which inputs are sent to the dataURL.&amp;#010 &lt;p&gt;&amp;#010 When a DataSource operation such as fetchData() is invoked on this DataSource or a component&amp;#010 bound to this DataSource, the data passed to the operation, if any, will be sent to the&amp;#010 &lt;code&gt;dataURL&lt;/code&gt;.  The &lt;code&gt;dataProtocol&lt;/code&gt; property controls the format in&amp;#010 which the data is sent: SOAP message, HTTP GET or POST of parameters, etc.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;dataProtocol&lt;/code&gt; property need not be set for a DataSource with a WebService&amp;#010 ( ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is set), in this case, SOAP messaging is used by&amp;#010 default.&amp;#010 &lt;P&gt;&amp;#010 NOTE: when ${isc.DocUtils.linkForRef('attr:OperationBinding.dataFormat')} is &quot;iscServer&quot;, &lt;code&gt;dataProtocol&lt;/code&gt; is not consulted.&amp;#010 Instead, SmartClient uses a proprietary wire format to communicate with the SmartClient&amp;#010 server, and the server-side DSRequest and DSResponse objects should be used to access&amp;#010 request data and form responses." name="dataProtocol" valueType="DSProtocol" defaultValue="&quot;getParams&quot;" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="type:DSProtocol">
</seeAlso>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:Array.containsProperty" flags="" description="  Determine whether this array contains any members where the property passed in matches the value&amp;#010  passed in.&amp;#010&amp;#010" name="containsProperty" type="method" definingClass="object:Array">
<params description="property to look for							(object)	key:value pairs to look for" optional="false" name="property" type="string">
</params>
<params description="value to compare against (if property is a string)" optional="true" name="value" type="any">
</params>
<returns description="true if this array contains an object with the appropriate property value" type="boolean"></returns>
    <groups>find</groups>
</docItem>
<docItem ref="attr:Window.hiliteBodyColor" flags="IRW" description="Highlight color for the Window body (shown when the body is flashed)." name="hiliteBodyColor" valueType="string" defaultValue="&quot;#EEEEEE&quot;" type="attr" definingClass="class:Window">
<seeAlso ref="method:Window.flash">
</seeAlso>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="attr:FormItem.cellClassName" deprecated="As of SmartClient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.cellStyle')}" flags="IRW" description="CSS class for a form item's cell in the form layout" name="cellClassName" valueType="CSSStyleName" defaultValue="&quot;formCell&quot;" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.canEditCell" flags="A" description=" Can this cell be edited?&amp;#010 &lt;P&gt;&amp;#010 The default implementation of &lt;code&gt;canEditCell()&lt;/code&gt; respects the various property&amp;#010 settings affecting editability: ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','field.canEdit')} disables editing&amp;#010 for a field, a record with the ${isc.DocUtils.linkForRef('attr:ListGrid.recordEditProperty','recordEditProperty')} set to&amp;#010 false is not editable, and disabled records are not editable.&amp;#010 &lt;P&gt;&amp;#010 You can override this method to control editability on a cell-by-cell basis.  For example,&amp;#010 if you had a grid that allows editing of &quot;orders&quot;, and you had a field &quot;shipDate&quot; that is&amp;#010 normally editable, but should not be editable if the order is already &quot;complete&quot;, you might&amp;#010 implement &lt;code&gt;canEditCell()&lt;/code&gt; as follows:&amp;#010 &lt;P&gt;&amp;#010 &lt;pre&gt;&amp;#010   isc.ListGrid.create({&amp;#010       ...&amp;#010       canEditCell : function (rowNum, colNum) {&amp;#010           var record = this.getRecord(rowNum),&amp;#010               fieldName = this.getFieldName(colNum);&amp;#010           if (fieldName == &quot;shipDate&quot; &amp;&amp; &amp;#010               record.orderStatus == &quot;complete&quot;) &amp;#010           {&amp;#010               return false;   &amp;#010           }&amp;#010           // use default rules for all other fields&amp;#010           return this.Super(&quot;canEditCell&quot;, arguments);&amp;#010       }&amp;#010   });&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 Notes on providing custom implementations:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; In order to allow complete control over editing, &lt;code&gt;canEditCell()&lt;/code&gt; is called&amp;#010 very frequently.  If you see delays on row to row navigation, check that your implementation&amp;#010 is efficient&amp;#010 &lt;li&gt; If you change the editability of a cell on the fly, for example, during &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.editorExit')} on another cell, call refreshCell() to show or hide the editor&amp;#010 &lt;li&gt; If this ListGrid allows new records to be created, &lt;code&gt;canEditCell()&lt;/code&gt; may be&amp;#010 called when there is no record available.  The values input so far by the user are available&amp;#010 via ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')}. &amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="canEditCell" type="method" definingClass="class:ListGrid">
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="Whether to allow editing this cell" type="boolean"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:FormItem.hoverAlign" flags="IRW" description="Text alignment  for text displayed in this item's hover canvas, if shown." name="hoverAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverAlign">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="class:Img" description="The Img widget class implements a simple widget that displays a single image." name="Img" type="class">
    <methods>method:Img.setImageType</methods>
    <methods>method:Img.setSrc</methods>
    <methods>method:Img.resetSrc</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:Img.name</attrs>
    <attrs>attr:Img.src</attrs>
    <attrs>attr:Img.activeAreaHTML</attrs>
    <attrs>attr:Img.imageType</attrs>
    <attrs>attr:Img.imageHeight</attrs>
    <attrs>attr:Img.imageWidth</attrs>
    <attrs>attr:Img.size</attrs>
    <attrs>attr:Img.showTitle</attrs>
    <examples>${isc.DocUtils.linkForExampleId('img')}</examples>
</docItem>
<docItem ref="attr:ListGrid.arrowKeyAction" flags="IRWA" description="Action to perform when the listGrid has keyboard focus (but not editing focus) and a user&amp;#010 presses the up or down arrow key. Possible values are:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;select&lt;/code&gt; : select the next row in the list (calls &lt;code&gt;recordClick&lt;/code&gt; handler)&lt;/li&gt;&amp;#010 &lt;li&gt;&lt;code&gt;focus&lt;/code&gt; : move focus to the next row in the list without changing the selection&lt;/li&gt;&amp;#010 &lt;li&gt;&lt;code&gt;activate&lt;/code&gt; : select and activate the next row in the list (calls&amp;#010  &lt;code&gt;recordDoubleClick&lt;/code&gt; handler)&lt;/li&gt;&amp;#010 &lt;li&gt;&lt;code&gt;none&lt;/code&gt; : no action&lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="arrowKeyAction" valueType="string" defaultValue="&quot;select&quot;" type="attr" definingClass="class:ListGrid">
    <groups>events</groups>
</docItem>
<docItem ref="attr:ListGrid.freezeOnRightText" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the&amp;#010 title for the menu item to freeze fields on the right of the scrollable body." name="freezeOnRightText" valueType="string" defaultValue="&quot;Freeze on right&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:HTMLFlow.transformHTML" flags="" description=" Translates html content into a form most suitable for rendering inside this component.&amp;#010" name="transformHTML" type="method" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="method:DynamicForm.getValidatedValues" flags="" description=" Call ${isc.DocUtils.linkForRef('method:DynamicForm.validate')} to check for validation errors. If no errors are found,&amp;#010 return the current values for this form, otherwise return null.&amp;#010" name="getValidatedValues" type="method" definingClass="class:DynamicForm">
<returns description="current values or null if validation failed." type="object|null"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="object:ImgProperties" description="A set of properties that can be used to create an image." name="ImgProperties" type="object">
    <treeLocation>Client Reference/Foundation/Canvas</treeLocation>
    <attrs>attr:ImgProperties.src</attrs>
    <attrs>attr:ImgProperties.width</attrs>
    <attrs>attr:ImgProperties.height</attrs>
    <attrs>attr:ImgProperties.name</attrs>
    <attrs>attr:ImgProperties.extraStuff</attrs>
    <attrs>attr:ImgProperties.imgDir</attrs>
</docItem>
<docItem ref="attr:FormItem.validateOnChange" flags="IRW" description="If true, form items will be validated when each item's &quot;change&quot; handler is fired&amp;#010 as well as when the entire form is submitted or validated.&amp;#010 &lt;p&gt;&amp;#010 Note that this property can also be set at the form, level;&amp;#010 If true at either level the valiator will be fired on change - displaying errors and&amp;#010 rejecting the change on validation failure." name="validateOnChange" valueType="boolean" defaultValue="false" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.validateOnChange">
</seeAlso>
    <groups>changeHandling</groups>
</docItem>
<docItem ref="attr:ResultTree.defaultIsFolder" flags="IR" description="Controls whether nodes are assumed to be folders or leaves by default.&amp;#010 &lt;P&gt;&amp;#010 Nodes that have children or have the ${isc.DocUtils.linkForRef('isFolderProperty')} set to true will always be&amp;#010 considered folders.  Other nodes will be considered folders or leaves by default according&amp;#010 to this setting.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;defaultIsFolder&lt;/code&gt; is unset, the ResultTree will automatically set it to&amp;#010 match the value of ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand')}.  This means that, when using&amp;#010 folder-by-folder load on demand (&lt;code&gt;loadDataOnDemand:true&lt;/code&gt;), by default a newly&amp;#010 loaded node will be considered to be a folder that has not loaded its children yet.  &amp;#010 &lt;P&gt;&amp;#010 When not using folder-by-folder load on demand, by default a newly loaded node is&amp;#010 considered a leaf.  If you set &lt;code&gt;defaultIsFolder:true&lt;/code&gt; explicitly, by default&amp;#010 a newly loaded node is considered to be a folder with no children.&amp;#010 &lt;P&gt; &amp;#010 See ${isc.DocUtils.linkForRef('method:Tree.isFolder')} for details on how to explicitly mark nodes as folders or leaves." name="defaultIsFolder" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ResultTree">
<seeAlso ref="attr:TreeGrid.loadDataOnDemand">
</seeAlso>
</docItem>
<docItem ref="attr:SectionItem.itemIds" flags="IR" description="IDs of the items that should be considered a member of this section." name="itemIds" valueType="Array of ID" defaultValue="null" type="attr" definingClass="class:SectionItem">
</docItem>
<docItem ref="attr:GridRenderer.showAllColumns" flags="IRA" description="Whether all columns should be drawn all at once, or only columns visible in the viewport.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Drawing all columns causes longer initial rendering time, but allows smoother horizontal&amp;#010 scrolling.  With a very large number of columns, showAllColumns will become too slow." name="showAllColumns" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>performance</groups>
</docItem>
<docItem ref="group:treeDataBinding" title="Tree DataBinding" description="The SmartClient ${isc.DocUtils.linkForRef('class:TreeGrid')} component is a visual representation of a tree and requires&amp;#010 a ${isc.DocUtils.linkForRef('class:Tree')} or ${isc.DocUtils.linkForRef('class:ResultTree')} datatype passed via the ${isc.DocUtils.linkForRef('attr:TreeGrid.data')} attribute to&amp;#010 initialize the tree view.  The ${isc.DocUtils.linkForRef('class:Tree')} datatype is used when you want to provide all of&amp;#010 the tree nodes in one shot at initialization time.  The ${isc.DocUtils.linkForRef('class:ResultTree')} datatype is used&amp;#010 when you want portions of the tree to be loaded on demand from the server.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Providing all data to the Tree at creation&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 The simplest mechanism by which to initialize a Tree is to simply provide all the data&amp;#010 up-front when the Tree itself is created.  Depending on the format of your tree data, this&amp;#010 can be done by setting ${isc.DocUtils.linkForRef('attr:Tree.root')} or ${isc.DocUtils.linkForRef('attr:Tree.data')}.  This functionality is provided&amp;#010 by the ${isc.DocUtils.linkForRef('class:Tree')} class.&amp;#010 &lt;p&gt;&amp;#010 For examples of this type of databinding, see the following SDK examples:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;a href='/examples/components/treeGrid_init.html' onclick=&quot;window.open('/examples/components/treeGrid_init.html');return false;&quot;&gt;TreeGrid Initialization Example&lt;/a&gt;&amp;#010 &lt;li&gt;&lt;a href='/examples/server_integration/#jstlTree' onclick=&quot;window.open('/examples/server_integration/#jstlTree');return false;&quot;&gt;TreeGrid Initialization with JSTL&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Loading Tree nodes on demand&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 In this mode, tree nodes are loaded on-demand the first time a user expands a folder.  This&amp;#010 approach is necessary for large trees.  This functionality is provided by the&amp;#010 ${isc.DocUtils.linkForRef('class:ResultTree')} class.&amp;#010 &lt;p&gt;&amp;#010 ResultTrees require that every node in the tree have an ${isc.DocUtils.linkForRef('attr:Tree.idField','id')} that is&amp;#010 unique tree-wide.  When the user expands a folder whose contents have not yet been loaded&amp;#010 from the server (or you programmatically call openFolder() on such a node), the client&amp;#010 automatically sends a ${isc.DocUtils.linkForRef('class:DSRequest')} to the server to ask for all immediate children of&amp;#010 that node.  The ${isc.DocUtils.linkForRef('class:DSRequest')} criteria will specify the id of the node for which children&amp;#010 are being requested via the &lt;code&gt;parentId&lt;/code&gt; property (see ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}).&amp;#010 This client is asking the server: &quot;give me all nodes whose parentId is the id of this&amp;#010 node&quot;.  &amp;#010 &lt;P&gt;&amp;#010 If there are no pre-existing node ids in the dataset you are loading, you must generate node&amp;#010 ids (because the client needs some way to identify nodes when talking to the server).&amp;#010 Generally a node id should contain whatever information is required to fetch the node and&amp;#010 it's children on the server.  One typical approach is to use the path to the node as a node&amp;#010 id.  For XML datasets in particular, the path may be a valid XPath, so that node lookup is&amp;#010 just applying an XPath to an XMLDocument.&amp;#010 &lt;p&gt;&amp;#010 ${isc.DocUtils.linkForRef('class:ResultTree')}s are created for you by the ${isc.DocUtils.linkForRef('class:TreeGrid')} when you set&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.dataSource')}, but you can pass an initial dataset to a databound TreeGrid by&amp;#010 setting ${isc.DocUtils.linkForRef('attr:TreeGrid.initialData')}.  The ${isc.DocUtils.linkForRef('attr:Tree.idField')} is derived from the dataSource&amp;#010 you provide to the TreeGrid - the first field marked as&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey')}:true becomes the idField of the ResultTree.&amp;#010 The ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')} is found by looking for a field that has a&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')} property pointing to the idField.&amp;#010 &lt;P&gt;&amp;#010 If you do not provide ${isc.DocUtils.linkForRef('attr:TreeGrid.initialData')}, the first DSRequest you receive will be a&amp;#010 request for the nodes under root.  The id of the root node of the tree is the value of the&amp;#010 &lt;code&gt;rootValue&lt;/code&gt; attribute on the ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')} of the Tree DataSource. &amp;#010 &lt;p&gt;&amp;#010 For examples of this type of databinding, see the following SDK examples:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;a href='/examples/databinding/tree_databinding.jsp' onclick=&quot;window.open('/examples/databinding/tree_databinding.jsp');return false;&quot;&gt;TreeGrid DataBinding Example&lt;/a&gt;&amp;#010 &lt;li&gt;&lt;a href='/examples/server_integration/#xml2JSLOD' onclick=&quot;window.open('/examples/server_integration/#xml2JSLOD');return false;&quot;&gt;TreeGrid XML DataBinding&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Multi-Level load on demand&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Although the ResultTree's DSRequests ask for the immediate children of a node only, you are&amp;#010 free to return multiple levels of children.  This can be done by simply returning a flat&amp;#010 list of descendents with valid id's and parentId's, exactly as though you were initializing&amp;#010 a multi-level tree via ${isc.DocUtils.linkForRef('attr:Tree.data')}.  &amp;#010 &lt;P&gt;&amp;#010 Note that when receiving multiple levels of children, the ResultTree's assumption is that&amp;#010 if any children are loaded for a parent, then that parent is considered fully loaded.&amp;#010 &lt;P&gt;&amp;#010 When loading children for a given parent node, the ResultTree calls&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} on its DataSource.  For custom code that may need to reference&amp;#010 the parentNode or tree in some way, the parent node whose children are being loaded is&amp;#010 available on the dsRequest instance in the DataSource flow as dsRequest.parentNode, where it&amp;#010 can be inspected during ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}." name="treeDataBinding" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
</docItem>
<docItem ref="method:Canvas.setBottom" flags="" description=" Resizes the widget vertically to position its bottom edge at the specified coordinate.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()&amp;#010 instead&amp;#010&amp;#010" name="setBottom" type="method" definingClass="class:Canvas">
<params description="new bottom coordinate" optional="false" name="bottom" type="number">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DateChooser.baseNavButtonStyle" flags="IRW" description="CSS style to apply to navigation buttons and date display at the top of the&amp;#010 component. If null, the CSS style specified in ${isc.DocUtils.linkForRef('attr:DateChooser.baseButtonStyle')} is used." name="baseNavButtonStyle" valueType="string" defaultValue="null" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:ValuesManager.addMember" flags="" description="&amp;#010 Add a new member form to this valuesManager.&amp;#010 This form's values will subsequently be available through this valuesManager.  &lt;br&gt;&amp;#010 Note on pre-existant values:&amp;#010 If the valuesManager has a value specified for some field, for which the member form has&amp;#010 an item, this value will be applied to the member form.  This is true whether the item&amp;#010 has a value or not.&lt;br&gt;&amp;#010 However if the member form has a value for some field, and the ValuesManager does not&amp;#010 have a specified value for the same field, we allow the valuesManager to pick up the &amp;#010 value from the member form.    &amp;#010&amp;#010" name="addMember" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:ValuesManager.addMembers">
</seeAlso>
<params description="form (or ID of form) to add to                                           this valuesManager as a member." optional="false" name="member" type="DynamicForm | String">
</params>
    <groups>members</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:Button.state" description="Current &quot;state&quot; of this widget. StatefulCanvases will have a different appearance based&amp;#010 on their current state. By default this is handled by changing the css className applied to&amp;#010 the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is&amp;#010 done.&lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the &amp;#010 appearance may also be updated by changing the src of the rendered image. See&amp;#010 ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL &amp;#010 is modified to reflect the state of the widget in this case." name="state" valueType="State" defaultValue="&quot;&quot;" definingClass="class:Button">
    <getter>getState</getter>
    <setter>setState</setter>
<seeAlso ref="type:State">
</seeAlso>
<seeAlso ref="group:state">
</seeAlso>
    <groups>state</groups>
</docItem>
<docItem ref="method:TreeGrid.setNodeIcon" flags="" description=" Set the icon for a particular treenode to a specified URL&amp;#010&amp;#010" name="setNodeIcon" type="method" definingClass="class:TreeGrid">
<params description="tree node" optional="false" name="node" type="TreeNode">
</params>
<params description="path to the resource" optional="false" name="icon" type="SCImgUrl">
</params>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:ListGrid.emptyMessage" flags="IRW" description="The string to display in the body of a listGrid with an empty data array, if&amp;#010 showEmptyMessage is true." name="emptyMessage" valueType="string" defaultValue="&quot;No items to show.&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.showEmptyMessage">
</seeAlso>
<seeAlso ref="attr:ListGrid.emptyMessageStyle">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('emptyGrid')}</examples>
    <groups>emptyMessage</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="group:observation" title="Observation" description="Observation is the ability to take an action whenever a method is called." name="observation" type="group">
    <refs>method:Class.observe</refs>
    <refs>method:Class.ignore</refs>
    <refs>method:Class.isObserving</refs>
</docItem>
<docItem ref="attr:ListGrid.canDragSelect" flags="IRW" description="If this property is true, users can drag the mouse to select several rows or cells.&amp;#010  This is mutually exclusive with rearranging rows or cells by dragging." name="canDragSelect" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('dragListSelect')}</examples>
    <groups>selection</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Layout.layoutMargin" description="Space outside of all members. This attribute, along with ${isc.DocUtils.linkForRef('attr:Layout.layoutLeftMargin')} &amp;#010 and related properties does not have a true setter method.&lt;br&gt;&amp;#010 It may be assigned directly at runtime. After setting the property, &amp;#010 ${isc.DocUtils.linkForRef('method:Layout.setLayoutMargin')} may be called with no arguments to reflow the layout." name="layoutMargin" valueType="integer" defaultValue="null" definingClass="class:Layout">
    <setter>setLayoutMargin</setter>
<seeAlso ref="attr:Layout.layoutLeftMargin">
</seeAlso>
<seeAlso ref="attr:Layout.layoutRightMargin">
</seeAlso>
<seeAlso ref="attr:Layout.layoutBottomMargin">
</seeAlso>
<seeAlso ref="attr:Layout.layoutTopMargin">
</seeAlso>
<seeAlso ref="attr:Layout.paddingAsLayoutMargin">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('userSizing')}</examples>
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="classMethod:DataSource.getDataSource" flags="" description=" Lookup a DataSource by ID.&amp;#010&amp;#010" name="getDataSource" type="classMethod" definingClass="class:DataSource">
<params description="DataSource ID" optional="false" name="ID" type="identifier">
</params>
<returns description="the DataSource with this ID, if loaded, otherwise null." type="DataSource"></returns>
</docItem>
<docItem ref="attr:DateChooser.nextYearIcon" flags="IRW" description="Icon for the next year button" name="nextYearIcon" valueType="URL" defaultValue="&quot;[SKIN]doubleArrow_right.gif&quot;" type="attr" definingClass="class:DateChooser">
<seeAlso ref="attr:DateChooser.showDoubleYearIcon">
</seeAlso>
</docItem>
<docItem ref="classMethod:Date.setShortDisplayFormat" flags="" description=" Set the default short format for dates. After calling this method, subsequent calls to &amp;#010 ${isc.DocUtils.linkForRef('method:Date.toShortDate')} will returna  string formatted according to this format &amp;#010 specification. Note that this will be the standard short date format used by&amp;#010 SmartClient components.&lt;br&gt;&amp;#010 The &lt;code&gt;format&lt;/code&gt; parameter may be either a ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} string, or &amp;#010 a function. If passed a function, this function will be executed in the scope of the Date&amp;#010 and should return the formatted string.&lt;br&gt;&amp;#010 Initial default shortDateFormat is &lt;code&gt;&quot;toUSShortDate&quot;&lt;/code&gt;.&amp;#010&amp;#010" name="setShortDisplayFormat" type="classMethod" definingClass="class:Date">
<params description="new formatter" optional="false" name="format" type="DateDisplayFormat | function">
</params>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:FusionChart.getDataColor" flags="" description=" Get a color from the ${isc.DocUtils.linkForRef('attr:FusionChart.dataColors')} Array, or white (&quot;FFFFFF&quot;) if the index is beyond the&amp;#010 end of the Array.  &amp;#010 &lt;P&gt;&amp;#010 Override to provide a dynamic color generation scheme.&amp;#010&amp;#010" name="getDataColor" type="method" definingClass="class:FusionChart">
<params description="index of the visual element to be colored" optional="false" name="index" type="Number">
</params>
<returns description="color value in hexadecimal RRGGBB format (with no leading '#')" type="String"></returns>
</docItem>
<docItem ref="attr:ListGrid.alternateRecordStyles" flags="IRW" description="Whether alternating rows should be drawn in alternating styles, in order to create a &quot;ledger&quot;&amp;#010 effect for easier reading.  If enabled, the cell style for alternate rows will have &quot;Dark&quot;&amp;#010 appended to it." name="alternateRecordStyles" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('gridCells')}</examples>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="method:ButtonItem.click" flags="" description=" Called when a ButtonItem is clicked on.&amp;#010&amp;#010" name="click" type="method" definingClass="class:ButtonItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="method:CellSelection.deselectCellList" flags="" description="			deselect an array of cells&amp;#010&amp;#010" name="deselectCellList" type="method" definingClass="class:CellSelection">
<params description="listArray of cells to deselect. Each cell can be specified                                      as a 2 element array &lt;code&gt;[rowNum, colNum]&lt;/code&gt;" optional="true" name="" type="array">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Canvas.dragIntersectStyle" flags="IRWA" description="This indicates how the system will test for droppable targets: either by intersection&amp;#010      with the mouse or intersection with the rectangle of the dragMoveTarget." name="dragIntersectStyle" valueType="DragIntersectStyle" defaultValue="EH.INTERSECT_WITH_MOUSE" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Slider.minValueLabel" flags="IRW" description="The text displayed in the label for the minimum value of the slider. If left as null, then&amp;#010 slider.minValue will be displayed." name="minValueLabel" valueType="String" defaultValue="null" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.showRange">
</seeAlso>
<seeAlso ref="attr:Slider.minValue">
</seeAlso>
</docItem>
<docItem ref="attr:FormItemIcon.showFocusedWithIcon" flags="IRWA" description="If this icon will be updated to show focus (see ${isc.DocUtils.linkForRef('attr:FormItemIcon.showFocused')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showFocusedIcons')}), this property governs whether the focused state should&amp;#010 be shown when the item as a whole recieves focus or just if the icon recieves focus.&amp;#010 If this property is unset, default behavior is to show focused state when the item&amp;#010 recieves focus." name="showFocusedWithIcon" valueType="boolean" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.showFocusedIcons">
</seeAlso>
<seeAlso ref="attr:FormItemIcon.showFocused">
</seeAlso>
    <groups>formIcons</groups>
</docItem>
<docItem ref="class:EBay" description="WebService object representing the eBay trading web service." name="EBay" type="class">
    <methods>method:EBay.setAuthToken</methods>
    <methods>method:EBay.setSandboxToken</methods>
    <methods>method:EBay.setProductionToken</methods>
    <methods>method:EBay.setUseProduction</methods>
    <treeLocation>Client Reference/Connectors</treeLocation>
</docItem>
<docItem ref="method:FormItem.iconClick" flags="" description="      StringMethod.&amp;#010      Default action to fire when the user clicks on a form item icon. May be overridden&amp;#010      by setting &lt;code&gt;click&lt;/code&gt; on the form item icon directly.&amp;#010" name="iconClick" type="method" definingClass="class:FormItem">
<params description="a pointer to this item's form" optional="false" name="form" type="DynamicForm">
</params>
<params description="a pointer to this form item" optional="false" name="item" type="FormItem">
</params>
<params description="a pointer to the icon that recieved the click event." optional="false" name="icon" type="FormItemIcon">
</params>
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:Button.setDisabled" flags="" description=" Enable or disable this object&amp;#010" name="setDisabled" type="method" definingClass="class:Button">
<params description="true if this widget is to be disabled" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
    <groups>state</groups>
</docItem>
<docItem ref="attr:GridHilite.style" flags="IR" description="CSS text to be applied to cells where this hilite is applied, for example,&amp;#010 &quot;background-color:#FF0000&quot;" name="style" valueType="CSSText" defaultValue="null" type="attr" definingClass="object:GridHilite">
</docItem>
<docItem ref="attr:Label.valign" flags="IRW" description="Vertical alignment of label text. See VerticalAlignment type for details." name="valign" valueType="VerticalAlignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:Label">
    <groups>positioning</groups>
</docItem>
<docItem ref="attr:RPCRequest.sendNoQueue" flags="IRWA" description="When set to true, this request is sent to the server immediately, bypassing any current queue." name="sendNoQueue" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="group:tabBarControls" name="tabBarControls" type="group">
    <refs>attr:Tab.pickerTitle</refs>
    <refs>attr:TabSet.tabBarControls</refs>
    <refs>attr:TabSet.showTabScroller</refs>
    <refs>attr:TabSet.showTabPicker</refs>
    <refs>attr:TabSet.animateTabScrolling</refs>
    <refs>attr:TabSet.scrollerButtonSize</refs>
    <refs>attr:TabSet.pickerButtonSize</refs>
</docItem>
<docItem ref="method:LinkItem.setLinkTitle" flags="" description=" Method to set the linkTitle for this item&amp;#010" name="setLinkTitle" type="method" definingClass="class:LinkItem">
<params description="new linkTitle for this item" optional="false" name="title" type="string">
</params>
</docItem>
<docItem ref="class:TabBar" description="Shows a set of Tabs.  TabBars are automatically created by TabSets and shouldn't be used&amp;#010 directly.  The TabBar is documented for skinning purposes." name="TabBar" type="class">
    <methods>method:TabBar.selectTab</methods>
    <treeLocation>Client Reference/Layout/TabSet</treeLocation>
    <attrs>attr:TabBar.tabs</attrs>
    <attrs>attr:TabBar.breadth</attrs>
    <attrs>attr:TabBar.buttonConstructor</attrs>
    <attrs>attr:TabBar.baseLineThickness</attrs>
    <attrs>attr:TabBar.baseLineSrc</attrs>
    <attrs>attr:TabBar.baseLineCapSize</attrs>
    <attrs>attr:TabBar.defaultTabSize</attrs>
</docItem>
<docItem ref="classMethod:isA.Function" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a Function object?&amp;#010&amp;#010" name="Function" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Function" type="boolean"></returns>
</docItem>
<docItem ref="method:Log.logDebug" flags="" description=" Log a message at &quot;debug&quot; priority&amp;#010 &lt;P&gt;&amp;#010 A method named log&lt;i&gt;Priority&lt;/i&gt; exists for each priority level, on every ISC Class and&amp;#010 instance of an ISC Class.  Messages logged on a Class or instance have a default&amp;#010 category of the classname.  Messages logged on an instance will also automatically&amp;#010 incorporate the instance ID.  General best practice is to call logDebug() et al as&amp;#010 &quot;this.logDebug&quot; whenever &quot;this&quot; is an instance, or as &quot;Log.logDebug&quot; otherwise.&amp;#010&amp;#010" name="logDebug" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.echo" description="for dumping datastructures to the log"></seeAlso>
<seeAlso ref="classMethod:Log.setPriority" description="for controlling what messages appear in the log"></seeAlso>
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="method:ListGrid.rowHasErrors" flags="" description=" Does the specified row have unresolved errors?&amp;#010" name="rowHasErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.hasErrors">
</seeAlso>
<seeAlso ref="method:ListGrid.cellHasErrors">
</seeAlso>
<params description="rowNum to check for errors" optional="false" name="rowNum" type="number">
</params>
<returns description="true if there are unresolved errors, false otherwise" type="boolean"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="method:ResultSet.getRange" flags="" description=" Return the items between position start and end, non-inclusive at the end, possibly &amp;#010 containing markers for records that haven't loaded yet.&amp;#010 &lt;P&gt;&amp;#010 Calling getRange for records that have not yet loaded will trigger an asynchronous fetch.  The&amp;#010 returned data will contain the marker value &lt;code&gt;Array.LOADING&lt;/code&gt; as a placeholder for&amp;#010 records being fetched.  If any rows needed to be fetched, &lt;code&gt;dataArrived()&lt;/code&gt; will&amp;#010 fire when they arrive.&amp;#010&amp;#010" name="getRange" type="method" definingClass="class:ResultSet">
<seeAlso ref="classAttr:Array.LOADING">
</seeAlso>
<seeAlso ref="method:ResultSet.dataArrived">
</seeAlso>
<params description="start position" optional="false" name="start" type="number">
</params>
<params description="end position" optional="false" name="end" type="number">
</params>
<returns description="subset of the array from start -&gt; end-1" type="Array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:FormItem.tabIndex" flags="IRW" description="tabIndex for the form item within the form.  Auto-assigned if not specified.&lt;br&gt;&amp;#010 Note: This controls the tab order within the form.&amp;#010 &lt;P&gt;&amp;#010 To specify the tabindex of an item within the page as a whole (not just this form), use&amp;#010 globalTabIndex instead." name="tabIndex" valueType="integer" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>focus</groups>
</docItem>
<docItem ref="attr:Label.iconOrientation" flags="IR" description="If this button is showing an icon should it appear to the left or right of the title?&amp;#010 valid options are &lt;code&gt;&quot;left&quot;&lt;/code&gt; and &lt;code&gt;&quot;right&quot;&lt;/code&gt;." name="iconOrientation" valueType="string" defaultValue="&quot;left&quot;" type="attr" definingClass="class:Label">
    <setter>setIconOrientation</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="classMethod:isA.Interface" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; an interface object?&amp;#010&amp;#010" name="Interface" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Interface Object" type="boolean"></returns>
</docItem>
<docItem ref="attr:Canvas.tabIndex" flags="IRWA" description="If specified this governs the tabIndex of the widget in the page's tab order.&amp;#010 Note that by default SmartClient auto-assigns tab-indices, ensuring focusable widgets&amp;#010 are reachable by tabbing in the order in which they are drawn on the page.&amp;#010 &lt;code&gt;canvas.tabIndex&lt;/code&gt; cannot be set to greater than &amp;#010 ${isc.DocUtils.linkForRef('classAttr:Canvas.TAB_INDEX_FLOOR')} - as we reserve the values above this range for&amp;#010 auto-assigned tab-indices." name="tabIndex" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setTabIndex</setter>
    <groups>focus</groups>
</docItem>
<docItem ref="method:DateChooser.dataChanged" flags="" description=" Method to override or observe in order to be notified when a user picks a date value.&amp;#010 &lt;P&gt;&amp;#010 Has no default behavior (so no need to call Super).&amp;#010 &lt;P&gt;&amp;#010 Use ${isc.DocUtils.linkForRef('method:DateChooser.getData')} to get the current date value.&amp;#010 &amp;#010" name="dataChanged" type="method" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:Tree.getLevel" flags="A" description="&amp;#010 Return the number of levels deep this node is in the tree.  For example, for this tree:&amp;#010 &lt;pre&gt;&amp;#010 root&amp;#010   foo&amp;#010     bar&amp;#010 &lt;/pre&gt;&amp;#010 Calling &lt;code&gt;tree.getLevel(bar)&lt;/code&gt; will return &lt;code&gt;2&lt;/code&gt;. &amp;#010&amp;#010" name="getLevel" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="number of parents the node has" type="number"></returns>
</docItem>
<docItem ref="attr:Layout.dropLineThickness" flags="IRA" description="Thickness, in pixels of the dropLine shown during drag and drop when&amp;#010 ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')} is set to &lt;code&gt;true&lt;/code&gt;.  See the discussion in&amp;#010 ${isc.DocUtils.linkForRef('class:Layout')} for more info." name="dropLineThickness" valueType="number" defaultValue="2" type="attr" definingClass="class:Layout">
<seeAlso ref="class:Layout">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragMove')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="classMethod:isA.ClassObject" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a class object?&amp;#010&amp;#010" name="ClassObject" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Class Object" type="boolean"></returns>
</docItem>
<docItem ref="attr:DynamicForm.requiredTitleSuffix" flags="IRW" description="The string appended to the title of every required item in this form if&amp;#010 highlightRequiredFields is true." name="requiredTitleSuffix" valueType="string" defaultValue="&quot; :&lt;/B&gt;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:Selection.deselectItem" flags="" description=" Deselect a particular item by its position in the list&amp;#010&amp;#010" name="deselectItem" type="method" definingClass="class:Selection">
<params description="index of the item to be selected" optional="false" name="position" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:FormItem.iconVAlign" flags="IRWA" description="How should icons be aligned vertically for this form item." name="iconVAlign" valueType="VerticalAlignment" defaultValue="&quot;bottom&quot;" type="attr" definingClass="class:FormItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Label.align" flags="IRW" description="Horizontal alignment of label text. See Alignment type for details." name="align" valueType="Alignment" defaultValue="Canvas.LEFT" type="attr" definingClass="class:Label">
    <groups>positioning</groups>
</docItem>
<docItem ref="method:Date.toPrettyString" deprecated="As of SmartClient 5.5 use ${isc.DocUtils.linkForRef('method:Date.toShortDate')} instead" flags="" description="			Return this date in the format: &lt;code&gt;MM/DD/YY HH:MM&lt;/code&gt;&amp;#010" name="toPrettyString" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:ListGrid.editFailedCSSText" flags="IRWA" description="Custom CSS text to be applied to cells when editing has failed.&lt;br&gt;&amp;#010  If this listGrid is editable, this css text will be applied to any edited cells for which&amp;#010  validation failed, on top of the base style for the cell.&lt;br&gt;&amp;#010 For further customization of styling for cells that failed editing validation, use&amp;#010 &lt;code&gt;this.editFailedBaseStyle&lt;/code&gt; instead." name="editFailedCSSText" valueType="string" defaultValue="&quot;color:red;border:1px solid red;&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.editFailedBaseStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:FormItem.errorIconWidth" flags="IRW" description="Height of the error icon, if we're showing icons when validation errors occur." name="errorIconWidth" valueType="number" defaultValue="16" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.showErrorIcon">
</seeAlso>
    <groups>errorIcon</groups>
</docItem>
<docItem ref="attr:Canvas.childrenSnapResizeToGrid" flags="IRW" description="If true, causes this canvas's children to snap to its grid when resizing.&amp;#010 This behavior can be overridden on a per-child basis by setting the &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} or &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.snapResizeToGrid','snapResizeToGrid')} value on the child." name="childrenSnapResizeToGrid" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:GridRenderer.getRowSpan" flags="A" description=" Return how many rows this cell should span.  Default is 1. &amp;#010 &lt;P&gt;&amp;#010 NOTE: if using horizontal incremental rendering, &lt;code&gt;getRowSpan()&lt;/code&gt; may be called for&amp;#010 a rowNum &lt;b&gt;in the middle of a spanning cell&lt;/b&gt;, and should return the remaining span from&amp;#010 that rowNum onward.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if a cell spans multiple rows, getCellRecord/Style/etc will be called with the topmost&amp;#010 row coordinates only.&amp;#010&amp;#010" name="getRowSpan" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="number of cells to span" type="number"></returns>
</docItem>
<docItem ref="group:loadModulesTag" title="&amp;lt;isomorphic:loadModules&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; HTML&amp;#010 &lt;p&gt;&amp;#010 This tag works just like ${isc.DocUtils.linkForRef('group:loadISCTag')} except it does not load a skin.  All other&amp;#010 attributes are supported on this tag just as on &lt;code&gt;loadISC&lt;/code&gt;.  This tag is useful if&amp;#010 you have a single &quot;header&quot; JSP that has the &lt;code&gt;loadISC&lt;/code&gt; tag that you then include in other&amp;#010 SmartClient-enabled JSPs that require additional modules.  The JSPs that require additional&amp;#010 modules can then use the &lt;code&gt;loadModules&lt;/code&gt; to load additional SmartClient modules." name="loadModulesTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:FormItem.focus" flags="" description=" Called when this FormItem receives focus.&amp;#010 &amp;#010" name="focus" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="classMethod:Flashlet.flashAvailable" flags="" description=" Is Shockwave flash installed on this browser?&amp;#010" name="flashAvailable" type="classMethod" definingClass="class:Flashlet">
<returns description="true if Flash is installed." type="boolean"></returns>
</docItem>
<docItem ref="class:Timer" description="The Timer class provides a predictable cross-browser system for creating&amp;#010 timed events." name="Timer" type="class">
    <classMethods>classMethod:Timer.setTimeout</classMethods>
    <classMethods>classMethod:Timer.clear</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="attr:ListGrid.showHeaderContextMenu" flags="IR" description="Whether to show a context menu on the header with standard items for showing and hiding&amp;#010 fields." name="showHeaderContextMenu" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.displayHeaderContextMenu">
</seeAlso>
<seeAlso ref="method:ListGrid.getHeaderContextMenuItems">
</seeAlso>
    <groups>gridHeader</groups>
</docItem>
<docItem ref="attr:SpinnerItem.max" flags="IRW" description="Maximum valid value for this item" name="max" valueType="number" defaultValue="null" type="attr" definingClass="class:SpinnerItem">
    <examples>${isc.DocUtils.linkForExampleId('spinnerItem')}</examples>
</docItem>
<docItem ref="method:CubeGrid.getCellCoordinates" flags="" description=" Given a record in this grid, this method returns the coordinates of the cell in which the &amp;#010 record is displayed as a 2 element array.&amp;#010" name="getCellCoordinates" type="method" definingClass="class:CubeGrid">
<params description="record to find coordinates for" optional="false" name="cellRecord" type="record">
</params>
<returns description="2 element array containing &lt;code&gt;[rowNum,colNum]&lt;/code&gt; for the cell, or                  &lt;code&gt;null&lt;/code&gt; if the record is not found." type="array"></returns>
</docItem>
<docItem ref="classMethod:isc.logWarn" flags="" description=" Same as ${isc.DocUtils.linkForRef('method:Log.logWarn')}.&amp;#010&amp;#010" name="logWarn" type="classMethod" definingClass="class:isc">
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in, defaults to &quot;Log&quot;" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:PickList.textMatchStyle" flags="IR" description="When applying filter criteria to pickList data, what type of matching to use.  Legal&amp;#010 values are &quot;substring&quot; (value contains user input) or &quot;startsWith&quot; (value starts with&amp;#010 user input.  Both matches are case insensitive.&amp;#010 &lt;P&gt;&amp;#010 For a databound pickList (${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} set), &lt;code&gt;textMatchStyle&lt;/code&gt; is&amp;#010 sent to the server as ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')}.&amp;#010 &lt;P&gt;&amp;#010 For a non-databound pickList, &lt;code&gt;textMatchStyle&lt;/code&gt; is applied by &amp;#010 ${isc.DocUtils.linkForRef('method:PickList.filterClientPickListData')}." name="textMatchStyle" valueType="boolean" defaultValue="&quot;startsWith&quot;" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="group:titles" name="titles" type="group">
    <refs>attr:DataSource.title</refs>
    <refs>attr:DataSource.pluralTitle</refs>
    <refs>attr:DataSource.titleField</refs>
</docItem>
<docItem ref="classMethod:Page.registerKey" flags="" description=" Fire some action when the Page recieves a keyPress event from a certain key.&lt;br&gt;&amp;#010 Note that if a widget has keyboard focus, this action will fire only after any widget-level&amp;#010 keyPress handlers have fired and bubbled the event up to the top of their ancestor chain.&lt;br&gt;&amp;#010 Multiple actions can be registered to fire on a single keyPress using this method, and can&amp;#010 be associated with different &lt;code&gt;target&lt;/code&gt; objects (which will then be available as&amp;#010 a parameter when the action is fired).&lt;br&gt;&amp;#010 This differs from calling ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')} with the &lt;code&gt;&quot;keyPress&quot;&lt;/code&gt;&amp;#010 events registered via &lt;code&gt;setEvent()&lt;/code&gt; will fire &lt;i&gt;before&lt;/i&gt; widget level handlers &amp;#010 respond to the event, and will fire for every &lt;code&gt;keyPress&lt;/code&gt; event, not just those&amp;#010 triggerred by some specific key or key-combination.&amp;#010 &amp;#010 &amp;#010" name="registerKey" type="classMethod" definingClass="class:Page">
<seeAlso ref="method:Canvas.keyPress">
</seeAlso>
<seeAlso ref="classMethod:Page.setEvent">
</seeAlso>
<seeAlso ref="classMethod:Page.unregisterKey">
</seeAlso>
<params description="key name or identifier object." optional="false" name="key" type="KeyIdentifier">
</params>
<params description="Action to fire when key is pressed.              This can be a string of script to evaluate or a javascript function.&lt;br&gt;&amp;#010              This action will be passed 2 parameters: The name of the key pressed will be &amp;#010              available as the first parameter or &lt;code&gt;key&lt;/code&gt; keyword. The target &amp;#010              passed into this method will be available as the second parameter or &amp;#010             &lt;code&gt;target&lt;/code&gt; keyword." optional="false" name="action" type="string">
</params>
<params description="If specified this object will be made available to the                                  action fired as a parameter." optional="true" name="target" type="any">
</params>
    <groups>KeyRegistry</groups>
</docItem>
<docItem ref="attr:Layout.defaultLayoutAlign" flags="IR" description="Specifies the default alignment for layout members on the breadth axis. Can be overridden&amp;#010 on a per-member basis by setting ${isc.DocUtils.linkForRef('attr:Canvas.layoutAlign')}.&lt;br&gt;&amp;#010 If unset, default member layout alignment will be &quot;top&quot; for a horizontal layout, and&amp;#010 left for a vertical layout." name="defaultLayoutAlign" valueType="Alignment or VerticalAlignment" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutMember</groups>
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="attr:Splitbar.showDownGrip" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the&amp;#010 'Down' state on the grip image when the user mousedown's on this widget. &amp;#010 Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showDown')} is false" name="showDownGrip" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:WSRequest.wsOperation" flags="IR" description="Name of the web service operation to invoke." name="wsOperation" valueType="String" defaultValue="null" type="attr" definingClass="class:WSRequest">
</docItem>
<docItem ref="method:List.equals" flags="" description=" Return whether this list is equal to another list.&amp;#010 &lt;P&gt;&amp;#010 Two lists are equal only if they have the same length and all contained items are in the same&amp;#010 order and are also equal.&amp;#010&amp;#010" name="equals" type="method" definingClass="interface:List">
<params description="list to check for equality" optional="false" name="list" type="List">
</params>
<returns description="whether the specified list is equal to this list" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:Layout.canDropComponents" flags="IRA" description="Layouts provide a default implementation of a drag and drop interaction.  If you set&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.canAcceptDrop','canAcceptDrop')}:true and &lt;code&gt;canDropComponents:true&lt;/code&gt;&amp;#010 on a Layout, when a droppable Canvas (${isc.DocUtils.linkForRef('attr:Canvas.canDrop','canDrop:true')} is dragged over&amp;#010 the layout will show a dropLine (a simple insertion line) at the drop location.  &amp;#010 &lt;P&gt;&amp;#010 When the drop occurs, the dragTarget (obtained using&amp;#010 ${isc.DocUtils.linkForRef('classMethod:EventHandler.getDragTarget')}) is added as a member of this layout at the location&amp;#010 shown by the dropLine (calculated by ${isc.DocUtils.linkForRef('method:Layout.getDropPosition')}).  This default&amp;#010 behavior allows either members or external components that have&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.canDragReposition')} (or ${isc.DocUtils.linkForRef('attr:Canvas.canDrag')}) and ${isc.DocUtils.linkForRef('attr:Canvas.canDrop')} set&amp;#010 to &lt;code&gt;true&lt;/code&gt; to be added to or reordered within the Layout.&amp;#010 &lt;P&gt;&amp;#010 You can control the thickness of the dropLine via ${isc.DocUtils.linkForRef('attr:Layout.dropLineThickness')} and&amp;#010 you can customize the style using css styling in the skin file (look for .layoutDropLine in&amp;#010 skin_styles.css for your skin).  &amp;#010 &lt;P&gt;  &amp;#010 If you want to dynamically create a component to be added to the Layout in response to a&amp;#010 drop event you can do so as follows: &amp;#010 &lt;pre&gt;&amp;#010 isc.VLayout.create({&amp;#010   ...various layout properties...&amp;#010   canDropComponents: true,&amp;#010   drop : function () {&amp;#010     // create the new component &amp;#010     var newMember = isc.Canvas.create(); &amp;#010     // add to the layout at the current drop position &amp;#010     // (the dropLine will be showing here)&amp;#010     this.addMember(newMember, this.getDropPosition());  &amp;#010     // hide the dropLine that was automatically shown &amp;#010     // by builtin SmartClient methods&amp;#010     this.hideDropLine();&amp;#010   }&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 If you want to completely suppress the builtin drag and drop logic, but still receive drag&amp;#010 and drop events for your own custom implementation, set ${isc.DocUtils.linkForRef('attr:Canvas.canAcceptDrop')} to&amp;#010 &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;canDropComponents&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on your Layout." name="canDropComponents" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Layout">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Array.indexOf" flags="" description=" Return the position in the list of the first instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="indexOf" type="method" definingClass="object:Array">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="earliest index to consider" optional="true" name="pos" type="number">
</params>
<params description="last index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="classMethod:History.registerCallback" flags="" description="&amp;#010 Registers a callback to be called when the user navigates to a synthetic history entry.  &amp;#010 &lt;p&gt;&amp;#010 If the SmartClient Core module is loaded on the page where you're using the History module,&amp;#010 you can use any format acceptable to ${isc.DocUtils.linkForRef('method:Class.fireCallback')} as the callback.  The&amp;#010 parameters 'id' and 'data' will be passed to your callback, in that order.&amp;#010 &lt;p&gt;&amp;#010 If the SmartClient Core module is not loaded on the page, you can use one of the following&amp;#010 formats:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;A function that takes an id and a data argument, in that order.&amp;#010 &lt;li&gt;An object literal with a property named 'callback' whose value is a function that takes&amp;#010 an id and a data argument, in that order; and a property named 'target' that specifies the&amp;#010 object on which the callback function should be applied.  So, e.g:&amp;#010 &lt;pre&gt;&amp;#010 {target: myObj, callback: myObj.myFunction(id, data)}&amp;#010 &lt;/pre&gt;&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 When the History module initializes, it checks the current URL for a history id.  If the&amp;#010 currently loading page has an id (because the user came in via the bookmark or when back or&amp;#010 forward onto this page), then the History module will attempt to call whatever callback is&amp;#010 registered with it on page load.  So, you can use this method to register a callback before&amp;#010 page load and it will be called on page load if there is a history id (and subsequently when&amp;#010 a synthetic history navigation occurs).  You can also use this method to register a callback&amp;#010 after page load, but keep in mind that in that case you should call&amp;#010 ${isc.DocUtils.linkForRef('classMethod:History.getCurrentHistoryId')} to see if the page that has loaded has a history id that&amp;#010 you should act on.&amp;#010 &lt;p&gt;&amp;#010 When the user transitions to the history entry immediately before the first synthetic&amp;#010 history entry, the callback is fired with an id of null.&amp;#010 &amp;#010" name="registerCallback" type="classMethod" definingClass="class:History">
<params description="The callback to invoke when the user navigates to a synthetic history entry." optional="false" name="callback" type="String or Object">
</params>
</docItem>
<docItem ref="method:TabSet.selectTab" flags="" description="	Select a tab&amp;#010" name="selectTab" type="method" definingClass="class:TabSet">
<params description="tab to select" optional="false" name="tab" type="number | ID | Tab">
</params>
    <examples>${isc.DocUtils.linkForExampleId('tabsOrientation')}</examples>
</docItem>
<docItem ref="method:ListGrid.getBaseStyle" flags="" description=" Return the base stylename for this cell.  Has the following implementation by default:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('attr:ListGrid.editFailedBaseStyle','this.editFailedBaseStyle')} is defined, and the&amp;#010     cell is displaying a validation error return this value.&lt;/li&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('attr:ListGrid.editPendingBaseStyle','this.editFailedPendingStyle')} is defined, and&amp;#010     the cell is displaying an edit value that has not yet been saved (see &amp;#010     ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')}) return this value.&lt;/li&gt;&amp;#010 &lt;li&gt;Otherwise return ${isc.DocUtils.linkForRef('attr:ListGrid.recordBaseStyleProperty','record[listGrid.recordBaseStyleProperty]')},&amp;#010     if defined, otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.baseStyle','field.baseStyle')}, &amp;#010     or finally ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle','this.baseStyle')}&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="getBaseStyle" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<params description="Record associated with this cell. May be &lt;code&gt;null&lt;/code&gt;                               for a new edit row at the end of this grid's data set." optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="CSS class for this cell" type="CSSStyleName"></returns>
    <examples>${isc.DocUtils.linkForExampleId('replaceStyle')}</examples>
</docItem>
<docItem ref="group:keyboardEvents" name="keyboardEvents" type="group">
    <refs>classMethod:EventHandler.getKey</refs>
    <refs>classMethod:EventHandler.shiftKeyDown</refs>
    <refs>classMethod:EventHandler.ctrlKeyDown</refs>
    <refs>classMethod:EventHandler.altKeyDown</refs>
</docItem>
<docItem ref="method:StretchImgButton.setTitleStyle" flags="" description=" Sets the ${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')}, which is applied to the title text.&amp;#010" name="setTitleStyle" type="method" definingClass="class:StretchImgButton">
<params description="new title style" optional="false" name="style" type="CSSStyleName">
</params>
</docItem>
<docItem ref="attr:Canvas.dragType" flags="IRWA" description="The &quot;type&quot; of thing given as a string that can be dragged from this widget. If&amp;#010      specified, this will be matched up with the dropTypes of droppable widgets as detailed&amp;#010      in the dropTypes property." name="dragType" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.dropTypes">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Canvas.getViewportWidth" flags="A" description="  Returns the width of the viewport onto the scrollable content.&amp;#010&amp;#010" name="getViewportWidth" type="method" definingClass="class:Canvas">
<returns description="width of the viewport, in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:TreeGrid.showOpenIcons" flags="IRW" description="If true, show a different icon for &lt;code&gt;open&lt;/code&gt; folders than closed folders.&amp;#010 This is achieved by appending the ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} onto the &amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} URL [for example &lt;code&gt;&quot;[SKIN]/folder.gif&quot;&lt;/code&gt; might be &amp;#010 replaced by &lt;code&gt;&quot;[SKIN]/folder_open.gif&quot;&lt;/code&gt;.&lt;br&gt;&amp;#010 &lt;b&gt;Note&lt;/b&gt; If this property is set to &lt;code&gt;false&lt;/code&gt; we will show the same icon for&amp;#010 open icons as for closed icons - unless a custom folder icon was specified, this will be&amp;#010 determined by ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} plus the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')}." name="showOpenIcons" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
    <groups>treeIcons</groups>
</docItem>
<docItem ref="method:CubeGrid.getSelectedFacetValues" flags="" description="&amp;#010  returns an array of facetValues objects indicating the headers that are selected in the&amp;#010  headerBar for this facet.  If facetId is not passed, returns selection for all&amp;#010  facets.&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getSelectedFacetValues" type="method" definingClass="class:CubeGrid">
<params description="Id for facet for which we are getting selected facetValues." optional="false" name="facetId" type="string">
</params>
<returns description="selected facetValues" type="Array"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverOpacity" flags="IRW" description="Opacity for hovers shown for items" name="itemHoverOpacity" valueType="number" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverOpacity">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:Window.setStatus" flags="" description="			Sets the text in the status bar of the window, redrawing if necessary.&amp;#010" name="setStatus" type="method" definingClass="class:Window">
<params description="new text for the status bar" optional="false" name="statusString" type="string">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.timeFormatter" flags="IRW" description="Display format to use for fields specified as type 'time'.  May also be specified at &amp;#010 the field level via ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')}.&lt;br&gt;&amp;#010 If unset, time fields will be formatted based on the system wide &amp;#010 ${isc.DocUtils.linkForRef('classAttr:Time.shortDisplayFormat')}.&lt;br&gt;&amp;#010 If this field is editable, the timeFormatter will also be passed to the editor&amp;#010 created to edit any time type fields as ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat')}" name="timeFormatter" valueType="timeFormatter" defaultValue="&quot;toShortPaddedTime&quot;" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ResultSet.updateCacheFromRequest" flags="IRA" description="When a successful Add, Update or Remove type operation fires on this ResultSet's &amp;#010 dataSource, if ${isc.DocUtils.linkForRef('attr:DSResponse.data')} is unset, should we integrate the submitted&amp;#010 data values (from the request) into our data-set?" name="updateCacheFromRequest" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultSet">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="method:DynamicForm.showErrors" flags="" description=" If this form has any outstanding validation errors, show them now.&lt;br&gt;&amp;#010 This method is called when the set of errors are changed by ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.validate')}.&lt;br&gt;&amp;#010 Default implementation will redraw the form to display error messages and call&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors','handleHiddenValidationErrors()')} to&amp;#010 display errors with no visible field.&lt;br&gt;&amp;#010 Note that this method may be overridden to perform custom display of validation errors.  &amp;#010" name="showErrors" type="method" definingClass="class:DynamicForm">
    <groups>errors</groups>
</docItem>
<docItem ref="attr:DynamicForm.rightTitleSuffix" flags="IRW" description="The string appended to the title of an item in this form if its titleOrientation&amp;#010          property is set to &quot;right&quot;." name="rightTitleSuffix" valueType="string" defaultValue="&quot;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="classMethod:Page.getScreenHeight" flags="" description="		Get the height of the user's screen, in pixels.&amp;#010" name="getScreenHeight" type="classMethod" definingClass="class:Page">
</docItem>
<docItem ref="attr:Menu.showKeys" flags="IRW" description="A boolean, indicating whether the shortcut key column should be displayed. If&amp;#010 showKeys is not set, the menu will show the key column only if one of its items&amp;#010 specifies a keys property. If showKeys is false, the keys will not be displayed,&amp;#010 but will still function." name="showKeys" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="method:ListGrid.setSortState" flags="" description=" Reset this grid's sort state (sort field and direction) to match the &amp;#010 ${isc.DocUtils.linkForRef('type:listGridSortState')} object passed in.&lt;br&gt;&amp;#010 Used to restore previous state retrieved from the grid by a call to &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getSortState')}.&amp;#010&amp;#010" name="setSortState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getSortState">
</seeAlso>
<params description="Object describing the desired sort state for the grid." optional="false" name="sortState" type="listGridSortState">
</params>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:CubeGrid.saveByCell" flags="R" description="CubeGrids only support editing by cell" name="saveByCell" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
    <groups>cellEditing</groups>
</docItem>
<docItem ref="attr:FormItem.dateFormatter" flags="IRWA" description="Display format to use for date type values within this formItem. Default is to use the&amp;#010 system-wide default short date format, configured via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to &amp;#010 change the format used by this item.&lt;br&gt;&amp;#010 Note: if both &lt;code&gt;dateFormatter&lt;/code&gt; and ${isc.DocUtils.linkForRef('attr:FormItem.timeFormatter','timeFormatter')}&amp;#010 are specified on an item, Date type values will be formatted as dates using &amp;#010 &lt;code&gt;dateFormatter&lt;/code&gt;.&lt;br&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat')} for formatting dates displayed in DateItems." name="dateFormatter" valueType="DateDisplayFormat" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DynamicForm.canFocus" flags="IRWA" description="DynamicForms are considered to have focus if any of their form items have focus.&amp;#010 Note that setting &lt;code&gt;dynamicForm.canFocus&lt;/code&gt; to false will have no effect on&amp;#010 whether form items within the form may recieve focus. This property will only govern&amp;#010 whether the form may recieve focus if the form contains no focusable items." name="canFocus" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DynamicForm">
    <groups>focus</groups>
</docItem>
<docItem ref="method:Menu.setItems" flags="" description=" Synonym for ${isc.DocUtils.linkForRef('method:Menu.setData')}.&amp;#010" name="setItems" type="method" definingClass="class:Menu">
<params description="new items for this menu" optional="false" name="items" type="array of MenuItems">
</params>
    <groups>data</groups>
</docItem>
<docItem ref="attr:GridRenderer.quickDrawAheadRatio" flags="IRWA" description="Alternative to ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio')}, to be used when the user&amp;#010 is rapidly changing the grids viewport (for example drag scrolling through the grid).&amp;#010 If unspecified ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio')} will be used in all cases" name="quickDrawAheadRatio" valueType="float" defaultValue="1.3" type="attr" definingClass="class:GridRenderer">
    <groups>performance</groups>
</docItem>
<docItem ref="group:fetching" name="fetching" type="group">
    <refs>attr:ResultSet.fetchMode</refs>
    <refs>attr:ResultSet.initialData</refs>
    <refs>attr:ResultSet.initialLength</refs>
    <refs>attr:ResultSet.allRows</refs>
    <refs>attr:ResultSet.resultSize</refs>
    <refs>attr:ResultSet.fetchDelay</refs>
    <refs>type:FetchMode</refs>
</docItem>
<docItem ref="classMethod:isc.say" flags="" description=" Show a modal dialog with a message, icon, and &quot;OK&quot; button.  Intended for notifications which&amp;#010 are not really warnings (default icon is less severe).&amp;#010 &lt;P&gt;&amp;#010 The callback will receive boolean true for an OK button click, or null if the Dialog is&amp;#010 dismissed via the close button.&amp;#010&amp;#010" name="say" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Warn">
</seeAlso>
<seeAlso ref="classMethod:isc.warn">
</seeAlso>
<seeAlso ref="classMethod:isc.ask">
</seeAlso>
<seeAlso ref="method:Dialog.okClick">
</seeAlso>
<seeAlso ref="classAttr:Dialog.SAY_TITLE">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="Optional Callback to fire when the user                                       dismisses the dialog. This has the single parameter&amp;#010                                      'value', indicating the value returned by the Warn&amp;#010                                      dialog from 'okClick()' etc." optional="true" name="callback" type="Callback">
</params>
<params description="additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for&amp;#010                                      the Dialog, set properties.buttons to an array of buttons&amp;#010										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }" optional="true" name="properties" type="object">
</params>
    <groups>Prompting</groups>
</docItem>
<docItem ref="group:state" description="Change of state and it's consequences for presentation." name="state" type="group">
    <refs>method:StatefulCanvas.setState</refs>
    <refs>method:StatefulCanvas.getState</refs>
    <refs>method:StatefulCanvas.setSelected</refs>
    <refs>method:StatefulCanvas.select</refs>
    <refs>method:StatefulCanvas.deselect</refs>
    <refs>method:StatefulCanvas.isSelected</refs>
    <refs>method:StatefulCanvas.getActionType</refs>
    <refs>method:StatefulCanvas.setActionType</refs>
    <refs>method:StatefulCanvas.addToRadioGroup</refs>
    <refs>method:StatefulCanvas.removeFromRadioGroup</refs>
    <refs>method:StatefulCanvas.setDisabled</refs>
    <refs>method:Button.select</refs>
    <refs>method:Button.deselect</refs>
    <refs>method:Button.isSelected</refs>
    <refs>method:Button.setSelected</refs>
    <refs>method:Button.addToRadioGroup</refs>
    <refs>method:Button.removeFromRadioGroup</refs>
    <refs>method:Button.setActionType</refs>
    <refs>method:Button.getActionType</refs>
    <refs>method:Button.setState</refs>
    <refs>method:Button.setDisabled</refs>
    <refs>method:Button.getState</refs>
    <refs>method:ImgButton.select</refs>
    <refs>method:ImgButton.deselect</refs>
    <refs>method:ImgButton.isSelected</refs>
    <refs>method:ImgButton.setSelected</refs>
    <refs>method:ImgButton.addToRadioGroup</refs>
    <refs>method:ImgButton.removeFromRadioGroup</refs>
    <refs>method:ImgButton.setActionType</refs>
    <refs>method:ImgButton.getActionType</refs>
    <refs>method:ImgButton.setState</refs>
    <refs>method:ImgButton.setDisabled</refs>
    <refs>method:ImgButton.getState</refs>
    <refs>method:StretchImgButton.select</refs>
    <refs>method:StretchImgButton.deselect</refs>
    <refs>method:StretchImgButton.isSelected</refs>
    <refs>method:StretchImgButton.setSelected</refs>
    <refs>method:StretchImgButton.addToRadioGroup</refs>
    <refs>method:StretchImgButton.removeFromRadioGroup</refs>
    <refs>method:StretchImgButton.setActionType</refs>
    <refs>method:StretchImgButton.getActionType</refs>
    <refs>method:StretchImgButton.setState</refs>
    <refs>method:StretchImgButton.setDisabled</refs>
    <refs>method:StretchImgButton.getState</refs>
    <refs>attr:StatefulCanvas.redrawOnStateChange</refs>
    <refs>attr:StatefulCanvas.selected</refs>
    <refs>attr:StatefulCanvas.state</refs>
    <refs>attr:StatefulCanvas.showRollOver</refs>
    <refs>attr:StatefulCanvas.showFocus</refs>
    <refs>attr:StatefulCanvas.showFocused</refs>
    <refs>attr:StatefulCanvas.showFocusedAsOver</refs>
    <refs>attr:StatefulCanvas.showDown</refs>
    <refs>attr:StatefulCanvas.showDisabled</refs>
    <refs>attr:StatefulCanvas.actionType</refs>
    <refs>attr:StatefulCanvas.radioGroup</refs>
    <refs>attr:Button.selected</refs>
    <refs>attr:Button.radioGroup</refs>
    <refs>attr:Button.actionType</refs>
    <refs>attr:Button.state</refs>
    <refs>attr:Button.showDisabled</refs>
    <refs>attr:Button.showDown</refs>
    <refs>attr:Button.showFocused</refs>
    <refs>attr:Button.showRollOver</refs>
    <refs>attr:ImgButton.selected</refs>
    <refs>attr:ImgButton.radioGroup</refs>
    <refs>attr:ImgButton.actionType</refs>
    <refs>attr:ImgButton.state</refs>
    <refs>attr:ImgButton.showDisabled</refs>
    <refs>attr:ImgButton.showDown</refs>
    <refs>attr:ImgButton.showFocus</refs>
    <refs>attr:ImgButton.showFocused</refs>
    <refs>attr:ImgButton.showRollOver</refs>
    <refs>attr:StretchImgButton.selected</refs>
    <refs>attr:StretchImgButton.radioGroup</refs>
    <refs>attr:StretchImgButton.actionType</refs>
    <refs>attr:StretchImgButton.state</refs>
    <refs>attr:StretchImgButton.showDisabled</refs>
    <refs>attr:StretchImgButton.showDown</refs>
    <refs>attr:StretchImgButton.showFocus</refs>
    <refs>attr:StretchImgButton.showFocused</refs>
    <refs>attr:StretchImgButton.showRollOver</refs>
    <refs>type:State</refs>
    <refs>type:SelectionType</refs>
    <refs>type:Selected</refs>
</docItem>
<docItem exampleConfig="Dialog.xml" ref="class:Dialog" description="Dialogs are a specialized version of ${isc.DocUtils.linkForRef('class:Window')} used for small windows such as&amp;#010 alerts, prompts, and confirmations.  They can be modal or modeless (via the&amp;#010 ${isc.DocUtils.linkForRef('attr:Window.isModal','isModal')} property) and will contain various children by default&amp;#010 (&quot;titlebar&quot;, &quot;resizer&quot;, etc).&amp;#010 &lt;P&gt;&amp;#010 NOTE: If you are building a custom component that will add components to the Window via&amp;#010 ${isc.DocUtils.linkForRef('method:Window.addItem','addItem()')}, in most cases it makes sense" name="Dialog" type="class">
    <methods>method:Dialog.saveData</methods>
    <methods>method:Dialog.closeClick</methods>
    <methods>method:Dialog.cancelClick</methods>
    <methods>method:Dialog.okClick</methods>
    <methods>method:Dialog.applyClick</methods>
    <methods>method:Dialog.yesClick</methods>
    <methods>method:Dialog.noClick</methods>
    <classAttrs>classAttr:Dialog.OK_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.APPLY_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.YES_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.NO_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.CANCEL_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.CONFIRM_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.SAY_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.WARN_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.ASK_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.ASK_FOR_VALUE_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.LOGIN_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.USERNAME_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.PASSWORD_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.LOGIN_BUTTON_TITLE</classAttrs>
    <classAttrs>classAttr:Dialog.LOGIN_ERROR_MESSAGE</classAttrs>
    <classAttrs>classAttr:Dialog.Prompt</classAttrs>
    <classAttrs>classAttr:Dialog.Warn</classAttrs>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:Dialog.styleName</attrs>
    <attrs>attr:Dialog.showToolbar</attrs>
    <attrs>attr:Dialog.toolbarButtons</attrs>
</docItem>
<docItem ref="attr:Progressbar.src" flags="IRW" description="The base file name for the progressbar image." name="src" valueType="SCImgURL" defaultValue="&quot;[SKIN]progressbar.gif&quot;" type="attr" definingClass="class:Progressbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.setHtmlElement" flags="" description=" Setter for the ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')}.&amp;#010" name="setHtmlElement" type="method" definingClass="class:Canvas">
<params description="New htmlElement for this canvas, or Null to clear the existing      htmlElement" optional="false" name="element" type="DOM element">
</params>
    <groups>htmlElement</groups>
</docItem>
<docItem ref="method:FormItem.getDisplayValue" flags="" description=" Returns this item's value with any valueMap applied to it - the value as currently&amp;#010 displayed to the user.&amp;#010" name="getDisplayValue" type="method" definingClass="class:FormItem">
<params description="optional stored value to be mapped to a display value.  Default is to                use the form's current value" optional="true" name="value">
</params>
<returns description="value displayed to the user" type="any"></returns>
    <groups>valueMap</groups>
</docItem>
<docItem ref="class:WSRequest" description="A WSRequest (or &quot;web service request&quot;) is an extended RPCRequest will additional properties&amp;#010 application to WSDL/SOAP web services.&amp;#010 &lt;P&gt;&amp;#010 All properties which are legal on ${isc.DocUtils.linkForRef('class:RPCRequest')} are legal on a WSRequest, in&amp;#010 addition to the properties listed here." name="WSRequest" type="class">
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:WSRequest.wsOperation</attrs>
    <attrs>attr:WSRequest.data</attrs>
    <attrs>attr:WSRequest.useFlatFields</attrs>
    <attrs>attr:WSRequest.headerData</attrs>
<seeAlso ref="class:RPCRequest">
</seeAlso>
</docItem>
<docItem ref="attr:Tree.idField" flags="IRA" description="For trees with modelType &quot;parent&quot;, this property specifies the name of the property&amp;#010 that contains the unique ID of nodes in this tree. By default this is set to&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeNode.id')}." name="idField" valueType="string" defaultValue="&quot;id&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:TreeNode.id">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="group:dsResponse" name="dsResponse" type="group">
    <refs>attr:DSResponse.data</refs>
</docItem>
<docItem ref="method:Canvas.getImage" flags="A" description=" Retrieve a native image element by name.&amp;#010 &lt;P&gt;&amp;#010 The image element must have been created from HTML generated by calling&amp;#010 &lt;code&gt;canvas.imgHTML()&lt;/code&gt; on this particular Canvas.&amp;#010 &amp;#010" name="getImage" type="method" definingClass="class:Canvas">
<params description="name of the image to get, as originally passed to                              &lt;code&gt;imgHTML&lt;/code&gt;" optional="false" name="identifier" type="string">
</params>
<returns description="DOM image object if found, else null" type="object"></returns>
    <groups>images</groups>
</docItem>
<docItem ref="attr:FormItem.errorOrientation" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, where should the error icon and text appear&amp;#010 relative to the form item itself. Valid options are &lt;code&gt;&quot;top&quot;&lt;/code&gt;, &amp;#010 &lt;code&gt;&quot;bottom&quot;&lt;/code&gt;, &lt;code&gt;&quot;left&quot;&lt;/code&gt; or &lt;code&gt;&quot;right&quot;&lt;/code&gt;.&lt;br&gt;&amp;#010 If unset the orientation will be derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}." name="errorOrientation" valueType="align" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>validation</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ViewLoader.setViewURL" flags="" description=" Change the URL this component loads a view from.  Triggers a fetch from the new URL.&amp;#010&amp;#010" name="setViewURL" type="method" definingClass="class:ViewLoader">
<params description="URL to retrieve view from" optional="true" name="url" type="URL">
</params>
<params description="Parameters to send to the viewURL.  Merged with                           &lt;code&gt;component.viewURLParams&lt;/code&gt; if both are set." optional="true" name="params" type="Object">
</params>
<params description="Additional properties for the RPCRequest                         sent by the ViewLoader.  Very advanced; could be used to, for&amp;#010                        example, set HTTP headers." optional="true" name="rpcProperties" type="RPCRequest Properties">
</params>
    <groups>viewLoading</groups>
</docItem>
<docItem ref="group:jspTags" title="SmartClient JSP Tags" description="The SmartClient Java Server component ships with a number of custom JSP tags designed to&amp;#010 make development with SmartClient easier.  The custom tags are defined in&amp;#010 &lt;code&gt;[webroot]/WEB-INF/iscTaglib.xml&lt;/code&gt; in the SDK package.  To make use of these tags, make&amp;#010 sure you have the following entry in your web.xml (the SDK already contains this entry by&amp;#010 default):&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;taglib&amp;gt;&amp;#010     &amp;lt;taglib-uri&amp;gt;isomorphic&amp;lt;/taglib-uri&amp;gt; &amp;#010     &amp;lt;taglib-location&amp;gt;/WEB-INF/iscTaglib.xml&amp;lt;/taglib-location&amp;gt; &amp;#010 &amp;lt;/taglib&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 Also, the JSP page making use of the tag must load the custom taglib via the following&amp;#010 directive:&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;%@ taglib uri=&quot;/WEB-INF/iscTaglib.xml&quot; prefix=&quot;isomorphic&quot; %&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 All SmartClient JSP tags produce either HTML or JavaScript output, so you can easily see&amp;#010 what any given tag is generating by doing a &quot;View-&gt;Source&quot; in your browser after browsing to&amp;#010 the JSP that contains your tag.  Tags that produce HTML must be located in the HTML BODY&amp;#010 context in your JSP - that is, outside of any &lt;code&gt;&amp;lt;SCRIPT&amp;gt;&lt;/code&gt; tags and inside&amp;#010 &lt;code&gt;&amp;lt;BODY&amp;gt;&lt;/code&gt; tags.  Tags that produce JavaScript must be located inside&amp;#010 &lt;code&gt;&amp;lt;SCRIPT&amp;gt;&lt;/code&gt; tags." name="jspTags" type="group">
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:DataSource.getLegalChildTags" flags="" description=" For a DataSource that describes a DOM structure, the list legal child elements that can&amp;#010 be contained by the element described by this DataSource.&amp;#010 &lt;p&gt;&amp;#010 For a DataSource described by XML schema, this is the list of legal subelements &lt;b&gt;of&amp;#010 complexType&lt;/b&gt; (elements of simpleType become DataSourceFields with atomic type).&amp;#010 &lt;p&gt;&amp;#010 Note that currently, if an XML schema file contains ordering constraints, DataSources&amp;#010 derived from XML Schema do not capture these constraints.&amp;#010&amp;#010" name="getLegalChildTags" type="method" definingClass="class:DataSource">
    <groups>xmlSchema</groups>
</docItem>
<docItem ref="method:Window.setShowMaximizeButton" flags="" description=" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showMaximizeButton')} to show / hide the maximizeButton&amp;#010" name="setShowMaximizeButton" type="method" definingClass="class:Window">
<seeAlso ref="attr:Window.headerControls">
</seeAlso>
<seeAlso ref="attr:Window.showMaximizeButton">
</seeAlso>
</docItem>
<docItem ref="classMethod:Page.clearEvent" flags="" description="	Clear event(s) under the given eventType.&lt;p&gt;&amp;#010	To clear all events, omit the ID parameter.  To clear a specific event,&amp;#010	pass the ID that was returned by Page.setEvent().&amp;#010" name="clearEvent" type="classMethod" definingClass="class:Page">
<seeAlso ref="class:EventHandler">
</seeAlso>
<params description="event type to clear" optional="false" name="eventType" type="PageEvent, Event">
</params>
<params description="ID of the event to clear. 										If not specified, all events in eventType will be cleared." optional="true" name="ID" type="number">
</params>
    <groups>EventRegistry</groups>
</docItem>
<docItem ref="attr:CubeGrid.hilites" flags="IRW" description="Hilites are styling that can declaratively attached to data via setting the&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on a record to the id of a hilite declaration.&amp;#010 &lt;P&gt;&amp;#010 Hilites essentially supply functionality similar to what is possible by overriding&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getCellStyle','getCellStyle()')} and other styling-related methods, but&amp;#010 without coding." name="hilites" valueType="GridHilite" defaultValue="null" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="classMethod:XMLTools.nativeXMLAvailable" flags="" description="&amp;#010 Returns true if the current browser exposes an XML parser that can be used for SmartClient&amp;#010 XML operations like web service bindings and XML processing.  See&amp;#010 ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information on when the XML parser may not&amp;#010 available and what features are impacted as a result.&amp;#010&amp;#010" name="nativeXMLAvailable" type="classMethod" definingClass="class:XMLTools">
<returns description="true if native XML processing is available, false otherwise." type="boolean"></returns>
</docItem>
<docItem ref="attr:ListGridField.linkText" flags="IRW" description="The HTML to display in cells of this field if the fieldType is set to link. Can be&amp;#010  overridden by ${isc.DocUtils.linkForRef('attr:ListGridRecord.linkText')}." name="linkText" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="type:ListGridFieldType">
</seeAlso>
<seeAlso ref="type:FieldType">
</seeAlso>
<seeAlso ref="attr:ListGridRecord.linkText">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('linkImage')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="classMethod:isA.Boolean" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a Boolean object?&amp;#010&amp;#010" name="Boolean" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Boolean" type="boolean"></returns>
</docItem>
<docItem ref="method:Canvas.redraw" flags="A" description=" Redraws the widget immediately with its current property values.  &amp;#010&amp;#010 Generally, if you want a Canvas to redraw, call markForRedraw() - this will cause the Canvas to&amp;#010 be redrawn when current processing ends, so that a series of modifications made to a Canvas will&amp;#010 cause it to redraw only once.&amp;#010&amp;#010 Only call redraw() directly if you need immediate responsiveness, for example you are redrawing&amp;#010 in response to continuous mouse motion.&amp;#010&amp;#010" name="redraw" type="method" definingClass="class:Canvas">
<params description="reason for performing the redraw" optional="true" name="reason" defaultValue="&quot;no reason provided&quot;" type="string"></params>
    <groups>drawing</groups>
</docItem>
<docItem ref="group:stringMethods" title="String Methods Overview" description="A method flagged as a String Method can be specified as a String containing a valid&amp;#010 JavaScript expression.  This expression will automatically be converted to a function with a&amp;#010 return value matching the value of the last statement.  Providing a String is not required -&amp;#010 you may use a real function instead.&amp;#010 &lt;p&gt;&amp;#010 For example - suppose you wanted to override the &lt;code&gt;leafClick()&lt;/code&gt; method on&amp;#010 the TreeGrid.  Normally you would do so as follows:&lt;br&gt;&amp;#010&amp;#010 &lt;pre&gt;&amp;#010 TreeGrid.create({&amp;#010     ...&amp;#010     leafClick : function(viewer, leaf, recordNum) { &amp;#010         if(leaf.name == 'zoo') { &amp;#010             alert(1); &amp;#010         } else {&amp;#010             alert(2);&amp;#010         }&amp;#010     }&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010 Since leafClick is a stringMethod, however, you can shorten this to:&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 TreeGrid.create({&amp;#010     ...&amp;#010     leafClick : &quot;if(leaf.name == 'zoo') { alert(1); } else { alert(2); }&quot;;&amp;#010 });&amp;#010 &lt;/pre&gt;" name="stringMethods" type="group">
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="method:CubeGrid.getCellStyle" flags="" description=" Return the CSS class for a cell. By default this method has the following implementation:&lt;br&gt;&amp;#010 - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) &amp;#010   if defined.&lt;br&gt;&amp;#010 - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the &amp;#010   state of the record.&lt;br&gt;&amp;#010 The state of the record is indicated by adding a suffix to the base style.&amp;#010 There are four independant boolean states, which are combined in the order given:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt;&quot;Disabled&quot; : whether the cell is disabled; enable by setting the &quot;enabled&quot; flag on record&amp;#010     returned by getCellRecord&amp;#010 &lt;li&gt;&quot;Selected&quot; : whether cell is selected; enable by passing a Selection object as &quot;selection&quot;&amp;#010 &lt;li&gt;&quot;Over&quot; : mouse is over this cell; enable with showRollovers&amp;#010 &lt;li&gt;&quot;Dark&quot; : alternating color bands; enable with alternateRowStyles&amp;#010 &lt;/ol&gt;&amp;#010 For example, with a baseStyle of &quot;myCell&quot;, a cell which is selected, which the mouse is over,&amp;#010 and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.&amp;#010 &lt;p&gt;&amp;#010 Cell Styles customizable by:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;attaching a custom style to a record by setting &amp;#010    &lt;code&gt;record[this.recordCustomStyleProperty]&lt;/code&gt; to some valid CSS style name.  &amp;#010 &lt;li&gt;modifying the base style returned by getBaseStyle() [see that method for further &amp;#010     documentation on this]&amp;#010 &lt;li&gt;overriding this function&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="getCellStyle" type="method" definingClass="class:CubeGrid">
<params description="record object for this row and column" optional="false" name="record" type="object">
</params>
<params description="number of the row" optional="false" name="rowNum" type="number">
</params>
<params description="number of the column" optional="false" name="colNum" type="number">
</params>
<returns description="CSS style for this cell" type="CSSStyleName"></returns>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:WebService.getHeaderData" flags="" description=" Override this method to return data that should be serialized as SOAP headers for the&amp;#010 current operation, such as a sessionId.&amp;#010 &lt;P&gt;&amp;#010 Format of the returned data is the same as that documented for&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.headerData')}.&amp;#010 &lt;P&gt;&amp;#010 The object passed to this method will be a true DSRequest in the case of a DataSource&amp;#010 operation, or just an Object with a &quot;data&quot; property for web service operations&amp;#010 initiated by ${isc.DocUtils.linkForRef('method:WebService.callOperation')}.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;headerData&lt;/code&gt; is instead provided via either dsRequest.headerData or as&amp;#010 part of the &lt;code&gt;requestProperties&lt;/code&gt; parameter to&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.callOperation','callOperation()')}, this method will never be called.&amp;#010&amp;#010" name="getHeaderData" type="method" definingClass="class:WebService">
<params optional="false" name="dsRequest" type="DSRequest">
</params>
<returns description="data for SOAP headers" type="Object"></returns>
</docItem>
<docItem ref="attr:ListGridField.name" flags="IRW" description="Unique name of this field. &amp;#010  &lt;P&gt;&amp;#010  The name of field is also the property in each record which holds the value for that&amp;#010  field." name="name" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>data</groups>
</docItem>
<docItem ref="attr:ToolbarItem.showTitle" flags="IRW" description="Don't show a title for toolbars" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ToolbarItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Tree.hasLeaves" flags="" description="&amp;#010  Return whether this node has any children that are leaves.&amp;#010&amp;#010" name="hasLeaves" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true fi the node has children that are leaves" type="boolean"></returns>
</docItem>
<docItem ref="method:FormItemIcon.keyPress" flags="" description="      StringMethod action to fire when this icon has focus and recieves a keypress&amp;#010      event.&amp;#010      If unset the form item's &lt;code&gt;iconKeyPress&lt;/code&gt; method will be fired instead &amp;#010      (if specified).&amp;#010" name="keyPress" type="method" definingClass="object:FormItemIcon">
<params description="Name of the key pressed" optional="false" name="keyName" type="string">
</params>
<params description="character produced by the keypress" optional="false" name="character" type="character">
</params>
<params description="The Dynamic Form to which this icon's item belongs." optional="false" name="form" type="DynamicForm">
</params>
<params description="The Form Item containing this icon" optional="false" name="item" type="FormItem">
</params>
<params description="A pointer to the form item icon" optional="false" name="icon" type="FormItemIcon">
</params>
    <groups>formIcons</groups>
</docItem>
<docItem ref="group:frozenFields" title="Frozen Fields" description="Frozen fields are fields that do not scroll horizontally with other fields, remaining on&amp;#010 the screen while other fields may be scrolled off.  This feature is typically used to&amp;#010 allow basic identifying information (like an &quot;accountId&quot;) to remain on screen while the&amp;#010 user scrolls through a large number of related fields.&amp;#010 &lt;P&gt;&amp;#010 Fields can be programmatically frozen via setting&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','field.frozen')} to true when the grid is created, or&amp;#010 dynamically frozen and unfrozen via ${isc.DocUtils.linkForRef('method:ListGrid.freezeField','freezeField()')} and&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.unfreezeField','unfreezeField()')}.&amp;#010 The setting ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','canFreezeFields')} enables a user interface to&amp;#010 allow end users to dynamically freeze and unfreeze fields.&amp;#010 &lt;P&gt;&amp;#010 The frozen fields feature is not compatible with the following features:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; variable height auto-sizing records&amp;#010      (${isc.DocUtils.linkForRef('attr:ListGrid.fixedRecordHeights','fixedRecordHeights:false')})&amp;#010 &lt;li&gt; inline filtering (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','showFilterEditor:true')})&amp;#010 &lt;li&gt; headers that autoFit to titles (normally enabled via&amp;#010      &lt;code&gt;field.overflow:&quot;visible&quot;&lt;/code&gt;&amp;#010 &lt;li&gt; the ${isc.DocUtils.linkForRef('class:CubeGrid')} subclass of ListGrid&amp;#010 &lt;li&gt; nested grids&amp;#010 &lt;/ul&gt;&amp;#010 The frozen fields feature &lt;b&gt;is&lt;/b&gt; compatible with column resize and reorder, selection&amp;#010 and multi-selection, loading data on demand, inline editing, drag and drop and reorder&amp;#010 of records, the ${isc.DocUtils.linkForRef('class:TreeGrid')} subclass of ListGrid, and all dynamic styling-related and&amp;#010 formatting-related features." name="frozenFields" type="group">
    <refs>method:ListGrid.freezeField</refs>
    <refs>method:ListGrid.unfreezeField</refs>
    <refs>attr:ListGridField.frozen</refs>
    <refs>attr:ListGrid.frozenBaseStyle</refs>
    <refs>attr:ListGrid.shrinkForFreeze</refs>
    <refs>attr:ListGrid.frozenHeaderBaseStyle</refs>
    <refs>attr:ListGrid.frozenHeaderTitleStyle</refs>
    <refs>attr:ListGrid.canFreezeFields</refs>
</docItem>
<docItem ref="attr:ListGridField.imageWidth" flags="IRW" description="Width of images shown for fieldTypes image and imageFile in this field.&amp;#010 &lt;P&gt;&amp;#010 If set to a String, assumed to be a property on each record that specifies the image&amp;#010 width.  For example, if &lt;code&gt;field.imageWidth&lt;/code&gt; is &quot;logoWidth&quot;,&amp;#010 &lt;code&gt;record.logoWidth&lt;/code&gt; will control the width of the image." name="imageWidth" valueType="number" defaultValue="16" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.imageSize">
</seeAlso>
<seeAlso ref="attr:ListGridField.imageSize">
</seeAlso>
<seeAlso ref="attr:ListGridField.imageHeight">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:ListGrid.cancelEditingConfirmationMessage" flags="IRW" description="If this is an editable listGrid, and &lt;code&gt;this.confirmCancelEditing&lt;/code&gt; is true&amp;#010 this property is used as the message to display in the confirmation dismissal prompt." name="cancelEditingConfirmationMessage" valueType="string" defaultValue="Cancelling this edit will clear unsaved edit values for this record. Continue?" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ButtonItem.baseStyle" flags="IRW" description="Optional &lt;code&gt;baseStyle&lt;/code&gt; will be applied to the button." name="baseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ButtonItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.shadowSoftness" flags="IRA" description="Softness, or degree of blurring, of the shadow.&amp;#010 &lt;P&gt;&amp;#010 A shadow with &lt;code&gt;softness:x&lt;/code&gt; is 2x pixels larger in each direction than the element&amp;#010 throwing the shadow, and the media for each edge should be x pixels wide/tall.&amp;#010 &lt;P&gt;&amp;#010 Defaults to &lt;code&gt;shadowDepth&lt;/code&gt; if unset." name="shadowSoftness" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('shadows')}</examples>
    <groups>shadow</groups>
</docItem>
<docItem ref="method:Canvas.setTabIndex" flags="A" description="  Assign an explicit tabIndex to this widget.&amp;#010" name="setTabIndex" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.tabIndex">
</seeAlso>
<params description="New tabIndex for this widget. Must be less than                           ${isc.DocUtils.linkForRef('classAttr:Canvas.TAB_INDEX_FLOOR')} to avoid interfering with auto-assigned&amp;#010                          tab indices on the page." optional="false" name="tabIndex" type="number">
</params>
    <groups>focus</groups>
</docItem>
<docItem ref="attr:DetailViewerField.value" flags="IR" description="When a field specifies its ${isc.DocUtils.linkForRef('attr:DetailViewerField.type')} to be &quot;header&quot;, the value of&amp;#010 this attribute specifies the header text." name="value" valueType="HTML" defaultValue="&quot;undefined&quot;" type="attr" definingClass="object:DetailViewerField">
</docItem>
<docItem ref="attr:Menu.emptyMessage" flags="IRWA" description="Message to show when a menu is shown with no items." name="emptyMessage" valueType="string" defaultValue="&quot;[Empty menu]&quot;" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="class:CanvasItem" description="Form item which renders a Canvas inline in a DynamicForm instance." name="CanvasItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:CanvasItem.canvas</attrs>
    <attrs>attr:CanvasItem.canvasConstructor</attrs>
    <attrs>attr:CanvasItem.canvasDefaults</attrs>
    <attrs>attr:CanvasItem.canvasProperties</attrs>
</docItem>
<docItem ref="method:CubeGrid.facetValueSelectionChanged" flags="" description="&amp;#010      Handler/Notification function for facetValue selection change&amp;#010      (no default implementation)&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueSelectionChanged" type="method" definingClass="class:CubeGrid">
<params description="facetValues with new selection state" optional="false" name="facetValues" type="facetValues object">
</params>
<params description="new selection state" optional="false" name="newState" type="boolean">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeOffset" flags="IRA" description="Amount the contained Canvas should be offset.  Defaults to edgeSize; set to less than&amp;#010 edgeSize to allow the contained Canvas to overlap the edge and corner media." name="edgeOffset" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <examples>${isc.DocUtils.linkForExampleId('edges')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:ListGrid.showSortArrow" flags="IRW" description="Indicates whether a sorting arrow should appear for the listGrid, and its&amp;#010          location. See SortArrow type for details.&lt;br&gt;&amp;#010          Clicking the sort arrow reverses the direction of sorting for the current sort&amp;#010          column (if any), or sorts the listGrid by its first sortable column. The arrow&amp;#010          image on the button indicates the current direction of sorting.&amp;#010          If undefined, the sort arrow will show up in the sorted field, and the&amp;#010          corner sort button will be displayed if a vertical scrollbar is being displayed" name="showSortArrow" valueType="SortArrow" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>sorting</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Layout.memberOverlap" flags="IR" description="Number of pixels by which each member should overlap the preceding member, used for&amp;#010 creating an &quot;stack of cards&quot; appearance for the members of a Layout.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;memberOverlap&lt;/code&gt; can be used in conjunction with ${isc.DocUtils.linkForRef('attr:Layout.stackZIndex')} to create&amp;#010 a particular visual stacking order.&amp;#010 &lt;P&gt;&amp;#010 Note that overlap of individual members can be accomplished with a negative setting for&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.extraSpace')}." name="memberOverlap" valueType="positiveInteger" defaultValue="0" type="attr" definingClass="class:Layout">
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:Button.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:values" description="Manipulating the values stored in the form." name="values" type="group">
</docItem>
<docItem ref="attr:Menu.defaultWidth" flags="IRW" description="The default menu width." name="defaultWidth" valueType="number" defaultValue="150" type="attr" definingClass="class:Menu">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DSResponse.status" flags="R" description="Same meaning as ${isc.DocUtils.linkForRef('attr:RPCResponse.status')}, except DSResponses have additional error codes,&amp;#010 such as ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR','validation failure')}." name="status" valueType="Number" defaultValue="0" type="attr" definingClass="class:DSResponse">
<seeAlso ref="group:dataSourceOperations" description="for standard return types for DataSource Operations"></seeAlso>
    <groups>errorHandling</groups>
</docItem>
<docItem ref="attr:DynamicForm.disableValidation" flags="IRW" description="If set to true, client-side validators will not run on the form when validate() is&amp;#010 called.  Server-side validatiors (if any) will still run on attempted save." name="disableValidation" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<seeAlso ref="method:DynamicForm.submit">
</seeAlso>
    <groups>validation</groups>
</docItem>
<docItem exampleConfig="HeaderItem.xml" ref="class:HeaderItem" description="FormItem for showing a header within a DynamicForm.&amp;#010 &lt;p&gt;&amp;#010 Set the &lt;code&gt;defaultValue&lt;/code&gt; of this item to the HTML you want to embed in the form." name="HeaderItem" type="class">
    <attrs>attr:HeaderItem.defaultValue</attrs>
    <attrs>attr:HeaderItem.showTitle</attrs>
    <attrs>attr:HeaderItem.textBoxStyle</attrs>
    <attrs>attr:HeaderItem.colSpan</attrs>
    <attrs>attr:HeaderItem.startRow</attrs>
    <attrs>attr:HeaderItem.endRow</attrs>
</docItem>
<docItem ref="method:ListGrid.refreshCell" flags="" description=" Refresh an individual cell without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cell's value, CSS class, and CSS text will be refreshed, to the current values returned&amp;#010 by getCellValue(), getCellStyle() and getCellCSSText() respectively.&amp;#010&amp;#010" name="refreshCell" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.refreshCellStyle" description="to update just styling"></seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
<params description="column number of cell to refresh" optional="false" name="colNum" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('calculatedCellValue')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:TreeGrid.openIconSuffix" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} is true, this suffix will be appended to the&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for open folders in this treeGrid." name="openIconSuffix" valueType="String" defaultValue="&quot;open&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="attr:ResultSet.initialLength" flags="IA" description="Initial value of the data set length." name="initialLength" valueType="integer" defaultValue="null" type="attr" definingClass="class:ResultSet">
    <groups>fetching</groups>
    <groups>cacheSync</groups>
</docItem>
<docItem ref="attr:Chart.facets" flags="IR" description="An Array of facets, exactly analogous to ${isc.DocUtils.linkForRef('attr:CubeGrid.facets')}, except that:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; the &quot;inlinedValues&quot; property can be set on a facet to change data representation as&amp;#010 described under ${isc.DocUtils.linkForRef('attr:Chart.data')}.&amp;#010 &lt;li&gt; for a non-inlined facet, Charts support auto-derivation of facetValues from the data.&amp;#010 &lt;/ul&gt;" name="facets" valueType="Array of Facet or Facet" defaultValue="null" type="attr" definingClass="interface:Chart">
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.visibility" description="Controls widget visibility when the widget is initialized. See Visibility type for&amp;#010      details." name="visibility" valueType="Visibility" defaultValue="Canvas.INHERIT" definingClass="class:Canvas">
    <getter>isVisible</getter>
    <setter>show</setter>
    <setter>hide</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.mouseWheel" flags="A" description="&amp;#010 Executed when the mouse wheel is actuated.&amp;#010&amp;#010" name="mouseWheel" type="method" platformNotes="Not all end user systems have mouse wheels." definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customMouseEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:ListGrid.getEditorValueMap" flags="A" description="&amp;#010  Returns the valueMap to display for a field when it is displayed in the editor while&amp;#010  editing some record.&lt;br&gt;&amp;#010  Called when a user starts to edit a field, or whenever the field valueMap is updated via&amp;#010  a call to ${isc.DocUtils.linkForRef('method:ListGrid.setValueMap')} or ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap')}.&amp;#010  Default implementation will return the &lt;code&gt;field.editorValueMap&lt;/code&gt; if specified, otherwise&amp;#010  &lt;code&gt;field.valueMap&lt;/code&gt; - can be overriden to provide a&amp;#010  different specific valueMap for some field based on the record/field data.&amp;#010&amp;#010" name="getEditorValueMap" type="method" definingClass="class:ListGrid">
<params description="field definition field for which we need a valueMap" optional="false" name="field" type="ListGridField">
</params>
<params description="Field values for record being edited. Note that this will include                              the current edit values for fields that have not yet been saved.&amp;#010                              May be null, if editing a new record." optional="false" name="values" type="object">
</params>
<returns description="ValueMap for the edit field (or null if no valueMap required)" type="ValueMap"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:CanvasItem.canvasProperties" flags="IRW" description="Properties to apply to this canvas on creation if this.canvas is not already a canvas &amp;#010 instance." name="canvasProperties" valueType="Object" defaultValue="{}" type="attr" definingClass="class:CanvasItem">
</docItem>
<docItem ref="attr:Scrollbar.scrollTarget" flags="IRWA" description="The widget whose contents should be scrolled by this scrollbar. The scrollbar thumb&amp;#010          is sized according to the amount of visible vs. scrollable content in this widget." name="scrollTarget" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Scrollbar">
    <setter>setScrollTarget</setter>
</docItem>
<docItem ref="attr:DataSource.addGlobalId" flags="IRA" description="Whether to make this DataSource available as a global variable for convenience." name="addGlobalId" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DataSource">
    <groups>identity</groups>
</docItem>
<docItem ref="attr:FormItem.validators" flags="IR" description="Validators for this form item.  &amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Note:&lt;/b&gt; these validators will only be run on the client; to&amp;#010 do real client-server validation, validators must be specified on the DataSource." name="validators" valueType="Array of Validator" defaultValue="null" type="attr" definingClass="class:FormItem">
</docItem>
<docItem ref="attr:Img.showTitle" flags="IRWA" description="Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be &amp;#010 displayed for this component.&lt;br&gt;&amp;#010 Applies to Image-based components only, where the title will be rendered out in a label&amp;#010 floating over the component" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Img">
</docItem>
<docItem ref="method:DynamicForm.setFieldErrors" flags="" description=" Set field validation error[s] for some field.&lt;br&gt;&amp;#010 The errors parameter may be passed in as a string (a single error message), or an array of&amp;#010 strings.&lt;br&gt;&amp;#010 The showErrors parameter allows the errors to be displayed immediately. Alternatively, an&amp;#010 explicit call to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')} will display the errors for this field.&amp;#010" name="setFieldErrors" type="method" definingClass="class:DynamicForm">
<params description="field to apply the new errors to" optional="false" name="fieldName" type="string">
</params>
<params description="errors to apply to the field in question" optional="false" name="errors" type="string | array of strings">
</params>
<params description="If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display" optional="false" name="show" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="classAttr:Dialog.CONFIRM_TITLE" flags="IRW" description="Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.confirm')} method.&amp;#010 Note that a custom title can be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="CONFIRM_TITLE" valueType="HTML" defaultValue="&quot;Confirm&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Canvas.destroyed" flags="RA" description="If this property is set to &lt;code&gt;true&lt;/code&gt;, the ${isc.DocUtils.linkForRef('method:Canvas.destroy','destroy()')} method&amp;#010 has been called on this canvas. This implies the canvas is no longer valid. Its ID has been&amp;#010 removed from global scope, and calling standard canvas APIs on it is likely to result in &amp;#010 errors." name="destroyed" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.destroy">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.sorterConstructor" flags="IR" description="Widget class for the corner sort button, if showing. For consistent appearance, this&amp;#010 is usually set to match ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')}" name="sorterConstructor" valueType="Class" defaultValue="Button" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ImgButton.iconWidth" flags="IR" description="Width in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Canvas.willAcceptDrop" flags="A" description="&amp;#010 Returns true if the widget object being dragged can be dropped on this widget, and&amp;#010 false otherwise.  The default implementation of this method simply compares the&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.dragType')} of the &lt;code&gt;dragTarget&lt;/code&gt; (the component being dragged from)&amp;#010 with the list of ${isc.DocUtils.linkForRef('attr:Canvas.dropTypes')} on this Canvas.  If the ${isc.DocUtils.linkForRef('attr:Canvas.dropTypes')}&amp;#010 list contains the ${isc.DocUtils.linkForRef('attr:Canvas.dragType')} value, then this method returns true.  Otherwise it&amp;#010 returns false.&amp;#010&amp;#010" name="willAcceptDrop" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.dragType">
</seeAlso>
<seeAlso ref="attr:Canvas.dropTypes">
</seeAlso>
<seeAlso ref="attr:Canvas.dragTarget">
</seeAlso>
<seeAlso ref="method:Canvas.drop">
</seeAlso>
<returns description="true if the widget object being dragged can be dropped on this widget,                      false otherwise" type="boolean"></returns>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:SelectItem.pickerIconSrc" flags="IRWA" description="If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the&amp;#010 src of the picker icon image to be displayed." name="pickerIconSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/SelectItem_PickButton_icon.gif&quot;" type="attr" definingClass="class:SelectItem">
    <groups>pickerIcon</groups>
</docItem>
<docItem ref="method:GridRenderer.cellDoubleClick" flags="A" description=" Called when a cell receives a double click event.&amp;#010&amp;#010" name="cellDoubleClick" type="method" definingClass="class:GridRenderer">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonIcon" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the icon shown on the&amp;#010 auto-generated &lt;code&gt;headerMenuButton&lt;/code&gt;" name="headerMenuButtonIcon" valueType="URL" defaultValue="&quot;[SKIN]/ListGrid/sort_descending.gif&quot;" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.integerRange" flags="IR" description="Tests whether the value for this field is a whole number within the range &amp;#010  specified.  The &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; properties on the validator&amp;#010  are used to determine the acceptable range." name="integerRange" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
    <examples>${isc.DocUtils.linkForExampleId('validationBuiltins')}</examples>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeOffsetLeft" flags="IRA" description="Amount the contained Canvas should be offset from the left.  Defaults to the size for&amp;#010 the left edge.  Set smaller to allow the contained Canvas to overlap the edge and&amp;#010 corner media." name="edgeOffsetLeft" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="group:baseLine" description="The baseLine is StretchImg that is placed along the edge of the TabBar that borders on&amp;#010 the pane, occluding the pane's actual border but matching it exactly.  The selected tab&amp;#010 is in front of the baseLine, and the rest are behind it." name="baseLine" type="group">
    <refs>attr:TabBar.baseLineThickness</refs>
    <refs>attr:TabBar.baseLineSrc</refs>
    <refs>attr:TabBar.baseLineCapSize</refs>
</docItem>
<docItem ref="attr:MenuButton.height" flags="IRW" description="Default height of the button." name="height" valueType="Number or String" defaultValue="22" type="attr" definingClass="class:MenuButton">
</docItem>
<docItem ref="attr:RPCRequest.timeout" flags="IRWA" description="Overrides RPCManager.defaultTimeout for this request only.  If you're using queuing, note&amp;#010 that the timeout setting derived from the last request in the queue is used for the entire&amp;#010 queue.  If you want to override the timeout for the queue, make sure to set your override at&amp;#010 least on the last request in the queue." name="timeout" valueType="number" defaultValue="RPCManager.defaultTimeout" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.defaultTimeout">
</seeAlso>
</docItem>
<docItem ref="method:Layout.addMembers" flags="" description="&amp;#010  Add one or more canvases to the layout, optionally at specific positions.&amp;#010&amp;#010  NOTE: depending on the layout policy, adding a new member may cause existing members to&amp;#010  resize.&amp;#010&amp;#010" name="addMembers" type="method" definingClass="class:Layout">
<params description="array of canvases to be added, or reference to single                                          canvas" optional="false" name="newMembers" type="Array or object">
</params>
<params description="position to add newMembers; if omitted newMembers                                          will be added at the last position" optional="true" name="position" type="Number">
</params>
</docItem>
<docItem ref="attr:Slider.thumbThickWidth" flags="IRW" description="The dimension of the thumb perpendicular to the slider track." name="thumbThickWidth" valueType="integer" defaultValue="23" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:CheckboxItem.valueIconWidth" flags="IRW" description="Width of the checkbox image." name="valueIconWidth" valueType="number" defaultValue="13" type="attr" definingClass="class:CheckboxItem">
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:TreeGrid.folderClosedImage" deprecated="as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}" flags="IRW" description="The filename of the default icon for all closed folder nodes in this treeGrid. Use&amp;#010 the node.icon property (null by default) to specify a custom image for an individual&amp;#010 folder node. The same custom image will be used for both the open and closed folder&amp;#010 images." name="folderClosedImage" valueType="string" defaultValue="null" type="attr" definingClass="class:TreeGrid">
</docItem>
<docItem ref="attr:GridRenderer.totalRows" flags="IRW" description="Total number of rows in the grid.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: in order to create a valid grid, you must either provide a totalRows value or implement&amp;#010 getTotalRows()" name="totalRows" valueType="number" defaultValue="0" type="attr" definingClass="class:GridRenderer">
    <getter>getTotalRows</getter>
<seeAlso ref="method:GridRenderer.getTotalRows">
</seeAlso>
</docItem>
<docItem ref="method:ListGrid.getDragTrackerTitle" flags="" description=" Return &quot;title&quot; HTML to display as a drag tracker when the user drags some record.&lt;br&gt;&amp;#010 Default implementation will display the cell value for the title field (see &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.getTitleField')}) for the record(s) being dragged (including any&amp;#010 icons / custom formatting / styling, etc).&amp;#010 &lt;p&gt;&amp;#010 Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to &lt;code&gt;&quot;title&quot;&lt;/code&gt;.&amp;#010" name="getDragTrackerTitle" type="method" definingClass="class:ListGrid">
<params description="First selected record being dragged" optional="false" name="record" type="ListGridRecord">
</params>
<params description="row index of first record being dragged" optional="false" name="rowNum" type="number">
</params>
<returns description="Title for the row. Default implementation looks at the value of the                  title-field cell for the row." type="string"></returns>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="method:ListGrid.getRequiredFieldMessage" flags="" description=" Returns the message to display when a user attempts to save a required field with an&amp;#010 empty value. Override for localization if required.&amp;#010" name="getRequiredFieldMessage" type="method" definingClass="class:ListGrid">
<params description="definition of the field being edited" optional="false" name="field" type="object">
</params>
<params description="record object being edited" optional="false" name="record" type="object">
</params>
<returns description="&quot;Field is required&quot;" type="string"></returns>
    <groups>gridValidation</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:FormItem.title" flags="IRW" description="User visible title for this form item." name="title" valueType="String" defaultValue="null" type="attr" definingClass="class:FormItem">
    <getter>getTitle</getter>
    <groups>basics</groups>
</docItem>
<docItem ref="method:FormItem.stopHover" flags="A" description=" This method is fired when the user rolls off this item (or the title for this item) and&amp;#010 will clear any hover canvas shown by the item.&amp;#010" name="stopHover" type="method" definingClass="class:FormItem">
    <groups>Hovers</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Button.title" description="The text title to display in this button." name="title" valueType="string" defaultValue="varies" definingClass="class:Button">
    <getter>getTitle</getter>
    <setter>setTitle</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonStates')}</examples>
    <groups>basics</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:ListGrid.getCellRecord" flags="A" description=" Return the pointer to a particular record by record number.&lt;br&gt;&amp;#010 Notes:&lt;br&gt;&amp;#010 - If this is a databound grid, and the record for some row has not yet been loaded, &amp;#010   returns the ${isc.DocUtils.linkForRef('classAttr:Array.LOADING')} marker, and a fetch will be initialized to retrieve the&amp;#010   record from the server.&lt;br&gt;&amp;#010 - If this is a new row in editable ListGrid, and has not yet been saved, this method will&amp;#010   return null.&amp;#010" name="getCellRecord" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getRecord">
</seeAlso>
<seeAlso ref="method:ListGrid.getEditedRecord">
</seeAlso>
<params description="row index of record to return." optional="false" name="recordNum" type="number">
</params>
<returns description="Record object for the row." type="ListGridRecord"></returns>
</docItem>
<docItem ref="attr:Validator.errorMessage" flags="IR" description="Text to display if the value does not pass this validation check.&amp;#010 &lt;P&gt;&amp;#010 If unspecified, default error messages exist for all built-in validators, and a generic&amp;#010 message will be used for a custom validator that is not passed." name="errorMessage" valueType="errorMessage" defaultValue="null" type="attr" definingClass="class:Validator">
    <examples>${isc.DocUtils.linkForExampleId('conditionallyRequired')}</examples>
</docItem>
<docItem ref="class:FormItem" description="An Item that can participate in a DynamicForm, managing some value.&amp;#010 &lt;P&gt;&amp;#010 FormItems are never directly created, instead, FormItem descriptors are passed to a&amp;#010 DynamicForm.  See the ${isc.DocUtils.linkForRef('class:DynamicForm')} documentation for details." name="FormItem" type="class">
    <methods>method:FormItem.getFieldName</methods>
    <methods>method:FormItem.getTitle</methods>
    <methods>method:FormItem.getIconHeight</methods>
    <methods>method:FormItem.getIconWidth</methods>
    <methods>method:FormItem.setLeft</methods>
    <methods>method:FormItem.setTop</methods>
    <methods>method:FormItem.getErrorHTML</methods>
    <methods>method:FormItem.isDrawn</methods>
    <methods>method:FormItem.show</methods>
    <methods>method:FormItem.hide</methods>
    <methods>method:FormItem.getDisplayValue</methods>
    <methods>method:FormItem.setValueMap</methods>
    <methods>method:FormItem.setValueIcons</methods>
    <methods>method:FormItem.getValueFieldName</methods>
    <methods>method:FormItem.getDisplayFieldName</methods>
    <methods>method:FormItem.getOptionDataSource</methods>
    <methods>method:FormItem.setValue</methods>
    <methods>method:FormItem.getValue</methods>
    <methods>method:FormItem.stopHover</methods>
    <methods>method:FormItem.itemHover</methods>
    <methods>method:FormItem.titleHover</methods>
    <methods>method:FormItem.titleHoverHTML</methods>
    <methods>method:FormItem.itemHoverHTML</methods>
    <methods>method:FormItem.setDisabled</methods>
    <methods>method:FormItem.isDisabled</methods>
    <methods>method:FormItem.enable</methods>
    <methods>method:FormItem.disable</methods>
    <methods>method:FormItem.focusInItem</methods>
    <methods>method:FormItem.blurItem</methods>
    <methods>method:FormItem.showIf</methods>
    <methods>method:FormItem.defaultDynamicValue</methods>
    <methods>method:FormItem.focus</methods>
    <methods>method:FormItem.blur</methods>
    <methods>method:FormItem.click</methods>
    <methods>method:FormItem.iconClick</methods>
    <methods>method:FormItem.iconKeyPress</methods>
    <methods>method:FormItem.change</methods>
    <methods>method:FormItem.changed</methods>
    <methods>method:FormItem.transformInput</methods>
    <methods>method:FormItem.keyPress</methods>
    <methods>method:FormItem.getValueIcon</methods>
    <classMethods>classMethod:FormItem.create</classMethods>
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:FormItem.type</attrs>
    <attrs>attr:FormItem.editorType</attrs>
    <attrs>attr:FormItem.name</attrs>
    <attrs>attr:FormItem.title</attrs>
    <attrs>attr:FormItem.defaultValue</attrs>
    <attrs>attr:FormItem.ID</attrs>
    <attrs>attr:FormItem.emptyDisplayValue</attrs>
    <attrs>attr:FormItem.valueMap</attrs>
    <attrs>attr:FormItem.optionDataSource</attrs>
    <attrs>attr:FormItem.valueField</attrs>
    <attrs>attr:FormItem.displayField</attrs>
    <attrs>attr:FormItem.fetchMissingValues</attrs>
    <attrs>attr:FormItem.filterLocally</attrs>
    <attrs>attr:FormItem.dateFormatter</attrs>
    <attrs>attr:FormItem.timeFormatter</attrs>
    <attrs>attr:FormItem.valueIcons</attrs>
    <attrs>attr:FormItem.emptyValueIcon</attrs>
    <attrs>attr:FormItem.showValueIconOnly</attrs>
    <attrs>attr:FormItem.suppressValueIcon</attrs>
    <attrs>attr:FormItem.valueIconWidth</attrs>
    <attrs>attr:FormItem.valueIconHeight</attrs>
    <attrs>attr:FormItem.valueIconSize</attrs>
    <attrs>attr:FormItem.valueIconLeftPadding</attrs>
    <attrs>attr:FormItem.valueIconRightPadding</attrs>
    <attrs>attr:FormItem.imageURLPrefix</attrs>
    <attrs>attr:FormItem.imageURLSuffix</attrs>
    <attrs>attr:FormItem.form</attrs>
    <attrs>attr:FormItem.validators</attrs>
    <attrs>attr:FormItem.required</attrs>
    <attrs>attr:FormItem.visible</attrs>
    <attrs>attr:FormItem.disabled</attrs>
    <attrs>attr:FormItem.accessKey</attrs>
    <attrs>attr:FormItem.tabIndex</attrs>
    <attrs>attr:FormItem.globalTabIndex</attrs>
    <attrs>attr:FormItem.showTitle</attrs>
    <attrs>attr:FormItem.titleOrientation</attrs>
    <attrs>attr:FormItem.titleAlign</attrs>
    <attrs>attr:FormItem.wrapTitle</attrs>
    <attrs>attr:FormItem.validateOnChange</attrs>
    <attrs>attr:FormItem.width</attrs>
    <attrs>attr:FormItem.height</attrs>
    <attrs>attr:FormItem.colSpan</attrs>
    <attrs>attr:FormItem.rowSpan</attrs>
    <attrs>attr:FormItem.startRow</attrs>
    <attrs>attr:FormItem.endRow</attrs>
    <attrs>attr:FormItem.align</attrs>
    <attrs>attr:FormItem.textAlign</attrs>
    <attrs>attr:FormItem.left</attrs>
    <attrs>attr:FormItem.top</attrs>
    <attrs>attr:FormItem.icons</attrs>
    <attrs>attr:FormItem.defaultIconSrc</attrs>
    <attrs>attr:FormItem.showOverIcons</attrs>
    <attrs>attr:FormItem.showFocusedIcons</attrs>
    <attrs>attr:FormItem.iconVAlign</attrs>
    <attrs>attr:FormItem.iconHeight</attrs>
    <attrs>attr:FormItem.iconWidth</attrs>
    <attrs>attr:FormItem.prompt</attrs>
    <attrs>attr:FormItem.showIcons</attrs>
    <attrs>attr:FormItem.errorIconHeight</attrs>
    <attrs>attr:FormItem.errorIconWidth</attrs>
    <attrs>attr:FormItem.errorIconSrc</attrs>
    <attrs>attr:FormItem.showErrorIcon</attrs>
    <attrs>attr:FormItem.showErrorText</attrs>
    <attrs>attr:FormItem.showErrorStyle</attrs>
    <attrs>attr:FormItem.errorOrientation</attrs>
    <attrs>attr:FormItem.hint</attrs>
    <attrs>attr:FormItem.showHint</attrs>
    <attrs>attr:FormItem.showFocused</attrs>
    <attrs>attr:FormItem.showDisabled</attrs>
    <attrs>attr:FormItem.cellStyle</attrs>
    <attrs>attr:FormItem.hintStyle</attrs>
    <attrs>attr:FormItem.titleStyle</attrs>
    <attrs>attr:FormItem.textBoxStyle</attrs>
    <attrs>attr:FormItem.cellClassName</attrs>
    <attrs>attr:FormItem.errorCellClassName</attrs>
    <attrs>attr:FormItem.titleClassName</attrs>
    <attrs>attr:FormItem.titleErrorClassName</attrs>
    <attrs>attr:FormItem.hintClassName</attrs>
    <attrs>attr:FormItem.hoverDelay</attrs>
    <attrs>attr:FormItem.hoverWidth</attrs>
    <attrs>attr:FormItem.hoverHeight</attrs>
    <attrs>attr:FormItem.hoverAlign</attrs>
    <attrs>attr:FormItem.hoverVAlign</attrs>
    <attrs>attr:FormItem.hoverStyle</attrs>
    <attrs>attr:FormItem.hoverOpacity</attrs>
</docItem>
<docItem ref="attr:Tree.parentIdField" flags="IRA" description="For trees with modelType &quot;parent&quot;, this property specifies the name of the property&amp;#010 that contains the unique parent ID of a node.  By default this is set to&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeNode.parentId')}." name="parentIdField" valueType="string" defaultValue="&quot;parentId&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:TreeNode.parentId">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="method:Canvas.getVisibleWidth" flags="A" description="      Return the visible width of the Canvas.&amp;#010&amp;#010" name="getVisibleWidth" type="method" definingClass="class:Canvas">
<returns description="visible width in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Log.getCallTrace" flags="" description=" Returns a one-line summary of the current method call, showing method name and passed&amp;#010 arguments.&amp;#010&amp;#010" name="getCallTrace" type="method" platformNotes="IE only." definingClass="class:Log">
<params description="arguments object from the call to trace.  On IE, defaults to the                             calling function's arguments" optional="true" name="args" type="Arguments">
</params>
    <groups>debug</groups>
</docItem>
<docItem ref="group:dynamicString" name="dynamicString" type="group">
</docItem>
<docItem ref="method:Canvas.setContents" flags="" description=" Changes the contents of a widget to newContents, an HTML string.&amp;#010 &lt;P&gt;&amp;#010 When ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents','dynamicContents')} is set, &lt;code&gt;setContents()&lt;/code&gt; can&amp;#010 also be called with no arguments to cause contents to be re-evaluated.&amp;#010&amp;#010" name="setContents" type="method" definingClass="class:Canvas">
<params description="an HTML string to be set as the contents of this widget" optional="true" name="newContents" type="string">
</params>
    <examples>${isc.DocUtils.linkForExampleId('setContents')}</examples>
</docItem>
<docItem ref="method:ListGridField.getCellValue" deprecated="As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue')}." flags="" description=" A stringMethod which returns the cell value to display for this field for some record.&amp;#010 If defined, called by ListGrid.getCellValue().  Called in the scope of the field object.&amp;#010&amp;#010 Deprecated as of Jan 12 05 in favor of field.formatCellValue, because 'getCellValue()'&amp;#010 is a lower-level API which handles (for example) returning the HTML for editors within&amp;#010 the cell.&amp;#010  &amp;#010" name="getCellValue" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.getCellValue">
</seeAlso>
<seeAlso ref="method:ListGridField.formatCellValue">
</seeAlso>
<params description="the ListGrid for which we're returning a cellValue" optional="false" name="viewer" type="ListGrid">
</params>
<params description="the current record object" optional="false" name="record" type="object">
</params>
<params description="row-index of the current record" optional="false" name="recordNum" type="nubmer">
</params>
<params description="current field object" optional="false" name="field" type="listGridField">
</params>
<params description="column-index of the current field" optional="false" name="fieldNum" type="number">
</params>
<params description="unformatted value for this field, determined via                           ListGrid.getRawCellValue()" optional="false" name="value" type="any">
</params>
<returns description="value to display in the ListGrid cell" type="any"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="type:VerticalAlignment" name="VerticalAlignment" type="type">
<values description="At the top of the container" value="Canvas.TOP"></values>
<values description="Center within container." value="Canvas.CENTER"></values>
<values description="At the bottom of the container" value="Canvas.BOTTOM"></values>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:FormItem.getErrorHTML" flags="A" description=" Output the HTML for an error message in a form element. Default behavior respects&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.showErrorIcon')} and ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')} as described in the&amp;#010 documentation for those attributes.&amp;#010" name="getErrorHTML" type="method" definingClass="class:FormItem">
<params description="error message string or array of error messages" optional="false" name="error" type="string | array">
</params>
<returns description="HTML to display the error" type="HTML"></returns>
</docItem>
<docItem ref="attr:SelectItem.optionFilterContext" flags="IRA" description="If this item has a specified &lt;code&gt;optionDataSource&lt;/code&gt;, and this property is&amp;#010 not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when&amp;#010 performing the filter operation on the dataSource to obtain the set of options for the&amp;#010 list." name="optionFilterContext" valueType="RPCRequest Properties" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="group:gridValidation" description="ListGrids support automatic validation of edited cells / records. This group is a collection &amp;#010 of APIs related to the validation subsystem.&amp;#010 &lt;p&gt;&amp;#010 Default validation occurs in response to the user navigating between edit cells &amp;#010 (see ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell')}) or whenever edited values are to be committed to the&amp;#010 server for saving.  Standard validation can also be triggered for a cell or row programatically at&amp;#010 any time.&lt;br&gt;&amp;#010 When standard validation occurs, ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} will be run on each&amp;#010 cell to be validated.&lt;br&gt;&amp;#010 In addition to this standard behavior developers can add custom errors to fields&amp;#010 via ${isc.DocUtils.linkForRef('method:ListGrid.setFieldError')} / ${isc.DocUtils.linkForRef('method:ListGrid.setFieldError')}." name="gridValidation" type="group">
    <refs>method:ListGrid.validateRow</refs>
    <refs>method:ListGrid.validateCell</refs>
    <refs>method:ListGrid.getRequiredFieldMessage</refs>
    <refs>method:ListGrid.hasErrors</refs>
    <refs>method:ListGrid.rowHasErrors</refs>
    <refs>method:ListGrid.cellHasErrors</refs>
    <refs>method:ListGrid.getRowErrors</refs>
    <refs>method:ListGrid.getCellErrors</refs>
    <refs>method:ListGrid.setFieldError</refs>
    <refs>method:ListGrid.setRowErrors</refs>
    <refs>method:ListGrid.clearFieldError</refs>
    <refs>attr:ListGridField.validators</refs>
    <refs>attr:ListGridField.validateOnChange</refs>
    <refs>attr:ListGridField.required</refs>
    <refs>attr:ListGrid.validateByCell</refs>
    <refs>attr:ListGrid.validateOnChange</refs>
    <refs>attr:ListGrid.neverValidate</refs>
<seeAlso ref="group:editing">
</seeAlso>
</docItem>
<docItem ref="attr:SpinnerItem.min" flags="IRW" description="Minimum valid value for this item" name="min" valueType="number" defaultValue="null" type="attr" definingClass="class:SpinnerItem">
    <examples>${isc.DocUtils.linkForExampleId('spinnerItem')}</examples>
</docItem>
<docItem ref="attr:RestDataSource.dataFormat" flags="IR" description="Expected format for server responses. RestDataSources handle &lt;code&gt;&quot;json&quot;&lt;/code&gt; and&amp;#010 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; format responses by default. See class overview documentation for &amp;#010 examples of responses in each format." name="dataFormat" valueType="string" defaultValue="&quot;xml&quot;" type="attr" definingClass="class:RestDataSource">
</docItem>
<docItem ref="method:TabSet.getTabNumber" flags="" description=" Get the index of a tab, from the tab or tabID.  If passed a number, just returns it.&amp;#010" name="getTabNumber" type="method" definingClass="class:TabSet">
<params optional="false" name="tab" type="number | ID | tab">
</params>
<returns description="the index of the tab, or -1 if not found" type="number"></returns>
</docItem>
<docItem ref="group:rpcPrompt" description="The properties in this group all deal with setting and styling a modal prompt during an RPC&amp;#010 call to the server." name="rpcPrompt" type="group">
    <refs>classAttr:RPCRequest.useCursorTracker</refs>
    <refs>classAttr:RPCManager.defaultPrompt</refs>
    <refs>classAttr:RPCManager.promptStyle</refs>
    <refs>classAttr:RPCManager.useCursorTracker</refs>
    <refs>classAttr:RPCManager.promptCursor</refs>
    <refs>classAttr:RPCManager.showPrompt</refs>
    <refs>attr:RPCRequest.promptStyle</refs>
    <refs>attr:RPCRequest.promptCursor</refs>
    <refs>attr:RPCRequest.prompt</refs>
    <refs>attr:RPCRequest.showPrompt</refs>
</docItem>
<docItem ref="method:Tree.hasFolders" flags="" description="&amp;#010 Return true if this this node has any children that are folders.&amp;#010&amp;#010" name="hasFolders" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the node has children that are folders" type="boolean"></returns>
</docItem>
<docItem ref="attr:FusionChart.dataColors" flags="IR" description="An array of colors to use for a series of visual elements representing data (eg columns,&amp;#010 bars, pie slices), any of which may be adjacent to any other.&amp;#010 &lt;P&gt;&amp;#010 Colors are expressed as hexademical RRGGBB Strings &lt;b&gt;with no leading '#' character&lt;/b&gt;." name="dataColors" valueType="Array of CSSColor" defaultValue="see below" type="attr" definingClass="class:FusionChart">
</docItem>
<docItem ref="method:DynamicForm.setErrors" flags="A" description=" Setter for validation errors on this form. Errors passed in should be a Javascript object&amp;#010 of the format&lt;br&gt;&amp;#010 &lt;code&gt;{fieldName1:errors, fieldName2:errors}&lt;/code&gt;&lt;br&gt;&amp;#010 Where the &lt;code&gt;errors&lt;/code&gt; value may be either a string (single error message) or an&amp;#010 array of strings (if multiple errors should be applied to the field in question).&amp;#010" name="setErrors" type="method" definingClass="class:DynamicForm">
<params description="list of errors as an object with the field names as keys" optional="false" name="errors" type="object">
</params>
<params description="If true redraw form to display errors now. Otherwise errors can be displayed by calling&amp;#010      ${isc.DocUtils.linkForRef('method:DynamicForm.showErrors')}&lt;br&gt;&amp;#010      Note: When the errors are shown, &amp;#010      ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors','handleHiddenValidationErrors()')} will&amp;#010      be fired for errors on hidden fields, or with no associated formItem." optional="false" name="showErrors" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="classMethod:Page.getSkinDir" flags="" description="		Return the directory for media that's part of the skin&amp;#010&amp;#010" name="getSkinDir" type="classMethod" definingClass="class:Page">
<returns description="base URL for skin media" type="string"></returns>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="object:ListGridRecord" description="A ListGridRecord is a JavaScript Object whose properties contain values for each&amp;#010 ${isc.DocUtils.linkForRef('object:ListGridField')}.  A ListGridRecord may have additional properties which affect the&amp;#010 record's appearance or behavior, or which hold data for use by custom logic or other,&amp;#010 related components.&amp;#010 &lt;p&gt;&amp;#010 For example a ListGrid that defines the following fields:&amp;#010 &lt;pre&gt;&amp;#010 fields : [&amp;#010     {name: &quot;field1&quot;},&amp;#010     {name: &quot;field2&quot;}&amp;#010 ],&amp;#010 &lt;/pre&gt;&amp;#010 Might have the following data:&amp;#010 &lt;pre&gt;&amp;#010 data : [&amp;#010     {field1: &quot;foo&quot;, field2: &quot;bar&quot;, customProperty:5},&amp;#010     {field1: &quot;field1 value&quot;, field2: &quot;field2 value&quot;, enabled:false}&amp;#010 ]&amp;#010 &lt;/pre&gt;&amp;#010 Each line of code in the &lt;code&gt;data&lt;/code&gt; array above creates one JavaScript Object via&amp;#010 JavaScript {type:ObjectLiteral,object literal} notation.  These JavaScript Objects are&amp;#010 used as ListGridRecords.&amp;#010 &lt;P&gt;&amp;#010 Both records shown above have properties whose names match the name property of a&amp;#010 ListGridField, as well as additional properties.  The second record will be disabled due to&amp;#010 &lt;code&gt;enabled:false&lt;/code&gt;; the first record has a property &quot;customProperty&quot; which will&amp;#010 have no effect by default but which may accessed by custom logic.&amp;#010 &lt;P&gt;&amp;#010 After a ListGrid is created and has loaded data, records may be accessed via&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.data')}, for example, listGrid.data.get(0) retrieves the first record.&amp;#010 ListGridRecords are also passed to many events, such as&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.cellClick','cellClick()')}.&amp;#010 &lt;P&gt;&amp;#010 A ListGridRecord is always an ordinary JavaScript Object regardless of how the grid's&amp;#010 dataset is loaded (static data, java server, XML web service, etc), and so supports the&amp;#010 normal behaviors of JavaScript Objects, including accessing and assigning to properties&amp;#010 via dot notation:&amp;#010 &lt;pre&gt;&amp;#010     var fieldValue = record.&lt;i&gt;fieldName&lt;/i&gt;;&amp;#010     record.&lt;i&gt;fieldName&lt;/i&gt; = newValue;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 Note however that simply assigning a value to a record won't cause the display to be&amp;#010 automatically refreshed - ${isc.DocUtils.linkForRef('method:ListGrid.refreshCell')} needs to be called.  Also,&amp;#010 consider ${isc.DocUtils.linkForRef('group:editing','editValues vs saved values')} when directly modifying&amp;#010 ListGridRecords.&amp;#010 &lt;P&gt;&amp;#010 See the attributes in the API tab for the full list of special properties on&amp;#010 ListGridRecords that will affect the grid's behavior." name="ListGridRecord" type="object">
    <treeLocation>Client Reference/Grids/ListGrid</treeLocation>
    <attrs>attr:ListGridRecord.enabled</attrs>
    <attrs>attr:ListGridRecord.isSeparator</attrs>
    <attrs>attr:ListGridRecord.singleCellValue</attrs>
    <attrs>attr:ListGridRecord.canDrag</attrs>
    <attrs>attr:ListGridRecord.canAcceptDrop</attrs>
    <attrs>attr:ListGridRecord.linkText</attrs>
<seeAlso ref="attr:ListGrid.data">
</seeAlso>
</docItem>
<docItem ref="attr:Applet.mayScript" flags="IR" description="Usable only in IE: if true allows Java-&gt;JS LiveConnect (other platforms that support&amp;#010  LiveConnect have it enabled by default and do not allow it to be disabled)." name="mayScript" valueType="boolean" defaultValue="true" type="attr" platformNotes="Relevant on IE only." definingClass="class:Applet">
<seeAlso ref="attr:Applet.scriptable">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.valueIconWidth" flags="IRW" description="Width for value icons for this listGrid.&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}.&amp;#010 Can be overridden at the field level" name="valueIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:SelectItem.multiple" flags="IRW" description="If true, this selectItem will be displayed as a tall list of options, and the user&amp;#010 will be able to select multiple options.&amp;#010 &lt;P&gt;&amp;#010 In this case the logical value of the formItem, as retrieved by &amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.getValue','getValue()')} and set via ${isc.DocUtils.linkForRef('method:FormItem.setValue','setValue()')}, is &amp;#010 an Array of Strings reflecting the selected values." name="multiple" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SelectItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:ResetItem" description="Button that resets the form to default values, by calling&amp;#010 &lt;code&gt;DynamicForm.resetValues()&lt;/code&gt;&amp;#010 &amp;#010 If you define a click handler on this item, you can return false to cancel the reset." name="ResetItem" type="class">
</docItem>
<docItem ref="method:Array.set" flags="" description=" Change the array element at a particular position.&amp;#010 &lt;P&gt;&amp;#010 set() can be used to expand the length of the list.&amp;#010&amp;#010" name="set" type="method" definingClass="object:Array">
<params description="position in the list to change" optional="false" name="pos" type="number">
</params>
<params description="new value for that position" optional="false" name="obj" type="object">
</params>
<returns description="whatever's at that position, null if not found" type="object"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="type:Overflow" name="Overflow" type="type">
<values description="Content that extends beyond the widget's width or height is                              displayed.&amp;#010                              Note: To have the content be sized only by the drawn size of &amp;#010                              the content set the overflow to be Canvas.VISIBLE and specify&amp;#010                              a small size, allowing the size to expand to the size required&amp;#010                              by the content.&amp;#010                              Leaving the width / height for the widget undefined will use the&amp;#010                              default value of 100, and setting the size to zero may cause the&amp;#010                              widget not to draw." value="Canvas.VISIBLE"></values>
<values description="Content that extends beyond the widget's width or height is                              clipped (hidden)." value="Canvas.HIDDEN"></values>
<values description="Horizontal and/or vertical scrollbars are displayed only if                              necessary. Content that extends beyond the remaining visible&amp;#010                              area is clipped." value="Canvas.AUTO"></values>
<values description="Horizontal and vertical scrollbars are always drawn inside the                              widget. Content that extends beyond the remaining visible area&amp;#010                              is clipped, and can be accessed via scrolling." value="Canvas.SCROLL"></values>
<values description="Clip horizontally but extend the canvas's clip region                              vertically if necessary." value="Canvas.CLIP_H"></values>
<values description="Clip vertically but extend the canvas's clip region                              horizontally if necessary." value="Canvas.CLIP_V"></values>
    <groups>sizing</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ImgButton.title" description="The text title to display in this button." name="title" valueType="string" defaultValue="varies" definingClass="class:ImgButton">
    <getter>getTitle</getter>
    <setter>setTitle</setter>
    <groups>basics</groups>
</docItem>
<docItem ref="method:Canvas.hide" flags="" description="			Sets the widget's CSS visibility attribute to &quot;hidden&quot;.&amp;#010" name="hide" type="method" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('showAndHide')}</examples>
    <groups>visibility</groups>
</docItem>
<docItem ref="attr:SectionItem.defaultValue" flags="IRW" description="Section items show their &lt;code&gt;value&lt;/code&gt; as title text for the section.&amp;#010 Therefore the simplest way to specify this text on the form item directly is via the&amp;#010 &lt;code&gt;defaultValue&lt;/code&gt; attribute." name="defaultValue" valueType="string" defaultValue="&quot;Section Header&quot;" type="attr" definingClass="class:SectionItem">
</docItem>
<docItem ref="classAttr:Canvas.TAB_INDEX_FLOOR" flags="R" description="Specifies the lower limit for automatically assigned tab indices for focusable canvii." name="TAB_INDEX_FLOOR" valueType="integer" defaultValue="1000" type="classAttr" definingClass="class:Canvas">
    <groups>focus</groups>
</docItem>
<docItem ref="group:dataSourceOperations" title="DataSource Operations" description="A DataSource Operation is a type of ${isc.DocUtils.linkForRef('group:operations','operation')} that acts on the set&amp;#010 of stored objects represented by a ${isc.DocUtils.linkForRef('class:DataSource')}, performing one of the basic actions&amp;#010 that makes sense on a set of similar records: &quot;fetch&quot;, &quot;add&quot;, &quot;update&quot; or &quot;remove&quot;.  &amp;#010 &lt;P&gt;&amp;#010 Each DataSource operation has specific request and response data, for example, in the&amp;#010 &quot;fetch&quot; DataSource operation, the request data is expected to be search criteria, and the&amp;#010 response data is expected to be a list of matching DataSource records.  Listed below are the&amp;#010 request data and response data for each DataSource operation type, and what they mean.  &amp;#010 &lt;P&gt;&amp;#010 DataSource records are represented on the client by a JavaScript Object,&amp;#010 where each property in the Object maps a DataSource field name to the field value - hence&amp;#010 the DataSource operations below are in essence a way of exchanging records from client to&amp;#010 server and back.&amp;#010 &lt;P&gt;&amp;#010 If you are using ${isc.DocUtils.linkForRef('group:serverDataIntegration','server-side data integration')} with the&amp;#010 SmartClient Java server, see the ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for&amp;#010 information about how DataSource Requests arrive on the server (specifically&amp;#010 com.isomophic.datasource.DSRequest) and how to provide responses &amp;#010 (specifically com.isomorphic.datasource.DSResponse.setData()).&amp;#010 &lt;P&gt;&amp;#010 If you are using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')} to directly&amp;#010 consume services that use XML, JSON or other formats, see the &quot;Editing and Saving&quot; section&amp;#010 of the ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')} topic.&amp;#010 &lt;P&gt;&amp;#010&amp;#010 &lt;b&gt;fetch&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Request data: filter criteria, as an Object&amp;#010 &lt;li&gt;Response data: matching records, as an Array of Objects&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 &lt;b&gt;add&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Request data: new record, as an Object&amp;#010 &lt;li&gt;Response data: new record as stored, as an Object&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 &lt;b&gt;update&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Request data: primary keys of record to update, and new values (or just complete updated&amp;#010 record), as an Object&amp;#010 &lt;li&gt;Response data: new record as stored, as an Object&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 &lt;b&gt;remove&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Request data: primary keys of record to delete, as an Object&amp;#010 &lt;li&gt;Response data: minimally the primary keys of deleted record (can be complete record), as&amp;#010 an Object&amp;#010 &lt;/ul&gt;" name="dataSourceOperations" type="group">
    <treeLocation>Client Reference/Data Binding</treeLocation>
</docItem>
<docItem ref="attr:ListGrid.saveByCell" flags="IRW" description="Whether edits should be saved whenever the user moves between cells in the current edit&amp;#010 row.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to this.editByCell.&amp;#010 &lt;P&gt;&amp;#010 To avoid automatic saving entirely, set ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')}:false." name="saveByCell" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.editByCell">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="group:fieldState" name="fieldState" type="group">
    <refs>method:ListGrid.fieldStateChanged</refs>
</docItem>
<docItem ref="attr:Canvas.htmlElement" flags="IRWA" description="If specified as a pointer to an HTML element present in the DOM, this canvas will be&amp;#010 rendered inside that element on ${isc.DocUtils.linkForRef('method:Canvas.draw','draw()')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;i&gt;NOTES:&lt;/i&gt;&lt;br&gt;&amp;#010 This feature is intended for temporary integration with legacy page architectures only;&amp;#010 the native browser's reaction to DOM insertion is unspecified and unsupported. For&amp;#010 consistent cross-browser layout and positioning semantics, use Canvas parents&amp;#010 (especially Layouts) and use absolute positioning at top level.&amp;#010 &lt;P&gt;&amp;#010 Persistence of htmlElement: If ${isc.DocUtils.linkForRef('attr:Canvas.htmlPosition')} is set to &lt;code&gt;&quot;replace&quot;&lt;/code&gt;&amp;#010 the htmlElement will be removed from the DOM when the canvas is drawn - therefore the&amp;#010 htmlElement attribute will be cleared at this time.&amp;#010 Otherwise if a Canvas is clear()d and then draw()n again it will &amp;#010 be rendered inside the same htmlElement.&lt;br&gt;&amp;#010 If a Canvas is added as a child to Canvas parent, its htmlElement will be dropped.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.position')} should typically be set to &lt;code&gt;&quot;relative&quot;&lt;/code&gt; if the widget &amp;#010 is to be rendered inline within a standard page." name="htmlElement" valueType="HTML Element" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setHtmlElement</setter>
    <groups>htmlElement</groups>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:DataSource.xmlSerialize" flags="A" description=" Serialize a JavaScript object as XML.&amp;#010 &lt;P&gt;&amp;#010 The JavaScript Object passed to ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} becomes an XML&amp;#010 element named after the ${isc.DocUtils.linkForRef('attr:DataSource.tagName')} (or ${isc.DocUtils.linkForRef('attr:DataSource.ID')} if&amp;#010 tagName is unset).  Each property of the object becomes a subElement.  For example,&amp;#010 using a DataSource to serialize like this:&amp;#010 &lt;pre&gt;&amp;#010     var inputObject = {&amp;#010        startRow : 5,&amp;#010        endRow : 50,&amp;#010        data : [&amp;#010           { field1 : &quot;value1&quot;, field2: new Date() },&amp;#010           { field1 : &quot;value3&quot;, field2: null }&amp;#010        ]&amp;#010     };&amp;#010     var myDS = isc.DataSource.create({ tagName:&quot;DSRequest&quot; });&amp;#010     myDS.xmlSerialize(inputObject);&amp;#010 &lt;/pre&gt;&amp;#010 .. produces the following XML:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;DSRequest&amp;gt;&amp;#010         &amp;lt;startRow&amp;gt;5&amp;lt;/startRow&amp;gt;&amp;#010         &amp;lt;endRow&amp;gt;50&amp;lt;/endRow&amp;gt;&amp;#010         &amp;lt;data&amp;gt;&amp;#010             &amp;lt;field1&amp;gt;value1&amp;lt;/field1&amp;gt;&amp;#010             &amp;lt;field2&amp;gt;2005-10-14T18:01:16&amp;lt;/field2&amp;gt;&amp;#010         &amp;lt;/data&amp;gt;&amp;#010         &amp;lt;data&amp;gt;&amp;#010             &amp;lt;field1&amp;gt;value3&amp;lt;/field1&amp;gt;&amp;#010             &amp;lt;field2&amp;gt;&amp;lt;/field2&amp;gt;&amp;#010         &amp;lt;/data&amp;gt;&amp;#010     &amp;lt;/DSRequest&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 If you are working with a WSDL-described web service, XML serialization is performed&amp;#010 automatically by APIs like ${isc.DocUtils.linkForRef('method:WebService.callOperation')} - you only need to&amp;#010 know about serialization in order to understand how to put together JavaScript data that&amp;#010 will fill in an XML message properly.   &amp;#010 &lt;br&gt;&amp;#010 &lt;b&gt;Note:&lt;/b&gt; when trying to send data to a web service, it is best to avoid putting&amp;#010 together any XML yourself, instead modify the JavaScript data being fed to ISC's SOAP&amp;#010 engine.  This is because the WSDL and SOAP rules for correctly namespacing and encoding&amp;#010 Web Service messages are very complex and are subject to change with new versions of the&amp;#010 web service you are contacting, whereas the data itself is easy to manipulate and less&amp;#010 likely to change.&amp;#010 &lt;br&gt;&amp;#010 To troubleshoot message formation, you can set the log category &quot;xmlComm&quot; to &amp;#010 &lt;code&gt;DEBUG&lt;/code&gt; level in order to see the XML message formed by SmartClient reported&amp;#010 in log statements in the Developer Console.&amp;#010&amp;#010" name="xmlSerialize" type="method" definingClass="class:DataSource">
<params description="data to be serialized" optional="false" name="data" type="any">
</params>
<params description="options for the serialization engine" optional="false" name="flags" type="SerializationContext">
</params>
<returns description="data as serialized to XML" type="String"></returns>
</docItem>
<docItem ref="attr:RPCRequest.useSimpleHttp" flags="IRWA" description="When set to true, assume the request is not going to the SmartClient server, and hence send&amp;#010 a simple HTTP request that does not use SmartClient-specific request encoding.&amp;#010 &lt;P&gt;&amp;#010 Values specified in ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent to to the server as HTTP request&amp;#010 parameters.  If ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} is &quot;GET&quot;, parameters appear in the request URL, otherwise&amp;#010 if httpMethod is &quot;POST&quot;, parameters are encoded in the request body (exactly like an HTML form&amp;#010 does).  These parameters are then accessible via typical server-side APIs for retrieving&amp;#010 HTTP parameters, eg, servletRequest.getParameter(paramName) in Java Servlets.  &amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} method is POST and ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is supplied,&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is assumed to be a string to post as the HTTP request body, and&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent as URL parameters instead.  This usage is for sending&amp;#010 custom request bodies such as the XML payloads used for SOAP.  In this case,&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.contentType')} is typically also set to indicate the content type of the&amp;#010 request body.&amp;#010 &lt;p&gt;&amp;#010 Setting &lt;code&gt;useSimpleHttp&lt;/code&gt; to true also automatically sets&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} to true as well." name="useSimpleHttp" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="group:errors" description="Validation errors and how they are shown" name="errors" type="group">
    <refs>method:DynamicForm.getErrors</refs>
    <refs>method:DynamicForm.getFieldErrors</refs>
    <refs>method:DynamicForm.setErrors</refs>
    <refs>method:DynamicForm.setError</refs>
    <refs>method:DynamicForm.addFieldErrors</refs>
    <refs>method:DynamicForm.setFieldErrors</refs>
    <refs>method:DynamicForm.clearFieldErrors</refs>
    <refs>method:DynamicForm.clearErrors</refs>
    <refs>method:DynamicForm.hasErrors</refs>
    <refs>method:DynamicForm.hasFieldErrors</refs>
    <refs>method:DynamicForm.getValidatedValues</refs>
    <refs>method:DynamicForm.showErrors</refs>
    <refs>method:DynamicForm.showFieldErrors</refs>
    <refs>method:ValuesManager.getValidatedValues</refs>
    <refs>method:ValuesManager.setErrors</refs>
    <refs>method:ValuesManager.addFieldErrors</refs>
    <refs>method:ValuesManager.setFieldErrors</refs>
    <refs>method:ValuesManager.clearErrors</refs>
    <refs>method:ValuesManager.clearFieldErrors</refs>
    <refs>method:ValuesManager.getErrors</refs>
    <refs>method:ValuesManager.getFieldErrors</refs>
    <refs>method:ValuesManager.hasErrors</refs>
    <refs>method:ValuesManager.hasFieldErrors</refs>
    <refs>method:ValuesManager.showErrors</refs>
    <refs>method:ValuesManager.showFieldErrors</refs>
</docItem>
<docItem ref="attr:CanvasItem.canvasDefaults" flags="IRW" description="Default properties for the canvas if this.canvas is not already a canvas instance." name="canvasDefaults" valueType="Object" defaultValue="{}" type="attr" definingClass="class:CanvasItem">
</docItem>
<docItem ref="method:Window.removeItems" flags="" description="			Removes an array of widgets from the window.&amp;#010" name="removeItems" type="method" definingClass="class:Window">
<params description="an array of widgets to be removed" optional="false" name="items" type="array of canvases">
</params>
<returns description="the array of widgets removed" type="array"></returns>
    <groups>windowItems</groups>
</docItem>
<docItem ref="method:Log.echoAll" flags="" description=" Like echo(), except that if passed an Array, echoAll() will echo() every element of the&amp;#010 Array.&amp;#010&amp;#010" name="echoAll" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.echo">
</seeAlso>
<params description="object to echo" optional="false" name="obj" type="any">
</params>
<returns description="a short string representation of the object" type="string"></returns>
    <groups>debug</groups>
</docItem>
<docItem ref="method:SectionStack.addSection" flags="" description="&amp;#010 Add a section to the SectionStack.&amp;#010&amp;#010" name="addSection" type="method" definingClass="class:SectionStack">
<params description="Initialization block                  for the section or a list of initialization blocks to add." optional="false" name="sections" type="SectionStackSection Properties | List of SectionStackSection Properties">
</params>
<params description="index for the new section(s) (if not specified, the section                      will be added at the end of the SectionStack)." optional="true" name="position" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsAddAndRemove')}</examples>
</docItem>
<docItem ref="interface:PickList" description="Interface to show a drop-down list of pickable options. Used by the ${isc.DocUtils.linkForRef('class:SelectItem')} and&amp;#010 ${isc.DocUtils.linkForRef('class:ComboBoxItem')} classes." name="PickList" type="interface">
    <methods>method:PickList.fetchData</methods>
    <methods>method:PickList.getOptionDataSource</methods>
    <methods>method:PickList.getPickListFilterCriteria</methods>
    <methods>method:PickList.getValueFieldName</methods>
    <methods>method:PickList.getDisplayFieldName</methods>
    <methods>method:PickList.getClientPickListData</methods>
    <methods>method:PickList.dataArrived</methods>
    <methods>method:PickList.filterClientPickListData</methods>
    <methods>method:PickList.getSelectedRecord</methods>
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:PickList.pickListHeight</attrs>
    <attrs>attr:PickList.pickListWidth</attrs>
    <attrs>attr:PickList.pickListBaseStyle</attrs>
    <attrs>attr:PickList.animatePickList</attrs>
    <attrs>attr:PickList.animationTime</attrs>
    <attrs>attr:PickList.pickListProperties</attrs>
    <attrs>attr:PickList.pickListHeaderHeight</attrs>
    <attrs>attr:PickList.valueField</attrs>
    <attrs>attr:PickList.displayField</attrs>
    <attrs>attr:PickList.pickListFields</attrs>
    <attrs>attr:PickList.valueIconField</attrs>
    <attrs>attr:PickList.pickListCriteria</attrs>
    <attrs>attr:PickList.optionDataSource</attrs>
    <attrs>attr:PickList.showOptionsFromDataSource</attrs>
    <attrs>attr:PickList.optionFilterContext</attrs>
    <attrs>attr:PickList.filterLocally</attrs>
    <attrs>attr:PickList.textMatchStyle</attrs>
    <attrs>attr:PickList.showAllOptions</attrs>
    <attrs>attr:PickList.separatorRows</attrs>
</docItem>
<docItem ref="attr:ListGridField.canEdit" flags="IRW" description="Can this field be edited? May be overridden by setting the&amp;#010      'canEdit' property at the listGrid level" name="canEdit" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.canEdit">
</seeAlso>
<seeAlso ref="attr:ListGrid.recordEditProperty">
</seeAlso>
<seeAlso ref="method:ListGrid.canEditCell">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('disableEditing')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="method:TreeGrid.getDropFolder" flags="" description=" When the user is dragging a droppable element over this grid, this method returns the folder&amp;#010 which would contain the item if dropped. This is the current drop node if the user is hovering&amp;#010 over a folder, or the node's parent if the user is hovering over a leaf.&amp;#010" name="getDropFolder" type="method" definingClass="class:TreeGrid">
<returns description="target drop folder" type="node"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:GridRenderer.cellPadding" flags="IRW" description="The amount of empty space, in pixels, surrounding each value in its cell." name="cellPadding" valueType="number" defaultValue="2" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="classMethod:Page.getURL" flags="" description=" Return a full URL for a relative path that uses a special prefix such as &quot;[APPFILES]&quot; or&amp;#010 &quot;[SKIN]&quot;.&amp;#010 &lt;P&gt;&amp;#010 For images, use ${isc.DocUtils.linkForRef('classMethod:Page.getImgURL')} instead.&amp;#010&amp;#010" name="getURL" type="classMethod" definingClass="class:Page">
<params description="Local file name for the image." optional="false" name="fileName" type="string">
</params>
<returns description="URL for the image." type="string"></returns>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="method:Window.centerInPage" flags="A" description=" Centers the Window in the page. This is called automatically in window.show() if&amp;#010 Window.autoCenter is true.&amp;#010 Note - if the Window is a child of another widget, we center in the parent widget&amp;#010 rather than centering in the page.&amp;#010" name="centerInPage" type="method" definingClass="class:Window">
<seeAlso ref="attr:Window.autoCenter">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Chart.setData" flags="" description=" Change the dataset for this chart on the fly.  May or may not be supported by concrete chart&amp;#010 implementations.&amp;#010&amp;#010" name="setData" type="method" definingClass="interface:Chart">
<params description="new dataset" optional="false" name="newData" type="Array of CellRecord or CellRecord">
</params>
</docItem>
<docItem ref="attr:Tab.disabled" flags="IRW" description="If specified, this tab will initially be rendered in a disabled state. To enable or&amp;#010 disable tabs on the fly use the ${isc.DocUtils.linkForRef('method:TabSet.enableTab')}, and ${isc.DocUtils.linkForRef('method:TabSet.disableTab')}&amp;#010 methods." name="disabled" valueType="boolean" defaultValue="null" type="attr" definingClass="object:Tab">
</docItem>
<docItem ref="method:List.removeList" flags="" description=" Remove all instances of objects in the specified list from this list, sliding the remaining&amp;#010 objects around to fill gaps.&amp;#010&amp;#010" name="removeList" type="method" definingClass="interface:List">
<params description="list of items to remove" optional="false" name="list" type="array">
</params>
<returns description="list of items passed in" type="list"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="method:Class.toString" flags="" description="&amp;#010  The default toString() for instances reports that you have an instance of a class and prints&amp;#010  the instance ID if present.&amp;#010" name="toString" type="method" definingClass="class:Class">
</docItem>
<docItem ref="method:TabSet.addTab" flags="A" description=" Add a tab&amp;#010" name="addTab" type="method" definingClass="class:TabSet">
<seeAlso ref="method:TabSet.addTabs">
</seeAlso>
<params description="new tab" optional="false" name="tab" type="Tab">
</params>
<params description="position where tab should be added" optional="false" name="position" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('tabsAddAndRemove')}</examples>
</docItem>
<docItem ref="method:SectionStack.removeItem" flags="" description=" Remove an item from a section.&amp;#010" name="removeItem" type="method" definingClass="class:SectionStack">
<params description="ID or index of the section to remove item from" optional="false" name="section" type="String or Number">
</params>
<params description="Item to remove" optional="false" name="item" type="Canvas">
</params>
</docItem>
<docItem ref="attr:Canvas.prompt" flags="IRW" description="Prompt displayed in hover canvas if ${isc.DocUtils.linkForRef('attr:Canvas.showHover','showHover')} is true." name="prompt" valueType="string" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('customHovers')}</examples>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:TabSet.getPaneContainerEdges" flags="A" description=" If the paneContainer for this tab set is showing ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}, this &amp;#010 method can be used to specify (dynamically) which ${isc.DocUtils.linkForRef('attr:Canvas.customEdges','customEdges')} to&amp;#010 show. Called when the pane creator is created.&amp;#010 &lt;P&gt;&amp;#010 Default implementation will return null unless ${isc.DocUtils.linkForRef('attr:TabSet.showPartialEdges','showPartialEdges')}&amp;#010 is true, in which case it will return the three edges opposite the&amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')}.&amp;#010" name="getPaneContainerEdges" type="method" definingClass="class:TabSet">
<returns description="array of custom edges to show" type="array"></returns>
</docItem>
<docItem ref="method:CubeGrid.anyCellSelected" flags="" description="&amp;#010 Determine whether any cells are selected in this cubeGrid&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; tester&amp;#010" name="anyCellSelected" type="method" definingClass="class:CubeGrid">
<returns description="true if any cells are selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.discardAllEdits" flags="A" description="&amp;#010 Cancel outstanding edits, discarding edit values, and hiding editors for the record[s] passed&amp;#010 in if appropriate.&amp;#010 If no rows are passed in all outstanding edit values will be dropped.&amp;#010 &amp;#010" name="discardAllEdits" type="method" definingClass="class:ListGrid">
<params description="allows you to specify which row(s) to drop edits for" optional="true" name="rows" type="array of numbers">
</params>
<params description="By default this method will hide the editor if                              it is currently showing for any row in the grid. Passing in&amp;#010                              this parameter will leave the editor visible (and just reset&amp;#010                              the edit values underneath the editor)." optional="true" name="dontHideEditor" type="boolean">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Label.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:DynamicForm.itemKeyPress" flags="" description=" Handler fired when a FormItem within this form receives a keypress event.&amp;#010 &lt;P&gt;&amp;#010 Fires after the keyPress handler on the FormItem itself, and only if the item did not&amp;#010 cancel the event and chooses to allow it to propagate to the form as a whole. &amp;#010 &amp;#010" name="itemKeyPress" type="method" definingClass="class:DynamicForm">
<params description="the FormItem where the change event occurred" optional="false" name="item" type="FormItem">
</params>
<params description="name of the key that was pressed (EG: &quot;A&quot;, &quot;Space&quot;)" optional="false" name="keyName" type="string">
</params>
<params description="numeric character value of the pressed key." optional="false" name="characterValue" type="number">
</params>
</docItem>
<docItem ref="attr:TabSet.topEdgeSizes" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeSizes&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeSizes&lt;/code&gt;, &lt;code&gt;topEdgeSizes&lt;/code&gt; and &lt;code&gt;bottomEdgeSizes&lt;/code&gt; &amp;#010 propertes allow the sizes of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="topEdgeSizes" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:Canvas.getContents" flags="" description="      Returns the contents of a Canvas. The contents are an HTML string.&amp;#010" name="getContents" type="method" definingClass="class:Canvas">
<returns description="contents of this Canvas" type="HTML"></returns>
</docItem>
<docItem ref="attr:FormItem.rowSpan" flags="IRW" description="Number of rows that this item spans" name="rowSpan" valueType="number" defaultValue="1" type="attr" definingClass="class:FormItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="attr:ImgButton.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGrid.filterOnKeypress" flags="IRWA" description="If we're showing the filterEditor (this.showFilterEditor is true), this property &amp;#010 determines whether this list should be filtered every time the user modifies the value&amp;#010 in a field of the filter-editor. Can also be set at the field level." name="filterOnKeypress" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="class:MenuBar" description="A MenuBar is a bar of buttons used to show a set of menus." name="MenuBar" type="class">
    <methods>method:MenuBar.setMenus</methods>
    <methods>method:MenuBar.addMenus</methods>
    <methods>method:MenuBar.removeMenus</methods>
    <methods>method:MenuBar.showMenu</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:MenuBar.menus</attrs>
    <attrs>attr:MenuBar.tabIndex</attrs>
</docItem>
<docItem ref="attr:FormItem.icons" flags="IRW" description="An array of descriptor objects for icons to display in a line after this form item.&amp;#010  These icons are clickable images, often used to display some kind of helper for &amp;#010  populating a form item." name="icons" valueType="Array of FormItemIcon Properties" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="object:FormItemIcon">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('formIcons')}</examples>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Applet.src" flags="IR" description="A URL that points to the class of this applet.  This is the same as the 'code' attribute.&amp;#010  Note that if you specify both the src and the code attributes, the src attribute will be&amp;#010  ignored in favor of the code attribute." name="src" valueType="URL" defaultValue="null" type="attr" definingClass="class:Applet">
</docItem>
<docItem ref="attr:Chart.shouldAnimateShow" flags="IR" description="Whether the chart should animate when shown (eg, bars or columns grow into place)" name="shouldAnimateShow" valueType="boolean" defaultValue="true" type="attr" definingClass="interface:Chart">
    <groups>chartAppearance</groups>
</docItem>
<docItem ref="attr:Snapbar.gripImgSuffix" flags="IRA" description="Overridden from ${isc.DocUtils.linkForRef('attr:Splitbar.gripImgSuffix')} to simplify providing custom grip media&amp;#010 for this widget." name="gripImgSuffix" valueType="string" defaultValue="&quot;snap&quot;" type="attr" definingClass="class:Snapbar">
</docItem>
<docItem ref="attr:ListGrid.sorterProperties" flags="IRA" description="Properties to apply to the sorter button. Overrides defaults applied via &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.sorterDefaults')}." name="sorterProperties" valueType="Button Properties" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DateItem.endDate" flags="IRW" description="Maximum date the selectors will allow the user to pick." name="endDate" valueType="Date" defaultValue="12/31/2015" type="attr" definingClass="class:DateItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:OperationBinding.recordXPath" flags="IR" description="For an XML or JSON DataSource, XPath expression used to retrieve the objects that will&amp;#010 become DataSource records.&amp;#010 &lt;p&gt;&amp;#010 For example, an &quot;ItemSearch&quot; web service might return a &quot;Results&quot; structure containing&amp;#010 metadata along with the set of Items that one might want to display in a grid.  An XPath&amp;#010 expression like &quot;/Results/Items&quot; could be used to retrieve just the Items, which would then&amp;#010 become DataSource records.&amp;#010 &lt;p&gt;&amp;#010 For a JSON web service, the &lt;code&gt;recordXPath&lt;/code&gt; is applied to the returned JSON data&amp;#010 via ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')}.  Only limited XPath syntax is allowed; see &amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects','selectObjects()')} for details.&amp;#010 &lt;P&gt;&amp;#010 For processing XML results, see ${isc.DocUtils.linkForRef('attr:OperationBinding.xmlNamespaces')} for information&amp;#010 on the namespaces that are available in this XPath expression.&amp;#010 &lt;P&gt;&amp;#010 To learn about XPath, try the following search:&amp;#010 &lt;a href=&quot;http://www.google.com/search?q=xpath+tutorial&quot; target=&quot;_blank&quot;&amp;#010 &gt;http://www.google.com/search?q=xpath+tutorial&lt;/a&gt;" name="recordXPath" valueType="XPathExpression" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:TabBar.buttonConstructor" flags="AIRW" description="SmartClient component used for the tabs of the tabBar. &amp;#010 Must be Button or Button subclass." name="buttonConstructor" valueType="class" defaultValue="ImgTab" type="attr" definingClass="class:TabBar">
</docItem>
<docItem ref="attr:HTMLFlow.contents" flags="IRW" description="The contents of a canvas or label widget. Any HTML string is acceptable." name="contents" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:HTMLFlow">
<seeAlso ref="attr:HTMLFlow.dynamicContents">
</seeAlso>
    <groups>contents</groups>
</docItem>
<docItem ref="method:CubeGrid.facetValuesSelected" flags="" description="&amp;#010 return whether the header indicated by the set of facetValues is selected&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; tester&amp;#010" name="facetValuesSelected" type="method" definingClass="class:CubeGrid">
<params description="facetValues to test" optional="false" name="facetValues" type="facetValues object">
</params>
<returns description="true if the header is selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:TabSet.pickerButtonSrc" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, this property governs the base URL for the picker&amp;#010 button image, when ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is set to false&amp;#010 &lt;P&gt;&amp;#010 Note that if &lt;code&gt;symmetricPickerButton&lt;/code&gt; is true, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonHSrc')} &amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonVSrc')} properties will be used instead.&amp;#010 &lt;P&gt;&amp;#010 To get the path to the image to display, this base URL will be modified as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If appropriate a state suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; or &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; will be&amp;#010     appended.&lt;/li&gt;&amp;#010 &lt;li&gt;The ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} for this tabSet will be appended.&lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="pickerButtonSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]/picker.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricPickerButton">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="attr:Slider.sliderTarget" flags="IRW" description="The target widget for the &lt;code&gt;sliderMove&lt;/code&gt; event generated when the slider thumb &amp;#010 is moved." name="sliderTarget" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:FormItem.hoverHeight" flags="IRW" description="Option to specify a height for any hover shown for this item." name="hoverHeight" valueType="measure" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverHeight">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:StretchImgButton.showFocus" deprecated="as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  Note that by default the&amp;#010 &lt;code&gt;over&lt;/code&gt; state is used to indicate focus." name="showFocus" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="classMethod:RPCManager.cancelQueue" flags="" description=" Cancel a transaction (a queue of requests being sent to the server). &amp;#010" name="cancelQueue" type="classMethod" definingClass="class:RPCManager">
</docItem>
<docItem ref="attr:DataSource.schemaNamespace" flags="R" description="For a DataSource derived from WSDL or XML schema, the XML namespace this schema belongs&amp;#010 to.  This is a read-only attribute automatically present on DataSources returned from&amp;#010 ${isc.DocUtils.linkForRef('method:SchemaSet.getSchema')} and ${isc.DocUtils.linkForRef('method:WebService.getSchema')}." name="schemaNamespace" valueType="URN" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>wsdlBinding</groups>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:DataSource.titleField" flags="IRW" description="Best field to use for a user-visible title for an individual record from this dataSource.&amp;#010 &lt;p&gt;&amp;#010 For example, for a DataSource of employees, a &quot;full name&quot; field would probably most clearly&amp;#010 labels an employee record.&amp;#010 &lt;p&gt;&amp;#010 If not explicitly set, titleField looks for fields named &quot;title&quot;, &quot;name&quot;, and &quot;id&quot; in that&amp;#010 order.  If a field exists with one of those names, it becomes the titleField.  If not, then the&amp;#010 first field is designated as the titleField." name="titleField" valueType="string" defaultValue="see below" type="attr" definingClass="class:DataSource">
    <groups>titles</groups>
</docItem>
<docItem ref="attr:DetailViewer.cellStyle" flags="IRW" description="CSS style for a normal value" name="cellStyle" valueType="CSSStyleName" defaultValue="&quot;detail&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DataSource.recordsFromXML" flags="A" description=" Transform a list of XML elements to DataSource records.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;recordsFromXML()&lt;/code&gt; will return a List of DataSource records in the form of&amp;#010 JavaScript objects.  The value for each field is extracted from the XML according to the&amp;#010 rules described under ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')}. &amp;#010 &lt;P&gt;&amp;#010 Derived JavaScript values for each field will be the appropriate JavaScript type, eg,&amp;#010 for a field of &quot;date&quot; type, the JS value will be a JavaScript Date object.&amp;#010 &amp;#010" name="recordsFromXML" type="method" definingClass="class:DataSource">
<params description="XML elements to transform, eg, the result of a                                       call to ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}" optional="false" name="elements" type="List of XMLElement">
</params>
<returns description="List of DataSource records derived from the XML elements" type="List"></returns>
</docItem>
<docItem ref="method:List.getLength" flags="" description=" Return the number of items in this list&amp;#010&amp;#010" name="getLength" type="method" definingClass="interface:List">
<returns description="number of items in the list" type="Number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:StretchImgButton.select" flags="" description=" Select this object.&amp;#010" name="select" type="method" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="class:Scrollbar" description="The Scrollbar widget implements cross-platform, image-based scrollbars that control the&amp;#010  scrolling of content in other widgets.   When native, CSS-based scrollbars are not in use,&amp;#010  Scrollbar widgets are created and displayed automatically for widgets that require them.&amp;#010  &lt;br&gt;&lt;br&gt;&amp;#010  Even where native scrollbars are functional, it may be desirable to use Scrollbar widgets&amp;#010  to customize size, positioning, images, and enabled state." name="Scrollbar" type="class">
    <methods>method:Scrollbar.setScrollTarget</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:Scrollbar.btnSize</attrs>
    <attrs>attr:Scrollbar.autoEnable</attrs>
    <attrs>attr:Scrollbar.showCorner</attrs>
    <attrs>attr:Scrollbar.allowThumbDownState</attrs>
    <attrs>attr:Scrollbar.showTrackEnds</attrs>
    <attrs>attr:Scrollbar.thumbMinSize</attrs>
    <attrs>attr:Scrollbar.trackEndWidth</attrs>
    <attrs>attr:Scrollbar.trackEndHeight</attrs>
    <attrs>attr:Scrollbar.thumbOverlap</attrs>
    <attrs>attr:Scrollbar.startThumbOverlap</attrs>
    <attrs>attr:Scrollbar.endThumbOverlap</attrs>
    <attrs>attr:Scrollbar.scrollTarget</attrs>
</docItem>
<docItem ref="method:ComboBoxItem.getClientPickListData" flags="" description=" Returns the set of data to be displayed in this item's PickList.&amp;#010 &lt;P&gt;&amp;#010 This method will be called for non-databound form items implementing the PickList&amp;#010 interface.  The default implementation will derive data from the item's valueMap - &amp;#010 can be overridden to allow a custom set of options to be displayed.&amp;#010 &lt;P&gt;&amp;#010 Note that for PickLists that filter data based on user input&amp;#010 (${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')}), this method should return the data &lt;b&gt;before&amp;#010 filtering&lt;/b&gt;.  To customize the data returned after filtering, override&amp;#010 ${isc.DocUtils.linkForRef('method:ComboBoxItem.filterClientPickListData')} instead.&amp;#010 &lt;P&gt;&amp;#010 As an example, for a formItem with ${isc.DocUtils.linkForRef('attr:ComboBoxItem.valueField')} set to &quot;valueFieldName&quot;, the&amp;#010 default implementation would take a valueMap like the following:&amp;#010 &lt;pre&gt;&amp;#010     valueMap: { value1: &quot;display 1&quot;, value2: &quot;display 2&quot; }&amp;#010 &lt;/pre&gt;&amp;#010 .. and returning the following set of records: &amp;#010 &lt;pre&gt;&amp;#010     [&amp;#010          { valueFieldName : &quot;value1&quot; },&amp;#010          { valueFieldName : &quot;value2&quot; }&amp;#010     ]&amp;#010 &lt;/pre&gt;&amp;#010 Due to the valueMap, these records will appear as a two row pickList displayed as&amp;#010 &quot;display 1&quot; and &quot;display 2&quot;.&amp;#010&amp;#010" name="getClientPickListData" type="method" definingClass="class:ComboBoxItem">
<returns description="Array of record objects to be displayed in the           pickList. Note that when a user picks a record from the list, the value of the&amp;#010           field matching &lt;code&gt;item.valueField&lt;/code&gt; will be picked. Also note that the&amp;#010           fields to be displayed can be customized via &lt;code&gt;item.pickListFields&lt;/code&gt;" type="Array of ListGridRecord"></returns>
</docItem>
<docItem ref="classMethod:Date.setNormalDisplayFormat" flags="" description=" Set the default formatter for date objects to the method name passed in.  After calling this&amp;#010 method, subsequent calls to ${isc.DocUtils.linkForRef('method:Date.toNormalDate')} will return a string formatted&amp;#010 according to this format specification. Note: this will be the standard long date format used &amp;#010 by SmartClient components.&lt;br&gt;&amp;#010 The &lt;code&gt;format&lt;/code&gt; parameter may be either a ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} string, or &amp;#010 a function. If passed a function, this function will be executed in the scope of the Date&amp;#010 and should return the formatted string.&lt;br&gt;&amp;#010 Initial default normalDisplayFormat is &lt;code&gt;&quot;toLocaleString&quot;&lt;/code&gt;&amp;#010" name="setNormalDisplayFormat" type="classMethod" definingClass="class:Date">
<params description="new formatter" optional="false" name="format" type="DateDisplayFormat | function">
</params>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="classAttr:Validator.notOneOf" flags="IRA" description="Default error message to display when standard &lt;code&gt;isOneOf&lt;/code&gt; type validator&amp;#010 is not passed." name="notOneOf" valueType="string" defaultValue="'Not a valid option'" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Canvas.clickMaskUp" flags="" description=" Determines whether a clickmask is showing&amp;#010" name="clickMaskUp" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.showClickMask">
</seeAlso>
<params description="optional ID of specific clickMask to check. If not passed,                       checks for the click mask associated with this widget only." optional="true" name="ID" type="string">
</params>
    <groups>clickMask</groups>
</docItem>
<docItem ref="attr:FacetValue.titleHilite" flags="IR" description="Hilite style to apply to the title for this facetValue.  See&amp;#010 ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites')}." name="titleHilite" valueType="string" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="method:ValuesManager.resetValues" flags="A" description="&amp;#010 Same as ${isc.DocUtils.linkForRef('method:DynamicForm.reset')}.&amp;#010&amp;#010" name="resetValues" type="method" definingClass="class:ValuesManager">
    <groups>formValues</groups>
</docItem>
<docItem ref="group:validation" description="Validation" name="validation" type="group">
    <refs>classMethod:isc.getErrorsHTML</refs>
    <refs>method:DynamicForm.getItemErrorHTML</refs>
    <refs>method:DynamicForm.validate</refs>
    <refs>method:DynamicForm.validateData</refs>
    <refs>classMethod:Validator.addValidator</refs>
    <refs>classMethod:Validator.addValidators</refs>
    <refs>attr:DynamicForm.showInlineErrors</refs>
    <refs>attr:DynamicForm.showErrorIcons</refs>
    <refs>attr:DynamicForm.showErrorText</refs>
    <refs>attr:DynamicForm.showErrorStyle</refs>
    <refs>attr:DynamicForm.errorOrientation</refs>
    <refs>attr:DynamicForm.errorItemProperties</refs>
    <refs>attr:DynamicForm.errorItemCellStyle</refs>
    <refs>attr:DynamicForm.errorsPreamble</refs>
    <refs>attr:DynamicForm.showTitlesWithErrorMessages</refs>
    <refs>attr:DynamicForm.errors</refs>
    <refs>attr:DynamicForm.validateOnChange</refs>
    <refs>attr:DynamicForm.unknownErrorMessage</refs>
    <refs>attr:DynamicForm.validationURL</refs>
    <refs>attr:DynamicForm.disableValidation</refs>
    <refs>attr:FormItem.required</refs>
    <refs>attr:FormItem.showErrorIcon</refs>
    <refs>attr:FormItem.showErrorText</refs>
    <refs>attr:FormItem.showErrorStyle</refs>
    <refs>attr:FormItem.errorOrientation</refs>
    <refs>attr:TextItem.length</refs>
    <refs>attr:ValuesManager.unknownErrorMessage</refs>
    <refs>attr:ValuesManager.disableValidation</refs>
    <refs>attr:DataSource.useLocalValidators</refs>
    <refs>attr:DataSourceField.validators</refs>
    <refs>attr:SimpleType.validators</refs>
</docItem>
<docItem ref="attr:Canvas.animateFadeTime" flags="IRWA" description="Default time for performing an animated fade.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateFadeTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:CubeGrid.getRollupValue" flags="" description=" Get the facetValue definition for the facetValue to show when this facet is &quot;rolled up&quot; under&amp;#010 another facet, during a breakout.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 A facet is not required to have a rollup value, and if it does not have one, then rollups will&amp;#010 simply be blank rows.  The facetValueId of the rollup value can be declared as&amp;#010 cubeGrid.rollupValue or facet.rollupValue.  &amp;#010&amp;#010" name="getRollupValue" type="method" definingClass="class:CubeGrid">
<seeAlso ref="attr:CubeGrid.rollupValue">
</seeAlso>
<returns description="rolled up facet value definition" type="facetValue"></returns>
</docItem>
<docItem ref="attr:StatefulCanvas.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ListGrid.getEditField" flags="" description="&amp;#010  Returns the field object associated with cell currently being edited&amp;#010&amp;#010" name="getEditField" type="method" definingClass="class:ListGrid">
<returns description="Field object definition" type="object"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Slider.showTitle" flags="IRW" description="Indicates whether the slider's title should be displayed. The default position for this label&amp;#010 is to the left of a horizontal slider, or above a vertical slider." name="showTitle" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.title">
</seeAlso>
</docItem>
<docItem flags="IR" type="attr" ref="attr:Progressbar.breadth" description="Thickness of the progressbar in pixels. This is effectively width for a vertical&amp;#010 progressbar, or height for a horizontal progressbar.&amp;#010 &lt;P&gt;&amp;#010 This property must be set instead of setting &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;." name="breadth" valueType="number" defaultValue="20" definingClass="class:Progressbar">
    <getter>getBreadth</getter>
    <setter>setBreadth</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:treeField" name="treeField" type="group">
    <refs>attr:TreeGridField.treeField</refs>
    <refs>attr:TreeGrid.treeFieldTitle</refs>
    <refs>attr:TreeGrid.showRoot</refs>
    <refs>attr:TreeGrid.separateFolders</refs>
    <refs>attr:TreeGrid.displayNodeType</refs>
</docItem>
<docItem ref="class:RestDataSource" description="The RestDataSource implements the 4 core DataSource operations using a simple protocol of&amp;#010 XML or JSON requests and responses sent over HTTP, which can be easily fulfilled by any HTTP&amp;#010 server technology.&amp;#010 &lt;P&gt;&amp;#010 RestDataSource is named for the&amp;#010 &lt;a href='http://www.google.com/search?hl=en&amp;q=REST+HTTP' onclick=&quot;window.open('http://www.google.com/search?hl=en&amp;q=REST+HTTP');return false;&quot;&gt;REST&lt;/a&gt; (REpresentational State&amp;#010 Transfer) pattern, which in brief says that simple messages passed over HTTP is a sufficient&amp;#010 protocol for many web applications, without the need for further protocols such as WSDL or&amp;#010 SOAP.&amp;#010 &lt;P&gt;&amp;#010 A RestDataSource is used just like a normal DataSource.  RestDataSources are configured,&amp;#010 using the general-purpose databinding facilities of DataSources, to expect a particular&amp;#010 format for responses and to send requests in a specific format.   These request and&amp;#010 response formats represent Isomorphic's recommended best practices for binding SmartClient&amp;#010 to backends which do not already support a similar, pre-existing request and response&amp;#010 format.&amp;#010 &lt;P&gt;&amp;#010 Full source code to the RestDataSource is provided (see &amp;#010 /examples/databinding/RestDataSource.js), intended for possible further modification and an&amp;#010 extended example of how to use SmartClient's general databinding engine.&amp;#010 &lt;P&gt;&amp;#010 RestDataSource is typically used with PHP, Ruby, Python, Perl or custom server technologies,&amp;#010 and represents an alternative to installing the SmartClient Server in a Java technology&amp;#010 stack, or using ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL-based binding')} with .NET or other WSDL-capable&amp;#010 technologies.&amp;#010 &lt;P&gt;&amp;#010 &lt;span style=&quot;font-weight:bold;font-size:16px;&quot;&gt;Examples&lt;/span&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;XML formatted responses:&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 RestDataSource expects a response to like the following in response to a &quot;fetch&quot; request:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;response&amp;gt;&amp;#010    &amp;lt;status&amp;gt;0&amp;lt;/status&amp;gt;&amp;#010    &amp;lt;data&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;field1&amp;gt;value&amp;lt;/field1&amp;gt;&amp;#010          &amp;lt;field2&amp;gt;value&amp;lt;/field2&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;field1&amp;gt;value&amp;lt;/field1&amp;gt;&amp;#010          &amp;lt;field2&amp;gt;value&amp;lt;/field2&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010    &amp;lt;/data&amp;gt;&amp;#010 &amp;lt;/response&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The status element indicates whether the fetch operation was successful &amp;#010 (see ${isc.DocUtils.linkForRef('group:statusCodes')}).&amp;#010 &lt;P&gt;&amp;#010 The data element contains a list of record nodes, each of which represents a record returned&amp;#010 by the server.  Additional elements for totalRows returned, startRow and endRow may&amp;#010 also be included.&amp;#010 &lt;P&gt;&amp;#010 Note: for a more compact format, simple field values may be specified on record &amp;#010 nodes directly as attributes - in this case a record element might be structured like this:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;record field1=&quot;value&quot; field2=&quot;value&quot; /&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 Successful &quot;add&quot; or &quot;update&quot; request responses are similar in format - in this case the data&amp;#010 element would be expected to contain a single record object containing the details of the&amp;#010 record, as saved on the server.&amp;#010 &lt;P&gt;&amp;#010 The response from a &quot;remove&quot; operation would again include status and data elements, but in&amp;#010 this case, only the primary key field value(s) of the removed record would be expected to be &amp;#010 present under the data element.&amp;#010 &lt;p&gt;&amp;#010 If a validation failure occurred on the server, the response would&amp;#010 have status set to ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} [&lt;code&gt;-4&lt;/code&gt; by default],&amp;#010 and any validation errors could be included as per-field sub-elements of an &quot;errors&quot;&amp;#010 element.&amp;#010 &lt;P&gt;&amp;#010 Note that in this case the response would not be expected to contain any data element.  &amp;#010 A response showing a validation error might look like this:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;response&amp;gt;&amp;#010    &amp;lt;status&amp;gt;-4&amp;lt;/status&amp;gt;&amp;#010    &amp;lt;errors&amp;gt;&amp;#010      &amp;lt;field1&amp;gt;&amp;#010          &amp;lt;errorMessage&amp;gt;A validation error occurred for this field&amp;lt;/errorMessage&amp;gt;&amp;#010      &amp;lt;/field1&amp;gt;&amp;#010    &amp;lt;/errors&amp;gt;&amp;#010 &amp;lt;/response&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;JSON formatted responses:&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 JSON format responses are expected to contain the same data / meta-data as XMLresponses,&amp;#010 encapsulated a simple object with a &lt;code&gt;&quot;response&quot;&lt;/code&gt; attribute.&lt;br&gt;&amp;#010 The response to a &quot;fetch&quot; request would therefore have this format:&lt;br&gt;&amp;#010 &lt;pre&gt;&amp;#010 {    response:&amp;#010      {   status:0,&amp;#010          data:[&amp;#010              {field1:&quot;value&quot;, field2:&quot;value&quot;},&amp;#010              {field1:&quot;value&quot;, field2:&quot;value&quot;}&amp;#010          ]&amp;#010      }&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 The structure successful for &quot;add&quot;, &quot;update&quot; and &quot;remove&quot; responses would be similar, though&amp;#010 the data array would be expected to contain the single edited record only.&lt;br&gt;&amp;#010 For a remove, only the value for the primaryKey field[s] would be required.&amp;#010 &lt;p&gt;&amp;#010 If an error occurred on the server, this would be indicated in the &lt;code&gt;status&lt;/code&gt; &amp;#010 attribute.  For a validation error, the status would be set to &amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} [&lt;code&gt;-4&lt;/code&gt; by default], and errors would&amp;#010 be specified in the &lt;code&gt;errors&lt;/code&gt; attribute of the response. For example:&amp;#010 &lt;pre&gt;&amp;#010 {    response:&amp;#010      {   status:-4,&amp;#010          errors: &amp;#010              {   field1:{errorMessage:&quot;A validation error on field1&quot;},&amp;#010                  field2:{errorMessage:&quot;A validation error on field2&quot;}&amp;#010              }&amp;#010      }&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 An array of errors may also be returned for a single field, like this:&amp;#010 &lt;pre&gt;&amp;#010 {    response:&amp;#010      {   status:-4,&amp;#010          errors: &amp;#010              {   field1:[&amp;#010                      {errorMessage:&quot;First error on field1&quot;},&amp;#010                      {errorMessage:&quot;Second error on field1&quot;}&amp;#010                  ]&amp;#010              }&amp;#010      }&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 &lt;b&gt;Server inbound data formats&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The format of data sent to the server is determined by the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}&amp;#010 specified for the operation. Request data is sent as parameters if the format is &amp;#010 specified as &lt;code&gt;&quot;getParams&quot;&lt;/code&gt; or &lt;code&gt;&quot;postParams&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 In this case, the parameters sent to the server will consist of the DSRequest's data, and any&amp;#010 parameters explicitly specified on the DSRequest object (as ${isc.DocUtils.linkForRef('attr:RPCRequest.params')}.&lt;br&gt; &amp;#010 If ${isc.DocUtils.linkForRef('attr:RestDataSource.sendMetaData')} is true, the DSRequest meta &amp;#010 data properties will also be present as parameters, prefixed with &amp;#010 ${isc.DocUtils.linkForRef('attr:RestDataSource.metaDataPrefix')}.&amp;#010 &lt;P&gt;&amp;#010 Example URL constructed with the metaDataPrefix set to &lt;code&gt;&quot;_&quot;&lt;/code&gt; (the default):&amp;#010 &lt;p&gt;&amp;#010 &lt;code&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;[dataURL]&lt;/i&gt;?field1=value1&amp;_operationType=fetch&amp;_startRow=0&amp;_endRow=50&amp;_sortBy=-field2&amp;_dataSource=dsName&amp;#010 &lt;/code&gt;&amp;#010 &lt;p&gt;&amp;#010 In this case the server would be able to separate the request's data from the meta data &amp;#010 via the &lt;code&gt;&quot;_&quot;&lt;/code&gt; prefix.&amp;#010 &lt;P&gt;&amp;#010 If data is sent to the server via the &lt;code&gt;&quot;postMessage&quot;&lt;/code&gt; dataProtocol, the data will&amp;#010 be sent as a serialized XML message.  In this case the created XML document will contain &amp;#010 nodes for each relevant property of the request (including a &lt;code&gt;&quot;data&quot;&lt;/code&gt; node &amp;#010 containing the request's data.&amp;#010 &lt;P&gt;&amp;#010 An example of an XML message might look like this:&amp;#010 &lt;pre&gt;&amp;#010  &amp;lt;data&amp;gt;&amp;#010        &amp;lt;countryDS&amp;gt;&amp;#010            &amp;lt;countryCode&amp;gt;US&amp;lt;/countryCode&amp;gt;&amp;#010            &amp;lt;countryName&amp;gt;Edited Value&amp;lt;/countryName&amp;gt;&amp;#010            &amp;lt;capital&amp;gt;Edited Value&amp;lt;/capital&amp;gt;&amp;#010            &amp;lt;continent&amp;gt;Edited Value&amp;lt;/continent&amp;gt;&amp;#010        &amp;lt;/countryDS&amp;gt;&amp;#010    &amp;lt;/data&amp;gt;&amp;#010    &amp;lt;dataSource&amp;gt;countryDS&amp;lt;/dataSource&amp;gt;&amp;#010    &amp;lt;operationType&amp;gt;update&amp;lt;/operationType&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The ${isc.DocUtils.linkForRef('attr:RestDataSource.operationBindings','default OperationBindings')} for a RestDataSource&amp;#010 specify dataProtocol as &quot;getParams&quot; for the fetch operation, and &quot;postParams&quot; for update,&amp;#010 add and remove operations.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Hierachical (Tree) data:&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 To create a hierachical DataSource, in the DataSource's &lt;code&gt;fields&lt;/code&gt; array, a field &amp;#010 must be specified as the parent id field - the field which will contain a pointer to the&amp;#010 id of each node's parent. &amp;#010 This can be achieved by setting the ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')} and the &amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.rootValue')} attributes on the field definition. For example:&amp;#010 &lt;pre&gt;&amp;#010 RestDataSource.create({&amp;#010  ID:&quot;supplyItem&quot;,&amp;#010  fields : [&amp;#010      {name:&quot;itemId&quot;, type:&quot;sequence&quot;, primaryKey:true},&amp;#010      {name:&quot;parentId&quot;, type:&quot;integer&quot;, foreignKey:&quot;supplyItem.itemId&quot;, rootValue:0},&amp;#010      ...&amp;#010  ]&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 Tree Data is then treated on the server as a flat list of records linked by parent id.&lt;br&gt;&amp;#010 Tree data is typically displayed using a dataBound ${isc.DocUtils.linkForRef('class:TreeGrid')} component. TreeGrids&amp;#010 automatically create a ${isc.DocUtils.linkForRef('class:ResultTree')} data object, which requests data directly&amp;#010 from the DataSource.  ResultTrees load data on demand, only requesting currently visible &amp;#010 (open) nodes from the server. This is handled by including a specified value for the parent &amp;#010 id field in the request criteria.&lt;br&gt;&amp;#010 To implement a standard load-on-demand tree RestDataSource back end, you should therefore &amp;#010 simply return the set of nodes that match the criteria passed in. &amp;#010 For example, if your DataSource was defined as the &quot;supplyItem&quot; code snippet above, &amp;#010 a fetch request for all children of a node with &lt;code&gt;itemId&lt;/code&gt; set to &lt;code&gt;12&lt;/code&gt; &amp;#010 would have &lt;code&gt;&quot;parentId&quot;&lt;/code&gt; set to &lt;code&gt;12&lt;/code&gt; in the request criteria.&amp;#010 A valid response would then contain all the records that matched this criteria. For example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;response&amp;gt;&amp;#010    &amp;lt;status&amp;gt;0&amp;lt;/status&amp;gt;&amp;#010    &amp;lt;data&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;itemId&amp;gt;15&amp;lt;/itemId&amp;gt;&amp;#010          &amp;lt;parentId&amp;gt;12&amp;lt;/parentId&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010      &amp;lt;record&amp;gt;&amp;#010          &amp;lt;itemId&amp;gt;16&amp;lt;/itemId&amp;gt;&amp;#010          &amp;lt;parentId&amp;gt;12&amp;lt;/parentId&amp;gt;&amp;#010      &amp;lt;/record&amp;gt;&amp;#010    &amp;lt;/data&amp;gt;&amp;#010 &amp;lt;/response&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The structure of responses for Add, Update and Delete type requests will be the &amp;#010 same regardless of whether the data is hierachical. However you should be aware that &amp;#010 the underlying data storage may need to be managed slightly differently in some cases.&lt;br&gt;&amp;#010 Specifically, Add and Update operations may change the structure of the tree by returning a &amp;#010 new parent id field value for the modified node. Depending on how your data is stored you &amp;#010 may need to include special back-end logic to handle this.&lt;br&gt;&amp;#010 Also, if a user deletes a folder within a databound tree, any children of that folder will &amp;#010 also be dropped from the tree, and can be removed from the back-end data storage.&lt;br&gt;&amp;#010 Note: For a general overview of binding components to Tree structured data, see &amp;#010 ${isc.DocUtils.linkForRef('group:treeDataBinding','Tree Databinding')}." name="RestDataSource" type="class">
    <methods>method:RestDataSource.transformRequest</methods>
    <methods>method:RestDataSource.transformResponse</methods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
    <attrs>attr:RestDataSource.dataFormat</attrs>
    <attrs>attr:RestDataSource.xmlRecordXPath</attrs>
    <attrs>attr:RestDataSource.jsonRecordXPath</attrs>
    <attrs>attr:RestDataSource.operationBindings</attrs>
    <attrs>attr:RestDataSource.dataURL</attrs>
    <attrs>attr:RestDataSource.fetchDataURL</attrs>
    <attrs>attr:RestDataSource.updateDataURL</attrs>
    <attrs>attr:RestDataSource.addDataURL</attrs>
    <attrs>attr:RestDataSource.removeDataURL</attrs>
    <attrs>attr:RestDataSource.sendMetaData</attrs>
    <attrs>attr:RestDataSource.metaDataPrefix</attrs>
    <examples>${isc.DocUtils.linkForExampleId('restEditSave')}</examples>
</docItem>
<docItem ref="method:Date.toNormalDate" flags="" description=" Returns the date as a formatted string using the format set up via the &amp;#010 &lt;code&gt;setNormalDisplayFormat()&lt;/code&gt; method. Note that the default formatter for this&amp;#010 method is &lt;code&gt;&quot;toLocaleString&quot;&lt;/code&gt;.&amp;#010" name="toNormalDate" type="method" definingClass="class:Date">
<params description="Optional Format for the date returned" optional="false" name="format" type="DateDisplayFormat">
</params>
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:SectionStack.sectionIsExpanded" flags="" description="&amp;#010 Returns true if the specified section is expanded, false if it is collapsed.&amp;#010&amp;#010" name="sectionIsExpanded" type="method" definingClass="class:SectionStack">
<params description="Section for which you want to obtain information.&amp;#010                      For this parameter, you can pass the position of the section in the&amp;#010                      SectionStack, or the ID of the section." optional="false" name="section" type="sectionId|position">
</params>
<returns description="true if the section is expanded, false if it is not." type="boolean"></returns>
</docItem>
<docItem ref="attr:Img.imageHeight" flags="IR" description="Explicit size for the image, for ${isc.DocUtils.linkForRef('attr:Img.imageType')} settings that would normally use the&amp;#010 image's natural size (applies to ${isc.DocUtils.linkForRef('attr:Img.imageType')} &quot;center&quot; and &quot;normal&quot; only)." name="imageHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:Img">
</docItem>
<docItem ref="method:StatefulCanvas.setSelected" flags="" description=" Set this object to be selected or deselected.&amp;#010" name="setSelected" type="method" definingClass="class:StatefulCanvas">
<params description="new boolean value of whether or not the object is                                          selected." optional="false" name="newIsSelected" type="boolean">
</params>
    <groups>state</groups>
</docItem>
<docItem ref="attr:OperationBinding.dataFormat" flags="IR" description="Format for response data for this operation.&amp;#010 &lt;P&gt;&amp;#010 Typically set once for the DataSource as a whole via ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat')}." name="dataFormat" valueType="DSDataFormat" defaultValue="&quot;iscServer&quot;" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:StatefulCanvas.icon" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <setter>setIcon</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DateChooser.baseWeekendStyle" flags="IRW" description="Base css style applied to weekends. Will have &quot;Over&quot;, &quot;Selected&quot; and &quot;Down&quot;&amp;#010 suffix appended as the user interacts with buttons.  Defaults to ${isc.DocUtils.linkForRef('attr:DateChooser.baseWeekdayStyle')}." name="baseWeekendStyle" valueType="string" defaultValue="null" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:Layout.reorderMember" flags="" description=" Shift a member of the layout to a new position&amp;#010		    &amp;#010" name="reorderMember" type="method" definingClass="class:Layout">
<params description="current position of the member to move to a new position" optional="false" name="memberNum" type="number">
</params>
<params description="new position to move the member to" optional="false" name="newPosition" type="number">
</params>
</docItem>
<docItem ref="attr:StatefulCanvas.overCanvasConstructor" flags="IRWA" description="Constructor class name for this widgets ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas','overCanvas')}" name="overCanvasConstructor" valueType="String" defaultValue="&quot;Canvas&quot;" type="attr" definingClass="class:StatefulCanvas">
</docItem>
<docItem ref="attr:StretchImgButton.iconAlign" flags="IR" description="If this button is showing an icon should it be right or left aligned?" name="iconAlign" valueType="string" defaultValue="null" type="attr" definingClass="class:StretchImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:TreeNode.canDrag" flags="IRA" description="Governs whether this node can be dragged. Only has an effect if this node is displayed in&amp;#010 a ${isc.DocUtils.linkForRef('class:TreeGrid')} where ${isc.DocUtils.linkForRef('attr:TreeGrid.canDragRecordsOut')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')}&amp;#010 or ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is &lt;code&gt;true&lt;/code&gt;" name="canDrag" valueType="boolean" defaultValue="null" type="attr" definingClass="object:TreeNode">
</docItem>
<docItem ref="attr:Window.headerBackground" flags="R" description="Img background component for the header, for gradient or image-based display" name="headerBackground" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="classAttr:isc.itemStartIndent" flags="IRW" description="Size, in pixels, of indentation of all member items relative to the start of&amp;#010 the alignment axis. For instance, for left-aligned members, &amp;#010 itemStartIndent specifies indentation for every item from the left side of the&amp;#010 section stack. Overrides ${isc.DocUtils.linkForRef('classAttr:isc.itemIndent')}." name="itemStartIndent" valueType="Number" defaultValue="undefined" type="attr" definingClass="class:isc">
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:ImgButton.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Canvas.clear" flags="A" description=" Remove all visual representation of a Canvas.&amp;#010 &lt;P&gt;&amp;#010 This is far more expensive than hide(), because in order to become visible again, the Canvas must&amp;#010 be draw()n again.  Generally, application code has no reason to call clear(); if you want to&amp;#010 temporarily hide a Canvas, use hide() and show(), and if you want to permanently destroy a&amp;#010 Canvas, use destroy().&amp;#010 &lt;P&gt;&amp;#010 Note: a clear() will happen as part of moving a Canvas to a different parent.  See addChild().&amp;#010&amp;#010" name="clear" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.addChild">
</seeAlso>
</docItem>
<docItem ref="method:SectionStack.sectionIsVisible" flags="" description="&amp;#010 Returns true if the specified section is visible, false if it is not.  A section is&amp;#010 visible if it shows a header and the header is visible or if it has items and the first&amp;#010 item is visible.&amp;#010&amp;#010" name="sectionIsVisible" type="method" definingClass="class:SectionStack">
<params description="Section for which you want to obtain visibility information.&amp;#010                      For this parameter, you can pass the position of the section in the&amp;#010                      SectionStack, or the ID of the section." optional="false" name="section" type="sectionId|position">
</params>
<returns description="true if the section is visible, false if it is not." type="boolean"></returns>
</docItem>
<docItem ref="attr:DataSource.serverObject" flags="IR" description="For Direct Method Invocation (DMI) binding, declares the ServerObject to use as the default&amp;#010 target for all ${isc.DocUtils.linkForRef('attr:DataSource.operationBindings')}.  Specifying this&amp;#010 attribute in an XML DataSource stored on the server enables DMI for this DataSource." name="serverObject" valueType="ServerObject" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>serverDataIntegration</groups>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:StatefulCanvas.setIcon" flags="" description=" Change the icon being shown next to the title text.&amp;#010" name="setIcon" type="method" definingClass="class:StatefulCanvas">
<params description="URL of new icon" optional="false" name="icon" type="URL">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGridField.filterEditorValueMap" flags="IRW" description="If this listGrid is showing a filter row, this property can be used to specify a&amp;#010  mapping of internal data to/from display values to be in the appropriate filter&amp;#010  row form item." name="filterEditorValueMap" valueType="object" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="method:CubeGrid.getFacetValuesColumn" flags="" description=" Get the index of the first column in the grid that matches the specified FacetValueMap.&lt;br&gt;&amp;#010 The facetValues passed in should contain values for at least one column facet. If values are &amp;#010 sparse (values not specified for every column facet), the first column matching the specified&amp;#010 facet values will be returned.&amp;#010" name="getFacetValuesColumn" type="method" definingClass="class:CubeGrid">
<params description="facet values to find" optional="false" name="facetValues" type="facetValueMap">
</params>
<returns description="index of first column in the grid that matches the facet values passed in." type="integer"></returns>
</docItem>
<docItem ref="attr:HTMLFlow.contentsType" flags="IR" description="The default setting of 'null' or 'fragment' indicates that HTML loaded from&amp;#010 ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')} is assumed to be an HTML fragment rather than a complete page.  Set to&amp;#010 &quot;page&quot; to load HTML as a standalone page, via an IFRAME.  &amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;contentsType:&quot;page&quot;&lt;/code&gt; should only be used for controlled HTML content, and only&amp;#010 when such content cannot be delivered as an HTML fragment instead (the default).  To&amp;#010 dynamically load SmartClient components, use ${isc.DocUtils.linkForRef('class:ViewLoader')}, &lt;b&gt;never&lt;/b&gt; this mechanism&amp;#010 (click ${isc.DocUtils.linkForRef('group:noFrames','here')} for why).&amp;#010 &lt;P&gt;&amp;#010 Loading HTML content as a fragment is less resource intensive and avoids visual artifacts&amp;#010 such as translucent media becoming opaque or disappearing when placed over an IFRAME.  &amp;#010 &lt;P&gt;&amp;#010 Loading third-party, uncontrolled content could lead to the surrounding page disappearing if&amp;#010 a user clicks on an HTML link with &lt;code&gt;target=_top&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 With &lt;code&gt;contentsType:&quot;page&quot;&lt;/code&gt;, ${isc.DocUtils.linkForRef('attr:HTMLFlow.loadingMessage')} is not supported, and only&amp;#010 &quot;GET&quot; is supported for ${isc.DocUtils.linkForRef('attr:HTMLFlow.httpMethod','httpMethod')}." name="contentsType" valueType="String" defaultValue="null" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetTitleAlign" flags="IRW" description="default alignment for facet labels" name="facetTitleAlign" valueType="alignEnum" defaultValue="&quot;center&quot;" type="attr" definingClass="class:CubeGrid">
    <setter>setFacetTitleAlign</setter>
    <groups>gridLayout</groups>
</docItem>
<docItem ref="classAttr:Validator.notADate" flags="IRA" description="Default error message to display when standard &lt;code&gt;isDate&lt;/code&gt; type validator&amp;#010  returns false." name="notADate" valueType="string" defaultValue="&quot;Must be a date.&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:ListGrid.getRecordIndex" flags="" description=" Get the index of the provided record.&amp;#010 &lt;P&gt;&amp;#010 This is essentially the same as calling listGrid.data.indexOf(record), except that &amp;#010 the currently visible range of records is checked first.  This is important for&amp;#010 responsiveness in functions that respond to user actions when the user is working near the&amp;#010 end of a very large dataset (eg 500k records).&amp;#010&amp;#010" name="getRecordIndex" type="method" definingClass="class:ListGrid">
<params description="the record whose index is to be retrieved" optional="false" name="record" type="ListGridRecord">
</params>
<returns description="indexindex of the record, or -1 if not found" type="Number"></returns>
</docItem>
<docItem ref="attr:ListGridField.title" flags="IRW" description="A title for this field, to display in the header of the listGrid object.  Alternately you can&amp;#010 specify a ${isc.DocUtils.linkForRef('method:ListGridField.getFieldTitle')} method on the field to return the HTML for the field title." name="title" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGridField.getFieldTitle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DynamicForm.errorItemProperties" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in &amp;#010 a single item rendered at the top of the form.&lt;br&gt;&amp;#010 This attribute contains a properties block for this item." name="errorItemProperties" valueType="object" defaultValue="null" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
</docItem>
<docItem ref="attr:DetailViewerField.height" flags="IR" description="For ${isc.DocUtils.linkForRef('attr:DetailViewerField.type')}: &lt;code&gt;&quot;separator&quot;&lt;/code&gt;, this attribute specifies&amp;#010 the height of the separator." name="height" valueType="Number" defaultValue="null" type="attr" definingClass="object:DetailViewerField">
</docItem>
<docItem ref="group:cursor" name="cursor" type="group">
    <refs>attr:Splitbar.cursor</refs>
    <refs>attr:Splitbar.vResizeCursor</refs>
    <refs>attr:Splitbar.hResizeCursor</refs>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ImgButton.actionType" description="Behavior on state changes -- BUTTON, RADIO or CHECKBOX" name="actionType" valueType="SelectionType" defaultValue="&quot;button&quot;" definingClass="class:ImgButton">
    <getter>getActionType</getter>
    <setter>setActionType</setter>
    <examples>${isc.DocUtils.linkForExampleId('buttonRadioToggle')}</examples>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="group:skinning" title="Skinning / Theming" description="Skinning (aka &quot;theming&quot; or &quot;branding&quot;) is the process of modifying SmartClient's default&amp;#010 look and feel to match the desired look and feel for your application.  SmartClient supports&amp;#010 an extremely powerful and simple skinning system that allows designers with a basic grasp of&amp;#010 CSS and JavaScript to skin any SmartClient component.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Basics&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; SmartClient components create their visual appearance by dynamically generating HTML,&amp;#010 within the browser, using JavaScript.&amp;#010&amp;#010 &lt;li&gt; the HTML generated by SmartClient components contains CSS style names and URLs to&amp;#010 images&amp;#010&amp;#010 &lt;li&gt; SmartClient components can be skinned by replacing the CSS styles and images that&amp;#010 the components use by default, or by using JavaScript properties to configure&amp;#010 components to use new CSS styles and new image URLs.&amp;#010&amp;#010 &lt;li&gt; You can change the appearance of an individual SmartClient component by passing &amp;#010 properties to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}, or you can skin all components of the&amp;#010 same class at once, by using ${isc.DocUtils.linkForRef('classMethod:Class.addProperties','addProperties()')} and &amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults()')} to change the defaults for the class.&amp;#010&amp;#010 &lt;li&gt; A &quot;skin&quot; consists of:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; a single CSS stylesheet containing all CSS styles used by SmartClient components&amp;#010 (&lt;code&gt;skin_styles.css&lt;/code&gt;)&amp;#010 &lt;li&gt; a single JavaScript file that sets component defaults (&lt;code&gt;load_skin.js&lt;/code&gt;)&amp;#010 &lt;li&gt; a directory tree of images organized by component&amp;#010 &lt;/ul&gt;&amp;#010 &amp;#010 &lt;li&gt;&amp;#010 The example skins that come with SmartClient are in&amp;#010 &lt;code&gt;isomorphicSDK/isomorphic/skins&lt;/code&gt;.  The standard filesystem layout for a skin is:&amp;#010 &lt;pre&gt;&amp;#010    isomorphic/skins&amp;#010        skin_styles.css&amp;#010        load_skin.js&amp;#010        images/&amp;#010            ListGrid/&amp;#010                sort_ascending.gif&amp;#010                ...&amp;#010            Tab/&amp;#010            ... other directories containing&amp;#010                component or shared media ...&amp;#010 &lt;/pre&gt;&amp;#010 &lt;li&gt; A skin is loaded via a &amp;lt;SCRIPT SRC=&amp;gt; tag that loads load_skin.js, or, if using&amp;#010 the SmartClient server, by specifying the &quot;skin&quot; property of the ${isc.DocUtils.linkForRef('group:loadISCTag')}.&amp;#010 load_skin.js loads the stylesheet and sets the CSS styleNames and media URLs that&amp;#010 SmartClient components will use.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Modifying Skins&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 To modify a skin, first create a copy of one of the skins that comes with the SmartClient&amp;#010 SDK, then modify the copy.  Full instructions are provided in Chapter 9 of the &amp;#010 ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Locating Skinning Properties&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Starting from the name of the component&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Given a SmartClient component that you want to skin, use the search feature of the SmartClient&amp;#010 Reference to locate it, and open the &quot;Instance APIs&quot; tab.&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; for properties that set CSS styles, look for properties whose name includes &quot;style&quot;, eg&amp;#010 ${isc.DocUtils.linkForRef('attr:Button.baseStyle')}&amp;#010 &lt;li&gt; for properties that control URLs to media, look for properties whose name includes&amp;#010 &quot;src&quot;, &quot;image&quot; or &quot;icon&quot;, such as ${isc.DocUtils.linkForRef('attr:Img.src')}&amp;#010 &lt;li&gt; for subcomponents that also support skinning, look for properties of type &quot;AutoChild&quot;&amp;#010 and check the reference for the type of the AutoChild for settable properties.  For example,&amp;#010 ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')} is an ImgButton and therefore supports ${isc.DocUtils.linkForRef('attr:ImgButton.src')}.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;b&gt;TIP&lt;/b&gt;: the Instance APIs tab allows you to search within just the current class, limit &amp;#010 the display to just properties or methods, and sort by type.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Starting from a running example&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Open the Developer Console and use the Watch Tab to locate the component or subcomponent you &amp;#010 want to skin, then locate it in the documentation, as above.&amp;#010 &lt;P&gt;&amp;#010 If you don't find the component in the documentation, it may be a custom component specific&amp;#010 to your organization.  To find the base SmartClient component for a component named&amp;#010 &quot;MyComponent&quot;, use the following code to find out the name of the superclass:&amp;#010 &lt;pre&gt;&amp;#010     isc.&lt;i&gt;MyComponent&lt;/i&gt;.getSuperClass().getClassName()&amp;#010 &lt;/pre&gt;&amp;#010 Repeat this until you arrive at a SmartClient built-in class.  You can execute this code in&amp;#010 the &quot;Eval JS&quot; area of the Results pane of the Developer Console.&amp;#010 &lt;P&gt;&amp;#010 Specific browsers offer alternate approaches to quickly discover the images or style names&amp;#010 being used for a part of a SmartClient component's appearance: &amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; the Firefox browser offers a dialog via Tools-&gt;&quot;Page Info&quot; that gives a manifest of&amp;#010 media used in the page.&amp;#010 &lt;li&gt; the &lt;a href='http://www.getfirebug.com/' onclick=&quot;window.open('http://www.getfirebug.com/');return false;&quot;&gt;Firebug&lt;/a&gt; extension for Firefox has an&amp;#010 &quot;Inspect&quot; feature that allows you to see the HTML, CSS and media in use for a given area of&amp;#010 the screen&amp;#010 &lt;li&gt; right clicking (option-click on a Mac) on an image and choosing &quot;Properties&quot; shows a&amp;#010 dialog that provides the image URL in most browsers.  Tips:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; if a SmartClient component is showing text over an image, right-click at the very edge of&amp;#010 the underlying image to get image properties rather than information about the text label&amp;#010 &lt;li&gt; on some browsers, in order to see the full image URL, you may need to drag select the &amp;#010 partial URL of the image shown in the properties dialog&amp;#010 &lt;/ul&gt;&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Image URLs in SmartClient&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Properties that refer to images by URL, such as ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.icon')}, are&amp;#010 specially interpreted in SmartClient to allow for simpler and more uniform image URLs,&amp;#010 and to allow applications to be restructured more easily.&amp;#010 &lt;P&gt;&amp;#010 Unlike the URL used with an HTML &amp;lt;IMG&amp;gt; element, the image URL passed to a SmartClient&amp;#010 component is not assumed to be relative to the current page.  See ${isc.DocUtils.linkForRef('type:SCImgURL')} for a&amp;#010 full explanation of the default application image directory, and the meaning of the &quot;[SKIN]&quot;&amp;#010 prefix.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Specifying Image URLs&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Default image URLs for SmartClient components are specified in &lt;code&gt;load_skin.js&lt;/code&gt; via&amp;#010 JavaScript, using calls to ${isc.DocUtils.linkForRef('classMethod:Class.addProperties')} and&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}.  For example, the &lt;code&gt;load_skin.js&lt;/code&gt; file&amp;#010 from the &quot;SmartClient&quot; sample skin includes the following code to establish the media used by&amp;#010 ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}:&amp;#010 &lt;pre&gt;&amp;#010    isc.Window.changeDefaults(&quot;minimizeButtonDefaults&quot;, { &amp;#010         src:&quot;[SKIN]/Window/minimize.png&quot;&amp;#010    });&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Specifying Image Sizes&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Many SmartClient components must know some image sizes in advance, in order to allow those&amp;#010 components to autosize to data or content.&amp;#010 &lt;P&gt;&amp;#010 For example, the ${isc.DocUtils.linkForRef('class:ImgTab')}s used in ${isc.DocUtils.linkForRef('class:TabSet')}s are capable of automatically sizing&amp;#010 to a variable length ${isc.DocUtils.linkForRef('attr:Tab.title')}.  To make this possible, SmartClient must know the&amp;#010 sizes of the images used as &quot;endcaps&quot; on each tab in advance.&amp;#010 &lt;P&gt;&amp;#010 Like image URLs, image sizes are specified in &lt;code&gt;load_skin.js&lt;/code&gt;.  The following code&amp;#010 sample establishes the default size of the &quot;endcaps&quot; for tabs, by setting a default value&amp;#010 for ${isc.DocUtils.linkForRef('attr:ImgTab.capSize')}:&amp;#010 &lt;pre&gt;&amp;#010     isc.ImgTab.addProperties({&amp;#010         capSize:4&amp;#010     })&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;CSS usage in SmartClient&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 In SmartClient, screen layout and sizing are controlled via JavaScript, and appearance via&amp;#010 CSS and images.  &amp;#010 &lt;P&gt;&amp;#010 CSS borders, margins and padding applied to SmartClient components can be treated as purely&amp;#010 visual properties with no effect on sizing or layout.  Unlike HTML elements, a SmartClient&amp;#010 component will always have the exact size you specify via JavaScript, regardless of browser&amp;#010 platform, browser compatibility mode, or borders, margins, or padding, all of which normally&amp;#010 affect the final size of an HTML element. &amp;#010 &lt;P&gt;&amp;#010 For this reason, SmartClient skinning requires only novice-level familiarity with CSS, as CSS&amp;#010 is used principally for colors and fonts.  See ${isc.DocUtils.linkForRef('type:CSSStyleName','this discussion')} for&amp;#010 further details on what properties should be set via CSS vs via JavaScript.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Statefulness and Suffixes&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Some components or areas within components, including buttons and the cells within a grid, are&amp;#010 &quot;stateful&quot;, meaning that they can be in one of a set of states each of which has a distinct&amp;#010 visual appearance.&amp;#010 &lt;P&gt;&amp;#010 Stateful components switch the CSS styles or image URLs they are using as they transition&amp;#010 from state to state, appending state information as suffixes on the style names or URL.&amp;#010 See ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.baseStyle')} for details and examples.&amp;#010 &lt;P&gt;&amp;#010 SmartClient has built-in logic to manage a series of state transitions, such as:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &quot;rollover&quot;: showing a different appearance when the mouse is over a component&amp;#010 &lt;li&gt; &quot;button down&quot;: showing a different appearance when the mouse is pressed over a&amp;#010 component&amp;#010 &lt;li&gt; &quot;disabled&quot;: showing a different appearance when a component cannot be interacted with&amp;#010 &lt;li&gt; &quot;selected&quot;: showing one of a set of components in a different state to indicate&amp;#010 selection&amp;#010 &lt;/ul&gt;&amp;#010 Flags on some components, such as ${isc.DocUtils.linkForRef('attr:ImgButton.showRollOver')}, allow you to control whether the&amp;#010 component will switch CSS style or image URL when the component transitions into a given state.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;StretchImg: 3-segment stretchable images&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 A ${isc.DocUtils.linkForRef('class:StretchImg')} is SmartClient component that renders out a compound image composed of 3&amp;#010 image files: two fixed-size endcaps images and a stretchable center segment.  Like stateful&amp;#010 components, the names of each image segment is appended to the image URL as a suffix.  See&amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')} for details.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;EdgedCanvas&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Similar to a StretchImg, an ${isc.DocUtils.linkForRef('class:EdgedCanvas')} provides an image-based decorative edge&amp;#010 around and/or behind another component, with up to 9 segments (a 3x3 grid).  Decorative&amp;#010 edges can be added to any component by setting ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','showEdges:true')}.&amp;#010 EdgedCanvas is also used to construct dropshadows, which can be enabled on any component via&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.showShadow','showShadow:true')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Multiple looks for the same component type&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 In some cases you need to create two variations in appearance for a component with the same&amp;#010 behavior.  For example, you may want to create a specialized Window, called &quot;PaletteWindow&quot;,&amp;#010 that behaves like a normal Window but has a very compact look &amp; feel.  To create a&amp;#010 separately skinnable component for PaletteWindow, use ${isc.DocUtils.linkForRef('classMethod:isc.defineClass')}.  For&amp;#010 example:&amp;#010 &lt;pre&gt;&amp;#010    isc.defineClass(&quot;PaletteWindow&quot;, &quot;Window&quot;);&amp;#010    isc.PaletteWindow.addProperties({&amp;#010        showFooter:false,&amp;#010        ...&amp;#010    })&amp;#010 &lt;/pre&gt;" name="skinning" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="method:Menu.showSubmenu" flags="A" description=" Show the submenu for the specified item, if it has one.&amp;#010 &lt;P&gt;&amp;#010 Normally triggered automatically by user interaction.&amp;#010&amp;#010" name="showSubmenu" type="method" definingClass="class:Menu">
<params description="the item in question, or it's index" optional="false" name="item" type="MenuItem | number">
</params>
    <groups>visibility</groups>
</docItem>
<docItem ref="method:GridRenderer.rowOver" flags="A" description=" Called when the mouse pointer enters a row&amp;#010&amp;#010" name="rowOver" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:ValuesManager.setDataSource" flags="A" description=" Specifies a dataSource for this valuesManager.  This dataSource will then be used for&amp;#010 validation and client-server flow methods.&amp;#010" name="setDataSource" type="method" definingClass="class:ValuesManager">
<params description="Datasource object or identifier to bind to." optional="false" name="dataSource" type="string | DataSource">
</params>
</docItem>
<docItem ref="attr:Slider.trackSrc" flags="IRW" description="The base filename for the slider track images.&amp;#010 The filenames for the track icons are assembled from this base filename and the state of the&amp;#010 slider, as follows:&lt;br&gt;&amp;#010 Assume the trackSrc is set to &lt;code&gt;{baseName}.{extension}&lt;/code&gt;&lt;br&gt;&amp;#010 The full set of images to be displayed is:&lt;br&gt;&amp;#010 For horizontal sliders:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_start.{extension}&lt;/code&gt;: start (left edge) of the track for a slider&amp;#010     that is enabled.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_stretch.{extension}&lt;/code&gt;:  the track for an enabled slider; this may&amp;#010     be centered, tiled, or stretched.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_end.{extension}&lt;/code&gt;:  end (right edge) of the track for a slider&amp;#010     that is enabled.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_off_start.{extension}&lt;/code&gt;: start (left edge) of the track for a slider&amp;#010     that is disabled.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_off_stretch.{extension}&lt;/code&gt;:  the track for a disabled slider; this&amp;#010     may be centered, tiled, or stretched.&amp;#010 &lt;li&gt;&lt;code&gt;h{baseName}_off_end.{extension}&lt;/code&gt;:  end (right edge) of the track for a slider&amp;#010     that is disabled.&amp;#010 &lt;/ul&gt;&amp;#010 For vertical sliders:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_start.{extension}&lt;/code&gt;: start (bottom edge) of the track for a slider&amp;#010     that is enabled.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_stretch.{extension}&lt;/code&gt;:  the track for an enabled slider; this may&amp;#010     be centered, tiled, or stretched.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_end.{extension}&lt;/code&gt;:  end (top edge) of the track for a slider&amp;#010     that is enabled.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_off_start.{extension}&lt;/code&gt;: start (bottom edge) of the track for a slider&amp;#010     that is disabled.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_off_stretch.{extension}&lt;/code&gt;:  the track for a disabled slider; this&amp;#010     may be centered, tiled, or stretched.&amp;#010 &lt;li&gt;&lt;code&gt;v{baseName}_off_end.{extension}&lt;/code&gt;:  end (top edge) of the track for a slider&amp;#010     that is disabled.&amp;#010 &lt;/ul&gt;" name="trackSrc" valueType="String" defaultValue="&quot;track.gif&quot;" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.trackImageType">
</seeAlso>
</docItem>
<docItem ref="type:TreeModelType" name="TreeModelType" type="type">
<values description="In this model, each node has an ID unique across the whole tree and a parent ID that points to its parent.  The name of the unique ID property is can be specified&amp;#010 via ${isc.DocUtils.linkForRef('attr:Tree.idField')} and the name of the parent ID property can be specified via&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}.  The initial set of nodes can be passed in as a list to&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.data')} and also added as a list later via ${isc.DocUtils.linkForRef('method:Tree.linkNodes')}.&amp;#010 Whether or not a given node is a folder is determined by the value of the property specified&amp;#010 by ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 The &quot;parent&quot; modelType is best for integrating with relational storage (because nodes can&amp;#010 map easily to rows in a table) and collections of Beans and is the model used for DataBound&amp;#010 trees." value="&quot;parent&quot;"></values>
<values description="In this model, nodes specify their children as a list of nodes.  The property that holdes the children nodes is determined by ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}.&amp;#010 Nodes are not required to have an ID that is unique across the whole tree (in fact, no ID is&amp;#010 required at all).  Node names (specified by the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}, unique within&amp;#010 their siblings, are optional but not required.  Whether or not a given node is a folder is&amp;#010 determined by the presense of the children list (${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')})." value="&quot;children&quot;"></values>
</docItem>
<docItem ref="method:ListGrid.editComplete" flags="" description=" Callback fired when inline edits have been successfully saved.&amp;#010 &lt;P&gt;&amp;#010 No default implementation.&amp;#010&amp;#010" name="editComplete" type="method" definingClass="class:ListGrid">
<params description="current index of the row that was saved" optional="false" name="rowNum" type="number">
</params>
<params description="index of the column that was saved, if applicable" optional="false" name="colNum" type="number">
</params>
<params description="new values that were saved" optional="false" name="newValues" type="any">
</params>
<params description="old values before the save occurred" optional="false" name="oldValues" type="any">
</params>
<params description="Event that led to the save" optional="false" name="editCompletionEvent" type="editCompletionEvent">
</params>
<params description="for DataSource saves, DSResponse object returned" optional="true" name="dsResponse" type="DSResponse">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:TreeNode.enabled" flags="IR" description="Affects the visual style and interactivity of the record.  If set to &lt;code&gt;false&lt;/code&gt;&amp;#010 the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the&amp;#010 mouse moves over it, nor will it respond to mouse clicks." name="enabled" valueType="boolean" defaultValue="null" type="attr" definingClass="object:TreeNode">
    <examples>${isc.DocUtils.linkForExampleId('disabledRows')}</examples>
</docItem>
<docItem ref="group:rects" name="rects" type="group">
</docItem>
<docItem ref="method:CubeGrid.getColumnFacetValues" flags="" description=" Return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')} indicating the facet values for a specific &amp;#010 column in the grid&amp;#010" name="getColumnFacetValues" type="method" definingClass="class:CubeGrid">
<params description="index of the column" optional="false" name="colNum" type="number">
</params>
<returns description="facet values for the specified column. Returns null if the specified       column is not present in the grid." type="FacetValueMap"></returns>
</docItem>
<docItem ref="classAttr:isc.itemEndIndent" flags="IRW" description="Size, in pixels, of indentation of all member items relative to the end of&amp;#010 the alignment axis. For instance, for left-aligned members, &amp;#010 itemStartIndent specifies indentation for every item from the right side of the&amp;#010 section stack." name="itemEndIndent" valueType="Number" defaultValue="undefined" type="attr" definingClass="class:isc">
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:Canvas.canHover" flags="IRW" description="Will this Canvas fire hover events when the user hovers over it, or one of its children?" name="canHover" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
<seeAlso ref="method:Canvas.hover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:Canvas.bringToFront" flags="" description=" Puts this widget at the top of the stacking order, so it appears in front of all other&amp;#010 widgets in the same parent.&amp;#010" name="bringToFront" type="method" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('layer')}</examples>
    <groups>zIndex</groups>
</docItem>
<docItem ref="classMethod:Page.moveTo" flags="" description="		Move the window to a specified top and left in screen coordinates.&amp;#010&amp;#010" name="moveTo" type="classMethod" definingClass="class:Page">
<params description="new left coordinate for window" optional="false" name="left" type="number">
</params>
<params description="new top coordinate for window" optional="false" name="top" type="number">
</params>
</docItem>
<docItem ref="class:FileLoader" description="This class enables background (deferred) loading and caching of JS, CSS and Image files.  It is&amp;#010 designed to work standalone from the rest of the SmartClient framework to provide a lightweight&amp;#010 caching and loading mechanism for SmartClient modules as well as user-built application&amp;#010 modules/fragments.&amp;#010 &lt;p&gt;&amp;#010 The most common usage scenarios are:&amp;#010 &lt;ul&gt;&amp;#010   &lt;li&gt; Caching JS, CSS, Image files in the browser in anticipation of a transition to a page&amp;#010   that requires these files.  For example, a plain HTML (non-SmartClient) login page or&amp;#010   landing page can begin caching SmartClient in the background while allowing the user&amp;#010   to login, or giving the user something to read.  Normally, loading SmartClient or other&amp;#010   large JavaScript files would block page loading and display.  By loading SmartClient in&amp;#010   the background only after a simple HTML landing page has loaded, you can completely&amp;#010   eliminate perceived download time associated with loading a rich UI application, making a&amp;#010   much larger difference in user experience than any difference in framework/application size.&amp;#010   &lt;li&gt; Loading a multi-phase UI.  In this scenario, an initial rendering of a page is done with&amp;#010   minimal data transfer to the browser.  Then JS, CSS, and Image files are fetched in the&amp;#010   background to provide richer UI components.  During this time the user can continue to normally&amp;#010   interact with the initial page.  Once loading is complete, the UI is updated with richer&amp;#010   components.&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010 The recommended usage pattern is to use the &lt;code&gt;loadISC&lt;/code&gt; custom tag provided as part of&amp;#010 the SmartClient SDK.  You can specify &lt;code&gt;cacheOnly=&quot;true&quot;&lt;/code&gt; to loadISC to cache the&amp;#010 SmartClient framework in the background or alternately &lt;code&gt;defer=&quot;true&quot;&lt;/code&gt; to load the&amp;#010 SmartClient framework and make it available in the current page.  You can specify the&amp;#010 &lt;code&gt;onload&lt;/code&gt; attribute of the tag to provide a JavaScript callback to your code that will&amp;#010 be called when the framework loading is complete.&amp;#010 &lt;p&gt;&amp;#010 If you're not working in a JSP environment, you can use the&amp;#010 ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')} APIs to accomplish&amp;#010 the same effect as the &lt;code&gt;loadISC&lt;/code&gt; JSP tag.&amp;#010 &lt;p&gt;&amp;#010 Additional APIs are provided for performing dynamic caching and loading of other JS, CSS, and&amp;#010 Image files to improve the performance of your application.  See below.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;You must set &lt;code&gt;window.isomorphicDir&lt;/code&gt; before loading and using this module unless the&amp;#010 default of '../isomorphic/' is accepable.  E.g. if your html file is in your toplevel webroot&amp;#010 directory, then your HTML file should say (note the trailing slash):&lt;/b&gt;&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;window.isomorphicDir='isomorphic/'&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/modules/ISC_FileLoader.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &amp;#010 This module is usable independent of the rest of SmartClient - you can use it on pages that&amp;#010 don't load any other modules.  In practice, the general pattern is to use this module on&amp;#010 static HTML pages such as a login page to pre-cache SmartClient modules, application logic,&amp;#010 skin files, and css so that once the user logs in, there's no latency to load the rich UI.&amp;#010 &lt;p&gt;&amp;#010 Note: You can also reference this class via the alias isc.FL" name="FileLoader" type="class">
    <classAttrs>classAttr:FileLoader.defaultModules</classAttrs>
    <classAttrs>classAttr:FileLoader.defaultSkin</classAttrs>
    <classMethods>classMethod:FileLoader.cacheISC</classMethods>
    <classMethods>classMethod:FileLoader.loadISC</classMethods>
    <classMethods>classMethod:FileLoader.loadJSFiles</classMethods>
    <classMethods>classMethod:FileLoader.loadModules</classMethods>
    <classMethods>classMethod:FileLoader.cacheFiles</classMethods>
    <classMethods>classMethod:FileLoader.cacheModules</classMethods>
    <classMethods>classMethod:FileLoader.cacheImgStates</classMethods>
    <classMethods>classMethod:FileLoader.cacheStretchImgStates</classMethods>
    <classMethods>classMethod:FileLoader.cacheEdgeImages</classMethods>
    <classMethods>classMethod:FileLoader.cacheShadows</classMethods>
    <treeLocation>Optional Modules/Network Performance</treeLocation>
    <requiresModules>NetworkPerformance</requiresModules>
</docItem>
<docItem ref="attr:TimeItem.displayFormat" flags="IRW" description="What format should this item's time string be presented in?" name="displayFormat" valueType="timeFormatter" defaultValue="&quot;toShort24HourTime&quot;" type="attr" definingClass="class:TimeItem">
</docItem>
<docItem ref="method:Class.Super" flags="" description="&amp;#010	Call the SuperClass implementation of a particular method.  &amp;#010&amp;#010" name="Super" type="method" definingClass="class:Class">
<params description="name of the superclass method to call" optional="false" name="methodName" type="string">
</params>
<params description="native &quot;arguments&quot; object, or array of                                           arguments to pass to the Super call" optional="false" name="args" type="arguments or Array">
</params>
<params description="native &quot;arguments&quot; object, required if an Array is                                  passed for the &quot;args&quot; parameter in lieue of the native&amp;#010                                  arguments object" optional="true" name="nativeArgs" type="arguments">
</params>
<returns description="return value of the superclass call" type="any"></returns>
</docItem>
<docItem ref="attr:StatefulCanvas.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Scrollbar.startThumbOverlap" flags="IRWA" description="Number of pixels the thumb is allowed to overlap the buttons at the start of the track.&amp;#010 Default prevents doubling of 1px borders.  Set higher to allow media that shows curved&amp;#010 joins between the track button and ScrollThumb." name="startThumbOverlap" valueType="number" defaultValue="null" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="attr:Slider.maxValue" flags="IRW" description="The maximum slider value. The slider value is equal to maxValue when the thumb is at the&amp;#010 top or right of the slider (unless flipValues is true, in which case the maximum value&amp;#010 is at the bottom/left of the slider)" name="maxValue" valueType="float" defaultValue="100" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.flipValues">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="method:DataSource.getFieldNames" flags="" description=" Retrieves the list of fields declared on this DataSource.&amp;#010&amp;#010" name="getFieldNames" type="method" definingClass="class:DataSource">
<returns description="names of all fields declared on this DataSource" type="Array of String"></returns>
</docItem>
<docItem ref="classMethod:XMLTools.loadWSDL" flags="A" description=" Load a WSDL file and create an instance of WebService that allows invoking operations and&amp;#010 binding DataSources to web service operations.&amp;#010 &lt;P&gt;&amp;#010 The created WebService object is available in the callback as the single parameter&amp;#010 &quot;service&quot;, or can retrieved via &lt;code&gt;WebService.get(serviceNamespace)&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 XML Schema present in the WSDL file will also will also be processed as described in&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}.&amp;#010 &lt;P&gt;&amp;#010 NOTE: unless you are building an application that dynamically contacts WSDL web services&amp;#010 without prior knowledge, instead of calling loadWSDL(), you should either:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; use the ${isc.DocUtils.linkForRef('group:loadWSDLTag')} tag to eliminate the need for an asynchronous&amp;#010 download of a WSDL file as part of application startup, &lt;b&gt;OR&lt;/b&gt;&amp;#010 &lt;li&gt; use the &quot;WSDL&quot; tab in the Developer Console to obtain the WebService definition as a&amp;#010 JavaScript file that can be retrieved via a normal HTML &amp;lt;SCRIPT SRC=&amp;gt; tag.  &amp;#010 &lt;/ul&gt;&amp;#010 Platform notes:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; loadWSDL() is not supported in Safari 2.0 (but is supported in Safari 3.0.3 and greater)&amp;#010 However, you can use either approach mentioned above (loadWSDLTag or JavaScript file) with &amp;#010 Safari pre 3.0.3.&amp;#010 &lt;li&gt; if you are using a non-Java server, in order to obtain a JavaScript file representing a&amp;#010 web service, you must run the Developer Console in the Java-based SmartClient SDK&amp;#010 &lt;/ul&gt;&amp;#010&amp;#010" name="loadWSDL" type="classMethod" definingClass="class:XMLTools">
<params description="URL to load the WSDL file from" optional="false" name="wsdlURL" type="URL">
</params>
<params description="signature is callback(service)" optional="false" name="callback" type="Callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('WSDLDataSource')}</examples>
    <groups>xmlSchema</groups>
</docItem>
<docItem ref="type:KeyIdentifier" description="Identifiers for keys pressed by the user used by various methods.&lt;br&gt;&amp;#010 Valid &lt;code&gt;keyIdentifier&lt;/code&gt;s can be either ${isc.DocUtils.linkForRef('type:KeyName')} strings, or objects.&lt;br&gt;&amp;#010 If a &lt;code&gt;keyIdentifier&lt;/code&gt; is specified as an object, it should have the following&amp;#010 properties:&lt;br&gt;&amp;#010 - &lt;code&gt;keyName&lt;/code&gt;: name of the key&lt;br&gt;&amp;#010 - &lt;code&gt;ctrlKey&lt;/code&gt;: optional boolean - true if ctrl is down.&lt;br&gt;&amp;#010 - &lt;code&gt;shiftKey&lt;/code&gt;: optional boolean - true if shift is down.&lt;br&gt;&amp;#010 - &lt;code&gt;altKey&lt;/code&gt;: optional boolean - true if alt is down." name="KeyIdentifier" type="type">
<seeAlso ref="type:KeyName">
</seeAlso>
</docItem>
<docItem ref="attr:DataSourceField.valueXPath" flags="IR" description="XPath expression used to retrieve the field's value.&amp;#010 &lt;P&gt;&amp;#010 This XPath expression will be evaluated in the scope of the record objects selected by &amp;#010 the ${isc.DocUtils.linkForRef('attr:DataSource.recordXPath')}.  For XML data &amp;#010 (${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat:&quot;xml&quot;')}) this means a call to&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectString')} passing the selected XML element.  For JSON data&amp;#010 (${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat:&quot;json&quot;')}), this means a call to &amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')} passing the selected JSON object.&amp;#010 &lt;P&gt;&amp;#010 In the absence of a &lt;code&gt;valueXPath&lt;/code&gt;, for JSON data the value for the field will&amp;#010 be the value of the same-named property in the selected object.  &amp;#010 &lt;P&gt;&amp;#010 For XML data, the value will be the attribute or subelement named after the field name&amp;#010 For example, for a field &quot;author&quot; on a record element &amp;lt;book&amp;gt;, the following structures&amp;#010 require no valueXPath:&amp;#010 &lt;pre&gt;&amp;#010    &amp;lt;book author=&quot;Mark Jones&quot;/&amp;gt;&amp;#010&amp;#010    &amp;lt;book&amp;gt;&amp;#010        &amp;lt;author&amp;gt;Mark Jones&amp;lt;/author&amp;gt;&amp;#010    &amp;lt;/book&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 To learn about XPath, try the following search:&amp;#010 &lt;a href=&quot;http://www.google.com/search?q=xpath+tutorial&quot; target=&quot;_blank&quot;&amp;#010 &gt;http://www.google.com/search?q=xpath+tutorial&lt;/a&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;Using valueXPath with the SmartClient server&lt;/B&gt;&amp;#010 &lt;p&gt;&amp;#010 If you're using the SmartClient server to return data via the DSResponse object (or&amp;#010 indirectly doing so using DataSource DMI), the valueXPath you specify on the DataSource&amp;#010 fields will be applied to the data you return via the &amp;#010 &lt;a href='http://jakarta.apache.org/commons/jxpath/' onclick=&quot;window.open('http://jakarta.apache.org/commons/jxpath/');return false;&quot;&gt;JXPath&lt;/a&gt; library.&amp;#010 &lt;P&gt;&amp;#010 If you are returning Java Beans as your DSResponse data, normally each dataSource field&amp;#010 receives the value of the same named Java Bean property, that is, a field &quot;zipCode&quot; is&amp;#010 populated by looking for &quot;getZipCode()&quot; on the objects passed as DSResponse data.  You can&amp;#010 use &lt;code&gt;valueXPath&lt;/code&gt; to retrieve properties from subobjects, so long as a chain of&amp;#010 getter methods exists that corresponds to the valueXPath.  For example, a valueXPath of&amp;#010 &quot;address/zipCode&quot; expects to call &quot;getAddress()&quot; on the bean(s) passed to&amp;#010 DSResponse.setData(), followed by &quot;getZipCode()&quot; on whatever object &quot;getAddress()&quot; returns.&amp;#010 &lt;P&gt;&amp;#010 When you are saving data, the inbound DSRequest values, available as a Java Map, will use &amp;#010 just dataSource field names as Map keys, not the valueXPath used to derive them.  However,&amp;#010 to achieve bidirectional valueXPath binding, you can use the server-side method&amp;#010 dataSource.setProperties() to use the valueXPath when setting properties on your server&amp;#010 object model.  When applied as a setter, an XPath like &quot;address/zipCode&quot; attempts&amp;#010 &quot;getAddress()&quot; followed by &quot;setZipCode()&quot; on the returned object.  JXPath also has some&amp;#010 ability to auto-create intervening objects if they are missing, such as auto-creating an&amp;#010 &quot;address&quot; subobject when applying &quot;address/zipCode&quot; as a valueXPath.&amp;#010 &lt;P&gt;&amp;#010 See the&amp;#010 &lt;a href='http://jakarta.apache.org/commons/jxpath/' onclick=&quot;window.open('http://jakarta.apache.org/commons/jxpath/');return false;&quot;&gt;JXPath&lt;/a&gt; library documentation for&amp;#010 complete details, including other types of server object models supported, such as&amp;#010 server-side XML." name="valueXPath" valueType="XPathExpression" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <seeAlso>DataSource.setProperties() (Java API)</seeAlso>
    <seeAlso>DSResponse.setData() (Java API)</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('xpathBinding')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:Snapbar.showGrip" flags="IRW" description="Should we show a &quot;grip&quot; image floating above the center of this widget?" name="showGrip" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
    <groups>grip</groups>
</docItem>
<docItem ref="classMethod:Log.getPriority" flags="" description=" Return the priority setting for a particular category.&amp;#010 &lt;P&gt;&amp;#010 If there is no priority setting specific to this category, &lt;code&gt;null&lt;/code&gt; will be&amp;#010 returned, NOT &lt;code&gt;Log.defaultPriority&lt;/code&gt;.&amp;#010&amp;#010" name="getPriority" type="classMethod" definingClass="class:Log">
<params description="category name" optional="false" name="category" type="String">
</params>
<params description="Optional class or instance to check for                                               specific log priority overrides" optional="true" name="object" type="Class or Instance object">
</params>
<returns description="priority setting" type="LogPriority"></returns>
</docItem>
<docItem ref="method:Date.toEuropeanShortDate" flags="" description="			Return this date in the format: &lt;code&gt;DD/MM/YYYY&lt;/code&gt;&amp;#010" name="toEuropeanShortDate" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:ListGrid.booleanFalseImage" flags="IRWA" description="Image to display for a false value in a boolean field. Default &lt;code&gt;null&lt;/code&gt; value&amp;#010 means no image will be displayed&amp;#010 &lt;P&gt;&amp;#010 To turn this off explicitly set ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} to true" name="booleanFalseImage" valueType="string" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.booleanTrueImage">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="method:Log.logIsEnabledFor" flags="" description=" Check whether a message logged at the given priority would be visible in the log.&amp;#010 &lt;P&gt;&amp;#010 As with logDebug, category is defaulted to the current className.  Use this method to avoid&amp;#010 putting together expensive log messages if they will never appear in the log.&amp;#010&amp;#010" name="logIsEnabledFor" type="method" definingClass="class:Log">
<params description="priority level" optional="false" name="priority" type="LogPriority">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="attr:Applet.extraHTML" flags="IR" description="Any additional HTML you want to throw into the tag that specifies the applet element." name="extraHTML" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Applet">
</docItem>
<docItem ref="method:ListGrid.getTotalRows" flags="" description=" Return the total number of rows in the grid.&amp;#010 &lt;P&gt;&amp;#010 Note that, when creating new rows via inline editing, this can be more than the total number&amp;#010 of rows in the dataset (that is, grid.data.getLength())&amp;#010" name="getTotalRows" type="method" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:SpacerItem.width" flags="IRW" description="default width for the spacer" name="width" valueType="number" defaultValue="20" type="attr" definingClass="class:SpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DynamicForm.showFieldErrors" flags="" description=" If this form has any outstanding validation errors for the field passed in, show them now.&amp;#010 Called when field errors are set directly via ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')} / &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.addFieldErrors')} / ${isc.DocUtils.linkForRef('method:DynamicForm.clearFieldErrors')}.&lt;br&gt;&amp;#010 Default implementation simply falls through to ${isc.DocUtils.linkForRef('method:DynamicForm.showErrors')}.&amp;#010" name="showFieldErrors" type="method" definingClass="class:DynamicForm">
<params description="field to show errors for" optional="false" name="fieldName" type="string">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:FormItem.textAlign" flags="IRW" description="Alignment of the text / content within this form item" name="textAlign" valueType="Alignment" defaultValue="Canvas.LEFT" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:TreeGrid.closeFolder" flags="" description=" Closes a folder.&amp;#010&amp;#010" name="closeFolder" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.openFolder">
</seeAlso>
<seeAlso ref="method:TreeGrid.folderClosed">
</seeAlso>
<params description="node to close" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="method:ListGrid.getTitleField" flags="" description=" Method to return the fieldName which represents the &quot;title&quot; for records in this&amp;#010 ListGrid.&lt;br&gt;&amp;#010 If this.titleField is explicitly specified it will always be used.&amp;#010 Otherwise, default implementation will check ${isc.DocUtils.linkForRef('attr:DataSource.titleField')} for databound&amp;#010 grids.&lt;br&gt;&amp;#010 For non dataotherwise returns the first defined field name of &lt;code&gt;&quot;title&quot;&lt;/code&gt;, &amp;#010 &lt;code&gt;&quot;name&quot;&lt;/code&gt;, or &lt;code&gt;&quot;id&quot;&lt;/code&gt;. If we dont find any field-names that match these&amp;#010 titles, the first field in the grid will be used instead.&amp;#010" name="getTitleField" type="method" definingClass="class:ListGrid">
<returns description="fieldName for title field for this grid." type="string"></returns>
</docItem>
<docItem ref="attr:OperationBinding.xmlNamespaces" flags="IR" description="Optional object declaring namespace prefixes for use in ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} XPath expressions.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;xmlNamespaces&lt;/code&gt; should be specified as a mapping from namespace prefix to&amp;#010 namespace URI, for example:&amp;#010 &lt;pre&gt;&amp;#010    xmlNamespaces : {&amp;#010        az : &quot;http://webservices.amazon.com/AWSECommerceService/2005-03-23&quot;&amp;#010    }&amp;#010 &lt;/pre&gt;&amp;#010 By default, all namespaces declared on the document element are made available with the&amp;#010 prefix used in the document itself.  For non-WSDL-described XML results, if there is a&amp;#010 default namespace on the document element, it is made available with the special prefix&amp;#010 &quot;default&quot;.&amp;#010 &lt;P&gt;&amp;#010 For results of WSDL-described operations, the service namespace is available under the&amp;#010 prefix &quot;service&quot;, and the schema namespace of the top-most output element, if any, is&amp;#010 available under the prefix &quot;schema&quot;.  &quot;default&quot; will be the schema namespace if there is&amp;#010 one, otherwise the service namespace.&amp;#010 &lt;P&gt;&amp;#010 For basic information on XML Namespaces and their use in XPath, try the following search:&amp;#010 &lt;a href=&quot;http://www.google.com/search?q=XPath+xml+namespaces&quot; target=&quot;_blank&quot;&amp;#010 &gt;http://www.google.com/search?q=XPath+xml+namespaces&lt;/a&gt;" name="xmlNamespaces" valueType="Object" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <examples>${isc.DocUtils.linkForExampleId('xmlYahooWebServices')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:TabSet.setTabTitle" flags="A" description=" Changes the title of a tab&amp;#010" name="setTabTitle" type="method" definingClass="class:TabSet">
<params optional="false" name="tab" type="Tab | number | ID">
</params>
<params description="new title" optional="false" name="title" type="HTML">
</params>
    <examples>${isc.DocUtils.linkForExampleId('titleChange')}</examples>
</docItem>
<docItem ref="method:FormItem.hide" flags="I" description=" Hide this form item.&amp;#010 &lt;BR&gt;&lt;BR&gt;&amp;#010 This will cause the form to redraw.  If this item had an item.showIf expression, it will&amp;#010 be destroyed.&amp;#010" name="hide" type="method" definingClass="class:FormItem">
</docItem>
<docItem ref="method:Toolbar.itemDragResized" flags="" description=" Observable, overrideable method - called when one of the Toolbar buttons is drag resized.&amp;#010&amp;#010" name="itemDragResized" type="method" definingClass="class:Toolbar">
<params description="the index of the item that was resized" optional="false" name="itemNum" type="number">
</params>
<params description="the new size of the item" optional="false" name="newSize" type="number">
</params>
</docItem>
<docItem ref="attr:TreeGrid.showCustomIconDrop" flags="IRWA" description="Should folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),&amp;#010 show drop state images when the user is drop-hovering over the folder.&amp;#010 If true, the ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} will be appended to the image URL&amp;#010 (so &lt;code&gt;&quot;customFolder.gif&quot;&lt;/code&gt; might be replaced with &amp;#010 &lt;code&gt;&quot;customFolder_drop.gif&quot;&lt;/code&gt;).&lt;br&gt;&amp;#010 Can be overridden at the node level via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconDropProperty')} property." name="showCustomIconDrop" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
    <groups>treeIcons</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.isBoolean" flags="IR" description="Validation will fail if this field is non-empty and has a non-boolean value." name="isBoolean" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="classMethod:isc.getKeys" flags="" description="&amp;#010	Return all keys (property names) of a given object&amp;#010&amp;#010" name="getKeys" type="classMethod" definingClass="class:isc">
<params description="object to get properties from" optional="false" name="object" type="object">
</params>
<returns description="String names of all properties.  NOTE: never null" type="Array"></returns>
</docItem>
<docItem ref="attr:TabSet.scrollerVSrc" flags="IR" description="If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, this property governs the base&amp;#010 URL for the tab bar back and forward scroller button images for vertical tab bars [IE for&amp;#010 tab sets with ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} set to &quot;left&quot; or &quot;right&quot;].&amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} will be used instead.&amp;#010 &lt;P&gt;&amp;#010 To get the path to the image to display, this base URL will be modified as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If appropriate a state suffix of &lt;code&gt;&quot;Down&quot;&lt;/code&gt; or &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; will be&amp;#010     appended.&lt;/li&gt;&amp;#010 &lt;li&gt;A suffix of &lt;code&gt;&quot;forward&quot;&lt;/code&gt; or &lt;code&gt;&quot;back&quot;&lt;/code&gt; will be appended for the&amp;#010     forward or backward scrolling button.&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 For example - if the scrollerVSrc is set to &lt;code&gt;&quot;[SKIN]vscroll.gif&quot;&lt;/code&gt;, the image&amp;#010 displayed for the back-scroller button on a tabSet with &lt;code&gt;tabBarPosition&lt;/code&gt; set to&amp;#010 &quot;left&quot; and &lt;code&gt;symmetricScroller&lt;/code&gt; set to true would be one of &amp;#010 &lt;code&gt;&quot;[SKIN]vscroll_back.gif&quot;&lt;/code&gt;, &lt;code&gt;&quot;[SKIN]vscroll_Down_back.gif&quot;&lt;/code&gt;,&amp;#010 and &lt;code&gt;&quot;[SKIN]vscroll_Disabled_back.gif&quot;&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 Note that for best results the media should be sized to match the scroller button sizes, &amp;#010 determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}." name="scrollerVSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]vscroll.gif&quot;" type="attr" definingClass="class:TabSet">
<seeAlso ref="attr:TabSet.symmetricScroller">
</seeAlso>
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="method:ListGridField.change" flags="" description=" If this field is editable, any ${isc.DocUtils.linkForRef('method:FormItem.change','change')} handler specified&amp;#010 on the ListGridField will be passed onto the editors for this field.&amp;#010" name="change" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGridField.changed">
</seeAlso>
<seeAlso ref="method:ListGrid.cellChanged">
</seeAlso>
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the editor (form item) itself (also available as &quot;this&quot;).                              Note that in addition to the standard FormItem APIs available&amp;#010                              on the editor, it also has:&lt;br&gt;&amp;#010                              - a pointer back to the containing listGrid &amp;#010                              [&lt;code&gt;item.grid&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the colNum being edited [&lt;code&gt;item.colNum&lt;/code&gt;]&lt;br&gt;&amp;#010                              - the rowNum being edited [&lt;code&gt;item.rowNum&lt;/code&gt;]" optional="false" name="item" type="FormItem">
</params>
<params description="The new value of the form item" optional="false" name="value" type="any">
</params>
<params description="The previous value of the form item" optional="false" name="oldValue" type="any">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Applet.useTag" flags="IR" description="Specifies the type of tag to use for the applet html.  See&amp;#010  &lt;a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html' onclick=&quot;window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html');return false;&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html&lt;/a&gt; for a&amp;#010  discussion of different tags." name="useTag" valueType="string" defaultValue="&quot;applet&quot;" type="attr" definingClass="class:Applet">
<values description="Use the &amp;lt;applet&amp;gt; tag.  Works on all browsers." value="&quot;applet&quot;"></values>
<values description="Use the &amp;lt;object&amp;gt; tag.  Works on IE." value="&quot;object&quot;"></values>
</docItem>
<docItem ref="method:DynamicForm.getValuesAsCriteria" flags="" description=" Return search criteria based on the current set of values within this form.&amp;#010 &lt;p&gt;&amp;#010 The search criteria returned are essentialy the same as &lt;code&gt;form.getValues()&lt;/code&gt;,&amp;#010 except that empty values are omitted.  This is because a form field which is left blank in a&amp;#010 search form means &quot;allow any value for this field&quot; and not &quot;this field must be blank&quot;.&amp;#010 &lt;p&gt;&amp;#010 Examples of empty values include a blank text field or SelectItem with an empty selection.&amp;#010&amp;#010" name="getValuesAsCriteria" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:ListGrid.fetchData">
</seeAlso>
<seeAlso ref="type:Criteria">
</seeAlso>
<returns description="Name:values pairs representing current filter criteria" type="object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ListGridField.valueIconLeftPadding" flags="IRW" description="How much padding should there be on the left of valueIcons for this field&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconLeftPadding')}" name="valueIconLeftPadding" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_SUCCESS" flags="R" description="Indicates successful completion of the request.  This is the default status and is&amp;#010 automatically used by the RPCResponse on the server unless you override it with&amp;#010 setStatus().&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}&amp;#010 for more information." name="STATUS_SUCCESS" valueType="integer" defaultValue="0" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="attr:ActiveXControl.params" flags="IR" description="A map of key/value pairs to pass to the Active X control as parameters." name="params" valueType="object" defaultValue="null" type="attr" definingClass="class:ActiveXControl">
</docItem>
<docItem ref="attr:TabSet.leftEdgeSizes" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeSizes&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeSizes&lt;/code&gt;, &lt;code&gt;topEdgeSizes&lt;/code&gt; and &lt;code&gt;bottomEdgeSizes&lt;/code&gt; &amp;#010 propertes allow the sizes of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="leftEdgeSizes" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:DataBoundComponent.addOperation" flags="IRW" description="Operation ID this component should use when performing add operations." name="addOperation" valueType="String" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
<seeAlso ref="attr:DSRequest.operationId">
</seeAlso>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:ImgProperties.name" flags="IRW" description="Specifies the name of the image. This is an identifier unique to the canvas, and subsequent&amp;#010 calls to &lt;code&gt;${isc.DocUtils.linkForRef('method:Canvas.getImage')}&lt;/code&gt; and&amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('method:Canvas.setImage')}&lt;/code&gt; &amp;#010 with this name will act on the image object created using this ImgProperties object." name="name" valueType="string" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="attr:Window.items" flags="IR" description="The contents of the Window body. Can be specified three different ways:&amp;#010      &lt;ul&gt;&lt;li&gt;an Array of Canvases that will become the children of the Window's body when it&amp;#010      is initialized; the canvases in this array should be created, but not drawn (autodraw:&amp;#010      false).&amp;#010      &lt;li&gt;a single canvas that will become a child of the Window body.&amp;#010      &lt;li&gt;a string that will be set as the body's contents.&lt;/ul&gt;" name="items" valueType="Array of Canvas, Canvas or String" defaultValue="null" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.body">
</seeAlso>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="group:focus" title="Focus" description="Focus is the ability to become the target of keyboard input events.&amp;#010 &lt;P&gt;&amp;#010 A widget normally receives focus by being clicked on or tabbed to." name="focus" type="group">
    <refs>method:DynamicForm.focusInItem</refs>
    <refs>method:FormItem.focusInItem</refs>
    <refs>method:FormItem.blurItem</refs>
    <refs>method:Canvas.focus</refs>
    <refs>method:Canvas.blur</refs>
    <refs>method:Canvas.setAccessKey</refs>
    <refs>method:Canvas.setTabIndex</refs>
    <refs>method:Canvas.focusChanged</refs>
    <refs>classAttr:Canvas.TAB_INDEX_FLOOR</refs>
    <refs>attr:DynamicForm.autoFocus</refs>
    <refs>attr:DynamicForm.selectOnFocus</refs>
    <refs>attr:DynamicForm.canFocus</refs>
    <refs>attr:FormItem.accessKey</refs>
    <refs>attr:FormItem.tabIndex</refs>
    <refs>attr:FormItem.globalTabIndex</refs>
    <refs>attr:TextItem.selectOnFocus</refs>
    <refs>attr:TextAreaItem.selectOnFocus</refs>
    <refs>attr:Canvas.canFocus</refs>
    <refs>attr:Canvas.tabIndex</refs>
    <refs>attr:Canvas.accessKey</refs>
    <refs>attr:Window.canFocusInHeaderButtons</refs>
</docItem>
<docItem ref="attr:FormItem.hoverStyle" flags="IRW" description="Explict CSS Style for any hover shown for this item." name="hoverStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:DynamicForm.itemHoverStyle">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:Label.iconAlign" flags="IR" description="If this button is showing an icon should it be right or left aligned?" name="iconAlign" valueType="string" defaultValue="null" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DateChooser.nextYearIconWidth" flags="IRW" description="Width of the icon for the next year button" name="nextYearIconWidth" valueType="integer" defaultValue="14" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:ListGridField.defaultValue" flags="IRW" description="If this field ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','can be edited')}, this property can be used to&amp;#010 specify a default value for this field's editor when adding new rows to the grid." name="defaultValue" valueType="any" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.startEditingNew">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:RPCRequest.showPrompt" flags="IRW" description="Overrides RPCManager.showPrompt for this request only.  If you're using queuing, note that&amp;#010 if any of the requests in the queue specify showPrompt:true, then a prompt will be shown for&amp;#010 the entire queue with the prompt text of the first request in the queue to specify a custom&amp;#010 prompt if promptStyle is set to &quot;dialog&quot;.  If promptStyle is set to &quot;cursor&quot; for the request&amp;#010 that specified showPrompt: true, then the entire queue uses the &quot;cursor&quot; style for the&amp;#010 prompt." name="showPrompt" valueType="boolean" defaultValue="RPCManager.showPrompt" type="attr" definingClass="class:RPCRequest">
<seeAlso ref="classAttr:RPCManager.showPrompt">
</seeAlso>
    <groups>rpcPrompt</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.height" description="Size for this component's vertical dimension.&amp;#010 &lt;P&gt;&amp;#010 Can be a number of pixels, or a percentage like &quot;50%&quot;. See documentation for&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.width')} for details on who percentage values are resolved actual size.&amp;#010 &lt;P&gt;&amp;#010 Note that if ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} is set to &quot;visible&quot;, this size is a&amp;#010 minimum, and the component may overflow to show all content and/or children.&amp;#010 &lt;P&gt;&amp;#010 If trying to establish a default height for a custom component, set&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.defaultHeight','defaultHeight')} instead." name="height" valueType="Number or String" defaultValue="null" definingClass="class:Canvas">
    <getter>getHeight</getter>
    <setter>setHeight</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:Slider.trackCapSize" flags="IRW" description="The height of vertical slider start and end images, or width of horizontal slider start and&amp;#010 end images." name="trackCapSize" valueType="integer" defaultValue="6" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="classAttr:Dialog.ASK_TITLE" flags="IRW" description="Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.ask')} method.&amp;#010 Note that a custom title can be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="ASK_TITLE" valueType="HTML" defaultValue="&quot;Question&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ListGrid.drawAheadRatio" flags="IRW" description="How far should we render rows ahead of the currently visible area?  This is expressed as a&amp;#010 ratio from viewport size to rendered area size.&lt;br&gt;&lt;br&gt;&amp;#010 &amp;#010 Tweaking drawAheadRatio allows you to make tradeoffs between continuous scrolling speed vs&amp;#010 initial render time and render time when scrolling by large amounts.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: Only applies when showAllRows is false." name="drawAheadRatio" valueType="float" defaultValue="1.3" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('databoundFetch')}</examples>
    <groups>performance</groups>
</docItem>
<docItem ref="method:ListGrid.getCellVAlign" flags="" description=" Return the vertical alignment for cell contents.&amp;#010 Expected values are: 'top', 'center', or 'bottom'&amp;#010&amp;#010" name="getCellVAlign" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<params description="this cell's record" optional="false" name="record" type="listgridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="Vertical alignment of cell contents: 'right', 'center', or 'left'" type="string"></returns>
</docItem>
<docItem ref="method:DataSource.filterData" flags="" description=" Perform a &quot;fetch&quot; DataSource operation against this DataSource, sending search criteria&amp;#010 and retrieving matching records.&amp;#010 &lt;P&gt;&amp;#010 This is identical to ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} except that&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is set to &quot;substring&quot; to cause case insensitive&amp;#010 substring matching (if the server respects this setting).&amp;#010&amp;#010" name="filterData" type="method" definingClass="class:DataSource">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on                                                       the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
    <groups>operations</groups>
</docItem>
<docItem ref="attr:DateItem.centuryThreshold" flags="IRW" description="Only used if we're showing the date in a text field. When parsing a date, if the year&amp;#010 is specified with only 2 digits and is less than the centuryThreshold, then the year will&amp;#010 be assumed to be 20xx; otherwise it will be interpreted according to default browser&amp;#010 behaviour, which will consider it to be 19xx." name="centuryThreshold" valueType="number" defaultValue="25" type="attr" definingClass="class:DateItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ToolStripResizer.vSrc" flags="IRW" description="Image for resizer" name="vSrc" valueType="SCImgURL" defaultValue="&quot;[SKIN]resizer.png&quot;" type="attr" definingClass="class:ToolStripResizer">
</docItem>
<docItem ref="method:ListGrid.rowContextClick" flags="" description=" Called when a row receives a contextclick event.&amp;#010" name="rowContextClick" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('recordClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="method:Selection.multipleSelected" flags="" description="	Whether multiple items are selected&amp;#010" name="multipleSelected" type="method" definingClass="class:Selection">
<returns description="true == more than one item is selected								false == no items are selected, or only one item is selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:ListGrid.rowDoubleClick" flags="A" description=" Event handler for when a body record is double-clicked.&amp;#010 &lt;P&gt;&amp;#010 Default implementation fires 'editCell' if appropriate, and handles firing&amp;#010 'recordDoubleClick' stringMethod if defined at the field or LG level (That method has a&amp;#010 different signature from this one)&amp;#010&amp;#010" name="rowDoubleClick" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.recordDoubleClick">
</seeAlso>
<params description="record object returned from getCellRecord()" optional="false" name="record" type="ListGridRecord">
</params>
<params description="index of the row where the click occurred" optional="false" name="recordNum" type="number">
</params>
<params description="index of the col where the click occurred" optional="false" name="fieldNum" type="number">
</params>
<params description="indicates whether this was a synthesized record                                              doubleclick in response to a keyboard event" optional="true" name="keyboardGenerated" type="boolean">
</params>
<returns description="false if first click not on same record; true otherwise" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:TreeGrid.folderContextClick" flags="" description="&amp;#010 This method is called when a context click occurs on a folder record.&amp;#010&amp;#010" name="folderContextClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.nodeContextClick">
</seeAlso>
<params description="The TreeGrid on which the contexclick occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The folder (record) on which the contextclick occurred." optional="false" name="folder" type="TreeNode">
</params>
<params description="Index of the row where the contextclick occurred." optional="false" name="recordNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
</docItem>
<docItem ref="method:CellSelection.anySelected" flags="" description="			Is anything in the list selected?&amp;#010" name="anySelected" type="method" definingClass="class:CellSelection">
<returns description="true == at least one item is selected								false == nothing at all is selected" type="boolean"></returns>
    <groups>selection</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DetailViewer.separatorStyle" flags="IRW" description="CSS style for a separator" name="separatorStyle" valueType="CSSStyleName" defaultValue="&quot;detail&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Page.loadStyleSheet" flags="" description="		Load a styleSheet for this application.  &amp;#010&amp;#010		The styleSheetURL parameter can use any special directories, eg:&lt;br&gt;&amp;#010      &amp;nbsp;&amp;nbsp;&lt;code&gt;Page.loadStylesheet(&quot;[SKIN]/skin_styles.css&quot;)&lt;/code&gt;&lt;br&gt;&amp;#010      or&lt;br&gt;&amp;#010      &amp;nbsp;&amp;nbsp;&lt;code&gt;Page.loadStylesheet(&quot;[APP]/app_styles.css&quot;)&lt;/code&gt;.&amp;#010      &lt;P&gt;&amp;#010		If you don't specify a special directory, the app directory&amp;#010			will be assumed.&amp;#010		&lt;P&gt;&amp;#010		Note:   If the document's ONLOAD handler has already fired, this&amp;#010				will have no effect.&amp;#010&amp;#010" name="loadStyleSheet" type="classMethod" definingClass="class:Page">
<params description="URL to the stylesheet." optional="false" name="styleSheetURL" type="URL">
</params>
    <groups>skins</groups>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="method:ValuesManager.getValidatedValues" flags="" description=" Call ${isc.DocUtils.linkForRef('method:ValuesManager.validate')} to check for validation errors. If no errors are found,&amp;#010 return the current values for this valuesManager, otherwise return null.&amp;#010" name="getValidatedValues" type="method" definingClass="class:ValuesManager">
<returns description="current values or null if validation failed." type="object|null"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:TabSet.tabs" flags="IRW" description="An array of tab objects, specifying the title and pane contents of each tab in the&amp;#010 TabSet.  When developing in JavaScript, tabs are specified as an array of object&amp;#010 literals, not instances - see ${isc.DocUtils.linkForRef('object:Tab')}.&amp;#010 &lt;p&gt;&amp;#010 You can add and remove tabs after creating the TabSet by calling ${isc.DocUtils.linkForRef('method:TabSet.addTab')}" name="tabs" valueType="Array of Tab" defaultValue="null" type="attr" definingClass="class:TabSet">
    <examples>${isc.DocUtils.linkForExampleId('tabsOrientation')}</examples>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeTop" flags="IR" description="Height in pixels for top corners and edges.  Defaults to edgeSize when unset." name="edgeTop" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:Window.headerLabelDefaults" flags="IRWA" description="This is an object literal property block specifying various properties of the header&amp;#010 label that displays the ${isc.DocUtils.linkForRef('attr:Window.title')}.  Overrideable defaults are as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;styleName- defaults to &lt;code&gt;&quot;windowHeaderText&quot;&lt;/code&gt; and specifies the css style&amp;#010 that is used  to render the ${isc.DocUtils.linkForRef('attr:Window.title')} text.&amp;#010 &lt;/ul&gt;&amp;#010 You can override the the above propertites by calling ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}." name="headerLabelDefaults" valueType="Object" defaultValue="see below" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>headerLabel</groups>
</docItem>
<docItem ref="type:listGridSelectedState" description="An object containing the stored selection information for a listGrid.&amp;#010 Note that this object is not intended to be interrogated directly, but may be stored &amp;#010 (for example) as a blob on the server for state persistence across sessions." name="listGridSelectedState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="class:DataSourceField" description="Metadata about a DataSourceField, including its type and validators." name="DataSourceField" type="class">
    <methods>method:DataSourceField.getFieldValue</methods>
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <attrs>attr:DataSourceField.name</attrs>
    <attrs>attr:DataSourceField.type</attrs>
    <attrs>attr:DataSourceField.required</attrs>
    <attrs>attr:DataSourceField.valueMap</attrs>
    <attrs>attr:DataSourceField.validators</attrs>
    <attrs>attr:DataSourceField.length</attrs>
    <attrs>attr:DataSourceField.valueXPath</attrs>
    <attrs>attr:DataSourceField.title</attrs>
    <attrs>attr:DataSourceField.canEdit</attrs>
    <attrs>attr:DataSourceField.editorType</attrs>
    <attrs>attr:DataSourceField.hidden</attrs>
    <attrs>attr:DataSourceField.detail</attrs>
    <attrs>attr:DataSourceField.primaryKey</attrs>
    <attrs>attr:DataSourceField.foreignKey</attrs>
    <attrs>attr:DataSourceField.childrenProperty</attrs>
    <attrs>attr:DataSourceField.rootValue</attrs>
    <attrs>attr:DataSourceField.xmlAttribute</attrs>
    <attrs>attr:DataSourceField.multiple</attrs>
    <attrs>attr:DataSourceField.propertiesOnly</attrs>
    <attrs>attr:DataSourceField.inapplicable</attrs>
    <attrs>attr:DataSourceField.group</attrs>
</docItem>
<docItem ref="attr:ListGridField.filterEditorType" flags="IRWA" description="If this ListGrid is showing a filter row, this property can be used to&amp;#010      specify the form item class to use for the filter form item associated with this &amp;#010      field&amp;#010      (Only used if this field is not canFilter:false).&lt;br&gt;&amp;#010      Note: If this is not specified, the edit-form item type may be derived from the&amp;#010      'editorType' property, typically inherited from datasource fields, or from the&amp;#010      'type' of the field (showing the appropriate form item for the data-type)." name="filterEditorType" valueType="FormItem className" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="method:Tree.move" flags="" description="&amp;#010 Moves the specified node to a new parent.&amp;#010&amp;#010" name="move" type="method" definingClass="class:Tree">
<params description="node to move" optional="false" name="node" type="TreeNode">
</params>
<params description="new parent to move the node to" optional="false" name="newParent" type="TreeNode">
</params>
<params description="Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list." optional="true" name="position" type="number">
</params>
</docItem>
<docItem ref="attr:DataSource.criteriaPolicy" flags="IRWA" description="Decides under what conditions the ${isc.DocUtils.linkForRef('class:ResultSet')} cache should be dropped when the&amp;#010 ${isc.DocUtils.linkForRef('attr:ResultSet.criteria')} changes" name="criteriaPolicy" valueType="CriteriaPolicy" defaultValue="&quot;dropOnShortening&quot;" type="attr" definingClass="class:DataSource">
<seeAlso ref="method:DataSource.compareCriteria">
</seeAlso>
</docItem>
<docItem ref="attr:WebService.globalNamespaces" flags="IRW" description="Namespaces definitions to add to the root element of outbound XML messages sent to a web&amp;#010 service, as a mapping from namespace prefix to namespace URI.&amp;#010 &lt;P&gt;&amp;#010 The default value is:&amp;#010 &lt;pre&gt;&amp;#010   globalNamespaces : {&amp;#010      xsi: &quot;http://www.w3.org/2001/XMLSchema-instance&quot;,&amp;#010      xsd: &quot;http://www.w3.org/2001/XMLSchema&quot;&amp;#010   },&amp;#010 &lt;/pre&gt;&amp;#010 This default value allows the use of the xsi:type and xsi:nil attributes without further&amp;#010 declarations.&amp;#010 &lt;P&gt;&amp;#010 Note that some web services will only accept specific revisions of the XML Schema URI.&amp;#010 If xsi-namespaced attributes seem to be ignored by an older webservice, try the URI&amp;#010 &quot;http://www.w3.org/1999/XMLSchema-instance&quot; instead." name="globalNamespaces" valueType="Object" defaultValue="..." type="attr" definingClass="class:WebService">
</docItem>
<docItem ref="method:Label.setContents" flags="" description=" Changes the contents of a widget to newContents, an HTML string.&amp;#010 &lt;P&gt;&amp;#010 When ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents','dynamicContents')} is set, &lt;code&gt;setContents()&lt;/code&gt; can&amp;#010 also be called with no arguments to cause contents to be re-evaluated.&amp;#010&amp;#010" name="setContents" type="method" definingClass="class:Label">
<params description="an HTML string to be set as the contents of this widget" optional="true" name="newContents" type="string">
</params>
    <examples>${isc.DocUtils.linkForExampleId('setContents')}</examples>
</docItem>
<docItem ref="method:DynamicForm.clearFieldErrors" flags="" description=" Clear any validation errors on the field passed in.&amp;#010" name="clearFieldErrors" type="method" definingClass="class:DynamicForm">
<params description="field to clear errors from" optional="false" name="fieldName" type="string">
</params>
<params description="If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display" optional="false" name="show" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="method:Class.getID" flags="" description="			Return the global identifier for this object.&amp;#010&amp;#010" name="getID" type="method" definingClass="class:Class">
<returns description="global identifier for this canvas" type="string"></returns>
</docItem>
<docItem ref="method:CubeGrid.saveEdits" flags="A" description="&amp;#010 Validates and saves edits for some cell. If rowNum and colNum are not passed in, the current&amp;#010 edit cell will be saved.&amp;#010 &lt;P&gt;&amp;#010 The 'callback' parameter provides a notification when the save attempt completes.&amp;#010 Cases under which the callback will fire are:&amp;#010 &lt;ul&gt;&lt;li&gt;Save completed successfully&lt;/li&gt;&amp;#010 &lt;li&gt;No changes to the edited cell, so save not required&lt;/li&gt;&amp;#010 &lt;li&gt;Validation failure occurred on the client or on the server&lt;/li&gt;&lt;/ul&gt;&amp;#010 Note that if no rowNum/colNum were passed in and the editor is not showing for the cell,&amp;#010 the callback will NOT fire - in this case, the method is a no-op.&amp;#010 &lt;P&gt;&amp;#010 Other, standard callbacks such as ${isc.DocUtils.linkForRef('method:ListGrid.editComplete','editComplete()')},&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.editFailed','editFailed()')} and ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged','cellChanged()')} will&amp;#010 fire normally.&amp;#010 &lt;P&gt;&amp;#010 Note this method does not hide the inline editors if they are showing - to explicitly save &amp;#010 and end editing, use the method 'endEditing()'&amp;#010&amp;#010" name="saveEdits" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:ListGrid.endEditing">
</seeAlso>
<params description="Event used to complete cell editing.          Optional, and defaults to &lt;code&gt;&quot;programmatic&quot;&lt;/code&gt;.  Can be used by the &amp;#010          &lt;code&gt;callback&lt;/code&gt; method to perform custom actions such as navigation when the &amp;#010          save completes." optional="true" name="editCompletionEvent" type="EditCompletionEvent">
</params>
<params description="Callback to fire on completion of the saving process.                                    If no edits were made or client-side validation fails &amp;#010                                    the callback will be fired synchronously at the end of this&amp;#010                                    method.&lt;br&gt;&amp;#010                                    Takes the following parameters:&amp;#010                                    &lt;br&gt;- rowNum &lt;i&gt;(Number) edited row number&lt;/i&gt;&amp;#010                                    &lt;br&gt;- colNum &lt;i&gt;(Number) edited column number&lt;/i&gt;&amp;#010                                    &lt;br&gt;- editCompletionEvent &lt;i&gt;(EditCompletionEvent) event &amp;#010                                      passed in (defaults to &lt;code&gt;&quot;programmatic&quot;&lt;/code&gt;)&lt;/i&gt;&amp;#010                                    &lt;br&gt;- success &lt;i&gt;(boolean) false if the save was unable to&amp;#010                                      complete due to a validation failure or server-side &amp;#010                                      error.&lt;/i&gt;" optional="true" name="callback" type="Callback">
</params>
<params description="Which row should be saved. If unspecified the current edit row                            is saved by default. Note that if there is no current edit cell&amp;#010                            this method will no op." optional="true" name="rowNum" type="number">
</params>
<params description="Which row should be saved. If unspecified the current edit column                            is saved by default. Note that if there is no current edit cell&amp;#010                            this method will no op." optional="true" name="colNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="type:ListGridEditEvent" description="Event that will trigger inline editing." name="ListGridEditEvent" type="type">
<values description="A single mouse click triggers inline editing" value="&quot;click&quot;"></values>
<values description="A double click triggers inline editing" value="&quot;doubleClick&quot;"></values>
<values description="No mouse event will trigger editing.  Editing must be                      programmatically started via ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}&amp;#010                      (perhaps from an external button) or may be triggered by &amp;#010                      keyboard navigation if ${isc.DocUtils.linkForRef('attr:ListGrid.editOnFocus')} is set." value="&quot;none&quot;"></values>
    <groups>editing</groups>
</docItem>
<docItem ref="class:Selection" description="Maintains a 'selected' subset of a List or Array of objects, such as records in a record&amp;#010 set, or widgets in a selectable header.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Includes methods for selecting objects and checking which objects are selected, and also for&amp;#010 selecting objects as a result of mouse events, including drag selection support.&lt;br&gt;&amp;#010 The selection object is used automatically to handle selection APIs on ${isc.DocUtils.linkForRef('class:ListGrid')}&amp;#010 and ${isc.DocUtils.linkForRef('class:TreeGrid')} instances.&lt;br&gt;&lt;br&gt;" name="Selection" type="class">
    <methods>method:Selection.isSelected</methods>
    <methods>method:Selection.anySelected</methods>
    <methods>method:Selection.multipleSelected</methods>
    <methods>method:Selection.getSelection</methods>
    <methods>method:Selection.getSelectedRecord</methods>
    <methods>method:Selection.setSelected</methods>
    <methods>method:Selection.select</methods>
    <methods>method:Selection.deselect</methods>
    <methods>method:Selection.selectSingle</methods>
    <methods>method:Selection.selectList</methods>
    <methods>method:Selection.deselectList</methods>
    <methods>method:Selection.selectAll</methods>
    <methods>method:Selection.deselectAll</methods>
    <methods>method:Selection.selectItem</methods>
    <methods>method:Selection.deselectItem</methods>
    <methods>method:Selection.selectRange</methods>
    <methods>method:Selection.deselectRange</methods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="classMethod:isc.getKeyForValue" flags="" description=" Given a value and an object of &lt;code&gt;key:value&lt;/code&gt; pairs, return the value that corresponds&amp;#010 to that key.&amp;#010 &lt;P&gt;&amp;#010 If the key is not found, &lt;code&gt;defaultValue&lt;/code&gt; will be returned if provided, otherwise the&amp;#010 value will be returned.&amp;#010&amp;#010" name="getKeyForValue" type="classMethod" definingClass="class:isc">
<params description="value to look for" optional="false" name="key" type="string or number">
</params>
<params description="object of key:value pairs" optional="false" name="valueMap" type="object">
</params>
<params description="default key to return if value not found" optional="true" name="defaultKey" type="any">
</params>
<returns description="returns first key in valueMap with value, or                                              defaultKey if value not found" type="any"></returns>
</docItem>
<docItem ref="attr:FormItemIcon.src" flags="IRW" description="If set, this property determines this icon's image source.&amp;#010      If unset the form item's &lt;code&gt;defaultIconSrc&lt;/code&gt; property will be used&amp;#010      instead.&lt;br&gt;&amp;#010      As with &lt;code&gt;defaultIconSrc&lt;/code&gt; this URL will be modified by adding&amp;#010      &quot;_Over&quot; or &quot;_Disabled&quot; if appropriate to show the icons over or disabled state." name="src" valueType="string" defaultValue="null" type="attr" definingClass="object:FormItemIcon">
<seeAlso ref="attr:FormItem.defaultIconSrc">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('formIcons')}</examples>
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:Slider.flipValues" flags="IRW" description="Specifies whether the value range of the slider should be flipped so that values increase as&amp;#010 the thumb is moved down (for a vertical slider) or to the left (for a horizontal slider)." name="flipValues" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="method:Canvas.getScrollbarSize" flags="A" description="  Returns the thickness of this widget's scrollbars.&lt;br&gt;&amp;#010  For canvases showing custom scrollbars this is determined from &lt;code&gt;this.scrollbarSize&lt;/code&gt;&amp;#010&amp;#010" name="getScrollbarSize" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.scrollbarSize">
</seeAlso>
<returns description="thickness of the scrollbars, in pixels" type="number"></returns>
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:ListGridField.getGroupTitle" flags="" description=" Return the title of the group which the listGridField represents. Default title is &amp;#010 the group value. &amp;#010&amp;#010" name="getGroupTitle" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
<seeAlso ref="method:ListGridField.getGroupValue">
</seeAlso>
<params description="the value from the group is created, the result of   ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue')}" optional="false" name="groupValue" type="any">
</params>
<params description="the node in the grid containing the group." optional="false" name="groupNode" type="groupNode">
</params>
<params description="Field object for which to get group value" optional="false" name="field" type="Object">
</params>
<params description="The name of the field" optional="false" name="fieldName" type="String">
</params>
<params description="the ListGrid displaying the cell" optional="false" name="grid" type="ListGrid">
</params>
<returns description="Group value to which this record belongs" type="any"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customGrouping')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:SelectItem.hiliteOnFocus" deprecated="As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} instead." flags="IRWA" description="Should this SelectItem show a hilite when it recieves keyboard focus?" name="hiliteOnFocus" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="classAttr:ValidatorTypes.matchesField" flags="IR" description="Tests whether the value for this field matches the value of some other field.&amp;#010  The field to compare against is specified via the &lt;code&gt;otherField&lt;/code&gt; property&amp;#010  on the validator object (should be set to a field name).&lt;br&gt;&amp;#010  Note this validator type is only supported for items being edited within a &amp;#010  DynamicForm - it cannot be applied to a ${isc.DocUtils.linkForRef('object:ListGridField','ListGrid field')}." name="matchesField" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
    <examples>${isc.DocUtils.linkForExampleId('matchValue')}</examples>
</docItem>
<docItem ref="attr:Tree.modelType" flags="IRWA" description="Selects the model used to construct the tree representation.  If the &quot;parent&quot; modelType is&amp;#010 used, you can provide the initial parent-linked data set to the tree via the&amp;#010 ${isc.DocUtils.linkForRef('attr:Tree.data')} attribute.  If the &quot;children&quot; modelType is used, you can provide the&amp;#010 initial tree structure to the Tree via the ${isc.DocUtils.linkForRef('attr:Tree.root')} attribute." name="modelType" valueType="TreeModelType" defaultValue="&quot;children&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:Tree.data">
</seeAlso>
<seeAlso ref="attr:Tree.root">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('nodeTitles')}</examples>
</docItem>
<docItem ref="type:FieldType" description="The types listed below are built-in types that ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound&amp;#010 components')} understand and treat specially (using type-specific form controls, validators,&amp;#010 formatters, sorting logic, etc).  &amp;#010 &lt;P&gt;&amp;#010 You can declare custom types via ${isc.DocUtils.linkForRef('class:SimpleType','SimpleType.create()')}, with settings that&amp;#010 will influence DataBound components.  You can also create your own subclasses of databound&amp;#010 components to add further custom, reusable behaviors based on field.type.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;field.type&lt;/code&gt; can also be the ID of another ${isc.DocUtils.linkForRef('class:DataSource')}, which allows you to&amp;#010 model nested structures such as XML documents (in fact, ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}&amp;#010 models XML schema in this way).  Nested DataSource declarations affect how XML and JSON data&amp;#010 is deserialized into JavaScript objects in the &amp;#010 ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')} pipeline, so that you can load&amp;#010 complex XML documents and have them deserialized into a correctly typed JavaScript object&amp;#010 model.&amp;#010 &lt;P&gt;&amp;#010 Note: to declared related but &lt;i&gt;separate&lt;/i&gt; objects, as in an &quot;Account&quot; object that can be&amp;#010 related to both a &quot;Contact&quot; object and &quot;Order&quot; objects, use&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')}, &lt;b&gt;not&lt;/b&gt; a nested structure declaration." name="FieldType" type="type">
<values description="Generic text, e.g. &lt;code&gt;&quot;John Doe&quot;&lt;/code&gt;. This is the default field type.                    Use &lt;code&gt;field.length&lt;/code&gt; to set length." value="&quot;text&quot;"></values>
<values description="A boolean value, e.g. &lt;code&gt;true&lt;/code&gt;" value="&quot;boolean&quot;"></values>
<values description="A whole number, e.g. &lt;code&gt;123&lt;/code&gt;" value="&quot;integer&quot;"></values>
<values description="A floating point (decimal) number, e.g. &lt;code&gt;1.23&lt;/code&gt;" value="&quot;float&quot;"></values>
<values description="A date, including time of day. Represented on the client as a                    JavaScript &lt;code&gt;Date&lt;/code&gt; object. See ${isc.DocUtils.linkForRef('class:Date')} for&amp;#010                    SmartClient extensions to the &lt;code&gt;Date&lt;/code&gt; object." value="&quot;date&quot;"></values>
<values description="A text value constrained to a set of legal values specified by the                    field's ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap','valueMap')}, as though an&amp;#010                    ${isc.DocUtils.linkForRef('classAttr:ValidatorTypes.isOneOf','isOneOf')} validator had been declared." value="&quot;enum&quot;"></values>
<values description="An enum whose values are numeric." value="&quot;intEnum&quot;"></values>
<values description="If you are using the SmartClient SQL datasource connector, a                    &lt;code&gt;sequence&lt;/code&gt; is a unique, increasing whole number, incremented&amp;#010                    whenever a new record is added. Otherwise, &lt;code&gt;sequence&lt;/code&gt; behaves&amp;#010                    identically to &lt;code&gt;integer&lt;/code&gt;. This type is typically used with&amp;#010                    &lt;code&gt;field.primaryKey&lt;/code&gt; to auto-generate unique primary keys." value="&quot;sequence&quot;"></values>
<values description="A string representing a well-formed URL.  Some components                    will render this as an HTML link (using an anchor tag for example)." value="&quot;link&quot;"></values>
<values description="A string representing a well-formed URL that points to an                    image.  Some components will render an IMG tag with the value of this field&amp;#010                    as the 'src' attribute to render the image." value="&quot;image&quot;"></values>
<values description="Arbitrary binary data.  When this field type is present, three additional fields are automatically generated.  They are: &amp;lt;fieldName&amp;gt;_filename, &amp;lt;fieldName&amp;gt;_filesize, and&amp;#010 &amp;lt;fieldName&amp;gt;_date_created where &amp;lt;fieldName&amp;gt; is the value of the &lt;code&gt;name&lt;/code&gt;&amp;#010 attribute of this field.  These fields are marked as&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.hidden')}&lt;code&gt;:true&lt;/code&gt; to suppress their rendering by default.  You&amp;#010 can show one or more of these fields by specifying the field with a &lt;code&gt;hidden:false&lt;/code&gt;&amp;#010 override in the fields array of the databound component." value="&quot;binary&quot;"></values>
<values description="Binary data comprising an image." value="&quot;imageFile&quot;"></values>
<seeAlso ref="type:ListGridFieldType">
</seeAlso>
<seeAlso ref="type:FormItemType">
</seeAlso>
</docItem>
<docItem ref="type:Direction" name="Direction" type="type">
<values description="above" value="Canvas.UP"></values>
<values description="below" value="Canvas.DOWN"></values>
<values description="to the left of" value="Canvas.LEFT"></values>
<values description="to the right of" value="Canvas.RIGHT"></values>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:CubeGrid.facetLabelHoverHTML" flags="" description="&amp;#010      Get the HTML for the facet label hover.  Default implementation returns null.&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; callback&amp;#010" name="facetLabelHoverHTML" type="method" definingClass="class:CubeGrid">
<params description="ID for the facet" optional="false" name="facetId" type="string">
</params>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="attr:Canvas.noDoubleClicks" flags="IRWA" description="If true, this canvas will recieve all mouse-clicks as single click events rather than&amp;#010 doubleClicks." name="noDoubleClicks" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>events</groups>
</docItem>
<docItem ref="attr:ImgSplitbar.skinImgDir" flags="IR" description="Default directory for skin images (those defined by the class), relative to the&amp;#010 Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}." name="skinImgDir" valueType="SCImgURL" defaultValue="&quot;images/SplitBar/&quot;" type="attr" definingClass="class:ImgSplitbar">
    <groups>images</groups>
</docItem>
<docItem ref="attr:Splitbar.vResizeCursor" flags="IR" description="Cursor to display if this Splitbar is to be used for vertical resize of widgets." name="vResizeCursor" valueType="Cursor" defaultValue="&quot;row-resize&quot;" type="attr" definingClass="class:Splitbar">
    <groups>cursor</groups>
</docItem>
<docItem ref="group:contentLoading" name="contentLoading" type="group">
    <refs>method:ViewLoader.handleError</refs>
    <refs>method:HTMLFlow.setContentsURL</refs>
    <refs>method:HTMLFlow.loadingContent</refs>
    <refs>method:HTMLFlow.handleError</refs>
    <refs>method:HTMLFlow.transformHTML</refs>
    <refs>method:HTMLFlow.contentLoaded</refs>
    <refs>class:HTMLFlow</refs>
    <refs>attr:ViewLoader.httpMethod</refs>
    <refs>attr:HTMLFlow.contentsURL</refs>
    <refs>attr:HTMLFlow.loadingMessage</refs>
    <refs>attr:HTMLFlow.contentsURLParams</refs>
    <refs>attr:HTMLFlow.httpMethod</refs>
    <refs>attr:HTMLFlow.contentsType</refs>
    <refs>attr:HTMLFlow.evalScriptBlocks</refs>
    <refs>attr:HTMLFlow.captureSCComponents</refs>
</docItem>
<docItem ref="method:Array.intersect" flags="" description=" Return the list of items that are in both this list and the passed-in list(s).&amp;#010&amp;#010" name="intersect" type="method" definingClass="object:Array">
<params description="lists to intersect with" optional="false" name="lists" type="all List arguments">
</params>
<returns description="intersection" type="List"></returns>
    <groups>arrayMath</groups>
</docItem>
<docItem ref="method:Array.setProperty" flags="" description="	Set item[property] = value for each item in this array.&amp;#010" name="setProperty" type="method" definingClass="object:Array">
<params description="name of the property to set" optional="false" name="property" type="string">
</params>
<params description="value to set to" optional="false" name="value" type="any">
</params>
    <groups>iteration</groups>
</docItem>
<docItem ref="method:Canvas.scrollTo" flags="" description=" Scrolls the content of the widget so that the origin (top-left corner) of the content&amp;#010 is left pixels to the left and top pixels above the widget's top-left corner (but still&amp;#010 clipped by the widget's dimensions).&amp;#010 &lt;p&gt;&amp;#010 This is guaranteed to be called whenever this Canvas is scrolled, whether scrolling is&amp;#010 initiated programmatically, by custom scrollbars, or a by a native scrollbar.&amp;#010&amp;#010" name="scrollTo" type="method" definingClass="class:Canvas">
<params description="the left coordinate" optional="true" name="left" type="number">
</params>
<params description="the top coordiante" optional="true" name="top" type="number">
</params>
    <groups>scrolling</groups>
</docItem>
<docItem ref="classMethod:Class.addProperties" flags="" description="&amp;#010	Add default properties and methods to all instances of this class.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010	These properties can then be accessed as &lt;code&gt;myInstance.property&lt;/code&gt;, &amp;#010  and methods can be called via &lt;code&gt;myInstance.methodName()&lt;/code&gt;&amp;#010&amp;#010" name="addProperties" type="classMethod" definingClass="class:Class">
<params description="objects with properties to add (think named parameters).										all the properties of each argument will be applied&amp;#010										as instance-level property defaults." optional="true" name="arguments 0-N" type="object">
</params>
<returns description="the class after properties have been added to it" type="object"></returns>
</docItem>
<docItem ref="attr:ListGrid.hoverStyle" flags="IRWA" description="Style to apply to hovers shown over this grid." name="hoverStyle" valueType="CSSStyleName" defaultValue="&quot;gridHover&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:Tree.closeAll" flags="" description=" Close all nodes under a particular node&amp;#010&amp;#010" name="closeAll" type="method" definingClass="class:Tree">
<params description="node from which to close folders (if not specified, the root                              node is used)" optional="true" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="attr:ListGrid.groupByMaxRecords" flags="IRW" description="Maximum number of records to which a groupBy can be applied. If there are more records,&amp;#010 grouping will not be available via the default header context menu, and calls to &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')} will be ignored." name="groupByMaxRecords" valueType="Number" defaultValue="1000" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:ToolbarItem.vertical" flags="IRA" description="Should the toolbar stack its buttons vertically or horizontally?" name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ToolbarItem">
</docItem>
<docItem ref="class:isc" description="The &lt;code&gt;isc&lt;/code&gt; object contains global methods and objects of the Isomorphic SmartClient&amp;#010 framework.&amp;#010 &lt;P&gt;&amp;#010 When the ISC framework runs in &quot;simple names&quot; mode (the default), all ISC Classes and several&amp;#010 global methods are installed as global variables, that is, properties of the browser's&amp;#010 &quot;window&quot; object.  When simple names mode is disabled (called &quot;portal mode&quot;), the framework&amp;#010 uses only the global variable: &quot;isc&quot; and global variables prefixed with &quot;isc_&quot;.  Portal mode&amp;#010 is intended for applications which must integrate with fairly arbitrary JavaScript code&amp;#010 written by third-party developers, and/or third party JavaScript frameworks, where it is&amp;#010 important that each framework stays within it's own namespace.&amp;#010 &lt;P&gt;&amp;#010 In portal mode, all references to ISC classes and global functions must be prefixed with&amp;#010 &quot;isc.&quot;, for example:&lt;pre&gt;&amp;#010 &amp;#010      Canvas.create(addProperties({}, myDefaults))&amp;#010&amp;#010 &lt;/pre&gt;would become&lt;pre&gt;&amp;#010&amp;#010      isc.Canvas.create(isc.addProperties({}, myDefaults));&amp;#010&amp;#010 &lt;/pre&gt;&amp;#010 Portal mode is enabled by setting &lt;code&gt;window.isc_useSimpleNames = false&lt;/code&gt; &lt;b&gt;before&lt;/b&gt;&amp;#010 ISC is loaded." name="isc" type="class">
    <classAttrs>classAttr:isc.itemIndent</classAttrs>
    <classAttrs>classAttr:isc.itemStartIndent</classAttrs>
    <classAttrs>classAttr:isc.itemEndIndent</classAttrs>
    <classMethods>classMethod:isc.getErrorsHTML</classMethods>
    <classMethods>classMethod:isc.getIconLeft</classMethods>
    <classMethods>classMethod:isc.getIconTop</classMethods>
    <classMethods>classMethod:isc.getIconRect</classMethods>
    <classMethods>classMethod:isc.getIconPageRect</classMethods>
    <classMethods>classMethod:isc.clone</classMethods>
    <classMethods>classMethod:isc.logWarn</classMethods>
    <classMethods>classMethod:isc.echo</classMethods>
    <classMethods>classMethod:isc.echoAll</classMethods>
    <classMethods>classMethod:isc.echoLeaf</classMethods>
    <classMethods>classMethod:isc.logEcho</classMethods>
    <classMethods>classMethod:isc.logEchoAll</classMethods>
    <classMethods>classMethod:isc.addProperties</classMethods>
    <classMethods>classMethod:isc.getKeys</classMethods>
    <classMethods>classMethod:isc.getValues</classMethods>
    <classMethods>classMethod:isc.sortObject</classMethods>
    <classMethods>classMethod:isc.sortObjectByProperties</classMethods>
    <classMethods>classMethod:isc.addDefaults</classMethods>
    <classMethods>classMethod:isc.propertyDefined</classMethods>
    <classMethods>classMethod:isc.defineClass</classMethods>
    <classMethods>classMethod:isc.timeStamp</classMethods>
    <classMethods>classMethod:isc.getValueForKey</classMethods>
    <classMethods>classMethod:isc.getKeyForValue</classMethods>
    <classMethods>classMethod:isc.makeReverseMap</classMethods>
    <classMethods>classMethod:isc.setAutoDraw</classMethods>
    <classMethods>classMethod:isc.showPrompt</classMethods>
    <classMethods>classMethod:isc.clearPrompt</classMethods>
    <classMethods>classMethod:isc.warn</classMethods>
    <classMethods>classMethod:isc.say</classMethods>
    <classMethods>classMethod:isc.ask</classMethods>
    <classMethods>classMethod:isc.confirm</classMethods>
    <classMethods>classMethod:isc.askForValue</classMethods>
    <classMethods>classMethod:isc.showLoginDialog</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="attr:Canvas.canAcceptDrop" flags="IRWA" description="Indicates that this object can receive dropped widgets (i.e. other widgets can be&amp;#010      dropped on top of it)." name="canAcceptDrop" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragCreate')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:ListGrid.getFieldState" flags="" description=" Returns a snapshot of the current presentation of this listGrid's fields as &amp;#010 a ${isc.DocUtils.linkForRef('type:listGridFieldState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setFieldState')} to reset this grid's fields to&amp;#010 the current state.&lt;br&gt;&amp;#010 Note that the information stored includes the current width and visibility of each of this &amp;#010 grid's fields.&amp;#010" name="getFieldState" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.setFieldState">
</seeAlso>
<returns description="current state of this grid's fields." type="listGridFieldState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="classMethod:History.getHistoryData" flags="" description="&amp;#010 Returns the data associated with the specified history id.&amp;#010&amp;#010" name="getHistoryData" type="classMethod" definingClass="class:History">
<params description="The id for which to fetch history data." optional="false" name="id" type="String">
</params>
<returns description="The data associated with the specified history id." type="any"></returns>
</docItem>
<docItem ref="attr:SelectItem.height" flags="IRW" description="Default height for select items is 19px." name="height" valueType="number" defaultValue="19" type="attr" definingClass="class:SelectItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Array.getLength" flags="" description=" Return the number of items in this list&amp;#010&amp;#010" name="getLength" type="method" definingClass="object:Array">
<returns description="number of items in the list" type="Number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="type:DisplayNodeType" description="Flag passed to functions as displayNodeType, telling the function whether it should work on&amp;#010 folders, leaves or both at once." name="DisplayNodeType" type="type">
<values description="operate on both folders and leaves" value="null/unset"></values>
<values description="operate on folders only, ignoring leaves" value="&quot;folders&quot;"></values>
<values description="operate on leaves only, ignoring folders" value="&quot;leaves&quot;"></values>
    <groups>ancestry</groups>
</docItem>
<docItem ref="method:Tree.getParentPath" flags="" description="&amp;#010 Given a node, return the path to it's parent.  This works just like&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getPath')} except the node itself is not reported as part of the path.&amp;#010&amp;#010" name="getParentPath" type="method" definingClass="class:Tree">
<seeAlso ref="method:Tree.getPath">
</seeAlso>
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="path to the node's parent" type="string"></returns>
</docItem>
<docItem ref="group:valueIcons" name="valueIcons" type="group">
    <refs>method:FormItem.setValueIcons</refs>
    <refs>method:FormItem.getValueIcon</refs>
    <refs>attr:FormItem.valueIcons</refs>
    <refs>attr:FormItem.emptyValueIcon</refs>
    <refs>attr:FormItem.showValueIconOnly</refs>
    <refs>attr:FormItem.suppressValueIcon</refs>
    <refs>attr:FormItem.valueIconWidth</refs>
    <refs>attr:FormItem.valueIconHeight</refs>
    <refs>attr:FormItem.valueIconSize</refs>
    <refs>attr:FormItem.valueIconLeftPadding</refs>
    <refs>attr:FormItem.valueIconRightPadding</refs>
    <refs>attr:FormItem.imageURLPrefix</refs>
    <refs>attr:FormItem.imageURLSuffix</refs>
    <refs>attr:CheckboxItem.valueIconWidth</refs>
    <refs>attr:CheckboxItem.valueIconHeight</refs>
</docItem>
<docItem ref="attr:CubeGrid.facetLabelHoverWidth" flags="IRWA" description="If specified and &lt;code&gt;this.showHover&lt;/code&gt; is true, this is the default width to apply&amp;#010 to hover tips shown for facetLabels. If unset, hover canvas will be sized to &amp;#010 &lt;code&gt;this.hoverWidth&lt;/code&gt; if specified instead." name="facetLabelHoverWidth" valueType="measure" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverWidth">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:TreeGrid.filterData" flags="" description=" Retrieves data that matches the provided criteria and displays the matching data in this&amp;#010 component.&amp;#010 &lt;P&gt;&amp;#010 This method behaves exactly like ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')} except that&amp;#010 ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is automatically set to &quot;substring&quot; so that String-valued&amp;#010 fields are matched by case-insensitive substring comparison.&amp;#010&amp;#010" name="filterData" type="method" definingClass="class:TreeGrid">
<params description="Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument&amp;#010                      instead of a raw criteria object, will be derived by calling&amp;#010                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="for databound components only - optional                            additional properties to set on the DSRequest that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="method:SectionStack.collapseSection" flags="" description=" &amp;#010 Collapse a section or sections.  This action hides all the items assigned to the&amp;#010 section.  Calling this method is equivalent to the user clicking on the SectionHeader of&amp;#010 an expanded section.&amp;#010&amp;#010" name="collapseSection" type="method" definingClass="class:SectionStack">
<seeAlso ref="method:SectionStack.hideSection">
</seeAlso>
<params description="Section(s) to collapse.  For this parameter, you can pass the position &amp;#010                      of the section in the SectionStack, the ID of the section, or a&amp;#010                      List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
<params description="callback to fire when the section has been collapsed" optional="true" name="callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="attr:ListGridField.displayField" flags="IRWA" description="Specifies the ${isc.DocUtils.linkForRef('attr:ListGridField.optionDataSource')} field used to retrieve the display&amp;#010 values that are to be mapped from the internal values specified by ${isc.DocUtils.linkForRef('attr:ListGridField.valueField')}.&lt;br&gt;&amp;#010 If no &lt;code&gt;optionDataSource&lt;/code&gt; is defined for the field, the cell will display&amp;#010 the displayField value for the current record instead of the underlying value for&amp;#010 this field. Note that if this field is editable this will also&amp;#010 be applied to this field's editors." name="displayField" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:TreeGrid.dataSource" flags="IRW" description="The DataSource that this component should bind to for default fields and for performing&amp;#010 ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.&amp;#010 &lt;P&gt;&amp;#010 Can be specified as either a DataSource instance or the String ID of a DataSource." name="dataSource" valueType="DataSource or ID" defaultValue="null" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('dataSourceFields')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:ImgButton.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ComboBoxItem.optionFilterContext" flags="IRA" description="If this item has a specified &lt;code&gt;optionDataSource&lt;/code&gt;, and this property is&amp;#010 not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when&amp;#010 performing the filter operation on the dataSource to obtain the set of options for the&amp;#010 list." name="optionFilterContext" valueType="RPCRequest Properties" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="classMethod:isc.addProperties" flags="" description="&amp;#010 Add all properties and methods from any number of objects to a destination object, &amp;#010 overwriting properties in the destination object.&amp;#010 &lt;p&gt;&amp;#010 Common uses of &lt;code&gt;addProperties&lt;/code&gt; include creating a shallow copy of an object:&lt;pre&gt;&amp;#010&amp;#010     isc.addProperties({}, someObject);&amp;#010&amp;#010 &lt;/pre&gt;Combining settings in order of precedence:&lt;pre&gt;&amp;#010&amp;#010     isc.addProperties({}, defaults, overrides, skinOverrides);&amp;#010&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE&lt;/b&gt;: do not use &lt;code&gt;addProperties&lt;/code&gt; to add defaults to an ISC class.  Use&amp;#010 &lt;code&gt;Class.addProperties()&lt;/code&gt;, as in: &lt;i&gt;MyClassName&lt;/i&gt;&lt;code&gt;.addProperties()&lt;/code&gt;.&amp;#010&amp;#010" name="addProperties" type="classMethod" definingClass="class:isc">
<seeAlso ref="method:Class.addProperties">
</seeAlso>
<params description="object to add properties to" optional="false" name="destination" type="object">
</params>
<params description="objects to obtain properties from.  Properties of all 											arguments other than destination are applied in turn." optional="true" name="(arguments 1-N)" type="object">
</params>
<returns description="returns the destination object" type="object"></returns>
</docItem>
<docItem ref="attr:ButtonItem.buttonConstructor" flags="IRA" description="Constructor class for the button." name="buttonConstructor" valueType="Class" defaultValue="AutoFitButton" type="attr" definingClass="class:ButtonItem">
</docItem>
<docItem ref="method:ValuesManager.valuesHaveChanged" flags="A" description="          Compares the current set of values with the values stored by the call to the&amp;#010          &lt;code&gt;rememberValues()&lt;/code&gt; method. Returns true if the values have changed, and false&amp;#010          otherwise.&amp;#010" name="valuesHaveChanged" type="method" definingClass="class:ValuesManager">
<returns description="true if current values do not match remembered values" type="boolean"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="classMethod:EventHandler.getTarget" flags="" description=" Return the canvas that is the target of the mouse event.&amp;#010 Returns null if no canvas found.&amp;#010&amp;#010" name="getTarget" type="classMethod" definingClass="class:EventHandler">
<returns description="event target canvas" type="Canvas"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="attr:DataSource.dropExtraFields" flags="IR" description="Indicates that for any data being interpreted as DataSource records, only data that&amp;#010 corresponds to declared fields should be retained; any extra data should be discarded.&amp;#010 &lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} data, this means extra properties in selected&amp;#010 objects are dropped.&amp;#010 &lt;P&gt;&amp;#010 By default, for DMI DSResponses, DSResponse.data is filtered on the server to just&amp;#010 the set of fields defined on the DataSource.  This type of filtering can also be enabled&amp;#010 for non-DMI DSResponses (see the overview in ${isc.DocUtils.linkForRef('class:DMI')}).  Setting this property to&amp;#010 &lt;code&gt;false&lt;/code&gt; disables this filtering for this DataSource only.  This setting&amp;#010 overrides the configuration in &lt;code&gt;server.properties&lt;/code&gt;.  This setting can&amp;#010 be overridden by ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')}." name="dropExtraFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:ImgButton.setDisabled" flags="" description=" Enable or disable this object&amp;#010" name="setDisabled" type="method" definingClass="class:ImgButton">
<params description="true if this widget is to be disabled" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
    <groups>state</groups>
</docItem>
<docItem ref="attr:ListGrid.useAllDataSourceFields" flags="IRW" description="If true, the set of fields given by the &quot;default binding&quot; (see &amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}) is used, with any fields specified in&amp;#010 &lt;code&gt;component.fields&lt;/code&gt; acting as overrides that can suppress or modify the&amp;#010 display of individual fields, without having to list the entire set of fields that&amp;#010 should be shown.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;component.fields&lt;/code&gt; contains fields that are not found in the DataSource,&amp;#010 they will be shown after the most recently referred to DataSource field.  If the new&amp;#010 fields appear first, they will be shown first.&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForExampleId('validationFieldBinding', 'This example')} shows a mixture of component&amp;#010 fields and DataSource fields, and how they interact for validation." name="useAllDataSourceFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('validationFieldBinding')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:Canvas.dragStartDistance" flags="IRWA" description="Number of pixels the cursor needs to move before the EventHandler starts a drag operation." name="dragStartDistance" valueType="number" defaultValue="5" type="attr" definingClass="class:Canvas">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:SectionStack.getSectionNumber" flags="" description="&amp;#010 Returns the position of the specified section in the SectionStack.  The numbering is&amp;#010 zero-based.  &amp;#010&amp;#010" name="getSectionNumber" type="method" definingClass="class:SectionStack">
<params description="ID of a section for which you want to obtain the position." optional="false" name="sectionID" type="string">
</params>
<returns description="Position of the section in the SectionStack or -1 if the specified                      section is not a member of this SectionStack." type="number"></returns>
</docItem>
<docItem ref="attr:Facet.rollupValue" flags="IR" description="facetValueId of the rollup facetValue for this facet" name="rollupValue" valueType="String" defaultValue="cubeGrid.rollupValue" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="attr:Canvas.parentElement" flags="IRA" description="This Canvas's immediate parent, if any.&amp;#010 &lt;BR&gt;&amp;#010 Can be initialized, but any subsequent manipulation should be via &amp;#010 ${isc.DocUtils.linkForRef('method:Canvas.addChild','addChild()')} and ${isc.DocUtils.linkForRef('method:Canvas.removeChild','removeChild()')} calls&amp;#010 on the parent." name="parentElement" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>containment</groups>
</docItem>
<docItem ref="attr:ToolbarItem.buttonBaseStyle" flags="IRW" description="If specified this baseStyle will be applied to the buttons in this toolbar." name="buttonBaseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ToolbarItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:isc.getValueForKey" flags="" description=" Given a key and an object of &lt;code&gt;key:value&lt;/code&gt; pairs, return the value that corresponds to&amp;#010 that key.&amp;#010 &lt;P&gt;&amp;#010 If the key is not found, &lt;code&gt;defaultValue&lt;/code&gt; will be returned if provided, otherwise the&amp;#010 key will be returned.&amp;#010&amp;#010" name="getValueForKey" type="classMethod" definingClass="class:isc">
<params description="key to look for" optional="false" name="key" type="string or number">
</params>
<params description="object of key:value pairs" optional="false" name="valueMap" type="object">
</params>
<params description="default value to return if key not found" optional="true" name="defaultValue" type="any">
</params>
<returns description="returns value in valueMap under name key, or                                              defaultValue if key not found" type="any"></returns>
</docItem>
<docItem ref="attr:TextAreaItem.wrap" flags="IRW" description="Text wrapping style." name="wrap" valueType="TEXTAREA_WRAP" defaultValue="TextAreaItem.VIRTUAL" type="attr" definingClass="class:TextAreaItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="class:Validator" description="A validator describes a check that should be performed on a value the user is trying to&amp;#010 save.&amp;#010 &lt;p&gt;&amp;#010 Validators are specified for DataSource fields via the ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}&amp;#010 property.  Validators that need not be run on the server can also be specified for a&amp;#010 specific ${isc.DocUtils.linkForRef('class:FormItem')} or ${isc.DocUtils.linkForRef('object:ListGridField')}.&amp;#010 &lt;p&gt;&amp;#010 ISC supports a powerful library of ${isc.DocUtils.linkForRef('class:ValidatorTypes')} which have identical behavior&amp;#010 on both the client and the server.  &amp;#010 &lt;p&gt; &amp;#010 Beyond this, custom validators can be defined on the client and custom validation logic&amp;#010 added on the server.  Note that the &lt;code&gt;regexp&lt;/code&gt; and &lt;code&gt;mask&lt;/code&gt; validator&amp;#010 types are very flexible and can be used to perform virtually any kind of formatting check&amp;#010 that doesn't involve some large external dataset.&amp;#010 &lt;p&gt;&amp;#010 Custom validators can be reused on the client by adding them to the global validator list,&amp;#010 via the ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')} method." name="Validator" type="class">
    <methods>method:Validator.condition</methods>
    <classAttrs>classAttr:Validator.notABoolean</classAttrs>
    <classAttrs>classAttr:Validator.notAString</classAttrs>
    <classAttrs>classAttr:Validator.notAnInteger</classAttrs>
    <classAttrs>classAttr:Validator.notADecimal</classAttrs>
    <classAttrs>classAttr:Validator.notADate</classAttrs>
    <classAttrs>classAttr:Validator.mustBeLessThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeGreaterThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeLaterThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeEarlierThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeShorterThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeLongerThan</classAttrs>
    <classAttrs>classAttr:Validator.mustBeExactLength</classAttrs>
    <classAttrs>classAttr:Validator.requiredField</classAttrs>
    <classAttrs>classAttr:Validator.notOneOf</classAttrs>
    <classMethods>classMethod:Validator.addValidator</classMethods>
    <classMethods>classMethod:Validator.addValidators</classMethods>
    <treeLocation>Client Reference/Forms</treeLocation>
    <attrs>attr:Validator.type</attrs>
    <attrs>attr:Validator.errorMessage</attrs>
    <attrs>attr:Validator.stopIfFalse</attrs>
    <attrs>attr:Validator.clientOnly</attrs>
<seeAlso ref="class:ValidatorTypes">
</seeAlso>
</docItem>
<docItem ref="classMethod:Date.getInputFormat" flags="" description=" Retrieves the the default format for strings being parsed into dates via &amp;#010 &lt;code&gt;Date.parseInput()&lt;/code&gt;&amp;#010" name="getInputFormat" type="classMethod" definingClass="class:Date">
<seeAlso ref="classMethod:Date.setInputFormat">
</seeAlso>
</docItem>
<docItem ref="type:FormMethod" description="Form METHOD parameters - how the form fields are submitted to the server" name="FormMethod" type="type">
<values description="GET request -- URL encoding (~4K max)" value="DynamicForm.GET"></values>
<values description="POST request -- separate field encoding (no max)" value="DynamicForm.POST"></values>
    <groups>submitting</groups>
</docItem>
<docItem ref="class:Slider" description="The Slider class implements a GUI slider widget allowing the user to select a numeric &amp;#010  value from within a range by dragging a visual indicicator up and down a track.&amp;#010	&lt;p&gt;&amp;#010  The slider will generate events as the user interacts with it and changes its value.&amp;#010  If slider.sliderTarget is specified, moving the slider thumb generates a custom&amp;#010	event named 'sliderMove', sent to the sliderTarget.&amp;#010  If a &lt;code&gt;sliderMove&lt;/code&gt; handler stringMethod is defined on the target, it will be &amp;#010  fired when the slider is moved. The second parameter (available via the variable name&amp;#010  &lt;code&gt;eventInfo&lt;/code&gt; if the handler is a string) is a pointer back to the slider.&amp;#010  &lt;p&gt;&amp;#010  The slider will also fire a &lt;code&gt;valueChanged()&lt;/code&gt; method whenever its value is &amp;#010  changed.  This can be observed or overridden on the Slider instance to perform some action." name="Slider" type="class">
    <methods>method:Slider.setValue</methods>
    <methods>method:Slider.getValue</methods>
    <methods>method:Slider.valueChanged</methods>
    <methods>method:Slider.valueIsChanging</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:Slider.title</attrs>
    <attrs>attr:Slider.length</attrs>
    <attrs>attr:Slider.vertical</attrs>
    <attrs>attr:Slider.thumbThickWidth</attrs>
    <attrs>attr:Slider.thumbThinWidth</attrs>
    <attrs>attr:Slider.trackWidth</attrs>
    <attrs>attr:Slider.thumbSrc</attrs>
    <attrs>attr:Slider.trackSrc</attrs>
    <attrs>attr:Slider.trackCapSize</attrs>
    <attrs>attr:Slider.trackImageType</attrs>
    <attrs>attr:Slider.showTitle</attrs>
    <attrs>attr:Slider.showRange</attrs>
    <attrs>attr:Slider.showValue</attrs>
    <attrs>attr:Slider.labelWidth</attrs>
    <attrs>attr:Slider.labelHeight</attrs>
    <attrs>attr:Slider.labelSpacing</attrs>
    <attrs>attr:Slider.value</attrs>
    <attrs>attr:Slider.minValue</attrs>
    <attrs>attr:Slider.minValueLabel</attrs>
    <attrs>attr:Slider.maxValue</attrs>
    <attrs>attr:Slider.maxValueLabel</attrs>
    <attrs>attr:Slider.numValues</attrs>
    <attrs>attr:Slider.roundValues</attrs>
    <attrs>attr:Slider.flipValues</attrs>
    <attrs>attr:Slider.sliderTarget</attrs>
    <attrs>attr:Slider.canFocus</attrs>
    <attrs>attr:Slider.stepPercent</attrs>
    <attrs>attr:Slider.animateThumb</attrs>
    <attrs>attr:Slider.animateThumbTime</attrs>
    <attrs>attr:Slider.animateThumbInit</attrs>
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="attr:Button.radioGroup" flags="IRWA" description="String identifier for this canvas's mutually exclusive selection group." name="radioGroup" valueType="string" defaultValue="null" type="attr" definingClass="class:Button">
    <examples>${isc.DocUtils.linkForExampleId('buttonRadioToggle')}</examples>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeEarlierThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;dateRange&lt;/code&gt; type validator&amp;#010  returns false because the value passed in is less than the specified maximum date.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeEarlierThan" valueType="string" defaultValue="&quot;Must be earlier than ${max}&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ResultSet.neverDropUpdatedRows" flags="IRA" description="By default when a a row is returned by the server, the current ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','filter&amp;#010 criteria')} are applied to it, and it may disappear from the cache.&amp;#010 &lt;P&gt;&amp;#010 Set this flag to true to disable this behavior." name="neverDropUpdatedRows" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ResultSet">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="attr:Facet.summaryValue" flags="IR" description="Value for facet summary." name="summaryValue" valueType="String" defaultValue="cubeGrid.summaryValue" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="classMethod:Page.setIsomorphicDir" flags="" description="		Specify the root directory for Isomorphic-supplied files.&amp;#010&amp;#010" name="setIsomorphicDir" type="classMethod" definingClass="class:Page">
<params description="New IsomorphicDir URL." optional="true" name="URL" type="string">
</params>
    <groups>files</groups>
</docItem>
<docItem ref="group:animation" name="animation" type="group">
    <refs>method:Canvas.animateMove</refs>
    <refs>method:Canvas.animateResize</refs>
    <refs>method:Canvas.animateRect</refs>
    <refs>method:Canvas.animateFade</refs>
    <refs>method:Canvas.animateScroll</refs>
    <refs>method:Canvas.animateShow</refs>
    <refs>method:Canvas.animateHide</refs>
    <refs>attr:TreeGrid.animateFolders</refs>
    <refs>attr:TreeGrid.animateFolderTime</refs>
    <refs>attr:TreeGrid.animateFolderSpeed</refs>
    <refs>attr:TreeGrid.animateFolderEffect</refs>
    <refs>attr:Slider.animateThumb</refs>
    <refs>attr:Slider.animateThumbTime</refs>
    <refs>attr:Slider.animateThumbInit</refs>
    <refs>attr:Canvas.animateTime</refs>
    <refs>attr:Canvas.animateAcceleration</refs>
    <refs>attr:Canvas.animateMoveTime</refs>
    <refs>attr:Canvas.animateResizeTime</refs>
    <refs>attr:Canvas.animateRectTime</refs>
    <refs>attr:Canvas.animateFadeTime</refs>
    <refs>attr:Canvas.animateScrollTime</refs>
    <refs>attr:Canvas.animateShowTime</refs>
    <refs>attr:Canvas.animateHideTime</refs>
    <refs>attr:Canvas.animateMoveAcceleration</refs>
    <refs>attr:Canvas.animateResizeAcceleration</refs>
    <refs>attr:Canvas.animateRectAcceleration</refs>
    <refs>attr:Canvas.animateScrollAcceleration</refs>
    <refs>attr:Canvas.animateShowAcceleration</refs>
    <refs>attr:Canvas.animateHideAcceleration</refs>
    <refs>attr:Layout.animateMembers</refs>
    <refs>attr:Layout.animateMemberTime</refs>
    <refs>attr:SectionStack.animateSections</refs>
    <refs>attr:Window.animateMinimize</refs>
    <refs>attr:Window.minimizeTime</refs>
    <refs>attr:Window.minimizeAcceleration</refs>
</docItem>
<docItem ref="group:springIntegration" title="Integration with Spring" description="&lt;b&gt;Overview&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The Spring framework has many different parts, from integration with Object Relational&amp;#010 Mapping (ORM) and transaction management systems, to a Model View Controller (MVC)&amp;#010 architecture.&amp;#010 &lt;P&gt;&amp;#010 If you are building a new application from scratch and/or you are trying to &amp;#010 modernize the presentation layer of an existing application, most of Spring MVC is&amp;#010 inapplicable in the ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient architecture')}.  Specifically,&amp;#010 SmartClient renders &lt;b&gt;all&lt;/b&gt; HTML on the client, and the server is responsible only for&amp;#010 retrieving data and enforcing business rules.  This means that Spring's ModelAndView and all&amp;#010 functionality related to retrieving and rendering Views is unnecessary in SmartClient.&amp;#010 SmartClient only needs the Model, and provides methods to deliver that Model to SmartClient&amp;#010 components (the server side method DSResponse.setData()).&amp;#010 &lt;P&gt;&amp;#010 However, Spring's DispatchServlet, Handler chain, and Controller architecture is applicable&amp;#010 to SmartClient.  See &quot;Using Spring Controllers&quot; below.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Existing Spring Application&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 As discussed under the general ${isc.DocUtils.linkForRef('group:clientServerIntegration','server integration')}&amp;#010 topic, integrating SmartClient into your application involves finding a way to provide data&amp;#010 that fulfills the ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} sent by SmartClient components.&amp;#010 &lt;P&gt;&amp;#010 There are 2 approaches for integrating SmartClient into an existing Spring application:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &lt;b&gt;configure Spring to return XML or JSON responses&lt;/b&gt;: create variants&amp;#010 on existing Spring workflows that use a different type of View in order to output XML or&amp;#010 JSON data instead of complete HTML pages.  The SmartClient ${isc.DocUtils.linkForRef('class:RestDataSource')} provides a&amp;#010 standard &quot;REST&quot; XML or JSON-based protocol you can implement, or you can adapt generic&amp;#010 ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} to existing formats.&amp;#010 &lt;P&gt;&amp;#010 In some Spring applications, all existing Spring workflows can be made callable by&amp;#010 SmartClient with a generic View class capable of serializing the Model to XML or JSON,&amp;#010 combined with a Controller that always uses this View.  Consider the following Java&amp;#010 anonymous class, which uses the SmartClient JSTranslater class to dump the entire &amp;#010 Spring Model as a JSON response.&amp;#010 &lt;pre&gt;&amp;#010  new View() {&amp;#010        public void render(Map model, HttpServletRequest request,&amp;#010                           HttpServletResponse response) throws IOException {&amp;#010                final ServletOutputStream outputStream = response.getOutputStream();&amp;#010                response.setContentType(&quot;application/x-javascript&quot;);&amp;#010                outputStream.println(JSTranslater.get().toJS(model));&amp;#010                outputStream.close();&amp;#010        }&amp;#010        public String getContentType() {&amp;#010                return &quot;application/x-javascript&quot;;&amp;#010        }&amp;#010  }&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 If you use this approach, you do not need to install the SmartClient server, and can&amp;#010 ${isc.DocUtils.linkForRef('group:iscInstall','deploy')} SmartClient as simple web content (JS/media/HTML files).  If you&amp;#010 are already familiar with how to generate XML from objects that typically appear in your&amp;#010 Spring Models, this may be the easiest path.&amp;#010 &lt;P&gt;&amp;#010 &lt;li&gt; &lt;b&gt;call Spring beans via SmartClient DMI&lt;/b&gt;: use SmartClient Direct Method Invocation&amp;#010 (DMI) to map ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} to beans managed by Spring, via&amp;#010 ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:&quot;spring&quot;.   Return data to the browser by either simply&amp;#010 returning it from your method, or via calling DSResponse.setData() (server-side method).  &amp;#010 If, from a bean created by Spring, you can easily create the data you typically use to&amp;#010 populate a Model in a ModelAndView, this may be the easiest path.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Using Spring Controllers with SmartClient DMI&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 You can create a Controller that invokes standard SmartClient server request processing,&amp;#010 including DMI, like so:&amp;#010 &lt;pre&gt;&amp;#010 public class SmartClientRPCController extends AbstractController&amp;#010 {&amp;#010     public ModelAndView handleRequest(HttpServletRequest request, &amp;#010                                       HttpServletResponse response)&amp;#010         throws Exception&amp;#010     {&amp;#010         // invoke SmartClient server standard request processing&amp;#010         com.isomorphic.rpc.RPCManager.processRequest(request, response);&amp;#010         return null; // avoid default rendering&amp;#010     }&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 This lets you use Spring's DispatchServlet, Handler chain and Controller architecture as a&amp;#010 pre- and post-processing model wrapped around SmartClient DMI." name="springIntegration" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:TabSet.showTabPicker" flags="IR" description="If there is not enough space to display all the tab-buttons in this tabSet, should&amp;#010 a drop-down &quot;picker&quot; be displayed to allow selection of tabs that are clipped?" name="showTabPicker" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="classAttr:Dialog.YES_BUTTON_TITLE" flags="IRW" description="Title for the &lt;code&gt;&quot;Yes&quot;&lt;/code&gt; button." name="YES_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;Yes&quot;" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:List.remove" flags="" description=" Remove first instance of the passed object from this array, sliding other items around to&amp;#010 fill gaps.&amp;#010&amp;#010" name="remove" type="method" definingClass="interface:List">
<params description="item to remove" optional="false" name="obj" type="any">
</params>
<returns description="true if a matching object was found and removed, false if no matching object was found and the list remains unchanged." type="boolean"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="method:TreeGrid.openFolder" flags="A" description=" Opens a folder.&amp;#010 &lt;p&gt;&amp;#010 Executed when a folder node receives a 'doubleClick' event. This handler must be&amp;#010 specified as a function, whose single parameter is a reference to the relevant folder&amp;#010 node in the tree's data.&lt;br&gt;&amp;#010 See the ListGrid Widget Class for inherited recordClick and recordDoubleClick events.&amp;#010&amp;#010" name="openFolder" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.closeFolder">
</seeAlso>
<seeAlso ref="method:TreeGrid.folderOpened">
</seeAlso>
<seeAlso ref="class:ListGrid">
</seeAlso>
<params description="node to open" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="attr:Menu.cellHeight" flags="IRW" description="The height of each item in the menu, in pixels." name="cellHeight" valueType="number" defaultValue="20" type="attr" definingClass="class:Menu">
    <groups>sizing</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverHeight" flags="IRW" description="A default height for hovers shown for items" name="itemHoverHeight" valueType="measure" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverHeight">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:Label.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:DynamicForm.longTextEditorType" flags="IRW" description="Name of the Form Item class to use for text fields which exceed the &amp;#010 longTextEditorThreshold for this form." name="longTextEditorType" valueType="string" defaultValue="&quot;textArea&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Canvas.dropTypes" flags="IRWA" description="The &quot;type&quot; of thing(s) that can be dropped on this widget specified as a string or an&amp;#010 array of strings (indicating multiple types). Leave this with the value null to indicate&amp;#010 that this widget can accept anything dropped on it from the page." name="dropTypes" valueType="string | array of strings" defaultValue="Canvas.ANYTHING" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.willAcceptDrop">
</seeAlso>
<seeAlso ref="attr:Canvas.dragType">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ImgButton.icon" flags="IR" description="Optional icon to be shown with the button title text.  &amp;#010 &lt;P&gt;&amp;#010 Specify as the partial URL to an image, relative to the imgDir of this component." name="icon" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:ImgButton">
    <setter>setIcon</setter>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:ValuesManager.editNewRecord" flags="" description="&amp;#010 Prepare to edit a new record by clearing the current set of values (or replacing them &amp;#010 with initialValues if specified).&amp;#010 &lt;br&gt;&amp;#010 Subsequent calls to &lt;code&gt;saveData()&lt;/code&gt; will use an &lt;code&gt;add&lt;/code&gt; rather than&amp;#010 an &lt;code&gt;update&lt;/code&gt; operation.&amp;#010&amp;#010" name="editNewRecord" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="initial set of values for the editor as a map of field names to their corresponding&amp;#010     values" optional="true" name="initialValues" type="object">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:Chart.labelValues" flags="IR" description="Whether to show labels on each individual value (bar, column or line point)" name="labelValues" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:Chart">
    <groups>chartAppearance</groups>
</docItem>
<docItem ref="attr:TabSet.scrollerButtonSize" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} is true, this property governs the size of scroller&amp;#010 buttons. Applied as the width of buttons if the tabBar is horizontal, or the height&amp;#010 if tabBar is vertical. Note that the other dimension is determined by &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness','this.tabBarThickness')}" name="scrollerButtonSize" valueType="number" defaultValue="16" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="attr:Slider.showValue" flags="IRW" description="Indicates whether a label for the value of the slider should be displayed. The&amp;#010 default position for this label is to the right of a horizontal slider, or below a vertical&amp;#010 slider." name="showValue" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.value">
</seeAlso>
</docItem>
<docItem ref="classAttr:Dialog.WARN_TITLE" flags="IRW" description="Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.warn')} method.&amp;#010 Note that a custom title can be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="WARN_TITLE" valueType="HTML" defaultValue="&quot;Note&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Img.imageWidth" flags="IR" description="Explicit size for the image, for ${isc.DocUtils.linkForRef('attr:Img.imageType')} settings that would normally use the&amp;#010 image's natural size (applies to ${isc.DocUtils.linkForRef('attr:Img.imageType')} &quot;center&quot; and &quot;normal&quot; only)." name="imageWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:Img">
</docItem>
<docItem ref="attr:MenuButton.menuButtonImageUp" flags="IRWA" description="Image for menu button indicating that the button expands a menu.  This image is shown&amp;#010 for menus expanding up from the button.   Menu direction is controlled by&amp;#010 ${isc.DocUtils.linkForRef('attr:MenuButton.showMenuBelow')}." name="menuButtonImageUp" valueType="SCImgURL" defaultValue="&quot;[SKIN]menu_button_up.gif&quot;" type="attr" definingClass="class:MenuButton">
<seeAlso ref="attr:MenuButton.menuButtonImage">
</seeAlso>
</docItem>
<docItem ref="attr:SpacerItem.height" flags="IRW" description="default height for the spacer" name="height" valueType="number" defaultValue="20" type="attr" definingClass="class:SpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Tree.childrenProperty" flags="IRW" description="For trees with the modelType &quot;children&quot;, this property specifies the name of the property&amp;#010 that contains the list of children for a node." name="childrenProperty" valueType="string" defaultValue="&quot;children&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('childrenArrays')}</examples>
</docItem>
<docItem ref="method:ValuesManager.getValues" flags="" description="  Returns the current set of values for the values manager instance.  This includes the&amp;#010  values from any form managed by this manager, as well as any values explicitly applied&amp;#010  via ${isc.DocUtils.linkForRef('method:ValuesManager.setValues')}.&amp;#010" name="getValues" type="method" definingClass="class:ValuesManager">
<returns description="a map of the values for this manager" type="object"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="method:Array.get" flags="" description=" Return the item at a particular position&amp;#010" name="get" type="method" definingClass="object:Array">
<params description="position of the element to get" optional="false" name="pos" type="Number">
</params>
<returns description="whatever's at that position, undef if not found" type="object"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeOffsetTop" flags="IRA" description="Amount the contained Canvas should be offset from the top.  Defaults to the size for &amp;#010 the top edge.  Set smaller to allow the contained Canvas to overlap the edge and &amp;#010 corner media." name="edgeOffsetTop" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:DataSource.recordXPath" flags="IR" description="See ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')}.  &lt;code&gt;recordXPath&lt;/code&gt; can be specified&amp;#010 directly on the DataSource for a simple read-only DataSource only capable of &quot;fetch&quot;&amp;#010 operations." name="recordXPath" valueType="XPathExpression" defaultValue="null" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('xmlDataSource')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('jsonXPath')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:SectionItem.canCollapse" flags="IR" description="Whether this section header can be collapsed.  If set false, suppresses open/close state&amp;#010 icon" name="canCollapse" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SectionItem">
</docItem>
<docItem ref="attr:CubeGrid.padTitles" flags="IRW" description="Whether to pad titles so they aren't flush with header borders" name="padTitles" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="method:ImgButton.addToRadioGroup" flags="" description=" Add this widget to the specified mutually exclusive selection group with the ID&amp;#010 passed in.&amp;#010 Selecting this widget will then deselect any other StatefulCanvases with the same&amp;#010 radioGroup ID.&amp;#010 StatefulCanvases can belong to only one radioGroup, so this method will remove from &amp;#010 any other radiogroup of which this button is already a member.&amp;#010" name="addToRadioGroup" type="method" definingClass="class:ImgButton">
<params description="- ID of the radiogroup to which this widget should be added" optional="false" name="groupID" type="string">
</params>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:ListGrid.deselectAllRecords" flags="" description="&amp;#010  deselect all records&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectAllRecords" type="method" definingClass="class:ListGrid">
    <groups>selection</groups>
</docItem>
<docItem ref="group:debugging" title="Debugging" description="&lt;h4&gt;Built-in Diagnostics&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 In any page in which ISC has been loaded, you have access to the Developer Console,&amp;#010 which can be opened by entering the following URL into your browser from the running&amp;#010 application:&amp;#010 &lt;pre&gt;&amp;#010     javascript:isc.showConsole()&lt;/pre&gt;&amp;#010 Basic information on the features of the Developer Console can be found in the QuickStart&amp;#010 Guide.  This topic focuses on use of the log system and related debugging facilities.&amp;#010 &lt;P&gt;&amp;#010 The Developer Console contains a &quot;Results&quot; pane that displays a list of diagnostic&amp;#010 messages logged by the SmartClient framework. The &quot;Logging Preferences&quot; menu lets you&amp;#010 enable and disable SmartClient's built-in diagnostics in several categories. Because&amp;#010 important diagnostic messages may be logged at any time, you should have the Developer&amp;#010 Console open whenever you are working with SmartClient (and you should bookmark the&amp;#010 &quot;javascript:&quot; expression above to make this easier).&amp;#010 &lt;P&gt;&amp;#010 Log messages are of the format:&amp;#010 &lt;P&gt;&amp;#010 &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;timestamp&lt;/i&gt;:&lt;i&gt;priority&lt;/i&gt;:&lt;i&gt;category&lt;/i&gt;:&lt;i&gt;message&lt;/i&gt;&amp;#010 &lt;P&gt;&amp;#010 For example, the following log message:&amp;#010 &lt;pre&gt;&amp;#010     11:59:25:806:INFO:Page:Page loading complete.&lt;/pre&gt;&amp;#010 Occured at 11:59:25 local time and 806 milliseconds.  It's priority was &lt;code&gt;INFO&lt;/code&gt;,&amp;#010 it occurred in the category &lt;i&gt;Page&lt;/i&gt;, and the message is &quot;Page loading complete.&quot;.&amp;#010 &lt;P&gt;&amp;#010 Each logging &lt;i&gt;category&lt;/i&gt; has a &lt;i&gt;priority&lt;/i&gt; associated with it.  If a message's&amp;#010 priority is lower than the current priority for the category it is logged in, the&amp;#010 message will be suppressed (will not appear in the &quot;Results&quot; pane).  &amp;#010 &lt;p&gt;&amp;#010 It is critical to be familiar with the diagnostic categories built-in to SmartClient - &amp;#010 you will use them in most debugging sessions.  Open the Logging Preferences menu and select&amp;#010 &quot;More..&quot; to see a list of diagnostic log categories.   Hover over each category name to&amp;#010 see a description of what kind of messages are logged in the category.  &amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Debugging JavaScript Errors&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Isomorphic recommends the FireFox browser as the primary development platform.  In FireFox,&amp;#010 JavaScript errors are reported both in the SmartClient Developer Console and in the FireFox&amp;#010 JavaScript console, which can be opened by entering the special&amp;#010 url &quot;javascript:&quot; in the address bar.&amp;#010 &lt;P&gt;&amp;#010 Isomorphic currently recommends that every SmartClient developer install either the &amp;#010 &lt;a href='https://addons.mozilla.org/firefox/1815/' onclick=&quot;window.open('https://addons.mozilla.org/firefox/1815/');return false;&quot;&gt;Console2&lt;/a&gt; or&amp;#010 &lt;a href='http://www.getfirebug.com/' onclick=&quot;window.open('http://www.getfirebug.com/');return false;&quot;&gt;Firebug&lt;/a&gt; extensions for FireFox.  &quot;Console2&quot; simply&amp;#010 replaces the default FireFox JavaScript console with a more functional console;&amp;#010 Firebug aims to be a true debugger.  Both tools will typically load or identify the correct&amp;#010 file and line number where a JS error occured.&amp;#010 &lt;P&gt;&amp;#010 In Internet Explorer, when JS errors occur, SmartClient is able to report full stack traces&amp;#010 in the Developer Console.  This can be invaluable when your code triggers a JS error&amp;#010 in the SmartClient libraries themselves, or when it is unclear how your code is being&amp;#010 called.  Stack traces from Internet Explorer should &lt;i&gt;always&lt;/i&gt; be included in issue&amp;#010 reports sent to Isomorphic Software, if at all possible. &amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Inspecting application state&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The &quot;Evaluate JS Expression&quot; area of the Results Pane in the Developer Console can be used&amp;#010 to inspect the current state of a SmartClient application.  Any SmartClient or browser&amp;#010 built-in API can be called from the &quot;Evaluate JS Expression&quot; area, and the results will&amp;#010 be intelligently summarized (via ${isc.DocUtils.linkForRef('method:Log.echo')}).  For example, simply typing a&amp;#010 component's ID and pressing the &quot;Eval JS&quot; button will give you a dump of it's current&amp;#010 property values.  &amp;#010 &lt;P&gt;&amp;#010 Many, many SmartClient APIs can be usefully called while troubleshooting, eg, &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.data')} is a ${isc.DocUtils.linkForRef('class:ResultSet')} when a grid is DataBound and &amp;#010 ${isc.DocUtils.linkForRef('method:ResultSet.get')} can be called to inspect the current values on records.  In addition,&amp;#010 new application code can be tried out, for example, you might repeatedly instantiate a new&amp;#010 component, trying variants on the properties you could give it.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Inspecting transient application state with logs&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Transient state, such as the values of local variables in a method that is crashing, can be&amp;#010 sent to the Developer Console via using the ${isc.DocUtils.linkForRef('class:Log')} class.  For example, to dump the&amp;#010 value of the local variable &quot;request&quot;: &amp;#010 &lt;pre&gt;&amp;#010     isc.logWarn(&quot;request is: &quot; + isc.echo(request));&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 It's a good idea to dump the values of local variables in any method that is crashing or&amp;#010 behaving unexpectedly.&amp;#010 &lt;P&gt;&amp;#010 Note the use of ${isc.DocUtils.linkForRef('classMethod:isc.logWarn','logWarn()')} above: in typical debugging sessions, it's best&amp;#010 to simply use &lt;code&gt;logWarn&lt;/code&gt; method to output diagnostics to ensure your message will&amp;#010 not be suppressed by log priority settings.&amp;#010 &lt;P&gt;&amp;#010 NOTE: never use the native &lt;code&gt;alert()&lt;/code&gt; method to output diagnostics.  Among other&amp;#010 issues, &lt;code&gt;alert()&lt;/code&gt; can affect timing, masking or altering the behavior you were&amp;#010 trying to debug.  SmartClient's logging system doesn't suffer from these problems and&amp;#010 provides much more control.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Issue Reports&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 If you believe you've discovered a bug in SmartClient or you are having trouble using&amp;#010 SmartClient APIs, you can report it at &lt;a href='http://forums.smartclient.com/' onclick=&quot;window.open('http://forums.smartclient.com/');return false;&quot;&gt;http://forums.smartclient.com/&lt;/a&gt;, or, if&amp;#010 you have Enterprise Support, at the &amp;#010 &lt;a href='http://support.isomorphic.com/' onclick=&quot;window.open('http://support.isomorphic.com/');return false;&quot;&gt;Customer Support Extranet&lt;/a&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;How quickly your issue is resolved is entirely up to you&lt;/b&gt;.  If you follow the steps&amp;#010 below and submit an appropriate issue report, you will generally receive a rapid solution&amp;#010 from Isomorphic Support, regardless of what support level you have, because Isomorphic&amp;#010 aggressively corrects bugs and legitimate usage issues.  If you skip steps you are likely to&amp;#010 be directed back to this document and asked to submit a more complete issue report.&amp;#010 &lt;P&gt;&amp;#010 Before reporting an issue, ensure that you:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Have read the ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')} cover to&amp;#010 cover.  Later chapters cover more advanced topics and provide links to further examples and&amp;#010 reference.&amp;#010 &lt;li&gt; Have searched the ${isc.DocUtils.linkForDocNode('FeatureExplorer', 'Feature Explorer')} for examples that show&amp;#010 what you are trying to do&amp;#010 &lt;li&gt; Have searched this reference, trying multiple searches using different, common and&amp;#010 related terms for what you are trying to do (eg for search, try &quot;search&quot;, &quot;filter&quot;,&amp;#010 &quot;criteria&quot;, &quot;find&quot;, &quot;match&quot;, etc)&amp;#010 &lt;li&gt; Have searched the public &lt;a href='http://forums.smartclient.com' onclick=&quot;window.open('http://forums.smartclient.com');return false;&quot;&gt;forums&lt;/a&gt;&amp;#010 &lt;/ul&gt;&amp;#010 Always include:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; A description of what you are trying to accomplish &lt;b&gt;from a user's perspective&lt;/b&gt;.&amp;#010 The best answers often point out a simpler approach.&amp;#010 &lt;li&gt; The browser(s), operating system(s) and SmartClient version(s) you experience the error&amp;#010 on (SmartClient version is available in the lower-left handle corner of the Developer&amp;#010 Console)&amp;#010 &lt;/ul&gt;&amp;#010 Then, include &lt;b&gt;either&lt;/b&gt; a standalone test case (see below), &lt;b&gt;or&lt;/b&gt;:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; For JS errors, Stack traces from Firebug (for Firefox) or the Developer Console (for&amp;#010 IE), as covered under &quot;Debugging JavaScript Errors&quot; above&amp;#010 &lt;li&gt; Results of calling &lt;code&gt;echo()&lt;/code&gt; on local variables or other application&amp;#010 state you think is relevant (see &quot;Inspecting Application State&quot; above)&amp;#010 &lt;li&gt; What server platform and ${isc.DocUtils.linkForRef('group:clientServerIntegration','databinding approach')} you&amp;#010 are using, if applicable&amp;#010 &lt;li&gt; contents of the SmartClient Developer Console &quot;Log messages&quot; area, with appropriate&amp;#010 diagnostic categories set the DEBUG or INFO level (see &quot;Built-in Diagnostics&quot; above)&amp;#010 &lt;li&gt; sample code and sample data&amp;#010 &lt;/ul&gt;&amp;#010 &lt;b&gt;Preparing a standalone test case&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 A standalone test case is one of:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; a chunk of JavaScript code that can be executed from the &quot;Eval JS&quot; area of the&amp;#010 Developer Console on some specified page within the unmodified SmartClient SDK,&amp;#010 demonstrating your issue&amp;#010 &lt;li&gt; an .html or .jsp file that can be dropped at a specified location into an unmodified&amp;#010 SmartClient SDK and will run without changes, demonstrating your issue.&amp;#010 &lt;li&gt; a .zip file that includes a standalone .html/.jsp file  as above, as well as&amp;#010 dependencies required to make the test case runnable, such as XML datasets&amp;#010 &lt;/ol&gt;&amp;#010 &lt;P&gt;&amp;#010 Submitting a standalone test case removes any ambiguity as to whether there is a bug in&amp;#010 SmartClient or a bug in your code, and eliminates the possibility of Isomorphic Support&amp;#010 responding with a &quot;works for me&quot; result due to incomplete information.  Issues with verified&amp;#010 test cases are routed directly to the engineer that authored the relevant SmartClient&amp;#010 subsystem, often as the new highest priority task.  In addition, the process of preparing a&amp;#010 test case very often allows you to solve the issue yourself.&amp;#010 &lt;P&gt;&amp;#010 There are two approaches to test case preparation:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; Add code to an existing SmartClient example until you can reproduce the problem&amp;#010 &lt;li&gt; Remove code from your application until it minimally shows the problem and runs standalone&amp;#010 &lt;/ol&gt;&amp;#010 &lt;P&gt;&amp;#010 For approach #1, find the nearest match to your use case in the&amp;#010 ${isc.DocUtils.linkForDocNode('FeatureExplorer')} examples or in the other examples accessible from the Examples&amp;#010 folder of the SDK, then try to minimally modify that example to demonstrate your issue.&amp;#010 Feature Explorer examples are a particularly good starting point because you can simply copy&amp;#010 the code from the Feature Explorer to the Eval JS area of the Developer Console and begin&amp;#010 changing it, and if successful this yields a type #1 test case, the easiest for you to&amp;#010 submit and most efficient for Isomorphic to work with.&amp;#010 &lt;P&gt;&amp;#010 For approach #2,&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; If a server is involved in initial page generation (eg a .jsp file), in most cases you&amp;#010 can eliminate many server dependencies &lt;b&gt;and&lt;/b&gt; create an easily modifiable starting point&amp;#010 by using the browser's &quot;View Source&quot; feature to save a copy of the generated HTML output as&amp;#010 an .html file in the same directory as the .jsp file that generated it.  Such a file will&amp;#010 generally continue to function (all relative paths are still correct), and can be modified&amp;#010 freely without the need to later revert changes to a .jsp.&amp;#010 &lt;li&gt; Eliminate any code that isn't involved in the interaction.  Keep running the test case&amp;#010 as you eliminate code to ensure you are still seeing the issue (you may solve it this way,&amp;#010 or find key preconditions that you can report to Isomorphic)&amp;#010 &lt;li&gt; For any issue that isn't cosmetic, revert to a default SmartClient skin&amp;#010 &lt;li&gt; For any necessary RPC/DataSource interactions, spoof the interaction with one of these&amp;#010 approaches:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; switch any DataSources to one of the sample DataSources from the SDK (eg &quot;supplyItem&quot;)&amp;#010 if your issue can still be reproduced in this case.&amp;#010 &lt;li&gt; create a small sample dataset in JavaScript directly in the .html file, and use a&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.clientOnly','clientOnly DataSource')} with that dataset.&amp;#010 &lt;li&gt; capture server responses verbatim by setting the RPCManager log category to DEBUG, save&amp;#010 the responses as flat files, and set ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} to point at them.&amp;#010 &lt;li&gt; for RPCs, instead of calling the RPCManager, directly call your own callback function,&amp;#010 passing a spoofed RPCResponse that includes just the fields your code depends upon&amp;#010 &lt;/ul&gt;&amp;#010 &lt;li&gt; Finally, move your .html file into the stock SmartClient SDK along with any remaining&amp;#010 dependencies and verify the problem can still be reproduced&amp;#010 &lt;/ol&gt;&amp;#010 Having prepared the test case, combine it with the other required issue report information&amp;#010 covered above, and submit it to the &lt;a href='http://forums.smartclient.com/' onclick=&quot;window.open('http://forums.smartclient.com/');return false;&quot;&gt;forums&lt;/a&gt;,&amp;#010 or, if you have Enterprise Support, at the&amp;#010 &lt;a href='http://support.isomorphic.com/' onclick=&quot;window.open('http://support.isomorphic.com/');return false;&quot;&gt;Customer Support Extranet&lt;/a&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Adding your own diagnostic categories&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Calling &lt;code&gt;logWarn()&lt;/code&gt; is fine for a log statement you plan to delete at the end of&amp;#010 the debugging session.  However, many log statements have lasting value if you could enable&amp;#010 or disable them only when you need the relevant diagnostics, like SmartClient's built-in&amp;#010 diagnostic categories.  To do this, pick a priority level less than &lt;code&gt;WARN&lt;/code&gt;&amp;#010 (&lt;code&gt;INFO&lt;/code&gt; or &lt;code&gt;DEBUG&lt;/code&gt;), and call the corresponding method on the Log&amp;#010 class (&lt;code&gt;logInfo()&lt;/code&gt; or &lt;code&gt;logDebug()&lt;/code&gt;), passing the category name as a&amp;#010 second parameter.  For example:&amp;#010 &lt;pre&gt;&amp;#010   isc.Log.logInfo(&quot;first record is: &quot; + &amp;#010                   isc.Log.echo(myGrid.data.get(0)), &amp;#010                  &quot;myGridLoading&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 This message will no longer appear in the Results Pane by default, because its priority&amp;#010 (&lt;code&gt;INFO&lt;/code&gt;) is less than the default of &lt;code&gt;WARN&lt;/code&gt;.  To see this message,&amp;#010 open the Logging Preferences menu and pick &quot;More..&quot;, then click the &quot;Add&quot; button, enter&amp;#010 &quot;myGridLoading&quot; as the category name and set the priority to &lt;code&gt;INFO&lt;/code&gt;.  The message&amp;#010 will now appear next time it is logged.&amp;#010 &lt;P&gt;&amp;#010 Now you have a custom log category that you and other developers can use to debug your&amp;#010 application, subsystem by subsystem.  These diagnostics will be available to you both in&amp;#010 development and production environments.&amp;#010 &lt;P&gt;&amp;#010 As with SmartClient's built-in diagnostics, you may choose to log certain messages in your&amp;#010 custom category at the &lt;code&gt;DEBUG&lt;/code&gt; level and a lesser number of messages at the&amp;#010 &lt;code&gt;INFO&lt;/code&gt; level, to create different depths of diagnostic output.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Logging refinements&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The core log methods (&lt;code&gt;logDebug()&lt;/code&gt;, &lt;code&gt;logInfo()&lt;/code&gt;,&amp;#010 &lt;code&gt;logWarn()&lt;/code&gt;) and the &quot;echo&quot; facilities (&lt;code&gt;echo()&lt;/code&gt; and&amp;#010 &lt;code&gt;echoAll()&lt;/code&gt;) are available on every SmartClient component and Class.  Hence,&amp;#010 in many cases, the special JavaScript value &quot;this&quot; will refer to an object that supports&amp;#010 &lt;code&gt;logWarn()&lt;/code&gt; et al.  For example:&amp;#010 &lt;pre&gt;&amp;#010     Canvas.create({&amp;#010        ID:&quot;canvasExample&quot;,&amp;#010        contents:&quot;Hello World!&quot;,&amp;#010        click:&quot;this.logWarn('the Canvas is: ' + this.echo(this))&quot;&amp;#010     });&amp;#010 &lt;/pre&gt;&amp;#010 The special value &quot;this&quot; is not always set to a SmartClient component, for example, in some&amp;#010 kinds of callbacks (eg ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')}).  When in doubt, use these&amp;#010 methods via the Log class as &lt;code&gt;isc.Log.logWarn()&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Logging performance&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Because the log message is actually formed &lt;i&gt;before&lt;/i&gt; the call to the log system, logs&amp;#010 that are suppressed can still carry a performance penalty.  This is particularly true of&amp;#010 logs that output a lot of data or occur frequently.  To avoid this penalty, you can check in&amp;#010 advance whether a message will be suppressed using &amp;#010 ${isc.DocUtils.linkForRef('method:Log.logIsDebugEnabled','isc.Log.logIsDebugEnabled()')} and&amp;#010 ${isc.DocUtils.linkForRef('method:Log.logIsInfoEnabled','isc.Log.logIsInfoEnabled()')}.  For example:&amp;#010 &lt;pre&gt;&amp;#010   if (isc.Log.logIsInfoEnabled(&quot;myGridLoading&quot;)) {&amp;#010      isc.Log.logInfo(&quot;first record is: &quot; +&amp;#010                      isc.Log.echo(myGrid.data.get(0)),&amp;#010                      &quot;myGridLoading&quot;);&amp;#010   }&amp;#010 &lt;/pre&gt;&amp;#010 Generally, it is only important to do this for logs that will occur multiple times during a&amp;#010 given user interaction (eg a mousedown or keypress) and/or that call &lt;code&gt;echo()&lt;/code&gt; on&amp;#010 objects with many properties." name="debugging" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:ListGrid.waitForSave" flags="IRWA" description="If this is an editable listGrid, this property determines whether the user will be&amp;#010 able to dismiss the edit form, or navigate to another cell while the save is in &amp;#010 process (before the asynchronous server response returns)." name="waitForSave" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="group:parsing" name="parsing" type="group">
</docItem>
<docItem ref="attr:ResultSet.initialData" flags="IA" description="You can specify the initial set of data for the ResultSet using this property.&amp;#010 This data will be considered cached meaning sorting and filtering can occur on&amp;#010 the client (no need for server fetch).&amp;#010 This cached data can be dropped via a call to ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')}." name="initialData" valueType="Array of records" defaultValue="null" type="attr" definingClass="class:ResultSet">
    <groups>fetching</groups>
    <groups>cacheSync</groups>
</docItem>
<docItem ref="method:Canvas.dragRepositionStop" flags="A" description="&amp;#010 Executed when the mouse button is released at the end of the drag. Your&amp;#010 widget can use this opportunity to fire custom code based upon where the&amp;#010 mouse button was released, etc. &amp;#010 &lt;p&gt;&amp;#010 Returning true from this handler will cause the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline if&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to &quot;outline&quot;) to be left in its current&amp;#010 location. Returning false from this handler will cause it to snap back to its&amp;#010 original location.&amp;#010&amp;#010" name="dragRepositionStop" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to snap the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline) back to its                   original location or true to leave it at the current cursor position." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="attr:Window.minimizeTime" flags="IRWA" description="If this window is minimizeable, and animateMinimize is true, what should the duration of &amp;#010 the minize / maximize be (in ms)? If unset defaults to &lt;code&gt;canvas.animationTime&lt;/code&gt;." name="minimizeTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Window">
    <examples>${isc.DocUtils.linkForExampleId('windowMinimize')}</examples>
    <groups>appearance</groups>
    <groups>header</groups>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ListGridField.width" flags="IRW" description="The width of this field, specified as either an absolute number of pixels,&amp;#010  a percentage of the remaining space, or &quot;*&quot; to allocate an equal portion of the&amp;#010  remaining space. &lt;br&gt;&amp;#010  ListGrid field widths may also be set when the fields are instantiated via the &amp;#010  listGrid.setFields() method by passing an array of numbers (absolute pixel sizes only) &amp;#010  as the second parameter" name="width" valueType="number|string" defaultValue="&quot;*&quot;" type="attr" definingClass="object:ListGridField">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Window.modalMaskStyle" flags="IR" description="Specifies the CSS style for the modal mask." name="modalMaskStyle" valueType="string" defaultValue="&quot;modalMask&quot;" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.modalMask">
</seeAlso>
    <groups>modal</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:hibernateIntegration" title="Integration with Hibernate" description="SmartClient can integrate with Hibernate in two main ways:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; With pre-existing Hibernate configuration and Java beans, SmartClient&amp;#010 server-side DSRequests can be transformed into Hibernate &lt;code&gt;Criteria&lt;/code&gt; objects,&amp;#010 and results returned via a SmartClient DSResponse.  &amp;#010 &lt;li&gt; SmartClient can drive Hibernate as a storage layer only, automatically generating&amp;#010 Hibernate configuration from a SmartClient DataSource file (&lt;i&gt;dataSourceID&lt;/i&gt;.ds.xml).  In&amp;#010 this case, you do not write a Java bean; Hibernate's beanless &amp;#010 &lt;a href='http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#persistent-classes-dynamicmodels' onclick=&quot;window.open('http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#persistent-classes-dynamicmodels');return false;&quot;&gt;&quot;dynamic model&quot;&lt;/a&gt;&amp;#010 mode is used.  This is enabled via ${isc.DocUtils.linkForRef('attr:DataSource.serverType')}:&quot;hibernate&quot;.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Mapping DSRequest/DSResponse to Hibernate&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 This integration strategy uses the server-side Java APIs described in&amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration')}.  Two complete examples of Hibernate integration are&amp;#010 provided in the SDK, one using ${isc.DocUtils.linkForRef('class:DMI')} and one using ${isc.DocUtils.linkForRef('class:RPCManager')} dispatch.  Both&amp;#010 are accessible from the SDK Explorer as Examples-&gt;Server Integration, and both include&amp;#010 sample Hibernate configuration as well as a sample UI capable of loading and saving data.&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&amp;#010 &lt;a href='/examples/server_integration/index.html#customDataSourceIntegrationHibernate' onclick=&quot;window.open('/examples/server_integration/index.html#customDataSourceIntegrationHibernate');return false;&quot;&gt;&quot;Custom DataSource Integration with Hibernate&quot;&lt;/a&gt; &amp;#010 shows how to create a .jsp that uses RPCManager dispatch to implement all four DataSource&amp;#010 request ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')}s via Hibernate for a sample bean.&amp;#010 &lt;li&gt;&amp;#010 &lt;a href='/examples/server_integration/index.html#springDSHiberateDMI' onclick=&quot;window.open('/examples/server_integration/index.html#springDSHiberateDMI');return false;&quot;&gt;&quot;Spring DataSource Integration using DMI to Hibernate&quot;&lt;/a&gt;&amp;#010 shows how to use SmartClient Direct Method Invocation (${isc.DocUtils.linkForRef('class:DMI')}) to implement all four&amp;#010 DataSource operations with Hibernate.  This particular example uses&amp;#010 ${isc.DocUtils.linkForRef('group:springIntegration','Spring')}-based lookup of the target for DMI, however, the same&amp;#010 approach will work without Spring - see other DMI examples on the same page for non-Spring&amp;#010 methods of DMI target lookup.&amp;#010 &lt;/ul&gt;&amp;#010 As discussed under ${isc.DocUtils.linkForRef('class:DMI')}, whether to use DMI or RPCManager dispatch is largely a matter&amp;#010 of preference, however if you are already using Spring, a DMI-based approach is probably&amp;#010 a better fit.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;serverType:&quot;hibernate&quot;&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 As with DataSources using SmartClient's built-in ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')}, you&amp;#010 need only ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create a DataSource')} in XML format - no Java&amp;#010 classes or other configuration are required.  The ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')}'s&amp;#010 &quot;Import DataSources&quot; section can be used to import test data into serverType:&quot;hibernate&quot;&amp;#010 DataSources in the same manner as SQLDataSources." name="hibernateIntegration" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="type:AutoChild" description="An autoChild is an automatically generated subcomponent that a component creates to&amp;#010 handle part of its presentation or functionality.&amp;#010 &lt;P&gt;&amp;#010 An example is the Window component and its subcomponent the &quot;header&quot;.&amp;#010 &lt;P&gt;&amp;#010 AutoChildren support a standard set of properties that can be used to customize or skin&amp;#010 them.  The names of these properties are derived from the name of the autoChild itself.&amp;#010 These properties will generally not be separately documented for every autoChild unless&amp;#010 there are special usage instructions - the existance of the properties is implied&amp;#010 whenever you see an autoChild documented.&amp;#010 &lt;P&gt;&amp;#010 The properties are:&amp;#010 &lt;dl&gt;&amp;#010 &lt;dt&gt; &lt;b&gt;&quot;show&quot; + name&lt;/b&gt; (eg showHeader)&amp;#010 &lt;dd&gt; Controls whether this autoChild should be created and shown at all.  Note that the&amp;#010 first letter of the autoChild name is uppercased for this property (&quot;header&quot; -&gt; &quot;Header&quot;).&amp;#010&amp;#010 &lt;dt&gt; &lt;b&gt;name + &quot;Properties&quot;&lt;/b&gt; (eg headerProperties)&amp;#010 &lt;dd&gt; Properties to apply to the autoChild created by this particular instance of the&amp;#010 parent component.  For example:&amp;#010 &lt;pre&gt;&amp;#010        isc.Window.create({&amp;#010            headerProperties: { layoutMargin : 10 }&amp;#010        });&amp;#010 &lt;/pre&gt;&amp;#010 Would apply a ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin','layoutMargin')} to the header of the Window,&amp;#010 increasing the empty space around the subcomponents of the header (buttons, title label,&amp;#010 etc).&amp;#010 &lt;P&gt;&amp;#010 Generally, *Properties is null.  &lt;b&gt;Do not&lt;/b&gt; use the *Properties mechanism for&amp;#010 skinning.  See below. &amp;#010&amp;#010 &lt;dt&gt; &lt;b&gt;name + &quot;Defaults&quot;&lt;/b&gt; (eg headerDefaults)&amp;#010 &lt;dd&gt; Defaults that will be applied to the autoChild in every instance of the parent&amp;#010 component.  *Defaults is used for skinning.  This property should never be set when&amp;#010 creating an instance of the parent component, as it will generally wipe out defaults&amp;#010 required for the component's operation.  Use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults')}&amp;#010 to alter defaults instead, generally as part of a custom skin and/or custom component&amp;#010 creation.&amp;#010&amp;#010 &lt;dt&gt; &lt;b&gt;name + &quot;Constructor&quot;&lt;/b&gt; (eg headerConstructor)&amp;#010 &lt;dd&gt; SmartClient Class of the component to be created.  Extremely advanced, this&amp;#010 property should generally only be used when there is documentation encouraging you to do&amp;#010 so.&amp;#010 &lt;/dl&gt;&amp;#010 Note that an autoChild need not be a direct child of the creating component, for&amp;#010 example, the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton','minimizeButton')} of the Window is also an&amp;#010 autoChild, even though it is actually located within the window header.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Skinning AutoChildren&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Skinning autoChildren, done via ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults()')}, is done&amp;#010 for two purposes:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Changing the default appearance or behavior of a component, for example, making all&amp;#010 Window headers shorter&amp;#010 &lt;li&gt; Creating a customized variation of an existing component &lt;i&gt;while retaining the&amp;#010 base component unchanged&lt;/i&gt;.  For example, creating a subclass of Window called&amp;#010 &quot;PaletteWindow&quot; with very compact appearance, while leaving the base Window class&amp;#010 unchanged so that warning dialogs and other core uses of Windows do not look like&amp;#010 PaletteWindows.&amp;#010 &lt;/ul&gt;&amp;#010 The best code examples for skinning are in the load_skin.js file for the &quot;SmartClient&quot;&amp;#010 skin, in &lt;code&gt;isomorphic/skins/SmartClient/load_skin.js&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Passthroughs (eg window.headerStyle)&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 In many cases a component will provide shortcuts to skinning or customizing its&amp;#010 autoChildren, such as ${isc.DocUtils.linkForRef('attr:Window.headerStyle')}, which becomes header.styleName.  When&amp;#010 these shortcuts exist, they must be used instead of the more general autoChild skinning&amp;#010 system.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Safe Skinning&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Before skinning an autoChild consider the &amp;#010 ${isc.DocUtils.linkForRef('group:safeSkinning','safe skinning guidelines')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Accessing AutoChildren Dynamically&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 For a component &quot;Window&quot; with an autoChild named &quot;header&quot;, if you create a Window&amp;#010 with ID &quot;myWindow&quot;, the header autoChild is available as &quot;myWindow.header&quot;.&amp;#010 &lt;P&gt;&amp;#010 Unless documented otherwise, an autoChild should be considered an internal part of a&amp;#010 component.  Always configure autoChildren by APIs on the parent component when they&amp;#010 exist.  It makes sense to access an autoChild for troubleshooting purposes or for&amp;#010 workarounds, but in general, an autoChild's type, behavior, and internal structure are&amp;#010 subject to change without notice in future SmartClient versions.&amp;#010 &lt;P&gt;&amp;#010 Accessing an autoChild may give you a way to make a dynamic change to a component that&amp;#010 is not otherwise supported by the parent component (for example, changing a text label&amp;#010 where there is no setter on the parent).  Before using this approach, consider whether&amp;#010 simply recreating the parent component from scratch is a viable option - this approach&amp;#010 is more than fast enough for most smaller components, and will not create a reliance on&amp;#010 unsupported APIs." name="AutoChild" type="type">
</docItem>
<docItem ref="attr:Tab.ID" flags="IRW" description="Optional ID for the tab, which can later be used to reference the tab.&amp;#010 APIs requiring a referenct a tab will accept the tabs ID &amp;#010 [including  ${isc.DocUtils.linkForRef('method:TabSet.selectTab')}, ${isc.DocUtils.linkForRef('method:TabSet.updateTab')}, ${isc.DocUtils.linkForRef('method:TabSet.removeTab')}].&lt;br&gt;&amp;#010 The ID will also be passed to the ${isc.DocUtils.linkForRef('method:TabSet.tabSelected')} and ${isc.DocUtils.linkForRef('method:TabSet.tabDeselected')}&amp;#010 handler functions, if specified.&amp;#010 &lt;p&gt;&amp;#010 Note that if you provide an ID, it must be globally unique." name="ID" valueType="identifier" defaultValue="null" type="attr" definingClass="object:Tab">
</docItem>
<docItem ref="method:ListGrid.clearCriteria" flags="" description=" Clear the current criteria used to filter data.&amp;#010&amp;#010" name="clearCriteria" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.fetchData">
</seeAlso>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundFilter')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:DataSourceField.title" flags="IR" description="Default user-visible title for this field.&amp;#010 &lt;p&gt;&amp;#010 This will be picked up by DataBound components and other views onto this DataSource." name="title" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>componentBinding</groups>
</docItem>
<docItem ref="object:isA" description="A library of functions for determining the types of other objects.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  The &quot;isA&quot; methods for the basic JavaScript types are much faster and more consistent across&amp;#010  platforms than JavaScript's &quot;typeof&quot; operator.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010  An isA method is automatically created for every ISC Class and Interface definition, for&amp;#010  example, isA.Canvas().&lt;br&gt;&lt;br&gt;" name="isA" type="object">
    <classMethods>classMethod:isA.List</classMethods>
    <classMethods>classMethod:isA.emptyString</classMethods>
    <classMethods>classMethod:isA.nonemptyString</classMethods>
    <classMethods>classMethod:isA.Object</classMethods>
    <classMethods>classMethod:isA.emptyObject</classMethods>
    <classMethods>classMethod:isA.String</classMethods>
    <classMethods>classMethod:isA.Array</classMethods>
    <classMethods>classMethod:isA.Function</classMethods>
    <classMethods>classMethod:isA.Number</classMethods>
    <classMethods>classMethod:isA.Boolean</classMethods>
    <classMethods>classMethod:isA.Date</classMethods>
    <classMethods>classMethod:isA.RegularExpression</classMethods>
    <classMethods>classMethod:isA.Instance</classMethods>
    <classMethods>classMethod:isA.ClassObject</classMethods>
    <classMethods>classMethod:isA.Interface</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
    <examples>&lt;code&gt;if (isA.Number(myVariable)) ...&lt;/code&gt;&amp;#010	Note: &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;isAn&lt;/code&gt; are synonyms of &lt;code&gt;isA&lt;/code&gt; and can be used&amp;#010			interchangably when it looks better syntactically, eg:&amp;#010				&lt;code&gt;if (myObject == null) ...&lt;/code&gt;&amp;#010			or&amp;#010				&lt;code&gt;if (isAn.Array(myObject)) ...&lt;/code&gt;</examples>
</docItem>
<docItem ref="method:Canvas.initWidget" flags="" description="&amp;#010 For custom components, perform any initialization specific to your widget subclass.&amp;#010 &lt;P&gt;&amp;#010 When creating a subclass of any Canvas-based component, you should generally override&amp;#010 this method rather than overriding ${isc.DocUtils.linkForRef('method:Class.init')}.  This is because Canvas has its own&amp;#010 ${isc.DocUtils.linkForRef('method:Class.init')} override which performs some generally desirable initialization - see&amp;#010 ${isc.DocUtils.linkForRef('method:Canvas.init')} for details.&amp;#010 &lt;p&gt;&amp;#010 This method is called by ${isc.DocUtils.linkForRef('method:Canvas.init')} when a component is create()d.  When&amp;#010 overriding this method, You must call the superClass initWidget implementation, like&amp;#010 so:&amp;#010 &lt;pre&gt;&amp;#010    this.Super(&quot;initWidget&quot;, arguments);&amp;#010 &lt;/pre&gt;&amp;#010 &lt;P&gt;&amp;#010 In general, if you are going to call functionality supported by your superclass (eg calling&amp;#010 addTab() when your superclass is a TabSet), call Super() first.  However, you can generally&amp;#010 assign properties to &lt;code&gt;this&lt;/code&gt; before calling Super() as a way of mimicing the&amp;#010 effect of the property being passed to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} on normal instance&amp;#010 construction.  For example, when subclassing a DynamicForm, you could set this.items to a&amp;#010 generated set of items before calling Super().&amp;#010 &lt;P&gt;&amp;#010 NOTE: child creation: if you are creating a component that auto-creates certain children (eg&amp;#010 a Window which creates a Header child), typical practice is to create those children&amp;#010 immediately before drawing by overriding draw().  This postpones work until it is really&amp;#010 necessary and avoids having to update children if settings are changed between creation and&amp;#010 draw().  Alternatively, if you prefer callers to directly manipulate auto-created children,&amp;#010 it's best to create them earlier in initWidget(), in order to allow manipulation before&amp;#010 draw.&amp;#010&amp;#010" name="initWidget" type="method" definingClass="class:Canvas">
<params description="All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}" optional="true" name="arguments 0-N" type="any">
</params>
</docItem>
<docItem ref="method:Button.select" flags="" description=" Select this object.&amp;#010" name="select" type="method" definingClass="class:Button">
    <groups>state</groups>
</docItem>
<docItem ref="method:Canvas.animateShow" flags="" description=" Show a canvas by growing it vertically to its fully drawn height over a period of time.&amp;#010 This method will not fire if the widget is already drawn and visible, or has overflow&amp;#010 other than &lt;code&gt;&quot;visible&quot;&lt;/code&gt; or &lt;code&gt;&quot;hidden&quot;&lt;/code&gt;.&amp;#010" name="animateShow" type="method" definingClass="class:Canvas">
<params description="How should the content of the window be revealed during the show.&amp;#010      Supported effects are &lt;ul&gt;&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;slide&quot;&lt;/code&gt; (content slides into view as the window grows)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;wipe&quot;&lt;/code&gt; (default: content is revealed as the window grows)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;fade&quot;&lt;/code&gt; (widget fades into view, from transparent &amp;#010                                              to widget's specified &lt;code&gt;opacity&lt;/code&gt; &amp;#010                                              - 100% by default)&amp;#010                      &lt;li&gt;&lt;code&gt;&quot;fly&quot;&lt;/code&gt; (widget is moved to its final position from&amp;#010                                              an offscreen position to the left)&amp;#010                      &lt;/ul&gt;&amp;#010      If passed an object, the &lt;code&gt;effect&lt;/code&gt; attribute of the object should be&amp;#010      one of the above effect strings - other attributes may be used to modify the effect&amp;#010      Currently this is only supported for &lt;code&gt;&quot;slide&quot;&lt;/code&gt; and &lt;code&gt;&quot;wipe&quot;&lt;/code&gt;&amp;#010      type animations where &lt;code&gt;&quot;startFrom&quot;&lt;/code&gt; may be specified as &lt;code&gt;&quot;T&quot;&lt;/code&gt;&amp;#010      [the animation will shift the widget down from the top] or &lt;code&gt;&quot;L&quot;&lt;/code&gt; [the&amp;#010      animation will grow the widget from the left side]." optional="false" name="effect" type="string | object">
</params>
<params description="When the show completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was&amp;#010                              cut short by a call to finishAnimation." optional="true" name="callback" type="callback">
</params>
<params description="Duration in ms of the animated show" optional="true" name="duration" type="number">
</params>
<params description="Optional acceleration effect function to                           bias the animation ratios" optional="true" name="acceleration" type="AnimationAcceleration">
</params>
    <examples>${isc.DocUtils.linkForExampleId('animateWipe')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="class:Progressbar" description="The Progressbar widget class extends the StretchImg class to implement image-based progress&amp;#010 bars (graphical bars whose lengths represent percentages, typically of task completion)." name="Progressbar" type="class">
    <methods>method:Progressbar.setPercentDone</methods>
    <methods>method:Progressbar.percentChanged</methods>
    <methods>method:Progressbar.getLength</methods>
    <methods>method:Progressbar.getBreadth</methods>
    <methods>method:Progressbar.setLength</methods>
    <methods>method:Progressbar.setBreadth</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:Progressbar.percentDone</attrs>
    <attrs>attr:Progressbar.length</attrs>
    <attrs>attr:Progressbar.breadth</attrs>
    <attrs>attr:Progressbar.vertical</attrs>
    <attrs>attr:Progressbar.src</attrs>
</docItem>
<docItem ref="attr:SubmitItem.title" flags="IRW" description="SubmitItems show a title of &lt;code&gt;&quot;Submit&quot;&lt;/code&gt; by default. May be overridden." name="title" valueType="String" defaultValue="&quot;Submit&quot;" type="attr" definingClass="class:SubmitItem">
</docItem>
<docItem ref="method:List.indexOf" flags="" description=" Return the position in the list of the first instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010&amp;#010" name="indexOf" type="method" definingClass="interface:List">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="earliest index to consider" optional="true" name="pos" type="number">
</params>
<params description="last index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:ImgSplitbar.vertical" flags="R" description="Is this split bar vertically orientated?&lt;br&gt;&amp;#010 When a &lt;code&gt;Splitbar&lt;/code&gt; is created by a layout to be the resizeBar for some&amp;#010 member of the layout, the &lt;code&gt;vertical&lt;/code&gt; property will be set to &lt;code&gt;true&lt;/code&gt;&amp;#010 if the layout is horizontal, meaning this resizeBar will be taller than it is wide, &amp;#010 and will allow horizontal resizing of the member." name="vertical" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ImgSplitbar">
</docItem>
<docItem ref="method:ListGrid.getFocusRow" flags="A" description=" Get the row that currently has keyboard focus.  Arrow key navigation moves relative to this&amp;#010 row.&amp;#010 &amp;#010" name="getFocusRow" type="method" definingClass="class:ListGrid">
<returns description="rowNum of the current focus row" type="Number"></returns>
</docItem>
<docItem ref="attr:FacetValue.id" flags="IRW" description="id of this facetValue.  Any string or number." name="id" valueType="String | Number" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem exampleConfig="TextItem.xml" ref="class:TextItem" description="FormItem for managing a text field." name="TextItem" type="class">
    <methods>method:TextItem.getHint</methods>
    <attrs>attr:TextItem.width</attrs>
    <attrs>attr:TextItem.height</attrs>
    <attrs>attr:TextItem.textBoxStyle</attrs>
    <attrs>attr:TextItem.length</attrs>
    <attrs>attr:TextItem.selectOnFocus</attrs>
    <examples>${isc.DocUtils.linkForExampleId('textItem')}</examples>
</docItem>
<docItem ref="attr:FormItem.textBoxStyle" flags="IRW" description="Base CSS class name for a form item's text box element.&amp;#010 &lt;P&gt;&amp;#010 NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations." name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.cellStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Selection.anySelected" flags="" description=" Whether at least one item is selected&amp;#010" name="anySelected" type="method" definingClass="class:Selection">
<returns description="true == at least one item is selected								false == nothing at all is selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:StatefulCanvas.setState" flags="A" description=" Set the 'state' of this object, this changes it's appearance.&amp;#010&amp;#010" name="setState" type="method" definingClass="class:StatefulCanvas">
<seeAlso ref="method:StatefulCanvas.setDisabled" description="which also affects state values."></seeAlso>
<params description="new state" optional="false" name="newState" type="State">
</params>
    <groups>state</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.showDetailFields" flags="IR" description="Whether to include fields marked &lt;code&gt;detail:true&lt;/code&gt; from this component's &amp;#010 &lt;code&gt;DataSource&lt;/code&gt;.&lt;br&gt;&amp;#010 Fields may also be included directly in this component's &lt;code&gt;fields&lt;/code&gt; array in&amp;#010 which case they will be present regardless of the &lt;code&gt;detail&lt;/code&gt; attribute.&amp;#010 &lt;p&gt;&amp;#010 When this property is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;ListGrid&lt;/code&gt;s will include all &amp;#010 detail fields, but they will be initially hidden. To override the visibility of&amp;#010 a detail field, use the standard ${isc.DocUtils.linkForRef('method:ListGrid.showField')}, ${isc.DocUtils.linkForRef('method:ListGrid.hideField')}&amp;#010 and ${isc.DocUtils.linkForRef('attr:ListGridField.showIf')} APIs.&lt;br&gt;&amp;#010 The user may show these fields via the default header context menu &amp;#010 (${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')}).&lt;br&gt;&amp;#010 Setting this property to false will completely exclude all detail fields from the list&amp;#010 grid's fields array." name="showDetailFields" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:Canvas.snapOffsetLeft" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined for this widget, this property can be used to&amp;#010 specify an offset in px for the left coordinate of this widget.&amp;#010 &lt;P&gt;&amp;#010 For example if &lt;code&gt;snapTo&lt;/code&gt; is specifed as &lt;code&gt;&quot;L&quot;&lt;/code&gt; and &amp;#010 &lt;code&gt;snapOffsetLeft&lt;/code&gt; is set to 6, this widget will be rendered 6px inside the left&amp;#010 edge of its parent or master element." name="snapOffsetLeft" valueType="integer" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapTo">
</seeAlso>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:FormItem.setTop" flags="A" description=" For a form with ${isc.DocUtils.linkForRef('attr:DynamicForm.itemLayout','itemLayout')}:&quot;absolute&quot; only, set the top&amp;#010 coordinate of this form item.&amp;#010 &lt;P&gt;&amp;#010 Causes the form to redraw.&amp;#010" name="setTop" type="method" definingClass="class:FormItem">
</docItem>
<docItem ref="attr:ListGrid.fixedRecordHeights" flags="IRWA" description="Should we vertically clip cell contents, or allow rows to expand vertically to show all&amp;#010 contents?&amp;#010 &lt;P&gt;&amp;#010 If we allow rows to expand, the row height as derived from&amp;#010 ${isc.DocUtils.linkForRef('method:GridRenderer.getRowHeight','getRowHeight()')} or the&amp;#010 default ${isc.DocUtils.linkForRef('attr:ListGrid.cellHeight')} is treated as a minimum." name="fixedRecordHeights" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('autofitValues')}</examples>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="group:webService" name="webService" type="group">
    <refs>method:WebService.getOperationNames</refs>
    <refs>method:WebService.getSchema</refs>
    <refs>method:WebService.callOperation</refs>
    <refs>method:WebService.getFetchDS</refs>
    <refs>method:WebService.setLocation</refs>
    <refs>class:WebService</refs>
    <refs>classMethod:WebService.get</refs>
    <refs>attr:SchemaSet.schemaNamespace</refs>
    <refs>attr:WebService.serviceNamespace</refs>
</docItem>
<docItem ref="method:TabSet.scrollForward" flags="" description=" If there is not enough space to display all the tabs in this tabSet, this method will &amp;#010 scroll the next tab (that first tab that is clipped at the end of the tab-bar) into view.&amp;#010" name="scrollForward" type="method" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:HTMLFlow.contentsURL" flags="IRW" description="URL to load content from.&amp;#010 &lt;P&gt;&amp;#010 If specified, this component will load HTML content from the specified URL when it is&amp;#010 first drawn.&amp;#010 &lt;p&gt;&amp;#010 This feature relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information." name="contentsURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:HTMLFlow">
    <setter>setContentsURL</setter>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="group:loadISCTag" title="&amp;lt;isomorphic:loadISC&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; HTML&amp;#010 &lt;p&gt;&amp;#010 This tag sets window.isomorphicDir and loads a default set of SmartClient modules and a&amp;#010 skin.  SmartClient modules are JavaScript files that need to be loaded via &amp;#010 &lt;code&gt;&amp;lt;SCRIPT SRC=/some/filename.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&lt;/code&gt;&amp;#010 blocks as part of the loading HTML page.  The modules themselves are stored in the&amp;#010 &lt;code&gt;[webroot]/isomorphic/system/modules&lt;/code&gt; directory.  A skin defines the look and feel of your&amp;#010 website and typically consists of at least one CSS file and some SmartClient UI Component&amp;#010 default overrides.  Skins are located in &lt;code&gt;[webroot]/isomorphic/skins&lt;/code&gt;.  Loading a skin&amp;#010 consists of loading the corresponding &lt;code&gt;load_skin.js&lt;/code&gt; - residing at top-level in&amp;#010 each skin directory.&amp;#010 &lt;p&gt;&amp;#010 The default set of modules loaded by this tag are: &lt;code&gt;Core, Foundation, Containers,&amp;#010 Grids, Forms, DataBinding&lt;/code&gt;.  The default skin is the &lt;code&gt;SmartClient&lt;/code&gt; skin.&amp;#010 So, for example inserting this into your JSP:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadISC/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Produces the following output:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;window.isomorphicDir='isomorphic/';&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Core.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Foundation.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Containers.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Grids.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Forms.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_DataBinding.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT src=isomorphic/skins/SmartClient/load_skin.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;skin&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Name of skin to load.  See the &lt;code&gt;[webroot]/isomorphic/skins&lt;/code&gt; directory&amp;#010 for a list of available skins.  You can also create your own skin by copying an existing&amp;#010 skin directory recursively, modifying anything you need, and using your new skin name as the&amp;#010 value here.&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: &quot;SmartClient&quot;&amp;#010 &lt;p&gt;&amp;#010 This selects a skin other than the default.  The value of this attribute is used as a path&amp;#010 component to &lt;code&gt;load_skin.js&lt;/code&gt;.  For example, specifying:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadISC skin=&quot;standard&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Produces the following &lt;code&gt;load_skin.js&lt;/code&gt; directive (in addition to all the standard&amp;#010 module loads):&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT src=isomorphic/skins/standard/load_skin.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;skinDir&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: path or URL up to and including the name of the skin&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: automatically derived from the value of the &lt;code&gt;skin&lt;/code&gt;&amp;#010 attribute&amp;#010 &lt;p&gt;&amp;#010 This attribute is usable in lieu of the &lt;code&gt;skin&lt;/code&gt; attribute and allows you to&amp;#010 specify the full path or URL to the directory containing the load_skin.js for your skin.&amp;#010 This allows you to move the directory containing the skin anywhere you want - including to a&amp;#010 completely different server.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;includeModules&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Comma separated list of modules to load.  See the&amp;#010 &lt;code&gt;[webroot]/isomorphic/system/modules&lt;/code&gt; directory for a list of loadable modules.  The&amp;#010 leading &quot;ISC_&quot; is optional, spaces after commas also optional.&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute allows you to specify SmartClient modules that you want to load in addition&amp;#010 to the default set of modules. For example, specifying:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadISC includeModules=&quot;Analytics&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Produces the following output:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;SCRIPT&amp;gt;window.isomorphicDir='isomorphic/';&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Core.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Foundation.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Containers.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Grids.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Forms.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_DataBinding.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT SRC=isomorphic/system/development/ISC_Analytics.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &amp;lt;SCRIPT src=isomorphic/skins/SmartClient/load_skin.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Notice the addition of the line that loads &lt;code&gt;ISC_Analytics.js&lt;/code&gt;.  SmartClient&amp;#010 modules must be loaded in a particular order and may have dependencies on other modules.&amp;#010 The &lt;code&gt;loadISC&lt;/code&gt; automatically resolves any missing dependencies and includes them&amp;#010 in the list of modules to load.  The list of modules to load is also automatically reordered&amp;#010 as required by this tag, so you can specify just the modules you care about, in any order,&amp;#010 and &lt;code&gt;loadISC&lt;/code&gt; will do the right thing.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;module&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: Comma separated list of modules to load.  See the&amp;#010 &lt;code&gt;[webroot]/isomorphic/system/modules&lt;/code&gt; directory for a list of loadable modules.  The&amp;#010 leading &quot;ISC_&quot; is optional, spaces after commas also optional.&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: &quot;Core, Foundation, Containers, Grids, Forms, DataBinding&quot;&amp;#010 &lt;p&gt;&amp;#010 Specifying this attribute overrides the default set of modules loaded by&amp;#010 &lt;code&gt;loadISC&lt;/code&gt; This is useful if you don't need to load all of the default modules on&amp;#010 a particular page.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;isomorphicURI&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: absolute or relative (from current URI) path to the&amp;#010 &lt;code&gt;isomorphic&lt;/code&gt; directory (by default located in webRoot).&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: automatically derived&amp;#010 &lt;p&gt;&amp;#010 This value sets &lt;code&gt;window.isomorphicDir&lt;/code&gt; and defines the base path to SmartClient&amp;#010 modules from the currently exectuing JSP.  By default, this value is automatically derived&amp;#010 and you don't need to override it.  Generally, an override is only required if you're&amp;#010 pointing multiple web application deployments at one base URL for cache coherence reasons.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;defer&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: boolean - acceptable values: &quot;true&quot; or &quot;false&quot;&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: &quot;false&quot;&amp;#010 &lt;p&gt;&amp;#010 This attribute applies only if you're using the optional Network Performance component of&amp;#010 SmartClient.  By default, the modules specified by the &lt;code&gt;loadISC&lt;/code&gt; tag are loaded&amp;#010 synchronously - that is, the the browser waits for each module to download before rendering&amp;#010 any HTML on the page.  Specifying &lt;code&gt;defer=&quot;true&quot;&lt;/code&gt; makes the module load&amp;#010 asynchronous.  In this mode, all the page content except the modules specified by&amp;#010 &lt;code&gt;loadISC&lt;/code&gt; is loaded and rendered first, and then the SmartClient modules are&amp;#010 loaded.  The asynchronous mode makes it possible to render some content and allow the user&amp;#010 to interact with the site immediately, while SmartClient modules load in the background.&amp;#010 &lt;p&gt;&amp;#010 Note that typically SmartClient modules are delivered compressed with cache headers, so the&amp;#010 download delay really only affects first time users of your site, those whose cached&amp;#010 versions have expired, or if you've upgraded your SmartClient module to a newer version that&amp;#010 the user has cached.&amp;#010 &lt;p&gt;&amp;#010 Using this directive is equivalent to calling ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;cacheOnly&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: boolean - acceptable values: &quot;true&quot; or &quot;false&quot;&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: &quot;false&quot;&amp;#010 &lt;p&gt;&amp;#010 This attribute applies only if you're using the optional Network Performance component of&amp;#010 SmartClient.  This works like &lt;code&gt;defer&lt;/code&gt; (see above), except that the modules are&amp;#010 only loaded into the browser cache, but not executed.  This means that when the specified&amp;#010 modules download, they'll be added to the browser cache, but will not be available to the&amp;#010 execution context of the page.  Actually executing the module code takes some processing&amp;#010 time on the client, whereas simply caching it does not.  The typical use case for this&amp;#010 directive is on some intermediary page before the user gets to a SmartClient-enabled page.&amp;#010 For example, you could include a cacheOnly &lt;code&gt;loadISC&lt;/code&gt; tag on a login page that&amp;#010 does not use SmartClient components, but protects a SmartClient-enabled application.  While&amp;#010 the user is typing in their credentials, the SmartClient modules will cache in the&amp;#010 background, then once the user logs in and is sent to a SmartClient-enabled page, the&amp;#010 modules are simply read from cache.&amp;#010 &lt;p&gt;&amp;#010 Using this directive is equivalent to calling ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')}.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;onload&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: String - any javascript code&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute applies only if you're using the optional Network Performance component of&amp;#010 SmartClient.  This attribute is usable in conjuction with &lt;code&gt;defer&lt;/code&gt; and&amp;#010 &lt;code&gt;cacheOnly&lt;/code&gt; attributes.  This attribute allows you to specify a callback to&amp;#010 execute when loading or caching of the specified modules has completed.  You can use this&amp;#010 to, for example, replace portions of the page with SmartClient components once SmartClient&amp;#010 has loaded.&amp;#010 &lt;p&gt;&amp;#010 The value of this attribute is passed as the &lt;code&gt;onload&lt;/code&gt; handler to the generated&amp;#010 ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} or ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')} call as appropriate." name="loadISCTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:DateChooser.baseButtonStyle" flags="IRW" description="Base css style applied to this picker's buttons. Will have &quot;Over&quot;, &quot;Selected&quot; and &quot;Down&quot;&amp;#010 suffix appended as the user interacts with buttons." name="baseButtonStyle" valueType="string" defaultValue="&quot;dateChooserButton&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="method:ValuesManager.getMember" flags="" description="  Returns a pointer to a specific member form.&amp;#010" name="getMember" type="method" definingClass="class:ValuesManager">
<params description="ID of the form to retrieve" optional="false" name="ID" type="string">
</params>
<returns description="member form (or null if unable to find a member with the  specified ID)." type="DynamicForm"></returns>
    <groups>members</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:StretchImgButton.actionType" description="Behavior on state changes -- BUTTON, RADIO or CHECKBOX" name="actionType" valueType="SelectionType" defaultValue="&quot;button&quot;" definingClass="class:StretchImgButton">
    <getter>getActionType</getter>
    <setter>setActionType</setter>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:OperationBinding.dataURL" flags="IR" description="URL to contact to fulfill DSRequests for this operationBinding.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;dataURL&lt;/code&gt; is typically set as DataSource.dataURL rather than on each individual&amp;#010 operationBinding.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;dataURL&lt;/code&gt; can be omitted for a DataSource using a Web Service&amp;#010 (${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is set)." name="dataURL" valueType="URL" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="class:XMLTools" description="Utility methods for dealing with XML elements, XML Schema, WSDL files, XSLT, and other&amp;#010 XML-related functionality." name="XMLTools" type="class">
    <classMethods>classMethod:XMLTools.loadXML</classMethods>
    <classMethods>classMethod:XMLTools.parseXML</classMethods>
    <classMethods>classMethod:XMLTools.nativeXMLAvailable</classMethods>
    <classMethods>classMethod:XMLTools.toJS</classMethods>
    <classMethods>classMethod:XMLTools.selectObjects</classMethods>
    <classMethods>classMethod:XMLTools.selectNodes</classMethods>
    <classMethods>classMethod:XMLTools.selectString</classMethods>
    <classMethods>classMethod:XMLTools.selectNumber</classMethods>
    <classMethods>classMethod:XMLTools.transformNodes</classMethods>
    <classMethods>classMethod:XMLTools.serializeToString</classMethods>
    <classMethods>classMethod:XMLTools.loadXMLSchema</classMethods>
    <classMethods>classMethod:XMLTools.loadWSDL</classMethods>
    <treeLocation>Client Reference/Data Binding</treeLocation>
</docItem>
<docItem ref="classAttr:Validator.notABoolean" flags="IRA" description="Default error message to display when standard &lt;code&gt;isBoolean&lt;/code&gt; type validator&amp;#010  returns false." name="notABoolean" valueType="string" defaultValue="&quot;Must be a true/false value&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ValuesManager.dataSource" flags="IRWA" description="Specifies a dataSource for this valuesManager.  This dataSource will then be used for&amp;#010 validation and client-server flow methods.  Can be specified as a dataSource object or&amp;#010 an identifier for the dataSource.&lt;br&gt;&amp;#010 Note that member forms should have the same dataSource applied to them to allow their&amp;#010 items to inherit properties from the DataSource fields." name="dataSource" valueType="DataSource | string" defaultValue="null" type="attr" definingClass="class:ValuesManager">
    <getter>getDataSource</getter>
    <setter>setDataSource</setter>
<seeAlso ref="method:ValuesManager.setDataSource">
</seeAlso>
<seeAlso ref="method:ValuesManager.getDataSource">
</seeAlso>
</docItem>
<docItem ref="method:FormItem.transformInput" flags="" description=" Called when a FormItem's value is about to change as the result of user interaction.  This&amp;#010 method fires after the user performed an action that would change the value of this field,&amp;#010 and allows the developer to modify / reformat the value before it gets validated / saved.&amp;#010 Fires before ${isc.DocUtils.linkForRef('method:FormItem.change')}.&lt;br&gt;&amp;#010 Return the reformatted value.&amp;#010&amp;#010" name="transformInput" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
<params description="The new value of the form item" optional="false" name="value" type="any">
</params>
<params description="The previous (current) value of the form item" optional="false" name="oldValue" type="any">
</params>
<returns description="The desired new value for the form item" type="any"></returns>
</docItem>
<docItem ref="attr:ServerObject.visibleMethods" flags="IR" description="When the ${isc.DocUtils.linkForRef('class:ServerObject')} appears in a .app.xml file (for RPC DMI), this property&amp;#010 specifies the list of methods on the ServerObject that are callable from the client.  See&amp;#010 the builtin.app.xml file in the /shared/app directory of the SDK for an example of a&amp;#010 visibleMethods declaration block." name="visibleMethods" valueType="List" defaultValue="null" type="attr" definingClass="class:ServerObject">
<seeAlso ref="class:DMI">
</seeAlso>
</docItem>
<docItem ref="method:Array.getValueMap" flags="" description=" Get a map of the form &lt;code&gt;{ item[idField] -&amp;gt; item[displayField] }&lt;/code&gt;, for all &amp;#010 items in the list.  Note that if more than one item has the same &lt;code&gt;idProperty&lt;/code&gt;, &amp;#010 the value for the later item in the list will clobber the value for the earlier item.&amp;#010&amp;#010" name="getValueMap" type="method" definingClass="object:Array">
<params description="Property to use as ID (data value) in the valueMap" optional="false" name="idField" type="string">
</params>
<params description="Property to use a display value in the valueMap" optional="false" name="displayField" type="string">
</params>
<returns description="valueMap object" type="object"></returns>
</docItem>
<docItem ref="type:TitleOrientation" description="Orientation of titles relative to the FormItem being labelled.  Can be set a the&amp;#010 DynamicForm level as a default, or on individual items." name="TitleOrientation" type="type">
<values value="&quot;left&quot;">
</values>
<values value="&quot;top&quot;">
</values>
<values value="&quot;right&quot;">
</values>
<seeAlso ref="attr:DynamicForm.titleOrientation">
</seeAlso>
<seeAlso ref="attr:FormItem.titleOrientation">
</seeAlso>
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:ListGrid.cellMouseDown" flags="" description=" Called when a cell receives a mousedown event.&amp;#010 &amp;#010" name="cellMouseDown" type="method" definingClass="class:ListGrid">
<params description="cell record as returned by getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Canvas.hoverVAlign" flags="IRW" description="If &lt;code&gt;this.showHover&lt;/code&gt; is true, this property can be used to customize the&amp;#010 vertical alignment of content in the hover canvas." name="hoverVAlign" valueType="VerticalAlignment" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="method:GridRenderer.cellClick" flags="A" description=" Called when a cell receives a click event.&amp;#010&amp;#010" name="cellClick" type="method" definingClass="class:GridRenderer">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:DynamicForm.clearValues" flags="" description=" Reset to default form values and clear errors&amp;#010" name="clearValues" type="method" definingClass="class:DynamicForm">
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ListGrid.singleCellValueProperty" flags="IRW" description="If &lt;code&gt;record[this.singleCellValueProperty]&lt;/code&gt; is set for some record, the &amp;#010 record will be displayed as a single cell spanning every column in the grid, with &amp;#010 contents set to the value of &lt;code&gt;record[this.singleCellValueProperty]&lt;/code&gt;." name="singleCellValueProperty" valueType="string" defaultValue="&quot;singleCellValue&quot;" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem exampleConfig="CheckboxItem.xml" ref="class:CheckboxItem" description="Checkbox form item, implemented with customizeable checkbox images" name="CheckboxItem" type="class">
    <methods>method:CheckboxItem.setValueMap</methods>
    <attrs>attr:CheckboxItem.titleStyle</attrs>
    <attrs>attr:CheckboxItem.textBoxStyle</attrs>
    <attrs>attr:CheckboxItem.showLabel</attrs>
    <attrs>attr:CheckboxItem.checkedImage</attrs>
    <attrs>attr:CheckboxItem.uncheckedImage</attrs>
    <attrs>attr:CheckboxItem.unsetImage</attrs>
    <attrs>attr:CheckboxItem.valueIconWidth</attrs>
    <attrs>attr:CheckboxItem.valueIconHeight</attrs>
    <attrs>attr:CheckboxItem.valueMap</attrs>
    <examples>${isc.DocUtils.linkForExampleId('checkboxItem')}</examples>
</docItem>
<docItem ref="method:Button.getState" flags="" description=" Return the state of this StatefulCanvas&amp;#010" name="getState" type="method" definingClass="class:Button">
<returns type="State">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="method:ListGrid.getHeaderContextMenuItems" flags="" description=" If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')} is &lt;code&gt;true&lt;/code&gt; this method returns&amp;#010 the menu items to be displayed in the default header context menu.&amp;#010 &lt;P&gt;&amp;#010 This method will be called each time the menu is displayed, allowing for dynamic content&amp;#010 depending on the current state of the fields.&amp;#010 &lt;P&gt;&amp;#010 The default set of menu items will includes menu items for freezing fields, showing and&amp;#010 hiding fields, grouping by fields, or other listGrid features &amp;#010&amp;#010" name="getHeaderContextMenuItems" type="method" definingClass="class:ListGrid">
<params description="Index of the field the user clicked in the    ${isc.DocUtils.linkForRef('attr:ListGrid.fields','fields')} array. &lt;b&gt;Note:&lt;/b&gt; if the user right-clicked the sorter button&amp;#010    this parameter will be &lt;code&gt;null&lt;/code&gt;." optional="true" name="fieldNum" type="integer">
</params>
<returns description="Array of MenuItem">
</returns>
    <groups>gridHeader</groups>
</docItem>
<docItem ref="method:ResultSet.getLength" flags="" description=" Return the total number of records that match the current filter criteria.&amp;#010 &lt;P&gt;&amp;#010 This length can only be known, even approximately, when the first results are retrieved from&amp;#010 the server.  Before then, the ResultSet returns a large length in order to encourage viewers&amp;#010 to ask for rows.  ${isc.DocUtils.linkForRef('method:ResultSet.lengthIsKnown','ResultSet.lengthIsKnown()')} can be called to&amp;#010 determine whether an actual length is known.&amp;#010&amp;#010" name="getLength" type="method" definingClass="class:ResultSet">
<returns description="number of items in the list" type="Number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:SelectOtherItem.selectOtherPrompt" flags="IR" description="Title to show in prompt for &quot;other&quot; value.&amp;#010 Note this is a dynamic string. JavaScript content is supported within &lt;code&gt;\${...}&lt;/code&gt;&amp;#010 tags, with local variables for &lt;code&gt;item&lt;/code&gt; (a pointer to this item), &lt;code&gt;value&lt;/code&gt;&amp;#010 a pointer to the currently selected item value" name="selectOtherPrompt" valueType="string" defaultValue="&quot;Other value for &lt;br&gt;${item.getTitle()}?&quot;" type="attr" definingClass="class:SelectOtherItem">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:ListGrid.formatCellValue" flags="" description=" Formatter to apply to values displayed within cells.&amp;#010 &lt;P&gt;&amp;#010 The value passed to this method is either the field value found in the cell record &amp;#010 or, if there are unsaved edits, the current user-entered value for the cell.&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; unsaved user edits may contain nulls, bad values or values of the wrong&amp;#010 type, so formatters used for editable data should be bulletproof.  For example, if you&amp;#010 have a function &quot;myNumberFormatter&quot; that should only be passed actual Numbers, you might&amp;#010 define formatCellValue like so:&amp;#010 &lt;pre&gt;&amp;#010     isc.isA.Number(parseInt(value)) ? &amp;#010            myNumberFormatter(parseInt(value)) : value&amp;#010 &lt;/pre&gt;&amp;#010 Note that this formatter will not be applied to the value displayed within editors for&amp;#010 cells - use &lt;code&gt;formatEditorValue&lt;/code&gt; to achieve this.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;formatCellValue&lt;/code&gt; is defined at the field level for some cell being edited,&amp;#010 the field level method will be used to format the edit value and this method will not&amp;#010 be called for that cell.&lt;br&gt;&amp;#010&amp;#010" name="formatCellValue" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.formatCellValue">
</seeAlso>
<seeAlso ref="method:ListGrid.formatEditorValue">
</seeAlso>
<params description="raw value for the cell being" optional="false" name="value" type="any">
</params>
<params description="Record object for the cell. Note: If this is a new row that has not been saved, in an &amp;#010   editable grid, it has no associated record object. In this case the edit values will&amp;#010   be passed in as this parameter." optional="false" name="record" type="ListGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<returns description="formatted value to display in the cell." type="string"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:PickList.pickListHeight" flags="IRW" description="Maximum height to show the pick list before it starts to scroll.&amp;#010 Note that by default the pickList will be sized to the height required by its content&amp;#010 so it will be taller when more rows are available as selectable options" name="pickListHeight" valueType="number" defaultValue="300" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="attr:CubeGrid.bodyStyleName" flags="IRW" description="CSS class for the CubeGrid body" name="bodyStyleName" valueType="CSSStyleName" defaultValue="&quot;cubeGridBody&quot;" type="attr" definingClass="class:CubeGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.getID" flags="" description="      When a widget instance is created, it is assigned a unique global identifier that can be&amp;#010      used to access the instance by name. The getID method returns this ID for a particular&amp;#010      instance. Global IDs are essential when you need to embed a widget reference in a string,&amp;#010      usually a string that will be evaluated in the future and/or in another object, where you&amp;#010      may not have access to a variable or parameter holding the widget's reference.&amp;#010&amp;#010" name="getID" type="method" definingClass="class:Canvas">
<returns description="global identifier for this canvas" type="string"></returns>
</docItem>
<docItem ref="method:GridRenderer.getEventRow" flags="" description=" Returns the row number of the most recent mouse event.&amp;#010" name="getEventRow" type="method" definingClass="class:GridRenderer">
<params description="optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event" optional="false" name="y" type="number">
</params>
<returns description="row number, or -2 if beyond last drawn row" type="number"></returns>
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.filterByCell" flags="IRWA" description="If we're showing the filterEditor (this.showFilterEditor is true), this property &amp;#010 determines whether this list should be filtered every time the user puts focus in&amp;#010 a different field in the filter editor." name="filterByCell" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:FormItem.showTitle" flags="IRW" description="Should we show a title cell for this formItem?&amp;#010 &lt;p&gt;&amp;#010 Note: the default value of this attribute is overridden by some subclasses." name="showTitle" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
    <groups>title</groups>
</docItem>
<docItem ref="attr:RowSpacerItem.endRow" flags="IRW" description="these items are in a row by themselves by default" name="endRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RowSpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ImgSplitbar.target" flags="R" description="When a &lt;code&gt;Splitbar&lt;/code&gt; is created by a layout, the &lt;code&gt;target&lt;/code&gt; property&amp;#010 of the Splitbar will be a pointer to the member for which it is acting as a resizeBar.&amp;#010 The Splitbar will be positioned next to its target, and will resize it on drag completion." name="target" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:ImgSplitbar">
</docItem>
<docItem ref="group:items" title="Form Items" description="Manipulating the items that belong to a form.&amp;#010 &lt;BR&gt;&lt;br&gt;&amp;#010 An item manages an atomic value (eg a String, Number, Date, etc) that appears as one of the&amp;#010 properties in the overall form's values.  Some items exist purely for layout or appearance&amp;#010 purposes (eg SpacerItem) and do not manage a value." name="items" type="group">
    <refs>method:DynamicForm.getItem</refs>
    <refs>method:DynamicForm.getField</refs>
    <refs>attr:DynamicForm.items</refs>
    <refs>attr:DynamicForm.fields</refs>
    <refs>attr:ToolbarItem.buttons</refs>
</docItem>
<docItem ref="attr:ImgButton.src" flags="IRW" description="The base filename for the image.&amp;#010 &lt;P&gt;&amp;#010 If &lt;code&gt;img.state&lt;/code&gt; is set, it's value will be appended to the URL before the&amp;#010 file extension.  &amp;#010 &lt;P&gt;&amp;#010 For example, given an &lt;code&gt;src&lt;/code&gt; of &quot;findIcon.gif&quot; and a state of&amp;#010 &quot;Disabled&quot;, the resulting image name would be &quot;findIcon_Disabled.gif&quot;.  Compound states&amp;#010 such as &quot;Selected&quot;, &quot;Focused&quot; and &quot;Over&quot; or &quot;Down&quot; will have an intervening underscore,&amp;#010 resulting in, for example, &lt;code&gt;&quot;findIcon_Selected_Down.gif&quot;&lt;/code&gt;." name="src" valueType="SCImgURL" defaultValue="&quot;[SKIN]/ImgButton/button.png&quot;" type="attr" definingClass="class:ImgButton">
    <examples>${isc.DocUtils.linkForExampleId('buttonAppearance')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Page.getSkinImgDir" flags="" description="		Return the directory for a skin image.&amp;#010&amp;#010" name="getSkinImgDir" type="classMethod" definingClass="class:Page">
<params description="Partial URL (relative to Page._skinDir) where the image lives.										If not supplied, will use &quot;images/&quot;" optional="true" name="imgDir" type="URL">
</params>
<returns description="URL for page-specific images." type="string"></returns>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="method:ImgButton.getState" flags="" description=" Return the state of this StatefulCanvas&amp;#010" name="getState" type="method" definingClass="class:ImgButton">
<returns type="State">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="attr:DetailViewer.dateFormatter" flags="IR" description="Display format to use for fields specified as type 'date'.  Default is to use the&amp;#010 system-wide default normal date format, configured via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to &amp;#010 change the format used by this detailViewer." name="dateFormatter" valueType="DateDisplayFormat" defaultValue="null" type="attr" definingClass="class:DetailViewer">
</docItem>
<docItem ref="attr:Layout.layoutRightMargin" flags="IRW" description="Space outside of all members, on the right-hand side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;setLayoutMargin()&lt;/code&gt; if changed on the fly." name="layoutRightMargin" valueType="integer" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="method:SectionStack.getSections" flags="" description="&amp;#010 Returns a list of all sectionIDs in the order in which they appear in the SectionStack.&amp;#010&amp;#010" name="getSections" type="method" definingClass="class:SectionStack">
<returns description="list of all sectionIDs in the order in which they appear in the SectionStack." type="List"></returns>
</docItem>
<docItem ref="class:DOMGrid" description="Provides a tree view of any DOM-compliant structure, such as an XML or HTML document." name="DOMGrid" type="class">
    <methods>method:DOMGrid.setRootElement</methods>
    <treeLocation>Client Reference/Grids</treeLocation>
    <attrs>attr:DOMGrid.rootElement</attrs>
</docItem>
<docItem ref="method:ListGrid.removeData" flags="" description=" Perform a DataSource &quot;remove&quot; operation to remove records from this component's&amp;#010 DataSource.&amp;#010&amp;#010" name="removeData" type="method" definingClass="class:ListGrid">
<params description="primary key values of record to delete,                                           (or complete record)" optional="false" name="data" type="Object">
</params>
<params description="method to call on operation completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                          that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <examples>${isc.DocUtils.linkForExampleId('databoundRemove')}</examples>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:CubeGrid.valueProperty" flags="IR" description="Name of the property in a cell record that holds the cell value." name="valueProperty" valueType="id" defaultValue="&quot;_value&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:SliderItem.defaultValue" flags="IRW" description="Default value for this sliderItems is 1." name="defaultValue" valueType="integer" defaultValue="1" type="attr" definingClass="class:SliderItem">
</docItem>
<docItem ref="attr:Splitbar.canDrag" flags="IRW" description="&lt;code&gt;canDrag&lt;/code&gt; set to true to allow dragging of the split bar. Dragging the&amp;#010 Splitbar will resize it's ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}" name="canDrag" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Splitbar">
</docItem>
<docItem ref="attr:Slider.stepPercent" flags="IRW" description="The percentage of the total slider that constitutes one discrete step. The slider will move&amp;#010 one step when the appropriate arrow key is pressed." name="stepPercent" valueType="float" defaultValue="5" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="method:ListGrid.getEventColumn" flags="" description=" Returns the column number of the most recent mouse event.&amp;#010" name="getEventColumn" type="method" definingClass="class:ListGrid">
<params description="optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event" optional="false" name="x" type="number">
</params>
<returns description="column number, or -2 if beyond last drawn column" type="number"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:TreeGrid.loadDataOnDemand" flags="IRW" description="For databound treeGrid instances, should the entire tree of data be loaded on initial &amp;#010 fetch, or should folders load their children as they are opened.&lt;br&gt;&amp;#010 If unset the default ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand')} setting will be used." name="loadDataOnDemand" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TreeGrid">
    <examples>${isc.DocUtils.linkForExampleId('initialData')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="classMethod:isA.Number" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a Number object?&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010	NOTE: this returns false if &lt;code&gt;object&lt;/code&gt; is an invalid number (&lt;code&gt;isNaN(object) == true&lt;/code&gt;)&amp;#010&amp;#010" name="Number" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Number" type="boolean"></returns>
</docItem>
<docItem ref="attr:ListGrid.originalData" flags="R" description="When grouped, a copy of the original ungrouped data." name="originalData" valueType="List of ListGridRecord" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="method:Date.toDateStamp" flags="" description="			Return this date in the format:&amp;#010				&lt;code&gt;&lt;i&gt;YYYYMMDD&lt;/i&gt;T&lt;i&gt;HHMMSS&lt;/i&gt;[Z]&lt;/code&gt;&amp;#010" name="toDateStamp" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:StretchImgButton.isSelected" flags="" description=" Find out if this object is selected&amp;#010" name="isSelected" type="method" definingClass="class:StretchImgButton">
<returns type="boolean">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="attr:TreeNode.children" flags="IRW" description="For trees with the modelType &quot;children&quot;, this property specifies the children of this&amp;#010 TreeNode.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}" name="children" valueType="List of TreeNode" defaultValue="null" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:Tree.modelType">
</seeAlso>
<seeAlso ref="attr:Tree.childrenProperty">
</seeAlso>
</docItem>
<docItem ref="attr:SelectItem.showOver" flags="IRWA" description="When the user rolls over the select item, should the pickButton display it's &amp;#010 &lt;code&gt;Over&lt;/code&gt; state?" name="showOver" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="attr:TextAreaItem.selectOnFocus" flags="IRW" description="If this property is set to true, whenever this item is given focus programmatically &amp;#010 (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.&lt;br&gt;&amp;#010 If false, the selection is not modified on focus - any previous selection within the&amp;#010 item will be restored.&lt;br&gt;&amp;#010 If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.selectOnFocus')}" name="selectOnFocus" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TextAreaItem">
    <groups>focus</groups>
</docItem>
<docItem ref="attr:ListGrid.editFailedBaseStyle" flags="IRWA" description="A base name for the CSS class applied to cells when editing has failed.&lt;br&gt;&amp;#010  If this listGrid is editable, this style will be applied to any edited cells for which&amp;#010  validation failed.&lt;br&gt;&amp;#010  As with the default 'baseStyle' property, this style will have &quot;Dark&quot;, &quot;Over&quot;, &quot;Selected&quot;, &amp;#010  or &quot;Disabled&quot; appended to it according to the state of the cell.&lt;br&gt;&amp;#010 If null, cells for which editing has failed will be rendered using the normal base style&amp;#010 classNames, but with custom CSSText applied as derived from &lt;code&gt;this.editFailedCSSText&lt;/code&gt;" name="editFailedBaseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.baseStyle">
</seeAlso>
<seeAlso ref="attr:ListGrid.editFailedCSSText">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.showContextMenu" flags="A" description=" Executed when the right mouse button is clicked.  The default implementation of&amp;#010 this method auto-creates a ${isc.DocUtils.linkForRef('class:Menu')} from the ${isc.DocUtils.linkForRef('attr:Canvas.contextMenu')} property on&amp;#010 this component and then calls ${isc.DocUtils.linkForRef('method:Menu.showContextMenu')} on it to show it.&amp;#010 &lt;p&gt;&amp;#010 If you want to show a standard context menu, you can simply define your Menu and set it as the&amp;#010 contextMenu property on your component - you do not need to override this method.&amp;#010 &lt;p&gt;&amp;#010 If you want to do some other processing before showing a menu or do something else entirely, then&amp;#010 you should override this method.  Note that the return value from this method controls whether or&amp;#010 not the native browser context menu is shown.&amp;#010 &amp;#010" name="showContextMenu" type="method" platformNotes="On the Mac platform, context menu functionality may be triggered by &lt;code&gt;Command+click&lt;/code&gt;&lt;br&gt;&amp;#010 On the Opera browser, context menu functionality may be triggered by &lt;code&gt;Shift+Ctrl+click&lt;/code&gt;" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.contextMenu">
</seeAlso>
<seeAlso ref="method:Menu.showContextMenu">
</seeAlso>
<seeAlso ref="method:Canvas.hideContextMenu">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false == don't show native context menu, true == show native context menu" type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="classMethod:isc.showPrompt" flags="" description="&amp;#010	Method available on the isc object to show a modal prompt to the user.&amp;#010  This method will display the message using the Dialog.Prompt singleton object.&lt;br&gt;&amp;#010  Note: if this prompt is to be shown to the user during some slow JavaScript logic, we &amp;#010  advise calling this method, then using ${isc.DocUtils.linkForRef('method:Class.delayCall')} or ${isc.DocUtils.linkForRef('classMethod:Timer.setTimeout')}&amp;#010  to kick off the slow logic in a separate thread. This ensures that the prompt is showing&amp;#010  before the lengthy execution begins.&amp;#010  &amp;#010&amp;#010" name="showPrompt" type="classMethod" definingClass="class:isc">
<seeAlso ref="classAttr:Dialog.Prompt">
</seeAlso>
<params description="message to display" optional="false" name="message" type="string">
</params>
<params description="additional properties for the Dialog, applied before                                       the Dialog is shown" optional="true" name="properties" type="object">
</params>
    <groups>Prompting</groups>
</docItem>
<docItem ref="attr:DataSourceField.valueMap" flags="IR" description="A valueMap is a set of legal values for a field.&amp;#010 &lt;p&gt;&amp;#010 The valueMap can be specified as either an Array of legal values, or as an Object &amp;#010 where each property maps a stored value to a user-displayable value.&amp;#010 &lt;p&gt;&amp;#010 To enforce that a field should be constrained to only the values in the valueMap, either&amp;#010 declare ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} as &quot;enum&quot;, or use an&amp;#010 ${isc.DocUtils.linkForRef('classAttr:ValidatorTypes.isOneOf','isOneOf validator')} with explicitly listed values.  Otherwise,&amp;#010 although a normal ${isc.DocUtils.linkForRef('class:SelectItem')} control will only allow values from the valueMap to be&amp;#010 entered, other controls such as a ${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')} will allow other values &amp;#010 to be entered.&amp;#010 &lt;p&gt;&amp;#010 In XML, a valueMap that specifies only a list of legal values is specified as follows:&amp;#010 &lt;pre&gt;&amp;#010   &amp;lt;valueMap&amp;gt;&amp;#010   	&amp;lt;value&amp;gt;Pens &amp;amp; Pencils&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value&amp;gt;Stationery&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value&amp;gt;Computer Products&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value&amp;gt;Furniture&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value&amp;gt;Misc&amp;lt;/value&amp;gt;&amp;#010   &amp;lt;/valueMap&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 A ValueMap that specifies stored values mapped to user-visible values is specified as&amp;#010 follows:&amp;#010 &lt;pre&gt;&amp;#010   &amp;lt;valueMap&amp;gt;&amp;#010   	&amp;lt;value ID=&quot;1&quot;&amp;gt;Pens &amp;amp; Pencils&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value ID=&quot;2&quot;&amp;gt;Stationery&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value ID=&quot;3&quot;&amp;gt;Computer Products&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value ID=&quot;4&quot;&amp;gt;Furniture&amp;lt;/value&amp;gt;&amp;#010   	&amp;lt;value ID=&quot;5&quot;&amp;gt;Misc&amp;lt;/value&amp;gt;&amp;#010   &amp;lt;/valueMap&amp;gt;&amp;#010 &lt;/pre&gt;" name="valueMap" valueType="ValueMap" defaultValue="null" type="attr" definingClass="class:DataSourceField">
    <groups>dataType</groups>
</docItem>
<docItem ref="attr:RPCRequest.httpMethod" flags="IRW" description="Selects the HTTP method that will be used for the request.  Valid values are &quot;POST&quot; and &quot;GET&quot;." name="httpMethod" valueType="String" defaultValue="&quot;POST&quot;" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="attr:CheckboxItem.checkedImage" flags="IRW" description="URL for the image to display when this checkbox is selected, or checked.&amp;#010 This is the base image name - if &lt;code&gt;showValueIconOver&lt;/code&gt; et al are set, the&amp;#010 state (&lt;code&gt;&quot;Over&quot;&lt;/code&gt;, &lt;code&gt;&quot;Down&quot;&lt;/code&gt; and &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt;) will be&amp;#010 added to this name as the user intereacts with the checkbox, as well as the &amp;#010 &lt;code&gt;&quot;.gif&quot;&lt;/code&gt; extension" name="checkedImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]/DynamicForm/checked.gif&quot;" type="attr" definingClass="class:CheckboxItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:TreeGrid.canReorderRecords" flags="IRWA" description="Indicates whether records can be reordered by dragging within this listGrid." name="canReorderRecords" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeNode.canDrag">
</seeAlso>
<seeAlso ref="attr:TreeNode.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('dragReparent')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Button.setSelected" flags="" description=" Select this object.&amp;#010" name="setSelected" type="method" definingClass="class:Button">
    <groups>state</groups>
</docItem>
<docItem ref="group:menuIcons" name="menuIcons" type="group">
    <refs>attr:MenuItem.checked</refs>
    <refs>attr:MenuItem.icon</refs>
    <refs>attr:MenuItem.iconWidth</refs>
    <refs>attr:MenuItem.iconHeight</refs>
</docItem>
<docItem ref="method:Tree.closeFolder" flags="" description="&amp;#010 Closes a folder&amp;#010&amp;#010" name="closeFolder" type="method" definingClass="class:Tree">
<params description="folder to close" optional="false" name="node" type="TreeNode">
</params>
</docItem>
<docItem ref="attr:Window.headerControls" flags="IR" description="Array of members to show in the Window header.  &amp;#010 &lt;P&gt;&amp;#010 The default value of &lt;code&gt;headerControls&lt;/code&gt; is an Array of Strings listing the&amp;#010 standard header controls in their default order:&amp;#010 &lt;pre&gt;&amp;#010    headerControls : [&quot;headerIcon&quot;, &quot;headerLabel&quot;, &amp;#010                      &quot;minimizeButton&quot;, &quot;maximizeButton&quot;, &quot;closeButton&quot;]&amp;#010 &lt;/pre&gt;&amp;#010 You can override &lt;code&gt;headerControls&lt;/code&gt; to change the order of standard controls in&amp;#010 the header.  You can also omit standard controls this way, although it more efficient to&amp;#010 use the related &quot;show&quot; property if available (eg ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton')}).  &amp;#010 &lt;P&gt;&amp;#010 By embedding a Canvas directly in this list you can add arbitrary additional controls to&amp;#010 the header, for example, an additional button (eg return to dock) or a DynamicForm with&amp;#010 various kinds of input controls.  Tip: custom controls need to set layoutAlign:&quot;center&quot;&amp;#010 to appear vertically centered." name="headerControls" valueType="Array of String" defaultValue="(see below)" type="attr" definingClass="class:Window">
    <examples>${isc.DocUtils.linkForExampleId('windowHeaderControls')}</examples>
</docItem>
<docItem ref="attr:HTMLFlow.evalScriptBlocks" flags="IR" description="If &lt;code&gt;evalScriptBlocks&lt;/code&gt; is true, HTMLFlow will pre-process the loaded HTML in order to&amp;#010 mimic how the HTML would execute if it were loaded as an independent page or loaded via an&amp;#010 IFRAME.  &amp;#010 &lt;P&gt;&amp;#010 This feature is intended to assist with migrating existing applications to SmartClient.&amp;#010 &lt;P&gt;&amp;#010 Note that, if evalScriptBlocks is false, &amp;lt;SCRIPT&amp;gt; blocks will still be detected and disabled&amp;#010 to avoid the inconsistent results across different browsers." name="evalScriptBlocks" valueType="boolean" defaultValue="true" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="class:RichTextItem" description="FormItem for rich text (HTML) editing. Makes use of a ${isc.DocUtils.linkForRef('class:RichTextEditor')} as the &amp;#010 editing interface." name="RichTextItem" type="class">
    <attrs>attr:RichTextItem.showTitle</attrs>
    <attrs>attr:RichTextItem.startRow</attrs>
    <attrs>attr:RichTextItem.endRow</attrs>
    <attrs>attr:RichTextItem.colSpan</attrs>
    <attrs>attr:RichTextItem.controlGroups</attrs>
</docItem>
<docItem ref="attr:RowSpacerItem.colSpan" flags="IRW" description="by default, separators span all remaining columns" name="colSpan" valueType="number" defaultValue="&quot;*&quot;" type="attr" definingClass="class:RowSpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Array.compareAscending" flags="A" description=" Compare two values for an ascending order sort, using locale-sensitive comparison.&amp;#010" name="compareAscending" type="classMethod" definingClass="object:Array">
<params description="first value to compare" optional="false" name="a" type="any">
</params>
<params description="second value to compare" optional="false" name="b" type="any">
</params>
<returns description="negative == second is larger, 0 == same value, positive == first is larger" type="number"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="method:ImgButton.setActionType" flags="" description=" Update the 'actionType' for this canvas (radio / checkbox / button)&amp;#010 If the canvas is currently selected, and the passed in actionType is 'button'&amp;#010 this method will deselect the canvas.&amp;#010" name="setActionType" type="method" definingClass="class:ImgButton">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="method:Canvas.isVisible" flags="" description=" Returns true if the widget is visible, taking all parents into account, so that a widget&amp;#010 which is not hidden might still report itself as not visible if it is within a hidden&amp;#010 parent.&amp;#010 &lt;P&gt;&amp;#010 NOTE: Undrawn widgets will report themselves as visible if they would be visible if drawn.&amp;#010&amp;#010" name="isVisible" type="method" definingClass="class:Canvas">
<returns description="true if the widget is visible, false otherwise" type="boolean"></returns>
    <groups>visibility</groups>
</docItem>
<docItem ref="method:DataBoundComponent.setDataSource" flags="" description=" Bind to a new DataSource.&amp;#010 &lt;P&gt;&amp;#010 Like passing the &quot;dataSource&quot; property on creation, binding to a DataSource means that the&amp;#010 component will use the DataSource to provide default data for its fields.&amp;#010 &lt;P&gt;&amp;#010 When binding to a new DataSource, if the component has any existing &quot;fields&quot; or has a dataset,&amp;#010 these will be discarded by default, since it is assumed the new DataSource may represent a&amp;#010 completely unrelated set of objects.  If the old &quot;fields&quot; are still relevant, pass them to&amp;#010 setDataSource().&amp;#010 &amp;#010" name="setDataSource" type="method" definingClass="interface:DataBoundComponent">
<params description="DataSource to bind to" optional="false" name="dataSource" type="ID or DataSource">
</params>
<params description="optional array of fields to use" optional="false" name="fields" type="Array of Fields">
</params>
    <examples>${isc.DocUtils.linkForExampleId('WSDLDataSource')}</examples>
</docItem>
<docItem ref="attr:DSRequest.startRow" flags="IR" description="Starting row of requested results, used only with fetch operations.&amp;#010 &lt;p&gt;&amp;#010 Note that startRow and endRow are zero-based, so startRow: 0, endRow: 1 is a request&amp;#010 for the first two records." name="startRow" valueType="number" defaultValue="0" type="attr" definingClass="class:DSRequest">
    <groups>paging</groups>
</docItem>
<docItem ref="attr:Canvas.resizeFrom" flags="IRWA" description="Allows resizing in certain edges or corners. The default value of null indicates that&amp;#010      the widget is resizable from any corner or edge. To restrict resizing to only certain&amp;#010      corners, set resizeFrom to an array of any of the values listed:&lt;br&gt;&amp;#010      T      top edge&lt;br&gt;&amp;#010      B      bottom edge&lt;br&gt;&amp;#010      L      left edge&lt;br&gt;&amp;#010      R      right edge&lt;br&gt;&amp;#010      TL     top-left corner&lt;br&gt;&amp;#010      TR     top-right corner&lt;br&gt;&amp;#010      BL     bottom-left corner&lt;br&gt;&amp;#010      BR     bottom-right corner&lt;br&gt;&amp;#010	    E.g. setting this property to a value of [&quot;R&quot;,&quot;TR&quot;,&quot;BR&quot;] would restrict resizing to&amp;#010      the right edge, top-right corner and bottom-right corner only" name="resizeFrom" valueType="array" defaultValue="null" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('dragResize')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="method:Array.dataChanged" flags="A" description=" Method called when this array changes in some way.  Observe the method to react to changes in&amp;#010 this list.&amp;#010 &lt;P&gt;&amp;#010 Note: dataChanged() will only fire when items are added, removed or rearranged.  If a list&amp;#010 contains objects, dataChanged() will not fire if changes are made to objects within the list&amp;#010 without changing their position within the list.  If an observer of dataChanged() needs to react&amp;#010 to such a change, you can manually fire dataChanged() by simply calling it.&amp;#010 &lt;P&gt;&amp;#010 Note: may be called multiple times as the result of a multi-item add or remove, etc.&amp;#010&amp;#010" name="dataChanged" type="method" definingClass="object:Array">
    <groups>modification</groups>
</docItem>
<docItem ref="type:Orientation" name="Orientation" type="type">
<values description="members laid out vertically" value="Layout.VERTICAL"></values>
<values description="members laid out horizontally" value="Layout.HORIZONTAL"></values>
    <groups>orientation</groups>
</docItem>
<docItem ref="method:GridRenderer.getNearestRowToEvent" flags="" description="			Returns the nearest row to the event coordinates&amp;#010" name="getNearestRowToEvent" type="method" definingClass="class:GridRenderer">
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="method:SectionStack.removeSection" flags="" description="&amp;#010 Remove a section or set of sections from the SectionStack.  The removed sections' header&amp;#010 and items (if any) are automatically destroyed.&amp;#010&amp;#010" name="removeSection" type="method" definingClass="class:SectionStack">
<params description="Section(s) to remove.  For this                  parameter, you can pass the position of the section in the&amp;#010                  SectionStack, the ID of the section, or a List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
    <examples>${isc.DocUtils.linkForExampleId('sectionsAddAndRemove')}</examples>
</docItem>
<docItem ref="attr:ResultSet.dataSource" flags="IR" description="What ${isc.DocUtils.linkForRef('class:DataSource')} is this resultSet associated with?" name="dataSource" valueType="DataSource or ID" defaultValue="null" type="attr" definingClass="class:ResultSet">
</docItem>
<docItem ref="attr:Canvas.destroying" flags="RA" description="This property is set to true when the ${isc.DocUtils.linkForRef('method:Canvas.destroy')} method is called on a widget.&amp;#010 If this property is true, but ${isc.DocUtils.linkForRef('attr:Canvas.destroyed')} is not, this indicates the canvas is&amp;#010 in the process of being destroyed." name="destroying" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.destroy">
</seeAlso>
</docItem>
<docItem ref="method:CellSelection.selectCell" flags="" description="			Select a particular cell&amp;#010" name="selectCell" type="method" definingClass="class:CellSelection">
<params description="row index of cell to select" optional="false" name="rowNum" type="number">
</params>
<params description="column index of cell to select" optional="false" name="colNum" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="group:communication" name="communication" type="group">
    <refs>type:SendMethod</refs>
</docItem>
<docItem ref="attr:FormItem.errorCellClassName" deprecated="As of SmartClient version 5.5 deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.cellStyle')}" flags="IRW" description="CSS class for a form item's cell when a validation error is showing." name="errorCellClassName" valueType="CSSStyleName" defaultValue="&quot;formError&quot;" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:DataSource.supportsTextMatchStyle" flags="A" description=" Does this dataSource support the specified &quot;textMatchStyle&quot; when performing a filter&amp;#010 operation against a text field.&amp;#010" name="supportsTextMatchStyle" type="method" definingClass="class:DataSource">
<params description="textMatchStyle to check. If passed a null value, assume                                an exact match is being requested." optional="false" name="textMatchStyle" type="string">
</params>
</docItem>
<docItem ref="attr:PickTreeItem.dataSource" flags="IRA" description="If specified, the tree of possible options will be derived from the dataSource as a&amp;#010 ResultTree, rather than using this.valueTree.  Options can be loaded on demand or up&amp;#010 front according tp ${isc.DocUtils.linkForRef('attr:PickTreeItem.loadDataOnDemand')}." name="dataSource" valueType="datasource" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
</docItem>
<docItem ref="attr:StatefulCanvas.showDown" flags="IRW" description="Should we visibly change state when the mouse goes down in this object?" name="showDown" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem exampleConfig="DetailViewer.xml" type="class" ref="class:DetailViewer" description="Displays one or more records &quot;horizontally&quot; with one property per line." name="DetailViewer">
    <methods>method:DetailViewer.setData</methods>
    <methods>method:DetailViewer.viewSelectedData</methods>
    <treeLocation>Client Reference/Grids</treeLocation>
    <attrs>attr:DetailViewer.data</attrs>
    <attrs>attr:DetailViewer.fields</attrs>
    <attrs>attr:DetailViewer.fieldIdProperty</attrs>
    <attrs>attr:DetailViewer.recordsPerBlock</attrs>
    <attrs>attr:DetailViewer.blockSeparator</attrs>
    <attrs>attr:DetailViewer.showEmptyField</attrs>
    <attrs>attr:DetailViewer.emptyCellValue</attrs>
    <attrs>attr:DetailViewer.labelPrefix</attrs>
    <attrs>attr:DetailViewer.labelSuffix</attrs>
    <attrs>attr:DetailViewer.wrapLabel</attrs>
    <attrs>attr:DetailViewer.labelStyle</attrs>
    <attrs>attr:DetailViewer.cellStyle</attrs>
    <attrs>attr:DetailViewer.headerStyle</attrs>
    <attrs>attr:DetailViewer.separatorStyle</attrs>
    <attrs>attr:DetailViewer.dateFormatter</attrs>
    <attrs>attr:DetailViewer.showEmptyMessage</attrs>
    <attrs>attr:DetailViewer.emptyMessage</attrs>
    <attrs>attr:DetailViewer.emptyMessageStyle</attrs>
    <attrs>attr:DetailViewer.loadingMessage</attrs>
    <attrs>attr:DetailViewer.loadingMessageStyle</attrs>
    <implementsInterfaces>DataBoundComponent</implementsInterfaces>
</docItem>
<docItem ref="attr:ListGridField.editorIconHeight" flags="IRA" description="If this field is editable, this property will be passed to editors displayed for&amp;#010 cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconHeight')}.&lt;br&gt;&amp;#010 If this property unset, the iconHeight property from the editor can be picked up from &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.iconHeight')} instead." name="editorIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:GridRenderer.snapToCells" flags="IRW" description="Should drag-and-drop operations snap the dragged object into line with the nearest cell?" name="snapToCells" valueType="boolean" defaultValue="false" type="attr" definingClass="class:GridRenderer">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:ListGrid.emptyCellValue" flags="IRW" description="The value to display for cells whose value is null or the empty string after applying&amp;#010 formatCellValue and valueMap (if any).&amp;#010 &lt;p&gt;&amp;#010 This is the grid-wide attribute.  You may also set the emptyCellValue on a per-field basis." name="emptyCellValue" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridField.emptyCellValue">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('emptyValues')}</examples>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="method:DynamicForm.resetValues" flags="" description="&amp;#010 Same as ${isc.DocUtils.linkForRef('method:DynamicForm.reset')}.&amp;#010&amp;#010" name="resetValues" type="method" definingClass="class:DynamicForm">
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:FormItem.accessKey" flags="IRW" description="AccessKey - a keyboard shortcut to trigger a form item's default behavior.&lt;br&gt;&amp;#010      Note: Alt+ (or in Moz Firefox 2.0 and above, Shift+Alt+) the specified key will &amp;#010      trigger the form item's default behavior." name="accessKey" valueType="keyChar" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>focus</groups>
</docItem>
<docItem ref="attr:ListGridRecord.isSeparator" flags="IR" description="Default property name denoting a separator row.&lt;br&gt;&amp;#010 When set to &lt;code&gt;true&lt;/code&gt;, defines a horizontal separator in the listGrid&amp;#010 object. Typically this is specified as the only property of a record object, since a&amp;#010 record with &lt;code&gt;isSeparator:true&lt;/code&gt; will not display any values.&lt;br&gt;&amp;#010 Note: this attribute name is governed by ${isc.DocUtils.linkForRef('attr:ListGrid.isSeparatorProperty')}." name="isSeparator" valueType="boolean" defaultValue="null" type="attr" definingClass="object:ListGridRecord">
</docItem>
<docItem ref="attr:SelectItem.defaultValue" flags="IRW" description="Static default value for this SelectItem. To default to the first option use&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} instead." name="defaultValue" valueType="boolean" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="method:Date.toShortDate" flags="" description=" Returns the date as a formatted string using the format set up via the &amp;#010 &lt;code&gt;setShortDisplayFormat()&lt;/code&gt; method.&amp;#010" name="toShortDate" type="method" definingClass="class:Date">
<params description="Optional Format for the date returned" optional="false" name="format" type="DateDisplayFormat">
</params>
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="method:Menu.hideContextMenu" flags="" description=" Hide the context menu - alias for hide()&amp;#010" name="hideContextMenu" type="method" definingClass="class:Menu">
    <groups>visibility</groups>
</docItem>
<docItem ref="method:Menu.setItemEnabled" flags="" description="          Enables or disables the menu item according to the value of newState, and redraws&amp;#010          the menu if necessary. Returns true if there's a change in the enabled state.&amp;#010&amp;#010" name="setItemEnabled" type="method" definingClass="class:Menu">
<params description="pointer to (or number of) the item in question" optional="false" name="item" type="item or number">
</params>
<params description="true to enable the menu item, false to disable it" optional="false" name="newState" type="boolean">
</params>
<returns description="true if the enabled state was changed" type="boolean"></returns>
</docItem>
<docItem ref="method:Canvas.draw" flags="" description="      Draws the widget on the page.&amp;#010" name="draw" type="method" definingClass="class:Canvas">
<returns description="Pointer to this canvas.  Returned so statements like the following will						work:&lt;br&gt;&amp;#010                          var myCanvas = Canvas.newInstance({...}).draw();" type="canvas"></returns>
    <groups>drawing</groups>
</docItem>
<docItem ref="method:Canvas.getBottom" flags="" description=" Return the bottom coordinate of this object as rendered, relative to its enclosing context,&amp;#010 in pixels.&amp;#010&amp;#010" name="getBottom" type="method" definingClass="class:Canvas">
<returns description="bottom coordinate" type="number"></returns>
    <groups>positioning</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:Slider.showRange" flags="IRW" description="Indicates whether labels for the min and max values of the slider should be displayed. The&amp;#010 default positions for these labels are below the start/end of a horizontal slider, or to the&amp;#010 right of the start/end of a vertical slider." name="showRange" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.minValueLabel">
</seeAlso>
<seeAlso ref="attr:Slider.maxValueLabel">
</seeAlso>
</docItem>
<docItem ref="type:DateInputFormat" description="3 character string containing the &lt;code&gt;&quot;M&quot;&lt;/code&gt;, &lt;code&gt;&quot;D&quot;&lt;/code&gt; and &lt;code&gt;&quot;Y&quot;&lt;/code&gt;&amp;#010  characters to indicate the format of strings being parsed into Date instances via &amp;#010  &lt;code&gt;Date.parseInput()&lt;/code&gt;.&lt;br&gt;&amp;#010  As an example - an input format of &quot;MDY&quot; would parse &quot;01/02/1999&quot; to Jan 2nd 1999" name="DateInputFormat" type="type">
</docItem>
<docItem ref="class:Layout" description="A subclass of Canvas that automatically arranges other Canvases according to a layout policy.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 A Layout manages a set of &quot;member&quot; Canvases initialized via the &quot;members&quot; property.  Layouts&amp;#010 can have both &quot;members&quot;, which are managed by the Layout, and normal Canvas children, which&amp;#010 are unmanaged.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Rather than using the Layout class directly, use the HLayout, VLayout, HStack and VStack&amp;#010 classes, which are subclasses of Layout preconfigured for horizontal or vertical stacking,&amp;#010 with the &quot;fill&quot; (VLayout) or &quot;none&quot; (VStack) ${isc.DocUtils.linkForRef('type:LayoutPolicy','policies')} already set.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Layouts and Stacks may be nested to create arbitrarily complex layouts.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 To show a resizer bar after (to the right or bottom of) a layout member, set showResizeBar to&amp;#010 true on that member component (not on the HLayout or VLayout).  Resizer bars override&amp;#010 membersMargin spacing.&amp;#010 &lt;br&gt;&lt;br&gt; &amp;#010 Like other Canvas subclasses, Layout and Stack components may have % width and height&amp;#010 values. To create a dynamically-resizing layout that occupies the entire page (or entire&amp;#010 parent component), set width and height to &quot;100%&quot;." name="Layout" type="class">
    <methods>method:Layout.getMemberOffset</methods>
    <methods>method:Layout.setLayoutMargin</methods>
    <methods>method:Layout.getMemberDefaultBreadth</methods>
    <methods>method:Layout.getMemberSizes</methods>
    <methods>method:Layout.reflow</methods>
    <methods>method:Layout.reflowNow</methods>
    <methods>method:Layout.getMember</methods>
    <methods>method:Layout.getMemberNumber</methods>
    <methods>method:Layout.hasMember</methods>
    <methods>method:Layout.getMembers</methods>
    <methods>method:Layout.addMember</methods>
    <methods>method:Layout.addMembers</methods>
    <methods>method:Layout.removeMember</methods>
    <methods>method:Layout.removeMembers</methods>
    <methods>method:Layout.showMember</methods>
    <methods>method:Layout.hideMember</methods>
    <methods>method:Layout.reorderMember</methods>
    <methods>method:Layout.reorderMembers</methods>
    <methods>method:Layout.drop</methods>
    <methods>method:Layout.getDropPosition</methods>
    <methods>method:Layout.hideDropLine</methods>
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:Layout.members</attrs>
    <attrs>attr:Layout.overflow</attrs>
    <attrs>attr:Layout.orientation</attrs>
    <attrs>attr:Layout.vPolicy</attrs>
    <attrs>attr:Layout.hPolicy</attrs>
    <attrs>attr:Layout.enforcePolicy</attrs>
    <attrs>attr:Layout.defaultLayoutAlign</attrs>
    <attrs>attr:Layout.align</attrs>
    <attrs>attr:Layout.reverseOrder</attrs>
    <attrs>attr:Layout.paddingAsLayoutMargin</attrs>
    <attrs>attr:Layout.layoutMargin</attrs>
    <attrs>attr:Layout.layoutLeftMargin</attrs>
    <attrs>attr:Layout.layoutRightMargin</attrs>
    <attrs>attr:Layout.layoutTopMargin</attrs>
    <attrs>attr:Layout.layoutBottomMargin</attrs>
    <attrs>attr:Layout.membersMargin</attrs>
    <attrs>attr:Layout.leaveScrollbarGap</attrs>
    <attrs>attr:Layout.memberOverlap</attrs>
    <attrs>attr:Layout.resizeBarClass</attrs>
    <attrs>attr:Layout.resizeBarSize</attrs>
    <attrs>attr:Layout.animateMembers</attrs>
    <attrs>attr:Layout.animateMemberTime</attrs>
    <attrs>attr:Layout.canDropComponents</attrs>
    <attrs>attr:Layout.dropLineThickness</attrs>
    <attrs>attr:Layout.showDragPlaceHolder</attrs>
    <attrs>attr:Layout.placeHolderProperties</attrs>
    <attrs>attr:Layout.stackZIndex</attrs>
    <attrs>attr:Layout.managePercentBreadth</attrs>
    <attrs>attr:Layout.placeHolderDefaults</attrs>
    <attrs>attr:Layout.dropLine</attrs>
<seeAlso ref="type:LayoutPolicy" description="for available policies"></seeAlso>
<seeAlso ref="class:VLayout">
</seeAlso>
<seeAlso ref="class:HLayout">
</seeAlso>
<seeAlso ref="class:VStack">
</seeAlso>
<seeAlso ref="class:HStack">
</seeAlso>
<seeAlso ref="class:LayoutSpacer">
</seeAlso>
</docItem>
<docItem ref="attr:StaticTextItem.textBoxStyle" flags="IRW" description="Base CSS class for this item" name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;staticTextItem&quot;" type="attr" definingClass="class:StaticTextItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:FormItem.getDisplayFieldName" flags="" description=" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.&amp;#010 If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method&amp;#010 will return the title field for the &lt;code&gt;optionDataSource&lt;/code&gt;&amp;#010" name="getDisplayFieldName" type="method" definingClass="class:FormItem">
<returns description="display field name, or null" type="String"></returns>
</docItem>
<docItem ref="method:Canvas.handleHover" flags="A" description=" Handler fired on a delay when the user hovers the mouse over this hover-target.&amp;#010 Default implementation will fire &lt;code&gt;this.hover()&lt;/code&gt; (if defined), and handle &amp;#010 showing the hover canvas if &lt;code&gt;this.showHover&lt;/code&gt; is true.&amp;#010" name="handleHover" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canHover">
</seeAlso>
<seeAlso ref="attr:Canvas.showHover">
</seeAlso>
<seeAlso ref="method:Canvas.hover">
</seeAlso>
    <groups>hovers</groups>
</docItem>
<docItem ref="attr:NativeCheckboxItem.showLabel" flags="IRW" description="Should we should the label text next to the checkbox item." name="showLabel" valueType="boolean" defaultValue="true" type="attr" definingClass="class:NativeCheckboxItem">
</docItem>
<docItem ref="method:ValuesManager.showFieldErrors" flags="" description=" Method to explicitly show the latest set of validation errors present on some field &amp;#010 within this ValuesManager.&lt;br&gt;&amp;#010 If the field in question is present as a visible item in a member form, the form item&amp;#010 will be redrawn to display the error message(s).&amp;#010 Otherwise ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be fired to allow &amp;#010 custom handling of hidden errors.&amp;#010" name="showFieldErrors" type="method" definingClass="class:ValuesManager">
    <groups>errors</groups>
</docItem>
<docItem ref="attr:ImgButton.iconSize" flags="IR" description="Size in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;iconWidth&lt;/code&gt; and &lt;code&gt;iconHeight&lt;/code&gt; properties can be used to&amp;#010 configure width and height separately." name="iconSize" valueType="integer" defaultValue="16" type="attr" definingClass="class:ImgButton">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Chart.chartType" flags="IR" description="Type of chart to draw, see ${isc.DocUtils.linkForRef('type:ChartType')} for a list of known types." name="chartType" valueType="ChartType" defaultValue="&quot;Column&quot;" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="method:Canvas.addPeer" flags="" description="      Adds newPeer as a peer of this widget (also making it a child of this widget's parent, if&amp;#010      any), set up a named object reference (i.e., this[name]) to the new widget if name is&amp;#010      provided, and draw the peer if this widget has been drawn already.&lt;br&gt;&amp;#010      The widget to be added as a peer will be removed from its old master and/or parent, if any,&amp;#010      and it will be added as a child to the parent of this canvas (if any)&amp;#010" name="addPeer" type="method" definingClass="class:Canvas">
<params description="new peer widget to add" optional="false" name="newPeer" type="canvas">
</params>
<params description="name to assign to peer (eg: this[peer] == child)" optional="true" name="name" type="string">
</params>
<params description="if true, peer will not automatically be drawn (only                                  for advanced use)" optional="true" name="autoDraw" type="boolean">
</params>
<params description="if true, when draw is called on the master widget, the peer&amp;#010                                  will be drawn before the master" optional="true" name="preDraw" type="boolean">
</params>
<returns description="the new peer, or null if it couldn't be added" type="canvas"></returns>
    <groups>containment</groups>
</docItem>
<docItem ref="attr:Canvas.canDragScroll" flags="IRWA" description="If this Canvas is canAcceptDrop:true, when the user drags a droppable widget over&amp;#010      an edge of the widget, should we scroll to show the rest of the widget's content?&amp;#010      Returned from canvas.shouldDragScroll()." name="canDragScroll" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.shouldDragScroll">
</seeAlso>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:TreeGrid.folderDropImage" deprecated="as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}" flags="IRW" description="The filename of the icon displayed for a folder node that will accept drag-and-drop&amp;#010 data when the mouse is released." name="folderDropImage" valueType="String" defaultValue="null" type="attr" definingClass="class:TreeGrid">
</docItem>
<docItem ref="attr:SelectItem.pickButtonSrc" deprecated="As of SmartClient version 5.5, pickButtonSrc has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconSrc')}." flags="IRWA" description="Source for image to show for the pick button" name="pickButtonSrc" valueType="string" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="method:ImgButton.setAutoFit" flags="" description=" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn&amp;#010 autoFit on or off. When autoFit is set to &lt;code&gt;false&lt;/code&gt;, canvas will be resized to&amp;#010 it's previously specified size.&amp;#010" name="setAutoFit" type="method" definingClass="class:ImgButton">
<params description="New autoFit setting." optional="false" name="autoFit" type="boolean">
</params>
</docItem>
<docItem ref="group:sqlDataSource" title="SQL DataSources" description="For prototyping purposes, the ISC server supports basic SQL connectivity for DataSources&amp;#010 defined in XML.  Because the request processing flow for the built-in SQL engine is&amp;#010 identical to the flow used for &amp;#010 ${isc.DocUtils.linkForRef('group:serverDataIntegration','integrating with other Java storage engines')},&amp;#010 when your application grows past prototype stage you can switch to a different storage&amp;#010 engine without wasted work.&amp;#010 &lt;P&gt;&amp;#010 To use the built-in SQL engine, declare a ${isc.DocUtils.linkForRef('class:DataSource')} in XML format with&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.serverType')} set to &quot;sql&quot;, and place it in the shared dataSources directory&amp;#010 ([webroot]/shared/ds by default) in a file called &quot;[dataSourceId].ds.xml&quot;.&amp;#010 &lt;p&gt;&amp;#010 You can then use the ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')} to configure database access,&amp;#010 as well as to automatically create and populate a database table based on your DataSource.&amp;#010 By default, DataSources will use the &quot;default database&quot; from the admin console, however you&amp;#010 can set ${isc.DocUtils.linkForRef('attr:DataSource.dbName')} to the name of a specific database configuration you have&amp;#010 configured via the Admin Console.&amp;#010 &lt;P&gt;&amp;#010 The list of databases known to work with the the built-in SQL logic is as follows:&amp;#010 &lt;p&gt;&amp;#010 &lt;table class='normal'&gt;&amp;#010 &lt;tr&gt;&lt;td width=40&gt;&lt;/td&gt;&lt;td width=200&gt;&lt;i&gt;HSQLDB 1.7.x, 1.8.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;IBM DB2 8.x, 9.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;MS SQL Server 2000&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;MySQL 3.2.x, 4.0.x, 4.1.x, 5.0.x, 5.1.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Oracle 8.0.5, 8i, 9i, 10g&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;PostgreSQL 7.x, 8.x&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010 &lt;/table&gt;&amp;#010 &lt;p&gt;You will also need a JDBC driver for your specific database. Licensing restrictions&amp;#010 prevent us including any JDBC driver other than the one for HSQLDB.  However, you&amp;#010 can download these drivers for free from the vendors' websites.  If your specific database&amp;#010 server or version is not listed above, please go to the&amp;#010 &lt;a href=&quot;http://forums.smartclient.com&quot;&gt;SmartClient forums&lt;/a&gt; for assistance.&amp;#010 &lt;P&gt;&amp;#010 You can also connect to an existing database table - the ISC SQL engine simply generates a&amp;#010 DB table whose columns match the DataSource field names and types, so you can instead&amp;#010 declare a DataSource whose fields match an existing table.  To troubleshoot such an&amp;#010 integration, you can look at the generated SQL for both table creation and ${isc.DocUtils.linkForRef('class:DSRequest')}&amp;#010 handling in the server-side log.&amp;#010 &lt;P&gt;&amp;#010 Once you have your SQL DataSource connected to a table, in a default SDK installation,&amp;#010 DSRequests for your DataSource will be sent to the default&amp;#010 ${isc.DocUtils.linkForRef('classAttr:RPCManager.actionURL','actionURL')}, and hence handled automatically, without you having&amp;#010 to write any Java code, by the ${isc.DocUtils.linkForRef('group:iscInstall','IDACall servlet registered in web.xml')}.&amp;#010 IDACall is a very simple servlet that just calls the server-side method&amp;#010 dsRequest.execute() for all inbound requests.&amp;#010 &lt;P&gt;&amp;#010 If you need to customize how DSRequests are handled on the server, you can write your own&amp;#010 version of the IDACall servlet to dispatch requests, as described under ${isc.DocUtils.linkForRef('class:RPCManager')}&amp;#010 and exemplified by the&amp;#010 &lt;a href='/examples/server_integration/#customDataSourceIntegration' onclick=&quot;window.open('/examples/server_integration/#customDataSourceIntegration');return false;&quot;&gt;Custom DataSource Integration example&lt;/a&gt;.&amp;#010 This allows you add your own logic either before or after calling dsRequest.execute() &amp;#010 to invoke the normal behavior of the SQL engine.  This means you can implement:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; authenticated access (also see ${isc.DocUtils.linkForRef('group:relogin')})&amp;#010 &lt;li&gt; custom validation rules, via inspecting the inbound DSRequest and sending back a&amp;#010      DSResponse with errors set&amp;#010 &lt;li&gt; business rules such as user-based data visibility, by eg calling&amp;#010      dsRequest.setCriteria() to set certain fixed criteria on all requests&amp;#010 &lt;li&gt; side effects such as sending notifications mails after data is updated&amp;#010 &lt;li&gt; server-side formatting or other derived values such as totals, by retrieving the&amp;#010      default returned dataset via dsResponse.getData(), and updating it via&amp;#010      dsResponse.setData()&amp;#010 &lt;/ol&gt;&amp;#010 When your application grows past prototype stage and you switch to a different storage&amp;#010 engine, you should be able to reuse any logic that surrounds the dsRequest.execute() call,&amp;#010 simply replacing that dsRequest.execute() call with code that performs the dsRequest against&amp;#010 your own storage engine." name="sqlDataSource" type="group">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="method:Canvas.scrollToPercent" flags="" description="  Scroll this widget to some position specified as a percentage of scroll size in either &amp;#010 (or both) direction(s).&amp;#010&amp;#010" name="scrollToPercent" type="method" definingClass="class:Canvas">
<params description="Left Percentage position to scroll to                                         Will accept either a numeric percent value, or a &amp;#010                                        string like &quot;10%&quot;." optional="false" name="left" type="number | string">
</params>
<params description="Top Percentage position to scroll to                                        Will accept either a numeric percent value, or a &amp;#010                                       string like &quot;10%&quot;." optional="false" name="top" type="number | string">
</params>
    <groups>scrolling</groups>
</docItem>
<docItem ref="attr:ListGridField.editorIconWidth" flags="IRA" description="If this field is editable, this property will be passed to editors displayed for&amp;#010 cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}.&lt;br&gt;&amp;#010 If this property unset, the iconWidth property from the editor can be picked up from &amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.iconWidth')} instead." name="editorIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:RPCRequest.callbackParam" flags="IRW" description="For use only with the &lt;code&gt;scriptInclude&lt;/code&gt; transport, this attribute specifies the&amp;#010 name of the parameter from which the server expects to read the name of the JavaScript&amp;#010 callback function.&amp;#010 &lt;P&gt;&amp;#010 SmartClient will use the callback mechanism provided by the server, then call&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} normally.&amp;#010 &lt;p&gt;&amp;#010 This attribute is ignored by all other transports." name="callbackParam" valueType="String" defaultValue="&quot;callback&quot;" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="type:TEXTAREA_WRAP" name="TEXTAREA_WRAP" type="type">
<values description="don't allow wrapping at all" value="TextAreaItem.OFF"></values>
<values description="when the entered text reaches the edge of the text area,                                  wrap visibly but don't include line breaks in the textarea&amp;#010                                  value" value="TextAreaItem.SOFT"></values>
<values description="when the entered text reaches the edge of the text area,                                   insert a line break" value="TextAreaItem.HARD"></values>
</docItem>
<docItem ref="attr:Window.bodyDefaults" flags="IRWA" description="Default properties for the body of the Window&lt;br&gt;&amp;#010 You can change the class-level bodyDefaults for all Windows by changing this item&amp;#010 or set  instance.body to be another object of properties to override for your instance only" name="bodyDefaults" valueType="object" defaultValue="..." type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="method:Canvas.scrolled" flags="" description=" Notification that this component has just scrolled.  Use with&amp;#010 ${isc.DocUtils.linkForRef('method:Class.observe','observation')}.&amp;#010 &lt;P&gt;&amp;#010 Fires for both CSS and ${isc.DocUtils.linkForRef('class:Scrollbar','&quot;synthetic&quot; scrollbars')}.&amp;#010&amp;#010" name="scrolled" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="classMethod:isc.timeStamp" flags="" description="  Shorthand for &lt;code&gt;new Date().getTime();&lt;/code&gt;, this returns a timeStamp - a large number&amp;#010  which is incremented by 1 every millisecond.  Can be used to generate unique identifiers,&amp;#010  or perform timing tasks.&amp;#010&amp;#010" name="timeStamp" type="classMethod" definingClass="class:isc">
<returns description="a large integer (actually the number of milliseconds since 1/1/1970)" type="number"></returns>
</docItem>
<docItem ref="attr:ComboBoxItem.optionDataSource" flags="IRA" description="If set, this FormItem will derive data to show in the PickList by fetching records from&amp;#010 the specified &lt;code&gt;optionDataSource&lt;/code&gt;.  The fetched data will be used as a&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in&amp;#010 the loaded records, to derive one valueMap entry per record loaded from the&amp;#010 optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by&amp;#010 setting ${isc.DocUtils.linkForRef('attr:ComboBoxItem.pickListFields')}.&amp;#010 &lt;P&gt;&amp;#010 The data will be retrieved via a &quot;fetch&quot; operation on the DataSource, passing the &amp;#010 ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing&amp;#010 ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionFilterContext')} (if set) as DSRequest properties.&amp;#010 &lt;P&gt;&amp;#010 The fetch will be triggered when the pickList is first shown, or, you can set&amp;#010 ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is&amp;#010 first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually &amp;#010 trigger a fetch.&amp;#010 &lt;P&gt;&amp;#010 Data paging is automatically enabled if the optionDataSource supports it.  As the&amp;#010 pickList is scrolled by the user, requests for additional data will be automatically&amp;#010 issued.&amp;#010 &lt;P&gt;&amp;#010 For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,&amp;#010 with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.&amp;#010 If your dataSource is not capable of filtering results by search criteria (eg the&amp;#010 dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:ComboBoxItem.filterLocally')} to have the&amp;#010 entire dataset loaded up front and filtering performed in the browser.  This disables&amp;#010 data paging.&amp;#010 &lt;P&gt;&amp;#010 Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}&amp;#010 behaviors, eg, fetching individual display values before the pickList is shown.&amp;#010 &lt;P&gt;&amp;#010 Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is &lt;b&gt;also&lt;/b&gt; specified&amp;#010 for the field (either directly in the form item or as part of the field definition in&amp;#010 the dataSource), it will be preferred to the data derived from the optionDataSource for&amp;#010 whatever mappings are present." name="optionDataSource" valueType="DataSource | String" defaultValue="null" type="attr" definingClass="class:ComboBoxItem">
</docItem>
<docItem ref="attr:ListGrid.freezeOnLeftText" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the&amp;#010 title for the menu item to freeze fields on the left of the scrollable body." name="freezeOnLeftText" valueType="string" defaultValue="&quot;Freeze on left&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="classMethod:FileLoader.cacheStretchImgStates" flags="" description="&amp;#010 Caches a set of state stretch images derived from a base image.  This is useful for caching a set&amp;#010 of images for a single component.  For example this code:&amp;#010 &lt;pre&gt;&amp;#010 isc.FileLoader.cacheStretchImgStates(&quot;/isomorphic/skins/SmartClient/images/button/button.png&quot;,&amp;#010                                      &quot;Down,Over&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Will cause the following images to be cached:&amp;#010 &lt;pre&gt;&amp;#010 /isomorphic/skins/SmartClient/images/button/button_start.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_stretch.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_end.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Down_start.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Down_stretch.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Down_end.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Over_start.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Over_stretch.png&amp;#010 /isomorphic/skins/SmartClient/images/button/button_Over_end.png&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010" name="cacheStretchImgStates" type="classMethod" definingClass="class:FileLoader">
<seeAlso ref="classMethod:FileLoader.cacheImgStates">
</seeAlso>
<params description="List of base image URLs from which stateful names are to be                                    derived.  This can either be a&amp;#010                                    string with comma separated baseURLs or an Array of baseURLs." optional="false" name="baseURLs" type="String or Array">
</params>
<params description="List of states to load.  If none specified, The following                                    default list will be used:&amp;#010                                    &quot;Down,Over,Selected,Selected_Down,Selected_Over&quot;.  This can&amp;#010                                    either be a string with comma separated states or an Array&amp;#010                                    of states" optional="true" name="states" type="String or Array">
</params>
<params description="List of StretchImg pieces to cache.  If not specified, the                                    following list will be used: &quot;start,stretch,end&quot;.  This can&amp;#010                                    either be a string with comma separated piece names or an Array&amp;#010                                    of piece names." optional="true" name="pieces" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified URLs                                      has completed caching." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="method:Canvas.moveTo" flags="" description=" Moves the widget so that its top-left corner is at the specified coordinates. &amp;#010 &lt;P&gt;&amp;#010 This method will also accept a single parameter as an object array with left and top given&amp;#010 as properties.&amp;#010&amp;#010" name="moveTo" type="method" definingClass="class:Canvas">
<params description="x-coordinate to move to in LOCAL coordinates						                       or Object with left and top properties" optional="true" name="left" type="number or Object">
</params>
<params description="y-coordinate to move to in LOCAL coordinates" optional="true" name="top" type="number">
</params>
<returns description="whether the component actually moved" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('move')}</examples>
    <groups>positioning</groups>
</docItem>
<docItem ref="classAttr:Hover.hoverCanvasDefaults" flags="IRW" description="Defaults to apply to the Hover canvas shown when the user hovers over some widget.&amp;#010 By default this property is set to this object:&lt;br&gt;&lt;pre&gt;&amp;#010       { defaultWidth:100, &amp;#010         defaultHeight:1,&amp;#010         baseStyle:&quot;canvasHover&quot;,&amp;#010         align:&quot;left&quot;,&amp;#010         valign:&quot;top&quot;,&amp;#010         opacity:null&amp;#010        }&amp;#010 &lt;/pre&gt;&lt;br&gt;&amp;#010 Note that these properties can be overridden by individual widgets showing hovers, by&amp;#010 modifying ${isc.DocUtils.linkForRef('attr:Canvas.hoverWidth')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverHeight')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.hoverStyle')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverAlign')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverVAlign')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.hoverOpacity')}, and ${isc.DocUtils.linkForRef('attr:Canvas.hoverWrap')}." name="hoverCanvasDefaults" valueType="object" defaultValue="{...}" type="classAttr" definingClass="class:Hover">
</docItem>
<docItem ref="attr:FormItem.hintStyle" flags="IRW" description="CSS class for the &quot;hint&quot; string." name="hintStyle" valueType="string" defaultValue="&quot;formHint&quot;" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.hint">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CanvasItem.canvasConstructor" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:CanvasItem.canvas','this.canvas')} is not specified as a canvas instance at init&amp;#010 time, a canvas will be created instead. This property denotes the class of that widget&amp;#010 (Should be set to the name of a subclass of Canvas)." name="canvasConstructor" valueType="String" defaultValue="&quot;Canvas&quot;" type="attr" definingClass="class:CanvasItem">
</docItem>
<docItem ref="method:ListGrid.deselectRecords" flags="" description="&amp;#010  Deselect a list of records passed in explicitly, or by index.&amp;#010  [Synonym for selectRecords(records, false)]&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectRecords" type="method" definingClass="class:ListGrid">
<params description="records (or row numbers) to deselect" optional="false" name="records" type="Array of records | number">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:Button.showDisabled" flags="IRW" description="Should we visibly change state when disabled?" name="showDisabled" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Button">
    <examples>${isc.DocUtils.linkForExampleId('buttonStates')}</examples>
    <groups>state</groups>
</docItem>
<docItem ref="classMethod:XMLTools.toJS" flags="" description=" Translates an XML fragment to JavaScript collections.  This method works just like the&amp;#010 server-side method XML.toJS(Element, Writer):&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;  Elements become JavaScript Objects with each attribute becoming a property&amp;#010 &lt;li&gt;  Subelements with just text (no child elements or attributes) become properties&amp;#010 &lt;li&gt;  Subelements with child elements or attributes become sub objects&amp;#010 &lt;/ul&gt;&amp;#010 For example, if you pass the following fragment to this method:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;foo&amp;nbsp;bar=&quot;zoo&quot;&amp;gt;&amp;#010     &amp;nbsp;&amp;nbsp;&amp;lt;x&amp;gt;y&amp;lt;/x&amp;gt;&amp;#010 &amp;lt;/foo&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 You will get back the following JS structure: &amp;#010 &lt;pre&gt;&amp;#010 { bar:&quot;zoo&quot;, x:&quot;y&quot;}&amp;#010 &lt;/pre&gt;&amp;#010 All atomic property values will be of String type.  Use ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}&amp;#010 to do schema-driven XML to JS transform, which can produce correctly typed values.&amp;#010 &amp;#010" name="toJS" type="classMethod" definingClass="class:XMLTools">
<params description="The element to tranform to JS" optional="false" name="element" type="XMLElement or XMLDocument">
</params>
<returns description="The resulting JavaScript collection." type="Object"></returns>
    <examples>${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}</examples>
</docItem>
<docItem ref="attr:TreeGrid.canReparentNodes" flags="IRW" description="If set this property allows the user to reparent nodes by dragging them from their&amp;#010 current folder to a new folder.&lt;br&gt;&amp;#010 &lt;b&gt;Backcompat:&lt;/b&gt; For backwards compatibility with versions prior to SmartClient 1.5,&amp;#010 if this property is unset, but &lt;code&gt;this.canAcceptDroppedRecords&lt;/code&gt; is true, we&amp;#010 allow nodes to be dragged to different folders." name="canReparentNodes" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeNode.canDrag">
</seeAlso>
<seeAlso ref="attr:TreeNode.canAcceptDrop">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:TextAreaItem.iconVAlign" flags="IR" description="Align icons with the top edge of text area icons by default." name="iconVAlign" valueType="VerticalAlignment" defaultValue="Canvas.TOP" type="attr" definingClass="class:TextAreaItem">
    <groups>formIcons</groups>
</docItem>
<docItem ref="attr:RichTextEditor.value" flags="IRW" description="Initial value for the edit area.    Use &lt;code&gt;getValue()&lt;/code&gt; and &amp;#010 &lt;code&gt;setValue()&lt;/code&gt; to update at runtime." name="value" valueType="string" defaultValue="&quot;&quot;" type="attr" definingClass="class:RichTextEditor">
    <getter>getValue</getter>
    <setter>setValue</setter>
</docItem>
<docItem ref="attr:ViewLoader.loadingMessage" flags="IR" description="Message to show while the view is loading" name="loadingMessage" valueType="HTML" defaultValue="&quot;Loading View...&quot;" type="attr" definingClass="class:ViewLoader">
    <groups>viewLoading</groups>
</docItem>
<docItem ref="attr:Label.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:location" name="location" type="group">
    <refs>method:Tree.findById</refs>
    <refs>method:Tree.find</refs>
    <refs>attr:Window.autoCenter</refs>
</docItem>
<docItem ref="attr:TreeGrid.fields" flags="IRW" description="An array of field objects, specifying the order, layout, dynamic calculation, and&amp;#010 sorting behavior of each field in the treeGrid object. In TreeGrids, the fields&amp;#010 array specifies columns. Each field in the fields array is TreeGridField object.&amp;#010 &lt;p&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:TreeGrid.dataSource')} is also set, this value acts as a set of overrides as&amp;#010 explained in ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}." name="fields" valueType="Array of TreeGridField" defaultValue="null" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="object:TreeGridField">
</seeAlso>
    <groups>databinding</groups>
</docItem>
<docItem ref="method:Slider.valueChanged" flags="A" description=" This method is called when the slider value changes. This occurs when the setValue method is&amp;#010 called, or when the slider is moved. Observe this method to be notified when the slider value&amp;#010 changes.&amp;#010&amp;#010" name="valueChanged" type="method" definingClass="class:Slider">
<seeAlso ref="method:Class.observe">
</seeAlso>
<params description="the new value" optional="false" name="value" type="number">
</params>
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="type:KeyName" description="Strings to identify the various keys on the keyboard.&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;  For alpha keys, the single (uppercase) character value is used, such as &quot;Q&quot;&amp;#010 &lt;li&gt;  For Numeric keys, the number is used as in a single character string, like &quot;1&quot;&amp;#010 &lt;li&gt;  Function keys are identified as &lt;code&gt;&quot;f1&quot;&lt;/code&gt; - &lt;code&gt;&quot;f12&quot;&lt;/code&gt;&amp;#010 &lt;li&gt;  Non alpha-numeric character keys (such as the key for &quot;[&quot; / &quot;{&quot;) are identified by&amp;#010       their unmodified character value (the value obtained by hitting the key without &amp;#010       holding shift down), by default - exceptions are listed below.&amp;#010 &lt;li&gt;  Additional key names:&lt;br&gt;&amp;#010      - &lt;code&gt;Space&lt;/code&gt;&lt;br&gt;    &amp;#010      - &lt;code&gt;Tab&lt;/code&gt;&lt;br&gt;    &amp;#010      - &lt;code&gt;Enter&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Escape&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Backspace&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Insert&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Delete&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Arrow_Up&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Arrow_Down&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Arrow_Left&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Arrow_Right&lt;/code&gt;&lt;br&gt;            &amp;#010      - &lt;code&gt;Home&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;End&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Page_Up&lt;/code&gt;&lt;br&gt;    &amp;#010      - &lt;code&gt;Page_Down&lt;/code&gt;&lt;br&gt;   &amp;#010      - &lt;code&gt;Shift&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Ctrl&lt;/code&gt;&lt;br&gt;&amp;#010      - &lt;code&gt;Alt&lt;/code&gt;&amp;#010 &lt;/ul&gt;&amp;#010 [Note: Some keys may not be available for capture on every platform]" name="KeyName" type="type">
</docItem>
<docItem ref="attr:TreeGrid.canDragRecordsOut" flags="IRW" description="Indicates whether records can be dragged from this listGrid and dropped elsewhere." name="canDragRecordsOut" valueType="boolean" defaultValue="false" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeNode.canDrag">
</seeAlso>
<seeAlso ref="attr:TreeNode.canAcceptDrop">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('treeDropEvents')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:PickList.showOptionsFromDataSource" flags="IRWA" description="If this item is part of a databound form, and has a specified &lt;code&gt;valueMap&lt;/code&gt;&amp;#010 by default we show the valueMap options in the pickList for the item.&amp;#010 Setting this property to true will ensure that the options displayed in our pickList&amp;#010 are derived from the form's &lt;code&gt;dataSource&lt;/code&gt;." name="showOptionsFromDataSource" valueType="boolean" defaultValue="null" type="attr" definingClass="interface:PickList">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:StretchImg.vertical" flags="IRW" description="Indicates whether the list of images is drawn vertically from top to bottom (true),&amp;#010 or horizontally from left to right (false)." name="vertical" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StretchImg">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Img.size" flags="IR" description="Convenience for setting height and width to the same value, at init time only" name="size" valueType="Number" defaultValue="null" type="attr" definingClass="class:Img">
    <groups>sizing</groups>
</docItem>
<docItem ref="method:CubeGrid.facetValueOver" flags="" description="    StringMethod handler fired when mouseover occurs over a facetValues header button&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="facetValueOver" type="method" definingClass="class:CubeGrid">
<params description="facetValuesObject for the appropriate header button" optional="false" name="facetValues" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="method:DynamicForm.itemHoverHTML" flags="A" description="  Retrieves the HTML to display in a hover canvas when the user holds the mousepointer over&amp;#010  some item.  Return null to suppress the hover canvas altogether.&lt;br&gt;&amp;#010  Default implementation returns the prompt for the item if defined.&lt;br&gt;&amp;#010  Can be overridden via &lt;code&gt;item.itemHoverHTML()&lt;/code&gt;&amp;#010&amp;#010" name="itemHoverHTML" type="method" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.prompt">
</seeAlso>
<seeAlso ref="method:FormItem.itemHoverHTML">
</seeAlso>
<params description="Item the user is hovering over." optional="false" name="item" type="FormItem">
</params>
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:Array.slideRange" flags="A" description=" Slide a range of elements from start to end to position destination, moving all the other&amp;#010 elements to cover the gap.&amp;#010&amp;#010" name="slideRange" type="method" definingClass="object:Array">
<params description="start position" optional="false" name="start" type="number">
</params>
<params description="end position (exclusive, like substring() and slice())" optional="false" name="end" type="number">
</params>
<params description="destination position for the range" optional="false" name="destination" type="number">
</params>
</docItem>
<docItem ref="attr:Canvas.children" flags="IRWA" description="Array of all Canvii that are immediate children of this Canvas." name="children" valueType="Array of Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>containment</groups>
</docItem>
<docItem ref="method:ValuesManager.filterData" flags="" description=" Retrieve data that matches the provided criteria, and edit the first record returned.&lt;br&gt;&amp;#010 Differs from ${isc.DocUtils.linkForRef('method:DynamicForm.fetchData')} in that a case insensitive substring match&amp;#010 will be performed against the criteria to retrieve the data.&amp;#010 &amp;#010" name="filterData" type="method" definingClass="class:ValuesManager">
<params description="search criteria" optional="true" name="criteria" type="Criteria">
</params>
<params description="callback to invoke on completion" optional="true" name="callback" type="DSCallback">
</params>
<params description="additional properties to set on the DSRequest                                            that will be issued" optional="true" name="requestProperties" type="DSRequest">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="attr:DataSource.resultTreeClass" flags="IRA" description="Class for ResultTrees used by this datasource.  If null, defaults to using&amp;#010 ${isc.DocUtils.linkForRef('class:ResultTree')}.&amp;#010 &lt;P&gt;&amp;#010 This can be set to a custom subclass of ResultTree that, for example, hangs onto to extra&amp;#010 information necessary for integration with web services." name="resultTreeClass" valueType="Class Object" defaultValue="null" type="attr" definingClass="class:DataSource">
</docItem>
<docItem ref="group:visualBuilder" title="Visual Builder" description="The SmartClient Visual Builder tool, accessible from the SDK Explorer as Tools-&gt;Visual&amp;#010 Builder, is intended for:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; business analysts and others doing functional application design, who want to create&amp;#010 functional prototypes in a codeless, &quot;what you see is what you get&quot; environment&amp;#010 &lt;li&gt; developers new to SmartClient who want to get a basic familiarity with component&amp;#010 layout, component properties and SmartClient code structure&amp;#010 &lt;li&gt; developers building simple applications that can be completed entirely within Visual&amp;#010 Builder&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Using Visual Builder&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 Basic usage instructions are embedded in Visual Builder itself, in the &quot;About Visual&amp;#010 Builder&quot; pane.  Click on it to open it.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Visual Builder for Functional Design&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Visual Builder has several advantages over other tools typically used for functional design:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; Visual Builder allows simple drag and drop manipulation of components, form-based&amp;#010 editing of component properties, and simple connection of events to actions - all without&amp;#010 requiring any code to be written.  It is actually simpler to use than&amp;#010 DreamWeaver or other code-oriented prototyping tools&amp;#010 &lt;li&gt; because Visual Builder generates clean code, designs will not have to be converted to&amp;#010 another technology before development can proceed.  This reduces both effort and the&amp;#010 potential for miscommunication&amp;#010 &lt;li&gt; developers can add custom skinning, components with custom behaviors, and custom&amp;#010 DataSources with sample datasets to Visual Builder so that the design environment is an even&amp;#010 closer match to the final application.  This helps eliminate many types of unimplementable&amp;#010 designs &amp;#010 &lt;li&gt; because Visual Builder is built in SmartClient itself, Visual Builder is simply a &amp;#010 web page, and does not require installation.  Visual Builder can be deployed to &amp;#010 an internal network to allow teams with a mixture of technical and semi-technical &amp;#010 users to collaboratively build and share prototypes of SmartClient-based applications.  &amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Loading and Saving&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The &quot;File&quot; menu within Visual Builder allows screens to be saved and reloaded for further&amp;#010 editing.  Saved screens &lt;b&gt;can&lt;/b&gt; be edited outside of Visual Builder and successfully&amp;#010 reloaded, however, as with any design tool that provides a drag and drop, dialog-driven&amp;#010 approach to screen creation, Visual Builder cannot work with entirely free-form code.  In&amp;#010 particular, when a screen is loaded and then re-saved:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; any indenting or spacing changes are not preserved &amp;#010 &lt;li&gt; order of property or method defintions will revert to Visual Builder's default&amp;#010 &lt;li&gt; while method definitions on components are preserved, any code &lt;b&gt;outside of&lt;/b&gt;&amp;#010      component definitions will be dropped (in some cases adding such code will cause&amp;#010      loading to fail)&amp;#010 &lt;li&gt; each Canvas-based component will be output separately, in the order these components&amp;#010      appear in the project tree, deepest first&amp;#010 &lt;/ul&gt;&amp;#010 Generally speaking, screen definitions that you edit within Visual Builder should consist of&amp;#010 purely declarative code.  Rather than appearing in screen definitions, custom components and&amp;#010 JavaScript libraries should be added to Visual Builder itself via the customization&amp;#010 facilities described below.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Customizing Visual Builder&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The rest of this topic focuses on how Visual Builder can be customized and deployed by&amp;#010 developers to make it more effective as a functional design tool for a particular&amp;#010 organization.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Adding Custom DataSources to Visual Builder&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 DataSources placed in the project dataSources directory ([webroot]/shared/ds by default)&amp;#010 will be detected by Visual Builder whenever it is started, and appear in the DataSource&amp;#010 listing in the lower right-hand corner automatically.&amp;#010 &lt;P&gt;&amp;#010 If you have created a custom subclass of DataSource (eg, as a base class for several&amp;#010 DataSources that contact the same web service), you can use it with Visual Builder by:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; creating an XML version of the DataSource using the XML tag &amp;lt;DataSource&amp;gt; and the&amp;#010 &lt;code&gt;constructor&lt;/code&gt; property set to the name of your custom DataSource subclass (as&amp;#010 described ${isc.DocUtils.linkForRef('group:componentXML')} under the heading &lt;i&gt;Custom Components&lt;/i&gt;)&amp;#010 &lt;li&gt; modifying [webroot]/tools/visualBuilder/globalDependencies.xml to load the JavaScript&amp;#010 code for your custom DataSource class.  See examples in that file.&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Adding Custom Components to Visual Builder&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The Component Library on the right hand side of Visual Builder loads component definitions&amp;#010 from two XML files in the [webroot]/tools/visualBuilder directory: customComponents.xml and&amp;#010 defaultComponents.xml.  customComponents.xml is empty and is intended for developers to add&amp;#010 their own components.  defaultComponents.xml can also be customized, but the base version&amp;#010 will change between SmartClient releases.&amp;#010 &lt;P&gt;&amp;#010 As can be seen by looking at defaultComponents.xml, components are specified using a tree&amp;#010 structure similar to that shown in the &amp;#010 ${isc.DocUtils.linkForExampleId('treeLoadXML', 'tree XML loading example')}.  The properties that can be set on&amp;#010 nodes are:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; &lt;code&gt;className&lt;/code&gt;: name of the SmartClient Class on which ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} will be&amp;#010 called in order to construct the component.  &lt;code&gt;className&lt;/code&gt; can be omitted to create&amp;#010 a folder that cannot be dropped&amp;#010 &lt;li&gt; &lt;code&gt;title&lt;/code&gt;: title for the node&amp;#010 &lt;li&gt; &lt;code&gt;defaults&lt;/code&gt;: an Object specifying defaults to be passed to&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}.&amp;#010 For example, you could add an &quot;EditableGrid&quot; node by using &lt;code&gt;className:&quot;ListGrid&quot;&lt;/code&gt;&amp;#010 and specifying:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;defaults canEdit=&quot;true&quot;/&amp;gt;&lt;/pre&gt;&amp;#010 NOTE: if you set any defaults that are not Canvas properties, you need to provide explicit&amp;#010 type as documented under &lt;i&gt;Custom Properties&lt;/i&gt; for ${isc.DocUtils.linkForRef('group:componentXML')}.&amp;#010 &lt;li&gt; &lt;code&gt;children&lt;/code&gt;: components that should appear as children in the tree under this&amp;#010 node&amp;#010 &lt;li&gt; &lt;code&gt;icon&lt;/code&gt;: icon to show in the Visual Builder component tree (if desired)&amp;#010 &lt;li&gt; &lt;code&gt;iconWidth/Height/Size&lt;/code&gt;: dimensions of the icon in pixels (&quot;iconSize&quot; sets&amp;#010 both)&amp;#010 &lt;li&gt; &lt;code&gt;showDropIcon&lt;/code&gt;: for components that allow children, whether to show a&amp;#010 special drop icon on valid drop (like ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')}).&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 In order to use custom classes in Visual Builder, you must modify&amp;#010 &lt;code&gt;[webroot]/tools/visualBuilder/globalDependences.xml&lt;/code&gt; to include:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; the JavaScript class definition for the custom class (in other words, the&amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','defineClass()')} call)&amp;#010 &lt;li&gt; a ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for the custom component&amp;#010 &lt;/ul&gt;&amp;#010 See globalDependencies.xml for examples.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Component Schema and Visual Builder&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 When you provide ${isc.DocUtils.linkForRef('group:componentSchema','custom schema')} for a component, Visual Builder&amp;#010 uses that schema to drive component editing (Component Properties pane) and to drive drag&amp;#010 and drop screen building functionality.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Component Editing&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Newly declared fields will appear in the Component Editor in the &quot;Other&quot; category at the&amp;#010 bottom by default.  You can create your own category by simply setting field.group to the&amp;#010 name of a new group and using this on multiple custom fields.&amp;#010 &lt;P&gt;&amp;#010 The ComponentEditor will pick a FormItem for a custom field by the&amp;#010 ${isc.DocUtils.linkForRef('type:FormItemType','same rules')} used for ordinary databinding, including the ability to&amp;#010 set field.editorType to use a custom FormItem.&amp;#010 &lt;P&gt;&amp;#010 When the &quot;Apply&quot; button is clicked, Visual Builder will look for an appropriate &quot;setter&amp;#010 function&quot; for the custom field, for example, for a field named &quot;myProp&quot;, Visual Builder will&amp;#010 look for &quot;setMyProp&quot;.  The target component will also be ${isc.DocUtils.linkForRef('method:Canvas.redraw','redrawn')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Event -&gt; Action Bindings&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 The Component Properties pane contains an Events tab that allows you wire components events&amp;#010 to actions on any other component currently in the project.&amp;#010 &lt;P&gt;&amp;#010 Events are simply ${isc.DocUtils.linkForRef('group:stringMethods','StringMethods')} defined on the component.  In&amp;#010 order to be considered events, method definitions must have been added to the class via&amp;#010 ${isc.DocUtils.linkForRef('classMethod:Class.registerStringMethods')} and either be publicly documented SmartClient methods or,&amp;#010 for custom classes, have a methods definition in the ${isc.DocUtils.linkForRef('group:componentSchema','component&amp;#010 schema')}.&amp;#010 Examples of events are: ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} and ${isc.DocUtils.linkForRef('method:DynamicForm.itemChange')}.&amp;#010 &lt;P&gt;&amp;#010 Actions are methods on any component that have a method definition in the&amp;#010 ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} and specify action=&quot;true&quot;.&amp;#010 &lt;P&gt;&amp;#010 All available events (stringMethods) on a component are shown in the Events tab of the&amp;#010 Component Editor.  Clicking the plus (+) sign next to the event name brings up a menu that&amp;#010 shows a list of all components currently in the project and their available actions.&amp;#010 Selecting an action from this submenu binds the action to the selected event.  When an event&amp;#010 is bound to an action in this manner, automatic type matching is performed to pass arguments&amp;#010 from the event to the action as follows:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Only non-optional parameters of the action are bound.&amp;#010 &lt;li&gt;For each non-optional parameter of the action method, every parameter of the&amp;#010 event method is inspected in order to either directly match the type (for non-object types)&amp;#010 or to match an isAssignableFrom type check via a SmartClient schema inheritance check.&amp;#010 &lt;li&gt;The 'type' of a parameter is determined from the type documented in the SmartClient&amp;#010 reference for built-in components, or from the &lt;code&gt;type&lt;/code&gt; atribute on the method&amp;#010 param in the ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} definition of a custom component.&amp;#010 &lt;li&gt;When a matching parameter is found, it is assigned to the current slot of the action and&amp;#010 not considered for further parameter matching.&amp;#010 &lt;li&gt;The above pattern is repeated until all non-optional parameters are exhausted, all&amp;#010 event parameters are exhausted, or until no further type matches can be inferred.&amp;#010 &lt;/ul&gt;&amp;#010 The &quot;actionBinding&quot; log category can be enabled in the Developer Console to troubleshoot&amp;#010 issues with automatic binding for custom methods.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Component Drag and Drop&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Visual Builder uses component schema to determine whether a given drop is allowed and what&amp;#010 methods should be called to accomplish the drop.  For example, any Canvas-based component&amp;#010 can be dropped on a VLayout because VLayout has a &quot;members&quot; field of type &quot;Canvas&quot;, and an &amp;#010 ${isc.DocUtils.linkForRef('method:Layout.addMember','addMember()')} function.&amp;#010 &lt;P&gt;&amp;#010 Because of these rules, any subclass of Canvas will be automatically eligable to be dropped&amp;#010 into any container that accepts a Canvas (eg, a Layout or Tab).  Any subclass of a FormItem&amp;#010 will be, likewise, automatically eligible to be dropped into a DynamicForm.&amp;#010 &lt;P&gt;&amp;#010 You can declare custom containment relations, such as a custom class &quot;Wizard&quot; that accepts&amp;#010 instances of the custom class &quot;Pane&quot; by simply declaring a&amp;#010 ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} that says that Wizard has a property called&amp;#010 &quot;panes&quot; of type &quot;Pane&quot;.  Then, provide methods that allow components to be added and removed:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; for a ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','multiple')} field, provide &quot;add&quot; and &quot;remove&quot;&amp;#010 functions based on the name of the field.  For example, for a field &quot;panes&quot; of type &quot;Pane&quot;,&amp;#010 provide &quot;addPane()&quot; that takes a Pane instance, and &quot;removePane()&quot; that takes a pane&amp;#010 instance or pane ID &amp;#010 &lt;li&gt; for a singular field (such as ${isc.DocUtils.linkForRef('attr:Canvas.contextMenu')} or ${isc.DocUtils.linkForRef('attr:Tab.pane')}), provide a&amp;#010 setter method named after the field (eg setContextMenu()) that takes either an instance of&amp;#010 the component or null for removal&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 The &quot;editing&quot; log category can be enabled in the Developer Console to troubleshoot issues&amp;#010 with schema-driven drag and drop and automatic lookup of getter/setter and adder/remover&amp;#010 methods.&amp;#010 &lt;P&gt;&amp;#010 &lt;B&gt;NOTE:&lt;/B&gt; after modifying component schema, it may be necessary to restart the servlet&amp;#010 engine and reload Visual Builder&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Presenting simplified components&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 SmartClient components expose many methods and properties.  For some environments, it is&amp;#010 more appropriate to provide a simplified list of properties, events, and actions on either&amp;#010 built-in SmartClient components or your custom components.  This can be done by providing a&amp;#010 custom ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for an existing component that exposes&amp;#010 your minimal set.  You also need to provide a trivial subclass of the class you're exposing&amp;#010 so that it can be instantiated.&amp;#010 &lt;P&gt;&amp;#010 For example, let's say you want to make a simplified button called EButton that exposes only&amp;#010 the 'title' property and the 'click' event of a standard Button.  The following steps will&amp;#010 accomplish this:&amp;#010 &lt;p&gt;&amp;#010 1. Edit /tools/visualBuilder/customComponents.xml and add a block similar to the following&amp;#010 to make your custom component appear in the Component Library:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;PaletteNode&amp;gt;&amp;#010     &amp;lt;title&amp;gt;EButton&amp;lt;/title&amp;gt;&amp;#010     &amp;lt;className&amp;gt;EButton&amp;lt;/className&amp;gt;&amp;#010     &amp;lt;icon&amp;gt;button.gif&amp;lt;/icon&amp;gt;&amp;#010 &amp;lt;/PaletteNode&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 2. Next, create a custom schema: /isomorphic/system/schema/EButton.ds.xml as follows:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;DataSource ID=&quot;EButton&quot; inheritsFrom=&quot;Button&quot; Constructor=&quot;EButton&quot;&amp;#010             showLocalFieldsOnly=&quot;true&quot; showSuperClassActions=&quot;false&quot;&amp;#010             showSuperClassEvents=&quot;false&quot;&amp;gt;&amp;#010 	   &amp;lt;fields&amp;gt;&amp;#010         &amp;lt;field name=&quot;title&quot;  type=&quot;HTML&quot;/&amp;gt;&amp;#010     &amp;lt;/fields&amp;gt;&amp;#010     &amp;lt;methods&amp;gt;&amp;#010         &amp;lt;method name=&quot;click&quot;&amp;gt;&amp;#010             &amp;lt;description&amp;gt;Fires when this button is clicked.&amp;lt;/description&amp;gt;&amp;#010         &amp;lt;/method&amp;gt;&amp;#010     &amp;lt;/methods&amp;gt;&amp;#010 &amp;lt;/DataSource&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 See documentation above and also ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for what the&amp;#010 properties above do.&amp;#010 3.  Finally, you'll need to define an EButton class as a simple subclass of Button, as&amp;#010 follows:&amp;#010 &lt;pre&gt;&amp;#010 isc.defineClass(&quot;EButton&quot;, &quot;Button&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 To make sure that the Visual Builder will load the above definition, you'll need to place it&amp;#010 into a JavaScript file being loaded by the Visual Builder.  If you do not already have&amp;#010 such a file, you can create one and add it to the list of Visual Builder dependencies by&amp;#010 adding an entry in /tools/visualBuilder/globalDependencies.xml.  See examples in that file&amp;#010 for specifics.&amp;#010 &lt;P&gt;&amp;#010 &lt;h4&gt;Deploying Visual Builder for Functional Designers&lt;/h4&gt;&amp;#010 &lt;P&gt;&amp;#010 The normal ${isc.DocUtils.linkForRef('group:iscInstall')} deployment instructions apply to Visual Builder &lt;b&gt;except&amp;#010 that&lt;/b&gt; the &quot;BuiltinRPCs&quot;, which are configured via server.properties, must be enabled&amp;#010 in order for Visual Builder to load and save files to the SmartClient server.  This also&amp;#010 means that Visual Builder should only be deployed within trusted environments.  &amp;#010 &lt;P&gt;&amp;#010 Note that the Visual Builder provides a &quot;live&quot; interface to the provided DataSources.  In&amp;#010 other words, if a DataSource supports saving and a designer enables inline editing in a grid,&amp;#010 real saves will be initiated.  The Visual Builder tool should be configured to use the same&amp;#010 sample data that developers use during development." name="visualBuilder" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:DynamicForm.canSubmit" flags="IRWA" description="Governs whether this form will be used to perform a standard HTML form submission.&amp;#010 Note that if true, ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} will perform a native HTML submission&amp;#010 to the specified ${isc.DocUtils.linkForRef('attr:DynamicForm.action')} URL.&lt;br&gt;&amp;#010 Wherever possible we strongly recommend using the &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')} to send data to&amp;#010 the server as they provide a far more sophisticated interface, with built in &amp;#010 options for server validation, required fields, etc.&lt;br&gt;" name="canSubmit" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="attr:Splitbar.gripImgSuffix" flags="IRA" description="part name for the 'grip' image if ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true" name="gripImgSuffix" valueType="string" defaultValue="&quot;grip&quot;" type="attr" definingClass="class:Splitbar">
    <groups>grip</groups>
</docItem>
<docItem ref="method:ResultTree.invalidateCache" flags="A" description=" Manually invalidate this ResultTree's cache.&amp;#010 &lt;P&gt;&amp;#010 Generally a ResultTree will observe and incorporate updates to the DataSource that provides it's&amp;#010 records, but when this is not possible, &lt;code&gt;invalidateCache()&lt;/code&gt; allows manual cache&amp;#010 invalidation.&amp;#010 &lt;P&gt;&amp;#010 Components bound to this ResultTree will typically re-request the currently visible portion&amp;#010 of the dataset, causing the ResultTree to re-fetch data from the server.&amp;#010" name="invalidateCache" type="method" definingClass="class:ResultTree">
</docItem>
<docItem ref="method:DataSource.compareCriteria" flags="" description=" Given two sets of criteria, determine whether they are equivalent, the new criteria is&amp;#010 guaranteed more restrictive, or the new criteria is not guaranteed more restrictive,&amp;#010 returning 0, 1 or -1 respectively.&amp;#010 &lt;P&gt;&amp;#010 By default (${isc.DocUtils.linkForRef('type:CriteriaPolicy')}:&quot;dropOnShortening&quot;), returns:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; -1 if the new criteria has fewer properties than the old criteria (indicating that it&amp;#010      isn't more restrictive)&amp;#010 &lt;li&gt; -1 if the value for any property in the old criteria is an array and 1) the value for&amp;#010      the same property in the new criteria isn't an array, or 2) is an array but&amp;#010      of different length, or 3) the arrays do not contain the exact same set of objects&amp;#010      (order can be different)&amp;#010 &lt;li&gt; -1 if the value for any given property in the old criteria is not an array, and the&amp;#010      the value for the same property property in the new criteria is different&amp;#010 &lt;li&gt; -1 if both values for a given property are strings and the new criteria value doesn't&amp;#010      contain the new criteria value&amp;#010 &lt;li&gt; 1 if none of the above are true and for at least one of the properties, the&amp;#010      respective criteria values are both strings, and the old criteria value is a substring&amp;#010      of, and is shorter than, the new criteria value&amp;#010 &lt;li&gt; 0 otherwise (indicating the sets of criteria are equivalent)&amp;#010 &lt;/ul&gt;&amp;#010 &lt;P&gt;&amp;#010 For (${isc.DocUtils.linkForRef('type:CriteriaPolicy')}:&quot;dropOnChange&quot;), returns:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; -1 if the two sets of criteria have a different number of properties&amp;#010 &lt;li&gt; -1 if the value for any property in the old criteria is an array and 1) the value for&amp;#010      the same property in the new criteria isn't an array, or 2) is an array but&amp;#010      of different length, or 3) the arrays do not contain the exact same set of objects&amp;#010      (order can be different)&amp;#010 &lt;li&gt; -1 if the value for any given property in the old criteria is not an array, and the&amp;#010      the value for the same property property in the new criteria is different&amp;#010 &lt;li&gt; 0 otherwise (indicating the sets of criteria are equivalent)&amp;#010 &lt;/ul&gt;&amp;#010 This method is called by ${isc.DocUtils.linkForRef('method:ResultSet.compareCriteria')} to determine whether a change&amp;#010 in criteria should cause the cache to be invalidated. You may want&amp;#010 to override this method in order to mimic the filtering behavior that your server performs.&amp;#010&amp;#010" name="compareCriteria" type="method" definingClass="class:DataSource">
<seeAlso ref="type:CriteriaPolicy">
</seeAlso>
<params description="the list of rows" optional="false" name="newCriteria" type="Criteria">
</params>
<params description="the filter criteria" optional="false" name="oldCriteria" type="Criteria">
</params>
<params description="dataSource request properties" optional="true" name="requestProperties" type="DSRequest Properties">
</params>
<params description="overrides ${isc.DocUtils.linkForRef('type:CriteriaPolicy')}" optional="true" name="policy" type="string">
</params>
<returns description="0 if the filters are equivalent, 1 if newFilter is guaranteed more                      restrictive, and -1 if newFilter is not guaranteed more restrictive" type="Number"></returns>
</docItem>
<docItem ref="method:CubeGrid.closeFacet" flags="" description="&amp;#010  Handler fired when facet is closed&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; handler&amp;#010" name="closeFacet" type="method" definingClass="class:CubeGrid">
<params description="ID of facet that was closed" optional="false" name="facetId" type="string">
</params>
    <groups>columnControls</groups>
</docItem>
<docItem ref="attr:Layout.placeHolderProperties" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:Layout.showDragPlaceHolder','this.showDragPlaceHolder')} is true, this &amp;#010 properties object can be used to customize the appearance of the placeholder displayed&amp;#010 when the user drags a widget out of this layout." name="placeHolderProperties" valueType="canvas properties" defaultValue="null" type="attr" definingClass="class:Layout">
    <examples>${isc.DocUtils.linkForExampleId('dragMove')}</examples>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="class:Flashlet" description="ISC abstraction for Flashlets." name="Flashlet" type="class">
    <methods>method:Flashlet.getPluginHandle</methods>
    <classMethods>classMethod:Flashlet.flashAvailable</classMethods>
    <classMethods>classMethod:Flashlet.getFlashVersion</classMethods>
    <treeLocation>Optional Modules/Client Bridges</treeLocation>
    <attrs>attr:Flashlet.name</attrs>
    <attrs>attr:Flashlet.params</attrs>
    <attrs>attr:Flashlet.classID</attrs>
    <attrs>attr:Flashlet.codeBase</attrs>
    <attrs>attr:Flashlet.pluginsPage</attrs>
    <attrs>attr:Flashlet.src</attrs>
    <requiresModules>PluginBridges</requiresModules>
</docItem>
<docItem ref="method:ValuesManager.setValue" flags="" description=" Set the value for some field.&amp;#010" name="setValue" type="method" definingClass="class:ValuesManager">
<params description="Which field to set the value for" optional="false" name="fieldName" type="string">
</params>
<params description="New value for the field." optional="false" name="newValue" type="any">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ResultSet.fetchDelay" flags="IRWA" description="Delay in milliseconds before fetching rows.&amp;#010 &lt;P&gt;&amp;#010 When a get() or getRange() call asked for rows that haven't been loaded, the&amp;#010 ResultSet will wait before actually triggering the request.  If, during the delay, more&amp;#010 get() or getRange() calls are made for missing rows, the final fetch to the server will&amp;#010 reflect the most recently requested rows.&amp;#010 &lt;P&gt;&amp;#010 The intent of this delay is to avoid triggering many unnecessary fetches during&amp;#010 drag-scrolling and similar user interactions." name="fetchDelay" valueType="integer" defaultValue="0" type="attr" definingClass="class:ResultSet">
    <groups>fetching</groups>
</docItem>
<docItem ref="method:SectionStack.getExpandedSections" flags="" description="&amp;#010 Returns the list of currently expanded sections.  The list items are section IDs.&amp;#010&amp;#010" name="getExpandedSections" type="method" definingClass="class:SectionStack">
<returns description="list of currently expanded sections" type="List"></returns>
</docItem>
<docItem ref="attr:StatefulCanvas.radioGroup" flags="IRWA" description="String identifier for this canvas's mutually exclusive selection group." name="radioGroup" valueType="string" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:CubeGrid.facetValueHoverAlign" flags="IRWA" description="Allows the developer to override the horizontal text alignment of hover tips shown for&amp;#010 facet values.  If unspecified the hover canvas content alignment will be set by&amp;#010 &lt;code&gt;this.hoverAlign&lt;/code&gt; if specified." name="facetValueHoverAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverAlign">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="method:Canvas.mouseStillDown" flags="A" description="&amp;#010 Executed repeatedly (every ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownDelay')} by default) when the system is idle -&amp;#010 i.e. not busy running other scripts - and the left mouse button is held down after having been&amp;#010 pressed in the object. This event is not native to JavaScript, but is provided by the ISC system.&amp;#010 &lt;p&gt;&amp;#010 Note: The event handling system waits ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownInitialDelay')} before&amp;#010 calling mouseStillDown for the first time on the widget.  Subsequently the method is called every&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownDelay')}.  Both attributes are configurable per widget instance.&amp;#010 &lt;p&gt;&amp;#010 This method is called only when the left mouse is held down.&amp;#010&amp;#010" name="mouseStillDown" type="method" platformNotes="Some end user systems only have one mouse button." definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.mouseStillDownInitialDelay">
</seeAlso>
<seeAlso ref="attr:Canvas.mouseStillDownDelay">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('customMouseEvents')}</examples>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="method:DynamicForm.hasFieldErrors" flags="" description=" Does this form currently h ave any validation errors on the field passed in?&lt;br&gt;&amp;#010 Validation errors are set up automatically by validation, or may be explicitly set via&amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')}.&amp;#010" name="hasFieldErrors" type="method" definingClass="class:DynamicForm">
<params description="field to test for validation errors" optional="false" name="fieldName" type="string">
</params>
<returns description="true if the form has outstanding errors for the field in question." type="boolean"></returns>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:OperationBinding.operationId" flags="IR" description="Optional operationId if this DataSource supports two or more variants of one of the basic&amp;#010 DataSource operations, for instance, a &quot;fetch&quot; that uses full text search and a &quot;fetch&quot; that&amp;#010 accepts per-field search criteria.  See ${isc.DocUtils.linkForRef('attr:DSRequest.operationId')} for usage." name="operationId" valueType="String" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:ListGrid.frozenHeaderBaseStyle" flags="IR" description="If this listGrid contains any frozen fields, this property can be used to apply a custom&amp;#010 headerBaseStyle to the frozen fields set of fields. If unset, the standard headerBaseStyle&amp;#010 will be used for both frozen and unfrozen cells." name="frozenHeaderBaseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.headerBaseStyle">
</seeAlso>
<seeAlso ref="attr:ListGridField.frozen">
</seeAlso>
    <groups>gridHead4er</groups>
    <groups>appearance</groups>
    <groups>frozenFields</groups>
</docItem>
<docItem ref="method:ListGrid.getEventRow" flags="" description=" Returns the row number of the most recent mouse event.&amp;#010" name="getEventRow" type="method" definingClass="class:ListGrid">
<params description="optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event" optional="false" name="y" type="number">
</params>
<returns description="row number, or -2 if beyond last drawn row" type="number"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="classMethod:RPCManager.sendProxied" flags="" description=" Send an HTTP request to a remote host, potentially through the HttpProxy servlet installed&amp;#010 on the ISC server.&amp;#010 &lt;P&gt;&amp;#010 This API allows contacting services which are hosted on servers other than the origin server&amp;#010 if the HttpProxy servlet is enabled on the ISC server.&amp;#010 &lt;P&gt;&amp;#010 The HttpProxy will be used if the ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')} starts with &quot;http&quot; and uses a&amp;#010 hostname other than &quot;localhost&quot; or &lt;code&gt;window.location.hostname&lt;/code&gt;, or if&amp;#010 &lt;code&gt;request.useHttpProxy&lt;/code&gt; is explicitly set.  Otherwise the request goes to the&amp;#010 origin server (the server that returned the current page).&amp;#010 &lt;P&gt;&amp;#010 The ${isc.DocUtils.linkForRef('class:RPCRequest')} properties that will be respected when relaying requests via the&amp;#010 HttpProxy are: &amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL','actionURL')}, ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod','httpMethod')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.params','params')}, ${isc.DocUtils.linkForRef('attr:RPCRequest.contentType','contentType')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.httpHeaders','httpHeaders')}, and ${isc.DocUtils.linkForRef('attr:RPCRequest.data','data')}.  In this case&amp;#010 &quot;data&quot;, if set, will be used as the request body for an HTTP POST.&amp;#010 &lt;P&gt;&amp;#010 Higher-level APIs like ${isc.DocUtils.linkForRef('class:DataSource')} or ${isc.DocUtils.linkForRef('class:WebService')} call through this API, and so&amp;#010 automatically use the HttpProxy if ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} or&amp;#010 ${isc.DocUtils.linkForRef('method:WebService.setLocation','webService.location')} is set to a foreign server.&amp;#010 &lt;P&gt;&amp;#010 This API is only suitable for direct use when loading unstructured data that will not be&amp;#010 shown in a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')}.  For a WSDL-described web service, use&amp;#010 ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} instead.  For other web services, use a ${isc.DocUtils.linkForRef('class:DataSource')} with&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')}, and use ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} and&amp;#010 ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} as necessary to form requests for the service and&amp;#010 transform responses for display.&amp;#010&amp;#010" name="sendProxied" type="classMethod" definingClass="class:RPCManager">
<params description="rpcRequest to be routed through the HttpProxy" optional="false" name="request" type="rpcRequest">
</params>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="attr:ListGrid.baseStyle" flags="IR" description="The base name for the CSS class applied to cells. This style will have &quot;Dark&quot;, &amp;#010 &quot;Over&quot;, &quot;Selected&quot;, or &quot;Disabled&quot; appended to it according to the state of the cell." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;cell&quot;" type="attr" definingClass="class:ListGrid">
    <getter>getBaseStyle</getter>
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<seeAlso ref="method:ListGrid.getBaseStyle">
</seeAlso>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:Applet.codeBase" flags="IR" description="The base URL of the applet if the ${isc.DocUtils.linkForRef('attr:Applet.code')} attribute is relative" name="codeBase" valueType="URL" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.code">
</seeAlso>
<seeAlso ref="attr:Applet.archive">
</seeAlso>
</docItem>
<docItem ref="attr:ListGridField.iconSize" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the &amp;#010 size of the icon to be displayed in the ListGrid header button. &amp;#010 (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconSize')})" name="iconSize" valueType="integer" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
</docItem>
<docItem ref="method:Tree.openFolders" flags="" description="&amp;#010 Open a set of folders, specified by path or as pointers to nodes.&amp;#010&amp;#010" name="openFolders" type="method" definingClass="class:Tree">
<seeAlso ref="method:ResultTree.dataArrived">
</seeAlso>
<params description="List of nodes or node paths." optional="false" name="nodeList" type="List of TreeNode">
</params>
</docItem>
<docItem ref="class:SearchForm" description="A SearchForm is a DynamicForm specialized for a user to enter search criteria.&amp;#010 &lt;P&gt;&amp;#010 All DynamicForm properties and methods work on SearchForm.  SearchForm extends and&amp;#010 specializes DynamicForm for searching, for example, SearchForm sets&amp;#010 &lt;code&gt;hiliteRequiredFields&lt;/code&gt; false by default because fields are typically required in&amp;#010 a search." name="SearchForm" type="class">
    <methods>method:SearchForm.search</methods>
    <treeLocation>Client Reference/Forms</treeLocation>
<seeAlso ref="class:DynamicForm">
</seeAlso>
</docItem>
<docItem ref="attr:DynamicForm.sectionVisibilityMode" flags="IRW" description="If the form has sections, [implemented as ${isc.DocUtils.linkForRef('class:SectionItem')}s], this attribute controls&amp;#010 whether multiple sections can be expanded at once." name="sectionVisibilityMode" valueType="VisibilityMode" defaultValue="&quot;multiple&quot;" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="type:VisibilityMode">
</seeAlso>
<seeAlso ref="class:SectionItem">
</seeAlso>
    <groups>tableLayout</groups>
</docItem>
<docItem ref="method:ListGrid.getCellCSSText" flags="" description=" Return CSS text for styling this cell, which will be applied in addition to the CSS class&amp;#010 for the cell, as overrides.&amp;#010 &lt;p&gt;&amp;#010 &quot;CSS text&quot; means semicolon-separated style settings, suitable for inclusion in a CSS&amp;#010 stylesheet or in a STYLE attribute of an HTML element.&amp;#010&amp;#010" name="getCellCSSText" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.getCellStyle">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="CSS text for this cell" type="string"></returns>
    <examples>${isc.DocUtils.linkForExampleId('addStyle')}</examples>
</docItem>
<docItem ref="attr:Menu.canSelectParentItems" flags="IRW" description="If true, clicking or pressing Enter on a menu item that has a submenu will&amp;#010		select that item (with standard behavior of hiding the menus, calling click&amp;#010		handlers, etc) instead of showing the submenu." name="canSelectParentItems" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Menu">
    <examples>${isc.DocUtils.linkForExampleId('treeBinding')}</examples>
    <groups>selection</groups>
</docItem>
<docItem ref="group:timing" name="timing" type="group">
</docItem>
<docItem ref="group:caching" title="Caching" description="Standard web browsers can cache server responses, associating the locally-cached files with&amp;#010 the URLs (including query parameters) that were used to fetch the files from the&amp;#010 server. Each file may be assigned an explicit expiration time. Requests for the associated&amp;#010 URL will always be served from the local cache, without accessing the server, until the file&amp;#010 expires.&amp;#010 &lt;p&gt;&amp;#010 The recommended approach is to move as much content as possible into cacheable assets&amp;#010 (these can be images, html, css, and js) and tell the browser to cache those for as long as&amp;#010 possible (ideally indefinitely).  Clearly, most things can't simply be cached permanently -&amp;#010 new versions of the application will often require changes to these assets.  To allow for&amp;#010 this, the pages that direct the loading of the cached assets should be dynamic and should&amp;#010 create version-specific URLs to these cacheable assets.  This can be done by tacking the&amp;#010 version number as a query parameter or as a path component.  Here's an example of loading a&amp;#010 javascript file versioned with a query parameter:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;script src='/foo/bar.js?version=13'&amp;gt;&amp;lt;/script&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Generally, the version number wouldn't be hard-coded into the dynamic page, but would&amp;#010 instead pick up the value of a variable, such that you can simply bump up the value in one&amp;#010 configuration file and have all versioned URLs change dynamically.&amp;#010 &lt;p&gt;&amp;#010 Because SmartClient performs the assembly of image URLs dynamically, versioning of&amp;#010 SmartClient skins must be done with a path component.  You can do this by changing the base&amp;#010 skinDir using ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - e.g:&amp;#010 &lt;pre&gt;&amp;#010 isc.Page.setSkinDir('/version/5.6/isomorphic/skins/SmartClient/');&amp;#010 &lt;/pre&gt;&amp;#010 You can then either deploy the new skins under the versioned directory above or use a URL&amp;#010 rewriting engine such as mod_rewrite for Apache to map all such versions into a single&amp;#010 deploy directory.&amp;#010 &lt;p&gt;&amp;#010 To actually tell the browser to cache images for a longer length of time than the browser&amp;#010 session, you need to set the HTTP 'Expires' header.&amp;#010 If you're not using the SmartClient Java back-end there are several caching solutions&amp;#010 available, depending on your server of choice.  Microsoft's IIS has built-in caching&amp;#010 capability, please check the reference manual for details.  If you're using Apache, you can&amp;#010 use &lt;a href='http://httpd.apache.org/docs/2.0/mod/mod_expires.html' onclick=&quot;window.open('http://httpd.apache.org/docs/2.0/mod/mod_expires.html');return false;&quot;&gt;mod_expires&lt;/a&gt;.  Some servlet&amp;#010 containers also natively support the setting of caching headers.&amp;#010 &lt;p&gt;&amp;#010 The SmartClient Java back-end supports setting caching headers via the FileDownload service&amp;#010 on a per-mimetype basis.  To use it, first register the FileDownload servlet in your web.xml&amp;#010 as follows:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileDownload&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;init-param&amp;gt;&amp;#010           &amp;lt;param-name&amp;gt;expires&amp;lt;/param-name&amp;gt;&amp;#010           &amp;lt;param-value&amp;gt;text/javascript:3600,image/gif:86400&amp;lt;/param-value&amp;gt;&amp;#010       &amp;lt;/init-param&amp;gt;&amp;#010       &amp;lt;servlet-class&amp;gt;com.isomorphic.servlet.FileDownload&amp;lt;/servlet-class&amp;gt;&amp;#010     &amp;lt;/servlet&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The expires parameter controls the expiration time in seconds.  In the block above,&amp;#010 javascript files are set to expire in 1 hour and gif images are set to expire in 1 day from&amp;#010 the time they are served to the browser.  If you don't set explicit expires mappings, all&amp;#010 images and css files will be set to expire in 1 day and javascript files will expire in 1&amp;#010 hour, by default.&amp;#010 &lt;p&gt;&amp;#010 Next, map any resource that you want to serve with caching headers to the FileDownload&amp;#010 servlet in your web.xml.  Typically, you'll want to serve the SmartClient modules and all&amp;#010 skin images with caching headers.  You can do so by adding the following servlet-mapping&amp;#010 directives to your web.xml:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;servlet-mapping&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileDownload&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;url-pattern&amp;gt;/isomorphic/system/modules/*&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/servlet-mapping&amp;gt;&amp;#010 &amp;#010     &amp;lt;servlet-mapping&amp;gt;&amp;#010       &amp;lt;servlet-name&amp;gt;FileDownload&amp;lt;/servlet-name&amp;gt;&amp;#010       &amp;lt;url-pattern&amp;gt;/isomorphic/skins/*&amp;lt;/url-pattern&amp;gt;&amp;#010     &amp;lt;/servlet-mapping&amp;gt;&amp;#010 &lt;/pre&gt;" name="caching" type="group">
    <treeLocation>Optional Modules/Network Performance</treeLocation>
</docItem>
<docItem ref="method:ListGrid.saveEdits" flags="A" description="&amp;#010 Validates and saves edits within the row currently being edited (or another row with unsaved&amp;#010 edits, if indicated).&amp;#010 &lt;P&gt;&amp;#010 This method can be called to manually trigger saves if the default mechanisms of&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell','cell by cell')} or row by row saving are not suitable.  &amp;#010 &lt;P&gt;&amp;#010 The 'callback' parameter provides a notification when the save attempt completes, which is&amp;#010 likely to be asynchronous for databound grids.  Cases under which the callback will fire are:&amp;#010 &lt;ul&gt;&lt;li&gt;Save completed successfully&lt;/li&gt;&amp;#010 &lt;li&gt;No changes to the edited row, so save not required&lt;/li&gt;&amp;#010 &lt;li&gt;Validation failure occurred on the client or on the server&lt;/li&gt;&lt;/ul&gt;&amp;#010 Note that if this method was unable to determine the row to be saved, the callback will NOT&amp;#010 fire - in this case, the method is a no-op.&amp;#010 &lt;P&gt;&amp;#010 Other, standard callbacks such as ${isc.DocUtils.linkForRef('method:ListGrid.editComplete')}, ${isc.DocUtils.linkForRef('method:ListGrid.editFailed')} and &amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')} will fire normally.&amp;#010 &lt;P&gt;&amp;#010 Note this method does not hide the inline editors if they are showing - to explicitly save &amp;#010 and end editing, use the method 'endEditing()'&amp;#010&amp;#010" name="saveEdits" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.endEditing">
</seeAlso>
<params description="Event used to complete cell editing.          Optional, and defaults to &lt;code&gt;&quot;programmatic&quot;&lt;/code&gt;.  Can be used by the &amp;#010          &lt;code&gt;callback&lt;/code&gt; method to perform custom actions such as navigation when the &amp;#010          save completes." optional="true" name="editCompletionEvent" type="EditCompletionEvent">
</params>
<params description="Callback to fire on completion of the saving process.                                    If no edits were made or client-side validation fails &amp;#010                                    the callback will be fired synchronously at the end of this&amp;#010                                    method.&lt;br&gt;&amp;#010                                    Takes the following parameters:&amp;#010                                    &lt;br&gt;- rowNum &lt;i&gt;(Number) edited row number&lt;/i&gt;&amp;#010                                    &lt;br&gt;- colNum &lt;i&gt;(Number) edited column number&lt;/i&gt;&amp;#010                                    &lt;br&gt;- editCompletionEvent &lt;i&gt;(EditCompletionEvent) event &amp;#010                                      passed in (defaults to &lt;code&gt;&quot;programmatic&quot;&lt;/code&gt;)&lt;/i&gt;&amp;#010                                    &lt;br&gt;- success &lt;i&gt;(boolean) false if the save was unable to&amp;#010                                      complete due to a validation failure or server-side &amp;#010                                      error.&lt;/i&gt;" optional="true" name="callback" type="Callback">
</params>
<params description="Which row should be saved. If unspecified the current edit row                            is saved by default. Note that if there is no current edit row &amp;#010                            this method will no op." optional="true" name="rowNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:DynamicForm.cellBorder" flags="IRW" description="Width of border for the table that form is drawn in. This is primarily used for debugging&amp;#010 form layout." name="cellBorder" valueType="number" defaultValue="0" type="attr" definingClass="class:DynamicForm">
    <groups>tableLayout</groups>
</docItem>
<docItem ref="classMethod:Canvas.getEventEdge" flags="" description="		Check if an event is within an &quot;edge&quot; of this canvas.&amp;#010&amp;#010" name="getEventEdge" type="classMethod" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.resizeFrom">
</seeAlso>
<params description="Array of legal edges.  Default is all the resizeFrom mask of this canvas." optional="true" name="edgeMask" type="array">
</params>
<returns description="&quot;T&quot;, &quot;TR&quot;, etc. for corner the event is within, or null if not within a legal edge." type="string"></returns>
    <groups>dragdrop</groups>
    <groups>dragResize</groups>
</docItem>
<docItem ref="attr:SelectItem.pickListCriteria" flags="IRWA" description="If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is&amp;#010 set) this property can be used to provide static filter criteria when retrieving the data&amp;#010 for the pickList." name="pickListCriteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="class:RPCRequest" description="Encapsulates a client/server RPC request.  You'll need to provide an instance of this class (or a&amp;#010 constructor for it) to the ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')} method.  If you use the &amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.send')} method, an instance of RPCRequest will be created for you." name="RPCRequest" type="class">
    <classAttrs>classAttr:RPCRequest.useCursorTracker</classAttrs>
    <treeLocation>Client Reference/RPC</treeLocation>
    <attrs>attr:RPCRequest.data</attrs>
    <attrs>attr:RPCRequest.actionURL</attrs>
    <attrs>attr:RPCRequest.promptStyle</attrs>
    <attrs>attr:RPCRequest.promptCursor</attrs>
    <attrs>attr:RPCRequest.prompt</attrs>
    <attrs>attr:RPCRequest.showPrompt</attrs>
    <attrs>attr:RPCRequest.callback</attrs>
    <attrs>attr:RPCRequest.clientContext</attrs>
    <attrs>attr:RPCRequest.willHandleError</attrs>
    <attrs>attr:RPCRequest.timeout</attrs>
    <attrs>attr:RPCRequest.params</attrs>
    <attrs>attr:RPCRequest.evalResult</attrs>
    <attrs>attr:RPCRequest.evalVars</attrs>
    <attrs>attr:RPCRequest.callbackParam</attrs>
    <attrs>attr:RPCRequest.serverOutputAsString</attrs>
    <attrs>attr:RPCRequest.transport</attrs>
    <attrs>attr:RPCRequest.useXmlHttpRequest</attrs>
    <attrs>attr:RPCRequest.httpMethod</attrs>
    <attrs>attr:RPCRequest.contentType</attrs>
    <attrs>attr:RPCRequest.httpHeaders</attrs>
    <attrs>attr:RPCRequest.containsCredentials</attrs>
    <attrs>attr:RPCRequest.ignoreTimeout</attrs>
    <attrs>attr:RPCRequest.sendNoQueue</attrs>
    <attrs>attr:RPCRequest.paramsOnly</attrs>
    <attrs>attr:RPCRequest.useSimpleHttp</attrs>
    <attrs>attr:RPCRequest.bypassCache</attrs>
<seeAlso ref="classMethod:RPCManager.send">
</seeAlso>
<seeAlso ref="classMethod:RPCManager.sendRequest">
</seeAlso>
</docItem>
<docItem ref="method:FormItem.titleHoverHTML" flags="A" description="  If defined, this method should return the HTML to display in a hover canvas when the &amp;#010  user holds the mousepointer over this item's title.  Return null to suppress the hover &amp;#010  canvas altogether.&lt;br&gt;&amp;#010  If not defined, &lt;code&gt;dynamicForm.titleHoverHTML()&lt;/code&gt; will be evaluated to &amp;#010  determine hover content instead.&amp;#010&amp;#010" name="titleHoverHTML" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.prompt">
</seeAlso>
<seeAlso ref="method:FormItem.titleHover">
</seeAlso>
<seeAlso ref="method:FormItem.itemHoverHTML">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:DSResponse.totalRows" flags="R" description="Total number of rows available from the server that match the current filter criteria,&amp;#010 when using paged result fetching." name="totalRows" valueType="number" defaultValue="null" type="attr" definingClass="class:DSResponse">
    <groups>paging</groups>
</docItem>
<docItem ref="attr:TextItem.selectOnFocus" flags="IRW" description="If this property is set to true, whenever this item is given focus programmatically &amp;#010 (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.&lt;br&gt;&amp;#010 If false, the selection is not modified on focus - any previous selection within the&amp;#010 item will be restored.&lt;br&gt;&amp;#010 If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.selectOnFocus')}" name="selectOnFocus" valueType="boolean" defaultValue="null" type="attr" definingClass="class:TextItem">
    <groups>focus</groups>
</docItem>
<docItem ref="object:ListGridField" description="An object with a particular set of properties used to configure the display of&amp;#010 and interaction with the columns of a ${isc.DocUtils.linkForRef('class:ListGrid')}." name="ListGridField" type="object">
    <methods>method:ListGridField.getGroupValue</methods>
    <methods>method:ListGridField.getGroupTitle</methods>
    <methods>method:ListGridField.getFieldTitle</methods>
    <methods>method:ListGridField.getSummaryTitle</methods>
    <methods>method:ListGridField.sortNormalizer</methods>
    <methods>method:ListGridField.defaultDynamicValue</methods>
    <methods>method:ListGridField.editorEnter</methods>
    <methods>method:ListGridField.editorExit</methods>
    <methods>method:ListGridField.cellChanged</methods>
    <methods>method:ListGridField.recordClick</methods>
    <methods>method:ListGridField.recordDoubleClick</methods>
    <methods>method:ListGridField.getCellValue</methods>
    <methods>method:ListGridField.formatCellValue</methods>
    <methods>method:ListGridField.formatEditorValue</methods>
    <methods>method:ListGridField.parseEditorValue</methods>
    <methods>method:ListGridField.change</methods>
    <methods>method:ListGridField.changed</methods>
    <methods>method:ListGridField.hoverHTML</methods>
    <treeLocation>Client Reference/Grids/ListGrid</treeLocation>
    <attrs>attr:ListGridField.canGroupBy</attrs>
    <attrs>attr:ListGridField.valueIcons</attrs>
    <attrs>attr:ListGridField.valueIconSize</attrs>
    <attrs>attr:ListGridField.valueIconWidth</attrs>
    <attrs>attr:ListGridField.valueIconHeight</attrs>
    <attrs>attr:ListGridField.valueIconLeftPadding</attrs>
    <attrs>attr:ListGridField.valueIconRightPadding</attrs>
    <attrs>attr:ListGridField.editorValueIcons</attrs>
    <attrs>attr:ListGridField.editorValueIconWidth</attrs>
    <attrs>attr:ListGridField.editorValueIconHeight</attrs>
    <attrs>attr:ListGridField.showValueIconOnly</attrs>
    <attrs>attr:ListGridField.suppressValueIcon</attrs>
    <attrs>attr:ListGridField.valueIconOrientation</attrs>
    <attrs>attr:ListGridField.imageURLPrefix</attrs>
    <attrs>attr:ListGridField.imageURLSuffix</attrs>
    <attrs>attr:ListGridField.editorImageURLPrefix</attrs>
    <attrs>attr:ListGridField.editorImageURLSuffix</attrs>
    <attrs>attr:ListGridField.imageSize</attrs>
    <attrs>attr:ListGridField.imageWidth</attrs>
    <attrs>attr:ListGridField.imageHeight</attrs>
    <attrs>attr:ListGridField.type</attrs>
    <attrs>attr:ListGridField.name</attrs>
    <attrs>attr:ListGridField.title</attrs>
    <attrs>attr:ListGridField.showIf</attrs>
    <attrs>attr:ListGridField.frozen</attrs>
    <attrs>attr:ListGridField.icon</attrs>
    <attrs>attr:ListGridField.iconSize</attrs>
    <attrs>attr:ListGridField.iconWidth</attrs>
    <attrs>attr:ListGridField.iconHeight</attrs>
    <attrs>attr:ListGridField.iconOrientation</attrs>
    <attrs>attr:ListGridField.iconSpacing</attrs>
    <attrs>attr:ListGridField.showDisabledIcon</attrs>
    <attrs>attr:ListGridField.showRollOverIcon</attrs>
    <attrs>attr:ListGridField.showFocusedIcon</attrs>
    <attrs>attr:ListGridField.showDownIcon</attrs>
    <attrs>attr:ListGridField.showSelectedIcon</attrs>
    <attrs>attr:ListGridField.icons</attrs>
    <attrs>attr:ListGridField.editorIconWidth</attrs>
    <attrs>attr:ListGridField.editorIconHeight</attrs>
    <attrs>attr:ListGridField.defaultIconSrc</attrs>
    <attrs>attr:ListGridField.iconVAlign</attrs>
    <attrs>attr:ListGridField.summaryTitle</attrs>
    <attrs>attr:ListGridField.width</attrs>
    <attrs>attr:ListGridField.align</attrs>
    <attrs>attr:ListGridField.headerBaseStyle</attrs>
    <attrs>attr:ListGridField.headerTitleStyle</attrs>
    <attrs>attr:ListGridField.cellAlign</attrs>
    <attrs>attr:ListGridField.baseStyle</attrs>
    <attrs>attr:ListGridField.canSort</attrs>
    <attrs>attr:ListGridField.sortDirection</attrs>
    <attrs>attr:ListGridField.canEdit</attrs>
    <attrs>attr:ListGridField.defaultValue</attrs>
    <attrs>attr:ListGridField.enterKeyEditAction</attrs>
    <attrs>attr:ListGridField.escapeKeyEditAction</attrs>
    <attrs>attr:ListGridField.editorType</attrs>
    <attrs>attr:ListGridField.editorProperties</attrs>
    <attrs>attr:ListGridField.validators</attrs>
    <attrs>attr:ListGridField.validateOnChange</attrs>
    <attrs>attr:ListGridField.required</attrs>
    <attrs>attr:ListGridField.displayFormat</attrs>
    <attrs>attr:ListGridField.inputFormat</attrs>
    <attrs>attr:ListGridField.canFilter</attrs>
    <attrs>attr:ListGridField.filterEditorValueMap</attrs>
    <attrs>attr:ListGridField.filterEditorType</attrs>
    <attrs>attr:ListGridField.defaultFilterValue</attrs>
    <attrs>attr:ListGridField.filterEditorProperties</attrs>
    <attrs>attr:ListGridField.filterOnKeypress</attrs>
    <attrs>attr:ListGridField.linkText</attrs>
    <attrs>attr:ListGridField.valueMap</attrs>
    <attrs>attr:ListGridField.editorValueMap</attrs>
    <attrs>attr:ListGridField.emptyCellValue</attrs>
    <attrs>attr:ListGridField.optionDataSource</attrs>
    <attrs>attr:ListGridField.valueField</attrs>
    <attrs>attr:ListGridField.displayField</attrs>
    <attrs>attr:ListGridField.showHover</attrs>
    <attrs>attr:ListGridField.canToggle</attrs>
<seeAlso ref="attr:ListGrid.fields">
</seeAlso>
<seeAlso ref="method:ListGrid.setFields">
</seeAlso>
</docItem>
<docItem ref="method:ListGrid.refreshCellStyle" flags="" description=" Refresh the styling of an individual cell without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cell's CSS class and CSS text will be refreshed, to the current values returned by&amp;#010 getCellStyle() and getCellCSSText() respectively.&amp;#010 &lt;P&gt;&amp;#010 The cell's contents (as returned by getCellValue()) will &lt;b&gt;not&lt;/b&gt; be refreshed.  To&amp;#010 refresh both styling and contents, call refreshCell() instead.&amp;#010&amp;#010" name="refreshCellStyle" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.refreshCell" description="to update cell contents too"></seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
<params description="column number of cell to refresh" optional="false" name="colNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:RichTextEditor.fontSizes" flags="IRA" description="ValueMap of css font size property values to font size titles to display in the font size&amp;#010  selector if &lt;code&gt;&quot;fontSizeSelector&quot;&lt;/code&gt; is included in &amp;#010  ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')}.&amp;#010  Default value for this attribute:&lt;br&gt;&amp;#010 &lt;code&gt;{&amp;#010 &amp;nbsp;&amp;nbsp;&quot;1&quot;:&quot;1 (8 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;2&quot;:&quot;2 (10 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;3&quot;:&quot;3 (12 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;4&quot;:&quot;4 (14 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;5&quot;:&quot;5 (18 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;6&quot;:&quot;6 (24 pt)&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;7&quot;:&quot;7 (36 pt)&quot;}&lt;/code&gt;" name="fontSizes" valueType="object" defaultValue="{}" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="attr:DataSource.childrenField" flags="IR" description="fieldName for a field in the dataSource expected to contain an explicit array of child nodes.&amp;#010 Enables loading a databound tree as a hierachical data structure, rather than a flat list of&amp;#010 nodes linked by foreignKey.&lt;br&gt;&amp;#010 Note this is an alternative to setting ${isc.DocUtils.linkForRef('attr:DataSourceField.childrenProperty')} directly on&amp;#010 the childrenField object.&lt;P&gt;&amp;#010 By default the children field will be assumed to be ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','multiple')},&amp;#010 for XML databinding. This implies that child data should be delivered in the format:&amp;#010 &lt;pre&gt;&amp;#010      &amp;lt;childrenFieldName&amp;gt;&amp;#010          &amp;lt;item name=&quot;firstChild&quot; ...&amp;gt;&amp;#010          &amp;lt;item name=&quot;secondChild&quot; ...&amp;gt;&amp;#010      &amp;lt;/childrenFieldName&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 However data may also be delivered as a direct list of &lt;code&gt;childrenFieldName&lt;/code&gt; &amp;#010 elements:&amp;#010 &lt;pre&gt;&amp;#010      &amp;lt;childrenFieldName name=&quot;firstChild&quot; ...&amp;gt;&amp;#010      &amp;lt;childrenFieldName name=&quot;secondChild&quot; ...&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 If you want to return your data in this format, you will need to explicitly set &amp;#010 &lt;code&gt;multiple&lt;/code&gt; to false in the appropriate dataSource field definition." name="childrenField" valueType="string" defaultValue="null" type="attr" definingClass="class:DataSource">
<seeAlso ref="attr:DataSourceField.childrenProperty">
</seeAlso>
    <groups>dataSourceRelations</groups>
</docItem>
<docItem ref="group:formValues" name="formValues" type="group">
    <refs>method:DynamicForm.setValues</refs>
    <refs>method:DynamicForm.rememberValues</refs>
    <refs>method:DynamicForm.resetValues</refs>
    <refs>method:DynamicForm.clearValues</refs>
    <refs>method:DynamicForm.valuesHaveChanged</refs>
    <refs>method:DynamicForm.getValues</refs>
    <refs>method:DynamicForm.getValuesAsCriteria</refs>
    <refs>method:DynamicForm.getValue</refs>
    <refs>method:DynamicForm.setValue</refs>
    <refs>method:DynamicForm.showItem</refs>
    <refs>method:DynamicForm.hideItem</refs>
    <refs>method:DynamicForm.setValueMap</refs>
    <refs>method:FormItem.getValue</refs>
    <refs>method:FormItem.defaultDynamicValue</refs>
    <refs>method:ValuesManager.getValues</refs>
    <refs>method:ValuesManager.setValues</refs>
    <refs>method:ValuesManager.clearValues</refs>
    <refs>method:ValuesManager.getMemberValues</refs>
    <refs>method:ValuesManager.setMemberValues</refs>
    <refs>method:ValuesManager.rememberValues</refs>
    <refs>method:ValuesManager.resetValues</refs>
    <refs>method:ValuesManager.valuesHaveChanged</refs>
    <refs>method:ValuesManager.getValue</refs>
    <refs>method:ValuesManager.setValue</refs>
    <refs>method:DynamicForm.reset</refs>
    <refs>attr:DynamicForm.values</refs>
</docItem>
<docItem ref="attr:ListGridField.editorImageURLSuffix" flags="IRWA" description="When some cell in this field is being edited, this property can be used to apply &amp;#010 an explicit ${isc.DocUtils.linkForRef('attr:FormItem.imageURLSuffix')} to the editor in question. &amp;#010 This can be used to modify the valueIcons within the editor.&lt;br&gt;&amp;#010 If unset, but ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} is specified, that will be used&amp;#010 instead." name="editorImageURLSuffix" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:DynamicForm.errorsPreamble" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in &amp;#010 a single item rendered at the top of the form.&lt;br&gt;&amp;#010 This attribute specifies an introductory string rendered out before the individual error&amp;#010 messages." name="errorsPreamble" valueType="string" defaultValue="&quot;The following errors were found&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>validation</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Scrollbar.allowThumbDownState" flags="IRWA" description="If true, the thumb's appearance changes when it's clicked on." name="allowThumbDownState" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Scrollbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Button.showRollOverIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image on mouse rollover." name="showRollOverIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="group:treeIcons" name="treeIcons" type="group">
    <refs>method:TreeGrid.setNodeIcon</refs>
    <refs>attr:TreeGrid.iconSize</refs>
    <refs>attr:TreeGrid.folderIcon</refs>
    <refs>attr:TreeGrid.dropIconSuffix</refs>
    <refs>attr:TreeGrid.openIconSuffix</refs>
    <refs>attr:TreeGrid.closedIconSuffix</refs>
    <refs>attr:TreeGrid.nodeIcon</refs>
    <refs>attr:TreeGrid.showOpenIcons</refs>
    <refs>attr:TreeGrid.showDropIcons</refs>
    <refs>attr:TreeGrid.customIconProperty</refs>
    <refs>attr:TreeGrid.showCustomIconOpen</refs>
    <refs>attr:TreeGrid.showCustomIconDrop</refs>
    <refs>attr:TreeGrid.customIconOpenProperty</refs>
    <refs>attr:TreeGrid.customIconDropProperty</refs>
    <refs>attr:TreeGrid.showConnectors</refs>
    <refs>attr:TreeGrid.openerImage</refs>
    <refs>attr:TreeGrid.connectorImage</refs>
</docItem>
<docItem ref="attr:Canvas.defaultHeight" flags="IRWA" description="For custom components, establishes a default height for the component.&amp;#010 &lt;P&gt;&amp;#010 For a component that should potentially be sized automatically by a Layout, set this&amp;#010 property rather than ${isc.DocUtils.linkForRef('attr:Canvas.height')} directly, because Layouts regard a height setting as&amp;#010 an explicit size that shouldn't be changed." name="defaultHeight" valueType="Number" defaultValue="100" type="attr" definingClass="class:Canvas">
    <groups>sizing</groups>
</docItem>
<docItem ref="group:grip" name="grip" type="group">
    <refs>attr:Splitbar.showGrip</refs>
    <refs>attr:Splitbar.gripImgSuffix</refs>
    <refs>attr:Splitbar.showDownGrip</refs>
    <refs>attr:Splitbar.showRollOverGrip</refs>
    <refs>attr:Splitbar.showClosedGrip</refs>
    <refs>attr:Snapbar.showGrip</refs>
    <refs>attr:Snapbar.showDownGrip</refs>
    <refs>attr:Snapbar.showRollOverGrip</refs>
    <refs>attr:Snapbar.showClosedGrip</refs>
</docItem>
<docItem ref="attr:Splitbar.showGrip" flags="IRA" description="Should we show a &quot;grip&quot; image floating above the center of this widget?" name="showGrip" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Splitbar">
    <groups>grip</groups>
</docItem>
<docItem ref="class:SectionHeader" description="Simple SectionHeader class based on a Label with an icon, skinnable via CSS." name="SectionHeader" type="class">
    <treeLocation>Client Reference/Layout/SectionStack</treeLocation>
    <attrs>attr:SectionHeader.icon</attrs>
    <attrs>attr:SectionHeader.baseStyle</attrs>
</docItem>
<docItem ref="attr:Splitbar.hSrc" flags="IR" description="Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is false and &amp;#010 ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset." name="hSrc" valueType="SCImgURL" defaultValue="null" type="attr" definingClass="class:Splitbar">
<seeAlso ref="attr:StretchImg.src">
</seeAlso>
<seeAlso ref="attr:StretchImg.vSrc">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:SectionStackSection.showHeader" flags="I" description="If true, a header will be shown for this section.  If false, no header will be shown." name="showHeader" valueType="boolean" defaultValue="true" type="attr" definingClass="object:SectionStackSection">
</docItem>
<docItem ref="method:Menu.getSubmenu" flags="A" description=" Get the submenu for a particular menu item.&amp;#010 &lt;P&gt;&amp;#010 Override to provide dynamic generation of submenus.&amp;#010 &amp;#010" name="getSubmenu" type="method" definingClass="class:Menu">
<params description="the item in question, or it's index" optional="false" name="item" type="MenuItem | number">
</params>
<returns description="the submenu" type="Menu"></returns>
</docItem>
<docItem ref="attr:Button.showDownIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the mouse goes&amp;#010 down on the button." name="showDownIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <examples>${isc.DocUtils.linkForExampleId('buttonIcons')}</examples>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Class.setProperties" flags="" description=" Set multiple properties on an object, calling the appropriate setter methods if any are&amp;#010 found.&amp;#010 &lt;p&gt;&amp;#010 Whenever you set a property on an ISC component, you should call either the specific setter&amp;#010 for that property, or &lt;code&gt;setProperty()/setProperties()&lt;/code&gt; if it doesn't have one.&amp;#010 This future-proofs your code against the later addition of required setters.  &amp;#010 &lt;p&gt;&amp;#010 With &lt;code&gt;setProperties()&lt;/code&gt; in particular, some classes may be able to take shortcuts&amp;#010 and be more efficient when 2 or more related properties are set at the same time.&amp;#010&amp;#010" name="setProperties" type="method" definingClass="class:Class">
<seeAlso ref="method:Class.setProperty">
</seeAlso>
<params description="objects with properties to add (think named parameters).										all the properties of each argument will be applied one&amp;#010										after another so later properties will override" optional="true" name="arguments 0-N" type="object">
</params>
</docItem>
<docItem ref="object:MenuItem" description="Menu items are specified are object literals, not class instances.  For example, when&amp;#010 developing in JavaScript, a typical initialization block for a Menu would look like&amp;#010 this:&amp;#010 &lt;pre&gt;&amp;#010 Menu.create({&amp;#010     data: [&amp;#010         {title: &quot;item1&quot;, click: &quot;alert(1)&quot;},&amp;#010         {title: &quot;item2&quot;}&amp;#010     ]&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 And in XML:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;Menu&amp;gt;&amp;#010    &amp;lt;data&amp;gt;&amp;#010        &amp;lt;MenuItem title=&quot;item1&quot; click=&quot;alert(1)&quot;/&amp;gt;&amp;#010        &amp;lt;MenuItem title=&quot;item2&quot;/&amp;gt;&amp;#010    &amp;lt;/data&amp;gt;&amp;#010 &amp;lt;/Menu&amp;gt;&amp;#010 &lt;/pre&gt;" name="MenuItem" type="object">
    <methods>method:MenuItem.click</methods>
    <methods>method:MenuItem.action</methods>
    <treeLocation>Client Reference/Control/Menu</treeLocation>
    <attrs>attr:MenuItem.title</attrs>
    <attrs>attr:MenuItem.submenu</attrs>
    <attrs>attr:MenuItem.isSeparator</attrs>
    <attrs>attr:MenuItem.enabled</attrs>
    <attrs>attr:MenuItem.checked</attrs>
    <attrs>attr:MenuItem.icon</attrs>
    <attrs>attr:MenuItem.iconWidth</attrs>
    <attrs>attr:MenuItem.iconHeight</attrs>
    <attrs>attr:MenuItem.keys</attrs>
    <attrs>attr:MenuItem.keyTitle</attrs>
    <attrs>attr:MenuItem.enableIf</attrs>
    <attrs>attr:MenuItem.checkIf</attrs>
    <attrs>attr:MenuItem.dynamicTitle</attrs>
    <attrs>attr:MenuItem.dynamicIcon</attrs>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:StretchImgButton.state" description="Current &quot;state&quot; of this widget. StatefulCanvases will have a different appearance based&amp;#010 on their current state. By default this is handled by changing the css className applied to&amp;#010 the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is&amp;#010 done.&lt;P&gt;&amp;#010 For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the &amp;#010 appearance may also be updated by changing the src of the rendered image. See&amp;#010 ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL &amp;#010 is modified to reflect the state of the widget in this case." name="state" valueType="State" defaultValue="&quot;&quot;" definingClass="class:StretchImgButton">
    <getter>getState</getter>
    <setter>setState</setter>
<seeAlso ref="type:State">
</seeAlso>
<seeAlso ref="group:state">
</seeAlso>
    <groups>state</groups>
</docItem>
<docItem ref="class:Date" description="Extensions to the Date class, including added static methods on the Date object, and &amp;#010  additional instance methods available on all date instances." name="Date" type="class">
    <methods>method:Date.duplicate</methods>
    <methods>method:Date.getShortDayName</methods>
    <methods>method:Date.getShortMonthName</methods>
    <methods>method:Date.getShortYear</methods>
    <methods>method:Date.toDateStamp</methods>
    <methods>method:Date.toNormalDate</methods>
    <methods>method:Date.toShortDate</methods>
    <methods>method:Date.toUSShortDate</methods>
    <methods>method:Date.toUSShortDateTime</methods>
    <methods>method:Date.toEuropeanShortDate</methods>
    <methods>method:Date.toEuropeanShortDateTime</methods>
    <methods>method:Date.toJapanShortDate</methods>
    <methods>method:Date.toJapanShortDateTime</methods>
    <methods>method:Date.toSerializeableDate</methods>
    <methods>method:Date.setFormatter</methods>
    <methods>method:Date.toPrettyString</methods>
    <classAttrs>classAttr:Date.shortDayNames</classAttrs>
    <classAttrs>classAttr:Date.shortMonthNames</classAttrs>
    <classMethods>classMethod:Date.create</classMethods>
    <classMethods>classMethod:Date.compareDates</classMethods>
    <classMethods>classMethod:Date.setInputFormat</classMethods>
    <classMethods>classMethod:Date.getInputFormat</classMethods>
    <classMethods>classMethod:Date.parseInput</classMethods>
    <classMethods>classMethod:Date.setNormalDisplayFormat</classMethods>
    <classMethods>classMethod:Date.setShortDisplayFormat</classMethods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="method:ComboBoxItem.dataArrived" flags="" description=" If this item is showing a dataBound pickList, this notification method will be fired &amp;#010 when new data arrives from the server.&amp;#010" name="dataArrived" type="method" definingClass="class:ComboBoxItem">
<params description="index of first row returned by the server" optional="false" name="startRow" type="number">
</params>
<params description="index of last row returned by the server" optional="false" name="endRow" type="number">
</params>
<params description="pointer this pickList's data" optional="false" name="data" type="ResultSet">
</params>
</docItem>
<docItem ref="classMethod:Flashlet.getFlashVersion" flags="" description=" Which version of Flash is installed on this browser?&amp;#010" name="getFlashVersion" type="classMethod" definingClass="class:Flashlet">
<returns description="flash version number, or null if flash is not installed" type="number"></returns>
</docItem>
<docItem ref="attr:Applet.code" flags="IR" description="A URL that points to the class of the applet." name="code" valueType="URL" defaultValue="null" type="attr" definingClass="class:Applet">
<seeAlso ref="attr:Applet.codeBase">
</seeAlso>
<seeAlso ref="attr:Applet.archive">
</seeAlso>
</docItem>
<docItem ref="method:TabSet.removeTab" flags="A" description=" Remove a tab.&amp;#010 &lt;P&gt;&amp;#010 The pane associated with the removed tab is automatically destroyed when you&amp;#010 call this method.  To avoid this, call ${isc.DocUtils.linkForRef('method:TabSet.updateTab')} with &lt;code&gt;null&lt;/code&gt; as the new&amp;#010 pane immediately before removing the tab.&amp;#010 &amp;#010" name="removeTab" type="method" definingClass="class:TabSet">
<seeAlso ref="method:TabSet.removeTabs">
</seeAlso>
<params description="list of tabs, tabIDs, or tab numbers" optional="false" name="tabs" type="Tab | ID | number | Array of Tab">
</params>
    <examples>${isc.DocUtils.linkForExampleId('tabsAddAndRemove')}</examples>
</docItem>
<docItem ref="method:ValuesManager.clearFieldErrors" flags="" description=" Clear all validation errors associated with some field in this form&amp;#010" name="clearFieldErrors" type="method" definingClass="class:ValuesManager">
<params description="field for which errors should be cleared" optional="false" name="fieldName" type="string">
</params>
<params description="if true, and the field is present in one of our member forms,                        redraw it to clear any currently visible validation errors" optional="false" name="show" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="method:FormItem.defaultDynamicValue" flags="A" description=" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')} when no value is &amp;#010 provided for this item.&amp;#010 &lt;P&gt;&amp;#010 If you don't need dynamic evaluation, you can just use &lt;code&gt;item.defaultValue&lt;/code&gt;.&amp;#010&amp;#010" name="defaultDynamicValue" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.defaultValue">
</seeAlso>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the current set of values for the form as a whole" optional="false" name="values" type="Object">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="object:SerializationContext" description="Flags for XML serialization" name="SerializationContext" type="object">
    <treeLocation>Client Reference/Data Binding/DataSource</treeLocation>
    <attrs>attr:SerializationContext.useFlatFields</attrs>
</docItem>
<docItem ref="method:SelectItem.getDisplayFieldName" flags="A" description=" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.&amp;#010 If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method&amp;#010 will return the title field for the &lt;code&gt;optionDataSource&lt;/code&gt;&amp;#010" name="getDisplayFieldName" type="method" definingClass="class:SelectItem">
<returns description="display field name, or null" type="String"></returns>
</docItem>
<docItem ref="method:ListGrid.cellHoverHTML" flags="" description=" StringMethod to dynamically assemble an HTML string to show in a hover window over the&amp;#010 appropriate cell/record when this.canHover and this.showHover are both true.&amp;#010 Called when the mouse hovers over a cell.&amp;#010&amp;#010" name="cellHoverHTML" type="method" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.canHover">
</seeAlso>
<seeAlso ref="attr:ListGrid.showHover">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="the html to be shown inside the hover for this cell" type="html"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="attr:Menu.useKeys" flags="IRW" description="A boolean indicating whether this menu should use shortcut keys. Set useKeys to&amp;#010 false in a menu's initialization block to explicitly disable shortcut keys." name="useKeys" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="classAttr:Dialog.SAY_TITLE" flags="IRW" description="Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.say')} method.&amp;#010 Note that a custom title can be specified as the &lt;code&gt;title&lt;/code&gt; attribute of the &amp;#010 &lt;code&gt;properties&lt;/code&gt; parameter passed to that method." name="SAY_TITLE" valueType="HTML" defaultValue="&quot;Note&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ImgProperties.width" flags="IRW" description="Specifies the width of the image." name="width" valueType="number" defaultValue="null" type="attr" definingClass="object:ImgProperties">
</docItem>
<docItem ref="attr:DetailViewer.emptyMessageStyle" flags="IRWA" description="CSS style to display this message in" name="emptyMessageStyle" valueType="CSSStyleName" defaultValue="&quot;normal&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="group:columnControls" name="columnControls" type="group">
    <refs>method:CubeGrid.closeFacet</refs>
    <refs>method:CubeGrid.closeColumn</refs>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:ListGrid.data" description="A List of ListGridRecord objects, specifying the data to be used to populate the&amp;#010 ListGrid.  In ListGrids, the data array specifies rows. Note that ListGrids&amp;#010 automatically observe changes to the data List and redraw accordingly.&amp;#010 &lt;p&gt;&amp;#010 This property is settable directly only as part of a ${isc.DocUtils.linkForRef('class:ListGrid')} constructor.  If&amp;#010 you want to change the ${isc.DocUtils.linkForRef('class:ListGrid')}'s data after initial creation, call&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.setData')}.&amp;#010 &lt;p&gt;&amp;#010 This property will typically not be explicitly specified for databound ListGrids, where&amp;#010 the data is returned from the server via databound component methods such as&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}. In this case the data objects will be set to a &amp;#010 ${isc.DocUtils.linkForRef('class:ResultSet','resultSet')} rather than a simple array." name="data" valueType="List of ListGridRecord" defaultValue="null" definingClass="class:ListGrid">
    <setter>setData</setter>
<seeAlso ref="object:ListGridRecord">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('inlineData')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('localData')}</examples>
    <groups>data</groups>
</docItem>
<docItem ref="attr:Snapbar.showDownGrip" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the&amp;#010 'Down' state on the grip image when the user mousedown's on this widget. &amp;#010 Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showDown')} is false" name="showDownGrip" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:Tab.closeIcon" flags="IRW" description="Custom src for the close icon for this tab to display if it is closeable.&amp;#010 See ${isc.DocUtils.linkForRef('attr:Tab.canClose')} and ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')}." name="closeIcon" valueType="URL" defaultValue="null" type="attr" definingClass="object:Tab">
</docItem>
<docItem ref="group:Hovers" name="Hovers" type="group">
    <refs>method:DynamicForm.itemHoverHTML</refs>
    <refs>method:DynamicForm.titleHoverHTML</refs>
    <refs>method:FormItem.stopHover</refs>
    <refs>method:FormItem.itemHover</refs>
    <refs>method:FormItem.titleHover</refs>
    <refs>method:FormItem.titleHoverHTML</refs>
    <refs>method:FormItem.itemHoverHTML</refs>
    <refs>attr:DynamicForm.itemHoverDelay</refs>
    <refs>attr:DynamicForm.itemHoverWidth</refs>
    <refs>attr:DynamicForm.itemHoverHeight</refs>
    <refs>attr:DynamicForm.itemHoverAlign</refs>
    <refs>attr:DynamicForm.itemHoverVAlign</refs>
    <refs>attr:DynamicForm.itemHoverStyle</refs>
    <refs>attr:DynamicForm.itemHoverOpacity</refs>
    <refs>attr:FormItem.hoverDelay</refs>
    <refs>attr:FormItem.hoverWidth</refs>
    <refs>attr:FormItem.hoverHeight</refs>
    <refs>attr:FormItem.hoverAlign</refs>
    <refs>attr:FormItem.hoverVAlign</refs>
    <refs>attr:FormItem.hoverStyle</refs>
    <refs>attr:FormItem.hoverOpacity</refs>
</docItem>
<docItem ref="attr:Window.animateMinimize" flags="IRWA" description="Should this window minimize, maximize, and restore as an animation, or as a &amp;#010 simple 1-step transition?" name="animateMinimize" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Window">
    <examples>${isc.DocUtils.linkForExampleId('windowMinimize')}</examples>
    <groups>appearance</groups>
    <groups>header</groups>
    <groups>animation</groups>
</docItem>
<docItem ref="method:Canvas.setWidth" flags="" description=" Resizes the widget horizontally to the specified width (moves the right side of the&amp;#010 widget). The width parameter can be expressed as a percentage of viewport size or as&amp;#010 the number of pixels.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you're setting multiple coordinates, use resizeTo() or setRect() instead&amp;#010    &amp;#010" name="setWidth" type="method" definingClass="class:Canvas">
<params description="new width" optional="false" name="width" type="number">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:OperationBinding.recordName" flags="IR" description="For an XML DataSource, tagName of the elements to be used as records.&amp;#010 &lt;p&gt;&amp;#010 This is a simple alternative to ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} when the elements to be used as&amp;#010 records all share a tagName.&amp;#010 &lt;p&gt;&amp;#010 When a DataSource has a WebService, &lt;code&gt;recordName&lt;/code&gt; can also be set to the name&amp;#010 of any &lt;code&gt;complexType&lt;/code&gt; declared within the WebService's WSDL file." name="recordName" valueType="String" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <examples>${isc.DocUtils.linkForExampleId('wsdlBinding')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="classMethod:Class.fireCallback" flags="" description="&amp;#010 Fire some arbitrary action specified as a ${isc.DocUtils.linkForRef('type:Callback')}.&amp;#010 Returns the value returned by the action.&amp;#010 &amp;#010" name="fireCallback" type="classMethod" definingClass="class:Class">
<params description="Action to fire." optional="false" name="callback" type="Callback">
</params>
<params description="Comma separated string of variable names. If the callback                            passed in was a string of script, any arguments passed to the&amp;#010                            callback will be available as local variables with these names." optional="true" name="argNames" type="string">
</params>
<params description="Array of arguments to pass to the mthod. Note that the number                           of arguments should match the number of argNames." optional="true" name="args" type="array">
</params>
<params description="If specified the callback will be evaluated in the scope of this                          object - the &lt;code&gt;this&lt;/code&gt; keyword will be a pointer to this&amp;#010                          target when the callback is fired." optional="true" name="target" type="object">
</params>
<returns description="returns the value returned by the callback method passed in." type="any"></returns>
</docItem>
<docItem ref="attr:ListGrid.canEdit" flags="IRW" description="Can the user edit cells in this listGrid? Can be set for the listGrid, and overridden for &amp;#010      individual fields.&lt;br&gt;&amp;#010      If 'canEdit' is false at the listGrid level, fields can never be edited - in this case&amp;#010      the canEdit property on individual fields will be ignored.&lt;br&gt;&amp;#010      If 'canEdit' is set to true at the listGrid level, setting the 'canEdit' property to&amp;#010      false at the field level will prevent the field from being edited inline.&lt;br&gt;&amp;#010      If 'canEdit' is not set at the listGrid level, setting 'canEdit' to true at the field &amp;#010      level enables the field to be edited inline." name="canEdit" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.startEditing">
</seeAlso>
<seeAlso ref="attr:ListGridField.canEdit">
</seeAlso>
<seeAlso ref="attr:ListGrid.recordEditProperty">
</seeAlso>
<seeAlso ref="method:ListGrid.canEditCell">
</seeAlso>
<seeAlso ref="attr:ListGrid.fields">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('editByRow')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:Layout.resizeBarClass" flags="AIRW" description="Class to use for creating resizeBars.&amp;#010 &lt;P&gt;&amp;#010 A resize bar will be created for any Layout member that specifies&amp;#010 ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar','&lt;code&gt;showResizeBar:true&lt;/code&gt;')}.&amp;#010 Resize bars will be instances of the class specified by this property, and will &amp;#010 automatically be sized to the member's breadth and to the thickness&amp;#010 given by ${isc.DocUtils.linkForRef('attr:Layout.resizeBarSize')}.&lt;br&gt;&amp;#010 Classes that are valid by default are ${isc.DocUtils.linkForRef('class:Splitbar')} and ${isc.DocUtils.linkForRef('class:ImgSplitbar')}.&amp;#010 &lt;P&gt;&amp;#010 To customize the appearance or behavior of resizeBars within some layout a custom &amp;#010 resize bar class can be created by subclassing ${isc.DocUtils.linkForRef('class:Splitbar')} or ${isc.DocUtils.linkForRef('class:ImgSplitbar')} and&amp;#010 setting this property on your layout to use your new class.&amp;#010 &lt;P&gt;&amp;#010 Resize bars will automatically be sized to the member's breadth and to the thickness&amp;#010 given by &lt;code&gt;layout.resizeBarSize&lt;/code&gt;.  The built-in Splitbar class supports&amp;#010 drag resizing of its target member, and clicking on the bar to hide the target member." name="resizeBarClass" valueType="String" defaultValue="&quot;Splitbar&quot;" type="attr" definingClass="class:Layout">
<seeAlso ref="class:Splitbar">
</seeAlso>
<seeAlso ref="class:ImgSplitbar">
</seeAlso>
<seeAlso ref="attr:Layout.resizeBarSize">
</seeAlso>
</docItem>
<docItem ref="attr:MultiFileItem.dataSource" flags="IR" description="DataSource where files are stored.  &amp;#010 &lt;P&gt;&amp;#010 This DataSource is expected to have a field of type &quot;binary&quot; as well as a primaryKey and&amp;#010 foreignKey declaration to some other DataSource; see the ${isc.DocUtils.linkForRef('class:MultiFileItem')} for an&amp;#010 overview.&amp;#010 &lt;P&gt;&amp;#010 This DataSource need only be capable of &quot;fetch&quot;, &quot;add&quot; and &quot;remove&quot; - &quot;update&quot; is unused." name="dataSource" valueType="DataSource or ID" defaultValue="null" type="attr" definingClass="class:MultiFileItem">
</docItem>
<docItem ref="method:DynamicForm.setFields" flags="" description=" Set the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. &amp;#010 Takes an array of item definitions, which will be converted to ${isc.DocUtils.linkForRef('class:FormItem')}s and &amp;#010 displayed in the form.&lt;br&gt;&amp;#010 Note: Do not attempt to create ${isc.DocUtils.linkForRef('class:FormItem')} instances directly. This method should be&amp;#010 passed the raw properties for each item only.&amp;#010&amp;#010" name="setFields" type="method" definingClass="class:DynamicForm">
<params description="list of new items to show in the form" optional="false" name="itemList" type="Array of objects">
</params>
    <groups>elements</groups>
</docItem>
<docItem ref="attr:Menu.iconHeight" flags="IRW" description="The default height applied to custom icons in this menu. This is used whenever&amp;#010          item.iconHeight is not specified." name="iconHeight" valueType="number" defaultValue="16" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="class:ToolStrip" description="Base class for creating toolstrips like those found in browsers and office applications: a&amp;#010 mixed set of controls including ${isc.DocUtils.linkForRef('class:ImgButton','icon buttons')}, &amp;#010 ${isc.DocUtils.linkForRef('attr:Button.radioGroup','radio button groups')}, ${isc.DocUtils.linkForRef('class:MenuButton','menus')},&amp;#010 ${isc.DocUtils.linkForRef('class:ComboBoxItem','comboBoxes')}, ${isc.DocUtils.linkForRef('class:LayoutSpacer','spacers')}, ${isc.DocUtils.linkForRef('class:Label','status displays')} and &amp;#010 ${isc.DocUtils.linkForRef('class:SelectItem','drop-down selects')}.  &amp;#010 &lt;P&gt;&amp;#010 All of the above components are placed in the ${isc.DocUtils.linkForRef('attr:ToolStrip.members','members array')} to form&amp;#010 a ToolStrip.  Note that the ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} mentioned above (ComboBox and&amp;#010 drop-down selects) need to be placed within a ${isc.DocUtils.linkForRef('class:DynamicForm')} as usual.&amp;#010 &lt;P&gt;&amp;#010 The special strings &quot;separator&quot; and &quot;resizer&quot; can be placed in the members array to create&amp;#010 separators and resizers respectively.&amp;#010 &lt;P&gt;&amp;#010 Also see the ${isc.DocUtils.linkForExampleId('toolstrip')} example in the Feature Explorer." name="ToolStrip" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:ToolStrip.members</attrs>
    <attrs>attr:ToolStrip.height</attrs>
    <attrs>attr:ToolStrip.styleName</attrs>
    <attrs>attr:ToolStrip.vertical</attrs>
    <attrs>attr:ToolStrip.resizeBarClass</attrs>
    <attrs>attr:ToolStrip.resizeBarSize</attrs>
    <attrs>attr:ToolStrip.separatorClass</attrs>
    <attrs>attr:ToolStrip.separatorSize</attrs>
    <examples>${isc.DocUtils.linkForExampleId('toolstrip')}</examples>
</docItem>
<docItem ref="method:ListGrid.sort" flags="" description="          Sorts a listGrid explicitly by the column given by sortFieldNum, if provided, in &amp;#010          ascending or descending order if specified by sortDirection. If sortFieldNum is not&amp;#010          provided and listGrid.sortFieldNum is undefined, the data will be sorted by the first&amp;#010          sortable column in the listGrid in ascending order.&lt;br&gt;&amp;#010          If provided, sortFieldNum and sortDirection will be remembered on the listGrid so that&amp;#010          resort() can be called subsequently.&amp;#010" name="sort" type="method" definingClass="class:ListGrid">
<seeAlso ref="type:SortDirection">
</seeAlso>
<params description="the column number to sort by" optional="true" name="sortFieldNum" type="number">
</params>
<params description="the direction to sort in" optional="true" name="sortDirection" type="SortDirection">
</params>
<returns description="sorting worked" type="boolean"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="type:DSOperationType" description="One of the four basic operations that can be performed on DataSource data: &quot;fetch&quot;,&amp;#010 &quot;add&quot;, &quot;update&quot;, &quot;remove&quot;.  Elsewhere called CRUD operations, where CRUD stands for&amp;#010 &quot;create&quot;, &quot;retrieve&quot;, &quot;update&quot;, &quot;delete&quot;, which correspond to &quot;add&quot;, &quot;fetch&quot;, &quot;update&quot; and&amp;#010 &quot;remove&quot; in SmartClient terminology.  See ${isc.DocUtils.linkForRef('group:dataSourceOperations')} for a full&amp;#010 description." name="DSOperationType" type="type">
<values description="Fetch one or more records that match a set of search criteria." value="&quot;fetch&quot;"></values>
<values description="Store new records" value="&quot;add&quot;"></values>
<values description="Update an existing record" value="&quot;update&quot;"></values>
<values description="Remove (delete) an existing record" value="&quot;remove&quot;"></values>
</docItem>
<docItem ref="group:selection" name="selection" type="group">
    <refs>method:Selection.isSelected</refs>
    <refs>method:Selection.anySelected</refs>
    <refs>method:Selection.multipleSelected</refs>
    <refs>method:Selection.getSelection</refs>
    <refs>method:Selection.getSelectedRecord</refs>
    <refs>method:Selection.setSelected</refs>
    <refs>method:Selection.select</refs>
    <refs>method:Selection.deselect</refs>
    <refs>method:Selection.selectSingle</refs>
    <refs>method:Selection.selectList</refs>
    <refs>method:Selection.deselectList</refs>
    <refs>method:Selection.selectAll</refs>
    <refs>method:Selection.deselectAll</refs>
    <refs>method:Selection.selectItem</refs>
    <refs>method:Selection.deselectItem</refs>
    <refs>method:Selection.selectRange</refs>
    <refs>method:Selection.deselectRange</refs>
    <refs>method:GridRenderer.cellIsEnabled</refs>
    <refs>method:GridRenderer.getEventRow</refs>
    <refs>method:GridRenderer.getEventColumn</refs>
    <refs>method:GridRenderer.getNearestRowToEvent</refs>
    <refs>method:GridRenderer.getNearestColToEvent</refs>
    <refs>method:GridRenderer.selectionChanged</refs>
    <refs>method:GridRenderer.cellSelectionChanged</refs>
    <refs>method:ListGrid.selectRecord</refs>
    <refs>method:ListGrid.deselectRecord</refs>
    <refs>method:ListGrid.selectRecords</refs>
    <refs>method:ListGrid.deselectRecords</refs>
    <refs>method:ListGrid.selectAllRecords</refs>
    <refs>method:ListGrid.deselectAllRecords</refs>
    <refs>method:ListGrid.anySelected</refs>
    <refs>method:ListGrid.selectionChanged</refs>
    <refs>method:CellSelection.cellIsSelected</refs>
    <refs>method:CellSelection.anySelected</refs>
    <refs>method:CellSelection.getSelectedCells</refs>
    <refs>method:CellSelection.selectCell</refs>
    <refs>method:CellSelection.deselectCell</refs>
    <refs>method:CellSelection.selectCellList</refs>
    <refs>method:CellSelection.deselectCellList</refs>
    <refs>method:CellSelection.selectSingleCell</refs>
    <refs>method:CubeGrid.getEventRow</refs>
    <refs>method:CubeGrid.getEventColumn</refs>
    <refs>method:CubeGrid.facetValueSelectionChanged</refs>
    <refs>method:CubeGrid.getSelectedCells</refs>
    <refs>method:CubeGrid.getSelectedCellIds</refs>
    <refs>method:CubeGrid.anyCellSelected</refs>
    <refs>method:CubeGrid.cellIsSelected</refs>
    <refs>method:CubeGrid.selectCell</refs>
    <refs>method:CubeGrid.deselectCell</refs>
    <refs>method:CubeGrid.selectCells</refs>
    <refs>method:CubeGrid.deselectCells</refs>
    <refs>method:CubeGrid.selectAllCells</refs>
    <refs>method:CubeGrid.deselectAllCells</refs>
    <refs>method:CubeGrid.getSelectedFacetValues</refs>
    <refs>method:CubeGrid.facetValuesSelected</refs>
    <refs>method:CubeGrid.facetHasSelection</refs>
    <refs>method:CubeGrid.getFacetsHavingSelection</refs>
    <refs>method:CubeGrid.selectFacetValues</refs>
    <refs>method:CubeGrid.deselectFacetValues</refs>
    <refs>method:CubeGrid.selectFacetValue</refs>
    <refs>method:CubeGrid.deselectFacetValue</refs>
    <refs>method:CubeGrid.selectAllFacetValues</refs>
    <refs>method:CubeGrid.deselectAllFacetValues</refs>
    <refs>method:CubeGrid.deselectAll</refs>
    <refs>method:CubeGrid.cellSelectionChanged</refs>
    <refs>method:Toolbar.selectButton</refs>
    <refs>method:Toolbar.deselectButton</refs>
    <refs>method:ListGrid.getSelection</refs>
    <refs>method:ListGrid.getSelectedRecord</refs>
    <refs>attr:ListGrid.selection</refs>
    <refs>attr:ListGrid.selectionType</refs>
    <refs>attr:ListGrid.canDragSelect</refs>
    <refs>attr:Menu.canSelectParentItems</refs>
    <refs>attr:PickTreeItem.canSelectParentItems</refs>
    <refs>type:SelectionStyle</refs>
</docItem>
<docItem ref="group:timer" name="timer" type="group">
</docItem>
<docItem ref="attr:DynamicForm.action" flags="IRW" description="The URL to which the form will submit its values.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this is used only in the very rare case that a form is used to submit data&amp;#010 directly to a URL.  Normal server contact is through RPCManager.&lt;br&gt;&amp;#010 See ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} for more on this." name="action" valueType="string" defaultValue="&quot;#&quot;" type="attr" definingClass="class:DynamicForm">
    <setter>setAction</setter>
<seeAlso ref="group:operations">
</seeAlso>
<seeAlso ref="class:RPCManager">
</seeAlso>
    <groups>submitting</groups>
</docItem>
<docItem ref="attr:Canvas.overflow" flags="IRW" description="Controls what happens when the drawn size of the content of a Canvas is either&amp;#010			greater or smaller than the specified size of the Canvas.  Similar to the CSS&amp;#010			property overflow, but consistent across browsers.  See Overflow type for&amp;#010			details." name="overflow" valueType="Overflow" defaultValue="Canvas.VISIBLE" type="attr" definingClass="class:Canvas">
    <setter>setOverflow</setter>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:OperationBinding.defaultParams" flags="IRA" description="HTTP parameters that should be submitted with every DSRequest.&amp;#010 &lt;P&gt;&amp;#010 Useful for authenticated services that require a sessionId with every request.&amp;#010 &lt;P&gt;&amp;#010 Can be set for all operations of a given DataSource as DataSource.defaultParams." name="defaultParams" valueType="Object" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:DSRequest.textMatchStyle" flags="I" description="For &quot;fetch&quot; operations, how search criteria should be interpreted for text fields: either&amp;#010 &quot;exact&quot; for exact match, or &quot;substring&quot; for case-insensitive substring match.&amp;#010 &lt;p&gt;&amp;#010 This setting is respected by the built-in SQLDataSource.  Your custom DataSource&amp;#010 implementation can interpret the search criteria passed into &quot;fetch&quot; operations in arbitrary&amp;#010 ways; you can safely ignore this flag and use others of your own devising." name="textMatchStyle" valueType="String" defaultValue="&quot;exact&quot;" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="attr:ListGrid.groupNodeStyle" flags="IRW" description="The CSS style that group rows will have" name="groupNodeStyle" valueType="String" defaultValue="&quot;groupNode&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="group:grouping">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="method:ListGridField.recordDoubleClick" flags="" description="&amp;#010 Executed when this field is double-clicked.  Note that if ${isc.DocUtils.linkForRef('method:ListGrid.recordDoubleClick')} is&amp;#010 also defined, it will not fire for fields that define a recordDoubleClick handler.&amp;#010&amp;#010&amp;#010" name="recordDoubleClick" type="method" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.recordClick">
</seeAlso>
<params description="the listGrid that contains doubleclick event" optional="false" name="viewer" type="ListGrid">
</params>
<params description="the record that was double-clicked" optional="false" name="record" type="ListGridRecord">
</params>
<params description="number of the record clicked on in the current set of                                  displayed records (starts with 0)" optional="false" name="recordNum" type="number">
</params>
<params description="the field that was clicked on (field definition)" optional="false" name="field" type="ListGridField">
</params>
<params description="number of the field clicked on in the listGrid.fields                                  array" optional="false" name="fieldNum" type="number">
</params>
<params description="value of the cell (after valueMap, etc. applied)" optional="false" name="value" type="object">
</params>
<params description="raw value of the cell (before valueMap, etc applied)" optional="false" name="rawValue" type="object">
</params>
    <examples>${isc.DocUtils.linkForExampleId('recordClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="attr:FormItem.errorIconHeight" flags="IRW" description="Height of the error icon, if we're showing icons when validation errors occur." name="errorIconHeight" valueType="number" defaultValue="16" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.showErrorIcon">
</seeAlso>
    <groups>errorIcon</groups>
</docItem>
<docItem ref="attr:SelectItem.pickerIconStyle" flags="IRW" description="Base CSS class name for a form item's picker icon cell. If unset inherits from &amp;#010 this items &lt;code&gt;controlStyle&lt;/code&gt;." name="pickerIconStyle" valueType="FormItemBaseStyle" defaultValue="&quot;selectItemPickerIcon&quot;, [IRA]" type="attr" definingClass="class:SelectItem">
<seeAlso ref="attr:SelectItem.controlStyle">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ResultSet.indexOf" flags="" description=" Return the position in the list of the first instance of the specified object.&amp;#010 &lt;p&gt;&amp;#010 If pos is specified, starts looking after that position.&amp;#010 &lt;p&gt;&amp;#010 Returns -1 if not found.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; ResultSet.indexOf() only inspects the current cache of records, so it is only&amp;#010 appropriate for temporary presentation purposes.  For example, it would not be appropriate&amp;#010 to hold onto a record and attempt to use indexOf() to determine if it had been deleted.&amp;#010&amp;#010" name="indexOf" type="method" definingClass="class:ResultSet">
<params description="object to look for" optional="false" name="obj" type="any">
</params>
<params description="earliest index to consider" optional="true" name="pos" type="number">
</params>
<params description="last index to consider" optional="true" name="endPos" type="number">
</params>
<returns description="position of the item, if found, -1 if not found" type="number"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="classAttr:Validator.requiredField" flags="IRA" description="Default error message to display when validation fails for a field marked as required,&amp;#010  or a field with a standard &lt;code&gt;requiredIf&lt;/code&gt; type validator whose condition &amp;#010  evaluates to true, because the field has no value." name="requiredField" valueType="string" defaultValue="'Field is required'" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:SliderItem.sliderProperties" flags="IR" description="Properties to add to the automatically created ${isc.DocUtils.linkForRef('class:Slider')} used by this&amp;#010 FormItem.  See the ${isc.DocUtils.linkForRef('class:Slider')} class for reference." name="sliderProperties" valueType="Slider properties" defaultValue="null" type="attr" definingClass="class:SliderItem">
</docItem>
<docItem ref="attr:DetailViewer.labelPrefix" flags="IRW" description="text to put before a label" name="labelPrefix" valueType="string" defaultValue="&quot;&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>labels</groups>
</docItem>
<docItem ref="method:MenuBar.addMenus" flags="" description=" Dynamically update the menuBar to include additional menus. Will update the visible set&amp;#010 of buttons as appropriate&amp;#010" name="addMenus" type="method" definingClass="class:MenuBar">
<params description="Array of new menus to add" optional="false" name="newMenus" type="array">
</params>
<params description="desired starting position of the new menus in the existing menus   array" optional="false" name="position" type="number">
</params>
</docItem>
<docItem ref="attr:StretchImgButton.showDisabled" flags="IRW" description="Should we visibly change state when disabled?" name="showDisabled" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StretchImgButton">
    <groups>state</groups>
</docItem>
<docItem ref="method:List.getItems" flags="" description=" Return the items at a list of specified positions.&amp;#010&amp;#010" name="getItems" type="method" definingClass="interface:List">
<params description="array of positions" optional="false" name="itemList" type="List of Number">
</params>
<returns description="subset of the array, in the same order as itemList" type="array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:StatefulCanvas.isSelected" flags="" description=" Find out if this object is selected&amp;#010" name="isSelected" type="method" definingClass="class:StatefulCanvas">
<returns type="boolean">
</returns>
    <groups>state</groups>
</docItem>
<docItem ref="classMethod:DataSource.get" flags="" description=" Synonym of ${isc.DocUtils.linkForRef('classMethod:DataSource.getDataSource')}: Lookup a DataSource by ID.&amp;#010&amp;#010" name="get" type="classMethod" definingClass="class:DataSource">
<params description="DataSource ID" optional="false" name="ID" type="identifier">
</params>
<returns description="the DataSource with this ID, if loaded, otherwise null." type="DataSource"></returns>
</docItem>
<docItem ref="classAttr:ValidatorTypes.contains" flags="IR" description="Determine whether a string value contains some substring specified via &amp;#010 &lt;code&gt;validator.substring&lt;/code&gt;." name="contains" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
</docItem>
<docItem ref="attr:GridRenderer.showEmptyMessage" flags="IRW" description="Indicates whether the text of the emptyMessage property should be displayed if no data is&amp;#010 available." name="showEmptyMessage" valueType="boolean" defaultValue="true" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="attr:GridRenderer.emptyMessage">
</seeAlso>
    <groups>emptyMessage</groups>
</docItem>
<docItem ref="attr:ListGridField.editorProperties" flags="IRWA" description="Properties to apply the the form item created to edit this field. (Only used if&amp;#010 this field is editable).&amp;#010 &lt;P&gt;&amp;#010 For example, if you have a field &quot;shoeSize&quot; with ${isc.DocUtils.linkForRef('attr:DataSourceField.editorType')} set&amp;#010 to &quot;SpinnerItem&quot; in order to use a SpinnerItem as your field editor, and you want to pass the&amp;#010 ${isc.DocUtils.linkForRef('attr:SpinnerItem.step')} property to the created SpinnerItem:&amp;#010 &lt;pre&gt;&amp;#010    fields : [&amp;#010        { name:&quot;shoeSize&quot;, editorType:&quot;SpinnerItem&quot;, &amp;#010          editorProperties : { step:0.5 } },&amp;#010        ... other fields ...&amp;#010    ]&amp;#010 &lt;/pre&gt;" name="editorProperties" valueType="FormItem properties" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <examples>${isc.DocUtils.linkForExampleId('customEditors')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="method:Chart.setupChart" flags="" description=" General facet and data model setup, including auto-derivation of facetValues from data if&amp;#010 necessary.  Should be called by any concrete charting implementation before calling any&amp;#010 other Chart method.&amp;#010&amp;#010" name="setupChart" type="method" definingClass="interface:Chart">
</docItem>
<docItem ref="attr:Dialog.toolbarButtons" flags="IR" description="Array of Buttons to show in the ${isc.DocUtils.linkForRef('attr:Dialog.showToolbar','toolbar')}, if shown.&amp;#010 &lt;P&gt;&amp;#010 The set of buttons to use is typically set by calling one of the shortcuts such as&amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.say')} or ${isc.DocUtils.linkForRef('classMethod:isc.confirm')}.  A custom set of buttons can be passed to&amp;#010 these shortcuts methods via the &quot;properties&quot; argument, or to a directly created Dialog.&amp;#010 &lt;P&gt;&amp;#010 In both cases, a mixture of ${isc.DocUtils.linkForRef('type:DialogButtons','built-in buttons')}, custom buttons,&amp;#010 and other components (such as a ${isc.DocUtils.linkForRef('class:LayoutSpacer')}) can be passed.  Built-in buttons&amp;#010 can be referred to as &lt;code&gt;isc.Dialog.OK&lt;/code&gt;, for example:&amp;#010 &lt;pre&gt;&amp;#010 isc.Dialog.create({&amp;#010    toolbarButtons:[&amp;#010       isc.Dialog.OK, &amp;#010       isc.Dialog.CANCEL, &amp;#010       isc.LayoutSpacer.create({width:50}), &amp;#010       { title:&quot;Not now&quot;, click:&quot;doSomething()&quot; }&amp;#010    ]&amp;#010 })&amp;#010 &lt;/pre&gt;&amp;#010 Built-in buttons will call standard methods on the Dialog itself, such as&amp;#010 ${isc.DocUtils.linkForRef('method:Dialog.cancelClick')}, as explained in the &amp;#010 ${isc.DocUtils.linkForRef('type:DialogButtons','list of built-in buttons')}." name="toolbarButtons" valueType="Array of Button or Button Properties" defaultValue="null" type="attr" definingClass="class:Dialog">
</docItem>
<docItem ref="attr:DSRequest.operationType" flags="IR" description="Type of operation being performed, &quot;fetch&quot;, &quot;add&quot;, &quot;remove&quot; or &quot;update&quot;.&amp;#010 &lt;P&gt;&amp;#010 This property is generally automatically populated, for example when calling&amp;#010 &lt;code&gt;fetchData()&lt;/code&gt; on a DataSource or DataBound component the operationType is&amp;#010 automatically set to &quot;fetch&quot;." name="operationType" valueType="DSOperationType" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="attr:Snapbar.showRollOverGrip" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the&amp;#010 'Over' state on the grip image when the user rolls over on this widget. &amp;#010 Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showRollOver')} is false" name="showRollOverGrip" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Snapbar">
    <groups>grip</groups>
</docItem>
<docItem ref="attr:DataSource.useFlatFields" flags="IR" description="Like ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields')}, but applies to all DataBound components&amp;#010 that bind to this DataSource." name="useFlatFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>fields</groups>
</docItem>
<docItem ref="attr:FacetValue.borderAfter" flags="IR" description="CSS line style to apply as a border after this facetValue" name="borderAfter" valueType="String" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="classMethod:FileLoader.loadISC" flags="" description="&amp;#010 Loads the specified SmartClient modules and skin in defer mode.  Calling this method is&amp;#010 equivalent to using the &lt;code&gt;loadISC&lt;/code&gt; JSP tag with &lt;code&gt;defer=&quot;true&quot;&lt;/code&gt;.&amp;#010&amp;#010" name="loadISC" type="classMethod" definingClass="class:FileLoader">
<params description="Name of the skin to load.  If not specified, the skin specified by the                        default ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultSkin')} will be used.&amp;#010                        Instead of a skin name, you can specify a skinDir - this works just&amp;#010                        like ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - the skin assumed to be a skinDir if&amp;#010                        there's at least one forward slash (/) in the name." optional="true" name="skin" type="String">
</params>
<params description="List of modules to load.  If not specified, the list of modules                                   specified by the default&amp;#010                                   ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultModules')} will be used.  You&amp;#010                                   can specify modules as e.g: &quot;Core,Foundation&quot; or as [&quot;Core&quot;,&amp;#010                                   &quot;Foundation&quot;]" optional="true" name="modules" type="String or Array">
</params>
<params description="Optional code to execute when all specified modules and                                      skin have loaded." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="attr:GridRenderer.fixedRowHeights" flags="IRWA" description="Should we vertically clip cell contents, or allow rows to expand vertically to show all&amp;#010 contents?&amp;#010 &lt;P&gt;&amp;#010 If we allow rows to expand, the row height as derived from&amp;#010 ${isc.DocUtils.linkForRef('method:GridRenderer.getRowHeight','getRowHeight()')} or the&amp;#010 default ${isc.DocUtils.linkForRef('attr:GridRenderer.cellHeight')} is treated as a minimum." name="fixedRowHeights" valueType="boolean" defaultValue="true" type="attr" definingClass="class:GridRenderer">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="classMethod:isc.getValues" flags="" description="&amp;#010	Return all values of a given object&amp;#010&amp;#010" name="getValues" type="classMethod" definingClass="class:isc">
<params description="object to get properties from" optional="false" name="object" type="object">
</params>
<returns description="values of all properties.  NOTE: never null" type="Array"></returns>
</docItem>
<docItem ref="attr:ActiveXControl.id" flags="IR" description="Sets the 'id' attribute on the object.  If a name is not provided it will be&amp;#010  auto-generated.  Note that in general you don't need to set this.  If you have a reference to&amp;#010  your ISC ActiveX control object you can simply call&amp;#010  ${isc.DocUtils.linkForRef('method:ActiveXControl.getPluginHandle')} to get a handle to the element." name="id" valueType="string" defaultValue="null" type="attr" definingClass="class:ActiveXControl">
<seeAlso ref="method:ActiveXControl.getPluginHandle">
</seeAlso>
<seeAlso ref="method:ActiveXControl.getPluginID">
</seeAlso>
</docItem>
<docItem ref="classAttr:Dialog.APPLY_BUTTON_TITLE" flags="IRW" description="Title for the &lt;code&gt;&quot;Apply&quot;&lt;/code&gt; button." name="APPLY_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;Apply&quot;" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Array.addList" flags="" description=" Add a list of items to this array.&amp;#010 &lt;P&gt;&amp;#010 Note: you can specify that a subset range be added by passing start and end indices&amp;#010&amp;#010" name="addList" type="method" definingClass="object:Array">
<params description="list of items to add" optional="false" name="list" type="array">
</params>
<params description="optional start index in list" optional="true" name="listStartRow" type="number">
</params>
<params description="optional end index in list (non-inclusive)" optional="true" name="listEndRow" type="number">
</params>
<returns description="list of items that were added" type="list"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="classMethod:History.getCurrentHistoryId" flags="" description="&amp;#010 Returns the current history id as reflected by the current URL.&amp;#010&amp;#010" name="getCurrentHistoryId" type="classMethod" definingClass="class:History">
<returns description="The current history id as reflected by the current URL." type="String"></returns>
</docItem>
<docItem ref="attr:StretchImgButton.valign" flags="IRW" description="Vertical alignment of this component's title." name="valign" valueType="VerticalAlignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:StretchImgButton">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:RichTextEditor.fontNames" flags="IRA" description="ValueMap of css fontName properties to font name titles to display in the font selector &amp;#010  if &lt;code&gt;&quot;fontSelector&quot;&lt;/code&gt; is included in ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} &amp;#010  for this editor.&amp;#010  Default value for this attribute:&lt;br&gt;&amp;#010 &lt;code&gt; {&amp;#010 &amp;nbsp;&amp;nbsp;&quot;arial,helvetica,sans-serif&quot;:&quot;Arial&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;'courier new,courier,monospace':&quot;Courier New&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;'georgia,times new roman,times,serif':&quot;Georgia&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;'tahoma,arial,helvetica,sans-serif':&quot;Tahoma&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;'times new roman,times,serif':&quot;Times New Roman&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;'verdana,arial,helvetica,sans-serif':&quot;Verdana&quot;,&amp;#010 &amp;nbsp;&amp;nbsp;&quot;impact&quot;:&quot;Impact&quot;}&lt;/code&gt;" name="fontNames" valueType="object" defaultValue="{}" type="attr" definingClass="class:RichTextEditor">
</docItem>
<docItem ref="attr:TabSet.bottomEdgeSizes" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeSizes&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeSizes&lt;/code&gt;, &lt;code&gt;topEdgeSizes&lt;/code&gt; and &lt;code&gt;bottomEdgeSizes&lt;/code&gt; &amp;#010 propertes allow the sizes of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="bottomEdgeSizes" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:ListGrid.headerBackgroundColor" flags="IRW" description="BackgroundColor for the header toolbar. Typically this is set to match the color&amp;#010 of the header buttons." name="headerBackgroundColor" valueType="color" defaultValue="&quot;#CCCCCC&quot;" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:GridRenderer.cellHeight" flags="IRW" description="The default height of each row in pixels." name="cellHeight" valueType="number" defaultValue="20" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.getRowHeight">
</seeAlso>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:TabSet.symmetricPickerButton" flags="IR" description="If this TabSet is showing a ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker','tab picker button')}, this&amp;#010 property determines whether the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonHSrc')} and&amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonVSrc')} media will be used for vertical and horizontal tab-bar&amp;#010 picker buttons, or whether separate media should be used for each possible &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} based on the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}&amp;#010 property  for this tabSet." name="symmetricPickerButton" valueType="boolean" defaultValue="true" type="attr" definingClass="class:TabSet">
    <groups>tabBarScrolling</groups>
</docItem>
<docItem ref="classMethod:Array.compareDescending" flags="A" description=" Compare two values for a descending order sort, using locale-sensitive comparison.&amp;#010" name="compareDescending" type="classMethod" definingClass="object:Array">
<params description="first value to compare" optional="false" name="first" type="any">
</params>
<params description="second value to compare" optional="false" name="second" type="any">
</params>
<returns description="negative == first is larger, 0 == same value, positive == second is larger" type="number"></returns>
    <groups>sorting</groups>
</docItem>
<docItem flags="IRWA" type="attr" ref="attr:Canvas.canFocus" description="Can this widget be allowed to become the target of keyboard events?&amp;#010 &lt;P&gt;&amp;#010 If canFocus is unset (the default), only scrollable widgets with visible scrollbars are&amp;#010 focusable, to allow for keyboard scrolling.&amp;#010 &lt;P&gt;&amp;#010 A widget normally receives focus by being clicked on or tabbed to." name="canFocus" valueType="boolean" defaultValue="null" definingClass="class:Canvas">
    <setter>setCanFocus</setter>
    <examples>${isc.DocUtils.linkForExampleId('focus')}</examples>
    <groups>focus</groups>
    <groups>events</groups>
</docItem>
<docItem ref="method:GridRenderer.cellMouseUp" flags="A" description=" Called when a cell receives a mouseup event.&amp;#010&amp;#010" name="cellMouseUp" type="method" definingClass="class:GridRenderer">
<params description="Record object (retrieved from getCellRecord(rowNum, colNum))" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="classMethod:Page.setSkinDir" flags="" description="		Specify the URL for media that's part of the skin&amp;#010&amp;#010" name="setSkinDir" type="classMethod" definingClass="class:Page">
<params description="New skinDir URL" optional="true" name="URL" type="string">
</params>
    <groups>skins</groups>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="attr:DateChooser.nextMonthIcon" flags="IRW" description="Icon for the next month button" name="nextMonthIcon" valueType="URL" defaultValue="&quot;[SKIN]arrow_right.gif&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:ListGrid.canFreezeFields" flags="IRW" description="Whether an interface should be shown to allow user is allowed to dynamically &quot;freeze&quot; or&amp;#010 &quot;unfreeze&quot; columns with respect to horizontally scrolling.  &amp;#010 &lt;P&gt;&amp;#010 Note that the &lt;code&gt;canFreezeFields&lt;/code&gt; setting enables or disables the user&amp;#010 interface for freezing and unfreezing fields only.  Fields can be programmatically&amp;#010 frozen via setting ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','field.frozen')} to true when the grid is&amp;#010 created, or dynamically frozen and unfrozen via ${isc.DocUtils.linkForRef('method:ListGrid.freezeField')} and&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.unfreezeField')}." name="canFreezeFields" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>frozenFields</groups>
</docItem>
<docItem ref="method:ListGrid.getFieldNum" flags="A" description="		Given a field or field id, return it's index in the fields array&amp;#010" name="getFieldNum" type="method" definingClass="class:ListGrid">
<params description="field number or field.name" optional="false" name="fieldID" type="string || number">
</params>
<returns description="index of the field within this.fields" type="string"></returns>
    <groups>display</groups>
</docItem>
<docItem ref="attr:Window.headerIcon" flags="R" description="Header icon shown at left end of header by default." name="headerIcon" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:ToolbarItem.buttons" flags="IRW" description="List of buttons for the toolbar.&amp;#010  Each buttons should be specified as a simple JS object with properties to apply to the&amp;#010  button to be displayed. Note that any &lt;code&gt;click&lt;/code&gt; stringMethod applied to the&amp;#010  button will be passed 2 parameters: &lt;code&gt;form&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt;." name="buttons" valueType="Array" defaultValue="null" type="attr" definingClass="class:ToolbarItem">
    <groups>items</groups>
</docItem>
<docItem ref="attr:RichTextItem.controlGroups" flags="IA" description="${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} to display for this editor.&amp;#010 Each controlGroup should be a property set either on this item or on the RichTextEditor&amp;#010 prototype and should be set to an array of ${isc.DocUtils.linkForRef('type:ControlName')}s." name="controlGroups" valueType="Array" defaultValue="null" type="attr" definingClass="class:RichTextItem">
</docItem>
<docItem ref="method:Tree.removeList" flags="" description="&amp;#010 Remove a list of nodes (not necessarily from the same parent), and all children of those nodes.&amp;#010			&amp;#010" name="removeList" type="method" definingClass="class:Tree">
<params description="list of nodes to remove" optional="false" name="nodeList" type="List of TreeNode">
</params>
<returns description="true if the tree was changed as a result of this call" type="boolean"></returns>
</docItem>
<docItem ref="method:Canvas.moveBy" flags="" description="			Moves the widget deltaX pixels to the right and deltaY pixels down. Pass negative&amp;#010          numbers to move up and/or to the left.&amp;#010" name="moveBy" type="method" definingClass="class:Canvas">
<params description="amount to move horizontally (may be negative)" optional="false" name="deltaX" type="number">
</params>
<params description="amount to move vertically (may be negative)" optional="false" name="deltaY" type="number">
</params>
<returns description="whether the component actually moved" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('move')}</examples>
    <groups>positioning</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:StatefulCanvas.actionType" description="Behavior on state changes -- BUTTON, RADIO or CHECKBOX" name="actionType" valueType="SelectionType" defaultValue="&quot;button&quot;" definingClass="class:StatefulCanvas">
    <getter>getActionType</getter>
    <setter>setActionType</setter>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:BlurbItem.showTitle" flags="IRW" description="Blurb items show no title by default." name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:BlurbItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Time.compareTimes" flags="" description=" Compares the times of 2 dates, or strings. If a string is passed as one of the &amp;#010 parameters it should be in a format that converts to a valid time such as &lt;code&gt;&quot;1:30pm&quot;&lt;/code&gt;, &amp;#010 &lt;code&gt;&quot;13:30&quot;&lt;/code&gt;, or &lt;code&gt;&quot;1:30:45pm&quot;&lt;/code&gt;&amp;#010" name="compareTimes" type="classMethod" definingClass="class:Time">
<params description="First time to compare" optional="false" name="time1" type="Date|string">
</params>
<params description="Second time to compare" optional="false" name="time2" type="Date|string">
</params>
<returns description="True if the times match, false if not" type="boolean"></returns>
</docItem>
<docItem ref="method:Progressbar.setLength" flags="" description=" Sets the length of the progressbar to newLength. This is the width of a horizontal progressbar,&amp;#010 or the height of a vertical progressbar.&amp;#010&amp;#010" name="setLength" type="method" definingClass="class:Progressbar">
<params description="the new length of the progressbar" optional="false" name="newLength" type="number">
</params>
</docItem>
<docItem ref="method:WebService.setLocation" flags="A" description=" Set location can be used when the actual URL where a service will be accessible isn't&amp;#010 known until runtime, or changes at runtime, hence can't be embedded in the service&amp;#010 definition.&amp;#010 &lt;P&gt;&amp;#010 With an operation parameter, &lt;code&gt;setLocation()&lt;/code&gt; can be used to set a distinct&amp;#010 URL for each web service operation.  This is a development-time only feature that allows&amp;#010 XML flat files to be placed at various URLs on a server, to serve as spoofed responses&amp;#010 for each web service operation.&amp;#010&amp;#010" name="setLocation" type="method" definingClass="class:WebService">
<params description="URL where web service can be contacted" optional="false" name="location" type="URL">
</params>
<params description="optional operation name to set the location for, for                             debugging only" optional="true" name="operation" type="String">
</params>
    <groups>webService</groups>
</docItem>
<docItem ref="method:ValuesManager.setFieldErrors" flags="" description=" Sets validation errors for some field in the valuesManager.&lt;br&gt;&amp;#010 Errors passed in should be a string (for a single error message) or an array of strings.&amp;#010 Pass in the showErrors parameter to immediately display the errors to the user by &amp;#010 redrawing the appropriate member form item (or if no visible item is found for the field&amp;#010 firing ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.&amp;#010" name="setFieldErrors" type="method" definingClass="class:ValuesManager">
<params description="name of field to apply errors to" optional="false" name="fieldName" type="string">
</params>
<params description="error messages for the field" optional="false" name="errors" type="string | array of strings">
</params>
<params description="should the error(s) be immediately displayed to the user?" optional="false" name="showErrors" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="attr:ListGridField.editorType" flags="IRWA" description="Name of form item class to use for the form item created to edit this field. &amp;#010      (Only used if this field is editable).&lt;br&gt;&amp;#010      Note: If this is not specified, the edit-form item type may be derived from the&amp;#010      &lt;code&gt;editorType&lt;/code&gt; property, typically inherited from datasource fields, or &amp;#010      from the &lt;code&gt;type&lt;/code&gt; of the field (showing the appropriate form item for &amp;#010      the data-type). See the ${isc.DocUtils.linkForRef('group:editing')} overview for more on editing ListGrid&amp;#010      fields." name="editorType" valueType="FormItem className" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.canEdit">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('customEditors')}</examples>
    <groups>editing</groups>
</docItem>
<docItem ref="method:TabSet.disableTab" flags="" description=" If the specified tab is enabled, disable it now.&amp;#010" name="disableTab" type="method" definingClass="class:TabSet">
<seeAlso ref="attr:Tab.disabled">
</seeAlso>
<params optional="false" name="tab" type="Tab | number | ID">
</params>
</docItem>
<docItem ref="group:cues" description="Visual hints for the user that something can be done to this object" name="cues" type="group">
    <refs>method:Canvas.setOpacity</refs>
    <refs>method:Canvas.setCursor</refs>
    <refs>attr:Canvas.cursor</refs>
    <refs>attr:Canvas.disabledCursor</refs>
    <refs>attr:Canvas.opacity</refs>
    <refs>attr:Canvas.contextMenu</refs>
    <refs>type:Cursor</refs>
</docItem>
<docItem ref="attr:ListGrid.groupIcon" flags="IRW" description="The URL of the base icon for the group icons in this treegrid." name="groupIcon" valueType="SCImgURL" defaultValue="&quot;[SKINIMG]/TreeGrid/opener.gif&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="group:grouping">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem type="class" ref="class:ViewLoader" description="The ViewLoader component can be used to load new SmartClient-based user interfaces into a&amp;#010 running application.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; before using a ViewLoader, be sure that you have read about and understood the&amp;#010 ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient Architecture')}.  The most responsive and&amp;#010 scalable application architecture preloads views rather than using ViewLoaders.&amp;#010 &lt;P&gt;&amp;#010 A ViewLoader is a Canvas, and can be provided anywhere a Canvas can be provided: as a Tab&amp;#010 pane, and Layout member, etc.  When a ViewLoader draws, it shows a&amp;#010 ${isc.DocUtils.linkForRef('attr:ViewLoader.loadingMessage','loading message')}, then&amp;#010 performs an RPC to the ${isc.DocUtils.linkForRef('attr:ViewLoader.viewURL','viewURL')} to load components.&amp;#010 &lt;P&gt;&amp;#010 The response from the viewURL should be SmartClient components defined in JavaScript, with no&amp;#010 surrounding &amp;lt;SCRIPT&amp;gt; tags or other HTML framing.  The returned script can be&amp;#010 dynamically generated, for example, it may be the result of a JSP containing an XML view&amp;#010 description enclosed in ${isc.DocUtils.linkForRef('group:xmlTag','&amp;lt;isomorphicXML&amp;gt;')} tags.&amp;#010 &lt;P&gt;&amp;#010 In the returned script, the special variable &quot;viewLoader&quot; is available to refer to the&amp;#010 ViewLoader instance that is loading components.  The intended usage is that the returned&amp;#010 script creates a view consisting of SmartClient components, then calls&amp;#010 &lt;code&gt;viewLoader.setView(myView)&lt;/code&gt; to place the loaded view into the ViewLoader.&amp;#010 If the view does not call setView() explicitly, the viewLoader will find the last top-level&amp;#010 UI component (Canvas subclass) created by the view and set that as the current view.&amp;#010 Top-level in this case means that the UI component is not contained in another UI component&amp;#010 as a member or child.&amp;#010 &lt;p&gt;&amp;#010 The ViewLoader relies on the XMLHttpRequest object which can be disabled by end-users in some&amp;#010 supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information." name="ViewLoader">
    <methods>method:ViewLoader.setViewURL</methods>
    <methods>method:ViewLoader.handleError</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:ViewLoader.loadingMessage</attrs>
    <attrs>attr:ViewLoader.viewURL</attrs>
    <attrs>attr:ViewLoader.viewURLParams</attrs>
    <attrs>attr:ViewLoader.viewRPCProperties</attrs>
    <attrs>attr:ViewLoader.httpMethod</attrs>
<seeAlso ref="attr:RPCRequest.evalResult">
</seeAlso>
<seeAlso ref="group:smartArchitecture" description="for general discussion of architectural best practices in      SmartClient"></seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('viewLoading')}</examples>
    <groups>viewLoading</groups>
</docItem>
<docItem ref="attr:Window.showCloseButton" flags="IRW" description="If true, show a close button in the header, which will dismiss this window by &amp;#010 calling ${isc.DocUtils.linkForRef('method:Window.closeClick')}." name="showCloseButton" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <setter>setShowCloseButton</setter>
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="attr:ImgSplitbar.vSrc" flags="IR" description="Default src to display when ${isc.DocUtils.linkForRef('attr:ImgSplitbar.vertical')} is true, &amp;#010 and ${isc.DocUtils.linkForRef('attr:ImgSplitbar.src')} is unset." name="vSrc" valueType="boolean" defaultValue="[SKIN]vgrip.png" type="attr" definingClass="class:ImgSplitbar">
<seeAlso ref="attr:ImgSplitbar.src">
</seeAlso>
</docItem>
<docItem ref="attr:DynamicForm.target" flags="IRWA" description="The name of a window or frame that will receive the results returned by the form's&amp;#010 action. The default null indicates to use the current frame.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;NOTE:&lt;/b&gt; this is used only in the very rare case that a form is used to submit data&amp;#010 directly to a URL.  Normal server contact is through&amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}." name="target" valueType="string" defaultValue="null" type="attr" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="method:ListGrid.setEditorValueMap" flags="A" description="&amp;#010 Set a valueMap to display for this field while editing.&lt;br&gt;&amp;#010 This method sets the ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueMap','field.editorValueMap')} property - &amp;#010 note that if  ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap')} has been overridden it may not make use &amp;#010 of this property.&amp;#010" name="setEditorValueMap" type="method" definingClass="class:ListGrid">
<params description="Field object or identifier" optional="false" name="fieldID" type="object | number | field name">
</params>
<params description="ValueMap to apply to the field" optional="false" name="map" type="object">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeImage" flags="IR" description="Base name of images for edges.  Extensions for each corner or edge piece will be added&amp;#010 to this image URL, before the extension.  For example, with the default base name of&amp;#010 &quot;edge.gif&quot;, the top-left corner image will be &quot;edge_TL.gif&quot;.&amp;#010 &lt;P&gt;&amp;#010 The full list of extensions is: &quot;_TL&quot;, &quot;_TR&quot;, &quot;_BL&quot;, &quot;_BR&quot;, &quot;_T&quot;, &quot;_L&quot;, &quot;_B&quot;, &quot;_R&quot;,&amp;#010 &quot;_center&quot;." name="edgeImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]/rounded/frame/FFFFFF/6.png&quot;" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:ListGridField.filterEditorProperties" flags="IRWA" description="If this ListGrid is showing a filter row&amp;#010 (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','showFilterEditor')}:true), this property&amp;#010 can be used to specify properties for the appropriate filter form item." name="filterEditorProperties" valueType="FormItem properties" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="classAttr:RPCManager.fetchDataPrompt" flags="IRW" description="Default prompt displayed to the user while an operation is running to fetch data from&amp;#010 the server.&lt;br&gt;&amp;#010 Displayed as a result of ${isc.DocUtils.linkForRef('method:ListGrid.filterData')}, ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} and&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.clearCriteria')} code paths." name="fetchDataPrompt" valueType="string" defaultValue="&quot;Finding Records that match your criteria...&quot;" type="classAttr" definingClass="class:RPCManager">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="group:changeHandling" name="changeHandling" type="group">
    <refs>attr:FormItem.validateOnChange</refs>
</docItem>
<docItem ref="attr:RPCRequest.params" flags="IRW" description="Values to be sent as simple HTTP params, as a JavaScript Object where each property/value&amp;#010 pair will become an HTTP parameter name and value.  These parameters are then accessible on&amp;#010 the server, for example, using servletRequest.getParameter(paramName) in Java Servlets.  &amp;#010 &lt;P&gt;&amp;#010 This API is primarily used in combination with ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')}.&amp;#010 &lt;P&gt;&amp;#010 When contacting the SmartClient server, setting &lt;code&gt;params&lt;/code&gt; is an opportunity to&amp;#010 send additional data aside from the main ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} payload; this is useful for &amp;#010 adding data to DataSource requests which will be kept separate from the automatically sent&amp;#010 DataSource data.&amp;#010 &lt;P&gt;&amp;#010 Note that in contrast to ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} object, the data in&amp;#010 &lt;code&gt;rpcRequest.params&lt;/code&gt; is not serialized/deserialized by the SmartClient server, and&amp;#010 all values arrive on the server as String type (like HTTP parameters always do).&amp;#010 &lt;p&gt;&amp;#010 The params value can also be a componentID or component instance that provides a method&amp;#010 getValues() that returns an Object literal.  SmartClient components&amp;#010 ${isc.DocUtils.linkForRef('class:DynamicForm')}, ${isc.DocUtils.linkForRef('class:ValuesManager')} are two such classes.  Lastly, you may&amp;#010 specify the ID of a native form element (retreivable via getElementById()) and the params&amp;#010 will be populated from there.  If there is an error resolving your params directive, it will&amp;#010 be logged to the Developer Console.&amp;#010 &lt;p&gt;&amp;#010 Note: The params are submitted once per http transaction.  If you are using &amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} to bundle multiple RPCRequests or DSRequests&amp;#010 into a single HTTP turnaround, the params from the various RPCRequests will be merged,&amp;#010 with the later-queued transactions winning on parameter name collisions.  A warning will be&amp;#010 logged in the Developer Console if multiple RPCRequests specified params." name="params" valueType="Object, others - see below" defaultValue="null" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="method:DynamicForm.setValueMap" flags="" description="		Set the valueMap for a specified item&amp;#010" name="setValueMap" type="method" definingClass="class:DynamicForm">
<params description="itemName of the item upon which the valueMap should be set." optional="false" name="itemName" type="string">
</params>
<params description="new valueMap for the field in question." optional="false" name="valueMap" type="ValueMap">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="method:CubeGrid.getFacetValueLayout" flags="" description=" &amp;#010      get the current visual order and width for the facet values of a facet or facetValueGroup&amp;#010      [ {id:facetValueId, width:currentWidth }, ... ]&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getFacetValueLayout" type="method" definingClass="class:CubeGrid">
<params description="Which facet do we want details for?" optional="false" name="id" type="facetValuegroupId | facetId">
</params>
<returns description="array of {id:facetValueId, width:width} objects" type="array"></returns>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:OperationBinding.requestProperties" flags="IR" description="Additional properties to pass through to the ${isc.DocUtils.linkForRef('class:DSRequest')} created for this operation.&amp;#010 Note that these will be cumulative with and will override on a per-property basis any&amp;#010 properties set via ${isc.DocUtils.linkForRef('attr:DataSource.requestProperties')}.&amp;#010 &lt;p&gt;&amp;#010 These properties are applied before ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} is called." name="requestProperties" valueType="DSRequest Properties" defaultValue="null" type="attr" definingClass="class:OperationBinding">
<seeAlso ref="class:DSRequest">
</seeAlso>
<seeAlso ref="attr:DataSource.requestProperties">
</seeAlso>
    <groups>clientDataIntegration</groups>
    <groups>serverDataIntegration</groups>
</docItem>
<docItem ref="attr:Facet.collapsed" flags="IR" description="For tree facets, default collapse state for parent nodes" name="collapsed" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="type:AnimationAcceleration" description="Acceleration effect for animations. Can either be a ratio function or a string.&amp;#010 Ratio functions take a value between 0 and 1 which represents how much of the &amp;#010 animation's duration has elapsed, and return another value between 0 and 1 indicating&amp;#010 how close the animation is to completion. For a completely linear animation, the &amp;#010 function would return the value it was passed. This allows you to bias animations to&amp;#010 [for example] speed up toward the end of the animation.&lt;br&gt;&amp;#010 The following strings are also supported for common ratio bias effects:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&quot;smoothStart&quot; - animation will speed up as time elapses&amp;#010 &lt;li&gt;&quot;smoothEnd&quot; - animation will slow down as time elapses&amp;#010 &lt;li&gt;&quot;smoothStartEnd&quot; - animation will speed up in the middle&amp;#010 &lt;li&gt;&quot;none&quot; - no bias&lt;/ul&gt;" name="AnimationAcceleration" type="type">
</docItem>
<docItem ref="method:DynamicForm.submitForm" flags="" description=" Submits the form to the URL defined by ${isc.DocUtils.linkForRef('attr:DynamicForm.action')}, &amp;#010 identically to how a plain HTML &amp;lt;form&amp;gt; element would submit data,&amp;#010 as either an HTTP GET or POST as specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.method')}.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Notes:&lt;/b&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;this is used only in the very rare case that a form is used to submit data&amp;#010 directly to a URL.  Normal server contact is through &amp;#010 ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.&lt;/li&gt;&amp;#010 &lt;li&gt;For this method to reliably include values for every field in the grid, &amp;#010      ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;&amp;#010 &lt;li&gt;To submit values for fields that do not have an editor, use ${isc.DocUtils.linkForRef('class:HiddenItem')} &amp;#010 with a ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')} set.  This is analagous to &amp;lt;input type=&quot;hidden&quot;&amp;gt;&amp;#010 in HTML forms.&amp;#010 &lt;/ul&gt;&amp;#010" name="submitForm" type="method" definingClass="class:DynamicForm">
    <groups>submitting</groups>
</docItem>
<docItem ref="method:Window.closeClick" flags="" description=" Handles a click on the close button of this window. The default implementation&amp;#010 hides the window and returns false to cancel bubbling.  Override this method if you want&amp;#010 other actions to be taken.&amp;#010" name="closeClick" type="method" definingClass="class:Window">
    <groups>buttons</groups>
</docItem>
<docItem ref="method:Progressbar.setPercentDone" flags="" description=" Sets percentDone to newPercent.&amp;#010&amp;#010" name="setPercentDone" type="method" definingClass="class:Progressbar">
<params description="percent to show as done (0-100)" optional="false" name="newPercent" type="number">
</params>
</docItem>
<docItem ref="attr:FormItem.timeFormatter" flags="IRWA" description="Time-format to apply to date type values within this formItem.  If specified, any&amp;#010 dates displayed in this item will be formatted as times using the appropriate format.&lt;br&gt;&amp;#010 Has no effect if +lilnk{formItem.dateFormatter} is also set.&lt;br&gt;&amp;#010 See also ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat')} for formatting values displayed in TimeItems." name="timeFormatter" valueType="TimeFormatter" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Label.iconWidth" flags="IR" description="Width in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconWidth" valueType="integer" defaultValue="null" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:FormItem.changed" flags="" description=" Called when a FormItem's value has been changed as the result of user interaction.  This&amp;#010 method fires after the newly specified value has been stored.&amp;#010" name="changed" type="method" definingClass="class:FormItem">
<params description="the managing DynamicForm instance" optional="false" name="form" type="DynamicForm">
</params>
<params description="the form item itself (also available as &quot;this&quot;)" optional="false" name="item" type="FormItem">
</params>
<params description="The current value (after the change)." optional="false" name="value" type="any">
</params>
    <groups>eventHandling</groups>
</docItem>
<docItem ref="attr:MenuButton.menu" flags="IRW" description="The menu to show." name="menu" valueType="Menu" defaultValue="null" type="attr" definingClass="class:MenuButton">
</docItem>
<docItem ref="method:Toolbar.selectButton" flags="" description=" Given an identifier for a button, select it.&amp;#010 The button identifier can be a number (index), string (id), or object (widget or init block),&amp;#010 as with the getButtonNumber() method.&amp;#010 &amp;#010" name="selectButton" type="method" definingClass="class:Toolbar">
<seeAlso ref="method:Toolbar.getButtonNumber">
</seeAlso>
<params description="Button / Button identifier" optional="false" name="buttonID" type="number | string | object | canvas">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="type:LogPriority" description="Priority levels for log messages" name="LogPriority" type="type">
<values description="unrecoverable error" value="Log.FATAL"></values>
<values description="error, may be recoverable" value="Log.ERROR"></values>
<values description="apparent problem, misused API, partial result" value="Log.WARN"></values>
<values description="significant events in normal operation" value="Log.INFO"></values>
<values description="diagnostics for developers" value="Log.DEBUG"></values>
<seeAlso ref="method:Log.logDebug">
</seeAlso>
</docItem>
<docItem ref="attr:Scrollbar.btnSize" flags="IRW" description="The size of the square buttons (arrows) at the ends of this scrollbar. This &amp;#010 overrides the width of a vertical scrollbar or the height of a horizontal scrollbar&amp;#010 to set the scrollbar's thickness." name="btnSize" valueType="number" defaultValue="16" type="attr" definingClass="class:Scrollbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.adjustForContent" flags="A" description=" This method tells a component to adjust for size changes made to content by external code.&amp;#010 &lt;P&gt;&amp;#010 This is for very advanced use in which the contents of a Canvas are being directly updated by&amp;#010 Ajax techniques, which is required for integration with some third-party libraries.&amp;#010 Calling this method is required because browsers do not provide consistent events by which&amp;#010 SmartClient can be notified of external content changes.&amp;#010 &lt;P&gt;&amp;#010 Only contents supplied to a widget via ${isc.DocUtils.linkForRef('attr:Canvas.contents')} or via an override of&amp;#010 ${isc.DocUtils.linkForRef('method:Canvas.getInnerHTML')} should be manipulated directly.  Contents automatically&amp;#010 generated by SmartClient components (such as the basic structure of a Button) should never be&amp;#010 manipulated: these structures are considered internal, differ by platform, and will change&amp;#010 without notice.&amp;#010" name="adjustForContent" type="method" definingClass="class:Canvas">
<params description="By default the adjustment will occur on a small delay for performance reasons. &amp;#010  Pass in this parameter to force immediate adjustment." optional="false" name="immediate" type="boolean">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ListGrid.getDragData" flags="A" description="&amp;#010 During a drag-and-drop interaction, this method returns the set of records being dragged out&amp;#010 of the ListGrid.  In the default implementation, this is the list of currently selected&amp;#010 records.&lt;p&gt;&amp;#010 &amp;#010 This method is generally called by ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} and is consulted by&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')}.&amp;#010 &amp;#010" name="getDragData" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.transferDragData">
</seeAlso>
<returns description="Array of ${isc.DocUtils.linkForRef('object:ListGridRecord')}s that are currently selected." type="Array of ListGridRecord"></returns>
    <groups>dragging</groups>
    <groups>data</groups>
</docItem>
<docItem ref="attr:ListGridField.valueIconRightPadding" flags="IRW" description="How much padding should there be on the right of valueIcons for this field&amp;#010 Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconRightPadding')}" name="valueIconRightPadding" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.valueIcons">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="classMethod:Page.getAppFilesDir" flags="" description=" Returns the directory for application-specific files (other than images).&amp;#010&amp;#010" name="getAppFilesDir" type="classMethod" definingClass="class:Page">
<params description="New app files URL." optional="true" name="URL" type="string">
</params>
    <groups>files</groups>
    <groups>images</groups>
</docItem>
<docItem ref="attr:CubeGrid.bodyMinHeight" flags="IRWA" description="Minimum height for the body of this cubeGrid" name="bodyMinHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:Slider.animateThumb" flags="IRW" description="Should the thumb be animated to its new position when the value is changed programmatically,&amp;#010 or by clicking in the slider track." name="animateThumb" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:StatefulCanvas.showDisabledIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image if the button becomes&amp;#010 disabled." name="showDisabledIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="classAttr:Hover.topOffset" flags="RW" description="When positioining the hover canvas, this will be the default top offset from the &amp;#010 mousepointer, if no explicit position was passed to the ${isc.DocUtils.linkForRef('classMethod:Hover.show')} method" name="topOffset" valueType="number" defaultValue="15" type="classAttr" definingClass="class:Hover">
</docItem>
<docItem exampleConfig="VStack.xml" ref="class:VStack" description="A subclass of Layout that simply stacks members on the vertical axis without trying to&amp;#010 manage their height.  On the horizontal axis, any members that do not have explict widths&amp;#010 will be sized to match the width of the stack." name="VStack" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
<seeAlso ref="attr:Layout.vPolicy">
</seeAlso>
</docItem>
<docItem ref="method:Canvas.isDrawn" flags="" description="      Returns the boolean true, if the widget has been completely drawn, and false otherwise.&amp;#010" name="isDrawn" type="method" definingClass="class:Canvas">
<returns description="true if drawn, false if not drawn" type="boolean"></returns>
    <groups>drawing</groups>
</docItem>
<docItem ref="method:RestDataSource.transformRequest" flags="" description=" RestDataSource.transformRequest() implemented to format request meta-data properties &amp;#010 for transmitting to the server.&lt;br&gt;&amp;#010 See ${isc.DocUtils.linkForRef('class:RestDataSource','RestDataSource overview')} for a description of the &amp;#010 standard formatting applied to requests.&amp;#010" name="transformRequest" type="method" definingClass="class:RestDataSource">
</docItem>
<docItem ref="group:iteration" title="Iteration" description="Operations on entire Arrays at once" name="iteration" type="group">
    <refs>method:Array.getProperty</refs>
    <refs>method:Array.map</refs>
    <refs>method:Array.setProperty</refs>
    <refs>method:Array.clearProperty</refs>
</docItem>
<docItem ref="attr:StatefulCanvas.showOverCanvas" flags="IRWA" description="When this property is set to true, this widget will create and show the&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas')} on user rollover." name="showOverCanvas" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
</docItem>
<docItem ref="type:listGridSortState" description="An object containing the stored sort information for a listGrid.&amp;#010 Note that this object is not intended to be interrogated directly, but may be stored &amp;#010 (for example) as a blob on the server for state persistence across sessions." name="listGridSortState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="method:TabSet.getSelectedTabNumber" flags="A" description=" Returns the index of the currently selected tab object.  &amp;#010" name="getSelectedTabNumber" type="method" definingClass="class:TabSet">
<returns description="the index of the currently selected tab object" type="number"></returns>
</docItem>
<docItem ref="method:Window.setSrc" flags="" description=" Sets the URL of the contents to display in the body of the window, redrawing if&amp;#010 necessary.&amp;#010" name="setSrc" type="method" definingClass="class:Window">
<params description="URL of new contents to be displayed in the window body" optional="false" name="url" type="string">
</params>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="type:treeGridViewState" description="An object containing the &quot;view state&quot; information for a treeGrid. In addition to the &amp;#010 state data contained by a ${isc.DocUtils.linkForRef('type:listGridViewState')} object, this will also contain the &amp;#010 current open state of the treeGrid in question.&lt;br&gt;&amp;#010 Note that this object is not intended to be interrogated directly, but may be stored &amp;#010 (for example) as a blob on the server for view state persistence across sessions." name="treeGridViewState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:ListGridField.required" flags="IRW" description="When the user edits cells in this field, is this value required to be non-empty &amp;#010 in order for validation to pass.&lt;br&gt;&amp;#010 Note: for databound listGrids, this property may be specified on the &amp;#010 ${isc.DocUtils.linkForRef('class:DataSourceField')}, enabling both client and server side validation." name="required" valueType="boolean" defaultValue="false" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.validators">
</seeAlso>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="method:ImgButton.setIconOrientation" flags="" description=" Changes the orientation of the icon relative to the text of the button.&amp;#010&amp;#010" name="setIconOrientation" type="method" definingClass="class:ImgButton">
<params description="The new orientation of the icon relative to the text of the button." optional="false" name="orientation" type="&quot;left&quot; or &quot;right&quot;">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeColor" flags="IR" description="CSS color (WITHOUT &quot;#&quot;) for the edges.  If specified, will be used as part of image&amp;#010 names.  Example: &quot;edge_88FF88_TL.gif&quot;." name="edgeColor" valueType="cssColor" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="classMethod:Class.addPropertyList" flags="" description="&amp;#010	Add default properties to all instances of this class&amp;#010&amp;#010" name="addPropertyList" type="classMethod" definingClass="class:Class">
<params description="listarray of objects with properties to add" optional="true" name="" type="object">
</params>
<returns description="the class after properties have been added to it" type="object"></returns>
</docItem>
<docItem ref="attr:Canvas.dragScrollDelay" flags="IRWA" description="If this widget supports drag-scrolling, This property specifies how many ms the&amp;#010      user must hover over the drag-scroll threshold before scrolling begins." name="dragScrollDelay" valueType="number" defaultValue="100" type="attr" definingClass="class:Canvas">
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:Layout.resizeBarSize" flags="AIRW" description="Thickness of the resizeBars in pixels" name="resizeBarSize" valueType="integer" defaultValue="7" type="attr" definingClass="class:Layout">
</docItem>
<docItem ref="attr:DSResponse.startRow" flags="R" description="Starting row of returned server results, when using paged result fetching&amp;#010 &lt;p&gt;&amp;#010 Note that startRow and endRow are zero-based - the first record is row zero." name="startRow" valueType="number" defaultValue="null" type="attr" definingClass="class:DSResponse">
    <groups>paging</groups>
</docItem>
<docItem ref="classMethod:Class.getInstanceProperty" flags="" description="&amp;#010	Gets a named property from the instance defaults for this object.&amp;#010&amp;#010" name="getInstanceProperty" type="classMethod" definingClass="class:Class">
<params description="name of the property to return" optional="false" name="property" type="string">
</params>
</docItem>
<docItem ref="attr:StatefulCanvas.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Array.find" flags="" description=" Like ${isc.DocUtils.linkForRef('method:Array.findIndex')}, but returns the object itself instead of its index.&amp;#010&amp;#010" name="find" type="method" definingClass="object:Array">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="first matching object or null if not found" type="Object"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="method:Canvas.scrollToTop" flags="" description=" Vertically scrolls the content of the widget to 0&amp;#010&amp;#010" name="scrollToTop" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonIconHeight" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the height of the icon&amp;#010 shown on the auto-generated &lt;code&gt;headerMenuButton&lt;/code&gt;" name="headerMenuButtonIconHeight" valueType="number" defaultValue="7" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="method:ListGrid.getValueIcon" flags="" description=" Returns the appropriate valueIcon for a cell based on the field and the data value for the &amp;#010 cell. Default implementation returns null if ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} is true&amp;#010 otherwise looks at ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')}.&amp;#010" name="getValueIcon" type="method" definingClass="class:ListGrid">
<params description="field associated with the cell" optional="false" name="field" type="ListGridField">
</params>
<params description="data value for the cell's record in this field." optional="false" name="value" type="any">
</params>
<params description="record associated with this cell" optional="false" name="record" type="ListGridRecord">
</params>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:SectionItem.sectionVisible" deprecated="As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('attr:SectionItem.sectionExpanded')}             instead." flags="IR" description="Whether this form section should initially be visible." name="sectionVisible" valueType="boolean" defaultValue="true" type="attr" definingClass="class:SectionItem">
</docItem>
<docItem ref="method:ListGrid.formatEditorValue" flags="" description=" Formatter to apply to values displayed within editors while a cell is being edited.&amp;#010 The value passed to this method is the raw value for the cell.&lt;br&gt;&amp;#010 If &lt;code&gt;formatEditorValue&lt;/code&gt; is defined at the field level for some cell being edited,&amp;#010 the field level method will be used to format the edit value and this method will not&amp;#010 be called for that cell.&lt;br&gt;&amp;#010 To convert the formatted value displayed within an editor back to a raw value, the&amp;#010 &lt;code&gt;parseEditorValue&lt;/code&gt; method is used.&amp;#010&amp;#010" name="formatEditorValue" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.formatEditorValue">
</seeAlso>
<seeAlso ref="method:ListGrid.parseEditorValue">
</seeAlso>
<params description="raw value for the cell being edited" optional="false" name="value" type="any">
</params>
<params description="Record object for the cell. Note: If this is a new row that has not been saved, &amp;#010   it has no associated record object. In this case the edit values will&amp;#010   be passed in as this parameter." optional="false" name="record" type="ListGridRecord">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number for the cell." optional="false" name="colNum" type="number">
</params>
<returns description="formatted value to display in the editor" type="any"></returns>
    <groups>editing</groups>
</docItem>
<docItem ref="group:tabBar" name="tabBar" type="group">
    <refs>attr:TabSet.tabBarPosition</refs>
    <refs>attr:TabSet.tabBarAlign</refs>
    <refs>attr:TabSet.tabBarThickness</refs>
    <refs>attr:TabSet.selectedTab</refs>
</docItem>
<docItem ref="group:stringProcessing" name="stringProcessing" type="group">
    <refs>method:Number.stringify</refs>
    <refs>method:String.contains</refs>
    <refs>method:String.startsWith</refs>
    <refs>method:String.endsWith</refs>
</docItem>
<docItem ref="attr:PickTreeItem.emptyMenuMessage" flags="IRA" description="This message will be displayed as a singled, disabled option in any empty menu/submenu&amp;#010 created from this item's data tree." name="emptyMenuMessage" valueType="string" defaultValue="&quot;No items to display&quot;" type="attr" definingClass="class:PickTreeItem">
    <examples>${isc.DocUtils.linkForExampleId('pickTree')}</examples>
</docItem>
<docItem ref="attr:Toolbar.vertical" flags="IRW" description="Indicates whether the buttons are drawn horizontally from left to right (false), or&amp;#010 vertically from top to bottom (true)." name="vertical" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Toolbar">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Array.slide" flags="A" description=" Slide element at position start to position destination, moving all the other elements to cover&amp;#010 the gap.&amp;#010&amp;#010" name="slide" type="method" definingClass="object:Array">
<params description="start position" optional="false" name="start" type="number">
</params>
<params description="destinationdestination position for this" optional="true" name="start" type="number">
</params>
</docItem>
<docItem ref="method:ResultSet.get" flags="" description=" Returns the record at the specified position.&amp;#010 &lt;P&gt;&amp;#010 All List access methods of the ResultSet have the semantics described in &lt;code&gt;getRange()&lt;/code&gt;.&amp;#010" name="get" type="method" definingClass="class:ResultSet">
<seeAlso ref="method:ResultSet.getRange">
</seeAlso>
<params description="position of the element to get" optional="false" name="pos" type="Number">
</params>
<returns description="whatever's at that position, undef if not found" type="object"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:Tab.canClose" flags="IRW" description="Determines whether this tab should show an icon allowing the user to dismiss the tab by&amp;#010 clicking on it directly. The URL for this icon's image will be derived from &amp;#010 ${isc.DocUtils.linkForRef('attr:TabSet.closeTabIcon')} by default, but may be overridden by explicitly specifying&amp;#010 ${isc.DocUtils.linkForRef('attr:Tab.closeIcon')}.&lt;br&gt;&amp;#010 If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')}" name="canClose" valueType="boolean" defaultValue="null" type="attr" definingClass="object:Tab">
<seeAlso ref="method:TabSet.closeClick">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('closeableTabs')}</examples>
</docItem>
<docItem ref="object:Number" description="Extra methods added to the Number object, available on all number variables." name="Number" type="object">
    <methods>method:Number.stringify</methods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="attr:DynamicForm.cellPadding" flags="IRW" description="The amount of empty space, in pixels, surrounding each form item within its cell in&amp;#010 the layout grid." name="cellPadding" valueType="number" defaultValue="2" type="attr" definingClass="class:DynamicForm">
    <groups>tableLayout</groups>
</docItem>
<docItem ref="method:GridRenderer.rowMouseDown" flags="A" description=" Called when a row receives a mousedown event.&amp;#010 &amp;#010" name="rowMouseDown" type="method" definingClass="class:GridRenderer">
<params description="record object returned from 'getCellRecord()'" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="method:Menu.setItemChecked" flags="" description="          Checks or unchecks the menu item according to the value of newState, and redraws&amp;#010          the menu if necessary. Returns true if there's a change in the checked state.&amp;#010&amp;#010" name="setItemChecked" type="method" definingClass="class:Menu">
<params description="pointer to (or number of) the item in question" optional="false" name="item" type="item or number">
</params>
<params description="true to check the menu item, false to uncheck it" optional="false" name="newState" type="boolean">
</params>
<returns description="true if the checked state was changed" type="boolean"></returns>
</docItem>
<docItem ref="attr:ListGrid.groupStartOpen" flags="IRW" description="Describes the default state of ListGrid groups when groupBy is called. &amp;#010 Possible values are:&amp;#010     &quot;all&quot;: open all groups&amp;#010     &quot;first&quot;: open the first group&amp;#010     &quot;none&quot;: start with all groups closed" name="groupStartOpen" valueType="String" defaultValue="null" type="attr" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.groupBy">
</seeAlso>
    <groups>grouping</groups>
</docItem>
<docItem ref="attr:ListGrid.filterEditorHeight" flags="IRW" description="Height for the filterEditor, if shown." name="filterEditorHeight" valueType="number" defaultValue="22" type="attr" definingClass="class:ListGrid">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="method:Canvas.markForRedraw" flags="" description="      Marks the widget as &quot;dirty&quot; so that it will be added to a queue for redraw. Once a small lag&amp;#010      time has elapsed, each widget added to the queue is then redrawn with its current property&amp;#010      values.&amp;#010&amp;#010" name="markForRedraw" type="method" definingClass="class:Canvas">
<params description="reason for performing the redraw" optional="true" name="reason" defaultValue="&quot;no reason provided&quot;" type="string"></params>
    <groups>drawing</groups>
</docItem>
<docItem ref="attr:Tab.width" flags="IRW" description="You can specify an explicit width for the tab using this property.  Note that tabs&amp;#010 automatically size to make room for the full title, but if you want to e.g. specify a&amp;#010 uniform width for all tabs in a TabSet, this property enables you to do so." name="width" valueType="number" defaultValue="100" type="attr" definingClass="object:Tab">
</docItem>
<docItem ref="method:DynamicForm.handleHiddenValidationErrors" flags="A" description=" Method to display validation error messages for fields that are not currently visible &amp;#010 in this form.&lt;br&gt;&amp;#010 This will be called when validation fails for&lt;br&gt;&amp;#010 - a hidden field in this form&lt;br&gt;&amp;#010 - if this form is databound, a datasource field with specified validators, for which we&amp;#010   have no specified form item.&lt;br&gt;&amp;#010 Implement this to provide custom validation error handling for these fields.&lt;br&gt;&amp;#010 By default hidden validation errors will be logged as warnings in the developerConsole.&amp;#010 Return false from this method to suppress that behavior.&amp;#010" name="handleHiddenValidationErrors" type="method" definingClass="class:DynamicForm">
<params description="The set of errors returned - this is an object of the form&lt;br&gt;                      &amp;nbsp;&amp;nbsp;&lt;code&gt;{fieldName:errors}&lt;/code&gt;&lt;br&gt;&amp;#010                      Where the 'errors' object is either a single string or an array&amp;#010                      of strings containing the error messages for the field." optional="false" name="errors" type="object">
</params>
</docItem>
<docItem ref="method:ValuesManager.addFieldErrors" flags="" description=" Adds validation errors to the existing set of errors for the field in question.&amp;#010 Errors passed in should be a string (for a single error message) or an array of strings.&amp;#010 Pass in the showErrors parameter to immediately display the errors to the user by &amp;#010 redrawing the appropriate member form item (or if no visible item is found for the field&amp;#010 firing ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.&amp;#010" name="addFieldErrors" type="method" definingClass="class:ValuesManager">
<params description="name of field to apply errors to" optional="false" name="fieldName" type="string">
</params>
<params description="error messages for the field" optional="false" name="errors" type="string | array of strings">
</params>
<params description="should the error(s) be immediately displayed to the user?" optional="false" name="showErrors" type="boolean">
</params>
    <groups>errors</groups>
</docItem>
<docItem ref="method:Layout.hideDropLine" flags="A" description=" Calling this method hides the dropLine shown during a drag and drop interaction with a&amp;#010 Layout that has ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')} set to true.  This method is only useful for&amp;#010 custom implementations of ${isc.DocUtils.linkForRef('method:Layout.drop')} as the default implementation calls this&amp;#010 method automatically.&amp;#010&amp;#010" name="hideDropLine" type="method" definingClass="class:Layout">
</docItem>
<docItem ref="method:CubeGrid.setFixedFacetValue" flags="" description="&amp;#010 Modify fixedFacetValues for this cubeGrid.&amp;#010&amp;#010" name="setFixedFacetValue" type="method" definingClass="class:CubeGrid">
<params description="facetId" optional="false" name="facetId" type="id">
</params>
<params description="fixedFacetValue     New fixed value for the facet, to be added to cubeGrid.fixedFacetValues.  Default is the&amp;#010     rollup value for the facet." optional="false" name="fixedFacetValueId" type="id">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="classAttr:Dialog.LOGIN_BUTTON_TITLE" flags="IRW" description="Default title for login button in the dialog displayed by &amp;#010 ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}." name="LOGIN_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;Log in&quot;" type="classAttr" definingClass="class:Dialog">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:ListGrid.cellPadding" flags="IRW" description="The amount of empty space, in pixels, surrounding each value in its cell." name="cellPadding" valueType="number" defaultValue="2" type="attr" definingClass="class:ListGrid">
    <groups>cellStyling</groups>
</docItem>
<docItem ref="method:ListGrid.bodyKeyPress" flags="" description=" Handle a keyPress event on the body.  &amp;#010 &lt;P&gt;&amp;#010 Default implementation handles navigating between records with arrow keys, and activating&amp;#010 records with space an enter.&amp;#010&amp;#010" name="bodyKeyPress" type="method" definingClass="class:ListGrid">
<params description="the event details" optional="false" name="event" type="ISCEvent">
</params>
<returns description="return value for the keyPress event." type="EventReturn"></returns>
</docItem>
<docItem exampleConfig="PasswordItem.xml" ref="class:PasswordItem" description="FormItem for password fields, where text input by the user should not be shown in readable text." name="PasswordItem" type="class">
</docItem>
<docItem ref="attr:TreeGridField.treeField" flags="IRW" description="The field containing &lt;code&gt;treeField: true&lt;/code&gt; will display the ${isc.DocUtils.linkForRef('class:Tree')}.  If no&amp;#010 field specifies this property, the first field in ${isc.DocUtils.linkForRef('attr:TreeGrid.fields')} is assigned to&amp;#010 display the ${isc.DocUtils.linkForRef('class:Tree')}." name="treeField" valueType="boolean" defaultValue="see below" type="attr" definingClass="object:TreeGridField">
    <groups>treeField</groups>
</docItem>
<docItem ref="type:EscapeKeyEditAction" description="What to do if the user hits escape while editing a cell." name="EscapeKeyEditAction" type="type">
<values description="cancels the current edit and discards edit values" value="&quot;cancel&quot;"></values>
<values description="end editing" value="&quot;done&quot;"></values>
    <groups>editing</groups>
</docItem>
<docItem ref="method:CubeGrid.getSelectedCells" flags="" description="&amp;#010  returns an array of the selected cell records&amp;#010&amp;#010  &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; getter&amp;#010" name="getSelectedCells" type="method" definingClass="class:CubeGrid">
<returns description="array of the selected cell records" type="Array"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Canvas.getRight" flags="" description=" Return the right coordinate of this object as rendered, relative to its enclosing context,&amp;#010 in pixels.&amp;#010&amp;#010" name="getRight" type="method" definingClass="class:Canvas">
<returns description="right coordinate" type="number"></returns>
    <groups>positioning</groups>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:Canvas.scrollToBottom" flags="" description=" Vertically scrolls the content of the widget to the end of its content&amp;#010&amp;#010" name="scrollToBottom" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="attr:ListGrid.wrapCells" flags="IRWA" description="Should content within cells be allowed to wrap?" name="wrapCells" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('autofitValues')}</examples>
    <groups>cellStyling</groups>
</docItem>
<docItem ref="attr:DateChooser.skinImgDir" flags="IRWA" description="Overridden directory where images for this widget (such as the month and year button icons)&amp;#010 may be found." name="skinImgDir" valueType="string" defaultValue="&quot;images/common/&quot;" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:Canvas.percentSource" flags="IRWA" description="If this canvas has its size specified as a percentage, this property allows the user to&amp;#010 explicitly designate another canvas upon which sizinng will be based.&amp;#010 &lt;P&gt;&amp;#010 If unset percentage sizing is based on&lt;br&gt;&amp;#010 - the ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')} if there is one and&amp;#010   ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is set,&lt;br&gt; &amp;#010 - otherwise on the amount of space available in this widget's parentElement, if this is&amp;#010   a child of some other widget&lt;br&gt;&amp;#010 - otherwise the page size." name="percentSource" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setPercentSource</setter>
<seeAlso ref="attr:Canvas.percentBox">
</seeAlso>
    <groups>sizing</groups>
</docItem>
<docItem ref="class:StaticTextItem" description="A FormItem that displays an uneditable value." name="StaticTextItem" type="class">
    <attrs>attr:StaticTextItem.wrap</attrs>
    <attrs>attr:StaticTextItem.clipValue</attrs>
    <attrs>attr:StaticTextItem.textBoxStyle</attrs>
</docItem>
<docItem ref="method:TreeGrid.canEditCell" flags="" description=" Overridden to disallow editing of the ${isc.DocUtils.linkForRef('attr:TreeNode.name','name')} field of this grid's data&amp;#010 tree. Also disallows editing of the auto-generated tree field, which displays the result&amp;#010 of ${isc.DocUtils.linkForRef('method:Tree.getTitle')} on the node.&amp;#010" name="canEditCell" type="method" definingClass="class:TreeGrid">
<returns description="Whether to allow editing this cell" type="boolean"></returns>
</docItem>
<docItem ref="method:TreeGrid.nodeContextClick" flags="" description="&amp;#010 This method is called when a context click occurs on a leaf or folder record.  Note that&amp;#010 if you set up a callback for &lt;code&gt;nodeContextClick()&lt;/code&gt; and&amp;#010 e.g. ${isc.DocUtils.linkForRef('method:TreeGrid.leafContextClick')}, then both will fire (in that order) if a leaf&amp;#010 is contextclicked - unless &lt;code&gt;nodeContextClick()&lt;/code&gt; returns false, in which case&amp;#010 no further contextClick callbacks will be called.&amp;#010&amp;#010" name="nodeContextClick" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.folderContextClick">
</seeAlso>
<seeAlso ref="method:TreeGrid.leafContextClick">
</seeAlso>
<params description="The TreeGrid on which the contexclick occurred." optional="false" name="viewer" type="TreeGrid">
</params>
<params description="The node (record) on which the contextclick occurred." optional="false" name="node" type="TreeNode">
</params>
<params description="Index of the row where the contextclick occurred." optional="false" name="recordNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
</docItem>
<docItem ref="method:CellSelection.selectSingleCell" flags="" description="			select a single cell and deselect everything else&amp;#010" name="selectSingleCell" type="method" definingClass="class:CellSelection">
<params description="row index of cell to select" optional="false" name="rowNum" type="number">
</params>
<params description="column index of cell to select" optional="false" name="colNum" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DynamicForm.numCols" flags="IRW" description="The number of columns of titles and items in this form's layout grid. A title and&amp;#010 corresponding item each have their own column, so to display two form elements per&amp;#010 row (each having a title and item), you would set this property to 4." name="numCols" valueType="number" defaultValue="2" type="attr" definingClass="class:DynamicForm">
    <groups>tableLayout</groups>
</docItem>
<docItem ref="attr:Window.hiliteHeaderStyle" flags="IRWA" description="Highlight style for the Window header. Displayed when a window &amp;#010 is ${isc.DocUtils.linkForRef('method:Window.flash','flashed')}" name="hiliteHeaderStyle" valueType="CSSStyleName" defaultValue="&quot;WindowHeader&quot;" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_VALIDATION_ERROR" flags="R" description="Indicates a validation failure on the server.&amp;#010 See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}&amp;#010 for more information." name="STATUS_VALIDATION_ERROR" valueType="integer" defaultValue="-4" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="method:ListGrid.cellDoubleClick" flags="" description=" Called when a cell receives a double click event.&amp;#010&amp;#010" name="cellDoubleClick" type="method" definingClass="class:ListGrid">
<params description="Record object returned from getCellRecord()" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <examples>${isc.DocUtils.linkForExampleId('cellClicks')}</examples>
    <groups>events</groups>
</docItem>
<docItem ref="group:gridHead4er" name="gridHead4er" type="group">
    <refs>attr:ListGrid.frozenHeaderBaseStyle</refs>
    <refs>attr:ListGrid.frozenHeaderTitleStyle</refs>
</docItem>
<docItem ref="classMethod:Time.createDate" flags="" description=" Creates a date object with the time set to the hours, minutes and seconds passed in.&amp;#010 (Time is in UTC time, adjusted by ${isc.DocUtils.linkForRef('classAttr:Time.UTCHoursOffset')} if appropriate).&amp;#010" name="createDate" type="classMethod" definingClass="class:Time">
<params description="Hours for the date (defaults to zero)" optional="true" name="hours" type="number">
</params>
<params description="Minutes for the date (defaults to zero)" optional="true" name="minutes" type="number">
</params>
<params description="Seconds for the date (defaults to zero)" optional="true" name="seconds" type="number">
</params>
</docItem>
<docItem ref="method:Date.toSerializeableDate" flags="A" description=" Return this date in 'serialized' format &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt;&amp;#010" name="toSerializeableDate" type="method" definingClass="class:Date">
<returns description="formatted date string" type="String"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:TreeGrid.animateFolderTime" flags="IRW" description="When animating folder opening / closing, if ${isc.DocUtils.linkForRef('attr:TreeGrid.animateFolderSpeed')} is not&amp;#010 set, this property designates the duration of the animation in ms." name="animateFolderTime" valueType="number" defaultValue="300" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="attr:TreeGrid.animateFolderSpeed">
</seeAlso>
    <groups>animation</groups>
</docItem>
<docItem ref="attr:ToolStrip.height" flags="IRW" description="ToolStrips set a default ${isc.DocUtils.linkForRef('attr:Canvas.height','height')} to avoid being stretched by&amp;#010 containing layouts." name="height" valueType="Number" defaultValue="20" type="attr" definingClass="class:ToolStrip">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:SelectItem.hiliteTextColor" deprecated="As of SmartClient version 5.5, if ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} is true,  styling will be updated for this form item on focus. The hiliting effect can therefore&amp;#010  be achieved via ${isc.DocUtils.linkForRef('attr:SelectItem.textBoxStyle')} and ${isc.DocUtils.linkForRef('attr:SelectItem.controlStyle')} &amp;#010  instead." flags="IRWA" description="Text color to apply to the select item's selected value when the SelectItem &amp;#010 recieves focus, if &lt;code&gt;hiliteOnFocus&lt;/code&gt; is true." name="hiliteTextColor" valueType="string" defaultValue="&quot;white&quot;" type="attr" definingClass="class:SelectItem">
</docItem>
<docItem ref="method:EBay.setUseProduction" flags="" description="&amp;#010 You can use web services in sandbox or production mode.  By default, this web service&amp;#010 will work in sandbox mode.  Call this method with a true value to switch to production&amp;#010 mode.&amp;#010&amp;#010" name="setUseProduction" type="method" definingClass="class:EBay">
<params description="true to use production, false to use sandbox" optional="false" name="useProduction" type="boolean">
</params>
</docItem>
<docItem ref="attr:Scrollbar.thumbMinSize" flags="IRWA" description="The minimum pixel size of the draggable thumb regardless of how large the scrolling&amp;#010 region becomes." name="thumbMinSize" valueType="number" defaultValue="12" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="class:SliderItem" description="FormItem that uses a ${isc.DocUtils.linkForRef('class:Slider')} component to present an interface for picking&amp;#010 from either a continuous range or a range with a small number of discrete values." name="SliderItem" type="class">
    <treeLocation>Client Reference/Forms/Form Items</treeLocation>
    <attrs>attr:SliderItem.vertical</attrs>
    <attrs>attr:SliderItem.minValue</attrs>
    <attrs>attr:SliderItem.maxValue</attrs>
    <attrs>attr:SliderItem.numValues</attrs>
    <attrs>attr:SliderItem.defaultValue</attrs>
    <attrs>attr:SliderItem.sliderProperties</attrs>
    <examples>${isc.DocUtils.linkForExampleId('sliderItem')}</examples>
</docItem>
<docItem ref="attr:Applet.scriptable" flags="IR" description="Usable only in IE: if true allows JS-&gt;Java LiveConnect (other platforms that support&amp;#010  LiveConnect have it enabled by default and do not allow it to be disabled)." name="scriptable" valueType="boolean" defaultValue="true" type="attr" platformNotes="Relevant only on IE." definingClass="class:Applet">
<seeAlso ref="attr:Applet.mayScript">
</seeAlso>
</docItem>
<docItem ref="attr:Canvas.animateShowTime" flags="IRWA" description="Default time for performing an animated show.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateShowTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverVAlign" flags="IRW" description="Vertical text alignment for hovers shown for items" name="itemHoverVAlign" valueType="measure" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverVAlign">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:DynamicForm.errors" description="A property list of itemName:errorMessage pairs, specifying the set of error messages&amp;#010          displayed with the corresponding form elements. Each errorMessage may be either a&amp;#010          single string or an array of strings." name="errors" valueType="array" defaultValue="null" definingClass="class:DynamicForm">
    <getter>getErrors</getter>
    <setter>setErrors</setter>
    <groups>validation</groups>
</docItem>
<docItem ref="attr:DynamicForm.validateOnChange" flags="IRW" description="If true, form fields will be validated when each item's &quot;change&quot; handler is fired&amp;#010		as well as when the entire form is submitted or validated.&lt;br&gt;&amp;#010      Note that this property can also be set at the item level to enable finer granularity&amp;#010      validation in response to user interaction - if true at either level, validation&amp;#010      will occur on change." name="validateOnChange" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.validateOnChange">
</seeAlso>
    <groups>validation</groups>
</docItem>
<docItem ref="method:TabSet.enableTab" flags="" description=" If the specified tab is disabled, enable it now.&amp;#010" name="enableTab" type="method" definingClass="class:TabSet">
<seeAlso ref="attr:Tab.disabled">
</seeAlso>
<params optional="false" name="tab" type="Tab | number | ID">
</params>
</docItem>
<docItem ref="method:Progressbar.getBreadth" flags="" description=" Returns the current height of a horizontal progressbar, or width of a vertical progressbar.&amp;#010&amp;#010" name="getBreadth" type="method" definingClass="class:Progressbar">
<returns description="the breadth of the progressbar" type="number"></returns>
</docItem>
<docItem ref="attr:ListGrid.dragTrackerStyle" flags="IRW" description="CSS Style to apply to the drag tracker when dragging occurs on this grid." name="dragTrackerStyle" valueType="CSSStyleName" defaultValue="&quot;gridDragTracker&quot;" type="attr" definingClass="class:ListGrid">
</docItem>
<docItem ref="attr:ListGrid.trackerImage" flags="IRWA" description="Default image to use for the dragTracker when things are dragged within or out of this &amp;#010 list. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format." name="trackerImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.dragTrackerMode">
</seeAlso>
<seeAlso ref="method:ListGrid.getDragTrackerIcon">
</seeAlso>
    <groups>dragTracker</groups>
</docItem>
<docItem ref="method:GridRenderer.setColumnWidth" flags="" description=" Sets the width of a single column.&amp;#010&amp;#010" name="setColumnWidth" type="method" definingClass="class:GridRenderer">
<params description="the number of the column to resize" optional="false" name="colNum" type="number">
</params>
<params description="the new width" optional="false" name="newWidth" type="number">
</params>
</docItem>
<docItem ref="attr:FormItem.titleAlign" flags="IRW" description="Alignment of this item's title in its cell.&amp;#010 &lt;p&gt;&amp;#010 If null, dynamically set according to text direction." name="titleAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:FormItem">
    <groups>title</groups>
</docItem>
<docItem ref="method:Button.setActionType" flags="" description=" Update the 'actionType' for this canvas (radio / checkbox / button)&amp;#010 If the canvas is currently selected, and the passed in actionType is 'button'&amp;#010 this method will deselect the canvas.&amp;#010" name="setActionType" type="method" definingClass="class:Button">
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:Facet.selectionBoundary" flags="IR" description="Selection boundary determining what facets / facetValues can be selected together by&amp;#010 drag selection / shift+click selection" name="selectionBoundary" valueType="enum" defaultValue="null" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="classMethod:isA.emptyString" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; the empty string?&lt;br&gt;&lt;br&gt;&amp;#010	&amp;#010	NOTE: if you prefer, you can call this as &lt;code&gt;isAn.emptyString()&lt;/code&gt;&amp;#010&amp;#010" name="emptyString" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a null string" type="boolean"></returns>
</docItem>
<docItem ref="type:Visibility" name="Visibility" type="type">
<values description="The widget visibility will match that of its parent (usually visible)." value="Canvas.INHERIT"></values>
<values description="The widget will always be visible whether its parent is or not." value="Canvas.VISIBLE"></values>
<values description="The widget will always be hidden even when its parent is visible." value="Canvas.HIDDEN"></values>
    <groups>visibility</groups>
</docItem>
<docItem ref="attr:Canvas.redrawOnResize" flags="IRWA" description="Should this element be redrawn in response to a resize?&amp;#010 &lt;P&gt;&amp;#010 Should be set to true for components whose ${isc.DocUtils.linkForRef('method:Canvas.getInnerHTML','inner HTML')} will not&amp;#010 automatically reflow to fit the component's new size." name="redrawOnResize" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Canvas">
    <groups>drawing</groups>
</docItem>
<docItem ref="method:TabSet.updateTab" flags="" description=" Set the pane for a tab.&amp;#010 &lt;P&gt;&amp;#010 Pass in the index of a tab (or a tab object), and a new pane.&amp;#010 &lt;P&gt;&amp;#010 NOTE: the old pane for the tab is not destroy()d&amp;#010 &amp;#010" name="updateTab" type="method" definingClass="class:TabSet">
<params description="tab to update" optional="false" name="tab" type="number | ID | Tab">
</params>
<params description="new pane for the tab" optional="false" name="pane" type="Canvas | ID">
</params>
</docItem>
<docItem ref="classAttr:Time.displayFormat" flags="RWA" description="Standard formatter to be used when converting a date to a time-string via ${isc.DocUtils.linkForRef('classMethod:Time.toTime')}" name="displayFormat" valueType="timeFormatter|function" defaultValue="&quot;toTime&quot;" type="classAttr" definingClass="class:Time">
    <setter>Time.setNormalDisplayFormat</setter>
</docItem>
<docItem ref="group:formLayout" title="Form Layout" description="&lt;b&gt;FormItem Placement in Columns and Rows&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 With the default tabular layout mechanism, items are laid out in rows from left to&amp;#010 right until the number of columns, specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.numCols','form.numCols')},&amp;#010 is filled, then a new row is begun.  Flags on FormItems, including&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.startRow','startRow')}, ${isc.DocUtils.linkForRef('attr:FormItem.endRow','endRow')},&amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.colSpan','colSpan')} and ${isc.DocUtils.linkForRef('attr:FormItem.rowSpan','rowSpan')}, control row and&amp;#010 column placement and spanning.  &amp;#010 &lt;P&gt;&amp;#010 Note that the most common form items (TextItem, SelectItem, etc) take up &lt;b&gt;two&lt;/b&gt;&amp;#010 columns by default: one for the form control itself, and one for it's title.  The&amp;#010 default setting of ${isc.DocUtils.linkForRef('attr:DynamicForm.numCols','form.numCols:2')} will result in one TextItem&amp;#010 or SelectItem per row.&amp;#010 &lt;P&gt;&amp;#010 Note also that ButtonItems have both startRow:true and endRow:true by default.  You must&amp;#010 set startRow and/or endRow to &lt;code&gt;false&lt;/code&gt; on a ButtonItem in order to place a&amp;#010 button in the same row as any other item.&amp;#010 &lt;P&gt;&amp;#010 The log category &quot;tablePlacement&quot; can be enabled from the Developer Console to watch&amp;#010 items being placed.  You can also set ${isc.DocUtils.linkForRef('attr:DynamicForm.cellBorder','form.cellBorder:1')} to&amp;#010 reveal the table structure for layout troubleshooting purposes.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Row and Column Sizing&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 ${isc.DocUtils.linkForRef('attr:DynamicForm.colWidths')} controls the widths of form columns.  FormItems that have&amp;#010 &quot;*&quot; for ${isc.DocUtils.linkForRef('attr:FormItem.width')} will fill the column.  FormItems with a numeric width will&amp;#010 have that width in pixels regardless of the column's specified width, which may cause the&amp;#010 column to overflow as described under ${isc.DocUtils.linkForRef('attr:DynamicForm.fixedColWidths')}.&amp;#010 &lt;P&gt;&amp;#010 For row heights, the largest pixel height specified on any item in the row is taken as a&amp;#010 minimum size for the row.  Then, any rows that have &quot;*&quot; or &quot;%&quot; height items will share&amp;#010 any height not taken up by fixed-sized items.&amp;#010 &lt;P&gt;&amp;#010 &lt;b&gt;Managing Overflow&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 Forms often contain labels, data values, or instructional text which can vary in&amp;#010 size based on the skin, data values, or internationalization settings.  There are a few&amp;#010 ways to deal with a form potentially varying in size:&amp;#010 &lt;ol&gt;&amp;#010 &lt;li&gt; Allow scrolling when necessary, using ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow:auto')}, either&amp;#010 on the immediate form, or on some parent.&amp;#010 &lt;li&gt; Place the form in a Layout along with a component that can render any specified&amp;#010 size, such as a ${isc.DocUtils.linkForRef('class:ListGrid')}.  In this case, the Layout will automatically shrink the&amp;#010 grid in order to accomodate the form.&amp;#010 &lt;li&gt; Ensure that the form can always render at a designed minimum size by reducing&amp;#010 the number of cases of variable-sized text, and testing remaining cases across all&amp;#010 supported skins.  For example, move help text into hovers on help icons, or clip &amp;#010 long text values at a maximum length and provide a hover to see the rest.&amp;#010 &lt;/ol&gt;&amp;#010&amp;#010 Several examples of Form Layout are available ${isc.DocUtils.linkForExampleId('formsLayout', 'here')}." name="formLayout" type="group">
    <treeLocation>Client Reference/Forms</treeLocation>
    <refs>attr:DynamicForm.itemLayout</refs>
    <refs>attr:FormItem.width</refs>
    <refs>attr:FormItem.height</refs>
    <refs>attr:FormItem.colSpan</refs>
    <refs>attr:FormItem.rowSpan</refs>
    <refs>attr:FormItem.startRow</refs>
    <refs>attr:FormItem.endRow</refs>
    <refs>attr:ButtonItem.startRow</refs>
    <refs>attr:ButtonItem.endRow</refs>
</docItem>
<docItem ref="method:Canvas.shouldDragScroll" flags="A" description="  If this widget is showing scrollbars, and a user drags close to the edge of the viewport,&amp;#010  should we scroll the viewport in the appropriate direction?&amp;#010  Returns this.canDragScroll by default.&amp;#010" name="shouldDragScroll" type="method" definingClass="class:Canvas">
    <groups>events</groups>
    <groups>dragging</groups>
</docItem>
<docItem ref="classMethod:isA.emptyObject" flags="" description="&amp;#010 Is &lt;code&gt;object&lt;/code&gt; an object with no properties (i.e.: &lt;code&gt;{}&lt;/code&gt;)?&amp;#010 &lt;P&gt;&amp;#010 Note that an object that has properties with null values is considered non-empty, eg &amp;#010 &lt;code&gt;{ propName:null }&lt;/code&gt; is non-empty.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you prefer, you can call this as &lt;code&gt;isAn.emptyObject()&lt;/code&gt;&amp;#010&amp;#010" name="emptyObject" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is the empty object" type="boolean"></returns>
</docItem>
<docItem ref="classMethod:Time.parseInput" flags="" description=" Converts a time-string such as &lt;code&gt;1:00pm&lt;/code&gt; to a date object with the appropriate&amp;#010 time set. Accepts most formats of time string.&amp;#010 (Time is in UTC time, adjusted by ${isc.DocUtils.linkForRef('classAttr:Time.UTCHoursOffset')} if appropriate).&amp;#010" name="parseInput" type="classMethod" definingClass="class:Time">
<params description="time string to convert to a date" optional="false" name="string" type="string">
</params>
</docItem>
<docItem ref="attr:Canvas.snapToGrid" flags="IRW" description="Causes this canvas to snap to its parent's grid when dragging." name="snapToGrid" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.childrenSnapToGrid">
</seeAlso>
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:FormItem.valueIcons" flags="IRW" description="A mapping of logical form item values to URLs.&amp;#010 If specified, when the form item is set to the value in question, an icon will be &amp;#010 displayed with the appropriate source URL." name="valueIcons" valueType="Object" defaultValue="null" type="attr" definingClass="class:FormItem">
    <setter>setValueIcons</setter>
<seeAlso ref="method:FormItem.getValueIcon">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="attr:ListGridField.showIf" flags="IRWA" description="A string of script that, if provided, is evaluated to conditionally determine whether&amp;#010 this field should be displayed.  Evaluated on initial draw, then reevaluated on explicit &amp;#010 calls to &lt;code&gt;listGrid.refreshFields()&lt;/code&gt; or &lt;code&gt;listGrid.setFields()&lt;/code&gt;. &amp;#010 &lt;P&gt;&amp;#010 Note that explicit calls to ${isc.DocUtils.linkForRef('method:ListGrid.showField','grid.showField()')} or hideField()&amp;#010 will wipe out the &lt;code&gt;showIf&lt;/code&gt; expression, as will the end user showing and&amp;#010 hiding columns via the ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','header contextMenu')}." name="showIf" valueType="string" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="method:ListGrid.refreshFields">
</seeAlso>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGrid.autoSaveEdits" flags="IRWA" description="If this ListGrid is editable, should edits be saved out when the user finishes editing&amp;#010 a row (or a cell if ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell')} is true).&amp;#010 When set to true, pending edits will be retained for all edited cells (across rows&amp;#010 if appropriate).&lt;br&gt;&amp;#010 To save the pending edits out, use ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits')}.&lt;br&gt;&amp;#010 To discard pending edits, use ${isc.DocUtils.linkForRef('method:ListGrid.discardAllEdits')}.&lt;br&gt;&amp;#010 Note that edits are saved to the underlying data set, so for databound grids saving &amp;#010 edits made in a grid will commit the changes to the server." name="autoSaveEdits" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>editing</groups>
</docItem>
<docItem ref="method:Canvas.getInnerContentHeight" flags="A" description="  Returns the amount of space available for interior content (or relatively positioned child&amp;#010  widget(s)) without introducing clipping, scrolling or overflow.&lt;br&gt;&amp;#010  This is the space within the viewport of the widget (not including padding, and excluding &amp;#010  margins, borders or scrollbars) rendered at its specified size.&amp;#010&amp;#010" name="getInnerContentHeight" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getInnerContentWidth">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerWidth">
</seeAlso>
<returns description="inner height of the widget in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="group:loadDSTag" title="&amp;lt;isomorphic:loadDS&amp;gt;" description="&lt;i&gt;produces:&lt;/i&gt; JavaScript&amp;#010 &lt;p&gt;&amp;#010 This tag convers a SmartClient DataSource defined in XML to JavaScript for use in&amp;#010 databinding on the client (browser).&amp;#010 &lt;p&gt;&amp;#010 Note that this JSP tag must be surrounded by &amp;lt;SCRIPT&amp;gt; tags in the JSP because it&amp;#010 generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be&amp;#010 used in a JSP that is included from your main page in order to create separate&amp;#010 cacheability.  For example:&lt;pre&gt;&amp;#010     &amp;lt;SCRIPT SRC=&quot;myDataSources.jsp&quot;&amp;gt;&amp;lt;/SCRIPT&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;&lt;u&gt;Tag Attributes:&lt;/u&gt;&lt;/b&gt;&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;ID&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: String - ID of datasource to load&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This attribute specifies the name of the dataSource that you wish to load.  DataSources are&amp;#010 located in &lt;code&gt;[webroot]/shared/ds&lt;/code&gt; by default.  This location is changeable in&amp;#010 &lt;code&gt;[webroot]/WEB-INF/classes/server.properties&lt;/code&gt; by setting the config parameter&amp;#010 &lt;code&gt;project.datasources&lt;/code&gt; to the directory where your dataSources are located.&amp;#010 We recommend that for prototying, at least, you use the default directory.&amp;#010 &lt;p&gt;&amp;#010 For example:&amp;#010 &lt;pre&gt;&amp;#010 &amp;lt;isomorphic:loadDS ID=&quot;supplyItem&quot;/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 Would load the &lt;code&gt;supplyItem&lt;/code&gt; DataSource.&amp;#010 &lt;p&gt;&amp;#010 See ${isc.DocUtils.linkForRef('group:dataSourceDeclaration')} for more details on creating DataSources and an&amp;#010 example.&amp;#010 &lt;p&gt;&amp;#010 &lt;b&gt;name&lt;/b&gt;&lt;br&gt;&amp;#010 &lt;i&gt;value format&lt;/i&gt;: String - ID of datasource to load&lt;br&gt;&amp;#010 &lt;i&gt;default value&lt;/i&gt;: NONE&amp;#010 &lt;p&gt;&amp;#010 This is a synonym for the &lt;code&gt;ID&lt;/code&gt; attribute." name="loadDSTag" type="group">
    <treeLocation>Java Server Reference/SmartClient JSP Tags</treeLocation>
<seeAlso ref="group:dataSourceDeclaration">
</seeAlso>
    <requiresModules>SCServer</requiresModules>
</docItem>
<docItem ref="classAttr:RPCResponse.STATUS_LOGIN_SUCCESS" flags="R" description="Indicates that the login succeeded." name="STATUS_LOGIN_SUCCESS" valueType="integer" defaultValue="-8" type="classAttr" definingClass="class:RPCResponse">
<seeAlso ref="class:RPCRequest">
</seeAlso>
    <groups>statusCodes</groups>
</docItem>
<docItem ref="method:HTMLFlow.contentLoaded" flags="" description=" StringMethod fired when content is completely loaded in this htmlFlow. Has no default &amp;#010 implementation. May be observed or overridden as a notification type method to fire custom&amp;#010 logic when loading completes.&lt;br&gt;&amp;#010 Note: Does not apply to htmlFlows with ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set &amp;#010 to &lt;code&gt;&quot;page&quot;&lt;/code&gt;&amp;#010" name="contentLoaded" type="method" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="classMethod:Class.toString" flags="" description="&amp;#010  The default toString() for a ClassObject reports that you have a ClassObject and what class&amp;#010  it is.&amp;#010" name="toString" type="classMethod" definingClass="class:Class">
</docItem>
<docItem ref="attr:Canvas.animateTime" flags="IRWA" description="Default total duration of animations. Can be overridden by setting animation times for&amp;#010 specific animations, or by passing a &lt;code&gt;duration&lt;/code&gt; parameter into the appropriate&amp;#010 animate...() method." name="animateTime" valueType="number" defaultValue="300" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('animateMove')}</examples>
    <groups>animation</groups>
</docItem>
<docItem ref="method:ResultSet.findNextIndex" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.findNextIndex')}.  Checks only loaded rows and will not trigger a fetch.&amp;#010" name="findNextIndex" type="method" definingClass="class:ResultSet">
<params description="first index to consider" optional="false" name="startIndex" type="int">
</params>
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<params description="last index to consider" optional="true" name="endIndex" type="int">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="method:Tree.remove" flags="" description="&amp;#010 Removes a node, along with all its children.&amp;#010&amp;#010" name="remove" type="method" definingClass="class:Tree">
<params description="node to remove" optional="false" name="node" type="TreeNode">
</params>
<returns description="true if the tree was changed as a result of this call" type="boolean"></returns>
</docItem>
<docItem ref="attr:ListGridField.editorValueIconWidth" flags="IRW" description="When some cell in this field is being edited, setting this property will specify the&amp;#010 width for value icons in the cell's editor. If unset, the editor's valueIcon width and&amp;#010 height will be determined in the same way as it would be for a static cell." name="editorValueIconWidth" valueType="number" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>imageColumns</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Canvas.left" description="Number of pixels the left side of the widget is offset to the right from its default&amp;#010 drawing context (either its parent's topleft corner, or the document flow, depending on&amp;#010 the value of the ${isc.DocUtils.linkForRef('attr:Canvas.position')} property)." name="left" valueType="number" defaultValue="0" definingClass="class:Canvas">
    <getter>getLeft</getter>
    <setter>setLeft</setter>
    <groups>positioning</groups>
</docItem>
<docItem ref="method:MenuBar.setMenus" flags="" description=" Dynamically reset the set of menus displayed by this menu bar. &amp;#010" name="setMenus" type="method" definingClass="class:MenuBar">
<params description="array of new menus for this menubar" optional="false" name="menus" type="array">
</params>
</docItem>
<docItem ref="attr:ResultTree.updateCacheFromRequest" flags="IRA" description="When a successful Add, Update or Remove type operation fires on this ResultTree's &amp;#010 dataSource, if ${isc.DocUtils.linkForRef('attr:DSResponse.data')} is unset, should we integrate the submitted&amp;#010 data values (from the request) into our data-set?" name="updateCacheFromRequest" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ResultTree">
    <groups>cacheSync</groups>
</docItem>
<docItem ref="attr:TreeGrid.animateFolderEffect" flags="IRW" description="When animating folder opening / closing, this property can be set to apply an&amp;#010 animated acceleration effect.designates the speed of the&amp;#010 animation in pixels shown (or hidden) per second." name="animateFolderEffect" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:TreeGrid">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:OperationBinding.wsOperation" flags="IR" description="Name of the web service operation that will be invoked in order to execute this DataSource&amp;#010 operation.&amp;#010 &lt;P&gt;&amp;#010 Valid only for a DataSource that has a WebService (${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is&amp;#010 set).  Otherwise, use ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL')}.&amp;#010 &lt;P&gt;&amp;#010 Setting &lt;code&gt;wsOperation&lt;/code&gt; means that ${isc.DocUtils.linkForRef('attr:DSRequest.data')} will be serialized as the&amp;#010 request message for the specified web service operation, with namespacing and soap encoding&amp;#010 handled automatically.  See ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} for how to customize what&amp;#010 data is sent to the server." name="wsOperation" valueType="String" defaultValue="null" type="attr" definingClass="class:OperationBinding">
    <examples>${isc.DocUtils.linkForExampleId('wsdlBinding')}</examples>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:FormItem.visible" flags="IRW" description="Whether this item is currently visible.&amp;#010 &lt;P&gt;&amp;#010 &lt;code&gt;visible&lt;/code&gt; can only be set on creation.  After creation, use&amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.show')} and ${isc.DocUtils.linkForRef('method:FormItem.hide')} to manipulate visibility." name="visible" valueType="boolean" defaultValue="true" type="attr" definingClass="class:FormItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Window.minimize" flags="" description=" Minimize the window. Fired when the user clicks the minimize button if &amp;#010 ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton','this.showMinimizeButton')} is true.&lt;br&gt;&amp;#010 Default implementation shrinks the window to just the height of the header bar, hiding the&amp;#010 body. If ${isc.DocUtils.linkForRef('attr:Window.animateMinimize','animateMinimize')} is true, the resize will be animated.&amp;#010 A restore button will be displayed in place of the minimize button when the window is &amp;#010 minimized.&amp;#010" name="minimize" type="method" definingClass="class:Window">
</docItem>
<docItem ref="attr:TreeGrid.dragDataAction" flags="IRWA" description="Specifies what to do with data dragged from this TreeGrid (into another component, or&amp;#010 another node in this TreeGrid.  The default action is to move the data.  A setting of&amp;#010 &quot;none&quot; is not recommended for trees because Trees maintain the node open state on the nodes&amp;#010 themselves, and hence having multiple Tree objects share a reference to a node can have&amp;#010 unintended consequences (such as opening a folder in one tree also triggering an open in&amp;#010 another tree that shares the same node).&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For DataBound trees (${isc.DocUtils.linkForRef('class:ResultTree')}), the expectation is that&amp;#010 ${isc.DocUtils.linkForRef('method:TreeGrid.folderDrop')} will be overridden to perform whatever action took&amp;#010 place as the result of the drag and drop interaction." name="dragDataAction" valueType="DragDataAction" defaultValue="ListGrid.MOVE" type="attr" definingClass="class:TreeGrid">
<seeAlso ref="group:sharingNodes">
</seeAlso>
</docItem>
<docItem ref="attr:Layout.orientation" flags="AIRW" description="Orientation of this layout." name="orientation" valueType="Orientation" defaultValue="&quot;horizontal&quot;" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="attr:Button.showSelectedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 becomes selected." name="showSelectedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="method:Date.toUSShortDateTime" flags="" description="  Return this date in the format: &lt;code&gt;MM/DD/YYYY HH:MM&lt;/code&gt;&amp;#010   &amp;#010" name="toUSShortDateTime" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:Chart.valueProperty" flags="IR" description="Property in each record that holds a data value.&amp;#010 &lt;P&gt;&amp;#010 Not used if there is an inline facet, see ${isc.DocUtils.linkForRef('attr:Chart.data')}." name="valueProperty" valueType="String" defaultValue="&quot;_value&quot;" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="group:imageColumns" description="Columns that show images either as their only appearance or in addition to text." name="imageColumns" type="group">
    <refs>method:ListGrid.getValueIcon</refs>
    <refs>method:ListGrid.getEditorValueIcons</refs>
    <refs>attr:ListGridField.valueIcons</refs>
    <refs>attr:ListGrid.valueIconSize</refs>
    <refs>attr:ListGrid.valueIconWidth</refs>
    <refs>attr:ListGrid.valueIconHeight</refs>
    <refs>attr:ListGridField.valueIconSize</refs>
    <refs>attr:ListGridField.valueIconWidth</refs>
    <refs>attr:ListGridField.valueIconHeight</refs>
    <refs>attr:ListGridField.valueIconLeftPadding</refs>
    <refs>attr:ListGridField.valueIconRightPadding</refs>
    <refs>attr:ListGridField.editorValueIcons</refs>
    <refs>attr:ListGridField.editorValueIconWidth</refs>
    <refs>attr:ListGridField.editorValueIconHeight</refs>
    <refs>attr:ListGridField.showValueIconOnly</refs>
    <refs>attr:ListGridField.suppressValueIcon</refs>
    <refs>attr:ListGridField.valueIconOrientation</refs>
    <refs>attr:ListGrid.valueIconLeftPadding</refs>
    <refs>attr:ListGrid.valueIconRightPadding</refs>
    <refs>attr:ListGridField.imageURLPrefix</refs>
    <refs>attr:ListGridField.imageURLSuffix</refs>
    <refs>attr:ListGrid.imageSize</refs>
    <refs>attr:ListGridField.imageSize</refs>
    <refs>attr:ListGridField.imageWidth</refs>
    <refs>attr:ListGridField.imageHeight</refs>
    <refs>attr:ListGrid.booleanTrueImage</refs>
    <refs>attr:ListGrid.booleanFalseImage</refs>
    <refs>attr:ListGrid.booleanImageWidth</refs>
    <refs>attr:ListGrid.booleanImageHeight</refs>
</docItem>
<docItem ref="attr:ValuesManager.unknownErrorMessage" flags="IRW" description="The error message for a failed validator that does not specify its own errorMessage." name="unknownErrorMessage" valueType="string" defaultValue="&quot;Invalid value&quot;" type="attr" definingClass="class:ValuesManager">
    <groups>validation</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:TreeGrid.getViewState" flags="" description=" Overridden to return a ${isc.DocUtils.linkForRef('type:treeGridViewState')} object for the grid.&amp;#010" name="getViewState" type="method" definingClass="class:TreeGrid">
<seeAlso ref="type:treeGridViewState">
</seeAlso>
<seeAlso ref="method:TreeGrid.setViewState">
</seeAlso>
<returns description="current view state for the grid." type="treeGridViewState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:Canvas.topElement" flags="RA" description="The top-most Canvas (i.e., not a child of any other Canvas), if any, in this widget's&amp;#010 containment hierarchy." name="topElement" valueType="Canvas" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>containment</groups>
</docItem>
<docItem ref="attr:CubeGrid.metricFacetId" flags="IR" description="In a CubeGrid that displays values of different types (eg &quot;Revenue&quot; and &quot;Income&quot;), the&amp;#010 different types of values on display are enumerated as the facet values of the &quot;metric&amp;#010 facet&quot;.  &amp;#010 &lt;P&gt;&amp;#010 The metric facet is treated identically to any other facet by the CubeGrid: it can be&amp;#010 represented as row or column headers, can be innermost or have other facets under it,&amp;#010 can be moved around, etc.  However when a metric facet is used, ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId')}&amp;#010 must be set to allow the CubeGrid generate meaningful descriptions of values show in&amp;#010 cells for use in hovers and other situations; see ${isc.DocUtils.linkForRef('attr:CubeGrid.valueTitle')} for a full&amp;#010 explanation." name="metricFacetId" valueType="string" defaultValue="&quot;metric&quot;" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="interface:Chart" description="Generic Chart properties and interfaces to be mixed into concrete charting implementations.&amp;#010 &lt;P&gt;&amp;#010 Components such as the ${isc.DocUtils.linkForRef('method:ListGrid.chartData','ListGrid')} and&amp;#010 ${isc.DocUtils.linkForRef('method:CubeGrid.makeChart','CubeGrid')} expect this interface and can drive charting engines&amp;#010 that support it.&amp;#010 &lt;P&gt;&amp;#010 Concrete Chart implementations may expose whatever properties they want for configuration,&amp;#010 however, to enable easy switching of charting engines (different engines may be used for&amp;#010 different end users based on that user's installed plugins), they should support&amp;#010 the properties of this interface to the maximum extent possible.&amp;#010 &lt;P&gt;&amp;#010 This interface also provides core data model management (see&amp;#010 ${isc.DocUtils.linkForRef('method:Chart.getValue','getValue()')}) for charting engines." name="Chart" type="interface">
    <methods>method:Chart.setupChart</methods>
    <methods>method:Chart.getFacet</methods>
    <methods>method:Chart.getFacetValue</methods>
    <methods>method:Chart.getValue</methods>
    <methods>method:Chart.setData</methods>
    <treeLocation>Optional Modules/Analytics</treeLocation>
    <attrs>attr:Chart.valueProperty</attrs>
    <attrs>attr:Chart.data</attrs>
    <attrs>attr:Chart.facets</attrs>
    <attrs>attr:Chart.stacked</attrs>
    <attrs>attr:Chart.chartType</attrs>
    <attrs>attr:Chart.valueTitle</attrs>
    <attrs>attr:Chart.title</attrs>
    <attrs>attr:Chart.subTitle</attrs>
    <attrs>attr:Chart.threeD</attrs>
    <attrs>attr:Chart.shouldAnimateShow</attrs>
    <attrs>attr:Chart.labelValues</attrs>
    <requiresModules>Analytics</requiresModules>
</docItem>
<docItem ref="method:Class.fireCallback" flags="" description="&amp;#010	Method to fire a callback. Callback will be fired in the scope of the object on &amp;#010  which this method is called.&lt;br&gt;&amp;#010  Falls through to ${isc.DocUtils.linkForRef('classMethod:Class.fireCallback')}&amp;#010&amp;#010" name="fireCallback" type="method" definingClass="class:Class">
<params description="Callback to fire" optional="false" name="callback" type="Callback">
</params>
<params description="comma separated string of variables" optional="true" name="argNames" type="string">
</params>
<params description="array of arguments to pass to the method" optional="true" name="args" type="array">
</params>
<returns description="returns the value returned by the callback method passed in." type="any"></returns>
</docItem>
<docItem ref="method:TreeGrid.getOpenState" flags="" description=" Returns a snapshot of the current open state of this grid's data as&amp;#010 a ${isc.DocUtils.linkForRef('type:treeGridOpenState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:TreeGrid.getOpenState')} to open the same set of folders&amp;#010 within the treeGrid's data (assuming the nodes are still present in the data).&amp;#010" name="getOpenState" type="method" definingClass="class:TreeGrid">
<seeAlso ref="method:TreeGrid.getOpenState">
</seeAlso>
<returns description="current sort state for the grid." type="treeGridOpenState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeSize" flags="IR" description="Size in pixels for corners and edges" name="edgeSize" valueType="integer" defaultValue="6" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="attr:Canvas.backgroundRepeat" flags="IRW" description="Specifies how the background image should be tiled if this widget&amp;#010      is larger than the image. It corresponds to the CSS background-repeat attribute.&amp;#010      See BkgndRepeat type for details." name="backgroundRepeat" valueType="BkgndRepeat" defaultValue="Canvas.REPEAT" type="attr" definingClass="class:Canvas">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Canvas.rightMouseDown" flags="A" description="&amp;#010 Executed when the right mouse down is pressed on this widget.  No default implementation.&amp;#010&amp;#010" name="rightMouseDown" type="method" platformNotes="Some end user systems only have one mouse button." definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="group:facetLayout" name="facetLayout" type="group">
    <refs>method:CubeGrid.getFacetValueLayout</refs>
    <refs>method:CubeGrid.getRowFacetLayout</refs>
    <refs>method:CubeGrid.getColumnFacetLayout</refs>
    <refs>method:CubeGrid.addRowFacet</refs>
    <refs>method:CubeGrid.addColumnFacet</refs>
    <refs>method:CubeGrid.removeFacet</refs>
    <refs>method:CubeGrid.setFixedFacetValue</refs>
    <refs>method:CubeGrid.facetValueReordered</refs>
    <refs>method:CubeGrid.facetAdded</refs>
    <refs>method:CubeGrid.facetRemoved</refs>
    <refs>method:CubeGrid.facetMoved</refs>
    <refs>attr:CubeGrid.columnFacets</refs>
    <refs>attr:CubeGrid.rowFacets</refs>
    <refs>attr:CubeGrid.hideEmptyFacetValues</refs>
    <refs>attr:CubeGrid.canReorderColumns</refs>
    <refs>attr:CubeGrid.canMoveFacets</refs>
</docItem>
<docItem ref="attr:Button.selected" flags="IRW" description="Whether this component is selected.  For some components, selection affects appearance." name="selected" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <setter>setSelected</setter>
    <groups>state</groups>
</docItem>
<docItem ref="attr:Canvas.doubleClickDelay" flags="IRWA" description="Amount of time (in msec) between which two clicks are considered a single click" name="doubleClickDelay" valueType="number" defaultValue="250" type="attr" definingClass="class:Canvas">
    <groups>events</groups>
</docItem>
<docItem ref="method:GridRenderer.rowOut" flags="A" description=" Called when the mouse pointer leaves a row&amp;#010&amp;#010" name="rowOut" type="method" definingClass="class:GridRenderer">
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="whether to cancel the event" type="boolean"></returns>
    <groups>events</groups>
</docItem>
<docItem ref="group:loadingDataMessage" name="loadingDataMessage" type="group">
    <refs>attr:ListGrid.loadingDataMessage</refs>
    <refs>attr:ListGrid.loadingDataMessageStyle</refs>
</docItem>
<docItem ref="attr:Window.modalMaskOpacity" flags="IR" description="Controls the opacity of the modal mask displayed behind modal windows." name="modalMaskOpacity" valueType="number" defaultValue="50" type="attr" definingClass="class:Window">
<seeAlso ref="attr:Window.modalMask">
</seeAlso>
    <groups>modal</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="type:RowEndEditAction" description="While editing a ListGrid, what cell should we edit when the user attempts to navigate &amp;#010  into a cell past the end of an editable row, via a Tab keypress, or a programmatic&amp;#010  saveAndEditNextCell() call?" name="RowEndEditAction" type="type">
<values description="navigate to the first editable cell in the same record" value="&quot;same&quot;"></values>
<values description="navigate to the first editable cell in the next record" value="&quot;next&quot;"></values>
<values description="complete the edit." value="&quot;done&quot;"></values>
<values description="Leave focus in the cell being edited (take no action)" value="&quot;stop&quot;"></values>
<seeAlso ref="attr:ListGrid.rowEndEditAction">
</seeAlso>
    <groups>editing</groups>
</docItem>
<docItem ref="method:DetailViewer.setData" flags="" description=" Sets the data displayed by this detail viewer.&amp;#010&amp;#010" name="setData" type="method" definingClass="class:DetailViewer">
<params description="new data to be displayed" optional="false" name="newData" type="object or array">
</params>
</docItem>
<docItem ref="method:ValuesManager.showErrors" flags="" description=" Method to explicitly show the latest set of validation errors present on this &amp;#010 ValuesManager.&lt;br&gt;&amp;#010 Will redraw all member forms to display (or clear) currently visible errors, and&amp;#010 fire ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} to allow custom handling of&amp;#010 hidden errors.&amp;#010" name="showErrors" type="method" definingClass="class:ValuesManager">
    <groups>errors</groups>
</docItem>
<docItem ref="classMethod:isA.Array" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; an Array object?&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010	NOTE: if you prefer, you can call this as &lt;code&gt;isAn.Array()&lt;/code&gt;&amp;#010&amp;#010" name="Array" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is an Array" type="boolean"></returns>
</docItem>
<docItem ref="attr:Facet.canMinimize" flags="IR" description="If facet minimizing is enabled, whether this facet should show controls to minimize the&amp;#010 next facet.  Generally a tree facet should not also allow minimizing the next facet -&amp;#010 the interaction of the two types of collapsing can be confusing.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('attr:CubeGrid.canMinimizeFacets')}." name="canMinimize" valueType="boolean" defaultValue="cubeGrid.canMinimizeFacets" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="method:ListGrid.cellHasErrors" flags="" description=" Given a rowNum and a colNum or fieldName, determine whether we currently have stored &amp;#010 validation errors for the record/field in question.&amp;#010" name="cellHasErrors" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.hasErrors">
</seeAlso>
<seeAlso ref="method:ListGrid.rowHasErrors">
</seeAlso>
<params description="index of row to check for validation errors" optional="false" name="rowNum" type="number">
</params>
<params description="name of field, or index of column to check for validation                                       errors" optional="false" name="fieldID" type="number|string">
</params>
<returns description="true if we have validation errors for the row/col in question" type="boolean"></returns>
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:StretchImgButton.baseStyle" flags="IRW" description="Base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010 &lt;P&gt;&amp;#010 When the component changes state (eg becomes disabled), a suffix will be appended to this&amp;#010 style name, reflecting the following states: &quot;Over&quot;, &quot;Down&quot;, or &quot;Disabled&quot;.&amp;#010 &lt;P&gt;&amp;#010 If the widget is selected, the suffixes will be &quot;Selected&quot;, &quot;SelectedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be &quot;Focused&quot;,&amp;#010 &quot;FocusedOver&quot;, etc, or if the widget is both selected and focused, &quot;SelectedFocused&quot;,&amp;#010 &quot;SelectedFocusedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 For example, if &lt;code&gt;baseStyle&lt;/code&gt; is set to &quot;button&quot;, this component is&amp;#010 ${isc.DocUtils.linkForRef('method:StretchImgButton.isSelected','selected')} and the mouse cursor is over this component, the style&amp;#010 &quot;buttonSelectedOver&quot; will be used." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;stretchImgButton&quot;" type="attr" definingClass="class:StretchImgButton">
    <setter>setBaseStyle</setter>
</docItem>
<docItem ref="method:ListGrid.getViewState" flags="" description=" Returns a snapshot of the current view state of this ListGrid.&lt;br&gt;&amp;#010 This includes the field state, sort state and selected state of the grid, returned as a&amp;#010 ${isc.DocUtils.linkForRef('type:listGridViewState')} object.&lt;br&gt;&amp;#010 This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setViewState')} to reset this grid's vew state&amp;#010 to the current state (assuming the same data / fields are present in the grid).&lt;br&gt;&amp;#010" name="getViewState" type="method" definingClass="class:ListGrid">
<seeAlso ref="type:listGridViewState">
</seeAlso>
<seeAlso ref="method:ListGrid.setViewState">
</seeAlso>
<returns description="current view state for the grid." type="listGridViewState"></returns>
    <groups>viewState</groups>
</docItem>
<docItem ref="attr:StatefulCanvas.baseStyle" flags="IRW" description="Base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010 &lt;P&gt;&amp;#010 When the component changes state (eg becomes disabled), a suffix will be appended to this&amp;#010 style name, reflecting the following states: &quot;Over&quot;, &quot;Down&quot;, or &quot;Disabled&quot;.&amp;#010 &lt;P&gt;&amp;#010 If the widget is selected, the suffixes will be &quot;Selected&quot;, &quot;SelectedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be &quot;Focused&quot;,&amp;#010 &quot;FocusedOver&quot;, etc, or if the widget is both selected and focused, &quot;SelectedFocused&quot;,&amp;#010 &quot;SelectedFocusedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 For example, if &lt;code&gt;baseStyle&lt;/code&gt; is set to &quot;button&quot;, this component is&amp;#010 ${isc.DocUtils.linkForRef('method:StatefulCanvas.isSelected','selected')} and the mouse cursor is over this component, the style&amp;#010 &quot;buttonSelectedOver&quot; will be used." name="baseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:StatefulCanvas">
    <setter>setBaseStyle</setter>
</docItem>
<docItem ref="attr:DSResponse.data" flags="R" description="For DataSource operations, this is typically either an Array of Objects representing records&amp;#010 (for &quot;fetch&quot; operations) or a single Object representing the updated record (for &quot;update&quot;,&amp;#010 &quot;add&quot; or &quot;remove&quot; operations)." name="data" valueType="Object" defaultValue="null" type="attr" definingClass="class:DSResponse">
<seeAlso ref="group:dataSourceOperations" description="for standard return types for DataSource Operations"></seeAlso>
    <groups>dsResponse</groups>
</docItem>
<docItem ref="attr:TextItem.length" flags="IRW" description="if set, maximum number of characters for this field" name="length" valueType="number" defaultValue="null" type="attr" definingClass="class:TextItem">
    <groups>validation</groups>
</docItem>
<docItem ref="attr:Layout.vPolicy" flags="IRWA" description="Sizing policy applied to members on vertical axis" name="vPolicy" valueType="LayoutPolicy" defaultValue="&quot;fill&quot;" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="attr:DateChooser.nextMonthIconWidth" flags="IRW" description="Width of the icon for the next month button" name="nextMonthIconWidth" valueType="integer" defaultValue="7" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="group:zIndex" description="Object's &quot;stacking order&quot; above or below other objects" name="zIndex" type="group">
    <refs>method:Canvas.bringToFront</refs>
    <refs>method:Canvas.sendToBack</refs>
    <refs>method:Canvas.moveAbove</refs>
    <refs>method:Canvas.moveBelow</refs>
</docItem>
<docItem ref="method:ListGrid.editFailed" flags="A" description=" Called when an attempt to save inline edits fails, due to a validation error or other&amp;#010 server error.&amp;#010 &lt;P&gt;&amp;#010 The default implementation of editFailed does nothing for normal validation errors,&amp;#010 which are displayed before editFailed() is called.  For any other errors, the default&amp;#010 implementation will call ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')}, which by default&amp;#010 will result in a warning dialog.&amp;#010&amp;#010" name="editFailed" type="method" definingClass="class:ListGrid">
<params description="current index of the row we attempted to save" optional="false" name="rowNum" type="number">
</params>
<params description="index of the column where the edit failed, if applicable" optional="false" name="colNum" type="number">
</params>
<params description="new values that we attempted to save" optional="false" name="newValues" type="any">
</params>
<params description="old values before the save occurred" optional="false" name="oldValues" type="any">
</params>
<params description="Edit completion event that led to the save                                                  attempt" optional="false" name="editCompletionEvent" type="editCompletionEvent">
</params>
<params description="DSResponse, for saves through a DataSource" optional="true" name="dsResponse" type="DSResponse">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="method:ValuesManager.clearValues" flags="" description="  Clear out all the values managed by this values manager.&amp;#010" name="clearValues" type="method" definingClass="class:ValuesManager">
    <groups>formValues</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:DynamicForm.values" description="An Object containing the initial values of the form as properties, where each&amp;#010 propertyName is the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and each property&amp;#010 value is the value held by that form item.&amp;#010 &lt;P&gt;&amp;#010 The form's values may contain values that are not managed by any FormItem, and these&amp;#010 values will be preserved and available when the form values are subsequently retrieved&amp;#010 via ${isc.DocUtils.linkForRef('method:DynamicForm.getValues')}.&amp;#010 &lt;P&gt;&amp;#010 Providing values on initialization is equivalent to calling ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.&amp;#010 &lt;P&gt;&amp;#010 As the user manipulates form items to change values, change events fire&amp;#010 ${isc.DocUtils.linkForRef('method:FormItem.change','on the items')} and &amp;#010 ${isc.DocUtils.linkForRef('method:DynamicForm.itemChange','on the form as a whole')}.&amp;#010 &lt;P&gt;&amp;#010 Note that form values are logical values, for example, the value of a ${isc.DocUtils.linkForRef('class:DateItem')} is&amp;#010 a JavaScript Date object, not a String, even if the user enters the date via a text&amp;#010 input.  Likewise the value of a ${isc.DocUtils.linkForRef('class:TextItem')} or ${isc.DocUtils.linkForRef('class:CheckboxItem')} that started out&amp;#010 null remains null until the user changes it; the value will not be automatically&amp;#010 converted to the null string (&quot;&quot;) or false respectively, as happens with native HTML&amp;#010 elements." name="values" valueType="Object" defaultValue="null" definingClass="class:DynamicForm">
    <getter>getValues</getter>
    <setter>setValues</setter>
    <groups>formValues</groups>
</docItem>
<docItem ref="method:ListGrid.fieldStateChanged" flags="" description=" Notification method executed when columns are resized or reordered, or fields are &amp;#010 shown or hidden. Has no default implementation.&amp;#010&amp;#010" name="fieldStateChanged" type="method" definingClass="class:ListGrid">
    <groups>fieldState</groups>
</docItem>
<docItem ref="attr:ListGridField.defaultFilterValue" flags="IRWA" description="If this ListGrid is showing a filter row, this property can be used to apply a default&amp;#010 value to show in the filter editor for this field." name="defaultFilterValue" valueType="any" defaultValue="null" type="attr" definingClass="object:ListGridField">
    <groups>filterEditor</groups>
</docItem>
<docItem ref="attr:GridRenderer.canHover" flags="RW" description="If true, cellHover and rowHover events will fire when the user leaves the mouse over a &amp;#010 row / cell." name="canHover" valueType="boolean" defaultValue="null" type="attr" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.cellHover">
</seeAlso>
<seeAlso ref="method:GridRenderer.rowHover">
</seeAlso>
<seeAlso ref="attr:GridRenderer.showHover">
</seeAlso>
    <groups>events</groups>
</docItem>
<docItem ref="attr:HeaderItem.textBoxStyle" flags="IRW" description="Base CSS class for this item" name="textBoxStyle" valueType="FormItemBaseStyle" defaultValue="&quot;headerItem&quot;" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ActiveXControl.uuid" flags="IR" description="Set this to the uuid of your Active X control - ISC will then generate the appropriate&amp;#010  classID entry for you." name="uuid" valueType="string" defaultValue="null" type="attr" definingClass="class:ActiveXControl">
</docItem>
<docItem ref="attr:StatefulCanvas.showRollOver" flags="IRW" description="Should we visibly change state when the mouse goes over this object?" name="showRollOver" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="class:StretchImg" description="The StretchImg widget class implements a widget type that displays a list of multiple images&amp;#010  that make up a single image." name="StretchImg" type="class">
    <methods>method:StretchImg.setState</methods>
    <treeLocation>Client Reference/Foundation</treeLocation>
    <attrs>attr:StretchImg.vertical</attrs>
    <attrs>attr:StretchImg.capSize</attrs>
    <attrs>attr:StretchImg.src</attrs>
    <attrs>attr:StretchImg.hSrc</attrs>
    <attrs>attr:StretchImg.vSrc</attrs>
    <attrs>attr:StretchImg.imageType</attrs>
    <attrs>attr:StretchImg.items</attrs>
    <attrs>attr:StretchImg.showTitle</attrs>
</docItem>
<docItem ref="attr:DetailViewer.wrapLabel" flags="IRW" description="Should the label be allowed to wrap, or be fixed to one line no matter how long" name="wrapLabel" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DetailViewer">
    <groups>labels</groups>
</docItem>
<docItem ref="method:Date.toJapanShortDate" flags="" description=" Return the date in this format: &lt;code&gt;YYYY/MM/DD&lt;/code&gt;&amp;#010" name="toJapanShortDate" type="method" definingClass="class:Date">
<returns description="formatted date string" type="string"></returns>
    <groups>dateFormatting</groups>
</docItem>
<docItem ref="attr:HTMLFlow.loadingMessage" flags="IRW" description="HTML to show while content is being fetched, active only if the &lt;code&gt;contentsURL&lt;/code&gt;&amp;#010 property has been set.&amp;#010 &lt;P&gt;&amp;#010 The loading message will show both during the initial load of content, and during reload if&amp;#010 the contents are reloaded or the contentsURL changed.  For a first-time only loading&amp;#010 message, initialize the &lt;code&gt;contents&lt;/code&gt; property instead.&lt;br&gt;&amp;#010 Note: the &lt;code&gt;loadingMessage&lt;/code&gt; is never displayed when loading complete web pages &amp;#010 rather than HTML fragments (see ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType')})." name="loadingMessage" valueType="HTML" defaultValue="null" type="attr" definingClass="class:HTMLFlow">
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:CubeGrid.data" flags="IRW" description="An array of &quot;cellRecords&quot;, each of which represents data for one cell of the body area." name="data" valueType="Array of CellRecord" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:CubeGrid.fixedFacetValues">
</seeAlso>
</docItem>
<docItem ref="attr:Layout.layoutTopMargin" flags="IRW" description="Space outside of all members, on the top side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;setLayoutMargin()&lt;/code&gt; if changed on the fly." name="layoutTopMargin" valueType="integer" defaultValue="null" type="attr" definingClass="class:Layout">
    <groups>layoutMargin</groups>
</docItem>
<docItem ref="attr:DataBoundComponent.showDetailFields" flags="IRW" description="Whether to show include marked &lt;code&gt;detail:true&lt;/code&gt; when a DataBoundComponent is &amp;#010 given a DataSource but no &lt;code&gt;component.fields&lt;/code&gt;.&amp;#010 &lt;p&gt;&amp;#010 The &lt;code&gt;detail&lt;/code&gt; property is used on DataSource fields to mark fields that &amp;#010 shouldn't appear by default in a view that tries to show many records in a small space." name="showDetailFields" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:DataBoundComponent">
    <groups>databinding</groups>
</docItem>
<docItem ref="attr:DataSourceField.childrenProperty" flags="IR" description="If true, this property indicates that this field will hold an explicit array of child nodes &amp;#010 for the current node.&amp;#010 This has the same effect as specifying ${isc.DocUtils.linkForRef('attr:DataSource.childrenField')} to this field's &amp;#010 name." name="childrenProperty" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DataSourceField">
<seeAlso ref="attr:DataSource.childrenField">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('treeLoadXML')}</examples>
    <groups>dataSourceRelations</groups>
</docItem>
<docItem ref="method:CellSelection.selectCellList" flags="" description="			select an array of cells&amp;#010" name="selectCellList" type="method" definingClass="class:CellSelection">
<params description="listArray of cells to select. Each cell can be specified                                      as a 2 element array &lt;code&gt;[rowNum, colNum]&lt;/code&gt;" optional="true" name="" type="array">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:ListGrid.headerMenuButtonIconWidth" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the width of the icon&amp;#010 shown on the auto-generated &lt;code&gt;headerMenuButton&lt;/code&gt;" name="headerMenuButtonIconWidth" valueType="number" defaultValue="7" type="attr" definingClass="class:ListGrid">
    <groups>headerMenuButton</groups>
</docItem>
<docItem ref="attr:SelectItem.pickerIconProperties" flags="IRA" description="If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this block of properties will&amp;#010 be applied to the pickerIcon. Allows for advanced customization of this icon." name="pickerIconProperties" valueType="object" defaultValue="{...}" type="attr" definingClass="class:SelectItem">
    <groups>pickerIcon</groups>
</docItem>
<docItem ref="classMethod:FileLoader.cacheFiles" flags="" description="&amp;#010 Caches the specified list of files.&amp;#010&amp;#010" name="cacheFiles" type="classMethod" definingClass="class:FileLoader">
<params description="List of URLs to cache.  These may point to image, js, or css                               files.  This can either be a string with comma separated URLs or an&amp;#010                               Array of URLs." optional="false" name="URLs" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified                                      files has been cached." optional="true" name="onload" type="String or Function">
</params>
<params description="Specifies the type of the files referenced by the URLs.  Valid values are:                        &quot;js&quot;, &quot;css&quot;, and &quot;image&quot;.  If not specified, the type is auto-derived from&amp;#010                        the file extension.  If a type cannot be derived, the cache directive&amp;#010                        for that specific URL will be ignored and an error will be logged to&amp;#010                        the Developer Console. You must specify a type if you use a&amp;#010                        non-standard extension for your file - for example if you use a JSP&amp;#010                        or a servlet with no extension to generate images." optional="true" name="type" type="String">
</params>
</docItem>
<docItem ref="attr:ImgButton.hiliteAccessKey" flags="IRW" description="If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the&amp;#010 specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user&amp;#010 it will be modified to include HTML to underline the accessKey.&lt;br&gt;&amp;#010 Note that this property may cause titles that include HTML (rather than simple strings)&amp;#010 to be inappropriately modified, so should be disabled if your title string includes&amp;#010 HTML characters." name="hiliteAccessKey" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ImgButton">
</docItem>
<docItem ref="method:WebService.getInputHeaderSchema" flags="" description=" Get the schema for each part of the SOAP header for the input message of a given&amp;#010 operation, as a mapping from part name to schema.  For example, given WSDL like:&amp;#010 &lt;pre&gt;&amp;#010     &amp;lt;soap:header part=&quot;SessionHeader&quot; message=&quot;tns:HeaderMessage&quot;/&amp;gt;&amp;#010     &amp;lt;soap:header part=&quot;CallOptions&quot; message=&quot;tns:HeaderMessage/&amp;gt;&amp;#010 &lt;/pre&gt;&amp;#010 The following schema would be returned:&amp;#010 &lt;pre&gt;&amp;#010     { SessionHeader : &lt;i&gt;sessionHeaderPartSchema&lt;/i&gt;,&amp;#010       CallOptions : &lt;i&gt;callOptionsPartSchema&lt;/i&gt; }&amp;#010 &lt;/pre&gt;&amp;#010 The schema are instances of ${isc.DocUtils.linkForRef('class:DataSource')} that can be inspected to discover the&amp;#010 elements and types that are legal in that header part, and can construct a valid SOAP&amp;#010 header part if ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} is invoked.&amp;#010 &amp;#010" name="getInputHeaderSchema" type="method" definingClass="class:WebService">
<params description="name of an operation from this web service" optional="false" name="operationName" type="String">
</params>
<returns description="mapping from partName to schema" type="Object"></returns>
</docItem>
<docItem ref="attr:Slider.canFocus" flags="IRW" description="Indicates whether keyboard manipulation of the slider is allowed." name="canFocus" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Slider">
</docItem>
<docItem ref="attr:FormItem.valueIconHeight" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, use this property to specify a height for the&amp;#010 value icon written out." name="valueIconHeight" valueType="number" defaultValue="null" type="attr" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.valueIconWidth">
</seeAlso>
<seeAlso ref="attr:FormItem.valueIconSize">
</seeAlso>
    <groups>valueIcons</groups>
</docItem>
<docItem ref="method:FormItem.getOptionDataSource" flags="" description=" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} for this item. Default implementation&amp;#010 will return the  ${isc.DocUtils.linkForRef('class:DataSource')} of this item's form if &amp;#010 no explicit &lt;code&gt;optionDataSource&lt;/code&gt; is specified.&amp;#010" name="getOptionDataSource" type="method" definingClass="class:FormItem">
    <groups>display_values</groups>
</docItem>
<docItem ref="type:RPCCallback" description="A ${isc.DocUtils.linkForRef('type:Callback')} to evaluate when an RPCRequest completes.&amp;#010 &lt;p&gt;&amp;#010 Parameters passed to this callback are:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;rpcResponse: an ${isc.DocUtils.linkForRef('class:RPCResponse')} encapsulating the server response to your&amp;#010     request&amp;#010 &lt;li&gt;data: just the &quot;data&quot; property from the RPCResponse, for convenience&amp;#010 &lt;li&gt;rpcRequest: the ${isc.DocUtils.linkForRef('class:RPCRequest')} that was sent.  You can use&amp;#010     ${isc.DocUtils.linkForRef('attr:RPCRequest.clientContext')} to track state during the server turnaround.&amp;#010 &lt;/ul&gt;&amp;#010 For example, to take the data returned by the server and display it in a previously created&amp;#010 ListGrid with the ID &quot;myGrid&quot;:&amp;#010 &lt;pre&gt;&amp;#010     isc.RPCManager.send(&quot;getData&quot;, &quot;myGrid.setData(data)&quot;);&amp;#010 &lt;/pre&gt;&amp;#010 Or&amp;#010 &lt;pre&gt;&amp;#010     isc.RPCManager.send(&quot;getData&quot;, function (rpcResponse, data, rpcRequest) { &amp;#010                                        myGrid.setData(data)&amp;#010                                    });&amp;#010 &lt;/pre&gt;" name="RPCCallback" type="type">
    <treeLocation>Client Reference/RPC</treeLocation>
<seeAlso ref="class:RPCRequest">
</seeAlso>
<seeAlso ref="class:RPCResponse">
</seeAlso>
</docItem>
<docItem ref="attr:ComboBoxItem.filterLocally" flags="IRA" description="If &lt;code&gt;filterLocally&lt;/code&gt; is set for this item, and this item is showing options &amp;#010 from a dataSource, fetch the entire set of options from the server, and use these values&amp;#010 to map the item value to the appropriate display value. Also use &lt;code&gt;&quot;local&quot;&lt;/code&gt;&amp;#010 type filtering on drop down list of options.&lt;br&gt;&amp;#010 This means data will only be fetched once from the server, and then filtered on the&amp;#010 client." name="filterLocally" valueType="boolean" defaultValue="false" type="attr" definingClass="class:ComboBoxItem">
<seeAlso ref="attr:FormItem.filterLocally">
</seeAlso>
</docItem>
<docItem ref="method:TabSet.tabDeselected" flags="" description="  Notification fired when a tab is deselected.        &amp;#010" name="tabDeselected" type="method" definingClass="class:TabSet">
<params description="number of the tab" optional="false" name="tabNum" type="number">
</params>
<params description="pane for this tab" optional="false" name="tabPane" type="Canvas">
</params>
<params description="id of the tab" optional="false" name="ID" type="id">
</params>
<params description="the tab object (not tab button instance)" optional="false" name="tab" type="tab">
</params>
</docItem>
<docItem ref="attr:EdgedCanvas.edgeOffsetBottom" flags="IRA" description="Amount the contained Canvas should be offset from the bottom.  Defaults to the size for&amp;#010 the bottom edge.  Set smaller to allow the contained Canvas to overlap the edge and&amp;#010 corner media." name="edgeOffsetBottom" valueType="integer" defaultValue="null" type="attr" definingClass="class:EdgedCanvas">
    <groups>imageEdges</groups>
</docItem>
<docItem ref="classMethod:ClassFactory.getClass" flags="" description="&amp;#010	Given a class name, return a pointer to the Class object for that class&amp;#010&amp;#010" name="getClass" type="classMethod" definingClass="object:ClassFactory">
<params description="name of a class" optional="false" name="className" type="string">
</params>
<returns description="Class object, or null if not found" type="Class"></returns>
</docItem>
<docItem ref="attr:PickList.displayField" flags="IRW" description="Specifies an alternative field from which display values should be retrieved for this&amp;#010 item.&lt;br&gt;&amp;#010 If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound &amp;#010 to the same dataSource as the form as a whole, this is implemented by picking up the&amp;#010 value of the specified field from the Form's values object.&lt;br&gt;&amp;#010 Otherwise this item will attempt to map its underlying value to a display value&amp;#010 by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the &amp;#010 ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the &amp;#010 &lt;code&gt;displayField&lt;/code&gt; value from that record.&lt;br&gt;&amp;#010 This essentially enables the specified &lt;code&gt;optionDataSource&lt;/code&gt; to be used as&amp;#010 a server based ${isc.DocUtils.linkForRef('group:valueMap')}." name="displayField" valueType="string" defaultValue="null" type="attr" definingClass="interface:PickList">
    <getter>FormItem.getDisplayFieldName</getter>
    <groups>display_values</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:Window.autoSize" description="If true, the window is resize automatically to accommodate the contents&amp;#010			of the body, if they would otherwise require scrolling." name="autoSize" valueType="boolean" defaultValue="false" definingClass="class:Window">
    <setter>setAutoSize</setter>
    <examples>${isc.DocUtils.linkForExampleId('windowAutosize')}</examples>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:CubeGrid.setFacetTitle" flags="" description="&amp;#010      set the title of a facet (appears in facet label)&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; setter&amp;#010" name="setFacetTitle" type="method" definingClass="class:CubeGrid">
<params description="facet to update" optional="false" name="facetId" type="id">
</params>
<params description="title for the facet" optional="false" name="newTitle" type="string">
</params>
    <groups>data_and_metadata</groups>
</docItem>
<docItem ref="attr:Img.imageType" flags="IRW" description="Indicates whether the image should be tiled/cropped, stretched, or centered when the&amp;#010          size of this widget does not match the size of the image. See ImageStyle for&amp;#010          details" name="imageType" valueType="ImageStyle" defaultValue="Img.STRETCH" type="attr" definingClass="class:Img">
    <setter>setImageType</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Page.isLoaded" flags="" description="		Has the page finished loading?&amp;#010&amp;#010" name="isLoaded" type="classMethod" definingClass="class:Page">
<returns description="true == page is done loading" type="boolean"></returns>
</docItem>
<docItem ref="classMethod:Class.addClassProperties" flags="" description="&amp;#010	Add static (Class-level) properties and methods to this object&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010	These properties can then be accessed as MyClass.property, or for functions, called as&amp;#010  MyClass.methodName()&amp;#010&amp;#010" name="addClassProperties" type="classMethod" definingClass="class:Class">
<params description="objects with properties to add (think named parameters).										all the properties of each argument will be applied&amp;#010										as class-level properties." optional="true" name="arguments 0-N" type="object">
</params>
<returns description="the class after properties have been added to it" type="object"></returns>
</docItem>
<docItem ref="attr:FacetValue.parentId" flags="IRA" description="For tree facets (${isc.DocUtils.linkForRef('attr:Facet.isTree','facet.isTree')}), id of this facetValue's&amp;#010 parent facetValue." name="parentId" valueType="String" defaultValue="null" type="attr" definingClass="class:FacetValue">
</docItem>
<docItem ref="class:SectionStack" description="A container that manages a list of sections of widgets, each with a header.  Sometimes called&amp;#010 an &quot;Accordion&quot;.&amp;#010 &lt;P&gt;&amp;#010 SectionStack can be configured so that only one section is visible at a time (similar to MS Outlook's&amp;#010 left-hand Nav), or to allow multiple sections to be visible and share the available space." name="SectionStack" type="class">
    <methods>method:SectionStack.addItem</methods>
    <methods>method:SectionStack.removeItem</methods>
    <methods>method:SectionStack.addSection</methods>
    <methods>method:SectionStack.removeSection</methods>
    <methods>method:SectionStack.getSections</methods>
    <methods>method:SectionStack.reorderSection</methods>
    <methods>method:SectionStack.moveSection</methods>
    <methods>method:SectionStack.showSection</methods>
    <methods>method:SectionStack.expandSection</methods>
    <methods>method:SectionStack.hideSection</methods>
    <methods>method:SectionStack.collapseSection</methods>
    <methods>method:SectionStack.sectionIsVisible</methods>
    <methods>method:SectionStack.getVisibleSections</methods>
    <methods>method:SectionStack.sectionIsExpanded</methods>
    <methods>method:SectionStack.getExpandedSections</methods>
    <methods>method:SectionStack.setSectionTitle</methods>
    <methods>method:SectionStack.getSectionHeader</methods>
    <methods>method:SectionStack.getSectionNumber</methods>
    <methods>method:SectionStack.sectionHeaderClick</methods>
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:SectionStack.overflow</attrs>
    <attrs>attr:SectionStack.sectionHeaderClass</attrs>
    <attrs>attr:SectionStack.headerHeight</attrs>
    <attrs>attr:SectionStack.sections</attrs>
    <attrs>attr:SectionStack.canResizeSections</attrs>
    <attrs>attr:SectionStack.canTabToHeaders</attrs>
    <attrs>attr:SectionStack.scrollSectionIntoView</attrs>
    <attrs>attr:SectionStack.animateSections</attrs>
    <attrs>attr:SectionStack.visibilityMode</attrs>
    <examples>${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}</examples>
</docItem>
<docItem ref="method:WebService.getInputDS" flags="" description=" Get a DataSource representing the input message to a web service operation.&amp;#010 &lt;P&gt;&amp;#010 This DataSource is suitable for use as&amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','form.dataSource')} for a form that the user fills out&amp;#010 when providing inputs to call this web service operation.&amp;#010&amp;#010" name="getInputDS" type="method" definingClass="class:WebService">
<params description="name of the web service operation whose inputs the                               returned DataSource will represent" optional="false" name="operationName" type="String">
</params>
<returns description="DataSource representing the input message of a web service                      operation" type="DataSource"></returns>
    <examples>${isc.DocUtils.linkForExampleId('wsdlBinding')}</examples>
</docItem>
<docItem ref="classMethod:Page.checkBrowserAndRedirect" flags="" description="		Check that the browser is supported by the Isomorphic SmartClient system.&amp;#010      If not, redirect to specified URL. &lt;br&gt;&amp;#010      If no URL is passed in we will use &lt;code&gt;Page.defaultUnsupportedBrowserURL&lt;/code&gt; as&amp;#010      a default.&amp;#010&amp;#010" name="checkBrowserAndRedirect" type="classMethod" definingClass="class:Page">
<seeAlso ref="classAttr:Page.defaultUnsupportedBrowserURL">
</seeAlso>
<params description="URL of redirect page. May include Isomorphic special directories such as [SKIN]." optional="true" name="URL" type="string">
</params>
</docItem>
<docItem ref="attr:Window.bodyColor" flags="IRW" description="Color of the Window body. Overrides the background color specified in the style." name="bodyColor" valueType="string" defaultValue="&quot;#FFFFFF&quot;" type="attr" definingClass="class:Window">
<seeAlso ref="method:Window.flash">
</seeAlso>
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="type:treeGridOpenState" description="An object containing the open state for a treeGrid.&amp;#010 Note that this object is not intended to be interrogated directly, but may be stored &amp;#010 (for example) as a blob on the server for state persistence across sessions." name="treeGridOpenState" type="type">
    <groups>viewState</groups>
</docItem>
<docItem ref="method:DynamicForm.setValue" flags="" description="   Sets the value for some field&amp;#010" name="setValue" type="method" definingClass="class:DynamicForm">
<params description="Name of the field being updated" optional="false" name="fieldName" type="string">
</params>
<params description="New value." optional="false" name="value" type="string">
</params>
    <groups>formValues</groups>
</docItem>
<docItem ref="classAttr:Validator.mustBeLessThan" flags="IRA" description="Default error message to display when standard &lt;code&gt;integerRange&lt;/code&gt; type validator&amp;#010  returns false because the value passed in is greater than the specified maximum.&amp;#010 This is a dynamic string - text within &lt;code&gt;\${...}&lt;/code&gt; will be evaluated as JS code&amp;#010 when the message is displayed, with &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; available as&amp;#010 variables mapped to &lt;code&gt;validator.max&lt;/code&gt; and &lt;code&gt;validator.min&lt;/code&gt;." name="mustBeLessThan" valueType="string" defaultValue="&quot;Must be no more than ${max}&quot;" type="classAttr" definingClass="class:Validator">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:FormItem.iconKeyPress" flags="" description="      StringMethod.&amp;#010      Default action to fire when an icon has keyboard focus and the user types a key.&amp;#010      May be overridden by setting &lt;code&gt;keyPress&lt;/code&gt; on the form item icon directly.&amp;#010" name="iconKeyPress" type="method" definingClass="class:FormItem">
<params description="name of the key pressed" optional="false" name="keyName" type="string">
</params>
<params description="character produced by the keypress" optional="false" name="character" type="character">
</params>
<params description="a pointer to this item's form" optional="false" name="form" type="DynamicForm">
</params>
<params description="a pointer to this form item" optional="false" name="item" type="FormItem">
</params>
<params description="a pointer to the icon that recieved the click event." optional="false" name="icon" type="FormItemIcon">
</params>
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:ListGrid.willAcceptDrop" flags="A" description="&amp;#010 This method overrides ${isc.DocUtils.linkForRef('method:Canvas.willAcceptDrop')} and works as follows:&lt;br&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;If ${isc.DocUtils.linkForRef('method:Canvas.willAcceptDrop')} (the superclass definition) returns false, this &amp;#010     method always returns false.&lt;/li&gt;&amp;#010 &lt;li&gt;If the dragTarget and dropTarget are the same, the user is dragging a record within&amp;#010     this list - this is an attempted drag-reorder. If ${isc.DocUtils.linkForRef('attr:ListGrid.canReorderRecords')} is &amp;#010     false, this method returns false.&lt;/li&gt;&amp;#010 &lt;li&gt;If the dragTarget is some other widget, and ${isc.DocUtils.linkForRef('attr:ListGrid.canAcceptDroppedRecords')} is &amp;#010     not &lt;code&gt;true&lt;/code&gt; this method returns false.&lt;/li&gt;&amp;#010 &lt;li&gt;If a call to ${isc.DocUtils.linkForRef('method:ListGrid.getDragData')} on the &lt;code&gt;dragTarget&lt;/code&gt; fails to return&amp;#010     an record object or an array of records, this method returns false.&lt;/li&gt; &amp;#010 &lt;li&gt;If a the drop target record is disabled or has ${isc.DocUtils.linkForRef('attr:ListGridRecord.canAcceptDrop')} &amp;#010     set to false, return false.&lt;/li&gt;&amp;#010 &lt;/ul&gt;&amp;#010 Note that this method may be called repeatedly during a drag-drop interaction to update the&amp;#010 UI and notify the user as to when they may validly drop data.&amp;#010&amp;#010" name="willAcceptDrop" type="method" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGridRecord.canAcceptDrop">
</seeAlso>
<seeAlso ref="method:ListGrid.getDragData">
</seeAlso>
<returns description="true if this component will accept a drop of the dragData" type="boolean"></returns>
    <groups>events</groups>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:Label.iconHeight" flags="IR" description="Height in pixels of the icon image.&amp;#010 &lt;P&gt;&amp;#010 If unset, defaults to &lt;code&gt;iconSize&lt;/code&gt;" name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="classMethod:XMLTools.loadXMLSchema" flags="A" description=" Load an XML file containing XML schema definitions and create DataSource and SimpleType&amp;#010 objects to represent the schema.  You can use to loaded schema to bind ISC components,&amp;#010 perform validation, create editing interfaces, and build other metadata-driven interfaces.&amp;#010 &lt;p&gt;&amp;#010 All &amp;lt;xsd:complexType&amp;gt; declarations become ISC DataSources, and all&amp;#010 &amp;lt;xsd:simpleType&amp;gt; definitions become ISC atomic type definitions.  &amp;#010 &lt;p&gt;&amp;#010 By default, named complexType definitions and named element definitions containing&amp;#010 complexTypes become global DataSources, that is, they can be fetched with&amp;#010 ${isc.DocUtils.linkForRef('classMethod:DataSource.getDataSource')}.  Inline complexType definitions get&amp;#010 automatically generated names.&amp;#010 &lt;p&gt;&amp;#010 Named simpleType declarations become global ISC atomic types, that is, subsequently defined&amp;#010 DataSources can use them for ${isc.DocUtils.linkForRef('attr:DataSourceField.type')}.  XML schema &quot;restrictions&quot;&amp;#010 for simple types are automatically translated to ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')} as appropriate.&amp;#010 &lt;P&gt;&amp;#010 The created SchemaSet object is available in the callback as the single parameter&amp;#010 &quot;schemaSet&quot;, or can retrieved via &lt;code&gt;SchemaSet.get(schemaNamespace)&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 NOTE: required fields: the XML concept of &quot;required&quot; for an attribute or subelement, &amp;#010 expressed via use=&quot;required&quot; (for an attribute) or minOccurs &gt; 0 (for a subelement), is&amp;#010 that the attribute or element must be present in the XML document &lt;i&gt;but can have any&amp;#010 value&lt;/i&gt;, including being empty or null.  The SmartClient notion of required means&amp;#010 non-null.  You can express the SmartClient notion of required in XML Schema with the&amp;#010 combination of maxOccurs&gt;0 and a minLength or length &quot;restriction&quot;, and SmartClient &amp;#010 will recognize the field as SmartClient-required, with all of the behaviors that implies&amp;#010 (eg, specially styled form titles, automatic validation, etc).&amp;#010&amp;#010" name="loadXMLSchema" type="classMethod" definingClass="class:XMLTools">
<params description="URL to load the schema from" optional="false" name="schemaURL" type="URL">
</params>
<params description="signature is callback(schemaSet)" optional="false" name="callback" type="Callback">
</params>
    <examples>${isc.DocUtils.linkForExampleId('xmlSchemaImport')}</examples>
    <groups>xmlSchema</groups>
</docItem>
<docItem ref="attr:Menu.submenuDirection" flags="IRW" description="Should submenus show up on our left or right. Can validly be set to &lt;code&gt;&quot;left&quot;&lt;/code&gt;&amp;#010  or &lt;code&gt;&quot;right&quot;&lt;/code&gt;" name="submenuDirection" valueType="string" defaultValue="&quot;right&quot;" type="attr" definingClass="class:Menu">
</docItem>
<docItem ref="method:Tree.getChildren" flags="" description="&amp;#010 Returns all children of a node.  If the node is a leaf, this method returns null.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getChildren" type="method" definingClass="class:Tree">
<params description="The node whose children you want to fetch." optional="false" name="node" type="TreeNode">
</params>
<returns description="List of children for the node (empty List if node is a leaf                      or has no children)" type="List"></returns>
</docItem>
<docItem ref="attr:ListGrid.neverValidate" flags="IRWA" description="If true, validation will not occur as a result of cell editing for this grid." name="neverValidate" valueType="boolean" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridValidation</groups>
</docItem>
<docItem ref="attr:CubeGrid.valueTitle" flags="IR" description="A label for the data values shown in cells, such as &quot;Sales in Thousands&quot;, typically used&amp;#010 when the CubeGrid must generate a description for a cell value or set of cell values.&amp;#010 &lt;P&gt;&amp;#010 For example, in a CubeGrid showing &quot;Revenue&quot; by region and product, a cell with a&amp;#010 CellRecord like:&amp;#010 &lt;pre&gt; &amp;#010 {product:&quot;chairs&quot;, region:&quot;northwest&quot;, _value:&quot;$5k&quot;}&amp;#010 &lt;/pre&gt;&amp;#010 Should be described as &quot;Revenue for Charts for Northwest Region&quot;, not &quot;Chairs for&amp;#010 Revenue for Northwest Region&quot;.&amp;#010 &lt;P&gt;&amp;#010 For CubeGrids that show multiple types of values at once (eg both &quot;Revenue&quot; and&amp;#010 &quot;Income&quot;) see ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId')}." name="valueTitle" valueType="String" defaultValue="null" type="attr" definingClass="class:CubeGrid">
</docItem>
<docItem ref="attr:DateChooser.showDoubleYearIcon" flags="IRW" description="If this property is set to true the previous and next year buttons will render out the &amp;#010 previous and next month button icons twice rather than using the&amp;#010 ${isc.DocUtils.linkForRef('attr:DateChooser.prevYearIcon')} and ${isc.DocUtils.linkForRef('attr:DateChooser.nextYearIcon')}.&amp;#010 &lt;P&gt;&amp;#010 Set to &lt;code&gt;true&lt;/code&gt; by default as not all skins contain media for the year icons." name="showDoubleYearIcon" valueType="boolean" defaultValue="true" type="attr" definingClass="class:DateChooser">
</docItem>
<docItem ref="attr:Flashlet.codeBase" flags="IR" description="This attribute specifies the minimum version of the flash player required to show this&amp;#010  flashlet.&amp;#010  &lt;p&gt;&amp;#010  The default codeBase is: &quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0&quot;&amp;#010  &lt;p&gt;" name="codeBase" valueType="URL" defaultValue="see below" type="attr" definingClass="class:Flashlet">
</docItem>
<docItem ref="classMethod:isA.Date" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a Date object?&amp;#010&amp;#010" name="Date" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a Date" type="boolean"></returns>
</docItem>
<docItem ref="classMethod:Page.getScrollWidth" flags="" description="		Get the width of the window contents as they have been drawn.&amp;#010		If the page scrolls, this may be larger than the page.getWidth().&amp;#010" name="getScrollWidth" type="classMethod" definingClass="class:Page">
<returns description="width of the page as drawn" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverWidth" flags="IRW" description="A default width for hovers shown for items" name="itemHoverWidth" valueType="measure" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverWidth">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('itemHoverHTML')}</examples>
    <groups>Hovers</groups>
</docItem>
<docItem ref="method:Array.addListAt" flags="" description=" Add list of items list to this array at item pos.  All items after array[pos] will slide down to&amp;#010 fit new items.&amp;#010&amp;#010" name="addListAt" type="method" definingClass="object:Array">
<params description="new array of items" optional="false" name="list" type="array">
</params>
<params description="position in this list to put the new items" optional="false" name="pos" type="number">
</params>
<returns description="the list of items that was added" type="array"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:Button.hiliteAccessKey" flags="IRW" description="If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the&amp;#010 specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user&amp;#010 it will be modified to include HTML to underline the accessKey.&lt;br&gt;&amp;#010 Note that this property may cause titles that include HTML (rather than simple strings)&amp;#010 to be inappropriately modified, so should be disabled if your title string includes&amp;#010 HTML characters." name="hiliteAccessKey" valueType="boolean" defaultValue="null" type="attr" definingClass="class:Button">
</docItem>
<docItem ref="method:Canvas.getHeight" flags="" description=" Return the height of this object, in pixels.&amp;#010" name="getHeight" type="method" definingClass="class:Canvas">
<returns description="height" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:DynamicForm.valuesHaveChanged" flags="" description="          Compares the current set of values with the values stored by the call to the&amp;#010          &lt;code&gt;rememberValues()&lt;/code&gt; method. Returns true if the values have changed, and false&amp;#010          otherwise.&amp;#010" name="valuesHaveChanged" type="method" definingClass="class:DynamicForm">
<returns description="true if current values do not match remembered values" type="boolean"></returns>
    <groups>formValues</groups>
</docItem>
<docItem ref="attr:ButtonItem.startRow" flags="IRW" description="These items are in a row by themselves by default" name="startRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ButtonItem">
    <groups>formLayout</groups>
</docItem>
<docItem ref="attr:ResultSet.allRows" flags="IA" description="If the complete set of records for a resultSet is available when the resultSet is created,&amp;#010 it can be made available to the resultSet via this property at initialization time.&amp;#010 This data will then be considered cached meaning sorting and filtering can occur on&amp;#010 the client (no need for server fetch).&amp;#010 This cached data can be dropped via a call to ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')}." name="allRows" valueType="Array of records" defaultValue="null" type="attr" definingClass="class:ResultSet">
    <groups>fetching</groups>
    <groups>cacheSync</groups>
</docItem>
<docItem ref="object:SectionStackSection" description="Section descriptor used by a SectionStack to describe a section of items which are shown&amp;#010 or hidden together, and their associated header." name="SectionStackSection" type="object">
    <treeLocation>Client Reference/Layout/SectionStack</treeLocation>
    <attrs>attr:SectionStackSection.ID</attrs>
    <attrs>attr:SectionStackSection.title</attrs>
    <attrs>attr:SectionStackSection.items</attrs>
    <attrs>attr:SectionStackSection.showHeader</attrs>
    <attrs>attr:SectionStackSection.resizeable</attrs>
    <attrs>attr:SectionStackSection.expanded</attrs>
    <attrs>attr:SectionStackSection.hidden</attrs>
    <attrs>attr:SectionStackSection.canCollapse</attrs>
</docItem>
<docItem ref="method:ListGrid.editorEnter" flags="A" description=" Callback fired when the user starts editing a new cell.&amp;#010 &lt;P&gt;&amp;#010 This callback is typically used to establish dynamic default values via&amp;#010 ${isc.DocUtils.linkForRef('method:ListGrid.setEditValue')} or ${isc.DocUtils.linkForRef('method:ListGrid.setEditValues')}.&amp;#010 &lt;P&gt;&amp;#010 Can also be overriden on a per-field basis by setting &lt;code&gt;field.editorEnter&lt;/code&gt;.&amp;#010&amp;#010" name="editorEnter" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGridField.editorEnter">
</seeAlso>
<params description="record for the cell being edited" optional="false" name="record" type="ListGridRecord">
</params>
<params description="value for the cell being edited" optional="false" name="value" type="any">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:CubeGrid.editByCell" flags="R" description="CubeGrids only support editing by cell" name="editByCell" valueType="boolean" defaultValue="true" type="attr" definingClass="class:CubeGrid">
    <groups>cellEditing</groups>
</docItem>
<docItem ref="group:layoutMargin" name="layoutMargin" type="group">
    <refs>method:Layout.setLayoutMargin</refs>
    <refs>attr:Layout.paddingAsLayoutMargin</refs>
    <refs>attr:Layout.layoutMargin</refs>
    <refs>attr:Layout.layoutLeftMargin</refs>
    <refs>attr:Layout.layoutRightMargin</refs>
    <refs>attr:Layout.layoutTopMargin</refs>
    <refs>attr:Layout.layoutBottomMargin</refs>
    <refs>attr:Layout.membersMargin</refs>
</docItem>
<docItem ref="attr:SVG.pluginsPage" flags="IR" description="This attribute specifies the page the user should go to to get the plugin required to view&amp;#010  this SVG.&amp;#010  &lt;p&gt;&amp;#010  The default pluginsPage is: &quot;http://www.adobe.com/svg/viewer/install/&quot;&amp;#010  &lt;p&gt;" name="pluginsPage" valueType="URL" defaultValue="see below" type="attr" definingClass="class:SVG">
</docItem>
<docItem ref="method:Canvas.removePeer" flags="" description=" Remove a peer from this Canvas&amp;#010" name="removePeer" type="method" definingClass="class:Canvas">
<params description="Peer to be removed from this canvas" optional="false" name="peer" type="Canvas instance">
</params>
<params description="If this peer was assigned a name it should be passed in here to ensure                      canvas[name] is cleared out" optional="true" name="name" type="string">
</params>
    <groups>containment</groups>
</docItem>
<docItem ref="method:CubeGrid.getCellRow" flags="" description=" Given a record in this grid, this method returns the rowNum on which the record is displayed.&amp;#010" name="getCellRow" type="method" definingClass="class:CubeGrid">
<params description="record to find coordinates for" optional="false" name="cellRecord" type="record">
</params>
<returns description="Row number for the record. Returns -1 if the record is not found." type="integer"></returns>
</docItem>
<docItem ref="group:arrayMath" title="Array Math" description="Math operations on entire Arrays at once" name="arrayMath" type="group">
    <refs>method:List.intersect</refs>
    <refs>method:Array.intersect</refs>
    <refs>method:Array.max</refs>
    <refs>method:Array.min</refs>
    <refs>method:Array.sum</refs>
    <refs>method:Array.and</refs>
    <refs>method:Array.or</refs>
</docItem>
<docItem ref="method:GridRenderer.getBaseStyle" flags="A" description=" Return the base stylename for this cell.  Default implementation just returns this.baseStyle.&amp;#010 See getCellStyle for a general discussion of how to style cells.&amp;#010&amp;#010" name="getBaseStyle" type="method" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.getCellStyle">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="CSS class for this cell" type="CSSStyleName"></returns>
</docItem>
<docItem ref="method:ListGrid.getEditorValueIcons" flags="" description=" Returns the valueIcons for a field when it is displayed in the editor while editing some&amp;#010 record. Default implementation will return ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueIcons')} if specified&amp;#010 otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')}&amp;#010" name="getEditorValueIcons" type="method" definingClass="class:ListGrid">
<params description="field definition" optional="false" name="field" type="object">
</params>
<params description="current edit values for the record" optional="false" name="vaules" type="object">
</params>
<returns description="valueIcons for the editor" type="object"></returns>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:MenuBar.menus" flags="IRW" description="An array of menu object initializers or instantiated menu objects. Buttons for each&amp;#010 menu item will automatically be created. See the Menu Widget Class for fundamental&amp;#010 menu properties and other properties.  Titles for the buttons are derived from the &amp;#010 &lt;code&gt;title&lt;/code&gt; property of each menu." name="menus" valueType="Array of Menu" defaultValue="null" type="attr" definingClass="class:MenuBar">
    <setter>setMenus</setter>
<seeAlso ref="class:Menu">
</seeAlso>
</docItem>
<docItem ref="attr:Chart.stacked" flags="IR" description="Whether to use stacking for charts that support this (eg bar and column charts).&amp;#010 If stacked is not set and two facets are supplied, clustering is assumed." name="stacked" valueType="boolean" defaultValue="false" type="attr" definingClass="interface:Chart">
</docItem>
<docItem ref="attr:Label.iconSpacing" flags="IR" description="Pixels between icon and title text." name="iconSpacing" valueType="integer" defaultValue="6" type="attr" definingClass="class:Label">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:Window.showTitle" flags="IRW" description="Show a title (typically just text) on the header for this window." name="showTitle" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>headerLabel</groups>
</docItem>
<docItem ref="method:Layout.getMemberNumber" flags="" description="&amp;#010 Given a member Canvas or member ID, return the index of that member within this&amp;#010 layout's members array&amp;#010 &lt;p&gt;&amp;#010 If passed a number, just returns it.&amp;#010&amp;#010" name="getMemberNumber" type="method" definingClass="class:Layout">
<seeAlso ref="method:Layout.getMember">
</seeAlso>
<params description="identifier for the required member" optional="false" name="memberID" type="string | Canvas | number">
</params>
<returns description="index of the member canvas (or -1 if not found)" type="number"></returns>
</docItem>
<docItem ref="classMethod:Page.scrollTo" flags="" description="		Scroll the window to a specified top and left coordinate.&amp;#010&amp;#010" name="scrollTo" type="classMethod" definingClass="class:Page">
<params description="new left coordinate for window" optional="false" name="left" type="number">
</params>
<params description="new top coordinate for window" optional="false" name="top" type="number">
</params>
</docItem>
<docItem ref="method:ValuesManager.removeMembers" flags="" description="  Remove multiple member forms from this valuesManager.&amp;#010" name="removeMembers" type="method" definingClass="class:ValuesManager">
<seeAlso ref="method:ValuesManager.removeMember">
</seeAlso>
<params description="array of forms to remove" optional="false" name="members" type="array">
</params>
    <groups>members</groups>
</docItem>
<docItem ref="method:Canvas.getScrollBottom" flags="" description=" Returns the scrollTop required to scroll vertically to the end of this widget's content.&amp;#010" name="getScrollBottom" type="method" definingClass="class:Canvas">
    <groups>scrolling</groups>
</docItem>
<docItem ref="method:Canvas.scrollBy" flags="" description="  Scroll this widget by some pixel increment in either (or both) direction(s).&amp;#010&amp;#010" name="scrollBy" type="method" definingClass="class:Canvas">
<params description="Number of pixels to scroll horizontally" optional="false" name="dX" type="number">
</params>
<params description="Number of pixels to scroll vertically" optional="false" name="dY" type="number">
</params>
    <groups>scrolling</groups>
</docItem>
<docItem ref="attr:GridHilite.htmlBefore" flags="IR" description="HTML to prepend to cell values where this hilite is applied." name="htmlBefore" valueType="HTML" defaultValue="null" type="attr" definingClass="object:GridHilite">
</docItem>
<docItem ref="attr:FormItem.iconHeight" flags="IRWA" description="Default height for form item icons" name="iconHeight" valueType="number" defaultValue="20" type="attr" definingClass="class:FormItem">
    <getter>getIconHeight</getter>
    <groups>formIcons</groups>
</docItem>
<docItem ref="method:Layout.getMemberDefaultBreadth" flags="A" description=" Return the breadth for a member of this layout which either didn't specify a breadth or&amp;#010 specified a percent breadth with ${isc.DocUtils.linkForRef('attr:Layout.managePercentBreadth')}:true.&amp;#010 &lt;P&gt;&amp;#010 Called only for Layouts which have a ${isc.DocUtils.linkForRef('type:LayoutPolicy','layout policy')} for the breadth&amp;#010 axis of &quot;fill&quot;, since Layouts with a breadth policy of &quot;none&quot; leave all member breadths alone.&amp;#010&amp;#010" name="getMemberDefaultBreadth" type="method" definingClass="class:Layout">
<params description="Component to be sized" optional="false" name="member" type="Canvas">
</params>
<params description="Value of the currently calculated member breadth. This      may be returned verbatim or manipulated in this method." optional="false" name="defaultBreadth" type="Number">
</params>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="method:Layout.removeMembers" flags="" description="&amp;#010  Removes the specified members from the layout. If any of the removed members have resize&amp;#010  bars, the bars will be destroyed.&amp;#010&amp;#010" name="removeMembers" type="method" definingClass="class:Layout">
<params description="array of members to be removed, or reference to single 	                                    member." optional="false" name="members" type="Array or canvas">
</params>
</docItem>
<docItem ref="attr:SVG.src" flags="IR" description="Location from which to load the SVG.&amp;#010  &lt;p&gt;&amp;#010  Note: if you do not specify a src value, ISC will load the special svg 'svgCanvas.svg' from&amp;#010  the helpers directory.  This SVG is simply an empty root element - essentially a blank&amp;#010  canvas.  You can use this feature to write components that programmatically manipulate the&amp;#010  SVG DOM without needing to ship placeholder SVG files.&amp;#010  &lt;p&gt;" name="src" valueType="URL" defaultValue="[HELPERS]svgCanvas.svg" type="attr" definingClass="class:SVG">
</docItem>
<docItem ref="class:ImgSectionHeader" description="SectionHeader class based on an HLayout with ${isc.DocUtils.linkForRef('class:StretchImg')} background." name="ImgSectionHeader" type="class">
    <treeLocation>Client Reference/Layout/SectionStack</treeLocation>
    <attrs>attr:ImgSectionHeader.background</attrs>
</docItem>
<docItem ref="method:ListGrid.cellHasChanges" flags="" description=" If this listGrid can be edited, this method will return true if the cell passed in has been&amp;#010 edited, but the edits have not yet been saved to the ListGrid's data object.&amp;#010" name="cellHasChanges" type="method" definingClass="class:ListGrid">
<params description="index of row to check for changes" optional="false" name="rowNum" type="number">
</params>
<params description="index of the col to check for changes" optional="false" name="colNum" type="number">
</params>
    <groups>editing</groups>
</docItem>
<docItem ref="attr:CubeGrid.styleName" flags="IRW" description="CSS class for the CubeGrid as a whole" name="styleName" valueType="CSSStyleName" defaultValue="&quot;normal&quot;" type="attr" definingClass="class:CubeGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Log.getDefaultLogPriority" flags="" description=" Retrieves the default priority of messages for this class or instance.&amp;#010" name="getDefaultLogPriority" type="classMethod" definingClass="class:Log">
<returns description="default priority for logging messages on this object." type="LogPriority"></returns>
</docItem>
<docItem ref="group:formTitles" title="Form Titles" description="Properties that affect form item title placement and styling." name="formTitles" type="group">
    <refs>attr:DynamicForm.titleOrientation</refs>
    <refs>attr:DynamicForm.titlePrefix</refs>
    <refs>attr:DynamicForm.rightTitlePrefix</refs>
    <refs>attr:DynamicForm.titleSuffix</refs>
    <refs>attr:DynamicForm.rightTitleSuffix</refs>
    <refs>attr:DynamicForm.titleWidth</refs>
    <refs>attr:DynamicForm.wrapItemTitles</refs>
    <refs>attr:DynamicForm.hiliteRequiredFields</refs>
    <refs>attr:DynamicForm.requiredTitlePrefix</refs>
    <refs>attr:DynamicForm.requiredRightTitlePrefix</refs>
    <refs>attr:DynamicForm.requiredTitleSuffix</refs>
    <refs>attr:DynamicForm.requiredRightTitleSuffix</refs>
    <refs>type:TitleOrientation</refs>
</docItem>
<docItem ref="attr:PickTreeItem.valueTree" flags="IR" description="A ${isc.DocUtils.linkForRef('class:Tree')} of options from which the user can select." name="valueTree" valueType="tree" defaultValue="null" type="attr" definingClass="class:PickTreeItem">
    <examples>${isc.DocUtils.linkForExampleId('pickTree')}</examples>
</docItem>
<docItem ref="method:List.findNextIndex" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}, but inspects a range from startIndex to endIndex.&amp;#010&amp;#010" name="findNextIndex" type="method" definingClass="interface:List">
<params description="first index to consider" optional="false" name="startIndex" type="int">
</params>
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<params description="last index to consider" optional="true" name="endIndex" type="int">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="attr:Tab.pane" flags="IRW" description="Specifies the pane associated with this tab.  You have two options for the value of&amp;#010 the pane attribute:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;&lt;b&gt;ID&lt;/b&gt; - The global ID of an already created Canvas (or subclass).&amp;#010 &lt;li&gt;&lt;b&gt;Canvas&lt;/b&gt; - A live instance of a Canvas (or subclass).&amp;#010 &lt;/ul&gt;&amp;#010 You can change the pane associated with a given tab after the TabSet has been created by&amp;#010 calling ${isc.DocUtils.linkForRef('method:TabSet.updateTab')}." name="pane" valueType="ID or Canvas" defaultValue="null" type="attr" definingClass="object:Tab">
<seeAlso ref="method:TabSet.updateTab">
</seeAlso>
</docItem>
<docItem ref="classMethod:Time.toShortTime" flags="" description=" Given a date object, return the time associated with the date as a short string.&amp;#010 If no formatter is passed, use the standard formatter set up via ${isc.DocUtils.linkForRef('classMethod:Time.setShortDisplayFormat')}&amp;#010" name="toShortTime" type="classMethod" definingClass="class:Time">
<params description="Date to convert to a time string." optional="false" name="date" type="Date">
</params>
<params description="Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the Date to format), or&amp;#010  a string designating a standard formatter" optional="true" name="formatter" type="timeFormatter|function">
</params>
</docItem>
<docItem ref="method:Progressbar.percentChanged" flags="A" description=" This method is called when the percentDone value changes. Observe this method to be notified upon&amp;#010 a change to the percentDone value.&amp;#010&amp;#010" name="percentChanged" type="method" definingClass="class:Progressbar">
<seeAlso ref="method:Class.observe">
</seeAlso>
</docItem>
<docItem ref="attr:DynamicForm.titleSuffix" flags="IRW" description="The string appended to the title of every item in this form." name="titleSuffix" valueType="string" defaultValue="&quot;&amp;nbsp;:&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:DynamicForm.editRecord" flags="" description="&amp;#010 Edit an existing record.  Updates this editors values to match the values of the record &amp;#010 passed in.&amp;#010 &lt;P&gt;&amp;#010 Subsequent calls to &lt;code&gt;saveData()&lt;/code&gt; will use an &lt;code&gt;update&lt;/code&gt; rather than&amp;#010 an &lt;code&gt;add&lt;/code&gt; operation.&amp;#010&amp;#010" name="editRecord" type="method" definingClass="class:DynamicForm">
<seeAlso ref="method:DynamicForm.saveData">
</seeAlso>
<params description="the record to be edited as a map of field names to their corresponding values" optional="false" name="record" type="object">
</params>
    <groups>dataBoundComponentMethods</groups>
</docItem>
<docItem ref="group:events" description="Handling mouse and keyboard events generated by the user" name="events" type="group">
    <refs>method:GridRenderer.getEventRow</refs>
    <refs>method:GridRenderer.getEventColumn</refs>
    <refs>method:GridRenderer.getNearestRowToEvent</refs>
    <refs>method:GridRenderer.getNearestColToEvent</refs>
    <refs>method:GridRenderer.cellOut</refs>
    <refs>method:GridRenderer.cellOver</refs>
    <refs>method:GridRenderer.rowOut</refs>
    <refs>method:GridRenderer.rowOver</refs>
    <refs>method:GridRenderer.cellContextClick</refs>
    <refs>method:GridRenderer.rowContextClick</refs>
    <refs>method:GridRenderer.cellMouseDown</refs>
    <refs>method:GridRenderer.rowMouseDown</refs>
    <refs>method:GridRenderer.cellMouseUp</refs>
    <refs>method:GridRenderer.rowMouseUp</refs>
    <refs>method:GridRenderer.cellClick</refs>
    <refs>method:GridRenderer.cellDoubleClick</refs>
    <refs>method:GridRenderer.rowClick</refs>
    <refs>method:GridRenderer.rowDoubleClick</refs>
    <refs>method:GridRenderer.cellHover</refs>
    <refs>method:GridRenderer.rowHover</refs>
    <refs>method:GridRenderer.cellHoverHTML</refs>
    <refs>method:ListGrid.cellOver</refs>
    <refs>method:ListGrid.rowOver</refs>
    <refs>method:ListGrid.cellOut</refs>
    <refs>method:ListGrid.rowOut</refs>
    <refs>method:ListGrid.cellHover</refs>
    <refs>method:ListGrid.rowHover</refs>
    <refs>method:ListGrid.cellHoverHTML</refs>
    <refs>method:ListGrid.cellContextClick</refs>
    <refs>method:ListGrid.rowContextClick</refs>
    <refs>method:ListGrid.cellMouseDown</refs>
    <refs>method:ListGrid.rowMouseDown</refs>
    <refs>method:ListGrid.cellMouseUp</refs>
    <refs>method:ListGrid.rowMouseUp</refs>
    <refs>method:ListGrid.cellClick</refs>
    <refs>method:ListGrid.cellDoubleClick</refs>
    <refs>method:ListGridField.recordClick</refs>
    <refs>method:ListGridField.recordDoubleClick</refs>
    <refs>method:ListGrid.rowClick</refs>
    <refs>method:ListGrid.rowDoubleClick</refs>
    <refs>method:ListGrid.recordClick</refs>
    <refs>method:ListGrid.recordDoubleClick</refs>
    <refs>method:ListGrid.willAcceptDrop</refs>
    <refs>method:ListGrid.getEventRow</refs>
    <refs>method:ListGrid.getEventColumn</refs>
    <refs>method:TreeGrid.getEventRow</refs>
    <refs>method:TreeGrid.getDropFolder</refs>
    <refs>method:CubeGrid.getEventRow</refs>
    <refs>method:CubeGrid.getEventColumn</refs>
    <refs>method:CubeGrid.facetValueOver</refs>
    <refs>method:CubeGrid.facetValueOut</refs>
    <refs>method:CubeGrid.facetValueHover</refs>
    <refs>method:CubeGrid.facetValueContextClick</refs>
    <refs>method:CubeGrid.facetLabelOver</refs>
    <refs>method:CubeGrid.facetLabelOut</refs>
    <refs>method:CubeGrid.facetLabelHover</refs>
    <refs>method:Canvas.containsEvent</refs>
    <refs>method:Canvas.getOffsetX</refs>
    <refs>method:Canvas.getOffsetY</refs>
    <refs>method:Canvas.shouldDragScroll</refs>
    <refs>attr:GridRenderer.canSelectOnRightMouse</refs>
    <refs>attr:GridRenderer.canHover</refs>
    <refs>attr:GridRenderer.showHover</refs>
    <refs>attr:ListGrid.arrowKeyAction</refs>
    <refs>attr:Canvas.canSelectText</refs>
    <refs>attr:Canvas.canFocus</refs>
    <refs>attr:Canvas.mouseStillDownInitialDelay</refs>
    <refs>attr:Canvas.mouseStillDownDelay</refs>
    <refs>attr:Canvas.doubleClickDelay</refs>
    <refs>attr:Canvas.noDoubleClicks</refs>
</docItem>
<docItem ref="attr:DataBoundComponent.fields" flags="IRW" description="A DataBoundComponent manipulates records with one or more fields, and&amp;#010 &lt;code&gt;component.fields&lt;/code&gt; tells the DataBoundComponent which fields to present, in what&amp;#010 order, and how to present each field.&amp;#010 &lt;p&gt;&amp;#010 When both &lt;code&gt;component.fields&lt;/code&gt; and &amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','component.dataSource')}&lt;/code&gt; are set,&amp;#010 any fields in &lt;code&gt;component.fields&lt;/code&gt; with the same name as a DataSource field&amp;#010 inherit properties of the DataSource field.  This allows you to centralize data model&amp;#010 information in the DataSource, but customize presentation of DataSource fields on a&amp;#010 per-component basic.  For example, in a ListGrid, a shorter title or format for a field&amp;#010 might be chosen to save space.&amp;#010 &lt;p&gt;&amp;#010 By default, only fields specified on the component are shown, in the order specified on&amp;#010 the component.  The ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useAllDataSourceFields')} flag can be set to show all fields&amp;#010 from the DataSource, with &lt;code&gt;component.fields&lt;/code&gt; acting as field-by-field&amp;#010 overrides and/or additional fields.&amp;#010 &lt;p&gt;&amp;#010 If a DataBoundComponent is given a DataSource, but no &lt;code&gt;component.fields&lt;/code&gt;, the&amp;#010 &quot;default binding&quot; is used: fields are shown in DataSource order, according&amp;#010 to the properties &lt;code&gt;${isc.DocUtils.linkForRef('attr:DataBoundComponent.showHiddenFields')}&lt;/code&gt; and &amp;#010 &lt;code&gt;${isc.DocUtils.linkForRef('attr:DataBoundComponent.showDetailFields')}&lt;/code&gt;." name="fields" valueType="Array of Field" defaultValue="null" type="attr" definingClass="interface:DataBoundComponent">
    <examples>${isc.DocUtils.linkForExampleId('mergedFields')}</examples>
    <examples>${isc.DocUtils.linkForExampleId('validationFieldBinding')}</examples>
    <groups>databinding</groups>
</docItem>
<docItem ref="group:dragging" name="dragging" type="group">
    <refs>method:ListGrid.willAcceptDrop</refs>
    <refs>method:ListGrid.transferSelectedData</refs>
    <refs>method:ListGrid.getDragData</refs>
    <refs>method:TreeGrid.transferSelectedData</refs>
    <refs>method:Canvas.shouldDragScroll</refs>
    <refs>attr:ListGrid.canDragRecordsOut</refs>
    <refs>attr:ListGrid.canAcceptDroppedRecords</refs>
    <refs>attr:ListGrid.canReorderRecords</refs>
    <refs>attr:ListGrid.canReorderFields</refs>
    <refs>attr:ListGrid.canResizeFields</refs>
    <refs>attr:ListGrid.resizeFieldsInRealTime</refs>
    <refs>attr:ListGrid.dragDataAction</refs>
    <refs>attr:Canvas.canDragScroll</refs>
    <refs>attr:Canvas.dragScrollDelay</refs>
    <refs>attr:Window.canDragReposition</refs>
    <refs>attr:Window.canDragResize</refs>
    <refs>attr:Window.showResizer</refs>
</docItem>
<docItem ref="attr:ListGrid.imageSize" flags="IRW" description="Default size of thumbnails shown for fieldTypes image and imageFile.  Overrideable on a&amp;#010 per-field basis via ${isc.DocUtils.linkForRef('attr:ListGridField.imageSize')} or&amp;#010 ${isc.DocUtils.linkForRef('attr:ListGridField.imageWidth')}/${isc.DocUtils.linkForRef('attr:ListGridField.imageHeight')}" name="imageSize" valueType="number" defaultValue="16" type="attr" definingClass="class:ListGrid">
    <groups>imageColumns</groups>
</docItem>
<docItem ref="attr:Canvas.edgeImage" flags="IR" description="Base name of images for edges.  Extensions for each corner or edge piece will be added&amp;#010 to this image URL, before the extension.  For example, with the default base name of&amp;#010 &quot;edge.gif&quot;, the top-left corner image will be &quot;edge_TL.gif&quot;.&amp;#010 &lt;P&gt;&amp;#010 The full list of extensions is: &quot;_TL&quot;, &quot;_TR&quot;, &quot;_BL&quot;, &quot;_BR&quot;, &quot;_T&quot;, &quot;_L&quot;, &quot;_B&quot;, &quot;_R&quot;,&amp;#010 &quot;_center&quot;." name="edgeImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]edge.gif&quot;" type="attr" definingClass="class:Canvas">
    <examples>${isc.DocUtils.linkForExampleId('edges')}</examples>
    <groups>imageEdges</groups>
</docItem>
<docItem ref="method:Array.findAll" flags="" description=" Find all objects where property == value in the object.&amp;#010 &lt;P&gt;&amp;#010 Pass an Object as the &lt;code&gt;propertyName&lt;/code&gt; argument to match multiple properties.&amp;#010&amp;#010" name="findAll" type="method" definingClass="object:Array">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="all matching Objects or null if none found" type="Array"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="classMethod:isc.getIconTop" flags="A" description="  Returns the (offset) top-coordinate of an icon within its containing widget.&amp;#010" name="getIconTop" type="method" definingClass="class:isc">
<params description="icon definition" optional="false" name="icon" type="object">
</params>
<returns description="icon top position in px" type="number"></returns>
</docItem>
<docItem ref="type:Cursor" description="You can use whatever cursors are valid for your deployment platforms, but keep in mind that&amp;#010 visual representation may vary by browser and OS." name="Cursor" type="type">
<values description="Use the default arrow cursor for this browser/OS." value="Canvas.DEFAULT"></values>
<values description="Use the default cursor for this element type in this browser/OS" value="Canvas.AUTO"></values>
<values description="Use the wait cursor." value="Canvas.WAIT"></values>
<values description="Use the hand cursor." value="Canvas.HAND"></values>
<values description="Use the &quot;move&quot; (crosshairs) cursor." value="Canvas.MOVE"></values>
<values description="Use the 'help' cursor." value="Canvas.HELP"></values>
<values description="Use the 'text' (i-beam) cursor." value="Canvas.TEXT"></values>
<values description="Use the 'crosshair' ( + ) cursor." value="Canvas.CROSSHAIR"></values>
<values description="Use the column resize cursor (horizontal double-tipped arrow)" value="&quot;col-resize&quot;"></values>
<values description="Use the row resize cursor (vertical double-tipped arrow)" value="&quot;row-resize&quot;"></values>
<values description="Use the &quot;east resize&quot; cursor." value="&quot;e-resize&quot;"></values>
<values description="Use the &quot;west resize&quot; cursor." value="&quot;w-resize&quot;"></values>
<values description="Use the &quot;north resize&quot; cursor." value="&quot;n-resize&quot;"></values>
<values description="Use the &quot;south resize&quot; cursor." value="&quot;s-resize&quot;"></values>
<values description="Use the &quot;south-east resize&quot; cursor." value="&quot;se-resize&quot;"></values>
<values description="Use the &quot;north-east resize&quot; cursor." value="&quot;ne-resize&quot;"></values>
<values description="Use the &quot;north-west resize&quot; cursor." value="&quot;nw-resize&quot;"></values>
<values description="Use the &quot;south-west resize&quot; cursor." value="&quot;sw-resize&quot;"></values>
<values description="Use the &quot;not-allowed&quot; cursor." value="&quot;not-allowed&quot;"></values>
<seeAlso ref="attr:Canvas.cursor">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('cursors')}</examples>
    <groups>cues</groups>
</docItem>
<docItem ref="type:Alignment" name="Alignment" type="type">
<values description="Center within container." value="Canvas.CENTER"></values>
<values description="Stick to left side of container." value="Canvas.LEFT"></values>
<values description="Stick to right side of container." value="Canvas.RIGHT"></values>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:TabSet.tabBarControls" flags="IRA" description="This property determines what controls should show up after the tabBar for this tabSet.&amp;#010 Standard controls can be included using the strings &lt;code&gt;&quot;tabScroller&quot;&lt;/code&gt; and &amp;#010 &lt;code&gt;&quot;tabPicker&quot;&lt;/code&gt;. These show the standard controls to scroll to clipped tabs, &amp;#010 or pick them directly from a menu, and show up only if ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} or&amp;#010  ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true and there is not enough space available to show all &amp;#010 the tabs in the tab-bar.&lt;br&gt;&amp;#010 Additional controls can be included by adding any widget to this array.&amp;#010 Controls will show up in the order in which they are specified." name="tabBarControls" valueType="Array" defaultValue="[&quot;tabScroller&quot;, &quot;tabPicker&quot;]" type="attr" definingClass="class:TabSet">
    <groups>tabBarControls</groups>
</docItem>
<docItem ref="method:List.sortByProperty" flags="" description=" Sort a list of objects by a given property of each item.&amp;#010 &lt;P&gt;&amp;#010 The optional normalizer, if passed as a function, is called for each item in the List, and&amp;#010 should return whatever value should be used for sorting, which does not have to agree with&amp;#010 the property value. By passing a normalizer function you can achieve any kind of sorting&amp;#010 you'd like, including sorting by multiple properties.&amp;#010 &lt;P&gt;&amp;#010 NOTE: string sort is case INsensitive by default&amp;#010&amp;#010" name="sortByProperty" type="method" definingClass="interface:List">
<params description="name of the property to sort by" optional="false" name="property" type="string">
</params>
<params description="true == sort ascending, false == sort descending" optional="false" name="up" type="boolean">
</params>
<params description="May be specified as a function, with signature &amp;#010              &lt;code&gt;normalize(item, propertyName, context)&lt;/code&gt;, where &lt;code&gt;item&lt;/code&gt; is&amp;#010              a pointer to the item in the array, &lt;code&gt;propertyName&lt;/code&gt; is the &amp;#010              property by which the array is being sorted, and &lt;code&gt;context&lt;/code&gt; is the&amp;#010              arbitrary context passed into this method. Normalizer function should return&amp;#010              the value normalized for sorting.&lt;br&gt;&amp;#010              May also be specified as a ValueMap which maps property values to sortable values." optional="true" name="normalizer" type="function or ValueMap">
</params>
<params description="Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function" optional="true" name="context" type="any">
</params>
<returns description="the list itself" type="List"></returns>
    <groups>sorting</groups>
</docItem>
<docItem ref="method:Layout.getMemberOffset" flags="A" description=" An optional method that, if it exists, allows the manipulation of the calculated&amp;#010 offset for members of this layout.  Returns the offset for the specified&amp;#010 member.&amp;#010" name="getMemberOffset" type="method" definingClass="class:Layout">
<params description="Component to be positioned" optional="false" name="member" type="Canvas">
</params>
<params description="Value of the currently calculated member offset. This      may be returned verbatim or manupulated in this method." optional="false" name="defaultOffset" type="Number">
</params>
<params description="alignment of the enclosing layout" optional="false" name="alignment" type="String">
</params>
    <groups>layoutMember</groups>
</docItem>
<docItem ref="attr:Canvas.animateShowAcceleration" flags="IRWA" description="Default acceleration function for performing an animated show.  If unset, &amp;#010 &lt;code&gt;this.animateAcceleration&lt;/code&gt; will be used by default instead" name="animateShowAcceleration" valueType="AnimationAcceleration" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="method:ListGridField.sortNormalizer" flags="A" description=" Optional function to return the value that should be used when sorting this field.&amp;#010 &lt;P&gt;&amp;#010 Note that, if the dataset exceeds ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize')} and hence paging is&amp;#010 introduced, the grid relies on the server to provide sorting, and the sortNormalizer&amp;#010 will no longer be called.&amp;#010&amp;#010" name="sortNormalizer" type="method" definingClass="object:ListGridField">
<params description="record to normalize" optional="false" name="recordObject" type="object">
</params>
<params description="name of the field on which sorting occurred" optional="false" name="fieldName" type="string">
</params>
<params description="A pointer back to the list grid displaying this field will   be available as the &lt;code&gt;context&lt;/code&gt; argument. Note that you can also get a pointer&amp;#010   to the field definition object by calling &lt;code&gt;context.getField(fieldName)&lt;/code&gt;" optional="false" name="context" type="ListGrid">
</params>
<returns description="normalized value for sorting" type="any"></returns>
    <examples>${isc.DocUtils.linkForExampleId('dataTypes')}</examples>
    <groups>sorting</groups>
</docItem>
<docItem ref="method:ListGrid.anySelected" flags="" description=" Whether at least one item is selected&amp;#010" name="anySelected" type="method" definingClass="class:ListGrid">
<returns description="true == at least one item is selected								false == nothing at all is selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="classMethod:Hover.hide" flags="" description=" Hide hover hover Canvas shown via ${isc.DocUtils.linkForRef('classMethod:Hover.show')}&amp;#010" name="hide" type="classMethod" definingClass="class:Hover">
</docItem>
<docItem ref="attr:DSRequest.oldValues" flags="IR" description="For an &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;remove&lt;/code&gt; operation, the original values of the&amp;#010 record to be updated or removed.  &lt;code&gt;oldValues&lt;/code&gt; is automatically added to&amp;#010 DSRequests submitted by DataBound Components.  Available on the server via&amp;#010 &lt;code&gt;DSRequest.getOldValues()&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 The server can compare the &lt;code&gt;oldValues&lt;/code&gt; to the most recent stored values in order&amp;#010 to detect that the user was looking at stale values when the user submitted changes (NOTE:&amp;#010 this means of detecting concurrent edit is sometimes called &quot;long transactions&quot;).  &amp;#010 &lt;P&gt;&amp;#010 In applications where a policy of &quot;last update wins&quot; is not appropriate when updating&amp;#010 certain fields, special UI can be shown for this case.  For example, on detecting concurrent&amp;#010 edit, the server may send back a special &lt;code&gt;dsResponse.status&lt;/code&gt; code that the client&amp;#010 application detects, offering the user a choice of proceeding with the operation,&amp;#010 discarding edits, or reconciling new and old values in a special interface." name="oldValues" valueType="Object" defaultValue="null" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="attr:Canvas.animateMoveTime" flags="IRWA" description="Default time for performing an animated move.  If unset, &lt;code&gt;this.animateTime&lt;/code&gt;&amp;#010 will be used by default instead" name="animateMoveTime" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <groups>animation</groups>
</docItem>
<docItem ref="attr:Window.minimized" flags="IRW" description="Is this window minimized. If true at init time, the window will be drawn minimized.&amp;#010 To set this property at runtime use ${isc.DocUtils.linkForRef('method:Window.minimize')} or ${isc.DocUtils.linkForRef('method:Window.restore')}." name="minimized" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>header</groups>
</docItem>
<docItem ref="method:CubeGrid.setFacetValueTitleAlign" flags="" description="&amp;#010      set the align for the title for a facet value&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; setter&amp;#010" name="setFacetValueTitleAlign" type="method" definingClass="class:CubeGrid">
<params description="facet to update" optional="false" name="facetId" type="id">
</params>
<params description="facetValue to update" optional="false" name="facetValueId" type="id">
</params>
<params description="new alignment for facet value title" optional="false" name="align" type="alignEnum">
</params>
    <groups>gridLayout</groups>
</docItem>
<docItem ref="attr:ListGridField.imageSize" flags="IRW" description="Size of images shown for fieldTypes image and imageFile in this field.&amp;#010 This setting overrides the global ListGrid default ${isc.DocUtils.linkForRef('attr:ListGrid.imageSize')}.&amp;#010 &lt;P&gt;&amp;#010 If set to a String, assumed to be a property on each record that specifies the image&amp;#010 height.  For example, if &lt;code&gt;field.imageSize&lt;/code&gt; is &quot;logoSize&quot;,&amp;#010 &lt;code&gt;record.logoSize&lt;/code&gt; will control the size of the image." name="imageSize" valueType="number" defaultValue="16" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.imageWidth">
</seeAlso>
<seeAlso ref="attr:ListGridField.imageHeight">
</seeAlso>
    <groups>imageColumns</groups>
</docItem>
<docItem ref="class:String" description="Generic extensions to JavaScript Strings.  You can call these on any String." name="String" type="class">
    <methods>method:String.contains</methods>
    <methods>method:String.startsWith</methods>
    <methods>method:String.endsWith</methods>
    <treeLocation>Client Reference/System</treeLocation>
</docItem>
<docItem ref="attr:TabSet.tabProperties" flags="IR" description="Properties to apply to all Tabs created by this TabSet." name="tabProperties" valueType="Tab Properties" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="attr:Scrollbar.thumbOverlap" flags="IRWA" description="Number of pixels the thumb is allowed to overlap the buttons at each end of the track.&amp;#010 Default prevents doubling of 1px borders.  Set higher to allow media that shows curved&amp;#010 joins between the track button and ScrollThumb." name="thumbOverlap" valueType="number" defaultValue="1" type="attr" definingClass="class:Scrollbar">
</docItem>
<docItem ref="classMethod:FileLoader.loadModules" flags="" description="&amp;#010 Loads the specified SmartClient modules into the context of the current page.&amp;#010&amp;#010" name="loadModules" type="classMethod" definingClass="class:FileLoader">
<params description="List of SmartClient modules to load.  This can either be a                                  string with comma separated module names or an Array of module&amp;#010                                  names." optional="false" name="modules" type="String or Array">
</params>
<params description="Optional code to execute when the last of the specified                                      modules has completed loading." optional="true" name="onload" type="String or Function">
</params>
</docItem>
<docItem ref="attr:DataSource.serviceNamespace" flags="IR" description="For an XML DataSource, URN of the WebService to use to invoke operations.  This URN&amp;#010 comes from the &quot;targetNamespace&quot; attribute of the &amp;lt;wsdl:definitions&amp;gt; element in a&amp;#010 WSDL (Web Service Description Language) document, and serves as the unique identifier of&amp;#010 the service.&amp;#010 &lt;P&gt;&amp;#010 Having loaded a WebService using ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')}, setting&amp;#010 &lt;code&gt;serviceNamespace&lt;/code&gt; combined with specifying &amp;#010 ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')}&amp;#010 that set ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')} will cause a DataSource to invoke web&amp;#010 service operations to fulfill DataSource requests (${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')}).&amp;#010 &lt;P&gt;&amp;#010 Setting &lt;code&gt;serviceNamespace&lt;/code&gt; also defaults&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')} to the service's location,&amp;#010 ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat')} to &quot;xml&quot; and&amp;#010 ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','dataProtocol')} to &quot;soap&quot;." name="serviceNamespace" valueType="URN" defaultValue="null" type="attr" definingClass="class:DataSource">
    <examples>${isc.DocUtils.linkForExampleId('wsdlBinding')}</examples>
    <groups>wsdlBinding</groups>
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="method:ResultSet.filterLocalData" flags="A" description=" Derive the current filtered set of data from the cache of all matching rows.&amp;#010 &lt;P&gt;&amp;#010 This method is automatically called by ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria')} when criteria have actually&amp;#010 changed, as well as in various other situations.  You could only need to call this method&amp;#010 directly if:&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt; you know that client-side filtering is enabled (${isc.DocUtils.linkForRef('attr:ResultSet.useClientFiltering')}:true) and&amp;#010 active ${isc.DocUtils.linkForRef('method:ResultSet.allMatchingRowsCached')}.&amp;#010 &lt;li&gt; you have directly, programmatically modified data within the ResultSet such that it no&amp;#010 longer matches the filter criteria&amp;#010 &lt;li&gt; you want your modified records to disappear from the list of visible records (that is,&amp;#010 those accesible via ${isc.DocUtils.linkForRef('method:ResultSet.get')})&amp;#010 &lt;/ul&gt;&amp;#010 &amp;#010" name="filterLocalData" type="method" definingClass="class:ResultSet">
</docItem>
<docItem ref="method:Log.setLogPriority" flags="" description=" Set the priority of messages that will be visible for some log category, when logged on&amp;#010 this Class or Instance object.&lt;br&gt;&amp;#010 If called with no category, this priority will be applied to every logged message on this&amp;#010 object&lt;br&gt;&amp;#010 To set the visible log priority for some category across the entire page, use&amp;#010 &lt;code&gt;isc.Log.setPriority()&lt;/code&gt; instead.&amp;#010" name="setLogPriority" type="method" definingClass="class:Log">
<seeAlso ref="classMethod:Log.setPriority">
</seeAlso>
<params description="Category for which the log priority will be updated. If not                          all logs on this canvas will be logged at the priority passed in." optional="false" name="category" type="string">
</params>
<params description="priority level" optional="false" name="priority" type="LogPriority">
</params>
</docItem>
<docItem ref="attr:ListGridField.iconHeight" flags="IR" description="If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the &amp;#010 height of the icon to be displayed in the ListGrid header button. &amp;#010 (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconHeight')})&lt;br&gt;&amp;#010 If this field is editable, and ${isc.DocUtils.linkForRef('attr:ListGridField.editorIconHeight')} is unset, this &amp;#010 property will be passed onto the editors for this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}, &amp;#010 which will effect the default size for ${isc.DocUtils.linkForRef('attr:ListGridField.icons','icons')} displayed &amp;#010 in the editor." name="iconHeight" valueType="integer" defaultValue="null" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGridField.icon">
</seeAlso>
<seeAlso ref="attr:ListGridField.icons">
</seeAlso>
</docItem>
<docItem ref="method:ListGrid.selectAllRecords" flags="" description="&amp;#010  select all records&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="selectAllRecords" type="method" definingClass="class:ListGrid">
    <groups>selection</groups>
</docItem>
<docItem ref="method:Array.getItems" flags="" description=" Return the items at a list of specified positions.&amp;#010&amp;#010" name="getItems" type="method" definingClass="object:Array">
<params description="array of positions" optional="false" name="itemList" type="List of Number">
</params>
<returns description="subset of the array, in the same order as itemList" type="array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="group:smartArchitecture" title="SmartClient Architecture" description="SmartClient can add interactivity and performance benefits to any web application with a&amp;#010 variety of integration approaches.  This topic discusses the optimal architecture for a&amp;#010 SmartClient application, which can be adopted in whole or in part.&amp;#010 &lt;p&gt;&amp;#010 In a typical HTML-based web application, every time a new view is shown to a user, a round&amp;#010 trip to the server is required to retrieve new presentation information, such as a search&amp;#010 screen.  However in an ISC-based application, showing a new view can be accomplished by&amp;#010 simply hiding some components and showing others.&amp;#010 &lt;p&gt;&amp;#010 Because ISC components are expressed in a concise declarative form, and because ISC&amp;#010 components have essentially no runtime performance impact until used, dozens of application&amp;#010 views can be downloaded to the browser using the same bandwidth that would have been&amp;#010 required to render just the initial view in plain HTML.  &amp;#010 &lt;p&gt; &amp;#010 This architectural pattern of &quot;preloading views&quot; has tremendous benefits.  View transitions&amp;#010 which do not require new data from the server can be performed near-instantaneously and&amp;#010 without server involvement, boosting both interactivity and scalability.&amp;#010 &lt;p&gt;&amp;#010 Showing a dialog containing a &quot;wizard&quot; is a straightforward example of showing a &quot;preloaded&amp;#010 view&quot;.  For example:&amp;#010 &lt;pre&gt;&amp;#010    function showNewUserWizard() {&amp;#010        Window.create({&amp;#010            items:[&amp;#010                DynamicForm.create({ ... })&amp;#010            ]&amp;#010        });&amp;#010    }&amp;#010    Button.create({&amp;#010        title:&quot;New User..&quot;,&amp;#010        click:&quot;showNewUserWizard()&quot;&amp;#010    });&amp;#010 &lt;/pre&gt;&amp;#010 In this example, none of the components involved in a potentially multi-pane wizard are &amp;#010 created until they are needed.  Showing the wizard has near-instantaneous response and&amp;#010 causes no server load.&amp;#010 &lt;p&gt;&amp;#010 However, let's say that the first pane of the wizard is going to incorporate some dynamic&amp;#010 user-specific data, such as the current user's name.  To load the username, we'll use an RPC&amp;#010 operation targetting a .jsp called &quot;getUserName.jsp&quot; and show the wizard when it completes&amp;#010 (see ${isc.DocUtils.linkForRef('class:RPCManager')} for information on RPCs and how to construct a .jsp that can&amp;#010 send an RPC response).&amp;#010 &lt;pre&gt;&amp;#010    function showNewUserWizard() {&amp;#010        RPCManager.sendRequest({&amp;#010            actionURL:&quot;getUserName.jsp&quot;,&amp;#010            callback:&quot;doShow(rpcResponse)&quot;&amp;#010        });&amp;#010    }&amp;#010    function doShow(rpcResponse) {&amp;#010        Window.create({&amp;#010            items:[&amp;#010                Canvas.create({contents:&quot;Hello, &quot; + rpcResponse.userName}),&amp;#010                DynamicForm.create({ ... })&amp;#010            ]&amp;#010        });&amp;#010    }&amp;#010    Button.create({&amp;#010        title:&quot;New User..&quot;,&amp;#010        click:&quot;showNewUserWizard()&quot;&amp;#010    });&amp;#010 &lt;/pre&gt;&amp;#010 In this example, we've simply incorporated a user name into the first pane of a wizard.&amp;#010 However, this pattern allows us to arbitrarily change user interactions based on data from&amp;#010 the server.  For example, the RPCResponse might have contained a flag indicating that the&amp;#010 wizard should skip the first two steps, or an arbitrary warning message for the user, or&amp;#010 even JavaScript code to be evaluated on the client.&amp;#010 &lt;P&gt;&amp;#010 This architecture has several key advantages:&amp;#010 &lt;dl&gt;&amp;#010&amp;#010 &lt;dt&gt;&lt;b&gt;Performance: Cacheable UI&lt;/b&gt;&lt;/dt&gt;&amp;#010 &lt;dd&gt;&amp;#010 A dynamic, data-driven UI can be expressed completely in &lt;i&gt;cacheable&lt;/i&gt; JavaScript.&amp;#010 This is in contrast to any architecture based on server-side HTML generation, where static&amp;#010 parts of the presentation are mixed in with dynamic data, preventing cacheability so that&amp;#010 bandwidth and server time are wasted repeatedly delivering the same static presentation&amp;#010 data.&amp;#010 &lt;br&gt;&amp;#010 Even generated JavaScript is cacheable.  For example, a SmartClient View expressed in XML&amp;#010 and contained within a JSP is still a separately cacheable resource when loaded via a&amp;#010 &amp;lt;SCRIPT SRC&amp;gt; tag and advertised as a cacheable resource via HTTP headers, because it&amp;#010 is ultimately delivered to the browser as simple JavaScript.  Hence standard &amp;#010 ${isc.DocUtils.linkForRef('group:i18n','internationalization')} techniques such as using JSTL tags in a JSP remain&amp;#010 applicable.&amp;#010 &lt;br&gt;&amp;#010 The SmartClient Architecture even allows you to capture all the gradations of cacheability&amp;#010 from completely static (changes once per application rollout) to completely dynamic&amp;#010 (timestamp).  In the example above, the user name wouldn't actually change for the lifetime&amp;#010 of the page, so could be loaded once only.&amp;#010 &lt;br&gt;&amp;nbsp;&lt;/dd&gt;&amp;#010&amp;#010 &lt;dt&gt;&lt;b&gt;Performance: Minimal Server State&lt;/b&gt;&lt;/dt&gt;&amp;#010 &lt;dd&gt;&amp;#010 Any architecture that relies on component descriptions being generated by the server&amp;#010 must track a great deal of state, which, in the SmartClient Architecture, is either&amp;#010 completely eliminated or greatly reduced.&amp;#010 &lt;br&gt;&amp;nbsp;&lt;/dd&gt;&amp;#010&amp;#010 &lt;dt&gt;&lt;b&gt;True Presentation / Business Logic separation&lt;/b&gt;&lt;/dt&gt;&amp;#010 &lt;dd&gt;&amp;#010 The RPCResponse object represents the client's exact, minimal needs for server data.&amp;#010 This is much easier to understand and to audit than a slew of .jsp files which access and&amp;#010 update miscellaneous state.  It is also far easier to spot reusable patterns of data access,&amp;#010 which in server-side HTML generation systems often end up as duplicated code.&amp;#010 &lt;br&gt;&amp;nbsp;&lt;/dd&gt;&amp;#010&amp;#010 &lt;dt&gt;&lt;b&gt;Parallel Development and Testability&lt;/b&gt;&lt;/dt&gt;&amp;#010 &lt;dd&gt;&amp;#010 Using the SmartClient architecture allows you to build a complete, working application&amp;#010 that can run without a server, based on sample data.  In the example above, it would be &amp;#010 straightforward to create a testing mode that returned a faked RPC response consisting of&amp;#010 simply &lt;code&gt;{ userName : &quot;Bob&quot; }&lt;/code&gt;.&amp;#010 &lt;br&gt;&amp;#010 This allows better parallel development by enabling the client side of the system to be&amp;#010 tested in isolation, and creates clearer communication between client and server-side&amp;#010 developers since creation of test data tends to develop into data requirements&amp;#010 specifications.&amp;#010 &lt;br&gt;&amp;#010 For more info on creating applications that support client-only testing, see&amp;#010 ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','Client Only DataSources')}.&amp;#010 &lt;br&gt;&amp;nbsp;&lt;/dd&gt;&amp;#010 &lt;/dl&gt;&amp;#010 &lt;br&gt;&amp;#010 &lt;h3&gt;Refinements&lt;/h3&gt;&amp;#010 &lt;br&gt;&amp;#010 &lt;b&gt;Creating vs Showing a View&lt;/b&gt;&amp;#010 &lt;br&gt;&amp;#010 Many views will be shown to the user repeatedly, for example, the user may repeatedly switch&amp;#010 back and forth between two panes of a TabSet.  In that usage it makes sense to make a&amp;#010 distinction between &lt;i&gt;creating&lt;/i&gt; a view and &lt;i&gt;showing&lt;/i&gt; an existing view.  When&amp;#010 showing an existing view, the same components and/or data may be able to be reused.&amp;#010 &lt;br&gt;&amp;#010 In the following variant on the original example, we only create the Window object and&amp;#010 do the RPC to retrieve the user name the first time &lt;code&gt;showNewUserWizard()&lt;/code&gt; is&amp;#010 called.  Subsequently we reuse the existing window, and we assume the user name has not&amp;#010 changed, so we need not do the RPC again. (&lt;i&gt;Note: &quot;New User&quot; button omitted for brevity&amp;#010 from here on&lt;/i&gt;)&amp;#010 &lt;pre&gt;&amp;#010    function showNewUserWizard() {&amp;#010        if (!window.myWindow) {&amp;#010            Window.create({&amp;#010                ID:&quot;myWindow&quot;,&amp;#010                autoDraw:false,&amp;#010                items:[&amp;#010                    Canvas.create({ ID: &quot;welcomeCanvas&quot; }),&amp;#010                    DynamicForm.create({ ... })&amp;#010                ]&amp;#010            });&amp;#010            RPCManager.sendRequest({&amp;#010                actionURL:&quot;getUserName.jsp&quot;,&amp;#010                callback:&quot;doShow(rpcResponse)&quot;&amp;#010            });&amp;#010        } else {&amp;#010            myWindow.show();&amp;#010        }&amp;#010    }&amp;#010    function doShow(rpcResponse) {&amp;#010        welcomeCanvas.setContents(&quot;Hello, &quot; + rpcResponse.userName);&amp;#010        myWindow.show();&amp;#010    }&amp;#010 &lt;/pre&gt;&amp;#010 &amp;#010 &lt;b&gt;Batching Operations&lt;/b&gt;&amp;#010 &lt;br&gt;&amp;#010 A view may incorporate multiple components, each of which requires data.  In the following&amp;#010 example, a DataBound ListGrid has been incorporated into the wizard, and we'd like to fetch&amp;#010 the user's name and the beginning dataset for the grid in the same batch.  We use &amp;#010 ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue')} to do so.&amp;#010 &lt;pre&gt;&amp;#010    function showNewUserWizard() {&amp;#010        if (!window.myWindow) {&amp;#010            Window.create({&amp;#010                ID:&quot;myWindow&quot;,&amp;#010                autoDraw:false,&amp;#010                items:[&amp;#010                    Canvas.create({ ID: &quot;welcomeCanvas&quot; }),&amp;#010                    &lt;b&gt;ListGrid.create({ &amp;#010                        ID: &quot;myGrid&quot;,&amp;#010                        dataSource:&quot;myDataSource&quot;&amp;#010                    }),&lt;/b&gt;&amp;#010                    DynamicForm.create({ ... })&amp;#010                ]&amp;#010            });&amp;#010            &lt;b&gt;RPCManager.startQueue();&amp;#010            myGrid.fetchData();&lt;/b&gt;&amp;#010            RPCManager.sendRequest({&amp;#010                actionURL:&quot;getUserName.jsp&quot;,&amp;#010                callback:&quot;doShow(rpcResponse)&quot;&amp;#010            });&amp;#010            &lt;b&gt;RPCManager.sendQueue();&lt;/b&gt;&amp;#010        } else {&amp;#010            myWindow.show();&amp;#010        }&amp;#010    }&amp;#010    function doShow(rpcResponse) {&amp;#010        welcomeCanvas.setContents(&quot;Hello, &quot; + rpcResponse.userName);&amp;#010        myWindow.show();&amp;#010    }&amp;#010 &lt;/pre&gt;&amp;#010&amp;#010 &lt;b&gt;Segmenting very large Applications&lt;/b&gt;&amp;#010 &lt;P&gt;&amp;#010 If an application has many hundreds of views, but only a handful of views are used by a&amp;#010 given user in a typical session, for the fastest loading performance you should consider&amp;#010 loading only the most commonly used views initially then loading further views on demand.&amp;#010 &lt;P&gt;&amp;#010 You can use ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadJSFiles')} to load a set of JavaScript files&amp;#010 compromising an application module that defines a set of related views.  The loaded&amp;#010 JavaScript files may define new component classes and new DataSources in addition to&amp;#010 defining new views and their associated logic." name="smartArchitecture" type="group">
    <treeLocation>Concepts</treeLocation>
</docItem>
<docItem ref="attr:ListGrid.showHeader" flags="IRW" description="Should we show the header for this ListGrid?" name="showHeader" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <setter>setShowHeader</setter>
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Array.isEmpty" flags="" description=" Return whether or not this array is empty&amp;#010&amp;#010" name="isEmpty" type="method" definingClass="object:Array">
<returns description="true == this array is empty, false == some items in the array" type="boolean"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="attr:Menu.items" flags="IRW" description="Synonym for ${isc.DocUtils.linkForRef('attr:Menu.data')}" name="items" valueType="Array of MenuItem" defaultValue="null" type="attr" definingClass="class:Menu">
    <setter>setItems</setter>
    <groups>data</groups>
</docItem>
<docItem ref="method:List.duplicate" flags="A" description=" Return an Array that is a shallow copy of the list, that is, containing the same items.&amp;#010&amp;#010" name="duplicate" type="method" definingClass="interface:List">
<returns description="new array, pointing to the same items" type="Array"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="method:ComboBoxItem.getValueFieldName" flags="" description=" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.&amp;#010 If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.&amp;#010" name="getValueFieldName" type="method" definingClass="class:ComboBoxItem">
<returns description="fieldName to use a &quot;value field&quot; in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}" type="string"></returns>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:Button.showFocusedIcon" flags="IR" description="If using an icon for this button, whether to switch the icon image when the button&amp;#010 recieves focus.&amp;#010 &lt;P&gt;&amp;#010 If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the &lt;code&gt;&quot;Over&quot;&lt;/code&gt; icon will be&amp;#010 displayed when the canvas has focus, otherwise a seperate &lt;code&gt;&quot;Focused&quot;&lt;/code&gt; icon&amp;#010 will be displayed" name="showFocusedIcon" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Button">
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:ListGrid.sortFieldDescendingText" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, this&amp;#010 attribute will be shown as the menu item title to sort a field in descending order." name="sortFieldDescendingText" valueType="string" defaultValue="&quot;Sort Descending&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:Window.showResizer" flags="IRW" description="If true, show a button in the lower right corner that allows users to resize the Window.&amp;#010 Note that the resizer will only be displayed if the footer is showing for the window&amp;#010 (${isc.DocUtils.linkForRef('attr:Window.showFooter')}) and ${isc.DocUtils.linkForRef('attr:Window.canDragResize')} is true." name="showResizer" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>dragging</groups>
</docItem>
<docItem ref="group:serialization" name="serialization" type="group">
    <refs>classMethod:isc.clone</refs>
</docItem>
<docItem ref="attr:DateChooser.firstDayOfWeek" flags="IR" description="Day of the week to show in the first column.  0=Sunday, 1=Monday, ..., 6=Saturday." name="firstDayOfWeek" valueType="integer" defaultValue="0" type="attr" definingClass="class:DateChooser">
    <groups>appearance</groups>
</docItem>
<docItem ref="method:Class.setProperty" flags="" description=" Set a property on this object, calling the setter method if it exists.&amp;#010 &lt;p&gt;&amp;#010 Whenever you set a property on an ISC component, you should call either the specific setter&amp;#010 for that property, or &lt;code&gt;setProperty()/setProperties()&lt;/code&gt; if it doesn't have one.&amp;#010 This future-proofs your code against the later addition of required setters.  &amp;#010&amp;#010" name="setProperty" type="method" definingClass="class:Class">
<seeAlso ref="method:Class.setProperties">
</seeAlso>
<params description="name of the property to set" optional="false" name="propertyName" type="String">
</params>
<params description="new value for the property" optional="false" name="newValue" type="any">
</params>
</docItem>
<docItem ref="method:CubeGrid.addColumnFacet" flags="" description=" Add a column facet to the view at index &quot;index&quot;.  Handles the facet already being in the view&amp;#010 (does a pivot).&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 The facet being added should currently have a fixed facet value (unless it's already part of the&amp;#010 view), which will be removed from cubeGrid.fixedFacetValues.&amp;#010&amp;#010 &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt;  action&amp;#010" name="addColumnFacet" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.removeFacet">
</seeAlso>
<seeAlso ref="attr:CubeGrid.fixedFacetValues">
</seeAlso>
<params description="facetId to add.  Definition must have been provided at init time." optional="false" name="facetId" type="id">
</params>
<params description="index to add the facet at.  0 = outermost (default innermost)" optional="true" name="index" type="integer">
</params>
    <groups>facetLayout</groups>
</docItem>
<docItem ref="attr:Tree.isFolderProperty" flags="IRW" description="Name of property that defines whether a node is a folder.  By default this is set to&amp;#010 ${isc.DocUtils.linkForRef('attr:TreeNode.isFolder')}." name="isFolderProperty" valueType="String" defaultValue="&quot;isFolder&quot;" type="attr" definingClass="class:Tree">
<seeAlso ref="attr:TreeNode.isFolder">
</seeAlso>
</docItem>
<docItem ref="attr:DetailViewer.emptyCellValue" flags="IRWA" description="Text to show for an empty cell" name="emptyCellValue" valueType="string" defaultValue="&quot;&amp;nbsp;&quot;" type="attr" definingClass="class:DetailViewer">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:CubeGrid.rowFacets" flags="IRW" description="The list of facets that will appear to the left of the body" name="rowFacets" valueType="array" defaultValue="null" type="attr" definingClass="class:CubeGrid">
    <groups>facetLayout</groups>
</docItem>
<docItem ref="type:Criteria" description="Criteria for selecting only a matching set of records from a DataSource.  Criteria can&amp;#010 be applied on the client and server.  Unless configured otherwise, criteria will generally&amp;#010 be applied client-side by ${isc.DocUtils.linkForRef('class:ResultSet')}s via ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')}.  &amp;#010 &lt;P&gt;&amp;#010 The criteria format supported by the SmartClient Server built-in SQLDataSource and HibernateDataSource &amp;#010 is a JavaScript Object where each&amp;#010 property specifies the name and required value for a field.  Multiple legal values for a field&amp;#010 can be provided as an Array.  For example:&amp;#010 &lt;pre&gt;&amp;#010 var criteria = {&amp;#010    field1 : &quot;value1&quot;,&amp;#010    field2 : [&quot;value2&quot;, &quot;value3&quot;]&amp;#010 }&amp;#010 &lt;/pre&gt;&amp;#010 Would select all records where field1 has value &quot;value1&quot; and where field2 has &lt;i&gt;either&lt;/i&gt;&amp;#010 &quot;value2&quot; or &quot;value3&quot;.&amp;#010 &lt;P&gt;&amp;#010 For custom backends, criteria must be a JavaScript Object but its properties can contain&amp;#010 whatever data you want.  When sent to the SmartClient server, the Java representation of the&amp;#010 criteria is described ${isc.DocUtils.linkForRef('attr:RPCRequest.data','here')}.  When sent to other servers, the &amp;#010 ${isc.DocUtils.linkForRef('type:DSProtocol','operationBinding.dataProtocol')} affects the format." name="Criteria" type="type">
    <treeLocation>Client Reference/Data Binding</treeLocation>
<seeAlso ref="type:CriteriaPolicy">
</seeAlso>
</docItem>
<docItem ref="method:Button.setWrap" flags="" description=" Set whether the title of this button should be allowed to wrap if too long for the button's&amp;#010 specified width.&amp;#010&amp;#010" name="setWrap" type="method" definingClass="class:Button">
<params description="whether to wrap the title" optional="false" name="newWrap" type="boolean">
</params>
</docItem>
<docItem ref="attr:CubeGrid.facetValueHoverStyle" flags="IRWA" description="Allows the developer to override the css class applied to  hover tips shown for&amp;#010 facet values.  If unspecified, and &lt;code&gt;this.hoverStyle&lt;/code&gt; is not null, that &amp;#010 css class will be applied to facet value hovers instead." name="facetValueHoverStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:CubeGrid">
<seeAlso ref="attr:Canvas.hoverStyle">
</seeAlso>
    <groups>hoverTips</groups>
</docItem>
<docItem ref="attr:ButtonItem.buttonProperties" flags="IRA" description="Custom Properties to apply to our button item." name="buttonProperties" valueType="Object" defaultValue="null" type="attr" definingClass="class:ButtonItem">
</docItem>
<docItem ref="classAttr:Dialog.Prompt" flags="A" description="The &quot;Prompt&quot; object on the dialog class is a singleton Dialog instance.&amp;#010  The Prompt is used to show text to the user in a modal fashion - it will expand to show &amp;#010  all the text that you put into it.&amp;#010  By default this Dialog has no end-user controls and is expected to be programmatically&amp;#010  dismissed.&lt;br&gt;&amp;#010  Common use-case: During server-interactions, the Prompt will be used to display a suitable &amp;#010  wait message, and suppress user input.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 Notes:&lt;br&gt;&amp;#010  Because this is a singleton object, properties set on the Prompt directly will persist each&amp;#010  time it is shown.&lt;br&gt;&amp;#010  Developers should use the &lt;code&gt;showPrompt()&lt;/code&gt; and &lt;code&gt;clearPrompt()&lt;/code&gt; methods&amp;#010  to show and hide the prompt rather than manipulating the prompt directly." name="Prompt" valueType="object" defaultValue="dialog instance properties" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="classMethod:isc.showPrompt">
</seeAlso>
<seeAlso ref="classMethod:isc.clearPrompt">
</seeAlso>
    <groups>Prompting</groups>
</docItem>
<docItem ref="attr:GridRenderer.drawAheadRatio" flags="IRWA" description="How far should we render rows ahead of the currently visible area?  This is expressed as a&amp;#010 ratio from viewport size to rendered area size.&lt;br&gt;&lt;br&gt;&amp;#010 &amp;#010 Tweaking drawAheadRatio allows you to make tradeoffs between continuous scrolling speed vs&amp;#010 initial render time and render time when scrolling by large amounts.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 NOTE: Only applies when showAllRows is false." name="drawAheadRatio" valueType="float" defaultValue="1.3" type="attr" definingClass="class:GridRenderer">
    <groups>performance</groups>
</docItem>
<docItem ref="attr:ListGridField.enterKeyEditAction" flags="IRW" description="What to do when a user hits enter while editing this field?&lt;br&gt;&amp;#010 Overrides the &lt;code&gt;enterKeyEditAction&lt;/code&gt; as specified at the listGrid level while &amp;#010 focus is in this field." name="enterKeyEditAction" valueType="EnterKeyEditAction" defaultValue="&quot;done&quot;" type="attr" definingClass="object:ListGridField">
    <groups>editing</groups>
</docItem>
<docItem ref="attr:DynamicForm.initialCriteria" flags="IR" description="Criteria to be used when ${isc.DocUtils.linkForRef('attr:DynamicForm.autoFetchData')} is set." name="initialCriteria" valueType="Criteria" defaultValue="null" type="attr" definingClass="class:DynamicForm">
</docItem>
<docItem ref="attr:StretchImgButton.showTitle" flags="IRW" description="Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be &amp;#010 displayed for this component.&lt;br&gt;&amp;#010 Applies to Image-based components only, where the title will be rendered out in a label&amp;#010 floating over the component" name="showTitle" valueType="boolean" defaultValue="true" type="attr" definingClass="class:StretchImgButton">
</docItem>
<docItem ref="method:ImgButton.isSelected" flags="" description=" Find out if this object is selected&amp;#010" name="isSelected" type="method" definingClass="class:ImgButton">
<returns type="boolean">
</returns>
    <groups>state</groups>
</docItem>
<docItem exampleConfig="RadioGroupItem.xml" ref="class:RadioGroupItem" description="FormItem that shows a set of mutually exclusive options as a group of radio buttons." name="RadioGroupItem" type="class">
    <attrs>attr:RadioGroupItem.vertical</attrs>
</docItem>
<docItem ref="attr:Label.wrap" flags="IRW" description="If false, the label text will not be wrapped to the next line." name="wrap" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Label">
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:RPCRequest.data" flags="IRW" description="This attribute specifies the payload of the RPCRequest.  When using the SmartClient server,&amp;#010 any JavaScript simple type or arbitrarily nested set of Objects and Arrays can be sent&amp;#010 to server and automatically translated to Java Objects.  Here are the &amp;#010 mapping of JavaScript types to their corresponding server object types:&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010 &lt;table class='normal' border='1'&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;&lt;b&gt;JS Type&lt;/b&gt;&lt;/td&gt;     &lt;td&gt;&lt;b&gt;Java Type&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;C# Type&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Perl Type&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#010&amp;#010   &lt;tr&gt;&lt;td&gt;Object: {}&lt;/td&gt;         &lt;td&gt;Map&lt;/td&gt;              &lt;td&gt;IDictionary&lt;/td&gt;      &lt;td&gt;Associative Array: {}&lt;/td&gt;&lt;/tr&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;Array: []&lt;/td&gt;          &lt;td&gt;List&lt;/td&gt;             &lt;td&gt;IList&lt;/td&gt;      &lt;td&gt;Array: []&lt;/td&gt;&lt;/tr&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;String&lt;/td&gt;             &lt;td&gt;String&lt;/td&gt;           &lt;td&gt;string&lt;/td&gt;         &lt;td&gt;string&lt;/td&gt;&lt;/tr&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;Number&lt;/td&gt;             &lt;td&gt;Long|Double&lt;/td&gt;      &lt;td&gt;long|double&lt;/td&gt;    &lt;td&gt;string&lt;/td&gt;&lt;/tr&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;Boolean&lt;/td&gt;            &lt;td&gt;Boolean&lt;/td&gt;          &lt;td&gt;bool&lt;/td&gt;           &lt;td&gt;string&lt;/td&gt;&lt;/tr&gt;&amp;#010   &lt;tr&gt;&lt;td&gt;Date&lt;/td&gt;               &lt;td&gt;java.util.Date&lt;/td&gt;   &lt;td&gt;DateTime&lt;/td&gt;       &lt;td&gt;string&lt;/td&gt;&lt;/tr&gt;&amp;#010 &amp;#010 &lt;/table&gt;&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 Note that the order of keys/values in the Maps created on the server is not guaranteed&amp;#010 because JavaScript Object literals do not guarantee order.&amp;#010 &lt;p&gt;&amp;#010 Server-&gt;client conversion follows the this table as well, with some extras.  See the toJS()&amp;#010 method on JSTranslater in the server documentation for a description of additional&amp;#010 behaviors.&amp;#010 &lt;P&gt;&amp;#010 When &lt;b&gt;not&lt;/b&gt; communicating with the SmartClient server, &lt;code&gt;rpcRequest.data&lt;/code&gt;&amp;#010 becomes simple HTTP parameters or an HTTP request body - see ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')}&amp;#010 for details." name="data" valueType="any serializeable" defaultValue="null" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="method:FormItem.getFieldName" flags="A" description="			Return the name for the this formItem.&amp;#010" name="getFieldName" type="method" definingClass="class:FormItem">
<returns description="name for this form item" type="string"></returns>
    <groups>drawing</groups>
</docItem>
<docItem ref="attr:Button.valign" flags="IRW" description="Vertical alignment of this component's title." name="valign" valueType="VerticalAlignment" defaultValue="Canvas.CENTER" type="attr" definingClass="class:Button">
    <setter>setVAlign</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="method:ListGrid.deselectRecord" flags="" description="&amp;#010  Deselect a record passed in explicitly, or by index.  [Synonym for selectRecord(record, false)].&amp;#010&amp;#010      &lt;br&gt;&lt;i&gt;methodType&lt;/i&gt; action&amp;#010" name="deselectRecord" type="method" definingClass="class:ListGrid">
<params description="record (or row number) to deselect" optional="false" name="record" type="ListGridRecord | number">
</params>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Selection.getSelectedRecord" flags="" description="			Return the first item in the list that is selected.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010			Note that this should only be used if you know that one only one item&amp;#010			 may be selected, or you really don't care about items after the first one.&lt;br&gt;&lt;br&gt;&amp;#010&amp;#010			To get all selected objects, use &lt;code&gt;${isc.DocUtils.linkForRef('method:Selection.getSelection')}&lt;/code&gt;&amp;#010" name="getSelectedRecord" type="method" definingClass="class:Selection">
<returns description="first selected record, or null if nothing selected" type="object"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:TreeGrid.getOpenIcon" flags="A" description=" Get the appropriate open/close opener icon for a node.&amp;#010&amp;#010" name="getOpenIcon" type="method" definingClass="class:TreeGrid">
<params description="tree node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="URL for the icon to show the node's open state" type="URL"></returns>
</docItem>
<docItem ref="method:Dialog.applyClick" flags="" description=" Handle a click on the 'apply' button of this Dialog.  &amp;#010 Default implementation is to call &lt;code&gt;saveData()&lt;/code&gt;, but NOT close the Dialog.&amp;#010" name="applyClick" type="method" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>buttons</groups>
</docItem>
<docItem ref="method:ListGrid.recordDoubleClick" flags="" description=" Executed when the listGrid receives a 'doubleClick' event on an enabled, non-separator&amp;#010 record. The default implementation does nothing -- override to perform&amp;#010 some action when any record or field is double clicked.&lt;br&gt;&amp;#010 A record event handler can be specified either as a function to execute, or as a string&amp;#010 of script to evaluate. If the handler is defined as a string of script, all the&amp;#010 parameters below will be available as variables for use in the script.&lt;br&gt;&amp;#010 To do something specific if a particular field is double clicked, add a&amp;#010 recordDoubleClick method or string of script to that field (same parameters) when you're&amp;#010 setting up the list.&lt;br&gt;&amp;#010 &lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&amp;#010 &lt;li&gt;This will not be called if the click is below the last item of the list.&lt;/li&gt;&amp;#010 &lt;li&gt;This method is called from the default implementation of ${isc.DocUtils.linkForRef('method:ListGrid.rowDoubleClick')},&amp;#010 so if that method is overridden this method may not be fired.&lt;/li&gt;&lt;/ul&gt;&amp;#010" name="recordDoubleClick" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.rowDoubleClick">
</seeAlso>
<params description="the listGrid that contains the doubleclick event" optional="false" name="viewer" type="listGrid">
</params>
<params description="the record that was double-clicked" optional="false" name="record" type="ListGridRecord">
</params>
<params description="number of the record clicked on in the current set of                                  displayed records (starts with 0)" optional="false" name="recordNum" type="number">
</params>
<params description="the field that was clicked on (field definition)" optional="false" name="field" type="ListGridField">
</params>
<params description="number of the field clicked on in the listGrid.fields                                  array" optional="false" name="fieldNum" type="number">
</params>
<params description="value of the cell (after valueMap, etc. applied)" optional="false" name="value" type="object">
</params>
<params description="raw value of the cell (before valueMap, etc applied)" optional="false" name="rawValue" type="object">
</params>
    <groups>events</groups>
</docItem>
<docItem ref="classMethod:Date.compareDates" flags="" description=" Compare two dates; returns 0 if equal, -1 if the first date is greater (later), or 1 if&amp;#010 the second date is greater.&amp;#010" name="compareDates" type="classMethod" definingClass="class:Date">
<params description="first date to compare" optional="false" name="date1" type="date">
</params>
<params description="second date to compare" optional="false" name="date2" type="date">
</params>
<returns description="0 if equal, -1 if first date &amp;gt; second date, 1 if second date &amp;gt; first date" type="number"></returns>
</docItem>
<docItem ref="method:FormItem.setDisabled" flags="A" description="  Set this item to be enabled or disabled at runtime. &amp;#010" name="setDisabled" type="method" definingClass="class:FormItem">
<seeAlso ref="attr:FormItem.disabled">
</seeAlso>
<params description="true if this item should be disabled" optional="false" name="disabled" type="boolean">
</params>
    <groups>enable</groups>
</docItem>
<docItem ref="method:StretchImgButton.setIcon" flags="" description=" Change the icon being shown next to the title text.&amp;#010" name="setIcon" type="method" definingClass="class:StretchImgButton">
<params description="URL of new icon" optional="false" name="icon" type="URL">
</params>
    <groups>buttonIcon</groups>
</docItem>
<docItem ref="attr:PickList.pickListProperties" flags="IR" description="If specified this properties block will be applied to the pickList created for this&amp;#010 Form Item." name="pickListProperties" valueType="object" defaultValue="null" type="attr" definingClass="interface:PickList">
</docItem>
<docItem ref="method:List.removeAt" flags="" description=" Remove the item at the specified position, rearranging all subsequent items to fill the gap&amp;#010&amp;#010" name="removeAt" type="method" definingClass="interface:List">
<params description="position to remove" optional="false" name="pos" type="number">
</params>
<returns description="item that was removed" type="any"></returns>
    <groups>modification</groups>
</docItem>
<docItem ref="attr:SimpleType.valueMap" flags="IR" description="List of legal values for this type, like ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}." name="valueMap" valueType="ValueMap" defaultValue="null" type="attr" definingClass="class:SimpleType">
    <groups>dataType</groups>
</docItem>
<docItem ref="attr:DataSource.tagName" flags="IRA" description="Tag name to use when serializing to XML.  If unspecified, the &lt;code&gt;dataSource.ID&lt;/code&gt;&amp;#010 will be used." name="tagName" valueType="String" defaultValue="null" type="attr" definingClass="class:DataSource">
    <groups>clientDataIntegration</groups>
</docItem>
<docItem ref="attr:DSRequest.operationId" flags="I" description="When a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} sends a DSRequest, the&amp;#010 &lt;code&gt;dsRequest.operationId&lt;/code&gt; will be automatically picked up from the&amp;#010 &lt;code&gt;fetchOperation&lt;/code&gt;, &lt;code&gt;addOperation&lt;/code&gt;, etc properties of the&amp;#010 DataBoundComponent.  On the server, &lt;code&gt;operationId&lt;/code&gt; can be accessed via&amp;#010 dsRequest.getOperationId().&amp;#010 &lt;P&gt;&amp;#010 The &lt;code&gt;operationId&lt;/code&gt; serves as an identifier you can use to create&amp;#010 variations on the basic DataSource operations that are used by different components in&amp;#010 different parts of your application.&amp;#010 &lt;P&gt;&amp;#010 For example, you may be using a standard &lt;code&gt;fetch&lt;/code&gt; operation in one part of your&amp;#010 application, however on another screen you want to perform a &lt;code&gt;fetch&lt;/code&gt; operation on&amp;#010 the same DataSource but interpret search criteria differently (eg full text search).  You&amp;#010 could set a ListGrid's &lt;code&gt;fetchOperation&lt;/code&gt; property to a name for the special&amp;#010 search (eg &quot;booksFullTextSearch&quot;), and on the server, use dsRequest.getOperationId() to&amp;#010 detect the passed operationId and invoke the correct server code.&amp;#010 &lt;P&gt;&amp;#010 Note that if you ${isc.DocUtils.linkForRef('method:DataSource.fetchData','manually invoke')} a DataSource operation, you can&amp;#010 also specify operationId via the &lt;code&gt;requestProperties&lt;/code&gt; parameter." name="operationId" valueType="String" defaultValue="null" type="attr" definingClass="class:DSRequest">
    <groups>operations</groups>
</docItem>
<docItem ref="attr:StatefulCanvas.showFocus" deprecated="as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}" flags="IRW" description="Should we visibly change state when the canvas recieves focus?  Note that by default the&amp;#010 &lt;code&gt;over&lt;/code&gt; state is used to indicate focus." name="showFocus" valueType="boolean" defaultValue="false" type="attr" definingClass="class:StatefulCanvas">
    <groups>state</groups>
</docItem>
<docItem ref="attr:RichTextItem.endRow" flags="IRW" description="By default RichTextItems take up an entire row" name="endRow" valueType="boolean" defaultValue="true" type="attr" definingClass="class:RichTextItem">
</docItem>
<docItem ref="class:Button" description="The Button widget class implements interactive, style-based button widgets." name="Button" type="class">
    <methods>method:Button.getTitle</methods>
    <methods>method:Button.setTitle</methods>
    <methods>method:Button.setIconOrientation</methods>
    <methods>method:Button.setIcon</methods>
    <methods>method:Button.setAutoFit</methods>
    <methods>method:Button.setBaseStyle</methods>
    <methods>method:Button.select</methods>
    <methods>method:Button.deselect</methods>
    <methods>method:Button.isSelected</methods>
    <methods>method:Button.setSelected</methods>
    <methods>method:Button.addToRadioGroup</methods>
    <methods>method:Button.removeFromRadioGroup</methods>
    <methods>method:Button.setActionType</methods>
    <methods>method:Button.getActionType</methods>
    <methods>method:Button.setState</methods>
    <methods>method:Button.setDisabled</methods>
    <methods>method:Button.getState</methods>
    <methods>method:Button.action</methods>
    <methods>method:Button.setWrap</methods>
    <methods>method:Button.setAlign</methods>
    <methods>method:Button.setVAlign</methods>
    <methods>method:Button.iconClick</methods>
    <treeLocation>Client Reference/Control</treeLocation>
    <attrs>attr:Button.title</attrs>
    <attrs>attr:Button.hiliteAccessKey</attrs>
    <attrs>attr:Button.icon</attrs>
    <attrs>attr:Button.iconSize</attrs>
    <attrs>attr:Button.iconWidth</attrs>
    <attrs>attr:Button.iconHeight</attrs>
    <attrs>attr:Button.iconOrientation</attrs>
    <attrs>attr:Button.iconAlign</attrs>
    <attrs>attr:Button.iconSpacing</attrs>
    <attrs>attr:Button.showDisabledIcon</attrs>
    <attrs>attr:Button.showRollOverIcon</attrs>
    <attrs>attr:Button.showFocusedIcon</attrs>
    <attrs>attr:Button.showDownIcon</attrs>
    <attrs>attr:Button.showSelectedIcon</attrs>
    <attrs>attr:Button.autoFit</attrs>
    <attrs>attr:Button.baseStyle</attrs>
    <attrs>attr:Button.selected</attrs>
    <attrs>attr:Button.radioGroup</attrs>
    <attrs>attr:Button.actionType</attrs>
    <attrs>attr:Button.state</attrs>
    <attrs>attr:Button.showDisabled</attrs>
    <attrs>attr:Button.showDown</attrs>
    <attrs>attr:Button.showFocused</attrs>
    <attrs>attr:Button.showRollOver</attrs>
    <attrs>attr:Button.align</attrs>
    <attrs>attr:Button.valign</attrs>
    <attrs>attr:Button.wrap</attrs>
</docItem>
<docItem ref="classMethod:isc.sortObjectByProperties" flags="" description=" Given a simple javascript object, return that object sorted by properties, such that when &amp;#010 iterating through the properties of the object, values will show up in sorted order.&lt;br&gt;&amp;#010 Usage example - may be used to sort a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','formItem valueMap')} defined&amp;#010 as an object by display value.&amp;#010" name="sortObjectByProperties" type="classMethod" definingClass="class:isc">
<params description="Object to sort" optional="false" name="object" type="object">
</params>
<params description="Comparitor function to use when sorting the object properties" optional="true" name="comparitor" type="function">
</params>
<returns description="sorted version of the object passed in." type="object"></returns>
</docItem>
<docItem ref="attr:ListGrid.loadingDataMessage" flags="IRW" description="The string to display in the body of a listGrid while data is being loaded." name="loadingDataMessage" valueType="string" defaultValue="&quot;Loading data...&quot;" type="attr" definingClass="class:ListGrid">
<seeAlso ref="attr:ListGrid.loadingDataMessageStyle">
</seeAlso>
    <groups>loadingDataMessage</groups>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:DSRequest.parentNode" flags="R" description="For advanced use in integrating trees that &amp;#010 ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','load data on demand')} with web services,&amp;#010 &lt;code&gt;parentNode&lt;/code&gt; is automatically set in &quot;fetch&quot; DSRequests issued by a&amp;#010 ${isc.DocUtils.linkForRef('class:ResultTree')} that is loading children for that &lt;code&gt;parentNode&lt;/code&gt;.&amp;#010 &lt;P&gt;&amp;#010 This is sometimes needed if a web service requires that additional properties beyond the&amp;#010 ID of the parentNode must be passed in order to accomplished level-by-level loading.&amp;#010 A custom implementation of ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} can access&amp;#010 dsRequest.parentNode and add any such properties to ${isc.DocUtils.linkForRef('attr:DSRequest.data')}.&amp;#010 &lt;P&gt;&amp;#010 This property can only be read.  There is no meaning to setting this property&amp;#010 yourself." name="parentNode" valueType="TreeNode" defaultValue="{}" type="attr" definingClass="class:DSRequest">
</docItem>
<docItem ref="method:Canvas.getInnerWidth" flags="A" description="  Returns the amount of space available for (an) absolutely positioned child widget(s) or &amp;#010  HTML content, without introducing clipping, scrolling or overflow.&lt;br&gt;&amp;#010  This is the space within the viewport of the widget (including padding, but excluding &amp;#010  margins, borders or scrollbars) rendered at its specified size.&amp;#010&amp;#010" name="getInnerWidth" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getInnerHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerContentHeight">
</seeAlso>
<seeAlso ref="method:Canvas.getInnerContentWidth">
</seeAlso>
<returns description="inner width of the widget in pixels" type="number"></returns>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:ListGrid.sortAscendingImage" flags="IRWA" description="Image to show when sorting ascending. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format." name="sortAscendingImage" valueType="ImgProperties" defaultValue="{...}" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:ListGridField.emptyCellValue" flags="IRW" description="The value to display for a cell whose value is null or the empty&amp;#010 string after applying formatCellValue and valueMap (if any).&amp;#010 &lt;p&gt;&amp;#010 This is the field-specific attribute.  You may also set the emptyCellValue at the grid&amp;#010 level to define the emptyCellValue for all empty fields in the grid." name="emptyCellValue" valueType="string" defaultValue="&quot;&amp;amp;nbsp;&quot;" type="attr" definingClass="object:ListGridField">
<seeAlso ref="attr:ListGrid.emptyCellValue">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('emptyValues')}</examples>
    <groups>display_values</groups>
</docItem>
<docItem ref="attr:DynamicForm.titleWidth" flags="IRW" description="The width in pixels allocated to the title of every item in this form.  If you&amp;#010          don't specify explicit ${isc.DocUtils.linkForRef('attr:DynamicForm.colWidths')}, you can set this&amp;#010          value to the string &quot;*&quot; to divide the usable space evenly between titles and&amp;#010          fields." name="titleWidth" valueType="number or &quot;*&quot;" defaultValue="100" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="attr:Validator.type" flags="IR" description="Type of the validator.&amp;#010 &lt;p&gt;&amp;#010 This can be one of the built-in ${isc.DocUtils.linkForRef('class:ValidatorTypes')}, or the string &quot;custom&quot; to define&amp;#010 a custom validator." name="type" valueType="ValidatorTypes" defaultValue="null" type="attr" definingClass="class:Validator">
</docItem>
<docItem ref="attr:Applet.params" flags="IR" description="A map of key/value pairs to pass to the applet as parameters.  These are typically&amp;#010  accessible within the Java applet code." name="params" valueType="object" defaultValue="null" type="attr" definingClass="class:Applet">
</docItem>
<docItem ref="attr:Canvas.snapOffsetTop" flags="IRW" description="If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined for this widget, this property can be used to&amp;#010 specify an offset in px for the top coordinate of this widget.&amp;#010 &lt;P&gt;&amp;#010 For example if &lt;code&gt;snapTo&lt;/code&gt; is specifed as &lt;code&gt;&quot;T&quot;&lt;/code&gt; and &amp;#010 &lt;code&gt;snapOffsetTop&lt;/code&gt; is set to 6, this widget will be rendered 6px below the top&amp;#010 edge of its parent or master element." name="snapOffsetTop" valueType="integer" defaultValue="null" type="attr" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.snapTo">
</seeAlso>
    <groups>sizing</groups>
</docItem>
<docItem ref="attr:SpacerItem.showTitle" flags="IRW" description="we never show a separate title cell for spacers" name="showTitle" valueType="boolean" defaultValue="false" type="attr" definingClass="class:SpacerItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:Img.activeAreaHTML" flags="IRWA" description="Setting this attribute configures an image map for this image.  The value is expected as a&amp;#010 sequence of &amp;lg;AREA&amp;gt tags - e.g:&amp;#010 &lt;pre&gt;&amp;#010 Img.create({ &amp;#010     src: &quot;myChart.gif&quot;,&amp;#010     activeAreaHTML:&amp;#010         &quot;&amp;lt;AREA shape='rect' coords='10,50,30,200' title='30' href='javascript:alert(\&quot;30 units\&quot;)'&amp;gt;&quot; +&amp;#010         &quot;&amp;lt;AREA shape='rect' coords='50,90,80,200' title='22' href='javascript:alert(\&quot;22 units\&quot;)'&amp;gt;&quot;&amp;#010 });&amp;#010 &lt;/pre&gt;&amp;#010 &lt;u&gt;Implementation notes:&lt;/u&gt;&amp;#010 &lt;ul&gt;&amp;#010 &lt;li&gt;Quotes in the activeAreaHTML must be escaped or alternated appropriately.&lt;/li&gt;&amp;#010 &lt;li&gt;Image maps do not stretch to fit scaled images. You must ensure that the dimensions of&amp;#010 your Img component match the anticipated width and height of your image map (which will typically&amp;#010 match the native dimensions of your image). &lt;/li&gt;&amp;#010 &lt;li&gt;To change the image map of an existing Img component, first set yourImg.activeAreaHTML,&amp;#010 then call yourImg.markForRedraw(). Calls to yourImg.setSrc() will not automatically update the&amp;#010 image map. &lt;/li&gt;&amp;#010 &lt;li&gt;activeAreaHTML is not supported on tiled Img components (imageType:&quot;tile&quot;).&lt;/li&gt; &amp;#010 &lt;li&gt;Native browser support for image map focus/blur, keyboard events, and certain AREA tag&amp;#010 attributes (eg NOHREF, DEFAULT...) varies by platform. If your image map HTML uses attributes&amp;#010 beyond the basics (shape, coords, href, title), you should test on all supported browsers to&amp;#010 ensure that it functions as expected.&lt;/li&gt;&amp;#010 &lt;/ul&gt;" name="activeAreaHTML" valueType="String of HTML AREA tags" defaultValue="null" type="attr" definingClass="class:Img">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:isA.String" flags="" description="&amp;#010	Is &lt;code&gt;object&lt;/code&gt; a String object?&amp;#010&amp;#010" name="String" type="classMethod" definingClass="object:isA">
<params description="object to test" optional="false" name="object" type="object">
</params>
<returns description="true == &lt;code&gt;object&lt;/code&gt; is a String" type="boolean"></returns>
</docItem>
<docItem ref="method:ComboBoxItem.getSelectedRecord" flags="" description=" Returns the entire record object associated with the current value for this item&amp;#010 (or null if no matching record exists in the PickList data).&lt;br&gt;&amp;#010 Most commonly used for databound pickListItems to retrieve the values of other fields&amp;#010 in the record&amp;#010&amp;#010" name="getSelectedRecord" type="method" definingClass="class:ComboBoxItem">
<returns description="record object" type="object"></returns>
</docItem>
<docItem ref="method:Tree.getLeaves" flags="" description="&amp;#010 Return all the first-level leaves of a node.&amp;#010 &lt;br&gt;&lt;br&gt;&amp;#010 For load on demand trees (those that only have a partial representation client-side), this&amp;#010 method will return only nodes that have already been loaded from the server.  Furthermore,&amp;#010 for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},&amp;#010 so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface&amp;#010 instead of as a native Javascript Array.&amp;#010&amp;#010" name="getLeaves" type="method" definingClass="class:Tree">
<params description="node in question" optional="false" name="node" type="TreeNode">
</params>
<returns description="List of immediate children that are leaves." type="List"></returns>
</docItem>
<docItem ref="attr:ListGrid.canReorderFields" flags="IRW" description="Indicates whether fields in this listGrid can be reordered by dragging and&amp;#010          dropping header fields." name="canReorderFields" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <examples>${isc.DocUtils.linkForExampleId('columnOrder')}</examples>
    <groups>dragging</groups>
</docItem>
<docItem ref="attr:HeaderItem.colSpan" flags="IRW" description="by default, headers span all remaining columns" name="colSpan" valueType="measure" defaultValue="&quot;*&quot;" type="attr" definingClass="class:HeaderItem">
    <groups>appearance</groups>
</docItem>
<docItem ref="classAttr:Dialog.CANCEL_BUTTON_TITLE" flags="IRW" description="Title for the &lt;code&gt;&quot;Cancel&quot;&lt;/code&gt; button." name="CANCEL_BUTTON_TITLE" valueType="HTML" defaultValue="&quot;Cancel&quot;" type="classAttr" definingClass="class:Dialog">
<seeAlso ref="type:DialogButtons">
</seeAlso>
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="method:Selection.setSelected" flags="A" description=" Select or deselect a particular item.&lt;br&gt;&lt;br&gt;&amp;#010 All other selection routines go through this one, so by observing this routine you can&amp;#010 monitor all selection changes.&amp;#010" name="setSelected" type="method" definingClass="class:Selection">
<params description="object to select" optional="false" name="item" type="object">
</params>
<params description="turn selection on or off" optional="false" name="newState" type="boolean">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="attr:DynamicForm.selectOnFocus" flags="IRW" description="If this property is set to true, whenever a text based field in this form &amp;#010 (${isc.DocUtils.linkForRef('class:TextItem')}, ${isc.DocUtils.linkForRef('class:TextAreaItem')}) is given focus programmatically &amp;#010 (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.&lt;br&gt;&amp;#010 May be overridden at the form item level." name="selectOnFocus" valueType="boolean" defaultValue="false" type="attr" definingClass="class:DynamicForm">
    <groups>focus</groups>
</docItem>
<docItem ref="attr:DynamicForm.itemHoverAlign" flags="IRW" description="Text alignment  for hovers shown for items" name="itemHoverAlign" valueType="Alignment" defaultValue="null" type="attr" definingClass="class:DynamicForm">
<seeAlso ref="attr:FormItem.hoverAlign">
</seeAlso>
    <groups>Hovers</groups>
</docItem>
<docItem ref="attr:Canvas.margin" flags="IRW" description="Set the CSS Margin, in pixels, for this component.  Margin provides blank space outside&amp;#010 of the border.&amp;#010 &lt;P&gt;&amp;#010 This property sets the same thickness of margin on every side.  Differing per-side&amp;#010 margins can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.&amp;#010 &lt;P&gt;&amp;#010 Note that the specified size of the widget will be the size &lt;b&gt;including&lt;/b&gt; the margin&amp;#010 thickness on each side." name="margin" valueType="number" defaultValue="null" type="attr" definingClass="class:Canvas">
    <setter>setMargin</setter>
    <groups>appearance</groups>
</docItem>
<docItem ref="classAttr:ValidatorTypes.regexp" flags="IR" description="&lt;code&gt;regexp&lt;/code&gt; type validators will determine whether the value specified &amp;#010  matches a given regular expression.  The expression should be specified on the&amp;#010  &lt;code&gt;validator&lt;/code&gt; object as the &lt;code&gt;expression&lt;/code&gt; property." name="regexp" valueType="validatorDefinition" defaultValue="object" type="classAttr" definingClass="class:ValidatorTypes">
    <examples>${isc.DocUtils.linkForExampleId('regularExpression')}</examples>
</docItem>
<docItem ref="method:Chart.getFacet" flags="" description=" Get a facet definition by facetId.&amp;#010" name="getFacet" type="method" definingClass="interface:Chart">
<seeAlso ref="class:Facet">
</seeAlso>
<params description="the id of the facet to retrieve" optional="false" name="facetId" type="String">
</params>
<returns description="the Facet if found, or null" type="Facet"></returns>
</docItem>
<docItem ref="attr:DynamicForm.requiredRightTitleSuffix" flags="IRW" description="The string appended to the title of every required item in this form if&amp;#010 highlightRequiredFields is true and the titleOrientation property is set to &quot;right&quot;." name="requiredRightTitleSuffix" valueType="string" defaultValue="&quot;&lt;/B&gt;&quot;" type="attr" definingClass="class:DynamicForm">
    <groups>formTitles</groups>
</docItem>
<docItem ref="method:Canvas.setSnapEdge" flags="" description=" Set the snapEdge property of this canvas, and handle repositioning.&amp;#010&amp;#010" name="setSnapEdge" type="method" definingClass="class:Canvas">
<params description="new snapEdge value" optional="false" name="snapEdge" type="string">
</params>
    <groups>positioning</groups>
</docItem>
<docItem ref="group:xml serialization" name="xml serialization" type="group">
</docItem>
<docItem ref="attr:Facet.synchColumnLayout" flags="IR" description="if true, treat all values in this facet as a facetValueGroup - causes&amp;#010 synched header reorder and resize.&amp;#010  Note: only supported when all of a facets values are used." name="synchColumnLayout" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Facet">
</docItem>
<docItem ref="group:Prompting" description="Objects / methods used for displaying prompts and warnings to the user via (possibly modal)&amp;#010  isc Dialog objects." name="Prompting" type="group">
    <treeLocation>Client Reference/Control</treeLocation>
    <refs>classAttr:Dialog.Prompt</refs>
    <refs>classAttr:Dialog.Warn</refs>
    <refs>classMethod:isc.showPrompt</refs>
    <refs>classMethod:isc.clearPrompt</refs>
    <refs>classMethod:isc.warn</refs>
    <refs>classMethod:isc.say</refs>
    <refs>classMethod:isc.ask</refs>
    <refs>classMethod:isc.confirm</refs>
    <refs>classMethod:isc.askForValue</refs>
    <refs>classMethod:isc.showLoginDialog</refs>
</docItem>
<docItem ref="method:SectionStack.moveSection" flags="" description="&amp;#010 Moves the specified section(s) to a new position in the SectionStack order.  If you pass&amp;#010 in multiple sections, then each section will be moved to &lt;code&gt;newPosition&lt;/code&gt; in the&amp;#010 order specified by the &lt;code&gt;sections&lt;/code&gt; argument.&amp;#010&amp;#010" name="moveSection" type="method" definingClass="class:SectionStack">
<params description="Section(s) to move.  For this                  parameter, you can pass the position of the section in the&amp;#010                  SectionStack, the ID of the section, or a List of sectionIDs" optional="false" name="sections" type="position|sectionId|list of sectionIDs">
</params>
<params description="new position index for the section(s)." optional="false" name="position" type="number">
</params>
</docItem>
<docItem ref="attr:RPCRequest.paramsOnly" deprecated="As of SmartClient 5.6, use ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')} instead." flags="IRWA" description="When set to true, assume the request is not going to the SmartClient server, and hence send&amp;#010 a simple HTTP request.  Values specified in ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent to to the&amp;#010 server as HTTP request parameters.  If ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} method is POST and&amp;#010 ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is supplied, it is assumed to be a string to post as the HTTP&amp;#010 requestBody.&amp;#010 &lt;p&gt;&amp;#010 Setting this to true automatically defaults ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} to true&amp;#010 as well." name="paramsOnly" valueType="boolean" defaultValue="false" type="attr" definingClass="class:RPCRequest">
</docItem>
<docItem ref="attr:Window.statusBar" flags="R" description="Simple Canvas-based status bar, shown in the footer.  ${isc.DocUtils.linkForRef('method:Window.setStatus')} can be used to&amp;#010 show text here." name="statusBar" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="attr:Layout.reverseOrder" flags="IRW" description="Reverse the order of stacking for this Layout, so that the last member is shown first.&amp;#010 &lt;P&gt;&amp;#010 Requires a manual call to &lt;code&gt;reflow()&lt;/code&gt; if changed on the fly.&amp;#010 &lt;P&gt;&amp;#010 In RTL mode, for horizontal Layouts the value of this flag will be flipped during&amp;#010 initialization." name="reverseOrder" valueType="boolean" defaultValue="false" type="attr" definingClass="class:Layout">
    <groups>layoutPolicy</groups>
</docItem>
<docItem ref="method:Canvas.keyDown" flags="A" description="&amp;#010 Executed when a key is pressed on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}: true). &amp;#010 &lt;P&gt;&amp;#010 Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that&amp;#010 was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine&amp;#010 whether modifier keys were down.&amp;#010&amp;#010" name="keyDown" type="method" definingClass="class:Canvas">
<seeAlso ref="attr:Canvas.canFocus">
</seeAlso>
<returns description="false to prevent this event from bubbling to this widget's parent, true or undefined to bubble." type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem flags="IRW" type="attr" ref="attr:DynamicForm.fields" description="An array of field objects, specifying the order, layout, and types of each field in the&amp;#010 DynamicForm.&amp;#010 &lt;p&gt;&amp;#010 When both &lt;code&gt;dynamicForm.fields&lt;/code&gt; and &lt;code&gt;dynamicForm.dataSource&lt;/code&gt; are&amp;#010 set, &lt;code&gt;dynamicForm.fields&lt;/code&gt; acts as a set of overrides as explained in&amp;#010 ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}.&amp;#010 &lt;P&gt;&amp;#010 See ${isc.DocUtils.linkForRef('group:formLayout','Form Layout')} for information about how flags specified on&amp;#010 the FormItems control how the form is laid out." name="fields" valueType="Array of FormItem Properties" defaultValue="null" definingClass="class:DynamicForm">
    <getter>getFields</getter>
    <setter>setFields</setter>
<seeAlso ref="class:FormItem">
</seeAlso>
    <groups>items</groups>
</docItem>
<docItem ref="method:ListGrid.setShowHeader" flags="" description=" Show or hide the ListGrid header.&amp;#010" name="setShowHeader" type="method" definingClass="class:ListGrid">
<params description="true to show the header, false to hide it." optional="false" name="show" type="boolean">
</params>
    <groups>gridHeader</groups>
</docItem>
<docItem ref="classMethod:Date.setInputFormat" flags="" description=" Sets up the default format for strings being parsed into dates via &lt;code&gt;Date.parseInput()&lt;/code&gt;&amp;#010" name="setInputFormat" type="classMethod" definingClass="class:Date">
<seeAlso ref="classMethod:Date.parseInput">
</seeAlso>
<params description="Default format for strings to be parsed into Dates" optional="false" name="format" type="DateInputFormat">
</params>
</docItem>
<docItem ref="group:errorhandling" name="errorhandling" type="group">
</docItem>
<docItem ref="type:SelectionType" description="Controls how an object changes state when clicked" name="SelectionType" type="type">
<values description="object moves to &quot;down&quot; state temporarily (normal button)" value="StatefulCanvas.BUTTON"></values>
<values description="object remains in &quot;down&quot; state until clicked again (checkbox)" value="StatefulCanvas.CHECKBOX"></values>
<values description="object moves to &quot;down&quot; state, causing another object to go up (radio)" value="StatefulCanvas.RADIO"></values>
    <groups>state</groups>
    <groups>event handling</groups>
</docItem>
<docItem ref="attr:DateItem.invalidDateStringMessage" flags="IRW" description="Validation error message to display if the user enters an invalid date" name="invalidDateStringMessage" valueType="string" defaultValue="&quot;Invalid date&quot;" type="attr" definingClass="class:DateItem">
</docItem>
<docItem ref="method:ListGrid.getField" flags="" description=" Given a column number or field name, return the field definition.&amp;#010 &lt;P&gt;&amp;#010 When using ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','DataBinding')}, the field definition may be&amp;#010 a mix of information derived from ${isc.DocUtils.linkForRef('attr:ListGrid.fields')} and ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')}.&amp;#010&amp;#010" name="getField" type="method" definingClass="class:ListGrid">
<params description="number or id of the field." optional="false" name="colNum" type="number or ID">
</params>
<returns description="field definition" type="ListGridField"></returns>
</docItem>
<docItem ref="method:CubeGrid.getBaseStyle" flags="" description=" Return the base stylename for this cell.  Default implementation just returns this.baseStyle.&amp;#010 See getCellStyle for a general discussion of how to style cells.&amp;#010&amp;#010" name="getBaseStyle" type="method" definingClass="class:CubeGrid">
<seeAlso ref="method:CubeGrid.getCellStyle">
</seeAlso>
<params description="cell record as returned by getCellRecord" optional="false" name="record" type="object">
</params>
<params description="row number for the cell" optional="false" name="rowNum" type="number">
</params>
<params description="column number of the cell" optional="false" name="colNum" type="number">
</params>
<returns description="CSS class for this cell" type="CSSStyleName"></returns>
</docItem>
<docItem ref="attr:TreeNode.title" flags="IR" description="The title of the node as it should appear next to the node icon in the ${isc.DocUtils.linkForRef('class:Tree')}.  If left&amp;#010 unset, the value of ${isc.DocUtils.linkForRef('attr:TreeNode.name')} is used by default.  See the description in&amp;#010 ${isc.DocUtils.linkForRef('method:Tree.getTitle')} for full details.&amp;#010 &lt;p&gt;&amp;#010 Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')}." name="title" valueType="HTML" defaultValue="null" type="attr" definingClass="object:TreeNode">
<seeAlso ref="attr:Tree.titleProperty">
</seeAlso>
<seeAlso ref="method:Tree.getTitle">
</seeAlso>
</docItem>
<docItem ref="attr:ListGrid.sortFieldAscendingText" flags="IRW" description="If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, this&amp;#010 attribute will be shown as the menu item title to sort a field in ascending order." name="sortFieldAscendingText" valueType="string" defaultValue="&quot;Sort Ascending&quot;" type="attr" definingClass="class:ListGrid">
    <groups>i18nMessages</groups>
</docItem>
<docItem ref="attr:MenuItem.keyTitle" flags="IR" description="A string to display in the shortcut-key column for this item. If not&amp;#010 specified, the first KeyName value in ${isc.DocUtils.linkForRef('attr:MenuItem.keys')} will be used by default." name="keyTitle" valueType="string" defaultValue="see below" type="attr" definingClass="object:MenuItem">
    <examples>${isc.DocUtils.linkForExampleId('fullMenu')}</examples>
    <groups>menuKeys</groups>
</docItem>
<docItem ref="attr:TabSet.topEdgeOffsets" flags="IR" description="If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,&amp;#010 and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the &lt;code&gt;leftEdgeOffsets&lt;/code&gt;, &amp;#010 &lt;code&gt;rightEdgeOffsets&lt;/code&gt;, &lt;code&gt;topEdgeOffsets&lt;/code&gt; and &lt;code&gt;bottomEdgeOffsets&lt;/code&gt; &amp;#010 propertes allow the offsets of edges for the paneContainer to be customized depending on&amp;#010 the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.&amp;#010 &lt;P&gt;&amp;#010 The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the&amp;#010 desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}." name="topEdgeOffsets" valueType="EdgeSizes" defaultValue="null" type="attr" definingClass="class:TabSet">
</docItem>
<docItem ref="method:GridRenderer.refreshRow" flags="A" description=" Refresh an entire row of cells without redrawing the grid.&amp;#010 &lt;P&gt;&amp;#010 The cells' values, CSS classes, and CSS text will be refreshed, to the current values&amp;#010 returned by getCellValue(), getCellStyle() and getCellCSSText() respectively.&amp;#010&amp;#010" name="refreshRow" type="method" definingClass="class:GridRenderer">
<seeAlso ref="method:GridRenderer.refreshCellStyle" description="to update just styling"></seeAlso>
<seeAlso ref="method:GridRenderer.refreshCell">
</seeAlso>
<params description="row number of cell to refresh" optional="false" name="rowNum" type="number">
</params>
    <groups>appearance</groups>
</docItem>
<docItem ref="attr:DOMGrid.rootElement" flags="IRW" description="Root element (or document) to view in the tree." name="rootElement" valueType="DOMElement" defaultValue="null" type="attr" definingClass="class:DOMGrid">
    <setter>setRootElement</setter>
</docItem>
<docItem ref="attr:ImgButton.baseStyle" flags="IRW" description="Base CSS style.  As the component changes state and/or is selected, suffixes will be&amp;#010 added to the base style.&amp;#010 &lt;P&gt;&amp;#010 When the component changes state (eg becomes disabled), a suffix will be appended to this&amp;#010 style name, reflecting the following states: &quot;Over&quot;, &quot;Down&quot;, or &quot;Disabled&quot;.&amp;#010 &lt;P&gt;&amp;#010 If the widget is selected, the suffixes will be &quot;Selected&quot;, &quot;SelectedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and&amp;#010 ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be &quot;Focused&quot;,&amp;#010 &quot;FocusedOver&quot;, etc, or if the widget is both selected and focused, &quot;SelectedFocused&quot;,&amp;#010 &quot;SelectedFocusedOver&quot;, etc.&amp;#010 &lt;P&gt;&amp;#010 For example, if &lt;code&gt;baseStyle&lt;/code&gt; is set to &quot;button&quot;, this component is&amp;#010 ${isc.DocUtils.linkForRef('method:ImgButton.isSelected','selected')} and the mouse cursor is over this component, the style&amp;#010 &quot;buttonSelectedOver&quot; will be used." name="baseStyle" valueType="CSSStyleName" defaultValue="&quot;imgButton&quot;" type="attr" definingClass="class:ImgButton">
    <setter>setBaseStyle</setter>
</docItem>
<docItem ref="attr:TreeGrid.manyItemsImage" flags="IRW" description="The filename of the icon displayed use as the default drag tracker when for multiple&amp;#010 files and/or folders are being dragged." name="manyItemsImage" valueType="SCImgURL" defaultValue="&quot;[SKIN]folder_file.gif&quot;" type="attr" definingClass="class:TreeGrid">
    <groups>dragdrop</groups>
</docItem>
<docItem ref="attr:Slider.animateThumbTime" flags="IRW" description="Duration of thumb animation, in milliseconds." name="animateThumbTime" valueType="integer" defaultValue="250" type="attr" definingClass="class:Slider">
    <groups>animation</groups>
</docItem>
<docItem ref="method:Log.logWarn" flags="" description=" Log a message at &quot;warn&quot; priority&amp;#010 &amp;#010" name="logWarn" type="method" definingClass="class:Log">
<seeAlso ref="method:Log.logDebug" description="for usage info"></seeAlso>
<params description="message to log" optional="false" name="message" type="String">
</params>
<params description="category to log in" optional="true" name="category" type="String">
</params>
</docItem>
<docItem ref="method:Canvas.dragRepositionStart" flags="A" description="&amp;#010 Executed when dragging first starts. No default implementation.  Create this handler to set&amp;#010 things up for the drag reposition.&amp;#010&amp;#010" name="dragRepositionStart" type="method" definingClass="class:Canvas">
<seeAlso ref="method:Canvas.getOffsetX">
</seeAlso>
<seeAlso ref="method:Canvas.getOffsetY">
</seeAlso>
<returns description="false to cancel the drag reposition action" type="boolean"></returns>
    <groups>widgetEvents</groups>
</docItem>
<docItem ref="classMethod:EventHandler.getDragTarget" flags="A" description="&amp;#010 Returns the current dragTarget.  This is the component on which the drag and drop&amp;#010 interaction was initiated.  This only returns something meaningful during a drag and drop&amp;#010 interaction.&amp;#010&amp;#010" name="getDragTarget" type="classMethod" definingClass="class:EventHandler">
<seeAlso ref="attr:Canvas.dragTarget">
</seeAlso>
<returns description="The dragTarget." type="Canvas"></returns>
    <groups>mouseEvents</groups>
</docItem>
<docItem ref="method:ListGrid.chartRow" flags="" description=" Chart a single row of data, with each cell value labelled by the column header.&amp;#010&amp;#010" name="chartRow" type="method" definingClass="class:ListGrid">
<params description="row to chart" optional="false" name="rowNum" type="Number">
</params>
<params description="optional list of fields to use as labels.  By      default, all fields are used." optional="true" name="dataFields" type="Array of String">
</params>
<params description="properties to pass to the created chart" optional="true" name="chartProperties" type="Chart Properties">
</params>
<returns description="created Chart instance" type="Chart"></returns>
</docItem>
<docItem ref="method:Canvas.setHeight" flags="" description=" Resizes the widget vertically to the specified height (moves the bottom side of the&amp;#010 widget). The height parameter can be expressed as a percentage of viewport size or as&amp;#010 the number of pixels.&amp;#010 &lt;P&gt;&amp;#010 NOTE: if you're setting multiple coordinates, use resizeTo() or setRect() instead&amp;#010&amp;#010" name="setHeight" type="method" definingClass="class:Canvas">
<params description="new height" optional="false" name="height" type="number">
</params>
    <groups>sizing</groups>
</docItem>
<docItem ref="method:ResultSet.findIndex" flags="" description=" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}.  Checks only loaded rows and will not trigger a fetch.&amp;#010" name="findIndex" type="method" definingClass="class:ResultSet">
<params description="property to match, or if an Object is passed, set of                                        properties and values to match" optional="false" name="propertyName" type="String or Object">
</params>
<params description="value to compare against (if propertyName is a string)" optional="true" name="value" type="any">
</params>
<returns description="index of the first matching Object or -1 if not found" type="int"></returns>
    <groups>access</groups>
    <groups>find</groups>
</docItem>
<docItem ref="attr:Window.showBody" flags="IRWA" description="If true, draw the body contents when this Window is drawn." name="showBody" valueType="boolean" defaultValue="true" type="attr" definingClass="class:Window">
    <groups>appearance</groups>
    <groups>body</groups>
</docItem>
<docItem ref="method:Selection.isSelected" flags="" description="			Return true if a particular item is selected&amp;#010" name="isSelected" type="method" definingClass="class:Selection">
<params description="object to check" optional="false" name="item" type="object">
</params>
<returns description="true == object is selected								false == object is not selected" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Selection.selectItem" flags="" description=" Select a particular item by its position in the list&amp;#010&amp;#010" name="selectItem" type="method" definingClass="class:Selection">
<params description="index of the item to be selected" optional="false" name="position" type="number">
</params>
<returns description="true == selection actually changed, false == no change" type="boolean"></returns>
    <groups>selection</groups>
</docItem>
<docItem ref="method:Class.isObserving" flags="A" name="isObserving" type="method" definingClass="class:Class">
<params description="object we may be observing" optional="false" name="object" type="object">
</params>
<params description="name of the method to observed" optional="false" name="methodName" type="string">
</params>
<returns description="true == already observing that method" type="boolean"></returns>
    <groups>observation</groups>
</docItem>
<docItem ref="method:List.get" flags="" description=" Return the item at a particular position&amp;#010" name="get" type="method" definingClass="interface:List">
<params description="position of the element to get" optional="false" name="pos" type="Number">
</params>
<returns description="whatever's at that position, undef if not found" type="object"></returns>
    <groups>access</groups>
</docItem>
<docItem ref="group:htmlElement" name="htmlElement" type="group">
    <refs>method:Canvas.setHtmlElement</refs>
    <refs>method:Canvas.setHtmlPosition</refs>
    <refs>attr:Canvas.htmlElement</refs>
    <refs>attr:Canvas.htmlPosition</refs>
</docItem>
<docItem ref="attr:MultiFileItem.editButton" flags="IR" description="Button for launching a picker to add new files for upload.  Supports the properties of a&amp;#010 ${isc.DocUtils.linkForRef('object:FormItemIcon')}." name="editButton" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:MultiFileItem">
</docItem>
<docItem ref="method:HTMLFlow.loadingContent" flags="A" description=" Returns true if this htmlFlow is currently loading content from the server.&lt;br&gt;&amp;#010 Note: Does not apply to htmlFlows with ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set to &amp;#010 &lt;code&gt;&quot;page&quot;&lt;/code&gt;&amp;#010&amp;#010" name="loadingContent" type="method" definingClass="class:HTMLFlow">
<seeAlso ref="method:HTMLFlow.contentLoaded">
</seeAlso>
    <groups>contentLoading</groups>
</docItem>
<docItem ref="attr:Slider.minValue" flags="IRW" description="The minimum slider value. The slider value is equal to minValue when the thumb is at the&amp;#010 bottom or left of the slider (unless flipValues is true, in which case the minimum value&amp;#010 is at the top/right of the slider)" name="minValue" valueType="float" defaultValue="1" type="attr" definingClass="class:Slider">
<seeAlso ref="attr:Slider.flipValues">
</seeAlso>
    <examples>${isc.DocUtils.linkForExampleId('slider')}</examples>
</docItem>
<docItem ref="method:ListGrid.getCellValue" flags="A" description="          Obtains the display value for a specific cell according to the given input &amp;#010          parameters.&lt;br&gt;&amp;#010          To format the value displayed in the cell, make use of the &amp;#010          &lt;code&gt;formatCellValue&lt;/code&gt; methods rather than overriding this method directly.&amp;#010" name="getCellValue" type="method" definingClass="class:ListGrid">
<seeAlso ref="method:ListGrid.formatCellValue">
</seeAlso>
<params description="the current record object" optional="false" name="record" type="object">
</params>
<params description="number of the record in the current set of displayed                                       record (e.g. 0 for the first displayed record)" optional="false" name="recordNum" type="number">
</params>
<params description="number of the field in the listGrid.fields array" optional="false" name="fieldNum" type="number">
</params>
<returns description="display value for this cell" type="string"></returns>
    <groups>data</groups>
</docItem>
<docItem ref="attr:ListGrid.showRollOver" flags="IRW" description="Should we show different styling for the cell the mouse is over?&amp;#010 &lt;br&gt;&amp;#010 If true, the cell style will have the suffix &quot;Over&quot; appended." name="showRollOver" valueType="boolean" defaultValue="true" type="attr" definingClass="class:ListGrid">
    <groups>appearance</groups>
</docItem>
<docItem ref="classMethod:Log.getDefaultPriority" flags="" description=" Retrieves the default priority of messages that will be visible.&amp;#010&amp;#010" name="getDefaultPriority" type="classMethod" definingClass="class:Log">
<params description="Optional ISC class or instance - if passed the returns the default priority for &amp;#010     the class or instance only." optional="true" name="object" type="Class or Instance object">
</params>
<returns description="default priority for which messages will be logged." type="LogPriority"></returns>
</docItem>
<docItem ref="method:ResultSet.setCriteria" flags="" description=" Set the filter criteria to use when fetching rows.&amp;#010 &lt;P&gt;&amp;#010 Setting new criteria will invalidate the current cache, if any.&amp;#010&amp;#010" name="setCriteria" type="method" definingClass="class:ResultSet">
<params description="the filter criteria" optional="false" name="newCriteria" type="Criteria">
</params>
</docItem>
<docItem ref="attr:DetailViewer.fieldIdProperty" flags="IRWA" description="Name of the field in the DetailViewerRecord which specifies the data property for that record." name="fieldIdProperty" valueType="string" defaultValue="&quot;name&quot;" type="attr" definingClass="class:DetailViewer">
</docItem>
<docItem ref="attr:ListGrid.headerBaseStyle" flags="IR" description="${isc.DocUtils.linkForRef('attr:Button.baseStyle')} to apply to the buttons in the header, and the sorter, for &amp;#010 this ListGrid.&amp;#010 Note that depending on the ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor','Class')} of the header&amp;#010 buttons you may also need to set ${isc.DocUtils.linkForRef('attr:ListGrid.headerTitleStyle')}." name="headerBaseStyle" valueType="CSSStyleName" defaultValue="null" type="attr" definingClass="class:ListGrid">
    <groups>gridHeader</groups>
    <groups>appearance</groups>
</docItem>
<docItem ref="group:inlineFormItems" name="inlineFormItems" type="group">
</docItem>
<docItem ref="attr:Window.body" flags="R" description="Body of the Window, where ${isc.DocUtils.linkForRef('group:Items','contained components')} or ${isc.DocUtils.linkForRef('attr:Window.src','loaded content')}&amp;#010 is shown." name="body" valueType="AutoChild" defaultValue="null" type="attr" definingClass="class:Window">
</docItem>
<docItem ref="method:CubeGrid.getEventColumn" flags="" description=" Returns the column number of the most recent mouse event.&amp;#010" name="getEventColumn" type="method" definingClass="class:CubeGrid">
<params description="optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event" optional="false" name="x" type="number">
</params>
<returns description="column number, or -2 if beyond last drawn column" type="number"></returns>
    <groups>events</groups>
    <groups>selection</groups>
</docItem>
<docItem ref="class:IButton" description="The IButton widget class is a class that implements the same APIs as the &amp;#010 ${isc.DocUtils.linkForRef('class:Button')} class.  Depending on the current skin, &lt;code&gt;IButton&lt;/code&gt;s may be&amp;#010 on the ${isc.DocUtils.linkForRef('class:StretchImgButton')} component, which renders via images, or may be based on the&amp;#010 ${isc.DocUtils.linkForRef('class:Button')} component, which renders via CSS styles." name="IButton" type="class">
    <treeLocation>Client Reference/Control</treeLocation>
</docItem>
<docItem ref="class:Snapbar" description="Subclass of the ${isc.DocUtils.linkForRef('class:Splitbar')} class that uses the &lt;code&gt;grip&lt;/code&gt; functionality&amp;#010 to show a stateful open / close indicator." name="Snapbar" type="class">
    <treeLocation>Client Reference/Layout</treeLocation>
    <attrs>attr:Snapbar.showRollOver</attrs>
    <attrs>attr:Snapbar.showDown</attrs>
    <attrs>attr:Snapbar.showGrip</attrs>
    <attrs>attr:Snapbar.showDownGrip</attrs>
    <attrs>attr:Snapbar.showRollOverGrip</attrs>
    <attrs>attr:Snapbar.showClosedGrip</attrs>
    <attrs>attr:Snapbar.gripImgSuffix</attrs>
<seeAlso ref="class:Splitbar">
</seeAlso>
<seeAlso ref="class:Layout">
</seeAlso>
</docItem>
<docItem exampleConfig="TextAreaItem.xml" ref="class:TextAreaItem" description="Class for editable multi-line text areas (uses HTML &lt;code&gt;&amp;lt;TEXTAREA&amp;gt;&lt;/code&gt; object)" name="TextAreaItem" type="class">
    <attrs>attr:TextAreaItem.wrap</attrs>
    <attrs>attr:TextAreaItem.width</attrs>
    <attrs>attr:TextAreaItem.height</attrs>
    <attrs>attr:TextAreaItem.textBoxStyle</attrs>
    <attrs>attr:TextAreaItem.iconVAlign</attrs>
    <attrs>attr:TextAreaItem.selectOnFocus</attrs>
    <examples>${isc.DocUtils.linkForExampleId('textAreaItem')}</examples>
</docItem>
</docItems>
