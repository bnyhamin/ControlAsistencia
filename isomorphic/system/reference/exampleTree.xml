<!--  
-->


<ExampleTree ID="exampleTree" openProperty="isOpen">
<nodeVisibility>sdk</nodeVisibility>
<!--  -->
<root name="root/">
<children>


<!-- Welcome -->
<ExampleFolder
    title="Welcome" 
    isOpen="true"
    screenshot="screenshots/tabs_ds_code.png"
    screenshotWidth="291" screenshotHeight="176"><description>
    Welcome to the SmartClient Feature Tour!
    &lt;BR&gt;
    &lt;BR&gt;
    Click on the name of an example in the tree on the left to load it.
    &lt;BR&gt;
    &lt;BR&gt;
    With an example loaded, you can view source code by clicking on the tabs shown above the
    running example.
    &lt;BR&gt;
    &lt;BR&gt;
    For an overview of how to use this Feature Explorer, including specific instructions for
    using code shown here in a standalone application, please see the &lt;a target=_blank
    href='${isc.ExampleViewer.getRefDocsURL()}#featureExplorerOverview'&gt;
    Feature Explorer Overview&lt;/a&gt; topic in the Reference Docs.
    <!--  -->
      

</description><children>
<!--
    <Example
        title="Hello World"
        jsURL="welcome/hello.js"
        xmlURL="welcome/hello.xml"><description><![CDATA[
        A SmartClient <code>Label</code> component displays the "Hello world!" message.
        ]]></description></Example>
-->
   <Example
        showSkinSwitcher="true"
        title="Hello World"
        jsURL="welcome/helloButton.js"
        xmlURL="welcome/helloButton.xml"><description><![CDATA[
        A SmartClient <code>IButton</code> component responds to mouse clicks by showing a
        modal <code>Dialog</code> component with the "Hello world!" message.  Source code is
        provided in both XML and JS formats.
        ]]></description></Example>
        
    <Example
        title="Hello World (styling)"
        visibility="sdk"
        jsURL="welcome/helloStyled.js"
        xmlURL="welcome/helloStyled.xml"><tabs>
        <tab title="CSS" url="welcome/helloStyled.css"/>
        </tabs><description><![CDATA[
        This <code>Label</code> component is heavily styled with a combination of CSS class,
        CSS attribute shortcuts, and SmartClient attributes.  Source code is
        provided in both XML and JS formats.
        ]]></description></Example>
    <Example
        title="Hello You (form)"
        visibility="sdk"
        jsURL="welcome/helloForm.js"
        xmlURL="welcome/helloForm.xml"><description><![CDATA[
        This SmartClient <code>FormLayout</code> provides a text field and a button control.
        Type your name in the field, then click the button for a personalized message.
        Source code is provided in both XML and JS formats.
        ]]></description></Example>

<!-- how about a flag like "skinScreenShots" - in which case we can look at (say) isc.currentSkin and
     append to the screenshot property. Bit of a hack - that prop may be unset -->        
    <Example
        id="showcaseApp"
        title="Showcase Application"
        needServer="true"
        jsURL="demoApp/demoAppJS.js"
        xmlURL="demoApp/demoAppXML.xml"
        dataSource="supplyCategory"
        fullScreen="true"
        showSkinSwitcher="true"        
        screenshot="demoApp/demoApp.png"
        screenshotWidth="480"
        screenshotHeight="337"
        >
        <tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs>
        <description>Demonstrates a range of SmartClient GUI components, data binding operations,
        and layout managers in a single-page application.
        </description></Example>

    <Example
        jsURL="devConsole/devConsole.js"
        title="Developer Console"
        showSource="false"
        ><description><![CDATA[
The Developer Console is a suite of development tools implemented in SmartClient itself.  The
Console runs in its own browser window, parallel to your running application, so it is always
available: in every browser, and in every deployment environment.<BR> 
Click on the name of a screenshot below to see more information about developer
console features.
        ]]></description></Example>
    <Example
        title="SmartClient Docs"
        jsURL="docs/docs.js"
        showSource="false"
        ><description>
        SmartClient contains over 100 documented components with more than 2000 documented,
        supported APIs.  All of SmartClient's documentation is integrated into a
        SmartClient-based, searchable documentation browser, including API reference, concepts,
        tutorials, live examples, architectural blueprints and deployment instructions.
        </description></Example>
</children></ExampleFolder>



<!-- Concepts -->
<!--
<ExampleFolder title="Concepts" isOpen="false"><description>
    Essential SmartClient concepts.
</description><children>
    <Example title="Visual components" xmlURL=".xml" jsURL=".js"><description>
        Visual components are the building blocks of SmartClient applications.
        </description></Example>
    <Example title="Inline HTML" xmlURL=".xml" jsURL=".js"><description>
        HTML in SmartClient
        Embed existing web pages, portlets, and components inside SmartClient components.
        &lt;code&gt;HTMLFlow&lt;/code&gt; and &lt;code&gt;HTMLPane&lt;/code&gt; components manage
        and display your page fragments in standard HTML and CSS.
        </description></Example>
    <Example title="Layouts" xmlURL=".xml" jsURL=".js"><description>
        Create pixel-perfect page layouts without CSS hacks.
        HLayout, VLayout, HStack, and VStack are the building blocks for easy liquid layouts.
        </description></Example>
    <Example title="Editors" xmlURL=".xml" jsURL=".js"><description>
        Create flexible multi-field forms and grids for user data entry.
        FormLayout and ListGrid components manage a rich set of built-in and custom input
        controls for all data types.
        </description></Example>
    <Example title="DataSources" xmlURL=".xml" jsURL=".js"><description>
        Accelerate development with model-driven components.
        DataSources provide a shared data model for your forms, grids, and reports, with
        easy read-write data binding to JSON, XML, WSDL, POJOs, and other remote data providers.
        </description></Example>
    <Example title="Extensions" xmlURL=".xml" jsURL=".js"><description>
        Build your own SmartClient components.
        The SmartClient class system is fully exposed to customize, aggregate, or build
        new components for your unique requirements.
        </description></Example>
</children></ExampleFolder>
-->


<!-- PARENT FOLDER: Basics -->
<ExampleFolder
    title="Basics"
    isOpen="false"><description>
    Basic capabilities shared by all SmartClient visual components.
</description><children>


<!-- Basics > Components -->
<ExampleFolder
    title="Components" 
    isOpen="false"><description>
    Basic capabilities shared by all SmartClient visual components.
</description><children>
    <Example
        id="create"
        title="Create"
        jsURL="basics/create.js"><description>
        Click the button to create new cube objects.
        </description></Example>
    <Example
        id="autodraw"
        title="Draw"
        jsURL="basics/draw.js"><description>
        Click the button to draw another Label component. The first Label is configured
        to draw automatically.
        </description></Example>
    <Example
        id="showAndHide"
        title="Show &amp; Hide"
        jsURL="basics/show.js"><description>
        Click the buttons to show or hide the message.
        </description></Example>
    <Example
        id="move"
        title="Move"
        jsURL="basics/move.js"><description>
        Click and hold the arrow to move the van. Click on the solid circle to return to
        the starting position.
        </description></Example>
    <Example
        id="resize"
        title="Resize"
        jsURL="basics/resize.js"><description>
        Click the buttons to expand or collapse the text box.
        </description></Example>
    <Example
        id="layer"
        title="Layer"
        jsURL="basics/layer.js"><description>
        Click the buttons to move the draggable box above or below the other boxes.
        </description></Example>
    <Example
        title="Stack"
        jsURL="basics/stack.js"><description><![CDATA[
        <code>HStack</code> and <code>VStack</code> containers manage the stacked positions
        of multiple member components.
        ]]></description></Example>
    <Example
        title="Layout"
        jsURL="basics/layout.js"><description><![CDATA[
        <code>HLayout</code> and <code>VLayout</code> containers manage the stacked positions and
        sizes of multiple member components. Resize the browser window to reflow these layouts.
        ]]></description></Example>
    <Example
        id="inlineComponents"
        title="Inline components"
        iframe="true"
        url="inlineComponents/inlineComponents.html"
        doEval="false"
        ><tabs>
        <tab title="cssLayout.css" url="inlineComponents/cssLayout.css"/>
        </tabs><description><![CDATA[
        SmartClient GUI components are assembled from the same standard HTML and CSS as
        plain old web pages. So you can add SmartClient controls above, below, inline,
        and inside your existing web page elements.
        ]]></description></Example>
</children></ExampleFolder>

<!-- Basics > HTML -->
<ExampleFolder
    title="HTML" 
    isOpen="false"><description>
    Mixing SmartClient components with HTML pages, chunks, and elements.
</description><children>
    <Example title="Inline Components" ref="inlineComponents"/>
    <Example title="Back Button"><description>
        SmartClient supports browser history management.  Click your browser's Back button to go
        to a previous example, and click forward to return to this example.  You can even
        navigate off the SmartClient site and navigate back.  SmartClient's History module
        allows you to pick which application events create history entries.
        </description></Example>
    <Example
        id="htmlFlow"
        title="HTMLFlow"
        jsURL="html/htmlFlow.js" xmlURL="html/htmlFlow.xml"><description><![CDATA[
        The <code>HTMLFlow</code> component displays a chunk of standard HTML in a free-form,
        flowable region.
        ]]></description></Example>
    <Example
        id="htmlPane"
        title="HTMLPane"
        jsURL="html/htmlPane.js" xmlURL="html/htmlPane.xml"><description><![CDATA[
        The <code>HTMLPane</code> component displays a chunk or page of standard HTML in a
        sizeable, scrollable pane.
        ]]></description></Example>
    <Example
        id="label"
        title="Label"
        jsURL="html/htmlLabel.js" xmlURL="html/htmlLabel.xml"><description><![CDATA[
        The <code>Label</code> component adds alignment, text wrapping, and icon support for
        small chunks of standard HTML.
        ]]></description></Example>
    <Example id="RichTextEditor" title="Editing HTML" jsURL="html/richTextEditor.js"    
       xmlURL="html/richTextEditor.xml" requiresModules="RichTextEditor">
       <description>RichTextEditor supports editing of HTML with a configurable set of
       styling controls</description></Example>
    <Example
        id="img"
        title="Img"
        jsURL="html/htmlImg.js"><description><![CDATA[
        The <code>Img</code> component displays images in the standard web formats
        (png, gif, jpg) and other image formats supported by the web browser.
        ]]></description></Example>
    <Example
        id="dynamicContents"
        title="Dynamic HTML (inline)"
        jsURL="html/htmlDynamic1.js"><description>
        Embed JavaScript expressions inside chunks of HTML to create simple dynamic elements.
        </description></Example>
    <Example
        id="setContents"
        title="Dynamic HTML (set)"
        jsURL="html/htmlDynamic2.js"><description>
        Click the buttons to display different chunks of HTML.
        </description></Example>
    <Example
        id="loadImages"
        title="Load images"
        jsURL="html/htmlLoadImg.js"><description>
        Click the buttons to load different images.
        </description></Example>
    <Example
        title="Load HTML chunks"
        jsURL="html/htmlLoadChunks.js"><description>
        Click the buttons to load different chunks of HTML.
        </description></Example>
    <Example
        id="loadHtmlPages"
        title="Load HTML pages"
        jsURL="html/htmlLoadPages.js"><description>
        Click the buttons to display different websites.
        </description></Example>
</children></ExampleFolder>



<!-- Basics > Interaction -->
<ExampleFolder
    title="Interaction" 
    isOpen="false"><description>
    Basic interactive component capabilities.
    &lt;BR&gt;
    &lt;BR&gt;
    SmartClient components provide hundreds of hooks for event handlers, including
    all the standard mouse, keyboard, and communication events.
</description><children>
    <Example title="Mouse events" id="customMouseEvents" jsURL="interact/mouseEvents.js"><description>
        Mouse over the blue square to see the color respond to your position.  Click and hold
        to see a fade.  If you have a mousewheel, roll up and down to change size.
        SmartClient components support the standard mouse events in addition to custom events
        like "mouseStillDown".
        </description></Example>
    <Example title="Drag events" id="customDrag" jsURL="interact/dragEvents.js"><description>
        Click and drag the pawn over "Show Drop Reticle" to see a simple custom drag and drop
        interaction.
        </description></Example>
    <Example title="Hovers / Tooltips" id="customHovers" jsURL="interact/hover.js"
             showSkinSwitcher="true"
             css="interact/hover.css"><description>
        Hover over the button, the image, the "Interesting Facts" field of the grid, and the
        "Severity" form label to see various hovers.
        </description></Example>
    <Example title="Context menus" id="contextMenus" jsURL="interact/contextmenu.js" 
             showSkinSwitcher="true">
    <description>
        Right click (or option-click on Macs) on the Yin Yang image to access a context menu.
        You can also click on the "Widget" button to access the identical menu.
        </description></Example>
    <Example title="Enable / Disable" ref="fieldEnableDisable"/>
    <Example title="Focus &amp; Tabbing" id="focus" jsURL="interact/focus.js"><description>
        Press the Tab key to cycle through through the tab order starting from the blue
        piece.  Then drag reorder either piece, click on the leftmost piece and use Tab to
        cycle through again. Tab order is automatically updated to reflect the visual order.
        </description></Example>
    <Example title="Cursors" id="cursors" jsURL="interact/cursor.js"><description>
        Mouse over the draggable labels for a 4-way move cursor.  Move over drag resizeable
        edges to see resize cursors.  Mouse over the "Save" button to see the hand cursor,
        which is not shown if the "Save" button is disabled.
        </description></Example>
    <!-- Note on keyboard events: click required to put focus onto the arrow. Explicit call to
         this.focus() as part of the label's draw() method doesn't work in the FE. -->
    <Example title="Keyboard events" id="keyboardEvents" jsURL="interact/keyboard.js"><description>
        Click the "Move Me" label, then use the arrow keys to move it around.  Hold down keys to see the
        component respond to key repetition. SmartClient unifies keyboard event handling across browsers.
        </description></Example>
    <!--  -->
    <Example title="Modality" id="modality" jsURL="interact/modality.js"  
             showSkinSwitcher="true"><description>
        Click on "Show Window" to show a modal window.  Note that the "Touch This" button no
        longer shows rollovers or an interactive cursor, nothing outside the window can be
        clicked, clicks outside the window cause the window to flash, and tabbing remains in a
        closed loop cycling through only the contents of the window.
        </description></Example>
</children></ExampleFolder>


</children></ExampleFolder> <!-- closing parent folder: Basics -->



<!-- PARENT FOLDER: Effects -->
<ExampleFolder
    title="Effects"
    isOpen="true"><description>
    Effects for creating a polished, branded, appealing application.
    &lt;BR&gt;
    &lt;BR&gt;
    SmartClient supports rich skinning and styling capabilities, drag and drop interactions,
    and built-in animations.
</description><children>


<!-- Effects > Drag & Drop -->
<ExampleFolder
    title="Drag &amp; Drop" 
    isOpen="false"><description>
    Drag &amp; drop services and built-in drag &amp; drop interactions.
</description><children>
    <Example
        title="Drag list (copy)" 
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListCopy.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag and drop to copy items from the first list to the second list.
        You can drag over the top or bottom edge of a scrolling list to scroll
        in that direction before dropping.
        </description></Example>
    <Example
        title="Drag list (move)"
        id="dragListMove"
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListMove.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag and drop to move items within or between the lists.
        You can drag over the top or bottom edge of a scrolling list to scroll
        in that direction before dropping.
        </description></Example>
    <Example
        title="Drag list (select)"
        id="dragListSelect"
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListSelect.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag to select items in the first list. The second list will
        mirror your selection.
        </description></Example>
    <Example
        id="dragTree"
        showSkinSwitcher="true"
        title="Drag tree (move)"
        jsURL="dragdrop/dragTreeMove.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragTree_data.js"/>
        </tabs><description>
        Drag and drop to move parts and folders within and between the trees.
        You can open a closed folder by pausing over it during a drag interaction
        (aka "spring loaded folders").
        </description></Example>
    <Example
        title="Drag move"
        id="dragMove"
        jsURL="dragdrop/dragMove.js"><description>
        Drag and drop to move pieces between the boxes. The green box sets a thicker green
        "drop line" indicator to match its border. The blue box shows a "drag placeholder"
        outline at the original location of the dragged object while dragging.
        </description></Example>
    <Example
        title="Drag reorder"
        jsURL="dragdrop/dragReorder.js"><description>
        Drag and drop to rearrange the order of the pieces.
        </description></Example>
    <Example
        title="Drag types"
        jsURL="dragdrop/dragTypes.js"><description>
        Drag and drop to move pieces between the three boxes.
        The gray box accepts any piece.
        The blue and green boxes accept pieces of the same color only.
        </description></Example>
    <Example
        title="Drag create"
        id="dragCreate"
        jsURL="dragdrop/dragCreate.js"><description>
        Drag the large cubes into the boxes to create new small cubes.
        The blue, yellow, and green boxes accept cubes with the same color only.
        The gray box accepts any color.
        Right-click on the small cubes to remove them from the boxes.
        </description></Example>
    <Example
        title="Drag effects"
        id="dragEffects"
        jsURL="dragdrop/dragEffects.js"><description>
        Click and drag to move the labels.
        </description></Example>
    <Example
        title="Drag reposition"
        visibility="sdk"
        jsURL="dragdrop/dragReposition.js"><description>
        Click and drag to move the piece.
        </description></Example>
    <Example
        title="Drag resize"
        id="dragResize"
        jsURL="dragdrop/dragResize.js"><description>
        Click and drag on the edges of the labels to resize.
        </description></Example>
    <Example
        title="Drag tracker"
        id="dragTracker"
        jsURL="dragdrop/dragTracker.js"><description>
        Drag and drop the pieces onto the box.
        </description></Example>
    <Example
        title="Drag pan"
        id="dragPan"
        jsURL="dragdrop/dragPan.js"><description>
        Click and drag to pan the image inside its frame.
        </description></Example>
</children></ExampleFolder>


<!-- Effects > Animation -->
<ExampleFolder
    title="Animation" 
    isOpen="false"><description>
    Animation services and built-in animation effects.
</description><children>
    <Example
        title="Animate tree"
        id="animateTree"
        showSkinSwitcher="true"
        jsURL="animate/animateTree.js"><description>
        Click the open/close icon for any folder.
        </description>
        <tabs><tab title="exampleData" url="animate/animateTreeData.js"/></tabs>
        </Example>
    <Example
        id="windowMinimize"
        showSkinSwitcher="true"
        title="Animate minimize"
        jsURL="animate/animateMinimize.js"><description>
        Click on the minimize button (round button in header with flat line).
        </description></Example>
    <Example
        title="Animate sections"
        id="animateSections"
        showSkinSwitcher="true"
        jsURL="animate/animateSections.xml"><description>
        Click on any section header to expand/collapse sections.
        </description></Example>
    <Example
        title="Animate layout"
        id="animateLayout"
        jsURL="animate/animateLayout.js"><description>
        Click on the buttons to hide and show the green star.
        </description></Example>
    <Example
        title="Animate move"
        id="animateMove"
        jsURL="animate/animateMove.js"><description>
        Click the buttons to move the Label into view or out of view.
        </description></Example>
    <Example
        title="Animate resize"
        id="animateResize"
        jsURL="animate/animateResize.js"><description>
        Click the buttons to expand or collapse the text box.
        </description></Example>
    <Example
        title="Animate wipe"
        id="animateWipe"
        jsURL="animate/animateWipe.js"><description>
        Click the buttons to show or hide the Label with a "wipe" effect.
        </description></Example>
    <Example
        title="Animate slide"
        jsURL="animate/animateSlide.js"><description>
        Click the buttons to show or hide the Label with a "slide" effect.
        </description></Example>
    <Example
        title="Animate zoom"
        id="animateZoom"
        jsURL="animate/animateZoom.js"><description>
        Click the buttons to zoom or shrink the image.
        </description></Example>
    <Example
        title="Animate fade"
        id="animateFade"
        jsURL="animate/animateFade.js"><description>
        Click the buttons to fade the image.
        </description></Example>
    <Example
        title="Animate sequence (simple)"
        jsURL="animate/animateSeqSimple.js"><description>
        Click the buttons for a 2-stage expand or collapse effect.
        </description></Example>
    <Example
        title="Animate sequence (complex)"
        jsURL="animate/animateSeqComplex.js"><description>
        Click to select and zoom each piece.
        </description></Example>
    <Example
        title="Animate custom"
        id="customAnimation"
        jsURL="animate/animateCustom.js"><description>
        Click on the globe for a custom "orbit" animation.
        </description></Example>
</children></ExampleFolder>

<!-- Effects > Look & Feel -->
<ExampleFolder
    title="Look &amp; Feel"
    isOpen="false"><description>
    Apply rich visual styles to SmartClient components.
</description><children>
    <Example
        title="Edges"
        id="edges"
        jsURL="lookfeel/edges.js"><description>
        Drag the text boxes. These boxes show customized frame and glow effects
        using edge images.
        </description></Example>
    <Example
        title="Corners"
        id="corners"
        jsURL="lookfeel/corners.js"><description>
        Drag the text boxes. These boxes show customized rounded-corner effects
        using edge images.        
        </description></Example>
    <Example
        title="Shadows"
        id="shadows"
        jsURL="lookfeel/shadows.js"><description>
        Drag the slider to change the shadow depth for the text box.
        </description></Example>
    <Example
        title="Background color"
        visibility="sdk"
        jsURL="lookfeel/bgColor.js"><description>
        Click on the color picker to select a background color for the box.
        </description></Example>
    <Example
        title="Background texture"
        visibility="sdk"
        jsURL="lookfeel/bgImage.js"><description>
        Click any button to change the background texture for the box.
        </description></Example>
    <Example
        title="Translucency"
        id="translucency"
        jsURL="lookfeel/opacity.js"><description>
        Drag the slider to change opacity.
        </description></Example>
<!-- 

-->
    <Example
        title="Box attributes"
        visibility="sdk"
        jsURL="lookfeel/boxAttrs.js"><description>
        Drag the sliders to change the CSS box attributes.
        </description></Example>
    <Example
        title="CSS styles"
        id="styles"
        jsURL="lookfeel/styles.js"><tabs>
        <tab title="CSS" url="lookfeel/styles.css"/>
        </tabs><description>
        Click the radio buttons to apply different CSS styles to the text. Click the CSS tab for
        CSS class definitions.&lt;BR&gt;
        This container auto-sizes to the styled text.
        </description></Example>
    <Example
        title="Consistent sizing"
        id="consistentSizing"
        jsURL="lookfeel/consistentSizing.js"
        css="lookfeel/consistentSizing.css"><description>
      Drag the slider to resize all three text boxes. The box sizes match despite different
      edge styling specified in CSS, enabling CSS-based skinning without affecting
      application layout.
    </description></Example>
<!--
    <Example
        title="Icons"
        jsURL="lookfeel/icons.js"><description>

        </description></Example>
-->
<!--
    <Example
        title="Form controls"
        jsURL="lookfeel/formStyle.js"><description>

        </description></Example>
-->
    <Example
        title="Grid cells"
        id="gridCells"
        showSkinSwitcher="true"
        jsURL="grids/formatting/cellStyles.js"><tabs>
        <tab title="CSS" url="grids/formatting/cellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over the rows and click-drag to select rows, to see the effects of different
        base styles on these two grids.
        </description></Example>        
</children></ExampleFolder>



</children></ExampleFolder> <!-- closing parent folder: Effects -->



<!-- PARENT FOLDER: Grids -->
<ExampleFolder
    showSkinSwitcher="true"
    title="Grids"
    isOpen="true"><description>
    High-performance interactive data grids.
</description><children>
    <!--
    <Example
        title="ListGrid Showcase"
        jsURL="grids/gridShowcase.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        ListGrid showcase.
        </description></Example>
    <Example
        title="ListGrid"
        xmlURL="ListGrid.xml"><description>
        Click, ctrl-click, or shift-click to select rows. Click column headers to sort. Drag
        column headers to resize or reorder. Move row selection with arrow keys.
        </description></Example>
      -->

<!-- Grids > Appearance (combining Layout and Formatting for now) -->
<ExampleFolder
    title="Appearance"
    isOpen="false"><description>
    Styling, sizing and formatting options for grids, as well as built-in end user controls.
</description><children>
    <Example
        title="Column order"
        id="columnOrder"
        jsURL="grids/layout/columnOrder.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop the column headers to rearrange columns in the grid.
        Right-click the column headers to hide or show columns.
        Click the buttons to hide or show the "Capital" column.
        </description></Example>
    <Example
        title="Column size"
        id="columnSize"
        jsURL="grids/layout/columnSize.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click and drag between the column headers to resize columns in the grid.
        </description></Example>
    <Example
        title="Column align"
        visibility="sdk"
        jsURL="grids/layout/columnAlign.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the radio buttons to change the alignment of the "Flag" column.
        </description></Example>
    <Example
        title="Column headers"
        visibility="sdk"
        jsURL="grids/layout/columnHeaders.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to show or hide the column headers.
        </description></Example>
    <Example
        title="Column titles"
        visibility="sdk"
        jsURL="grids/layout/columnTitles.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to change the title of the "Country" column.
        </description></Example>
    <Example
        title="Multiline values"
        id="multilineValues"
        jsURL="grids/layout/multiLineValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description>
        Click and drag between the "Background" and "Flag" column headers, or resize your browser
        window to change the size of the entire grid. The "Background" values are
        confined to a fixed row height.
        </description></Example>
    <Example
        title="Autofit values"
        id="autofitValues"
        jsURL="grids/layout/autoFitValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description>
        Click and drag between the "Background" and "Flag" column headers, or resize your browser
        window to change the size of the entire grid. The rows resize to fit
        the "Background" values.
        </description></Example>
    <Example
        title="Autofit rows"
        id="autofitRows"
        jsURL="grids/layout/autoFitRows.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to show different numbers of records. The grid resizes to fit
        all rows without scrolling.
        </description></Example>
    <!-- hidden: exposes LG.body, and ledger styles unlikely to need to be flipped on/off
                 dynamically
    <Example
        title="Ledger style"
        jsURL="grids/formatting/ledgerStyle.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to enable or disable alternating light/dark rows.
        </description></Example>
        -->
    <Example
        title="Cell styles"
        jsURL="grids/formatting/cellStyles.js"><tabs>
        <tab title="CSS" url="grids/formatting/cellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over the rows and click-drag to select rows, to see the effects of different
        base styles on these two grids.
        </description></Example>
    <Example
        title="Hilite cells (add style)"
        id="addStyle"
        jsURL="grids/formatting/addStyle.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid hilites "Population" values greater than 1 billion or less than 50 million
        using additive style attributes (text color and weight).
        </description></Example>
    <Example
        title="Hilite cells (replace style)"
        id="replaceStyle"
        jsURL="grids/formatting/replaceStyle.js"><tabs>
        <tab title="CSS" url="grids/formatting/replaceStyle.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid hilites "Population" values greater than 1 billion or less than 50 million
        using a full set of compound styles (with customized background colors). Mouse over or
        click-drag rows to see how these styles apply to different row states.
        </description></Example>
    <Example
        title="Format values"
        id="formatValues"
        jsURL="grids/formatting/formatValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid applies custom formatters to the "Nationhood" and "Area" columns.
        Click on the "Nationhood" or "Area" column headers to sort the underlying data values.
        </description></Example>
    <Example
        title="Empty values"
        id="emptyValues"
        jsURL="grids/formatting/emptyValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Double-click any cell, delete its value, and press Enter or click outside the cell to
        save and display the empty value. This grid shows "--" for empty date values, and
        "unknown" for other empty values.
        </description></Example>
    <Example
        title="Empty grid"
        id="emptyGrid"
        jsURL="grids/layout/emptyGrid.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to add or remove all data in the grid.
        </description></Example>
</children></ExampleFolder>


<!-- Grids > Interaction (combining with Selection for now) -->
<ExampleFolder
    title="Interaction"
    isOpen="false"><description>
    Selection and drag and drop of data, hovers, and grid events.
</description><children>
    <Example
        title="Rollover"
        visibility="sdk"
        jsURL="grids/interaction/rollover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over rows in the grid to see rollover highlights.
        Click the buttons to enable or disable this behavior.
        </description></Example>
    <Example
        title="Single select"
        visibility="sdk"
        jsURL="grids/selection/singleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select any single row in the grid.
        </description></Example>
    <Example
        title="Simple select"
        visibility="sdk"
        jsURL="grids/selection/simpleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select or deselect any row in the grid.
        </description></Example>
    <Example
        title="Multiple select"
        id="multipleSelect"
        jsURL="grids/selection/multipleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select a single row in the grid. Shift-click to select a continuous range of rows.
        Ctrl-click to add or remove individual rows from the selection.
        </description></Example>
    <Example
        title="Drag select"
        jsURL="grids/selection/dragSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click and drag to select a continuous range of rows in the grid.
        </description></Example>
    <Example
        title="Value hover tips"
        id="valueHoverTips"
        jsURL="grids/interaction/valueHover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over a value in the "Government" column and pause (hover) for a
        longer description of that value.
        </description></Example>
    <Example
        title="Header hover tips"
        jsURL="grids/interaction/headerHover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over a column header and pause (hover) for a longer description
        of that column.
        </description></Example>
    <Example
        title="Drag reorder"
        id="gridsDragReorder"
        jsURL="grids/interaction/dragOrder.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to change the order of countries in this list.
        </description></Example>
    <Example
        title="Drag move"
        id="gridsDragMove"
        jsURL="grids/interaction/dragMove.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to move rows between the two lists. 
        </description></Example>
    <Example
        title="Drag copy"
        id="gridsDragCopy"
        jsURL="grids/interaction/dragCopy.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to copy rows from the first list to the second list.
        </description></Example>
    <Example
        title="Disabled rows"
        id="disabledRows"
        jsURL="grids/interaction/disabled.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over, drag, or click on any values in this grid.
        All "Europe" country records in this grid are disabled.
        </description></Example>
    <Example
        title="Record clicks"
        id="recordClicks"
        jsURL="grids/interaction/recordClicks.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click, double-click, or right-click any row in the grid.
        </description></Example>
    <Example
        title="Cell clicks"
        id="cellClicks"
        jsURL="grids/interaction/cellClicks.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click, double-click, or right-click any value in the grid.
        </description></Example>
</children></ExampleFolder>


<!-- Grids > Sort & Filter -->
<ExampleFolder
    title="Sort &amp; Filter"
    isOpen="false"><description>
    SmartClient grids provide interactive sorting of standard and custom data types,
    with automatic client/server coordination.
</description><children>
    <Example
        title="Sort"
        id="sort"
        jsURL="grids/sorting/sort.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort by that column. To reverse the sort direction,
        click on the same column header, or the top-right corner of the grid.
        </description></Example>
    <Example
        title="Disable sort"
        visibility="sdk"
        jsURL="grids/sorting/disableSort.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Sorting is disabled on the "Flag" column. Click on any other column header to sort
        on the corresponding column.
        </description></Example>
    <Example
        title="Sort arrows"
        visibility="sdk"
        jsURL="grids/sorting/sortArrow.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort or reverse-sort by that column.
        This grid shows the sort-direction arrow in the top-right corner only.
        </description></Example>
    <Example
        title="Data types"
        id="dataTypes"
        jsURL="grids/sorting/dataTypes.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort by that column.
        The "Nationhood", "Area", and "GDP (per capita)" columns are sorted as date, number, and
        calculated number values, respectively.
        </description></Example>
    <Example
        title="Filter"
        id="filter"
        jsURL="grids/filtering/filter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Type "island" above the Country column, then press Enter or click the filter button
        (top-right corner of the grid) to show only countries with "island" in their name.
        Select "North America" above the Continent column to filter countries by that continent.
        ]]></description></Example>
    <Example
        title="Disable filter"
        id="disableFilter"
        jsURL="grids/filtering/disable.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Type "island" above the Country column, then press Enter or click the filter button
        (top-right corner of the grid) to show only countries with "island" in their name.
        Select "North America" above the Continent column to filter countries by that continent.
        Filtering is disabled on the "Flag" and "Capital" columns.
        ]]></description></Example>
</children></ExampleFolder>


<!-- Grids > Editing -->
<ExampleFolder
    title="Editing"
    isOpen="false"><description><![CDATA[
    SmartClient grids provide inline editing of all data types, with automatic validation and
    client/server updates.<br><br>
    These examples are all bound to the same remote DataSource, so your
    changes are saved on SmartClient.com and will appear in all Grid Editing examples during this
    session. To end your SmartClient.com session and reset the example data on the server, simply
    close all instances of your web browser.
]]></description><children>
    <Example
        title="Edit by row"
        id="editByRow"
        jsURL="grids/editing/editRows.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use <b>Tab</b>, <b>Shift-Tab</b>,
        <b>Up Arrow</b>, and <b>Down Arrow</b> to move between cells. Changes are saved
        automatically when you move to another row. Press <b>Enter</b> to save the current row
        and dismiss the editors, or <b>Esc</b> to discard changes for the current row and dismiss
        the editors.
        ]]></description></Example>
    <Example
        title="Edit by cell"
        id="editByCell"
        jsURL="grids/editing/editCells.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use <b>Tab</b>, <b>Shift-Tab</b>,
        <b>Up Arrow</b>, and <b>Down Arrow</b> to move between cells. Press <b>Enter</b> to save
        the current row and dismiss the editors, or <b>Esc</b> to discard changes for the current
        cell and dismiss the editors.
        ]]></description></Example>
    <Example
        title="Enter new rows"
        id="enterNewRows"
        jsURL="grids/editing/enterRows.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing, then <b>Tab</b> or <b>Down Arrow</b> past the
        last row in the grid to create a new row. Alternatively, click the <b>Edit New</b> button
        to create a new data-entry row at the end of the grid.
        ]]></description></Example>
    <Example
        title="Modal editing"
        id="modalEditing"
        jsURL="grids/editing/modalEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Double-click</b> on any cell to start editing. Click anywhere outside of the cell
        editors to save changes, or press the <b>Esc</b> key to discard changes.
        ]]></description></Example>
    <Example
        title="Disable editing"
        id="disableEditing"
        jsURL="grids/editing/disableEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use Tab/Arrow keys to move between cells,
        Enter/Esc keys to save or cancel. Editing is disabled for the "Country" and "G8" columns.
        ]]></description></Example>
    <Example
        title="Custom editors"
        id="customEditors"
        jsURL="grids/editing/customEditors.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. The "Government", "Population", and "Nationhood"
        columns specify custom editors: a multiple-line textarea, a numeric spinner, and a compound
        date control.
        ]]></description></Example>
    <Example
        title="Data validation"
        id="dataValidation"
        jsURL="grids/editing/validation.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Delete the value in a "Country" cell, or type a
        non-numeric value in a "Population" cell, to see validation errors.
        ]]></description></Example>

        <Example title="Dependent Selects" jsURL="grids/editing/dependentSelects.js"><description>
        <![CDATA[
        <b>Double Click</b> on any row to start editing. Select a value in the "Division" column
        to change the set of options available in the "Department" column.
        ]]></description></Example>

        <Example title="Databound Dependent Selects" jsURL="grids/editing/databoundDependentSelects.js">
        <tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        <tab name="supplyCategory" dataSource="supplyCategory"/>
        </tabs>
        <description>
        <![CDATA[
        Click the <b>Order New Item</b> button to add an editable row to the grid.
        Select a Category in the second column to change the set of options available in 
        the "Item" column.
        ]]></description></Example>

        
</children></ExampleFolder>

<!-- Grids > Frozen Columns -->
<ExampleFolder
    title="Frozen Columns"
    isOpen="false"><description><![CDATA[
    SmartClient supports rendering out grids with frozen fields.<br><br>
    Frozen fields are fields that do not scroll horizontally with the other fields, remaining
    visible on the screen while other fields may be scrolled out of view.
]]></description><children>
    <Example
        title="Simple Freeze"
        id="simpleFreeze"
        jsURL="grids/freezeFields/simpleFreeze.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        Setting <code>frozen:true</code> on a column definition establishes a
        frozen column.  Column resize and reorder work normally.
        ]]></description></Example>
    <Example
        title="Dynamic Freeze"
        id="dynamicFreeze"
        jsURL="grids/freezeFields/dynamicFreeze.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        Right click on any column header to show a menu that allows you to freeze
        that column.<br>
        Multiple columns may be frozen, and frozen columns may be
        reordered.<br>
        Right click on a frozen column to unfreeze it.
        ]]></description></Example>
    <Example
        title="Editing"
        id="canEditFreeze"
        jsURL="grids/freezeFields/freezeEditing.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        SmartClient's inline editing support works normally with frozen columns
        with no further configuration.
        ]]></description></Example>
  <Example
        title="Drag and Drop"
        jsURL="grids/freezeFields/freezeDragDrop.js"><tabs>
        <tab title="countryData" url="grids/data/splitCountryData.js"/>
        </tabs><description><![CDATA[
        SmartClient's drag and drop support works normally with frozen columns
        with no further configuration.  Drag countries within grids to reorder them, or between
        grids to move countries back and forth.
        ]]></description></Example>
        

</children></ExampleFolder>

<!-- Grids > Grouping -->
<ExampleFolder
    title="Grouping"
    isopen="false"><description><![CDATA[
    List entries can be grouped according to field value.
    ]]></description><children>
    <Example
        title="Dynamic Grouping"
        id="dynamicGrouping"
        jsURL="grids/grouping/dynamicGrouping.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Right click on any column header to show a menu that allows you to group by that 
        column. Right click and pick "ungroup" to go back to a flat listing.
        ]]></description></Example>
    <Example
        title="Grouped Editing"
        id="groupedEditing"
        jsURL="grids/grouping/groupedEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Inline editing works normally with grouped data. Try editing the field that records 
        are grouped by and notice that the record moves to its new group automatically.
        ]]></description></Example>
    <Example
        title="Custom Grouping"
        id="customGrouping"
        jsURL="grids/grouping/customGrouping.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        You can specify custom grouping behavior for a field. Group by the Nationhood and 
        Population fields to see examples of custom grouping.
        ]]></description></Example>
</children></ExampleFolder>
        
<!-- Grids > Data types-->
<ExampleFolder
    title="Data types"
    id="gridsDataTypes"
    isOpen="false"><description>
    Built-in display and editing behaviors for common data types, and how to customize them.
</description><children>
    <Example
        title="Text"
        jsURL="grids/dataTypes/text.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        All fields in this grid are text fields.
        </description></Example>
    <Example
        title="Image"
        id="imageType"
        jsURL="grids/dataTypes/image.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        "Flag" is an image field.
        </description></Example>
    <Example
        title="Long Text"
        id="longText"
        jsURL="grids/dataTypes/longtext.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on data values to edit.
        "Government" is a long text field with a popup editor.
        </description></Example>
    <Example
        title="Date"
        jsURL="grids/dataTypes/date.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Nationhood" is a date field.
        </description></Example>
    <Example
        title="Integer"
        jsURL="grids/dataTypes/integer.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Population" is an integer field.
        </description></Example>
    <Example
        title="Decimal"
        jsURL="grids/dataTypes/decimal.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "GDP" is a decimal (aka float) field.
        </description></Example>
    <Example
        title="Boolean"
        jsURL="grids/dataTypes/boolean.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "G8" is a boolean (true/false) field.
        </description></Example>
    <Example
        title="Link (text)"
        jsURL="grids/dataTypes/linkText.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on the values in the "Info" column to open external links.
        </description></Example>
    <Example
        title="Link (image)"
        id="linkImage"
        jsURL="grids/dataTypes/linkImage.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on the book images in the "Info" column to open external links.
        </description></Example>
    <Example
        title="List"
        id="listType"
        jsURL="grids/dataTypes/list.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Continent" is a list (aka valueMapped) field.
        </description></Example>
    <Example
        title="Calculated"
        id="calculatedCellValue"
        jsURL="grids/dataTypes/calculated.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "GDP (per capita)" is calculated from the "GDP" and "Population" fields.
        </description></Example>
</children></ExampleFolder>


<!-- Grids >  Data binding (combining with Data Providers for now)-->
<!-- Grids > Data providers -->
<!-- Techniques for loading data sets into a grid component from local or remote data sources. -->
<ExampleFolder
    id="gridsDataBinding"
    title="Data binding"
    isOpen="false"><description>
    How to bind grids to DataSources to share field (column) definitions with other components,
    and how to load data from local and remote data sources and services.    
</description><children>
    <Example
        title="ListGrid fields"
        id="listGridFields"
        jsURL="grids/dataBinding/fieldsGrid.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> takes its field (column) settings from the "fields"
        property of the component definition only. This technique is appropriate for
        presentation-only grids that do not require data binding.
        ]]></description></Example>
    <Example
        title="DataSource fields"
        id="dataSourceFields"
        jsURL="grids/dataBinding/fieldsDS.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryMergeDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> takes its field (column) settings from the
        <code>countryDS</code> DataSource specified in the "dataSource" property of the
        component definition. This technique is appropriate for easy display of a shared
        data model with the default UI appearance and behaviors.
        ]]></description></Example>
    <Example
        title="Merged fields"
        id="mergedFields"
        jsURL="grids/dataBinding/fieldsMerged.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryMergeDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> merges field settings from both the component "fields"
        (for presentation attributes) and the <code>countryDS</code> DataSource (for
        data model attributes). This is the usual approach to customize the look and feel of a
        data-bound component.
        ]]></description></Example>
    <Example
        title="Inline data"
        id="inlineData"
        jsURL="grids/dataProviders/inlineData.js"><description><![CDATA[
        This <code>ListGrid</code> uses an inline data array in the component definition. This
        technique is appropriate for very small read-only data sets, typically with static data
        values.
        ]]></description></Example>
    <Example
        title="Local data"
        id="localData"
        jsURL="grids/dataProviders/localData.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> loads data from a local data array (included in a separate
        JavaScript data file). This technique is appropriate for read-only data sets, typically
        with less than 500 records.
        ]]></description></Example>
    <Example
        title="Local DataSource"
        id="localDataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryLocalDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a client-only <code>DataSource</code> that loads data
        from a local data array. This technique is appropriate for client-only rapid prototyping
        when the production application will support add or update (write operations), switchable
        data providers (JSON, XML, WSDL, Java), arbitrarily large data sets (1000+ records), or
        a data model that is shared by multiple components.
        ]]></description></Example>
    <Example
        title="JSON DataSource"
        id="jsonDataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryJSONDS.ds.xml"/>
        <tab title="countryData.json" url="grids/data/countryData.json" doEval="false" canEdit="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote JSON data provider.  This approach of loading simple JSON data over HTTP can be
        used with PHP and other server technologies.
        ]]></description></Example>
    <Example
        title="XML DataSource"
        id="xmlDataSource"
        needXML="true"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryXMLDS.ds.xml"/>
        <tab title="countryData.xml" url="grids/data/countryData.xml" canEdit="false" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote XML data provider.  This approach of loading simple XML data over HTTP can be
        used with PHP and other server technologies.
        ]]></description></Example>
    <Example
        title="WSDL DataSource"
        needXML="true"
        id="WSDLDataSource"
        jsURL="grids/dataProviders/WSDLBound.js"><tabs>
        <!-- Would be nice if we could just specify the WSDL url on a datasource that automatically
        loads the WSDL, configures its fields, and tells the component when it is ready. Currently
        WSDL binding requires different UI code, so it is not simply switchable with the other data
        providers (local, JS, XML, DMI, SmartClient). -->
        <tab title="countryDS" url="grids/ds/countryWSDLDS.ds.xml"/>
        <tab title="soapRequest.xml" url="grids/data/countrySoapRequest.xml" canEdit="false" doEval="false"/>
        <tab title="soapResponse.xml" url="grids/data/countrySoapResponse.xml" canEdit="false" doEval="false"/>
        <tab title="WSDL" url="grids/ds/SmartClientOperations.wsdl" canEdit="false" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data via a
        WSDL service.  This example WSDL service supports all 4 basic operation types (fetch,
        add, update, remove) and can be implemented with any server technology.  Sample
        request/response SOAP messages for a "fetch" operation are shown.
        ]]></description></Example>
<!--
    <Example
        title="Java DMI DataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryJavaDS.ds.xml"/>
        <tab title="countryData.java" url="grids/data/countryData.java" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote data provider implemented as a Java class.
        ]]></description></Example>
-->
</children></ExampleFolder>


<!-- Grids >  Data operations -->
<ExampleFolder
    title="Data operations"
    isOpen="false"><description>
    Basic operations on datasets, both local and remote.
</description><children>
    <Example
        title="Local set"
        visibility="sdk"
        jsURL="grids/dataOperations/localSet.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to populate the grid with records from a local data set.
        </description></Example>
    <Example
        title="Local add"
        visibility="sdk"
        jsURL="grids/dataOperations/localAdd.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to add records to the top and bottom of the list.
        </description></Example>
    <Example
        title="Local remove"
        visibility="sdk"
        jsURL="grids/dataOperations/localRemove.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click "Remove first" to remove the first record in the list. Click the other buttons to
        remove records based on your selection (click, Ctrl-click, or
        Shift-click in the list to select records).
        </description></Example>
    <Example
        title="Local update"
        visibility="sdk"
        jsURL="grids/dataOperations/localUpdate.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        Click to select any record in the list, then click one of the buttons to change
        the "Continent" value for that record. Also see the <b>Grids > Editing</b> examples
        for automatic update behavior.
        ]]></description></Example>
    <Example
        title="Databound fetch"
        id="databoundFetch"
        jsURL="grids/dataOperations/databoundFetch.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description>
        Click the buttons to fetch (exact match) country records from the server.
        Click the "Fetch All" button to fetch the first "page" of 50 records, then scroll
        the grid to fetch new pages of data on demand.
        </description></Example>
    <Example
        title="Databound filter"
        id="databoundFilter"
        jsURL="grids/dataOperations/databoundFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click the buttons to filter (partial match) records from the server. Also see the
        <b>Grids &gt; Sort &amp; filter &gt; Filter</b> example for automatic databound Filter
        operations triggered by user input.
        ]]></description></Example>
    <Example
        title="Databound add"
        id="databoundAdd"
        jsURL="grids/dataOperations/databoundAdd.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click the "Add new country" button to create a new country record on the server.
        Also see the <b>Grids &gt; Editing &gt; Enter new rows</b> example for automatic databound
        Add operations triggered by user input.
        ]]></description></Example>
    <Example
        title="Databound remove"
        id="databoundRemove"
        jsURL="grids/dataOperations/databoundRemove.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description>
        Click "Remove first" to remove (delete) the first record in the list from the server.
        Click the other buttons to remove records based on your selection (click, Ctrl-click, or
        Shift-click in the list to select records).
        </description></Example>
    <Example
        title="Databound update"
        id="databoundUpdate"
        jsURL="grids/dataOperations/databoundUpdate.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click to select any record in the list, then click one of the buttons to change
        the "Continent" value for that record on the server. Also see the <b>Grids &gt; Editing</b>
        examples for automatic databound Update operations triggered by user input.
        ]]></description></Example>
</children></ExampleFolder>

<!-- exists to make it more likely for sexier demos to be found on public website -->
<ExampleFolder title="Service Integration" ref="dataIntegration"
               visibility="www"/>

</children></ExampleFolder> <!-- closing parent folder: Grids -->


<ExampleFolder
    title="Trees"
    showSkinSwitcher="true"
    isOpen="false"><description>
    High-performance interactive tree views
    &lt;BR&gt;
    &lt;BR&gt;
    Trees are based on grid views, and so share all of the appearance, interactivity and
    databinding features of grids, in addition to tree-specific features.
</description>
<children>

    <ExampleFolder title="Appearance" isOpen="false"><description>
        Trees can have dynamic titles, display multiple columns and show connector
        lines.
    </description><children>
        <Example title="Node Titles" id="nodeTitles" dataSource="employees"
            jsURL="trees/appearance/nodeTitles.js">
            <tabs><tab name="employeeData" url="trees/employeeData.js"/></tabs>
            <description>
            Formatter interfaces allow you to add custom tree titles.
            </description></Example>
        <Example title="Multiple Columns" dataSource="employees"
                 jsURL="trees/appearance/multipleColumns.js"><description>
            Trees can show multiple columns of data for each node.  Each column has the
            styling, formatting, and data type awareness features of columns in a normal
            grid.

            Try drag reordering columns, or sorting by the Salary field.
            </description></Example>
        <Example title="Connectors" id="connectors" jsURL="trees/appearance/connectors.js"
                 dataSource="employees"
                 cssURL="trees/appearance/connectors.css">
        <description>
            Trees can show skinnable connector lines.
            </description></Example>
    </children></ExampleFolder> 

    <ExampleFolder title="Interaction" isOpen="false"><description>
        Trees have built-in drag and drop behaviors and tree-specific events.
    </description><children>
        <Example id="treeDragReparent"
            title="Drag reparent" jsURL="trees/interaction/dragReparent.js">
            <tabs><tab name="employeeData" url="trees/employeeData.js"/></tabs>
            <description>
            Try dragging employees under new managers.  Note that a position indicator line
            appears during drag, allowing employees to be placed in a particular order.
            </description></Example>
        <Example title="Drag nodes" ref="dragTree"/>
        <Example title="Springloaded Folders" ref="treeDragReparent"><description>
            Try dragging employees under new managers.  Note that closed folders automatically
            open if you hover over them momentarily.
            </description></Example>
        <Example title="Drop Events" id="treeDropEvents" jsURL="trees/interaction/dropEvents.js">
            <tabs>
                <tab name="supplyCategory" dataSource="supplyCategory"/>
                <tab name="supplyItem" dataSource="supplyItem"/>
            </tabs>                
            <description>
            Click on any category on the left to show items from that category on the right.  
            Drag and drop items from the list on the right into new categories in the tree on
            the left.
            </description></Example>
    </children></ExampleFolder> 

    <ExampleFolder id="treesDataBinding" title="Data binding" isOpen="false"><description>
        Trees can bind to DataSources and handle all the data formats that grids can, using
        additional properties to control tree structure, open state, and folderness.
    </description><children>
        <Example title="Parent Linking"
                 id="parentLinking"
                 jsURL="trees/dataBinding/parentLinking.js"><description>
            Tree data can be specified as a flat list of nodes that refer to each other by
            ID.  This format is also used for load on demand.
            </description></Example>
        <Example title="Children Arrays"
                 id="childrenArrays"
                 jsURL="trees/dataBinding/childrenArrays.js"><description>
            Tree data can be specified as a tree of nodes where each node lists its children.
            </description></Example>
<!--  -->
        <Example title="Load XML" id="treeLoadXML" needXML="true" 
                 jsURL="trees/dataBinding/loadXMLChildrenArrays.js">
            <tabs>
              <tab title="employeesXMLData" url="trees/dataBinding/employeesDataChildrenArrays.xml" canEdit="false" doEval="false"/>
            </tabs>
            <description>
            Tree data can be loaded in XML or JSON format.  Properties declared on DataSource
            fields control how data is interpreted to form the tree structure.  This example
            shows the XML format for children-array trees.
            </description></Example>
        <Example title="Load on Demand" jsURL="trees/dataBinding/loadOnDemand.js"
                 dataSource="employees"><description>
            Begin opening folders and note the prompt which briefly appears during server
            fetches.
            
            DataBound Trees support load on demand.  When a folder is opened for the first
            time, the tree asks the server for the children of the node just opened.
            </description></Example>
        <Example title="Initial Data (Load on Demand)"
                 id="initialData"
                 jsURL="trees/dataBinding/initialDataLOD.js"
                 dataSource="employees"><description>
            Begin opening folders and note the load on demand behavior.
            
            Trees that use load on demand can specify an initial dataset set up front.  
            </description></Example>
<!--
        <Example title="Filtering" jsURL="trees/dataBinding/initialDataLOD.js"
                 dataSource="employees"><description>
            Trees datasets can be filtered just like list datasets.  The tree below shows only
            full time employees.
            </description></Example>
-->
    </children></ExampleFolder>

    <Example title="Sorting" jsURL="trees/sorting.js">
        <tabs><tab name="employeeData" url="trees/employeeData.js"/></tabs>
        <description>
        Trees sort per folder.  Click on the "Name" column header to sort alphabetically by
        folder name, or on the "Salary" column header to sort by Salary.
    </description></Example>

    <Example title="Editing" id="treesEditing" dataSource="employees"
             jsURL="trees/editing.js"><description>
        Click on employees in the tree to edit them, and drag and drop employees to rearrange them.
        Choose an employee via the menu to see that employee's direct reports in the ListGrid.  Changes
        made in the tree or ListGrid are automatically saved to the server and reflected in the other
        components.
    </description></Example>

    <Example title="Frozen Columns" id="freezeTree" dataSource="employees"
             jsURL="trees/freezeTree.js">
     <description><![CDATA[
     Setting <code>frozen:true</code> enables frozen columns for Trees.  Columns
     can be frozen and unfrozen by right-clicking on column headers.<br>
     Column resize, column reorder, drag and drop and load on demand all function normally.
     ]]></description></Example>
    
</children></ExampleFolder> <!-- closing parent folder: Trees -->

<!-- Forms -->
<ExampleFolder title="Forms" isOpen="false"><description>
    Form managers and input controls.
</description><children>

    <ExampleFolder title="Layout" isOpen="false" id="formsLayout"><description>
        A specialized form layout manager allows your forms to grow into available space,
        hide sections, and span across tabs.
    </description><children>
        <Example title="Titles" jsURL="forms/layout/titles.js" id="formLayoutTitles"><description>
            Click on "Swap Titles" to change title orientation.
            
            Form layout automatically places titles next to fields.  Left-oriented titles take
            up a column so that labels line up.  Top oriented titles don't.
            </description></Example>
        <Example title="Spanning" id="columnSpanning" jsURL="forms/layout/spanning.js"><description>
            Drag resize the form from the right edge to see the effect of spanning.
            
            Specifying column widths and column spanning items allows for larger and smaller
            input areas.
            </description></Example>
        <Example title="Filling"
                 id="formLayoutFilling"
                 jsURL="forms/layout/filling.js"><description>
            Click on the "Short Message" and "Long Message" buttons to change the amount of
            space available to the form.
            
            SmartClient form layouts allow you to fill available space, even when
            available space cannot be known in advance because it is data-dependant.
            </description></Example>
        <Example title="Splitting"
                 id="formSplitting"
                 xmlURL="ValuesManager.xml"
                 showSkinSwitcher="true"><description>
            Click "Submit" to jump to a validation error in the "Stock" tab.
            
            Forms which are split for layout purposes can behave like a single logical form for
            validation and saves.
            </description></Example>
        <Example title="Sections"
                 id="formSections"
                 xmlURL="SectionItem.xml"
                 showSkinSwitcher="true"><description>
            Click on "Stock" to reveal fields relating to stock on hand.
            </description></Example>

        <Example ref="validationFieldBinding" title="Data Binding"/>
    </children></ExampleFolder>

    <ExampleFolder title="Field Dependencies" isOpen="false"><description>
        Common field dependencies within a form, such as fields that are only applicable to
        some users, can be handled by specifying simple expressions.
    </description><children>
        <Example title="Show &amp; Hide" jsURL="forms/fieldDependencies/showAndHide.js" id="formShowAndHide"><description>
            Select "On order" to reveal the "Shipping Date" field.
            </description></Example>
        <Example id="fieldEnableDisable" title="Enable &amp; Disable" 
         jsURL="forms/fieldDependencies/enableAndDisable.js"><description>
            Check "I accept the agreement" to enable the "Proceed" button.
            </description></Example>
        <Example title="Conditionally Required"
                 id="conditionallyRequired" jsURL="forms/fieldDependencies/conditionallyRequired.js"><description>
            Select "No" and click the "Validate" button - the reason field becomes required.
            </description></Example>
        <Example title="Match Value"
                 id="matchValue"
                 jsURL="forms/fieldDependencies/matchValue.js"><description>
            Try entering mismatched values for "Password" and "Password Again", then click
            "Create Account" to see a validation error.
            </description></Example>
        <Example title="Dependent Selects"
                 id="formDependentSelects"
                 jsURL="forms/fieldDependencies/dependentSelects.js"><description>
            Select a "Division" to cause the "Department" select to be populated with
            departments from that division.
            </description></Example>
    </children></ExampleFolder>

    
    <ExampleFolder title="Data Types" isOpen="false"><description>
        The form has built-in editors and pickers for common types such as numbers and dates,
        as well as the ability to use the databinding framework to pick from lists and trees of
        related records.
    </description><children>
        <Example title="Text" id="textItem" xmlURL="TextItem.xml"><description>
            </description></Example>
        <Example title="TextArea" id="textAreaItem" xmlURL="TextAreaItem.xml"><description>
            </description></Example>
        <Example title="Date" id="dateItem" xmlURL="DateItem.xml"><description>
            DateItems support direct or pickList-based input of dates, and have a built-in
            pop-up day picker.
            </description></Example>
        <Example title="Time" id="timeItem" xmlURL="TimeItem.xml"><description>
            TimeItem supports text-based input of Times
            </description></Example>

        <Example title="Number - Spinner"
                 id="spinnerItem"
                 jsURL="forms/dataTypes/numberSpinner.js"><description>
            Click the up and down buttons to change shoe size.  Click and hold to change shoe
            size quickly.  Note spinner stops at a maximum and minimum value.
            </description></Example>
        <Example title="Number - Slider"
                 id="sliderItem"
                 jsURL="forms/dataTypes/numberSlider.js"><description>
            Change the value by clicking and dragging the thumb, clicking on the track, or
            using the keyboard. 
            </description></Example>

        <Example title="Boolean - Checkbox"
                 id="checkboxItem"
                 xmlURL="CheckboxItem.xml"><description>
            </description></Example>

        <Example title="List - Select"
                 id="selectItem"
                 jsURL="forms/dataTypes/listSelect.js"><description>
            Note the icons and customized text styling.  Click to reveal the options and note
            the drop shadow.  
            
            The SmartClient SelectItem offers more powerful and consistent control over
            appearance and behavior than the HTML &amp;lt;SELECT&amp;gt; element.
            </description></Example>
        <Example id="listComboBox" title="List - Combo Box"
                 jsURL="forms/dataTypes/listComboBox.js" dataSource="supplyItem"><description>
            Start typing in either field to see a list of matching options.  The field
            labelled "Item Name" retrieves options dynamically from the SupplyItem
            DataSource
            </description></Example>
        <Example id="relatedRecords" title="List - Related Records" showSkinSwitcher="true"
                 jsURL="forms/dataTypes/relatedRecords.js" dataSource="supplyItem"><description>
            Open the picker in either form to select the item you want to order from the
            "supplyItem" DataSource.  The picker on the left stores the "itemId" from the
            related "supplyItem" records.  The picker on the right stores the "SKU" while
            displaying multiple fields.  You can scroll to dynamically load more records.  
            This pattern works with any DataSource.  
            </description></Example>
        
        <Example title="Tree" xmlURL="PickTree.xml" id="pickTree" showSkinSwitcher="true"
                 dataSource="supplyCategory"><description>
            Click on "Department" or "Category" below to show hierarchical menus.  The
            "Category" menu loads options dynamically from the SupplyCategory DataSource.
            </description></Example>

        <Example title="List - Select Other" visibility="sdk" 
                 xmlURL="SelectOtherItem.xml"><description>
            Select "Other.." from the drop down to enter a custom value.
            </description></Example>

        <Example ref="RichTextEditor" title="HTML"/> 

    </children></ExampleFolder>

    <ExampleFolder title="Validation" isOpen="false" ref="validation"/>

    <ExampleFolder title="Details" isOpen="false"><description>
        Hovers and hints explain the form to the user.  Icons provide an easy extension point
        for help, custom pickers and other extensions.
    </description><children>
        <Example title="Icons" id="formIcons" jsURL="forms/layout/icons.js"><description>
            Click on the help icon below to see a description for severity levels.  Form items
            can show an arbitrary number of icons to do whatever you need.
            </description></Example>
        <Example title="Hovers" jsURL="forms/details/hovers.js" id="itemHoverHTML"><description>
            Hover anywhere over the field to see what the current value means.  Change the
            value or disable the field to see different hovers.  Note that the hovers contain
            HTML formatting.  
            </description></Example>
        <Example title="Hints" id="formHints" jsURL="forms/layout/hints.js"><description>
            Hints provide guidance to the user filling out the form.  In this case, the MM/YYYY
            hint tells the user the expected format for the free-form date field.
            </description></Example>
    </children></ExampleFolder>

</children></ExampleFolder>



<!-- Layout -->
<ExampleFolder title="Layout" isOpen="false"><description>
    Liquid layout managers and user interface containers.
</description><children>
    <Example title="Filling" jsURL="forms/layout/filling.js"><description>
        Click on the "Short Message" and "Long Message" buttons to change the amount of
        space available to the form.
        
        Layouts automatically react to resizes and re-apply the layout policy.
        </description></Example>
    <Example title="Nesting"
             id="layoutNesting"
             jsURL="layout/nesting.js"
             showSkinSwitcher="true"><description>
        Use the resize bars to reallocate space between the 3 panes.
        
        Layouts can be nested to create standard application views.  Resize bars are built-in.
        </description></Example>
    <Example title="User Sizing" id="userSizing" jsURL="layout/userSizing.js"><description>
        Resize the outer frame to watch "Member 1" and "Member 2" split the space.  Now resize
        either member and resize the outer frame again.
        
        Layouts track sizes which have been set by user action and respect the user's settings.
        </description></Example>
    <ExampleFolder title="Form Layout" ref="formsLayout"/>

    <ExampleFolder title="Windows" isOpen="false" showSkinSwitcher="true"><description>
        Windows for dialogs, wizards, tools and free-form application layouts.
    </description><children>
        <Example title="Auto Size" 
                 id="windowAutosize"
                 jsURL="layout/window/autoSize.js"><description>
            Windows can autoSize to content or can dictate the content's size.
            </description></Example>
        <Example title="Modality" ref="modality"/>
        <Example title="Dragging" jsURL="layout/window/dragging.js"><description>
            Grab the window by its title bar to move it around.  Resize it by the right or
            bottom edge.
            </description></Example>
        <Example title="Minimize" ref="windowMinimize"/>
        <Example title="Header Controls"
                 id="windowHeaderControls"
                 jsURL="layout/window/controls.js"><description>
            Header controls can be reordered and custom controls added.
            </description></Example>
        <Example title="Footer"
                 id="windowFooter"
                 jsURL="layout/window/footer.js"><description>
            Windows support a footer with a visible resizer and updateable status bar.
            </description></Example>
    </children></ExampleFolder>

    <ExampleFolder title="Tabs" isOpen="false" showSkinSwitcher="true"><description>
        Tabs for sectioning applications and forms.
    </description><children>
        <Example title="Orientation"
                 id="tabsOrientation"
                 jsURL="layout/tabs/orientation.js"><description>
            Tabs can be horizontally or vertically oriented.  To select tabs, click on them, or
            on click the "Select Blue" and "Select Green" buttons.
            </description></Example>
        <Example title="Align" id="tabsAlign" jsURL="layout/tabs/align.js"><description>
            Tabs can be left or right aligned (for horizontal tabs) or top or bottom aligned
            (for vertical tabs)
            </description></Example>
        <Example title="Add and Remove"
                 id="tabsAddAndRemove"
                 jsURL="layout/tabs/addAndRemove.js"><description>
            Click on "Add Tab" and "Remove Tab" to add and remove tabs.   When you add too many
            tabs to display at once, a tab scrolling interface will appear.
            </description></Example>
        <Example title="Closeable Tabs"
                 id="closeableTabs"
                 jsURL="layout/tabs/closeableTabs.js"><description>
            Click on the red close icons to close tabs.  Tabbed views can have any mixture of
            closeable and permanent tabs.
            </description></Example>
        <Example title="Title Change"
                 id="titleChange"
                 jsURL="layout/tabs/titleChange.js"><description>
            Titles can be changed on the fly.  Type in your name to see the "Preferences" tab
            change its title to include your name.  Note that the tab automatically sizes to
            accomodate the longer title - automatic sizing also happens at initialization.
            </description></Example>
        <Example title="View Loading" id="viewLoading"
                 needXHR="true" jsURL="advanced/viewLoading.js"><description>
            Click on "Tab2" to load a grid view on the fly.
            
            Declarative view loading allows extremely large applications to be split into
            separately loadable chunks, and creates an easy integration path for applications
            with server-driven application flow.
            </description>
            <tabs><tab title="loadedView" url="advanced/loadedView.js" doEval="false" canEdit="false"/></tabs>
        </Example>
    </children></ExampleFolder>
            

    <ExampleFolder title="Sections" isOpen="false" showSkinSwitcher="true"><description>
        Sections (also called Accordions) label sections of the application
        and allow users to hide or resize sections.
    </description><children>
        <Example title="Expand / Collapse"
                 id="sectionsExpandCollapse"
                 jsURL="layout/sections/expandCollapse.js"><description>
            Click on any section header showing an arrow to expand and collapse it (the "Green 
            Cube" section is marked not collapsible).  Click on the "Expand Blue" and 
            "Collapse Blue" buttons to expand and collapse sections externally.
            </description></Example>
        <Example title="Resize Sections"
                 id="resizeSections"
                 jsURL="layout/sections/resizeSections.js"><description>
            Drag the "Help 2" header to resize sections, or press "Resize Help 1" to resize to
            fixed height.  The "Blue Pawn" section is marked not resizeable.
            </description></Example>
        <Example title="Add and Remove"
                  id="sectionsAddAndRemove"
                  jsURL="layout/sections/addAndRemove.js"><description>
            Press the "Add Section" and "Remove Section" buttons to add or remove sections.
            </description></Example>
        <Example title="Show and Hide"
                 id="sectionsShowAndHide"
                 jsURL="layout/sections/showAndHide.js"><description>
            Press the "Show Section" and "Hide Section" buttons to reveal or hide the Yellow
            Section.  Showing and hiding sections lets you reuse a SectionStack for slightly
            different purposes, hiding or revealing relevant sections.
            </description></Example>
    </children></ExampleFolder>

</children></ExampleFolder>



<!-- Control -->
<ExampleFolder title="Control" isOpen="false"><description>
    Navigation and action controls.
</description><children>
    <ExampleFolder title="Buttons" isOpen="false"><description>
    SmartClient buttons are visually appealing, easily skinned, and easy to use.
    </description><children>
        <Example title="Appearance"
                 id="buttonAppearance"
                 jsURL="actions/buttons/appearance.js"
                 showSkinSwitcher="true">
            <description>
            Buttons come in three basic types: CSS buttons, single-image buttons, and 
            multiple-image stretch buttons.  All share a basic set of capabilities.
        </description></Example>
        <Example title="States" id="buttonStates" jsURL="actions/buttons/states.js"
                 css="actions/buttons/states.css"><description>
            Move the mouse over the buttons, and click and hold to see buttons in different
            states.  Click "Disable All" to put all buttons in the disabled state.
            
            Edit the CSS style definitions to change the appearance of various states.
        </description></Example>
        <Example title="Icons" id="buttonIcons" jsURL="actions/buttons/icons.js"><description>
            Click and hold on the "Save" button to see the icon change as the button goes
            down.  Note that the binoculars icon does not change when the button goes down.
            Click "Disable Save" to see the icon change to reflect disabled state.
            
            Button icons can be left or right oriented, and can optionally react to any the
            state of the button.
        </description></Example>
        <Example title="Auto Fit"
                 id="buttonAutoFit"
                 jsURL="actions/buttons/autoFit.js"><description>
            Buttons can automatically size to accomodate the title and icon, and resize
            automatically when the title is changed, notifying components around them they have
            changed size.
        </description></Example>
        <Example title="Radio / Toggle Behavior"
                 id="buttonRadioToggle"
                 jsURL="actions/buttons/radioCheckbox.js"><description>
            Click on the buttons for Bold, Italic, and Underline and note that they stick in a
            down state.  Click on the buttons for left, center and right justify and note that
            they are mutually exclusive.
        </description></Example>

    </children></ExampleFolder>

    <ExampleFolder title="Menus" isOpen="false" showSkinSwitcher="true"><description>
    Dynamic, appealing menus that can bind directly to data.
    </description><children>
        <Example id="fullMenu" title="Appearance" jsURL="actions/menus/appearance.js"><description>
            Click "File" to see a typical File menu with icons, submenus, checks,
            separators, disabled items, and keyboard shortcut hints.  Note the beveled edge and
            drop shadow.
            </description></Example>
        <Example title="Dynamic Items"
                 id="menuDynamicItems"
                 jsURL="actions/menus/dynamicItems.js"><description>
            Open the "File" menu to see the "New file in.." item initially disabled.  Select a
            project and note that the menu item has become enabled, changed title and changed
            icon.  Pick "Project Listing" to show and hide the project list, and note the item
            checks and unchecks itself.
            </description></Example>
        <Example title="Submenus" id="subMenus" ref="fullMenu"><description>
            Click "File" and navigate over "Recent Documents" or "Export as..." to see
            submenus.
            </description></Example>
        <Example id="menuColumns" title="Custom Columns" jsURL="actions/menus/columns.js"><description>
            Open the menu to see a standard column showing item titles, and an additional
            column showing an option to close menu items. Clicking in the second column will
            remove the item from the menu.
            </description></Example>
            
        <Example title="Tree Binding" id="treeBinding" jsURL="actions/menus/treeBinding.js"
                 dataSource="supplyCategory"><description>
            Click on "Department" or "Category" below to show hierarchical menus.  The
            "Category" menu loads options dynamically from the SupplyCategory DataSource.
            </description></Example>
    </children></ExampleFolder>

    <Example id="toolstrip" title="ToolStrips" jsURL="actions/toolStrips.js"><description>
        Click the icons at left to see "radio"-style selection.  Click the drop-down to see
        font options.
        </description></Example>
    <Example title="Dialogs"
             id="dialogs"
             jsURL="actions/dialogs.js"
             showSkinSwitcher="true"><description>
        Click "Confirm" and "Ask" to show two of the pre-built, skinnable SmartClient Dialogs
        for common interactions.  
        </description></Example>
    <!-- At present slider media matches cross skins so don't show the skin-switcher on this one -->
    <Example title="Slider" id="slider" xmlURL="actions/slider.js"><description>
        Move either Slider to update the other.  You can change the value by clicking and
        dragging the thumb, clicking on the track, or using the keyboard (once you've focused
        on one of the sliders)
        </description></Example>
</children></ExampleFolder>



<!-- Data Binding -->
<ExampleFolder title="Data Binding" isOpen="false"><description>
    Data binding allows multiple components to share a central definition of an object (called
    a DataSource), so that all components can consistently retrieve, display, edit, validate
    and save objects of that type.
</description><children>

    <!-- Could link to Grid and Form data types, but would be deepest hierarchy anywhere, and
         only two items
    <ExampleFolder title="Data types" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder title="Lists" showSkinSwitcher="true" isOpen="false" ref="gridsDataBinding"/>
    <ExampleFolder title="Trees" showSkinSwitcher="true" isOpen="false" ref="treesDataBinding"/>

    <!-- TODO: default and custom field binding examples, similar to grids
    <ExampleFolder title="Forms" isOpen="false">
    <description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder title="Operations" showSkinSwitcher="true" isOpen="false"><description>
    DataBound Components understand a core set of operations called "Fetch", "Add", "Update"
    and "Remove" (also known as CRUD operations).  These operations can be programmatically
    initiated or automatically initiated in response to user action.
    In either case the integration model and APIs are the same.
    </description><children>
        <Example title="Fetch" id="fetchOperation" dataSource="supplyItem" 
                 xmlURL="databind/operations/fetch.xml" jsURL="databind/operations/fetch.js">
            <description>
            Rows are fetched automatically as the user drags the scrollbar.  Drag the scrollbar
            quickly to the bottom to fetch a range near the end (a prompt will appear during
            server fetch).  Scroll slowly back up to fill in the middle.
            </description></Example>
        <Example title="Add" id="addOperation" dataSource="supplyItem" 
                 xmlURL="databind/operations/add.xml">
            <description>
            Use the form to create a new stock item.  Create an item in the currently shown
            category to see it appear in the filtered listing automatically.  Create an item in
            any other category and note that it is filtered out.
            </description></Example>
        <Example title="Update" id="updateOperation" dataSource="supplyItem"
                 xmlURL="databind/operations/update.xml">
            <description>
            Select an item and use the form to change its price.  The list updates
            automatically.  Now change the item's category and note that it is removed
            automatically from the list.
            </description></Example>
        <Example title="Remove" id="removeOperation" dataSource="supplyItem"
                 xmlURL="databind/operations/remove.xml">
            <description>
            Click the "Remove" button to remove the selected item.
            </description></Example>
    
    </children></ExampleFolder>

    <!--
    <ExampleFolder title="Transformations" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder id="validation" title="Validation" isOpen="false"><description>
        Typical validation needs are covered by validators built-in to the SmartClient
        framework.  Validators can be combined into custom type definitions which are reusable
        across all components.
    </description><children>
        <Example title="Type" id="validationType" jsURL="databind/validation/type.js" 
                 dataSource="databind/validation/type.ds.xml">
            <description>
            Type a non-numeric value into the field and press "Validate" to receive a
            validation error.
            
            Declaring field type implies automatic validation anywhere a value is edited.
            </description></Example>
        <Example title="Built-ins"
                 id="validationBuiltins"
                 jsURL="databind/validation/builtins.js"
                 dataSource="databind/validation/builtins.ds.xml">
            <description>
            Type a number greater than 20 or less than 1 and press "Validate" to receive a
            validation error.
            
            SmartClient implements the XML Schema set of validators on both client and server
            </description></Example>
        <Example title="Regular Expression"
                 id="regularExpression"
                 jsURL="databind/validation/regularExpression.js"
                 dataSource="databind/validation/regularExpression.ds.xml">
            <description>
            Enter a bad email address (eg just "mike") and press "Validate" to receive a
            validation error.
            
            The regular expression validator allows simple custom field types, with automatic
            enforcement on client on server.
            </description></Example>
        <Example title="Value Transform"
                 id="valueTransform"
                 jsURL="databind/validation/valueTransform.js"
                 dataSource="databind/validation/valueTransform.ds.xml">
            <description>
            Enter a 10 digit US phone number with any typical punctuation press "Validate" to see it
            transformed to a canonical format.
            </description></Example>
        <Example title="Custom Types" id="customSimpleType" 
                 jsURL="databind/validation/customTypes.js"
                 dataSource="databind/validation/customTypes.ds.xml">
            <description>
            Enter a bad zip code (eg just "123") and press "Validate" to receive a
            validation error.
            
            Custom types can be declared based on built-in validators and re-used in multiple
            DataSources
            </description></Example>
        <Example id="validationFieldBinding"
                 title="Customized Binding"
                 jsURL="databind/forms/customBinding.js"
                 dataSource="databind/forms/users.ds.xml">
            <description>
            Click "Validate" to see validation errors triggered by rules both in this form and
            in the DataSource.
            
            Screen-specific fields and validation logic, such as the duplicate password entry
            box, can be added to a particular form while still sharing schema information that
            applies to all views.
            </description>
        </Example>
    </children></ExampleFolder>

    <Example ref="relatedRecords" title="Related Records"><description>
        Open the picker in either form to select the item you want to order from the
        "supplyItem" DataSource.  The picker on the left stores the "itemId" from the
        related "supplyItem" records.  The picker on the right stores the "SKU" while
        displaying multiple fields.  You can scroll to dynamically load more records.  
        This pattern works with any DataSource.  
    </description></Example>


</children></ExampleFolder>

<ExampleFolder id="dataIntegration" title="Data Integration" isOpen="false"><description>
    SmartClient supports declarative, XPath-based binding of visual components to web services
    that return XML or JSON responses.  SmartClient understands XML Schema and can bind components directly to
    WSDL web services.  An optional Java-based integration server supports automatic 
    Java&lt;-&gt;JSON translation and synchronized client-server validation rules.
</description><children>
    <ExampleFolder id="javaDataIntegration" title="Java" isOpen="false"><description>
        The optional SmartClient Java Server enables accelerated integration with 
        popular Java frameworks, such as Java Beans, Hibernate, Spring and Struts.
    </description><children>
        <Example id="serverValidation" title="Validation" requiresModules="SCServer"
                 dataSource="supplyItem"
		         jsURL="dataIntegration/java/serverValidation.js">
            <description>
            Validation rules are automatically enforced on both the client- and server-side based on
            a single, shared declaration.  Press "Save" to see errors from client-side
            validation.  Press "Clear Errors" then "Disable Validation" then "Save" again to see the
            same errors caught by the SmartClient server.
            </description></Example>
        <Example id="javaBeans" title="Java Beans" requiresModules="SCServer"
                 dataSource="supplyItemDMI"
		         jsURL="dataIntegration/java/javaBeans.js">
            <tabs><tab title="SupplyItemFetch.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemFetch.java"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description>
            SmartClient DataSource operations can be fulfilled by returning Java Beans (aka EJBs 
            or POJOs) from your existing business logic.  When you call SmartClient's 
            &lt;code&gt;DSResponse.setData()&lt;/code&gt; API, your Java objects are automatically translated 
            to JavaScript, transmitted to the browser, and provided to the requesting component.
            See the sample implementation of the "fetch" operation in SupplyItemFetch.java
            </description></Example>
        <Example id="DMI" title="DMI" requiresModules="SCServer"
                 dataSource="supplyItemDMI"
		         jsURL="dataIntegration/java/dmi.js">
            <tabs><tab title="SupplyItemDMI.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemDMI.java"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description>
            Direct Method Invocation (DMI) allows you to map DataSource operations directly 
            to Java methods via XML configuration in a DataSource descriptor (.ds.xml file).
            The arguments of your Java methods are automatically populated from the inbound 
            request.  See the sample implementation in SupplyItemDMI.java
            </description></Example>
        <Example id="hibernatePrototyping" title="Hibernate (Prototyping)" requiresModules="SCServer"
                 dataSource="supplyItemHB"
		         jsURL="dataIntegration/java/hibernatePrototyping.js">
            <description>
            SmartClient supports codeless integration with Hibernate for rapid prototyping.
            Simply declaring a DataSource with &lt;code&gt;serverType:"hibernate"&lt;/code&gt; enables you
            to automatically generate tables, import sample data and perform all four
            DataSource operations
            </description></Example>
        <Example id="hibernateProduction" title="Hibernate (Production)" requiresModules="SCServer"
                 dataSource="supplyItemSpringDMI"
		         jsURL="dataIntegration/java/hibernateProduction.js">
            <tabs><tab title="Spring applicationContext.xml" canEdit="false" doEval="false"
                       url="dataIntegration/java/applicationContext.xml"/>
                  <tab title="SupplyItemDao.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemDao.java"/>
                  <tab title="SupplyItem.hbml.xml" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.hbm.xml"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description>
            Hibernate's &lt;code&gt;Criteria&lt;/code&gt; object can be created from SmartClient's 
            &lt;code&gt;DSRequest&lt;/code&gt; in order to fulfill the "fetch" operation, with data paging 
            enabled.  Hibernate-managed beans can be populated with inbound, validated data
            with a single method call.
            </description></Example>
    

    </children></ExampleFolder>
    

    <ExampleFolder id="xmlDataIntegration" title="XML" isOpen="false"><description>
        SmartClient can declaratively bind to standard formats like WSDL or RSS, homebrew
        formats, or simple flat files.  
    </description><children>
        <!-- explicitly set showSkinSwitcher on examples that are used in multiple places -->
        <Example id="rssFeed" title="RSS Feed" needXML="true" showSkinSwitcher="true"
		         jsURL="dataIntegration/xml/rssFeed.js">
            <description>
            DataSources can bind directly to simple XML documents where field values appear as
            attributes or subelements.
            </description></Example>

        <Example title="XPath Binding" id="xpathBinding" jsURL="dataIntegration/xml/xpathBinding.js"
            showSkinSwitcher="true" needXML="true">
		    <tabs><tab title="contactsData.xml" canEdit="false" doEval="false"
			           url="dataIntegration/xml/contactsData.xml"/></tabs>
            <description>
            DataSources can extract field values from complex XML documents via XPath
            expressions.  Note how the address fields, which are represented in the contacts
            data as a subelement, appear as columns in the grid. This approach of loading
            simple XML data over HTTP can be used with PHP and other server technologies.
            </description></Example>

        <Example title="Yahoo! Web Services"
                 id="xmlYahooWebServices"
                 jsURL="dataIntegration/xml/yahooWebServices.js" 
         needXML="true" showSkinSwitcher="true">
            <description>
            XPath binding allows declarative integration with web services.  Note how the
            height and width for the thumbnail images have been declaratively extracted from
            the "Thumbnail" subobject.
            </description></Example>

        <!-- explicitly disable the skin switcher on this one - it's not showing anything that
             dramatically changes with a different skin -->
        <Example id="wsdlOperation" title="WSDL Web Services" needXML="true"
            showSkinSwitcher="false"
		         jsURL="dataIntegration/xml/wsdlWebServiceOperations.js">
            <description>
            SmartClient can load WSDL service definitions and call web service operations
            with automatic JSON&lt;-&gt;XML translation.
            
            SOAP encoding rules, namespacing, and element ordering are handled automatically
            for your inputs and outputs. 
            </description></Example>

        <Example id="wsdlBinding" title="Google SOAP Search" needXML="true"
            showSkinSwitcher="true" jsURL="dataIntegration/xml/googleSOAPSearch.js">
            <description>
            Enter a search in the "q" field to search the web with Google. 
            
            DataSources can bind directly to the structure of WSDL messages.
            </description></Example>

        <Example id="xmlEditSave" title="Edit and Save"
            jsURL="dataIntegration/xml/operationBinding_dataURL.js"><tabs>
        <tab title="country_fetch.xml" url="dataIntegration/xml/responses/country_fetch.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_add.xml" url="dataIntegration/xml/responses/country_add.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_update.xml" url="dataIntegration/xml/responses/country_update.xml" 
            doEval="false"  canEdit="false"/>
        <tab title="country_remove.xml" url="dataIntegration/xml/responses/country_remove.xml" 
            doEval="false"  canEdit="false"/>
        </tabs><description><![CDATA[
        Demonstrates <b>Add</b>, <b>Update</b> and <b>Remove</b> operations with a server that
        returns simple XML responses, an integration strategy popular with PHP, Ruby and Perl
        backends.
        <br>
        Each operation is directed to a different XML file containing a sample response for
        that operationType.  The server returns the data-as-saved to allow the grid to update
        its cache.
        ]]></description></Example>
        
        <Example id="restEditSave" title="RestDataSource - Edit and Save"
            jsURL="dataIntegration/xml/restDS_operationBinding.js"><tabs>
        <tab title="country_fetch.xml" url="dataIntegration/xml/responses/country_fetch_rest.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_add.xml" url="dataIntegration/xml/responses/country_add_rest.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_update.xml" url="dataIntegration/xml/responses/country_update_rest.xml" 
            doEval="false"  canEdit="false"/>
        <tab title="country_remove.xml" url="dataIntegration/xml/responses/country_remove_rest.xml" 
            doEval="false"  canEdit="false"/>
        </tabs><description><![CDATA[
        The RestDataSource provides a simple protocol based on XML or JSON over HTTP.  This
        protocol can be implemented with any server technology (PHP, Ruby, ..) and 
        includes all the features of SmartClient's databinding layer (data paging, server
        validation errors, cache sync, etc).<br>
        In this example, each DataSource operation is directed to a different XML file
        containing a sample response for that operationType.  The server returns the
        data-as-saved to allow the grid to update its cache.
        ]]></description></Example>

        <!-- explicitly disable the skin switcher on this one - it's not showing anything that
             dramatically changes with a different skin -->
        <Example title="Server Validation Errors" id="xmlServerValidationErrors" needXML="true"
            showSkinSwitcher="false"
                 jsURL="dataIntegration/xml/serverValidationErrors/serverValidationErrors.js">
            <tabs>
                <tab title="serverResponse.xml" canEdit="false" doEval="false"
                     url="dataIntegration/xml/serverValidationErrors/serverResponse.xml"/>
            </tabs>
            <description>
            Click "Save" to see validation errors derived from an XML response.
            
            Validation errors expressed in application-specific XML formats can be 
            communicated to visual components by implementing
            &lt;code&gt;DataSource.transformResponse()&lt;/code&gt;.  The resulting validation
            errors will be displayed and tracked by forms and editabled grids.
            </description></Example>

        <Example title="XML Schema Import" id="xmlSchemaImport" needXML="true"
                 showSkinSwitcher="true" url="dataIntegration/xml/xmlSchemaImport.js">
            <tabs>
                <tab title="supplyItem.xsd" canEdit="false" doEval="false"
                     url="dataIntegration/xml/supplyItem.xsd"/>
            </tabs>
            <description>
            Click "Load Schema" to load a version of the &lt;code&gt;supplyItem&lt;/code&gt;
            DataSource expressed in XML Schema format, and bind the Grid and Form to it.  Note
            that the form and grid choose appropriate editors according to declared XML Schema
            types.  Click "Validate" to see validation errors from automatically imported
            validators.
            </description></Example>
        <Example title="Schema Chaining" id="schemaChaining" needXML="true"
                 showSkinSwitcher="true" url="dataIntegration/xml/schemaChaining.js">
            <tabs>
                <tab title="supplyItem.xsd" canEdit="false" doEval="false"
                     url="dataIntegration/xml/supplyItem.xsd"/>
            </tabs>
            <description>
            Click "Load Schema" to load a &lt;code&gt;supplyItem&lt;/code&gt; DataSource from
            XML Schema format, then extend that schema with SmartClient-specific presentation
            attributes, and bind the Grid and Form to it.  Note that the internal "itemId"
            field has been hidden from the user, some fields have been retitled, and default
            editors overriden.
            </description></Example>
        <Example title="SmartClient WSDL" showSkinSwitcher="true" needXML="true" ref="WSDLDataSource"/>
    </children></ExampleFolder>

    <ExampleFolder title="JSON" isOpen="false"><description>
        SmartClient brings declarative XPath binding and typed schema (even XML Schema) to the
        simple and convenient JSON format.
    </description><children>

        <Example title="Simple JSON"
            showSkinSwitcher="true"
            id="simpleJSON"
            jsURL="dataIntegration/json/simpleJSON.js">
            <tabs>
                <tab title="countries_small.js" canEdit="false" doEval="false"
                     url="dataIntegration/json/countries_small.js"/>
            </tabs>
           
            <description>
            DataSources can bind directly to JSON data where records appear as an Array of
            JavaScript Objects with field values as properties.  This approach of loading
            simple JSON data over HTTP can be used with PHP and other server technologies.
            </description></Example>

        <Example title="JSON XPath Binding"
                 id="jsonXPath"
                 jsURL="dataIntegration/json/xpathBinding.js"
                 showSkinSwitcher="true">
		    <tabs><tab title="contactsData.js" canEdit="false" doEval="false"
			           url="dataIntegration/json/contactsData.js"/></tabs>
            <description>
            DataSources can extract field values from complex JSON structures via XPath
            expressions.  Note how the address fields, which are represented in the contacts
            data as a subobject, appear as columns in the grid.
            </description></Example>

        <Example title="Yahoo! Web Services" id="jsonYahooWebServices"
            showSkinSwitcher="true" jsURL="dataIntegration/json/yahooWebServices.js">
            <description>
            Enter a search term in the Query input field to see images from Yahoo Image
            Search.&lt;BR&gt;
            XPath binding allows declarative integration with web services.  Note how the
            height and width for the thumbnail images have been declaratively extracted from
            the "Thumbnail" subobject.
            </description></Example>
    
        <Example title="Cross-Site JSON" jsURL="dataIntegration/json/yahooWebServices.js"
            showSkinSwitcher="true">
            <description>
            Using the "scriptInclude" protocol, SmartClient applications can contact compatible
            JSON web services without the need for any intervening server.
            </description></Example>

        <Example title="Server Validation Errors" id="jsonServerValidationErrors"
            showSkinSwitcher="false"
                 jsURL="dataIntegration/json/serverValidationErrors/serverValidationErrors.js">
            <tabs>
                <tab title="serverResponse.js" canEdit="false" doEval="false"
                     url="dataIntegration/json/serverValidationErrors/serverResponse.js"/>
            </tabs>
            <description>
            Click "Save" to see validation errors derived from an XML response.&lt;BR&gt;
            
            Validation errors expressed in application-specific XML formats can be 
            communicated to the SmartClient system by implementing
            &lt;code&gt;DataSource.transformResponse()&lt;/code&gt;.  The resulting validation
            errors will be displayed and tracked by forms and editabled grids.
            </description></Example>
    
    
    </children></ExampleFolder>

</children></ExampleFolder>

<!-- Charts -->
<ExampleFolder title="Charting" requiresModules="PluginBridges,Analytics" isOpen="false"><description><![CDATA[
    SmartClient supports a pluggable Charting API that can be easily connected to multiple
    charting systems, with out of the box integration with the FusionCharts package (sold
    separately by <a target="_blank" href="http://www.infosoftglobal.com/">Infosoft Global</a>).
]]></description><children>
    <Example title="Grid Charting" id="gridCharting" jsURL="charts/gridChart.js" requiresModules="PluginBridges,Analytics">
        <description>
        Data loaded into a ListGrid can be charted with a single API call.
        &lt;P&gt;
        Use the "Chart Type" selector below to see same data rendered by multiple different
        chart types.  Edit the data in the grid to have the chart regenerated automatically.
        </description>
    </Example>
    <Example title="CubeGrid Charting" ref="analytics" requiresModules="PluginBridges,Analytics">
       <description>
       This example shows binding to a multi-dimensional dataset, where each cell value has a
       series of attributes, called "facets", that appear as headers labelling the cell value.
       Drag facets onto the grid to expand the cube model.&lt;BR&gt;
       Right click on any cell and pick "Chart" to chart values by any two facets.
       </description>
    </Example>

<!--
    <ExampleFolder title="WebCharts3D" isOpen="false"><description>
        Charting examples integrating with GreenPoint's WebCharts3D
    </description><children>
    </children></ExampleFolder>

    <ExampleFolder title="FusionCharts" isOpen="false"><description>
        Charting examples integrating with InfoSoft's FusionCharts
    </description><children>
    </children></ExampleFolder>
-->

</children></ExampleFolder>

<!-- Applications -->
<ExampleFolder title="Applications" isOpen="false"><description>
    Demos of complete applications based on SmartClient.
</description><children>

    <Example title="Office Supply Catalog" ref="showcaseApp"/>
        
    <!-- 
    
    -->

    <!--
    <ExampleFolder title="Drawing" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

    <Example title="Interactive Analytics"
        id="analytics"
        backgroundColor="#F5F5F5"        
        showSkinSwitcher="true" requiresModules="PluginBridges,Analytics"
        dataSource="productRevenue"
        jsURL="advanced/cubegrid/databound_cubegrid.js"
        fullScreen="true"
        screenshot="advanced/cubegrid/databound_cubegrid.png"
        screenshotWidth="468"
        screenshotHeight="327"

    ><tabs><tab title="facet controls" url="advanced/cubegrid/facet_controls.js" loadAtEnd="true"/>
    </tabs><description><![CDATA[
        This example shows binding to a multi-dimensional dataset, where each
        cell value has a series of attributes, "called" facets, that appear as headers
        labelling the cell value.  Facets can be added to the view, exposing more detail, by
        dragging the menu buttons onto the grid, or into the "Row Facets" and "Column Facets"
        listings. 
        Click grid turndown controls to expand tree facets.  Note that data loads as it is
        revealed.
    ]]></description>
    </Example>

    <!--
    <ExampleFolder title="Internationalization" isOpen="false" external="true"><description>
    Click on "blah" (French for "Validate") to see a validation error message in French.
    &lt;P&gt;
    Messages can be internationalized via the same techniques uses for classic web
    applications.  Here JSP expressions are used to refer to a resource bundle which may 
    differ by locale.
    </description><children>
    </children></ExampleFolder>

    <ExampleFolder title="Flash integration" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>

    <ExampleFolder title="Applet integration" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

</children></ExampleFolder>

<ExampleFolder title="Extending" isOpen="false"><description>
    Demos of complete applications based on SmartClient.
</description><children>
    <Example title="Component Reuse"
        jsURL="extending/componentReuse.js" css="extending/portlet.css"><description>
        The portlets below are a custom component created with less than one page of code
        (see the "JS" tab).  The portlets support drag repositioning, drag resizing, a close
        button, can contain any HTML content, and are skinnable.
    </description>
    </Example>
    <Example id="patternReuse" title="Pattern Reuse"
        dataSource="supplyItem"
        jsURL="extending/patternReuse.js">
    <tabs><tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs><description>
        Click to select a DataSource, click on records to edit them in the adjacent form, then
        click the "Save" button to save changes.&lt;br&gt;
        This custom component combines a databound form and grid into a reusable application
        pattern of side-by-side editing, that can be used with any DataSource.
    </description>
    </Example>
    <Example title="Schema Reuse" ref="schemaChaining"/>
    <Example title="Type Reuse" ref="customSimpleType"/>

    <Example title="Customize Fields" dataSource="supplyItem"
             jsURL="extending/customizeFields.js">
        <description>
        Edit field definitions in the grid below to override how this form binds to the 
        &lt;code&gt;supplyItem&lt;/code&gt; DataSource.  This is a simplified example of how
        you can deliver an application that can be customized with organization-specific fields
        and rules.  Dynamic schema binding makes building WYSIWYG editing interfaces very
        simple.  
        </description></Example>
    
    <Example title="Drag and Drop" ref="customDrag"/>
    <Example title="Hovers" ref="customHovers"/>
    <Example title="Mouse Handling" ref="customMouseEvents"/>
    <Example title="Animation" ref="customAnimation"/>
</children></ExampleFolder>

</children></root></ExampleTree>
