/*
 Isomorphic SmartClient web presentation layer
 Online documentation data
 Copyright 2000-2008 Isomorphic Software, Inc. All rights reserved.
*/


var docItems = {
    "method:Layout.getMember":{
        ref:"method:Layout.getMember",
        flags:"",
        description:"\n Given a numerical index or a member ID, return a pointer to the appropriate member.\n <p>\n If passed a member Canvas, just returns it.\n\n",
        name:"getMember",
        seeAlso:[
            {ref:"method:Layout.getMemberNumber", description:null}
        ],
        params:[
            {description:"identifier for the required member", optional:false, name:"memberID", 
             defaultValue:null,type:"string | number | Canvas"}
        ],
        returns:{description:"member widget", type:"Canvas"},
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:ComboBoxItem.pickListProperties":{
        ref:"attr:ComboBoxItem.pickListProperties",
        flags:"IRA",
        description:"If specified this properties block will be applied to the pickList created for this\n Form Item.",
        name:"pickListProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:UploadItem.setValue":{
        ref:"method:UploadItem.setValue",
        flags:"",
        description:" Attempting to set the value for an upload form item is disallowed for security reasons.\n Therefore this method will just log a warning, and not modify the value of the item.\n",
        name:"setValue",
        seeAlso:[],
        type:"method",
        definingClass:"class:UploadItem"
    },
    "method:ResultSet.sortByProperty":{
        ref:"method:ResultSet.sortByProperty",
        flags:"",
        description:" Sort this ResultSet by a property of each record.\n <P>\n Sorting is performed on the client for a ResultSet that has a full cache for the current\n filter criteria.  Otherwise, sorting is performed by the server, and changing the sort order\n will invalidate the cache.\n <P>\n <b>NOTE:</b> normalizers are not supported by ResultSets in \"paged\" mode, although valueMaps\n in the DataSource are respected by the SQLDataSource.\n\n",
        name:"sortByProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to sort by", optional:false, name:"property", 
             defaultValue:null,type:"string"},
            {description:"true == sort ascending, false == sort descending", optional:false, name:"up", 
             defaultValue:null,type:"boolean"},
            {description:"May be specified as a function, with signature \n              <code>normalize(item, propertyName, context)</code>, where <code>item</code> is\n              a pointer to the item in the array, <code>propertyName</code> is the \n              property by which the array is being sorted, and <code>context</code> is the\n              arbitrary context passed into this method. Normalizer function should return\n              the value normalized for sorting.<br>\n              May also be specified as a ValueMap which maps property values to sortable values.", 
             optional:true,name:"normalizer", defaultValue:null, type:"function or ValueMap"},
            {description:"Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function", 
             optional:true,name:"context", defaultValue:null, type:"any"}
        ],
        returns:{description:"the list itself", type:"List"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["sorting"]
    },
    "method:ListGrid.getDragTrackerIcon":{
        ref:"method:ListGrid.getDragTrackerIcon",
        flags:"",
        description:" Return an icon to display as a drag tracker when the user drags some record.<br>\n Default implementation: \n If ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')} is specified for the title field of this grid \n (see ${isc.DocUtils.linkForRef('method:ListGrid.getTitleField')}), the appropriate value icon will be displayed.\n If no appropriate valueIcon can be found, the icon will be derived from\n ${isc.DocUtils.linkForRef('attr:ListGrid.trackerImage')}.<br>\n If multiple records are selected, only the first record is examined for valueIcons.\n <p>\n Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to <code>\"icon\"</code>. \n",
        name:"getDragTrackerIcon",
        seeAlso:[],
        params:[
            {description:"Records being dragged", optional:false, name:"records", defaultValue:null, 
             type:"Array of ListGridRecord"}
        ],
        returns:{description:"Image URL of icon to display", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["dragTracker"]
    },
    "attr:FormItem.startRow":{
        ref:"attr:FormItem.startRow",
        flags:"IRW",
        description:"Whether this item should always start a new row in the form layout.",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "attr:ToolbarItem.buttonProperties":{
        ref:"attr:ToolbarItem.buttonProperties",
        flags:"IRA",
        description:"Default properties for this toolbar's buttons.",
        name:"buttonProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ToolbarItem"
    },
    "method:ListGrid.freezeField":{
        ref:"method:ListGrid.freezeField",
        flags:"",
        description:" Freeze the indicated field, so that it remains in place and visible when horizontal\n scrolling occurs.\n\n",
        name:"freezeField",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"field", defaultValue:null, 
             type:"ListGridField or colNum or ListGridField.name"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["frozenFields"]
    },
    "classAttr:Validator.mustBeLongerThan":{
        ref:"classAttr:Validator.mustBeLongerThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>lengthRange</code> type validator\n returns false becaues the value passed in has fewer than <code>validator.min</code> characters.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeLongerThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be more than ${min} characters\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:MenuItem.iconWidth":{
        ref:"attr:MenuItem.iconWidth",
        flags:"IR",
        description:"The width applied to this item's icon.  The default of <code>16</code> can be changed\n for all MenuItems by overriding ${isc.DocUtils.linkForRef('attr:Menu.iconWidth')}.",
        name:"iconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"object:MenuItem",
        groups:["menuIcons"]
    },
    "method:Button.getTitle":{
        ref:"method:Button.getTitle",
        flags:"A",
        description:" Return the title - text/HTML drawn inside the component.\n <p>\n Default is to simply return this.title.\n",
        name:"getTitle",
        seeAlso:[],
        returns:{description:"HTML for the title", type:"string"},
        type:"method",
        definingClass:"class:Button"
    },
    "classMethod:XMLTools.loadXML":{
        ref:"classMethod:XMLTools.loadXML",
        flags:"",
        description:" Load an XML document from the origin server or from a foreign server by relaying through the\n origin server.  An asynchronous callback provides both the XML document and raw text of the\n response.\n <P>\n Relaying through the origin server requires that the ISC HttpProxyServlet be installed and\n accessible.\n \n",
        name:"loadXML",
        seeAlso:[],
        params:[
            {description:"URL to load the schema from", optional:false, name:"URL", defaultValue:null, 
             type:"URL"},
            {description:"callback to fire when the XML is loaded.  Signature is                             callback(xmlDoc, xmlText)", 
             optional:false,name:"callback", defaultValue:null, type:"callback"},
            {description:"additional properties to set on the RPCRequest                                         that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"RPCRequest"}
        ],
        type:"classMethod",
        definingClass:"class:XMLTools"
    },
    "attr:Img.src":{
        ref:"attr:Img.src",
        flags:"IRW",
        description:"The base filename for the image.\n <P>\n If <code>img.state</code> is set, it's value will be appended to the URL before the\n file extension.  \n <P>\n For example, given an <code>src</code> of \"findIcon.gif\" and a state of\n \"Disabled\", the resulting image name would be \"findIcon_Disabled.gif\".  Compound states\n such as \"Selected\", \"Focused\" and \"Over\" or \"Down\" will have an intervening underscore,\n resulting in, for example, <code>\"findIcon_Selected_Down.gif\"</code>.",
        name:"src",
        setter:["setSrc"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"blank.gif\"",
        type:"attr",
        definingClass:"class:Img",
        groups:["appearance"]
    },
    "attr:ImgButton.iconAlign":{
        ref:"attr:ImgButton.iconAlign",
        flags:"IR",
        description:"If this button is showing an icon should it be right or left aligned?",
        name:"iconAlign",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:DynamicForm.showInlineErrors":{
        ref:"attr:DynamicForm.showInlineErrors",
        flags:"IRW",
        description:"Should field errors be written into the form next to the appropriate form items?",
        name:"showInlineErrors",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "method:DynamicForm.setError":{
        ref:"method:DynamicForm.setError",
        deprecated:"This method has been deprecated as of SmartClient release 5.7.  Use ${isc.DocUtils.linkForRef('method:DynamicForm.addFieldErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')} instead",
        flags:"A",
        description:"          Sets error message(s) for the specified itemName to the error string or array of\n          strings. You must call form.markForRedraw() to display the new error message(s).<br>\n          <b>Note:</b> you can call this multiple times for an individual itemName\n			 which will result in an array of errors being remembered.\n\n",
        name:"setError",
        seeAlso:[],
        params:[
            {description:"name of the item to set", optional:false, name:"itemName", defaultValue:null, 
             type:"string"},
            {description:"error message string or array of strings", optional:false, 
             name:"errorMessage",defaultValue:null, type:"string|array"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "method:ListGrid.setData":{
        ref:"method:ListGrid.setData",
        flags:"",
        description:" Initialize the data object with the given array. Observes methods of the data object\n so that when the data changes, the listGrid will redraw automatically.\n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"data to show in the list", optional:false, name:"newData", defaultValue:null, 
             type:"List of ListGridRecord"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["data"]
    },
    "attr:TreeGrid.showRoot":{
        ref:"attr:TreeGrid.showRoot",
        flags:"IR",
        description:"Specifies whether the root node should be displayed in the treeGrid.\n <P>\n This property is only available for \"children\" modelType trees, hence is not allowed for\n trees that load data from the server dynamically via ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')}.  \n <P>\n To get the equivalent of a visible \"root\" node in a tree that loads data dynamically,\n add a singular, top-level parent to the data.  However, note that this top-level parent\n will technically be the only child of root, and the implicit root object will be\n returned by ${isc.DocUtils.linkForRef('method:Tree.getRoot','this.data.getRoot()')}.",
        name:"showRoot",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeField"]
    },
    "attr:ComboBoxItem.showAllOptions":{
        ref:"attr:ComboBoxItem.showAllOptions",
        flags:"IR",
        description:"If true, even non-matching options will be shown, with configurable \n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.separatorRows','separator rows')} in between.  Not valid for\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource','databound pickLists')}.",
        name:"showAllOptions",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:Canvas.getScrollTop":{
        ref:"method:Canvas.getScrollTop",
        flags:"A",
        description:" Get the number of pixels this Canvas is scrolled from its top edge.\n",
        name:"getScrollTop",
        seeAlso:[],
        returns:{description:"scrollTop", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "scrolling"]
    },
    "attr:ListGrid.dataPageSize":{
        ref:"attr:ListGrid.dataPageSize",
        flags:"IRW",
        description:"When using data paging, how many records to fetch at a time.  The value of this\n attribute is passed on to the auto-constructed ${isc.DocUtils.linkForRef('class:ResultSet')} object for this\n component.  In effect, this gives you control over the ${isc.DocUtils.linkForRef('attr:ResultSet.resultSize')}\n attribute for this component.",
        name:"dataPageSize",
        seeAlso:[
            {ref:"attr:ResultSet.resultSize", description:null}
        ],
        valueType:"integer",
        defaultValue:"75",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('databoundFetch')}"],
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "group:ancestry":{
        ref:"group:ancestry",
        refs:["type:DisplayNodeType"],
        description:"Parent/child relationships",
        name:"ancestry",
        seeAlso:[],
        type:"group"
    },
    "group:menuBasic":{
        ref:"group:menuBasic",
        refs:["method:MenuItem.action", "attr:MenuItem.title", "attr:MenuItem.submenu", 
         "attr:MenuItem.isSeparator","attr:MenuItem.enabled"],
        name:"menuBasic",
        seeAlso:[],
        type:"group"
    },
    "method:GridRenderer.getRowHeight":{
        ref:"method:GridRenderer.getRowHeight",
        flags:"",
        description:" Return the height this row should be.  Default is this.cellHeight. \n\n",
        name:"getRowHeight",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number", optional:false, name:"rowNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"height in pixels", type:"number"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "attr:PickList.filterLocally":{
        ref:"attr:PickList.filterLocally",
        flags:"IRA",
        description:"If <code>filterLocally</code> is set for this item, and this item is showing options \n from a dataSource, fetch the entire set of options from the server, and use these values\n to map the item value to the appropriate display value. Also use <code>\"local\"</code>\n type filtering on drop down list of options.<br>\n This means data will only be fetched once from the server, and then filtered on the\n client.",
        name:"filterLocally",
        seeAlso:[
            {ref:"attr:FormItem.filterLocally", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:RestDataSource.fetchDataURL":{
        ref:"attr:RestDataSource.fetchDataURL",
        flags:"IR",
        description:"Custom dataURL for fetch type operations",
        name:"fetchDataURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:ListGrid.sortDirection":{
        ref:"attr:ListGrid.sortDirection",
        flags:"IRW",
        description:"Specifies the current sorting direction of this listGrid. See SortDirection\n          type for details.",
        name:"sortDirection",
        seeAlso:[],
        valueType:"SortDirection",
        defaultValue:"Array.ASCENDING",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sort')}"],
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "attr:ResultTree.disableCacheSync":{
        ref:"attr:ResultTree.disableCacheSync",
        flags:"IRA",
        description:"By default when the data of this ResultSet's dataSource is modified, the ResultSet will\n be updated to display these changes.\n Set this flag to true to disable this behavior.",
        name:"disableCacheSync",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ResultTree",
        groups:["cacheSync"]
    },
    "classAttr:ValidatorTypes.lengthRange":{
        ref:"classAttr:ValidatorTypes.lengthRange",
        flags:"IR",
        description:"This validator type applies to string values only.  If the value is a string value\n  validation will fail if the strings length falls outside the range specified by \n  <code>validator.max</code> and <code>validator.min</code>.<br>\n  Note that non-string values will always pass validation by this validator type.<br>\n Note that the <code>errorMessage</code> for this validator will be evaluated as\n a dynamicString - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"lengthRange",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "method:ListGrid.getEditValues":{
        ref:"method:ListGrid.getEditValues",
        flags:"",
        description:" Returns the current set of unsaved edits for a given row being edited.\n\n",
        name:"getEditValues",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"valuesID", defaultValue:null, type:"number | Object"}
        ],
        returns:{description:"Current editValues object for the row.  This contains the current                     edit values in {fieldName1:value1, fieldName2:value2} format.", 
         type:"object"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:OperationBinding.operationType":{
        ref:"attr:OperationBinding.operationType",
        flags:"IR",
        description:"Which operationType this operationBinding is for.  This property is only settable on an operationBinding, not\n a DataSource as a whole.",
        name:"operationType",
        seeAlso:[],
        valueType:"DSOperationType",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:RPCRequest.useXmlHttpRequest":{
        ref:"attr:RPCRequest.useXmlHttpRequest",
        deprecated:"As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}.  If you specify a value for this property, it will take precedence over ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}.",
        flags:"IRWA",
        description:"Selects the default http transport for this RPCRequest.  If set to true, this request will use\n XMLHttpRequest for the transport to the server.  If set to false it will use a hidden frame.  If\n left unset, the transport mechanism is determined from the RPCManager default set in \n ${isc.DocUtils.linkForRef('classAttr:RPCManager.useXmlHttpRequest')}\n <p>\n If you're using queueing, note that all requests in the queue must use the same transport.\n If you attempt to send a request via a different transport than those that are currently on\n the queue, it will be sent to the server separately, ahead of the queue, and a warning will\n be logged to the Developer Console.\n <p>\n If you specify <code>true</code> for this attribute and XMLHttp is not available, a warning\n will be logged to the Developer Console and RPCManager will attempt to use the frames\n transport for this request.  Note that some features like\n ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} requre the XMLHttp transport and will not work if the\n XMLHttp transport is unavailable (this can happen if the end user is using Internet Explorer\n and has disabled ActiveX).  You can query the availability of XMLHttp by calling\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')}",
        name:"useXmlHttpRequest",
        seeAlso:[
            {ref:"classAttr:RPCManager.useXmlHttpRequest", description:null},
            {ref:"classMethod:RPCManager.xmlHttpRequestAvailable", description:null}
        ],
        valueType:"boolean",
        defaultValue:"RPCManager.useXmlHttpRequest",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "method:Canvas.getHoverHTML":{
        ref:"method:Canvas.getHoverHTML",
        flags:"",
        description:" If <code>this.showHover</code> is true, when the user holds the mouse over this Canvas for\n long enough to trigger a hover event, a hover canvas is shown by default. This method returns\n the contents of that hover canvas. Default implementation returns <code>this.prompt</code> -\n override for custom hover HTML. Note that returning <code>null</code> or an empty string will\n suppress the hover canvas altogether.\n",
        name:"getHoverHTML",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:ListGridField.suppressValueIcon":{
        ref:"attr:ListGridField.suppressValueIcon",
        flags:"IRW",
        description:"If this field has a valueIcons property specified, setting this property to true will \n prevent the valueIcon being written out into this field's cells.",
        name:"suppressValueIcon",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null},
            {ref:"attr:ListGridField.showValueIconOnly", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:ResultSet.dropCacheOnUpdate":{
        ref:"attr:ResultSet.dropCacheOnUpdate",
        flags:"IRA",
        description:"Whether to discard all cached rows when a modification operation (add, update, remove)\n occurs on the ResultSet's DataSource.\n <P>\n A ResultSet that has a complete cache for the current filter criteria can potentially\n incorporate a newly created or updated row based on the data that the server returns\n when a modification operation completes.  However this is not always possible for\n ResultSets that show some types of joins, or when the server cannot easily return update\n data.  In this case set <code>dropCacheOnUpdate</code> to cause the cache to be\n discarded when an update occurs.\n <P>\n <code>dropCacheOnUpdate</code> can be set either directly on a ResultSet, or on a\n DataSource in order to affect all ResultSets on that DataSource.",
        name:"dropCacheOnUpdate",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["cacheSync"]
    },
    "group:validtion":{
        ref:"group:validtion",
        refs:["method:ListGrid.clearRowErrors"],
        name:"validtion",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeNode.parentId":{
        ref:"attr:TreeNode.parentId",
        flags:"IR",
        description:"For trees with modelType \"parent\", this property specifies unique parent ID of this node.\n The unique ID of a node, together with the unique ID of its parent is used by\n ${isc.DocUtils.linkForRef('method:Tree.linkNodes')} to link a list of nodes into a tree.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}.",
        name:"parentId",
        seeAlso:[
            {ref:"attr:TreeNode.id", description:null},
            {ref:"method:Tree.linkNodes", description:null},
            {ref:"attr:Tree.modelType", description:null},
            {ref:"attr:Tree.parentIdField", description:null}
        ],
        valueType:"String or Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "classMethod:Page.getScreenWidth":{
        ref:"classMethod:Page.getScreenWidth",
        flags:"",
        description:"		Get the width of the user's screen, in pixels.\n",
        name:"getScreenWidth",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "attr:Canvas.edgeCenterBackgroundColor":{
        ref:"attr:Canvas.edgeCenterBackgroundColor",
        flags:"IR",
        description:"Background color for the center section only.  Can be used as a surrogate background\n color for the decorated Canvas, if the Canvas is set to partially overlap the edges and\n hence can't show a background color itself without occluding media.",
        name:"edgeCenterBackgroundColor",
        seeAlso:[],
        valueType:"Color",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "attr:GridRenderer.showAllRows":{
        ref:"attr:GridRenderer.showAllRows",
        flags:"IRA",
        description:"Whether all rows should be drawn all at once, or only rows visible in the viewport.<br><br>\n\n Drawing all rows causes longer initial rendering time, but allows smoother vertical scrolling.\n With a very large number of rows, showAllRows will become too slow.",
        name:"showAllRows",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["performance"]
    },
    "attr:TabSet.tabBarThickness":{
        ref:"attr:TabSet.tabBarThickness",
        flags:"IRW",
        description:"Thickness of tabBar, applies to either orientation (specifies height for horizontal,\n width for vertical orientation).  Note that overriding this value for TabSets that are\n skinned with images generally means providing new media for the borders.",
        name:"tabBarThickness",
        seeAlso:[],
        valueType:"number",
        defaultValue:"21",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBar"]
    },
    "method:Tree.getParent":{
        ref:"method:Tree.getParent",
        flags:"",
        description:"\n Returns the parent of this node.\n\n",
        name:"getParent",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"parent of this node", type:"node"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:Canvas.mouseOut":{
        ref:"method:Canvas.mouseOut",
        flags:"A",
        description:"\n Executed when the mouse leaves this widget.  No default implementation.\n\n",
        name:"mouseOut",
        seeAlso:[],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customMouseEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:StatefulCanvas.setAutoFit":{
        ref:"method:StatefulCanvas.setAutoFit",
        flags:"",
        description:" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn\n autoFit on or off. When autoFit is set to <code>false</code>, canvas will be resized to\n it's previously specified size.\n",
        name:"setAutoFit",
        seeAlso:[],
        params:[
            {description:"New autoFit setting.", optional:false, name:"autoFit", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas"
    },
    "attr:DynamicForm.cancelParamValue":{
        ref:"attr:DynamicForm.cancelParamValue",
        flags:"IRW",
        description:"The value of the special field sent to the server as part of ${isc.DocUtils.linkForRef('method:DynamicForm.cancel')}",
        name:"cancelParamValue",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"cancel\"",
        type:"attr",
        definingClass:"class:DynamicForm"
    },
    "method:Layout.setLayoutMargin":{
        ref:"method:Layout.setLayoutMargin",
        flags:"",
        description:" Method to force a reflow of the layout after directly assigning a value to any of the\n layout*Margin properties. Takes no arguments.\n\n",
        name:"setLayoutMargin",
        seeAlso:[],
        type:"method",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "attr:FormItem.showDisabled":{
        ref:"attr:FormItem.showDisabled",
        flags:"IRWA",
        description:"When this item is disabled, should it be re-styled to indicate its disabled state?",
        name:"showDisabled",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:Selection.deselectAll":{
        ref:"method:Selection.deselectAll",
        flags:"",
        description:"			Deselect ALL records of the list\n",
        name:"deselectAll",
        seeAlso:[],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:ListGrid.ungroupText":{
        ref:"attr:ListGrid.ungroupText",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, and\n ${isc.DocUtils.linkForRef('attr:ListGrid.isGrouped','this.isGrouped')} is true, this\n attribute will be shown as the title for the menu item to ungroup the grid.",
        name:"ungroupText",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Ungroup\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "group:shadow":{
        ref:"group:shadow",
        refs:["method:Canvas.setShowShadow", "attr:Canvas.showShadow", "attr:Canvas.shadowDepth", 
         "attr:Canvas.shadowOffset","attr:Canvas.shadowSoftness", "attr:Canvas.shadowImage"],
        name:"shadow",
        seeAlso:[],
        type:"group"
    },
    "attr:DataSource.showLocalFieldsOnly":{
        ref:"attr:DataSource.showLocalFieldsOnly",
        flags:"IR",
        description:"For a DataSource that inherits ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from another DataSource \n (via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}), indicates that only the fields listed in this DataSource\n should be shown.  All other inherited parent fields will be marked \"hidden:true\".",
        name:"showLocalFieldsOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["fields"]
    },
    "method:ImgButton.setIcon":{
        ref:"method:ImgButton.setIcon",
        flags:"",
        description:" Change the icon being shown next to the title text.\n",
        name:"setIcon",
        seeAlso:[],
        params:[
            {description:"URL of new icon", optional:false, name:"icon", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:ListGrid.booleanImageHeight":{
        ref:"attr:ListGrid.booleanImageHeight",
        flags:"IRWA",
        description:"Height for the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} and the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanFalseImage')}",
        name:"booleanImageHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "type:PromptStyle":{
        ref:"type:PromptStyle",
        values:[
            {description:"Displays a centered modal prompt with text specified by                 ${isc.DocUtils.linkForRef('attr:RPCRequest.prompt')}", 
             value:"\"dialog\""},
            {description:"Changes the current cursor to the style specified by                 ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}", 
             value:"\"cursor\""}
        ],
        description:null,
        name:"PromptStyle",
        seeAlso:[],
        type:"type"
    },
    "class:XJSONDataSource":{
        methods:[],
        ref:"class:XJSONDataSource",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:[],
        description:"A DataSource preconfigured to use the ${isc.DocUtils.linkForRef('type:RPCTransport','\"scriptInclude\"')} transport\n for cross-domain calls to JSON services, such as those provided\n by <a href='http://developer.yahoo.net/common/json.html#callbackparam' onclick=\"window.open('http://developer.yahoo.net/common/json.html#callbackparam');return false;\">Yahoo</a>.\n <P>\n To use this DataSource, provide the URL of the service as ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}, and\n provide ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} that describe the structure of the part of the\n returned data that you would like to use.\n <P>\n ${isc.DocUtils.linkForRef('attr:DataSource.recordXPath')} and ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} can be used to extract\n data from the structure returned by the service.\n <P>\n This XJSONDataSource is really a subclass of DataSource with just a few property settings:\n <pre>\n    dataFormat : \"json\",\n    dataTransport : \"scriptInclude\"\n    callbackParam : \"callback\"\n </pre>\n <P>\n NOTE: if you use this DataSource to contact Yahoo web services, remember to include\n output=json in the dataURL, as well as a\n <a href='http://developer.yahoo.net/' onclick=\"window.open('http://developer.yahoo.net/');return false;\">Yahoo developer ID</a>.",
        name:"XJSONDataSource",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('jsonYahooWebServices')}"]
    },
    "attr:SelectItem.optionDataSource":{
        ref:"attr:SelectItem.optionDataSource",
        flags:"IRA",
        description:"If set, this FormItem will derive data to show in the PickList by fetching records from\n the specified <code>optionDataSource</code>.  The fetched data will be used as a\n ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the\n ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in\n the loaded records, to derive one valueMap entry per record loaded from the\n optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by\n setting ${isc.DocUtils.linkForRef('attr:SelectItem.pickListFields')}.\n <P>\n The data will be retrieved via a \"fetch\" operation on the DataSource, passing the \n ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing\n ${isc.DocUtils.linkForRef('attr:SelectItem.optionFilterContext')} (if set) as DSRequest properties.\n <P>\n The fetch will be triggered when the pickList is first shown, or, you can set\n ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is\n first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually \n trigger a fetch.\n <P>\n Data paging is automatically enabled if the optionDataSource supports it.  As the\n pickList is scrolled by the user, requests for additional data will be automatically\n issued.\n <P>\n For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,\n with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.\n If your dataSource is not capable of filtering results by search criteria (eg the\n dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:SelectItem.filterLocally')} to have the\n entire dataset loaded up front and filtering performed in the browser.  This disables\n data paging.\n <P>\n Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}\n behaviors, eg, fetching individual display values before the pickList is shown.\n <P>\n Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is <b>also</b> specified\n for the field (either directly in the form item or as part of the field definition in\n the dataSource), it will be preferred to the data derived from the optionDataSource for\n whatever mappings are present.",
        name:"optionDataSource",
        seeAlso:[],
        valueType:"DataSource | String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:RadioGroupItem.vertical":{
        ref:"attr:RadioGroupItem.vertical",
        flags:"IRW",
        description:"True == display options vertically, false == display in a single row",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RadioGroupItem",
        groups:["appearance"]
    },
    "attr:ListGrid.listEndEditAction":{
        ref:"attr:ListGrid.listEndEditAction",
        flags:"IRWA",
        description:"If the user is editing the last record in this listGrid, and attempts to navigate \n beyond the last row either by tabbing off the last editable field, or using the down\n arrow key, this property determines what action to take:<ul>\n <li>\"next\": start editing a new record at the end of the list.\n <li>\"done\": hide the editor\n <li>\"stop\": leave focus in the cell being edited\n </ul>",
        name:"listEndEditAction",
        seeAlso:[],
        valueType:"RowEndEditAction",
        defaultValue:"\"stop\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('enterNewRows')}"],
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:TabSet.showPaneContainerEdges":{
        ref:"attr:TabSet.showPaneContainerEdges",
        flags:"IRWA",
        description:"Should the paneContainer for this tabset show ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}.",
        name:"showPaneContainerEdges",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:TreeGrid.folderClosed":{
        ref:"method:TreeGrid.folderClosed",
        flags:"",
        description:"\n This method is called when a folder is closed either via the user manipulating the\n expand/collapse control in the UI or via ${isc.DocUtils.linkForRef('method:TreeGrid.closeFolder')}.  You can return\n <code>false</code> to cancel the close.\n\n",
        name:"folderClosed",
        seeAlso:[],
        params:[
            {description:"the folder (record) that is being closed", optional:false, name:"node", 
             defaultValue:null,type:"TreeNode"}
        ],
        returns:{description:"false to cancel the close, true to all it to proceed", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:List.first":{
        ref:"method:List.first",
        flags:"",
        description:" Return the first item in this list\n\n",
        name:"first",
        seeAlso:[],
        returns:{description:"first item in the list", type:"any"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "classMethod:RPCManager.clearTransaction":{
        ref:"classMethod:RPCManager.clearTransaction",
        flags:"A",
        description:" Erase all client-side record of a transaction, such that any response from the server\n will be ignored.\n <P>\n A transaction means a batch of one or more RPCRequests that have already been sent to\n the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')}.\n\n",
        name:"clearTransaction",
        seeAlso:[
            {ref:"group:relogin", description:null}
        ],
        params:[
            {description:"id of the transaction to be cleared", optional:false, name:"transactionNum", 
             defaultValue:null,type:"id"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "method:ListGrid.focusInFilterEditor":{
        ref:"method:ListGrid.focusInFilterEditor",
        flags:"",
        description:" If the filter editor (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')}) is visible for this grid, \n this method will explictly put focus into the specified field in the filter editor.\n",
        name:"focusInFilterEditor",
        seeAlso:[],
        params:[
            {description:"Name of the field to put focus into. If unspecified focus will go                             to the first field in the editor", 
             optional:true,name:"fieldName", defaultValue:null, type:"String"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "method:ListGrid.unsort":{
        ref:"method:ListGrid.unsort",
        flags:"",
        description:" Turn sorting off, typically because data has changed and is no longer sorted.\n <p>\n Calling <code>unsort()</code> disables visual indication of which column is the sort column,\n and calls <code>unsort()</code> on the underlying dataset.\n <P>\n Note that a grid viewing a paged dataset may not be able to support <code>unsort()</code>\n because the sort order is what establishes the row numbering that allows data to be\n fetched in batches.\n <P>\n <code>unsort()</code> is automatically called when records are dropped or value of the\n sorted column is changed.\n\n",
        name:"unsort",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "method:CubeGrid.enableHiliting":{
        ref:"method:CubeGrid.enableHiliting",
        flags:"",
        description:"\n      enable / disable all hilites\n\n      <br><i>methodType</i> action\n",
        name:"enableHiliting",
        seeAlso:[],
        params:[
            {description:"new enabled state to apply - if null, defaults to true", optional:true, 
             name:"enable",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "attr:DynamicForm.wrapItemTitles":{
        ref:"attr:DynamicForm.wrapItemTitles",
        flags:"IRW",
        description:"Whether titles for form items should wrap.  If not specified, titles will wrap by\n default.  Can be overridden for individual items via ${isc.DocUtils.linkForRef('attr:FormItem.wrapTitle')}",
        name:"wrapItemTitles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "type:ObjectLiteral":{
        ref:"type:ObjectLiteral",
        description:"An \"Object literal\" is JavaScript shorthand for defining a JavaScript Object with a set\n of properties.  For example, code like this:\n <pre>\n    var request = {\n        actionURL : \"/foo.do\",\n        showPrompt:false\n    };</pre>\n .. is equivalent to ..\n <pre>\n    var request = new Object();\n    request.actionURL = \"/foo.do\";\n    request.showPrompt = false;</pre>\n In situations where a set of ${isc.DocUtils.linkForRef('type:Properties','properties')} may be passed to a\n method, the Object literal notation is much more compact.  For example:\n <pre>\n    isc.RPCManager.sendRequest({\n        actionURL : \"/foo.do\",\n        showPrompt:false\n    });</pre>\n <b>NOTE:</b> if you have a 'trailing comma' in an object literal, like so:\n <pre>\n    var request = {\n        actionURL : \"/foo.do\",\n        showPrompt:false, // TRAILING COMMA\n    };</pre>\n This is considered a syntax error by Internet Explorer, but not by Firefox.  This is by\n far the #1 cause of Internet Explorer-specific errors that do not occur in other\n browsers.  Pay special attention to this error, and, if you can, install the\n JSSyntaxScannerFilter into your development environment (as described in the\n ${isc.DocUtils.linkForRef('group:iscInstall','deployment instructions')}).",
        name:"ObjectLiteral",
        seeAlso:[],
        type:"type"
    },
    "attr:GridRenderer.emptyMessageStyle":{
        ref:"attr:GridRenderer.emptyMessageStyle",
        flags:"IRW",
        description:"The CSS style name applied to the emptyMessage string if displayed.",
        name:"emptyMessageStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["emptyMessage"]
    },
    "attr:CubeGrid.dataSource":{
        ref:"attr:CubeGrid.dataSource",
        flags:"IR",
        description:"Name of the DataSource to use to fetch CubeGrid data.\n <p>\n The DataSource should have a field named after each facetId.  The CubeGrid will submit\n requests for data as DataSource \"fetch\" operations that request \n ${isc.DocUtils.linkForRef('object:CellRecord','cellRecords')} only for currently visible area\n (including ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio','drawAheadRatio')}).  The ${isc.DocUtils.linkForRef('type:Criteria')} passed\n in each fetch operation will be a set of facetValues that corresponds to a rectangular\n swath of cells the CubeGrid needs data for, for example:<pre>\n      { region:\"west\", product:[\"chair\", \"table\"], timePeriod:\"Q1 2004\" }\n </pre>\n Note that in the criteria above, the Array value for the \"product\" facet indicates the\n CubeGrid needs cellRecords for both the \"chair\" and \"table\" facetValues.\n <P>\n ${isc.DocUtils.linkForRef('attr:CubeGrid.fixedFacetValues')}, if any, are always sent in each \"fetch\" operation.\n <P>\n Scrolling, expanding/collapsing tree facets, pivoting, and changing the currently\n visibile facets may all trigger data requests.\n <P>\n The CubeGrid will generally attempt to fetch a minimal set of data to fill the viewport,\n sending multiple fetch operations in a batch (via ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','queueing')})\n which minimally describe newly revealed areas without specifying each individual cell.\n The CubeGrid will automatically handle being provided <i>more</i> data than was asked\n for, so server-side fetch-ahead policies can be implemented without any client-side\n customization.\n <P>\n Note that the ${isc.DocUtils.linkForRef('attr:DataSource.serverType','SQL connector')} shipped with the SmartClient\n SDK is capable of responding to the CubeGrid's data requests without writing any custom\n server code.",
        name:"dataSource",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "classMethod:Log.setPriority":{
        ref:"classMethod:Log.setPriority",
        flags:"",
        description:" Set the priority of messages that will be visible for this log category.\n <P>\n After calling setPriority, any messages logged to the given category whose priority is\n below the specified priority will not appear in the Log.\n\n",
        name:"setPriority",
        seeAlso:[
            {ref:"classMethod:Log.isEnabledFor", 
             description:"to check whether a category would allow a log at a given priority"}
        ],
        params:[
            {description:"category name", optional:false, name:"category", defaultValue:null, 
             type:"String"},
            {description:"priority level to set", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"},
            {description:"Optional ISC class or instance - if passed the priority will be set for logging \n      occurring on the class or instance only.", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"}
        ],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "attr:Menu.submenuImage":{
        ref:"attr:Menu.submenuImage",
        flags:"IRWA",
        description:"Default image to use for the submenu indicator. Valid src, width and height must be\n specified. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.<br>\n If ${isc.DocUtils.linkForRef('attr:Menu.submenuDirection')} is set to <code>\"left\"</code>, the image src will have\n the suffix <code>\"_left\"</code> appended to it.",
        name:"submenuImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Menu"
    },
    "method:Canvas.resizeBy":{
        ref:"method:Canvas.resizeBy",
        flags:"",
        description:"			Resizes the widget, adding deltaX to its width and deltaY to its height (moves the right\n          and/or bottom sides of the widget).\n",
        name:"resizeBy",
        seeAlso:[],
        params:[
            {description:"amount to resize horizontally (may be negative)", optional:true, 
             name:"deltaX",defaultValue:null, type:"number"},
            {description:"amount to resize vertically (may be negative)", optional:true, name:"deltaY", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"whether the component actually changed size", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('resize')}"],
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Array.first":{
        ref:"method:Array.first",
        flags:"",
        description:" Return the first item in this list\n\n",
        name:"first",
        seeAlso:[],
        returns:{description:"first item in the list", type:"any"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:RestDataSource.removeDataURL":{
        ref:"attr:RestDataSource.removeDataURL",
        flags:"IR",
        description:"dataURL for fetch type operations",
        name:"removeDataURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:FormItem.suppressValueIcon":{
        ref:"attr:FormItem.suppressValueIcon",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is set, this property may be set to prevent the value\n icons from showing up next to the form items value",
        name:"suppressValueIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:RPCRequest.serverOutputAsString":{
        ref:"attr:RPCRequest.serverOutputAsString",
        flags:"IRWA",
        description:"Setting this flag makes the body of the HTTP response available as a String in the\n ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} as ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}.  This means that you can, for\n example, load the contents of static files off your webserver into a string for processing\n on the client with no server support.  The ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')} must be in the same\n domain as the current page for this to work.\n <p>\n This feature relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.\n <p>\n Generally this API is used for either ${isc.DocUtils.linkForRef('group:nonJavaBackend','non-Java backends')} \n or for advanced usage such as content that requires processing before it can be used in\n SmartClient components (such as client-side web scraping).  Note that SmartClient provides\n higher-level APIs for loading common types of data, see eg ${isc.DocUtils.linkForRef('class:HTMLFlow')} for HTML content,\n ${isc.DocUtils.linkForRef('class:ViewLoader')} for loading SmartClient components, ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXML')} for loading\n XML, ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} for loading <a href='http://www.json.org/' onclick=\"window.open('http://www.json.org/');return false;\">JSON</a>, and\n ${isc.DocUtils.linkForRef('class:DataSource')} for loading structured data in various formats.",
        name:"serverOutputAsString",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "object:groupNode":{
        methods:[],
        ref:"object:groupNode",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/ListGrid"],
        attrs:["attr:groupNode.groupMembers", "attr:groupNode.groupTitle", "attr:groupNode.groupValue"],
        description:"An auto-generated subclass of ${isc.DocUtils.linkForRef('object:TreeNode')} representing the group nodes\n in a grouped listgrid.",
        name:"groupNode",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        type:"object"
    },
    "method:Canvas.disable":{
        ref:"method:Canvas.disable",
        flags:"",
        description:" Disables this widget and any children and peers of this widget.\n",
        name:"disable",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "attr:ComboBoxItem.filterWithValue":{
        ref:"attr:ComboBoxItem.filterWithValue",
        flags:"RA",
        description:"Read-only property set by the ComboBoxItem to indicate whether we should use the \n current typed-in value as part of the filter criteria returned by \n ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.  You can check this flag in order to\n mimic the ComboBoxItem's default behavior if you provide a custom implementation of\n <code>getPickListFilterCriteria()</code>.",
        name:"filterWithValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"varies",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "classAttr:RPCManager.defaultPrompt":{
        ref:"classAttr:RPCManager.defaultPrompt",
        flags:"IRW",
        description:"If showPrompt is enabled for a given transaction, this is the defaultPrompt to be shown\n to the user in a modal dialog while the transaction occurs.\n May be overridden at the request level via ${isc.DocUtils.linkForRef('attr:RPCRequest.prompt')}.<br>\n More targetted default prompts are also supported for certain code-paths. See the following \n set of properties for details:<ul>\n <li>${isc.DocUtils.linkForRef('classAttr:RPCManager.removeDataPrompt')}</li>\n <li>${isc.DocUtils.linkForRef('classAttr:RPCManager.saveDataPrompt')}</li>\n <li>${isc.DocUtils.linkForRef('classAttr:RPCManager.fetchDataPrompt')}</li>\n </ul>",
        name:"defaultPrompt",
        seeAlso:[
            {ref:"classAttr:RPCManager.showPrompt", description:null},
            {ref:"classAttr:RPCManager.promptStyle", description:null},
            {ref:"classAttr:RPCManager.promptCursor", description:null},
            {ref:"attr:RPCRequest.showPrompt", description:null},
            {ref:"attr:RPCRequest.prompt", description:null},
            {ref:"attr:RPCRequest.promptStyle", description:null},
            {ref:"attr:RPCRequest.promptCursor", description:null}
        ],
        valueType:"string",
        defaultValue:"\"Contacting Server...\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["rpcPrompt", "i18nMessages"]
    },
    "group:mouseEvents":{
        ref:"group:mouseEvents",
        refs:["classMethod:EventHandler.getTarget", "classMethod:EventHandler.getDragTarget", 
         "classMethod:EventHandler.getX","classMethod:EventHandler.getY", "classMethod:EventHandler.leftButtonDown", 
         "classMethod:EventHandler.rightButtonDown"],
        name:"mouseEvents",
        seeAlso:[],
        type:"group"
    },
    "attr:Splitbar.vSrc":{
        ref:"attr:Splitbar.vSrc",
        flags:"IR",
        description:"Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true and \n ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset.",
        name:"vSrc",
        seeAlso:[
            {ref:"attr:StretchImg.src", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["appearance"]
    },
    "method:StatefulCanvas.deselect":{
        ref:"method:StatefulCanvas.deselect",
        flags:"",
        description:" Deselect this object.\n",
        name:"deselect",
        seeAlso:[],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "method:CubeGrid.deselectFacetValue":{
        ref:"method:CubeGrid.deselectFacetValue",
        flags:"",
        description:"\n  deselect the header for a given facet value\n\n  <br><i>methodType</i> action\n",
        name:"deselectFacetValue",
        seeAlso:[],
        params:[
            {description:"ID of facet", optional:false, name:"facetId", defaultValue:null, type:"string"},
            {description:"ID of facetValue to select", optional:false, name:"facetValueId", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:TabSet.tabIconClick":{
        ref:"method:TabSet.tabIconClick",
        flags:"",
        description:" Method fired when the user clicks the icon for a tab, as specified via ${isc.DocUtils.linkForRef('attr:Tab.icon')}.<br>\n Default behavior will fire <code>icon.click()</code> if specified, with a single parameter \"tab\".\n",
        name:"tabIconClick",
        seeAlso:[],
        params:[
            {description:"with click handler being fired", optional:false, name:"tab", 
             defaultValue:null,type:"Tab"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:TextAreaItem.height":{
        ref:"attr:TextAreaItem.height",
        flags:"IRW",
        description:"default height of this item",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["appearance"]
    },
    "method:GridRenderer.setColumnWidths":{
        ref:"method:GridRenderer.setColumnWidths",
        flags:"",
        description:"\n Sets the width of all columns in the grid.\n\n",
        name:"setColumnWidths",
        seeAlso:[],
        params:[
            {description:"array of new widths - one for each column.", optional:false, 
             name:"newWidths",defaultValue:null, type:"Array"}
        ],
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "attr:RichTextItem.startRow":{
        ref:"attr:RichTextItem.startRow",
        flags:"IRW",
        description:"By default RichTextItems take up an entire row",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RichTextItem"
    },
    "attr:DataSource.inheritsFrom":{
        ref:"attr:DataSource.inheritsFrom",
        flags:"IR",
        description:"ID of another DataSource this DataSource inherits its ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from.\n <P>\n Local fields (fields defined in this DataSource) are added to inherited fields \n to form the full set of fields.  Fields with the same name are merged in the same way\n that ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','databound component fields')} are merged with\n DataSource fields.\n <P>\n The default order of the combined fields is new local fields first (including any fields\n present in the parent DataSource which the local DataSource re-declares), then parent\n fields.  You can set ${isc.DocUtils.linkForRef('attr:DataSource.useParentFieldOrder')} to instead use the parent's field\n order, with new local fields appearing last.  You can set ${isc.DocUtils.linkForRef('attr:DataSource.showLocalFieldsOnly')} to\n have all non-local fields hidden.\n <P>\n Note that <b>only fields are inherited</b> - other properties such as dataURL and\n dataFormat are not.\n <P>\n This feature can be used for:\n <ul>\n <li>creating a customized view (eg, only certain fields shown) which will be used by\n multiple ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')}.\n <li>adding presentation-specific attributes to metadata that has been automatically\n derived from ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','XML Schema')} or other metadata formats\n <li>modelling object subclassing and extension in server-side code and storage systems\n <li>modelling relational database joins, and the equivalents in other systems\n <li>creating hooks for others to customize your application in a maintainable way.  For\n example, if you have a dataSource \"employee\", you can create a dataSource\n \"customizedEmployee\" which inherits from \"employee\" but does not initially define any\n fields, and bind all ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')} to\n \"customizedEmployee\".  Customizations of fields (including appearance changes, field\n order, new fields, hiding of fields, and custom validation rules) can be added to\n \"customizedEmployee\", so that they are kept separtely from the original field data and\n have the best possible chance of working with future versions of the \"employee\"\n dataSource.\n </ul>",
        name:"inheritsFrom",
        seeAlso:[],
        valueType:"DataSource ID",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('schemaChaining')}"],
        definingClass:"class:DataSource",
        groups:["fields"]
    },
    "attr:FacetValue.isMinimizeValue":{
        ref:"attr:FacetValue.isMinimizeValue",
        flags:"IR",
        description:"Used to determine which facetValue is to be shown when the facet is minimized.\n <P>\n See ${isc.DocUtils.linkForRef('attr:CubeGrid.canMinimizeFacets')}.",
        name:"isMinimizeValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "method:DynamicForm.saveData":{
        ref:"method:DynamicForm.saveData",
        flags:"",
        description:"\n Validate and then save the form's current values to the ${isc.DocUtils.linkForRef('class:DataSource')} this form is\n bound to.\n <p>\n If client-side validators are defined, they are executed first, and if any errors are\n found the save is aborted and the form will show the errors.\n <p>\n If client-side validation passes, a ${isc.DocUtils.linkForRef('class:DSRequest')} will be sent, exactly as though\n ${isc.DocUtils.linkForRef('method:DataSource.addData')} or ${isc.DocUtils.linkForRef('method:DataSource.updateData')} had been called with \n ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','the form's values')} as data.  The\n ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')} will be either \"update\" or \"add\" depending\n on whether values were initially provided via <code>editRecord()</code> or\n <code>editNew()</code>.\n <P>\n On either a client-side or server-side validation failure, validation errors will be\n displayed in the form.  Visible items within a DynamicForms will be redrawn to display\n errors. Validation failure occuring on hidden items, or DataSource fields with no \n associated form items may be handled via ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}\n or ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.validationURL','validationURL')} can be set to do validation against a\n different URL from where the form will ultimately save, as part of an incremental\n upgrade strategy for Struts and Struts-like applications.\n\n",
        name:"saveData",
        seeAlso:[],
        params:[
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('addOperation')}"],
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "method:SectionStack.setSectionTitle":{
        ref:"method:SectionStack.setSectionTitle",
        flags:"",
        description:" Changes the title of a SectionHeader.\n\n",
        name:"setSectionTitle",
        seeAlso:[],
        params:[
            {description:"ID or index of the section whose title you want to change", optional:false, 
             name:"section",defaultValue:null, type:"String or Number"},
            {description:"new title for the SectionHeader", optional:false, name:"newTitle", 
             defaultValue:null,type:"String"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:ServerObject.lookupStyle":{
        ref:"attr:ServerObject.lookupStyle",
        flags:"IR",
        description:"Specifies the mechanism for locating the class instance on which to invoke the method.\n Valid values are as follows:\n <ul>\n <li>\"spring\": For use with the <a href='http://springframework.com' onclick=\"window.open('http://springframework.com');return false;\">Spring framework</a>.\n ${isc.DocUtils.linkForRef('attr:ServerObject.bean')} contains the name of the bean to invoke.  Which application context\n is used can be configured via web.xml (see the example web.xml in the SDK).\n <li>\"new\": A new instance of the class specified by ${isc.DocUtils.linkForRef('attr:ServerObject.className')} will be\n created and the DMI method will be invoked on that instance (unless the specified method is\n static, in which case no instance is created, but the class specified by\n ${isc.DocUtils.linkForRef('attr:ServerObject.className')} is still used).\n <li>\"factory\": A custom factory provides the class instance on which the DMI method is to be\n invoked.  In this case, ${isc.DocUtils.linkForRef('attr:ServerObject.className')} specifies the className of the factory\n that will provide the instance on which the DMI method is to be invoked.  The class\n specified by ${isc.DocUtils.linkForRef('attr:ServerObject.className')} must provide exactly one method named\n <code>create</code> that must return the class instance on which you wish the DMI method to\n be invoked.  Like the DMI methods, the <code>create</code> can request a standard set of\n values as arguments.  See ${isc.DocUtils.linkForRef('class:DMI')} for a list of available values.\n <li> \"attribute\": The instance on which the DMI method is to be invoked is looked up in the\n scope defined by ${isc.DocUtils.linkForRef('attr:ServerObject.attributeScope')} via the attribute name specified in\n ${isc.DocUtils.linkForRef('attr:ServerObject.attributeName')}.\n </ul>",
        name:"lookupStyle",
        seeAlso:[
            {ref:"attr:ServerObject.className", description:null},
            {ref:"attr:ServerObject.attributeName", description:null},
            {ref:"attr:ServerObject.attributeScope", description:null}
        ],
        valueType:"\"new\"|\"factory\"|\"attribute\"|\"spring\"",
        defaultValue:"\"new\"",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "attr:RPCRequest.httpHeaders":{
        ref:"attr:RPCRequest.httpHeaders",
        flags:"IRW",
        description:"HTTP headers to send, as a Object mapping Header name -> Header value, eg<br>\n { \"Content-Type\" : \"text/xml\" }\n <P>\n Valid with the xmlHttpRequest ${isc.DocUtils.linkForRef('attr:RPCRequest.transport','transport')} only.",
        name:"httpHeaders",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:ListGridField.validators":{
        ref:"attr:ListGridField.validators",
        flags:"IRW",
        description:"Array of ${isc.DocUtils.linkForRef('class:Validator')} objects for this field.  When the user edits cells in\n this field, these validators will be applied to the edited value.<br>\n Note: for databound listGrids, this property may be specified on the \n ${isc.DocUtils.linkForRef('class:DataSourceField')}, enabling both client and server side validation.",
        name:"validators",
        seeAlso:[
            {ref:"class:Validator", description:null},
            {ref:"attr:ListGridField.required", description:null}
        ],
        valueType:"array of Validator",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dataValidation')}"],
        definingClass:"object:ListGridField",
        groups:["gridValidation"]
    },
    "method:ListGrid.cellContextClick":{
        ref:"method:ListGrid.cellContextClick",
        flags:"",
        description:" Called when a cell receives a contextclick event.\n\n",
        name:"cellContextClick",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('cellClicks')}"],
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "group:eclipseIntegration":{
        ref:"group:eclipseIntegration",
        title:"Eclipse Integration",
        refs:[],
        description:"If you're developing with Eclipse, you can use the SmartClient personality for Eclipse ATF\n    (<a href='http://eclipse.org/atf' onclick=\"window.open('http://eclipse.org/atf');return false;\">Ajax Toolkit Framework</a>).  Here's how to set it up:\n    <p>\n    1. If you haven't already, download and install ATF from \n      <a href='http://www.eclipse.org/atf/downloads/index.php' onclick=\"window.open('http://www.eclipse.org/atf/downloads/index.php');return false;\">http://www.eclipse.org/atf/downloads/index.php</a>.\n      The SmartClient personality has been tested against the ATF 0.1 Milestone Build, but is\n      also known to work with later releases.<p>\n    2. Download the SmartClient personality: \n        <a href='http://smartclient.com/product/SmartClient_ATF_Personality_1.0.zip' onclick=\"window.open('http://smartclient.com/product/SmartClient_ATF_Personality_1.0.zip');return false;\">SmartClient_ATF_Personality_1.0.zip</a><p>\n    3. Unzip the above archive into your eclipse installation directory.  This will create\n    three directories under the plugins directory: <i>com.smartClient.core_1.0.0,\n    com.smartClient.runtime_1.0.0, com.smartClient.ui_1.0.0</i>.<p>\n    4. For the next step, you will need to have downloaded and unzipped a copy of the\n    SmartClient Evaluation SDK, available from\n    <a href='http://smartclient.com/product/download.jsp' onclick=\"window.open('http://smartclient.com/product/download.jsp');return false;\">http://smartclient.com/product/download.jsp</a>.  You can of course also use\n    any other licensed copy of SmartClient.  From the SDK, copy the <i>isomorphic</i>\n    directory from smartclientRuntime into the\n    <i>eclipse/plugins/com.smartClient.runtime_1.0.0/resources</i> directory.\n    <p>\n    You're all set.  When you next start Eclipse, you'll be able to select ATF->SmartClient as\n    a new Project Facet during project creation or add it as a facet to an existing project.\n    You can then create new SmartClient Applications by right-clicking on your project and\n    selecting New->Other->SmartClient->SmartClient Application.  And you'll be able to use the\n    provided snippets to quickly create components.  If you have any problems, please post to\n    the <a href='http://forums.smartclient.com' onclick=\"window.open('http://forums.smartclient.com');return false;\">forums</a>.",
        name:"eclipseIntegration",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.disableHilite":{
        ref:"method:CubeGrid.disableHilite",
        flags:"",
        description:"\n      disable a hilite\n\n      <br><i>methodType</i> action\n",
        name:"disableHilite",
        seeAlso:[],
        params:[
            {description:"ID of hilite to disable", optional:false, name:"hiliteID", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "method:SectionItem.expandSection":{
        ref:"method:SectionItem.expandSection",
        flags:"",
        description:" Expands a section, showing all the items contained within the section.\n",
        name:"expandSection",
        seeAlso:[],
        type:"method",
        definingClass:"class:SectionItem"
    },
    "attr:DynamicForm.saveOnEnter":{
        ref:"attr:DynamicForm.saveOnEnter",
        flags:"IRW",
        description:"If <code>true</code>, when the user hits the Enter key while focussed in a text-item in\n this form, we automatically submit the form to the server using the \n ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} method.",
        name:"saveOnEnter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "type:XMLElement":{
        ref:"type:XMLElement",
        description:"An XMLElement represents one complete XML tag, including any subelements contained between\n the start and end tags.\n <P>\n XMLElement is a native object supplied directly by the browser.  The SmartClient-supported\n interfaces for this object include methods that take an XMLElement as an argument (such as\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}).  If you want to retrieve XML data and display it in a\n SmartClient component, read about ${isc.DocUtils.linkForRef('group:clientDataIntegration','XML Data Binding')}.  To\n extract data as JavaScript Objects from XML, see ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  Direct\n manipulation of XMLElements objects is subject to cross-browser inconsistencies, bugs,\n memory leaks and performance issues.",
        name:"XMLElement",
        seeAlso:[],
        type:"type"
    },
    "attr:DataSourceField.rootValue":{
        ref:"attr:DataSourceField.rootValue",
        flags:"IR",
        description:"For a field that is a foreignKey establishing a tree relationship, what value indicates a\n root-level node.  Defaults to null.",
        name:"rootValue",
        seeAlso:[],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('treeLoadXML')}"],
        definingClass:"class:DataSourceField",
        groups:["dataSourceRelations"]
    },
    "attr:Canvas.canDrop":{
        ref:"attr:Canvas.canDrop",
        flags:"IRWA",
        description:"Indicates that this object can be dropped on top of other widgets. Only valid if \n      canDrag or canDragReposition is true.",
        name:"canDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "classMethod:Page.goBack":{
        ref:"classMethod:Page.goBack",
        flags:"",
        description:" Go back in the browser's history.<br><br>\n\n If the history is empty and the window.opener is set, we assume we're a child window and just\n close the window.\n\n",
        name:"goBack",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "attr:ListGrid.showEmptyMessage":{
        ref:"attr:ListGrid.showEmptyMessage",
        flags:"IRW",
        description:"Indicates whether the text of the emptyMessage property should be displayed if no data is\n available.",
        name:"showEmptyMessage",
        seeAlso:[
            {ref:"attr:ListGrid.emptyMessage", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('emptyGrid')}"],
        definingClass:"class:ListGrid",
        groups:["emptyMessage"]
    },
    "class:DSResponse":{
        methods:[],
        ref:"class:DSResponse",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:DSResponse.clientContext", "attr:DSResponse.data", "attr:DSResponse.status", 
         "attr:DSResponse.errors","attr:DSResponse.startRow", "attr:DSResponse.endRow", "attr:DSResponse.totalRows", 
         "attr:DSResponse.invalidateCache"],
        description:"Response sent by the server in response to a ${isc.DocUtils.linkForRef('class:DSRequest','DataSource request')}.  Contains\n all the properties available on the basic ${isc.DocUtils.linkForRef('class:RPCResponse')}, in addition to the\n properties listed here.",
        name:"DSResponse",
        seeAlso:[],
        type:"class"
    },
    "group:dataType":{
        ref:"group:dataType",
        refs:["attr:DataSourceField.required", "attr:DataSourceField.valueMap", 
         "attr:DataSourceField.validators","attr:DataSourceField.length", "attr:SimpleType.valueMap"],
        name:"dataType",
        seeAlso:[],
        type:"group"
    },
    "attr:TabSet.rightEdgeSizes":{
        ref:"attr:TabSet.rightEdgeSizes",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeSizes</code>, \n <code>rightEdgeSizes</code>, <code>topEdgeSizes</code> and <code>bottomEdgeSizes</code> \n propertes allow the sizes of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"rightEdgeSizes",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:MenuButton.title":{
        ref:"attr:MenuButton.title",
        flags:"IRW",
        description:"Default title for the button.",
        name:"title",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Show Menu\"",
        type:"attr",
        definingClass:"class:MenuButton",
        groups:["i18nMessages"]
    },
    "group:defaults":{
        ref:"group:defaults",
        refs:[],
        name:"defaults",
        seeAlso:[],
        type:"group"
    },
    "method:ActiveXControl.getPluginHandle":{
        ref:"method:ActiveXControl.getPluginHandle",
        flags:"",
        description:"  Returns a handle to the element for this ISC ActiveX control object.\n\n",
        name:"getPluginHandle",
        seeAlso:[],
        type:"method",
        definingClass:"class:ActiveXControl"
    },
    "classMethod:Page.getAppDir":{
        ref:"classMethod:Page.getAppDir",
        flags:"",
        description:" Returns the base URL of the application, which is the page URL minus the last non-directory \n path component.  For example, if the page is loaded from\n <code>http://foo.com/bar/zoo.jsp</code>, appDir will be <code>http://foo.com/bar/</code>.\n <P>\n If other page-wide URLs such as ${isc.DocUtils.linkForRef('classMethod:Page.setIsomorphicDir')} are specified as\n relative paths, they are considered relative to this URL.\n\n",
        name:"getAppDir",
        seeAlso:[],
        returns:{description:"URL for page-specific files.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files"]
    },
    "attr:Layout.members":{
        ref:"attr:Layout.members",
        flags:"IRW",
        getter:["getMembers"],
        description:"An array of canvases that will be contained within this layout. You can set the\n following properties on these canvases (in addition to the standard component\n properties):\n <ul>\n  <li>layoutAlign--specifies the member's alignment along the breadth axis; valid\n  values are \"top\", \"center\" and \"bottom\" for a horizontal layout and \"left\", \"center\"\n  and \"right\" for a vertical layout (see ${isc.DocUtils.linkForRef('attr:Layout.defaultLayoutAlign')} for default\n  implementation.)\n  <li>showResizeBar--set to true to show a resize bar (default is false)\n </ul>\n Height and width settings found on members are interpreted by the Layout according to\n the ${isc.DocUtils.linkForRef('attr:Layout.vPolicy','layout policy')}.",
        name:"members",
        seeAlso:[],
        valueType:"array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout"
    },
    "attr:ListGridRecord.canAcceptDrop":{
        ref:"attr:ListGridRecord.canAcceptDrop",
        flags:"IR",
        description:"When set to <code>false</code>, other records cannot be dropped on (i.e., inserted\n via drag and drop) immediately before this record.",
        name:"canAcceptDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridRecord"
    },
    "attr:TreeGrid.animateFolderSpeed":{
        ref:"attr:TreeGrid.animateFolderSpeed",
        flags:"IRW",
        description:"When animating folder opening / closing, this property designates the speed of the\n animation in pixels shown (or hidden) per second. Takes presidence over the \n ${isc.DocUtils.linkForRef('attr:TreeGrid.animateFolderTime')} property, which allows the developer to specify a\n duration for the animation rather than a speed.",
        name:"animateFolderSpeed",
        seeAlso:[
            {ref:"attr:TreeGrid.animateFolderTime", description:null}
        ],
        valueType:"number",
        defaultValue:"500",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('animateTree')}"],
        definingClass:"class:TreeGrid",
        groups:["animation"]
    },
    "method:ListGrid.resizeField":{
        ref:"method:ListGrid.resizeField",
        flags:"A",
        description:" Resize a particular field to a new width.\n\n",
        name:"resizeField",
        seeAlso:[],
        params:[
            {description:"Number of the field to resize", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"},
            {description:"New width of the field", optional:false, name:"newWidth", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:Flashlet.classID":{
        ref:"attr:Flashlet.classID",
        flags:"IR",
        description:"This attribute specifies the clsid of the outer &lt;object&gt; tag.\n  <p>\n  The default classID is: \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n  <p>",
        name:"classID",
        seeAlso:[],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "classAttr:RPCResponse.STATUS_LOGIN_REQUIRED":{
        ref:"classAttr:RPCResponse.STATUS_LOGIN_REQUIRED",
        flags:"R",
        description:"Indicates that a login is required before this RPCRequest can proceed.",
        name:"STATUS_LOGIN_REQUIRED",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-7",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "attr:DataSourceField.inapplicable":{
        ref:"attr:DataSourceField.inapplicable",
        flags:"IR",
        description:"For use in ${isc.DocUtils.linkForRef('group:componentSchema')}, a field ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom','inherited')} from\n another schema can be redeclared with this property set in order to indicate that the\n property should not be used.\n <P>\n This is primarily used to influence ${isc.DocUtils.linkForRef('group:visualBuilder')}.  For simple type properties,\n this avoids the property appearing in the Component Editor.  \n <P>\n For fields that hold subcomponents, this prevents inappropriate drag and drop.  For example,\n a custom class called <code>MyDialog</code> may automatically create a series of children,\n and not allow arbitrary other children to be added.  In this case, the inherited property\n ${isc.DocUtils.linkForRef('attr:Canvas.children')} should be marked inapplicable in order to prevent arbitrary\n components being dropped onto a <code>MyDialog</code> instance.",
        name:"inapplicable",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentSchema"]
    },
    "group:title":{
        ref:"group:title",
        refs:["attr:FormItem.showTitle", "attr:FormItem.titleOrientation", "attr:FormItem.titleAlign", 
         "attr:FormItem.wrapTitle","attr:FormItem.titleStyle", "attr:FormItem.titleClassName", 
         "attr:FormItem.titleErrorClassName"],
        name:"title",
        seeAlso:[],
        type:"group"
    },
    "classMethod:RPCManager.xmlHttpRequestAvailable":{
        ref:"classMethod:RPCManager.xmlHttpRequestAvailable",
        flags:"",
        description:"\n Returns true if the XMLHttpRequest object is available, false otherwise.  See\n ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information on when XMLHttpRequest parser may\n not available and what features are\n impacted as a result.\n\n",
        name:"xmlHttpRequestAvailable",
        seeAlso:[],
        returns:{description:"true if XMLHttpRequest is available, false otherwise.", type:"boolean"},
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "method:CubeGrid.removeFacet":{
        ref:"method:CubeGrid.removeFacet",
        flags:"",
        description:"\n Remove a facet from the current view, using a fixed value from that facet.  For example, remove\n the \"months\" facet from the view, collapsing to just January, or total for all months.\n\n",
        name:"removeFacet",
        seeAlso:[
            {ref:"method:CubeGrid.addFacet", description:null},
            {ref:"attr:CubeGrid.fixedFacetValues", description:null}
        ],
        params:[
            {description:"facetId to remove", optional:false, name:"facetId", defaultValue:null, 
             type:"id"},
            {description:"New fixed value for the facet, to be added to cubeGrid.fixedFacetValues.  Default is the\n     rollup value for the facet.", 
             optional:true,name:"fixedFacetValueId", defaultValue:null, type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "type:clickMaskMode":{
        ref:"type:clickMaskMode",
        values:[
            {description:"When the mask recieves a click, it will fire its click action,                   and cancel the event, leaving the clickMask up.", 
             value:"\"hard\""},
            {description:"When the mask recieves a click, it will fire its click action,                   then dismiss the clickMask and allow the event to proceed to its target.", 
             value:"\"soft\""}
        ],
        description:"Passed as a parameter to ${isc.DocUtils.linkForRef('method:Canvas.showClickMask')} to determine the masks behavior\n when clicked.",
        name:"clickMaskMode",
        seeAlso:[],
        type:"type",
        groups:["clickMask"]
    },
    "attr:WSRequest.data":{
        ref:"attr:WSRequest.data",
        flags:"IR",
        description:"Data to be serialized to XML to form the SOAP body.",
        name:"data",
        seeAlso:[],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:WSRequest"
    },
    "type:Encoding":{
        ref:"type:Encoding",
        values:[
            {description:"normal form encoding (\"application/x-www-form-urlencoded\")", 
             value:"DynamicForm.NORMAL"},
            {description:"form encoding for forms with INPUT file elements, that is, forms                              that upload files (\"multipart/form-data\")", 
             value:"DynamicForm.MULTIPART"}
        ],
        description:"Form encodying types - these translate to Form ENCTYPE parameters.",
        name:"Encoding",
        seeAlso:[],
        type:"type",
        groups:["submitting"]
    },
    "attr:Canvas.accessKey":{
        ref:"attr:Canvas.accessKey",
        flags:"IRWA",
        description:"If specified this governs the accessKey for the widget.\n This should be set to a character - when a user hits Alt+[accessKey], or in Mozilla\n Firefox 2.0 and above, Shift+Alt+[accessKey], focus will be given to the widget in\n question.",
        name:"accessKey",
        setter:["setAccessKey"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "method:ListGrid.getRowErrors":{
        ref:"method:ListGrid.getRowErrors",
        flags:"",
        description:"  Returns any currently stored validation errors for this row in the following format:<br>\n  &nbsp;&nbsp;<code>{fieldName:[array of error messages], ...}</code>\n",
        name:"getRowErrors",
        seeAlso:[
            {ref:"method:ListGrid.getCellErrors", description:null}
        ],
        params:[
            {description:"index of row to check for validation errors.", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"object showing validation error arrays by field for the row passed in                       - if no validation errors stored for the row, null is returned.", 
         type:"object"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:DataBoundComponent.showComplexFields":{
        ref:"attr:DataBoundComponent.showComplexFields",
        flags:"IRWA",
        description:"Whether to show fields of of non-atomic type when when a DataBoundComponent is given a\n DataSource but no <code>component.fields</code>.\n <p>\n If true, the component will show fields that declare a complex type, for example, a\n field 'shippingAddress' that declares type 'Address', where 'Address' is the ID of a\n DataSource that declares the fields of a shipping address (city, street name, etc).\n <P>\n Such fields may need custom formatters or editors in order to create a usable interface,\n for example, an Address field in a ListGrid might use a custom formatter to combine the\n relevant fields of an address into one column, and might use a pop-up dialog for\n editing.",
        name:"showComplexFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "method:PickList.getValueFieldName":{
        ref:"method:PickList.getValueFieldName",
        flags:"",
        description:" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.\n If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.\n",
        name:"getValueFieldName",
        seeAlso:[],
        returns:{description:"fieldName to use a \"value field\" in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}", 
         type:"string"},
        type:"method",
        definingClass:"interface:PickList",
        groups:["display_values"]
    },
    "method:SelectItem.defaultDynamicValue":{
        ref:"method:SelectItem.defaultDynamicValue",
        flags:"A",
        description:" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:SelectItem.defaultValue')} when no value is\n provided for this item. To default to the first option use\n ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} instead.\n",
        name:"defaultDynamicValue",
        seeAlso:[],
        type:"method",
        definingClass:"class:SelectItem"
    },
    "method:DynamicForm.setAction":{
        ref:"method:DynamicForm.setAction",
        flags:"",
        description:" Sets the ${isc.DocUtils.linkForRef('attr:DynamicForm.action','action')} for this form.\n",
        name:"setAction",
        seeAlso:[],
        params:[
            {description:"New action URL", optional:false, name:"action", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:DynamicForm"
    },
    "method:ListGrid.chartColumn":{
        ref:"method:ListGrid.chartColumn",
        flags:"",
        description:" Chart a single column of data, with each cell value labelled by a value from another\n column.\n\n",
        name:"chartColumn",
        seeAlso:[],
        params:[
            {description:"name of the ListGridField to use as a data", optional:false, 
             name:"dataColumn",defaultValue:null, type:"String"},
            {description:"name of the ListGridField to use as labels for data", optional:false, 
             name:"labelColumn",defaultValue:null, type:"String"},
            {description:"properties to pass to the created chart", optional:true, 
             name:"chartProperties",defaultValue:null, type:"Chart Properties"}
        ],
        returns:{description:"created Chart instance", type:"Chart"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:ListGrid.isSeparatorProperty":{
        ref:"attr:ListGrid.isSeparatorProperty",
        flags:"IRW",
        description:"If <code>record[this.isSeparatorProperty]</code> is set for some record, the \n record will be displayed as a simple separator row.",
        name:"isSeparatorProperty",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"isSeparator\"",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "method:Number.stringify":{
        ref:"method:Number.stringify",
        flags:"",
        description:"\n Return this number as a string padded out to digits length.\n\n",
        name:"stringify",
        seeAlso:[],
        params:[
            {description:"Number of digits to pad to.  (Default is 2)", optional:true, name:"digits", 
             defaultValue:"2",type:"number"}
        ],
        returns:{description:"Padded string version of the number", type:"string"},
        type:"method",
        examples:["var str = myNumberVar.stringify(2);"],
        definingClass:"object:Number",
        groups:["stringProcessing"]
    },
    "attr:TreeGrid.customIconProperty":{
        ref:"attr:TreeGrid.customIconProperty",
        flags:"IRW",
        description:"This property allows the developer to customize the icon displayed next to a node.\n Set <code>node[grid.customIconProperty]</code> to the URL of the desired icon to display and\n it will be shown instead of the standard ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')} for this row.<br>\n Note that if ${isc.DocUtils.linkForRef('attr:TreeGrid.showCustomIconOpen')} and/or ${isc.DocUtils.linkForRef('attr:TreeGrid.showCustomIconDrop')} \n is true for this grid, customized icons for folder nodes will be appended with the \n ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} or ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} suffixes on state change \n as with the standard ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for this treeGrid.  Also note that for\n custom folder icons, the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} will never be appened.",
        name:"customIconProperty",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"icon\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "method:Img.setSrc":{
        ref:"method:Img.setSrc",
        flags:"",
        description:" Changes the URL of this image and redraws it.\n <P>\n Does nothing if the src has not changed - if <code>src</code> has not changed but other\n state has changed such that the image needs updating, call ${isc.DocUtils.linkForRef('method:Img.resetSrc')} instead.\n\n",
        name:"setSrc",
        seeAlso:[],
        params:[
            {description:"new URL for the image", optional:false, name:"URL", defaultValue:null, 
             type:"URL"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('loadImages')}"],
        definingClass:"class:Img",
        groups:["appearance"]
    },
    "attr:FormItem.align":{
        ref:"attr:FormItem.align",
        flags:"IRW",
        description:"Alignment of this item in its cell",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.LEFT",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:FormItem.change":{
        ref:"method:FormItem.change",
        flags:"",
        description:" Called when a FormItem's value is about to change as the result of user interaction.  This\n method fires after the user performed an action that would change the value of this field,\n but before the element itself is changed.  Returning false cancels the change.\n <p>\n Note that if you ask the form for the current value in this handler, you will get the old\n value because the change has not yet been commited.  The new value is available as a\n parameter to this method.\n\n",
        name:"change",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"The new value of the form item", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"The previous value of the form item", optional:false, name:"oldValue", 
             defaultValue:null,type:"any"}
        ],
        returns:{description:"In your handler, return false to cancel the change, true to allow the change", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('fieldEnableDisable')}"],
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "method:Tree.openAll":{
        ref:"method:Tree.openAll",
        flags:"",
        description:"\n Open all nodes under a particular node.\n\n",
        name:"openAll",
        seeAlso:[],
        params:[
            {description:"node from which to open folders (if not specified, the root                              node is used)", 
             optional:true,name:"node", defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('parentLinking')}"],
        definingClass:"class:Tree"
    },
    "attr:BlurbItem.clipValue":{
        ref:"attr:BlurbItem.clipValue",
        flags:"IRW",
        description:"If true, text that exceeds the specified size of the form item will be clipped",
        name:"clipValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:BlurbItem",
        groups:["appearance"]
    },
    "method:Dialog.closeClick":{
        ref:"method:Dialog.closeClick",
        flags:"",
        description:" Handles a click on the close button of this window. The default implementation\n hides the window and returns false to cancel bubbling.  Override this method if you want\n other actions to be taken.\n",
        name:"closeClick",
        seeAlso:[],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "attr:Canvas.disabledCursor":{
        ref:"attr:Canvas.disabledCursor",
        flags:"IRWA",
        description:"Specifies the cursor image to display when the mouse pointer is\n      over this widget if this widget is disabled. It corresponds to the CSS cursor \n      attribute. See Cursor type for different cursors.",
        name:"disabledCursor",
        seeAlso:[],
        valueType:"Cursor",
        defaultValue:"Canvas.DEFAULT",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["cues"]
    },
    "group:CompoundFormItem_skinning":{
        ref:"group:CompoundFormItem_skinning",
        refs:[],
        description:"When skinning basic FormItems like SelectItem and TextItem, consider that compound form\n items like DateItem and ComboBox reuse simpler items like SelectItem and TextItem, so adding\n a border to SelectItem would also apply a border to each select item within DateItem.<br>\n To avoid such side-effects, if you want to add styling to all SelectItems used in your \n application, you can create an application-specific subclass like MySelectItem and apply \n properties there.<br>",
        name:"CompoundFormItem_skinning",
        seeAlso:[],
        type:"group"
    },
    "attr:DynamicForm.showErrorIcons":{
        ref:"attr:DynamicForm.showErrorIcons",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "classAttr:Validator.mustBeShorterThan":{
        ref:"classAttr:Validator.mustBeShorterThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>lengthRange</code> type validator\n returns false becaues the value passed in has more than <code>validator.max</code> characters.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeShorterThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be less than ${max} characters\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:Array.sortByProperty":{
        ref:"method:Array.sortByProperty",
        flags:"",
        description:" Sort a list of objects by a given property of each item.\n <P>\n The optional normalizer, if passed as a function, is called for each item in the List, and\n should return whatever value should be used for sorting, which does not have to agree with\n the property value. By passing a normalizer function you can achieve any kind of sorting\n you'd like, including sorting by multiple properties.\n <P>\n NOTE: string sort is case INsensitive by default\n\n",
        name:"sortByProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to sort by", optional:false, name:"property", 
             defaultValue:null,type:"string"},
            {description:"true == sort ascending, false == sort descending", optional:false, name:"up", 
             defaultValue:null,type:"boolean"},
            {description:"May be specified as a function, with signature \n              <code>normalize(item, propertyName, context)</code>, where <code>item</code> is\n              a pointer to the item in the array, <code>propertyName</code> is the \n              property by which the array is being sorted, and <code>context</code> is the\n              arbitrary context passed into this method. Normalizer function should return\n              the value normalized for sorting.<br>\n              May also be specified as a ValueMap which maps property values to sortable values.", 
             optional:true,name:"normalizer", defaultValue:null, type:"function or ValueMap"},
            {description:"Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function", 
             optional:true,name:"context", defaultValue:null, type:"any"}
        ],
        returns:{description:"the list itself", type:"List"},
        type:"method",
        definingClass:"object:Array",
        groups:["sorting"]
    },
    "type:DragDataAction":{
        ref:"type:DragDataAction",
        values:[
            {description:"Don't do anything, resulting in the same data being in both lists.", 
             value:"\"none\""},
            {description:"Copy the data leaving the original in our list.", value:"ListGrid.COPY"},
            {description:"Remove the data from this list so it can be moved into the other list.", 
             value:"ListGrid.MOVE"}
        ],
        description:"What do we do with data that's been dropped into another list?",
        name:"DragDataAction",
        seeAlso:[],
        type:"type",
        groups:["drag"]
    },
    "method:ResultSet.invalidateCache":{
        ref:"method:ResultSet.invalidateCache",
        flags:"A",
        description:" Manually invalidate this ResultSet's cache.\n <P>\n Generally a ResultSet will observe and incorporate updates to the DataSource that provides it's\n records, but when this is not possible, <code>invalidateCache()</code> allows manual cache\n invalidation.\n <P>\n <code>invalidateCache()</code> fires <code>dataChanged()</code>, which may cause components which\n as using this ResultSet to request new data for display, triggering server fetches.\n",
        name:"invalidateCache",
        seeAlso:[],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:Menu.showContextMenu":{
        ref:"method:Menu.showContextMenu",
        flags:"",
        description:" Show this menu as a context menu, that is, immediately adjacent to the current mouse position.\n\n",
        name:"showContextMenu",
        seeAlso:[],
        returns:{description:"false == stop processing this event", type:"boolean"},
        type:"method",
        definingClass:"class:Menu",
        groups:["visibility"]
    },
    "attr:Window.hiliteHeaderSrc":{
        ref:"attr:Window.hiliteHeaderSrc",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Window.showHeaderBackground')} is true, this governs the URL of the image to \n use in the header's highlighted state when the window is ${isc.DocUtils.linkForRef('method:Window.flash','flashed')}",
        name:"hiliteHeaderSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]Window/headerGradient_hilite.gif\" | null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:GridRenderer.showHover":{
        ref:"attr:GridRenderer.showHover",
        flags:"RW",
        description:"If true, and canHover is also true, when the user hovers over a cell, hover text will pop up\n next to the mouse.  The contents of the hover is determined by ${isc.DocUtils.linkForRef('method:GridRenderer.cellHoverHTML')}.",
        name:"showHover",
        seeAlso:[
            {ref:"attr:GridRenderer.canHover", description:null},
            {ref:"method:GridRenderer.cellHoverHTML", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:GridRenderer.cellContextClick":{
        ref:"method:GridRenderer.cellContextClick",
        flags:"A",
        description:" Called when a cell receives a contextclick event.\n\n",
        name:"cellContextClick",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "class:ValidatorTypes":{
        methods:[],
        ref:"class:ValidatorTypes",
        classAttrs:["classAttr:ValidatorTypes.isBoolean", "classAttr:ValidatorTypes.isString", 
         "classAttr:ValidatorTypes.isInteger","classAttr:ValidatorTypes.isFloat", "classAttr:ValidatorTypes.requiredIf", 
         "classAttr:ValidatorTypes.matchesField","classAttr:ValidatorTypes.isOneOf", "classAttr:ValidatorTypes.integerRange", 
         "classAttr:ValidatorTypes.lengthRange","classAttr:ValidatorTypes.contains", "classAttr:ValidatorTypes.doesntContain", 
         "classAttr:ValidatorTypes.substringCount","classAttr:ValidatorTypes.regexp", "classAttr:ValidatorTypes.mask", 
         "classAttr:ValidatorTypes.dateRange","classAttr:ValidatorTypes.floatRange", "classAttr:ValidatorTypes.floatPrecision"],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Validator"],
        attrs:[],
        description:"The set of standard validator types available on all fields.<br>\n  To make use of some standard validator type for a field in a DataSource, or \n  DynamicForm instance, specify the <code>validators</code> property to an array \n  containing a validator definition where the <code>type</code> property is set to \n  the appropriate type.  \n  A custom error message can be specified for any validator type by setting the\n  <code>errorMessage</code> property on the validator definition object, and some\n  validator types make use of additional properties on the validator definition \n  object such as <code>max</code> or <code>min</code>.<br>\n  For example, to make use of the <code>integerRange</code> validator type:<br><br><code>\n  &nbsp;&nbsp;field:{<br>\n  &nbsp;&nbsp;&nbsp;&nbsp;validators:[<br>\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type:\"integerRange\", min:1, max:100}<br>\n  &nbsp;&nbsp;&nbsp;&nbsp;]<br>\n  &nbsp;&nbsp;}\n  </code><br><br>",
        name:"ValidatorTypes",
        seeAlso:[],
        type:"class"
    },
    "method:GridRenderer.cellSelectionChanged":{
        ref:"method:GridRenderer.cellSelectionChanged",
        flags:"A",
        description:" Called when (cell-based) selection changes within this grid.\n\n",
        name:"cellSelectionChanged",
        seeAlso:[],
        params:[
            {description:"Array of cells whos selected state was modified.", optional:false, 
             name:"cellList",defaultValue:null, type:"array"}
        ],
        returns:{description:"Returning false will prevent the GridRenderer styling from being updated                      to reflect the selection change.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["selection"]
    },
    "method:GridRenderer.rowHover":{
        ref:"method:GridRenderer.rowHover",
        flags:"A",
        description:" Called when the mouse hovers over a row if this.canHover is true. \n  Returning false will suppress the hover text from being shown if this.showHover is true.\n\n",
        name:"rowHover",
        seeAlso:[
            {ref:"attr:GridRenderer.canHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event (default behavior of showing the hover)", 
         type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:ListGrid.shrinkForFreeze":{
        ref:"attr:ListGrid.shrinkForFreeze",
        flags:"IRWA",
        description:"If this list grid is showing any ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','frozen')} fields, and a horizontal\n scrollbar is visible at the bottom of the liquid columns, should an equivalent scrollbar gap\n be left visible below the frozen columns?<br>\n Note that if set to <code>true</code> any backgroundColor or border applied to the ListGrid\n will show up below the bottom row of the frozen column(s).",
        name:"shrinkForFreeze",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["frozenFields"]
    },
    "method:Date.getShortMonthName":{
        ref:"method:Date.getShortMonthName",
        flags:"",
        description:" Return the abbreviated (up to 3 chars) name of the month for this date (Jan, Feb, etc)\n To modify the value returned by this method, set ${isc.DocUtils.linkForRef('classAttr:Date.shortMonthNames')}\n",
        name:"getShortMonthName",
        seeAlso:[],
        params:[
            {description:"Number of characters to return (Defaults to 3, can't be                                  longer than 3)", 
             optional:false,name:"length", defaultValue:null, type:"number"}
        ],
        returns:{description:"Abbreviated month name (3 character string)", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:ListGridField.frozen":{
        ref:"attr:ListGridField.frozen",
        flags:"IR",
        description:"Whether this field should be \"frozen\" for the purposes of horizontal scrolling.  See\n ${isc.DocUtils.linkForRef('group:frozenFields')}.",
        name:"frozen",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["frozenFields"]
    },
    "method:Canvas.setBackgroundImage":{
        ref:"method:Canvas.setBackgroundImage",
        flags:"",
        description:"			Sets the background to an image file given by newImage. This URL should be given as a\n          string relative to the image directory for the page (./images by default).\n",
        name:"setBackgroundImage",
        seeAlso:[],
        params:[
            {description:"new URL (local to Page image directory) for background image", 
             optional:false,name:"newImage", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:Canvas.setPadding":{
        ref:"method:Canvas.setPadding",
        flags:"",
        description:" Set the CSS padding of this component, in pixels.  Padding provides space between the border\n and the component's contents.\n <P>\n This property sets the same thickness of padding on every side.  Differing per-side\n padding can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.\n <P>\n",
        name:"setPadding",
        seeAlso:[],
        params:[
            {description:"new padding in pixels", optional:false, name:"newPadding", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:StretchImgButton.setAutoFit":{
        ref:"method:StretchImgButton.setAutoFit",
        flags:"",
        description:" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn\n autoFit on or off. When autoFit is set to <code>false</code>, canvas will be resized to\n it's previously specified size.\n",
        name:"setAutoFit",
        seeAlso:[],
        params:[
            {description:"New autoFit setting.", optional:false, name:"autoFit", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton"
    },
    "attr:ListGrid.titleField":{
        ref:"attr:ListGrid.titleField",
        flags:"IRW",
        getter:["getTitleField"],
        description:"Best field to use for a user-visible title for an individual record from this grid.\n If ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is non null, this property may be specified on the \n dataSource instead.\n <p>\n If not explicitly set, titleField looks for fields named \"title\", \"name\", and \"id\" \n in that order.  If a field exists with one of those names, it becomes the titleField.  \n If not, then the first field is designated as the titleField.",
        name:"titleField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "attr:DynamicForm.hiliteRequiredFields":{
        ref:"attr:DynamicForm.hiliteRequiredFields",
        flags:"IRW",
        description:"Indicates whether the titles of required items in this form should use the special\n prefix and suffix specified by the next two properties, instead of the standard\n prefix and suffix.",
        name:"hiliteRequiredFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "attr:ListGridField.align":{
        ref:"attr:ListGridField.align",
        flags:"IRW",
        description:"Horizontal alignment for field. By default this property effects both the column header\n and the cells in this column, but a separate alignment for cells may be specified via\n ${isc.DocUtils.linkForRef('attr:ListGridField.cellAlign')}.\n <P>\n Valid options are <code>\"left\"</code>, <code>\"right\"</code> or <code>\"center\"</code>.\n If unset, fields will default to being left-aligned. If this field is editable, the\n alignment of cells in the body will also be reflected in any editors for the field.",
        name:"align",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "attr:Canvas.mouseStillDownDelay":{
        ref:"attr:Canvas.mouseStillDownDelay",
        flags:"IRWA",
        description:"Amount of time (in msec) between 'mouseStillDown' events for this object",
        name:"mouseStillDownDelay",
        seeAlso:[],
        valueType:"number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["events"]
    },
    "attr:FacetValue.title":{
        ref:"attr:FacetValue.title",
        flags:"IRW",
        description:"user-visible title of this facetValue.  Shown on the field header.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "attr:ListGrid.canReorderRecords":{
        ref:"attr:ListGrid.canReorderRecords",
        flags:"IRW",
        description:"Indicates whether records can be reordered by dragging within this listGrid.",
        name:"canReorderRecords",
        seeAlso:[
            {ref:"attr:ListGridRecord.canDrag", description:null},
            {ref:"attr:ListGridRecord.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragListMove')}", 
         "${isc.DocUtils.linkForExampleId('gridsDragReorder')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "attr:DateChooser.baseWeekdayStyle":{
        ref:"attr:DateChooser.baseWeekdayStyle",
        flags:"IRW",
        description:"Base css style applied to weekdays. Will have \"Over\", \"Selected\" and \"Down\"\n suffix appended as the user interacts with buttons.  Defaults to ${isc.DocUtils.linkForRef('attr:DateChooser.baseButtonStyle')}.",
        name:"baseWeekdayStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:DataSourceField.foreignKey":{
        ref:"attr:DataSourceField.foreignKey",
        flags:"IR",
        description:"Declares that this field holds values that can be matched to values from another DataSource\n field, to create a relationship between records from different DataSources or even records\n within the same DataSource.\n <p>\n The format of <code>foreignKey</code> is\n <code>&lt;dataSourceId&gt;.&lt;fieldName&gt;</code>.<br>\n For a foreignKey within the same dataSource, you can omit the <code>dataSourceId</code>\n and just specify <code>&lt;fieldName&gt;</code>.<br>\n For example, to create a tree relationship within a DataSource:\n <pre>\n   DataSource.create({\n     ID:\"supplyItem\",\n     fields : [\n       {name:\"itemId\", type:\"sequence\", primaryKey:true},\n       {name:\"parentId\", type:\"integer\", foreignKey:\"itemId\"},\n       ...\n     ]\n   });\n </pre>\n <P>\n <code>foreignKey</code> declarations also allow other automatic behaviors by\n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, such as ${isc.DocUtils.linkForRef('method:ListGrid.fetchRelatedData')}.",
        name:"foreignKey",
        seeAlso:[],
        valueType:"String",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["dataSourceRelations"]
    },
    "attr:MenuItem.isSeparator":{
        ref:"attr:MenuItem.isSeparator",
        flags:"IR",
        description:"When set to <code>true</code>, this menu item shows a horizontal separator instead of\n the ${isc.DocUtils.linkForRef('attr:MenuItem.title')} text.  Typically specified as the only property of a menu item,\n since the separator will not respond to mouse events.",
        name:"isSeparator",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"],
        definingClass:"object:MenuItem",
        groups:["menuBasic"]
    },
    "object:Browser":{
        methods:[],
        ref:"object:Browser",
        classAttrs:["classAttr:Browser.isSupported"],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:[],
        description:"Object containing flags indicating basic attributes of the browser.",
        name:"Browser",
        seeAlso:[],
        type:"object"
    },
    "method:TabSet.getTabPane":{
        ref:"method:TabSet.getTabPane",
        flags:"",
        description:" Returns the pane for a given tab.\n\n",
        name:"getTabPane",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, 
             type:"object | number | ID | Tab"}
        ],
        returns:{description:"the tab pane", type:"Canvas"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:GridRenderer.cellOut":{
        ref:"method:GridRenderer.cellOut",
        flags:"A",
        description:" Called when the mouse pointer leaves a cell\n\n",
        name:"cellOut",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:DataSource.applyFilter":{
        ref:"method:DataSource.applyFilter",
        flags:"",
        description:" Returns records in the passed Array that match the provided filter\n ${isc.DocUtils.linkForRef('type:Criteria','criteria')}.\n <P>\n By default:\n <ul>\n <li> any criteria that do not correspond to a DataSource field are ignored\n <li> any null or empty string criteria are ignored\n <li> all other criteria are passed to ${isc.DocUtils.linkForRef('method:DataSource.fieldMatchesFilter')}\n </ul>\n This method is called by ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')} to provide filtering when a\n ResultSet has a complete cache and filtering can be performed client-side.  You may want\n to override this method in order to mimic the filtering behavior that your server performs.\n\n",
        name:"applyFilter",
        seeAlso:[],
        params:[
            {description:"the list of rows", optional:false, name:"data", defaultValue:null, 
             type:"Array"},
            {description:"the filter criteria", optional:false, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"dataSource request properties", optional:false, name:"requestProperties", 
             defaultValue:null,type:"DSRequest Properties"}
        ],
        returns:{description:"the list of matching rows", type:"Array"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "object:Array":{
        methods:["method:Array.get", "method:Array.getLength", "method:Array.isEmpty", "method:Array.first", 
         "method:Array.last","method:Array.indexOf", "method:Array.lastIndexOf", "method:Array.contains", 
         "method:Array.containsAll","method:Array.intersect", "method:Array.equals", "method:Array.getItems", 
         "method:Array.getRange","method:Array.duplicate", "method:Array.set", "method:Array.addAt", 
         "method:Array.removeAt","method:Array.add", "method:Array.addList", "method:Array.setLength", 
         "method:Array.addListAt","method:Array.remove", "method:Array.removeList", "method:Array.dataChanged", 
         "method:Array.getProperty","method:Array.getValueMap", "method:Array.map", "method:Array.setProperty", 
         "method:Array.clearProperty","method:Array.getUniqueItems", "method:Array.findIndex", "method:Array.findNextIndex", 
         "method:Array.find","method:Array.containsProperty", "method:Array.findAll", "method:Array.slide", 
         "method:Array.slideRange","method:Array.makeIndex", "method:Array.sortByProperty", "method:Array.unsort", 
         "method:Array.max","method:Array.min", "method:Array.sum", "method:Array.and", "method:Array.or"],
        ref:"object:Array",
        classAttrs:["classAttr:Array.LOADING"],
        classMethods:["classMethod:Array.compareAscending", "classMethod:Array.compareDescending"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Generic extensions to JavaScript Arrays.  You can call these on any Array.\n <P>\n JavaScript's native Array is retrofitted to support the <code>List</code> API.",
        name:"Array",
        implementsInterfaces:["List"],
        seeAlso:[
            {ref:"interface:List", description:null}
        ],
        type:"object"
    },
    "method:Button.deselect":{
        ref:"method:Button.deselect",
        flags:"",
        description:" Select this object.\n",
        name:"deselect",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["state"]
    },
    "attr:DataBoundComponent.showHiddenFields":{
        ref:"attr:DataBoundComponent.showHiddenFields",
        flags:"IRW",
        description:"Whether to show fields marked <code>hidden:true</code> when a DataBoundComponent is given a\n DataSource but no <code>component.fields</code>.\n <p>\n The <code>hidden</code> property is used on DataSource fields to mark fields that are\n never of meaning to an end user.",
        name:"showHiddenFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "attr:BlurbItem.textBoxStyle":{
        ref:"attr:BlurbItem.textBoxStyle",
        flags:"IRW",
        description:"Base css style for this item.",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"staticTextItem\"",
        type:"attr",
        definingClass:"class:BlurbItem",
        groups:["appearance"]
    },
    "method:Window.setTitle":{
        ref:"method:Window.setTitle",
        flags:"",
        description:"          Sets the title text that appears in the window header; the header will be redrawn\n          if necessary.\n",
        name:"setTitle",
        seeAlso:[],
        params:[
            {description:"new title", optional:false, name:"newTitle", defaultValue:"null", 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:Window",
        groups:["header"]
    },
    "method:TreeGrid.toggleFolder":{
        ref:"method:TreeGrid.toggleFolder",
        flags:"",
        description:"          Opens the folder specified by node if it's closed, and closes it if it's open.\n          TreeGrid will redraw if there's a change in the folder's open/closed state.\n\n",
        name:"toggleFolder",
        seeAlso:[],
        params:[
            {description:"node to toggle", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:ListGrid.generateDoubleClickOnSpace":{
        ref:"attr:ListGrid.generateDoubleClickOnSpace",
        flags:"IRWA",
        description:"If true, when the user navigates to a cell using arrow keys and hits Space, \n the cell will respond to a double click event.",
        name:"generateDoubleClickOnSpace",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "method:TreeGrid.folderClick":{
        ref:"method:TreeGrid.folderClick",
        flags:"",
        description:"\n This method is called when a folder record is clicked on.\n\n",
        name:"folderClick",
        seeAlso:[
            {ref:"method:TreeGrid.nodeClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which folderClick() occurred.", optional:false, 
             name:"viewer",defaultValue:null, type:"TreeGrid"},
            {description:"The folder (record) that was clicked", optional:false, name:"folder", 
             defaultValue:null,type:"TreeNode"},
            {description:"Index of the row where the click occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:StatefulCanvas.align":{
        ref:"attr:StatefulCanvas.align",
        flags:"IRW",
        description:"Horizontal alignment of this component's title.",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["appearance"]
    },
    "object:TreeGridField":{
        methods:[],
        ref:"object:TreeGridField",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/TreeGrid"],
        attrs:["attr:TreeGridField.treeField"],
        description:"An object literal with a particular set of properties used to configure the display of\n and interaction with the columns of a ${isc.DocUtils.linkForRef('class:TreeGrid')}.\n ${isc.DocUtils.linkForRef('class:TreeGrid')} is a subclass of ${isc.DocUtils.linkForRef('class:ListGrid')} and as a result, for all fields except\n the field containing the ${isc.DocUtils.linkForRef('class:Tree')} itself (specified by\n ${isc.DocUtils.linkForRef('attr:TreeGridField.treeField')}, all properties settable on\n ${isc.DocUtils.linkForRef('object:ListGridField')} apply to TreeGridField as well.\n <p>\n This class documents just those properties that are specific to TreeGridFields - see\n ${isc.DocUtils.linkForRef('object:ListGridField')} for the set of inherited properties.",
        name:"TreeGridField",
        seeAlso:[
            {ref:"object:ListGridField", description:null},
            {ref:"attr:TreeGrid.fields", description:null},
            {ref:"method:ListGrid.setFields", description:null}
        ],
        type:"object"
    },
    "attr:DSResponse.endRow":{
        ref:"attr:DSResponse.endRow",
        flags:"R",
        description:"End row of returned server results, when using paged result fetching\n <p>\n Note that startRow and endRow are zero-based - the first record is row zero.",
        name:"endRow",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["paging"]
    },
    "attr:ListGridRecord.linkText":{
        ref:"attr:ListGridRecord.linkText",
        flags:"IRW",
        description:"The HTML to display in this row for fields with fieldType set to link. This overrides\n  ${isc.DocUtils.linkForRef('attr:ListGridField.linkText')}.",
        name:"linkText",
        seeAlso:[
            {ref:"type:ListGridFieldType", description:null},
            {ref:"type:FieldType", description:null},
            {ref:"attr:ListGridField.linkText", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridRecord",
        groups:["display_values"]
    },
    "attr:FormItem.height":{
        ref:"attr:FormItem.height",
        flags:"IRW",
        description:"Default height of this item.",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formLayoutFilling')}"],
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "attr:TreeGrid.connectorImage":{
        ref:"attr:TreeGrid.connectorImage",
        flags:"IR",
        description:"The base filename of the opener icon for the folder node when 'showConnectors' is true\n for this TreeGrid.<br>\n The opener icon is displayed beside the folder icon in the Tree column for all nodes if\n showConnectors is true, and can be used to display both folder-toggling controls and \n hierachy connector lines for the tree.\n Clicking on this icon for a folder with child nodes will toggle the open state of the \n folder.<br>\n The filenames for these icons are assembled from this base filename and the state of the\n node, as follows:<br>\n Assume the connectorImage is set to <code>{baseName}.{extension}</code><br>\n The full set of images to be displayed is:\n <ul>\n <li><code>{baseName}_single[_rtl].{extension}</code>: node with no children, where the \n      previous row in the treeGrid doesn't contain a sibling or parent of this node, and\n      the next row in the treeGrid doesn't contain a sibling of this node.\n <li><code>{baseName}_start[_rtl].{extension}</code>:  node with no children, where the \n      previous row in the treeGrid doesn't contain a sibling or parent of this node.\n <li><code>{baseName}_end[_rtl].{extension}</code>:  node with no children, where the \n      next row in the treeGrid doesn't contain a sibling of this node.\n <li><code>{baseName}_middle[_rtl].{extension}</code>:  node with no children, where the \n      next row in the treeGrid does contain a sibling of this node, and the previous row\n      in the treeGrid contains either this node's parent, or a sibling of this node.\n <li><code>{baseName}_opened_single[_rtl].{extension}</code> opened folder node with \n      children where the previous row in the tree grid is not a sibling of this node, or\n      this node's parent.\n <li><code>{baseName}_opened_end[_rtl].{extension}</code> opened folder node with\n      children where the previous row in the tree grid is either a sibling of this node, \n      or this node's parent.\n <li><code>{baseName}_closed_single[_rtl].{extension}</code> closed folder node with\n      children where the previous row in the treeGrid doesn't contain a sibling or parent \n      of this node, and the next row in the treeGrid doesn't contain a sibling of this node.\n <li><code>{baseName}_closed_start[_rtl].{extension}</code> closed filder with children, where the \n      previous row in the treeGrid doesn't contain a sibling or parent of this node.      \n <li><code>{baseName}_closed_end[_rtl].{extension}</code> closed folder with children, where the \n      next row in the treeGrid doesn't contain a sibling of this node.     \n <li><code>{baseName}_closed_middle[_rtl].{extension}</code> closed folder with children, where the \n      next row in the treeGrid does contain a sibling of this node, and the previous row\n      in the treeGrid contains either this node's parent, or a sibling of this node.    \n </ul>           \n (Note '[_rtl]' means that \"_rtl\" will be attached if isRTL() is true for this widget).",
        name:"connectorImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]connector.gif\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "group:loadXMLSchemaTag":{
        ref:"group:loadXMLSchemaTag",
        title:"&lt;isomorphic:loadXMLSchema&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n Load an XML Schema (.xsd) file and create a ${isc.DocUtils.linkForRef('class:SchemaSet')} object representing the loaded\n definitions. This tag works just like ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}, except it's\n synchronous and the result is server-cacheable.\n <p>\n Note that this JSP tag must be surrounded by &lt;SCRIPT&gt; tags in the JSP because it\n generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be\n used in a JSP that is included from your main page in order to create separate\n cacheability.  For example:<pre>\n     &lt;SCRIPT SRC=\"myXMLSchemaDefinitions.jsp\"&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>url</b><br>\n <i>value format</i>: URL or URI\n <i>default value</i>: NONE\n <p>\n This attribute specifies the URL or URI of the XML Schema file to fetch and translate.  This\n can be either a remote URL - e.g: <code>http://host:port/schemaFile.xsd</code> or a relative\n or absolute URI to a file local to this container - e.g: <code>/some/schemaFile.xsd</code>\n or <code>../some/schemaFile.xsd</code>.  If the url is a remote URL, then an HTTP request\n will be made for the file.  If it is local, it will be fetched from disk using standard\n Servlet APIs (<code>ServletContext.getResourceAsStream()</code>).\n <p>\n <b>cache</b><br>\n <i>value format</i>: Integer (number of seconds to cache result)\n <i>default value</i>: 3600 (1 hour)\n <p>\n This attribute specifies the number of seconds for which the fetched XML Schema is cacheable\n on the server.  Fetching a XML Schema file from a remote server can cause a significant\n delay in JSP processing, and XML Schema files rarely change outside of a development\n environment.  Set this value to zero to disable caching.",
        name:"loadXMLSchemaTag",
        seeAlso:[
            {ref:"classMethod:XMLTools.loadXMLSchema", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:TreeGrid.getSelectedPaths":{
        ref:"method:TreeGrid.getSelectedPaths",
        flags:"",
        description:" Returns a snapshot of the current selection within this treeGrid as \n a ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:TreeGrid.setSelectedPaths')} to reset this grid's selection\n the current state (assuming the same data is present in the grid).<br>\n",
        name:"getSelectedPaths",
        seeAlso:[
            {ref:"method:TreeGrid.setSelectedPaths", description:null}
        ],
        returns:{description:"current state of this grid's selection", type:"listGridSelectedState"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "attr:DynamicForm.requiredTitlePrefix":{
        ref:"attr:DynamicForm.requiredTitlePrefix",
        flags:"IRW",
        description:"The string prepended to the title of every required item in this form if\n highlightRequiredFields is true.",
        name:"requiredTitlePrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"<B>\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "group:facetExpansion":{
        ref:"group:facetExpansion",
        refs:["attr:CubeGrid.canCollapseFacets", "attr:CubeGrid.canMinimizeFacets"],
        description:null,
        name:"facetExpansion",
        seeAlso:[],
        type:"group"
    },
    "method:WebService.callOperation":{
        ref:"method:WebService.callOperation",
        flags:"",
        description:" Invoke a web service operation.\n <P>\n The <code>data</code> parameter will be serialized to XML to form the input message for\n the operation, as described by ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.  Namespacing,\n element ordering, and SOAP encoding rules are automatically followed.  If the web\n service you are trying to contact requires a complicated nested structure, consider\n using ${isc.DocUtils.linkForRef('attr:WSRequest.useFlatFields')} to simplify the required JavaScript input data.\n <P>\n The <code>resultType</code> selects what part of the message should be decoded to\n JavaScript and made available as the \"data\" variable in the callback.  The\n <code>resultType</code> parameter can be either:\n <ul>\n <li> an XPath.  \"data\" will be always be an Array, containing the selected elements as\n decoded by ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  All properties will have String value.\n <li> the name of an XML Schema type found somewhere in the response.  You can use the\n WSDL tab of the Developer Console to analyze the WSDL file for an appropriate type name.\n \"data\" will be an Array, containing the decoded elements as decoded by\n ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}.  In this case, since the XML Schema type of the\n selected data is known, properties will have correct type (eg \"date\" fields will\n have JavaScript Date objects)\n <li> null.  \"data\" will an Object representing the entire &lt;SOAP:Body&gt; as decoded\n to JavaScript.  As above, properties will have correct type.\n </ul>\n In the callback, you also receive the XML document returned by the web service as\n \"xmlDoc\".\n <P>\n NOTE: <code>callOperation()</code> is appropriate for simple operations that do not\n involve DataBound Components, such as logging into a web service, or retrieving simple\n String data.  <code>callOperation()</code> can also be used to retrieve small, read-only\n datasets such as the option list for a SelectItem, but only if the dataset is guaranteed\n to remain small enough for paging to be unnecessary.  For any larger datasets or\n anything that will be edited, DataSource integration is more appropriate.\n\n",
        name:"callOperation",
        seeAlso:[],
        params:[
            {description:"Name of the operation to invoke", optional:false, name:"operationName", 
             defaultValue:null,type:"String"},
            {description:"data to serialize as XML to form the inbound message of                                  the operation", 
             optional:false,name:"data", defaultValue:null, type:"Object"},
            {description:"Type, Element name, or XPath that                                  should be selected from the result", 
             optional:false,name:"resultType", defaultValue:null, type:"Type or ElementName or XPath"},
            {description:"Callback to invoke on completion.  Signature                                  callback(data, xmlDoc, rpcResponse, wsRequest)", 
             optional:false,name:"callback", defaultValue:null, type:"Callback"},
            {description:"Additional properties for the WSRequest, such                                      as HTTPHeaders", 
             optional:false,name:"requestProperties", defaultValue:null, type:"WSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('wsdlOperation')}"],
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:FormItem.enable":{
        ref:"method:FormItem.enable",
        flags:"",
        description:" Set this item to be enabled at runtime.\n",
        name:"enable",
        seeAlso:[
            {ref:"attr:FormItem.disabled", description:null}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["enable"]
    },
    "attr:TabBar.breadth":{
        ref:"attr:TabBar.breadth",
        flags:"IRW",
        description:"Breadth of the tabBar (including baseline breadth)",
        name:"breadth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"21",
        type:"attr",
        definingClass:"class:TabBar"
    },
    "method:ListGrid.getFilterEditorValueMap":{
        ref:"method:ListGrid.getFilterEditorValueMap",
        flags:"A",
        description:"\n  If we're showing the filter (query-by-example) row for this ListGrid, this method is\n  used to determine the valueMap to display in the filter row for this field.\n  Default implementation will return the field.filterEditorValueMap if specified, or\n  field.valueMap.\n\n",
        name:"getFilterEditorValueMap",
        seeAlso:[],
        params:[
            {description:"field definition field for which we need a valueMap", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"}
        ],
        returns:{description:"ValueMap for the edit field (or null if no valueMap required)", type:"ValueMap"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "attr:Label.contents":{
        ref:"attr:Label.contents",
        flags:"IRW",
        description:"The contents of a canvas or label widget. Any HTML string is acceptable.",
        name:"contents",
        setter:["setContents"],
        seeAlso:[
            {ref:"attr:Label.dynamicContents", description:null}
        ],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        definingClass:"class:Label",
        groups:["contents"]
    },
    "method:Canvas.setShowResizeBar":{
        ref:"method:Canvas.setShowResizeBar",
        flags:"",
        description:" When this Canvas is included as a member in a Layout, dynamically updates whether a \n resizeBar should be shown after this member in the layout, to allow it to be resized.\n",
        name:"setShowResizeBar",
        seeAlso:[],
        params:[
            {description:"setting for this.showResizeBar", optional:false, name:"show", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["layoutMember"]
    },
    "method:CubeGrid.selectAllFacetValues":{
        ref:"method:CubeGrid.selectAllFacetValues",
        flags:"",
        description:"\n select/deselect all headers in a headerBar (specified by facetId) or\n all headerBars (if no facetId)\n\n  <br><i>methodType</i> action\n",
        name:"selectAllFacetValues",
        seeAlso:[],
        params:[
            {description:"ID of facet - if null, selects all headerbars' headers", optional:true, 
             name:"facetId",defaultValue:null, type:"string"},
            {description:"new selection state - if null defaults to true", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:ListGridField.valueIconSize":{
        ref:"attr:ListGridField.valueIconSize",
        flags:"IRW",
        description:"Default width and height of value icons in this field.\n Takes precidence over valueIconWidth, valueIconHeight and valueIconSize specified at\n the ListGrid level.\n Can be overridden via ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')} and {ListGridField.valueIconHeight}",
        name:"valueIconSize",
        seeAlso:[
            {ref:"attr:ListGrid.valueIconSize", description:null},
            {ref:"attr:ListGridField.valueIconWidth", description:null},
            {ref:"attr:ListGridField.valueIconHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "method:TreeGrid.recordDoubleClick":{
        ref:"method:TreeGrid.recordDoubleClick",
        flags:"",
        description:"\n Handle a doubleClick on a tree node - override of ListGrid stringMethod of same name.  If\n the node is a folder, this implementation calls ${isc.DocUtils.linkForRef('method:TreeGrid.toggleFolder')} on it.  If\n the node is a leaf, calls ${isc.DocUtils.linkForRef('method:TreeGrid.openLeaf')} on it.\n \n",
        name:"recordDoubleClick",
        seeAlso:[
            {ref:"method:ListGrid.recordDoubleClick", description:null}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:TreeGrid.folderDrop":{
        ref:"method:TreeGrid.folderDrop",
        flags:"A",
        description:"\n This method processes the drop on a folder in the TreeGrid.  The default implementation\n works as follows:\n <P>\n If the nodes originate in this tree and the ${isc.DocUtils.linkForRef('attr:TreeGrid.dragDataAction')} is \"none\" or\n \"move\", then the nodes are simply reordered in this TreeGrid.  Otherwise (if\n ${isc.DocUtils.linkForRef('attr:TreeGrid.dragDataAction')} is \"copy\" or \"none\"), this method calls\n ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} on the <code>sourceWidget</code> and adds the returned\n rows to this TreeGrid.\n <P>\n In either case, the new row(s) appear in the <code>folder</code> at the <code>index</code>\n specified by the arguments of the same name.\n <P>\n For dataBound treeGrids, folderDrop() will initiate ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}\n to update remote datasets.  For nodes moved within the tree, an \"update\" operation will\n be submitted to update the ${isc.DocUtils.linkForRef('attr:Tree.parentIdField','parentId')} field of the moved node(s).  For\n nodes added to a tree, \"add\" DataSource requests will be submitted with the dropped\n node(s) as dsRequest.data.\n <P>\n As a special case, if the <code>sourceWidget</code> is also databound, and a \n ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} relationship is declared from the\n <code>sourceWidget</code>'s DataSource to this TreeGrid's DataSource, the interaction will\n be treated as a \"drag recategorization\" use case such as files being placed in folders,\n employees being assigned to teams, etc.  \"update\" DSRequests will be submitted that\n change the foreignKey field in the dropped records to point to the tree folder that was the\n target of the drop.  In this case no change will be made to the Tree data as such, only to\n the dropped records. \n\n",
        name:"folderDrop",
        seeAlso:[],
        params:[
            {description:"List of nodes being dropped", optional:false, name:"nodes", defaultValue:null, 
             type:"List of TreeNode"},
            {description:"The folder being dropped on", optional:false, name:"folder", 
             defaultValue:null,type:"TreeNode"},
            {description:"Within the folder being dropped on, the index at which the drop is                        occurring.", 
             optional:false,name:"index", defaultValue:null, type:"integer"},
            {description:"The component that is the source of the nodes (where the nodes                              were dragged from).", 
             optional:false,name:"sourceWidget", defaultValue:null, type:"Canvas"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('treeDropEvents')}"],
        definingClass:"class:TreeGrid"
    },
    "method:ListGrid.getSelection":{
        ref:"method:ListGrid.getSelection",
        flags:"",
        description:" Returns all selected records, as an Array.\n\n",
        name:"getSelection",
        seeAlso:[],
        returns:{description:"list of records, empty list if nothing selected", 
         type:"Array of ListGridRecord"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundRemove')}"],
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "method:DateChooser.getData":{
        ref:"method:DateChooser.getData",
        flags:"",
        description:" Get the current value of the picker.\n <P>\n See ${isc.DocUtils.linkForRef('method:DateChooser.dataChanged')} for how to respond to the user picking a date.\n\n",
        name:"getData",
        seeAlso:[],
        returns:{description:"current date", type:"Date"},
        type:"method",
        definingClass:"class:DateChooser"
    },
    "attr:CubeGrid.alternateRecordStyles":{
        ref:"attr:CubeGrid.alternateRecordStyles",
        flags:"IRW",
        description:"Whether alternating rows should be drawn in alternating styles, in order to create a \"ledger\"\n	effect for easier reading.  If enabled, the cell style for alternate rows will have \"Dark\"\n	appended to it.",
        name:"alternateRecordStyles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["appearance"]
    },
    "group:iscServer":{
        ref:"group:iscServer",
        title:"SmartClient Server Summary",
        treeLocation:["Java Server Reference"],
        refs:[],
        description:"The SmartClient Server is a set of Java libraries, servlets and tools that provide the key\n server-side components needed to build a complete application in the modern web\n architecture.\n <P>\n The SmartClient Server can be ${isc.DocUtils.linkForRef('group:iscInstall','integrated')} into any pre-existing Java\n application, and is designed to rapidly connect SmartClient visual components to\n pre-existing Java business logic or persistence engines.  SmartClient's Ajax request\n processing facilities can be easily integrated into Struts Actions,\n ${isc.DocUtils.linkForRef('group:springIntegration','Spring controllers')}, or custom servlets and JSPs.\n <P>\n Alternatively, the SmartClient Server provides a complete SQL and Hibernate-based\n persistence engine for new applications, with out-of-the-box servlets for processing Ajax\n data requests.\n <P>\n The SmartClient Server is optional, and SmartClient's client-side Ajax engine can be\n integrated with any server that provides HTTP access, using XML, JSON, SOAP or proprietary\n data protocols.  However any server in a modern web application will be required to provide\n most or all of the features of the SmartClient Server (described below), and the SmartClient\n Server represents a best-of-breed implementation of these facilities with a long history of\n high-volume production deployments.\n <P>\n <h4>Server enforcement of ${isc.DocUtils.linkForRef('class:Validator','Validators')}</h4>\n <P>\n Data passed from the browser can be automatically validated by the SmartClient Server.\n In contrast, when using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')},\n data arrives as HTTP params or XML messages, and you must parse values into the correct\n types (eg java.util.Date) and validate them, or use a server framework that does so.\n <P>\n <h4>High Speed Data Delivery / Data Compression</h4>\n <P>\n The SmartClient Server delivers data to and from the browser using a proprietary, maximally\n efficient protocol, providing simple Java APIs for sending and receiving data.\n <P>\n SmartClient's data protocol is:\n <ul>\n <li> automatically compressed: provides 6-8x improvement in bandwidth utilization\n <li> efficient on the server: high speed data serialization for any Java Object\n <li> efficient in the browser: faster than ordinary XML or JSON data delivery\n <li> minimal: facilities for ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields','trimming')} and\n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','extracting')} only the data you want the browser to see\n </ul>\n <P>\n <h4>Transparent upload support</h4>\n <P>\n SmartClient provides special client and server-side support for ${isc.DocUtils.linkForRef('group:upload','file\n upload')}, which allows single and multiple-file HTTP uploads to be performed as a background\n Ajax request without reloading the page or launching sub-windows.\n <P>\n Uploaded files arrive at the SmartClient server as Java InputStreams accessible from the\n DSRequest object, and can optionally be automatically stored via SmartClient's SQL\n subsystem.\n <P>\n <h4>Transparent Queuing / \"Batch\" Operations</h4>\n <P>\n Any request transmitted to the SmartClient Server can be combined into a \"queue\" transmitted\n as a single HTTP request, with in-order execution for all queued operations. \n ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','startQueue()')} starts a queue and\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue','sendQueue()')} transmits it; queueing is transparent to the code\n that initiates the individual requests.  This enables:\n <ul>\n <li> re-use of data access operations across different screens\n <li> easy implementation of transaction boundaries\n <li> simplified saving and loading of screens with complex, master-detail views\n <li> guaranteed in-order processing of operations\n <li> more efficient network usage\n </ul>\n <P>\n <h4>Visual Builder</h4>\n <P>\n ${isc.DocUtils.linkForRef('group:visualBuilder','Visual Builder')} is included with the SmartClient Server, and uses\n server features such as automatic SQL binding to provide a rapid prototyping environment.\n <P>\n <h4>Automatic Bi-directional Java &lt; - &gt; JavaScript serialization and translation</h4>\n <P>\n Provides a powerful, type-safe ${isc.DocUtils.linkForRef('attr:RPCRequest.data','data transmission mechanism')} for moving\n data between a Java server and the browser. \n <P>\n Any Java objects, including Java Beans, POJOs, Java Collections, XML DOMs and all Java\n primitives, with any level of nesting, can be automatically serialized and delivered as\n JavaScript Objects to the SmartClient client-side components.\n <P>\n JavaScript Objects existing in the browser can likewise be automatically transmitted to a\n Java Server and translated to Java Objects, with any level of nesting and automatic\n preservation of primitive types.\n <P>\n <h4>Rich, Standardized Request / Response protocol</h4>\n <P>\n The SmartClient Server provides a standardized request and response protocol designed for\n data-oriented \"CRUD\" operations (create, retrieve, update, delete).\n <P>\n This standardized protocol automatically handles ${isc.DocUtils.linkForRef('class:DSRequest','request metadata')} (paging\n parameters, requested sort order, original values of data being modified) and\n ${isc.DocUtils.linkForRef('class:DSResponse','response metadata')} (error handling, cache management, session expiration etc).\n <P>\n Similar to the impact of Struts on early web applications, this standardized protocol avoids\n developers in different groups inventing their own incompatible and redundant\n request/response protocols, and allows developers to more easily learn code they didn't\n author.\n <P>\n <h4>Bi-directional XPath binding to Java Objects</h4>\n <P>\n Most UI designs do not directly reflect the underlying Object model and so some degree of\n translation is necessary in order to populate UI components with data and apply user changes\n to the Java Object model.  This is often accomplished with brittle, difficult to understand\n data translation code sprinkled throughout the system, done in a different way for every\n screen or component.\n <P>\n SmartClient provides a standard, ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','XPath-based approach')} to\n adapting any Java-based Object model to the requirements of the UI design.  Data relevant to\n the application UI is centrally extracted in the server-side ${isc.DocUtils.linkForRef('class:DataSource')} layer, so\n that all UI components have a consistent, unified view of the data model for both loading\n <b>and</b> saving data.\n <P>\n <h4>Broadest possible browser support</h4>\n <P>\n The SmartClient Server can compensate for facilities \n ${isc.DocUtils.linkForRef('group:platformDependencies','missing or disabled in certain browsers')},\n including ActiveX being disabled in IE6 and missing XML support in some versions\n of Apple's Safari browser.\n <P>\n <h4>Transparent Proxying</h4>\n <P>\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendProxied','Proxying')} allows SmartClient applications to access web\n services, RSS feeds, HTML content and other data services in a secure manner regardless of\n where they are located: across the enterprise or publicly available.\n <P>\n <h4>Optional ${isc.DocUtils.linkForRef('group:networkPerformance','Network Performance')} Module</h4>\n <P>\n Provides:\n <ul>\n <li> compressed delivery of SmartClient runtime, application logic and other assets such as CSS\n <li> ${isc.DocUtils.linkForRef('class:FileLoader','background download')} of SmartClient and other assets for zero\n user-perceived load time\n <li> on-the-fly stripping, combining and obfuscation of JavaScript (application code and data)\n <li> browser cache control\n </ul>\n <P>\n <h4>Optional Messaging Module (aka server push)</h4>\n <P>\n The ${isc.DocUtils.linkForDocNode('messaging', 'Messaging')} module allows the server to \"push\" messages to the client, without\n client polling, for real-time monitoring/dashboarding applications.",
        name:"iscServer",
        seeAlso:[],
        type:"group"
    },
    "method:Class.map":{
        ref:"method:Class.map",
        flags:"",
        description:"\n Call <code>method</code> on each item in <code>argsList</code> and return the Array of results.\n\n",
        name:"map",
        seeAlso:[],
        params:[
            {description:"Name of the method on this instance which should be called on each element of the Array", 
             optional:false,name:"methodName", defaultValue:null, type:"string"},
            {description:"Array of items to call the method on", optional:false, name:"items", 
             defaultValue:null,type:"Array"}
        ],
        returns:{description:"Array of results, one per element in the passed \"items\" Array", type:"Array"},
        type:"method",
        definingClass:"class:Class"
    },
    "type:ListGridFieldType":{
        ref:"type:ListGridFieldType",
        values:[
            {description:"Simple text rendering for view.  For editing a text entry field is shown. If the length of the field (as specified by the ${isc.DocUtils.linkForRef('attr:DataSourceField.length')}\n attribute) is larger than the value specified by ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorThreshold')}, a\n text input icon is shown that, when clicked on (or field is focused in) opens a larger\n editor that expands outside the boundaries of the cell (textarea by default, but\n overrideable via ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorType')}).", 
             value:"\"text\""},
            {description:"For viewing and editing a checkbox is shown with a check mark for the <code>true</code> value and no check mark for the <code>false</code> value.  See\n ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} for customization.", 
             value:"\"boolean\""},
            {description:"Same as <code>text</code>.  Consider setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorType','editorType')} to use a ${isc.DocUtils.linkForRef('class:SpinnerItem')}.", 
             value:"\"integer\""},
            {description:"Same as <code>text</code>.  Consider setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorType','editorType')} to use a ${isc.DocUtils.linkForRef('class:SpinnerItem')}.", 
             value:"\"float\""},
            {description:"Expected to contain <code>Date</code> type data. Dates will be formatted using\n ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')} if specified, otherwise ${isc.DocUtils.linkForRef('attr:ListGrid.dateFormatter')}.\n If both these attributes are unset, dates are formatted using the standard \n ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat','short display format')} for dates.<br>\n For editing, by default a ${isc.DocUtils.linkForRef('class:DateItem')} is used with ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} set\n to true, providing textual date entry plus a pop-up date picker. The\n ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')} and ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')}\n for the editor will be picked up from the ListGridField, if specified.", 
             value:"\"date\""},
            {description:"Expected to contain Time data encoded in javascript <code>Date</code> objects.\n Times will be formatted using ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')} if specified, \n otherwise ${isc.DocUtils.linkForRef('attr:ListGrid.timeFormatter')}.<br>\n If both these attributes are unset, times are formatted using the standard \n ${isc.DocUtils.linkForRef('classAttr:Time.shortDisplayFormat','short display format')} for times.<br>\n For editing, by default a ${isc.DocUtils.linkForRef('class:TimeItem')} is used. The\n ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat','displayFormat')} for the editor will be picked up from \n the ListGridField, if specified.", 
             value:"\"time\""},
            {description:"Same as <code>text</code>", value:"\"sequence\""},
            {description:"For viewing, the field value is rendered as a clickable html link (using an HTML anchor tag: &lt;A&gt;).  The target URL is the value of the field, which\n is also default display value. You can override the display value by setting\n ${isc.DocUtils.linkForRef('attr:ListGridRecord.linkText')} or ${isc.DocUtils.linkForRef('attr:ListGridField.linkText')}.<BR>\n Clicking the link opens the URL in a new window by default.  To change this behavior,\n you can set <code>field.target</code>, which works indentically to the \"target\"\n attribute on an HTML anchor (&lt;A&gt;) tag.<br>\n In inline edit mode, this type works like a text field.<br>\n To create a link not covered by this feature, consider using\n ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue')} along with ${isc.DocUtils.linkForRef('method:Canvas.linkHTML')}, or simply\n ${isc.DocUtils.linkForRef('method:ListGrid.getCellStyle','styling the field')} to look like a link, and providing\n interactivity via ${isc.DocUtils.linkForRef('method:ListGridField.recordClick','field.recordClick()')}.", 
             value:"\"link\""},
            {description:"For viewing, a thumbnail image is rendered in the field.  The URL of the image is the value of the field. If this URL is not absolute, it is assumed to be relative\n to ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} if specified. The size of the image is controlled by\n  ${isc.DocUtils.linkForRef('attr:ListGridField.imageSize')}, ${isc.DocUtils.linkForRef('attr:ListGridField.imageWidth')},\n  ${isc.DocUtils.linkForRef('attr:ListGridField.imageHeight')} (and by the similarly-named global default\n  attributes on the ListGrid itself).<br>\n  You can also specify\n  the following attributes on the field: <code>activeAreaHTML</code>, and\n  <code>extraStuff</code> - these are passed to ${isc.DocUtils.linkForRef('method:Canvas.imgHTML')} to generate the\n  final URL.", 
             value:"\"image\""},
            {description:"For viewing, the grid renders a 'view' icon (looking glass) followed by a 'download' icon and then the name of the file is displayed in text.  If the user clicks the\n 'view' icon, a new browser window is opened and the file is streamed to that browser\n instance.  For images and other file types with known handlers, the content is typically\n displayed inline - otherwise the browser will ask the user how to handle the content.  If the\n download icon is clicked, the browser opens a 'Save' dialog.  There is no inline editing mode\n for this field type.", 
             value:"\"binary\""},
            {description:"Same as <code>binary</code>", value:"\"imageFile\""}
        ],
        description:"ListGrids format data for viewing and editing based on the <i>type</i> attribute of the\n field.  This table describes how the ListGrid deals with the various built-in types.",
        name:"ListGridFieldType",
        seeAlso:[
            {ref:"attr:ListGridField.type", description:null},
            {ref:"type:FieldType", description:null}
        ],
        type:"type",
        examples:["${isc.DocUtils.linkForExampleId('gridsDataTypes')}"]
    },
    "attr:SimpleType.name":{
        ref:"attr:SimpleType.name",
        flags:"IR",
        description:"Name of the type, used to refer to the type from ${isc.DocUtils.linkForRef('attr:DataSourceField.name','field.name')}.",
        name:"name",
        seeAlso:[],
        valueType:"identifier",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SimpleType"
    },
    "attr:ImgSplitbar.canDrag":{
        ref:"attr:ImgSplitbar.canDrag",
        flags:"IRW",
        description:"<code>canDrag</code> set to true to allow dragging of the split bar. Dragging the\n Splitbar will resize it's ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}",
        name:"canDrag",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "attr:ImgTab.align":{
        ref:"attr:ImgTab.align",
        flags:"IRW",
        description:"Alignment of title text",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:ImgTab",
        groups:["positioning"]
    },
    "method:SectionItem.collapseSection":{
        ref:"method:SectionItem.collapseSection",
        flags:"",
        description:" Collapse a sectionItem, and hide all the items within the section (not including\n the header).\n",
        name:"collapseSection",
        seeAlso:[],
        type:"method",
        definingClass:"class:SectionItem"
    },
    "method:GridRenderer.getCellStyle":{
        ref:"method:GridRenderer.getCellStyle",
        flags:"",
        description:" Return the CSS class for a cell. By default this method has the following implementation:<br>\n - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) \n   if defined.<br>\n - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the \n   state of the record.<br>\n The state of the record is indicated by adding a suffix to the base style.\n There are four independant boolean states, which are combined in the order given:\n <ol>\n <li>\"Disabled\" : whether the cell is disabled; enable by setting the \"enabled\" flag on record\n     returned by getCellRecord\n <li>\"Selected\" : whether cell is selected; enable by passing a Selection object as \"selection\"\n <li>\"Over\" : mouse is over this cell; enable with showRollovers\n <li>\"Dark\" : alternating color bands; enable with alternateRowStyles\n </ol>\n For example, with a baseStyle of \"myCell\", a cell which is selected, which the mouse is over,\n and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.\n <p>\n Cell Styles customizable by:\n <ul>\n <li>attaching a custom style to a record by setting \n    <code>record[this.recordCustomStyleProperty]</code> to some valid CSS style name.  \n <li>modifying the base style returned by getBaseStyle() [see that method for further \n     documentation on this]\n <li>overriding this function\n </ul>\n\n",
        name:"getCellStyle",
        seeAlso:[],
        params:[
            {description:"record object for this row and column", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"number of the row", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"number of the column", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS style for this cell", type:"CSSStyleName"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["appearance"]
    },
    "group:menuKeys":{
        ref:"group:menuKeys",
        refs:["attr:MenuItem.keys", "attr:MenuItem.keyTitle"],
        name:"menuKeys",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setDragTracker":{
        ref:"method:Canvas.setDragTracker",
        flags:"",
        description:" If ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to <code>\"tracker\"</code>, this method will be called\n (if defined), when the user starts to drag this widget. It is an opportunity to update the\n drag tracker to display something relative to this canvas.  Typical implementation will\n be to call ${isc.DocUtils.linkForRef('classMethod:EventHandler.setDragTracker')}, passing in the desired custom tracker HTML \n as a string\n",
        name:"setDragTracker",
        seeAlso:[],
        returns:{description:"Return false to suppress bubbling, and prevent <code>setDragTracker()</code>                      from being called on this widget's ancestors.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragTracker')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "classMethod:Date.create":{
        ref:"classMethod:Date.create",
        flags:"",
        description:"  Create a new <code>Date</code> object - synonym for <code>new Date(arguments)</code>\n",
        name:"create",
        seeAlso:[],
        returns:{description:"Date object", type:"Date"},
        type:"classMethod",
        definingClass:"class:Date"
    },
    "classMethod:RPCManager.startQueue":{
        ref:"classMethod:RPCManager.startQueue",
        flags:"",
        description:"\n Start queuing requests.  When queuing requests, an HTTP request will not be sent to\n the server until RPCManager.sendQueue() is called.\n <p>\n All requests in a given queue must go to the same actionURL and use the same transport\n (XMLHttp or frames).  If a request specifies a different actionURL or transport than\n that of the requests currently on the queue, it will be sent to the server separately,\n ahead of the queue, and a warning will be logged to the Developer Console.\n <p>\n Note that the server must process all requests sent as part of the queue before any\n response is sent to the client.  You should avoid batching a request that will take a\n long time to process on the server with any other requests because it will delay the\n response of all requests in the queue.\n\n",
        name:"startQueue",
        seeAlso:[
            {ref:"classMethod:RPCManager.sendQueue", description:null}
        ],
        params:[
            {description:"whether queuing should be enabled, default true.  Passing false                      will disable queuing but not send the queue yet, so that any\n                      queued requests will be sent along with the next\n                      send()/sendRequest()", 
             optional:true,name:"shouldQueue", defaultValue:null, type:null}
        ],
        returns:{description:"whether queuing was already enabled before we called", type:"boolean"},
        type:"classMethod",
        definingClass:"class:RPCManager",
        requiresModules:["SCServer"]
    },
    "attr:Canvas.snapResizeToGrid":{
        ref:"attr:Canvas.snapResizeToGrid",
        flags:"IRW",
        description:"Causes this canvas to snap to its parent's grid when resizing.\n Note that this value defaults to the Canvas's \n ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} value if undefined.",
        name:"snapResizeToGrid",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:FormItem.showIcons":{
        ref:"attr:FormItem.showIcons",
        flags:"IRWA",
        description:"Set to false to suppress writing out any ${isc.DocUtils.linkForRef('attr:FormItem.icons')} for this item.",
        name:"showIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "attr:ServerObject.ID":{
        ref:"attr:ServerObject.ID",
        flags:"IR",
        description:"You can optionally specify an ID on the ServerObject config block - in which case you can\n use that value as the \"className\" argument when calling ${isc.DocUtils.linkForRef('classMethod:DMI.call')}.  This allows you to\n hide the name of the server-side class used as the factory or implementer of the DMI from\n the browser as a security precaution.",
        name:"ID",
        seeAlso:[
            {ref:"attr:ServerObject.className", description:null},
            {ref:"classMethod:DMI.call", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "attr:StretchImgButton.iconSize":{
        ref:"attr:StretchImgButton.iconSize",
        flags:"IR",
        description:"Size in pixels of the icon image.\n <P>\n The <code>iconWidth</code> and <code>iconHeight</code> properties can be used to\n configure width and height separately.",
        name:"iconSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "group:toolbar":{
        ref:"group:toolbar",
        refs:["attr:Dialog.showToolbar"],
        name:"toolbar",
        seeAlso:[],
        type:"group"
    },
    "method:TreeGrid.getNodeTitle":{
        ref:"method:TreeGrid.getNodeTitle",
        flags:"",
        description:"\n Returns the title to show for a node in the tree column.  If the field specifies the\n <code>name</code> attribute, then the current <code>node[field.name]</code> is returned.\n Otherwise, the result of calling ${isc.DocUtils.linkForRef('method:Tree.getTitle')} on the node is called.\n <br><br>\n You can override this method to return a custom title for node titles in the tree column.\n\n",
        name:"getNodeTitle",
        seeAlso:[
            {ref:"method:Tree.getTitle", description:null}
        ],
        params:[
            {description:"The node for which the title is being requested.", optional:false, 
             name:"node",defaultValue:null, type:"TreeNode"},
            {description:"The index of the node.", optional:false, name:"recordNum", defaultValue:null, 
             type:"Number"},
            {description:"The field for which the title is being requested.", optional:false, 
             name:"field",defaultValue:null, type:"DSField"}
        ],
        returns:{description:"the title to display.", type:"HTML"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "classMethod:Validator.addValidators":{
        ref:"classMethod:Validator.addValidators",
        flags:"A",
        description:"  Add several new validator types at once, as though ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')} were called\n  several times.\n \n",
        name:"addValidators",
        seeAlso:[
            {ref:"classMethod:Validator.addValidator", description:null}
        ],
        params:[
            {description:"Set of validators to add.  This parameter should      be a JavaScript object where the property names are validator type names, and the\n      property values are condition functions or expressions, for example:<br>\n      &nbsp;&nbsp;&nbsp;<code>{type1:condition1, type2:condition2}</code><br>.", 
             optional:false,name:"newValidators", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:Validator",
        groups:["validation"]
    },
    "method:Selection.deselectRange":{
        ref:"method:Selection.deselectRange",
        flags:"",
        description:"			Deselect range of records from <code>start</code> to <code>end</code>, non-inclusive\n\n",
        name:"deselectRange",
        seeAlso:[],
        params:[
            {description:"start index to select", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end index (non-inclusive)", optional:false, name:"end", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:TreeGrid.getExtraIcon":{
        ref:"method:TreeGrid.getExtraIcon",
        flags:"A",
        description:" Get an additional icon to show between the open icon and folder/node icon for a particular \n node.\n\n",
        name:"getExtraIcon",
        seeAlso:[],
        params:[
            {description:"tree node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"URL for the extra icon (null if none required)", type:"URL"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:ListGrid.fastCellUpdates":{
        ref:"attr:ListGrid.fastCellUpdates",
        flags:"I",
        description:"Whether to speed up dynamic styling at the expense of slightly slower drawing.\n <P>\n <code>fastCellUpdates</code> speeds up the dynamic styling system used by rollovers,\n selections, and custom styling that calls ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCellStyle')}, at\n the cost of slightly slower draw() and redraw() times.",
        name:"fastCellUpdates",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "classAttr:ValidatorTypes.floatPrecision":{
        ref:"classAttr:ValidatorTypes.floatPrecision",
        flags:"IR",
        description:"Tests whether the value for this field is a floating point number with the \n  appropriate number of decimal places - specified in <code>validator.precision</code>\n  If the value is of higher precision, if <code>validator.roundToPrecision</code> \n  is specified, the value will be rounded to the specified number of decimal places\n  and validation will pass, otherwise validation will fail.",
        name:"floatPrecision",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:ListGrid.fieldVisibilitySubmenuTitle":{
        ref:"attr:ListGrid.fieldVisibilitySubmenuTitle",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, and\n ${isc.DocUtils.linkForRef('attr:ListGrid.canPickFields','this.canPickFields')} is true, this\n attribute will be shown as the title for the menu item which contains a submenu with items \n allowing the user to show and hide fields in the grid.",
        name:"fieldVisibilitySubmenuTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Columns\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "attr:Window.headerSrc":{
        ref:"attr:Window.headerSrc",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Window.showHeaderBackground')} is <code>true</code>, this property provides\n the URL of the background image for the header.",
        name:"headerSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]Window/headerGradient.gif\" | null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "method:Array.clearProperty":{
        ref:"method:Array.clearProperty",
        flags:"",
        description:" Delete property in each item in this array.\n",
        name:"clearProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to clear", optional:false, name:"property", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"object:Array",
        groups:["iteration"]
    },
    "attr:FacetValue.width":{
        ref:"attr:FacetValue.width",
        flags:"IR",
        description:"Width of the cube grid facet value in pixels",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"facet.width",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "attr:ListGrid.isGrouped":{
        ref:"attr:ListGrid.isGrouped",
        flags:"R",
        description:"True if this listgrid is grouped, false otherwise",
        name:"isGrouped",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:TabSet.tabBarPosition":{
        ref:"attr:TabSet.tabBarPosition",
        flags:"IR",
        description:"Which side of the TabSet the TabBar should appear on.",
        name:"tabBarPosition",
        seeAlso:[],
        valueType:"Side",
        defaultValue:"Canvas.TOP",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('tabsOrientation')}"],
        definingClass:"class:TabSet",
        groups:["tabBar"]
    },
    "attr:Tree.pathDelim":{
        ref:"attr:Tree.pathDelim",
        flags:"IRWA",
        description:"Specifies the delimiter between node names.  The pathDelim is used to construct a unique\n path to each node. A path can be obtained for any node by calling\n ${isc.DocUtils.linkForRef('method:Tree.getPath')} and can be used to find any node in the tree by calling\n ${isc.DocUtils.linkForRef('method:Tree.find')}.  Note that you can also hand-construct a path - in other words\n you are not required to call ${isc.DocUtils.linkForRef('method:Tree.getPath')} in order to later use\n ${isc.DocUtils.linkForRef('method:Tree.find')} to retrieve it.\n <br><br>\n The pathDelim can be any character or sequence of characters, but must be a unique string\n with respect to the text that can appear in the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} that's used\n for naming the nodes.  So for example, if you have the following tree:\n <pre>\n one\n   two\n     three/four\n </pre>\n Then you will be unable to find the <code>three/four</code> node using\n ${isc.DocUtils.linkForRef('method:Tree.find')} if your tree is using the default pathDelim of /.\n In such a case, you can use a different pathDelim for the tree.  For example if you used |\n for the path delim, then you can find the <code>three/four</code> node in the tree above by\n calling <code>tree.find(\"one|two|three/four\")</code>.\n <br><br>\n The pathDelim is used only by ${isc.DocUtils.linkForRef('method:Tree.getPath')} and ${isc.DocUtils.linkForRef('method:Tree.find')} and\n does not affect any aspect of the tree structure or other forms of tree navigation (such as\n via ${isc.DocUtils.linkForRef('method:Tree.getChildren')}).",
        name:"pathDelim",
        seeAlso:[
            {ref:"attr:Tree.nameProperty", description:null},
            {ref:"method:Tree.find", description:null}
        ],
        valueType:"string",
        defaultValue:"\"/\"",
        type:"attr",
        definingClass:"class:Tree"
    },
    "attr:ListGrid.leaveScrollbarGap":{
        ref:"attr:ListGrid.leaveScrollbarGap",
        flags:"IRW",
        description:"Whether to leave a gap for the vertical scrollbar, even when it's not present.\n <P>\n Note that if leaveScrollbarGap is false and vertical scrolling is introduced, fields\n will be resized to fit the smaller body area if possible, in order to avoid horizontal\n scrolling also being required.",
        name:"leaveScrollbarGap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('autofitRows')}"],
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:ComboBoxItem.completeOnTab":{
        ref:"attr:ComboBoxItem.completeOnTab",
        flags:"IRW",
        description:"If true, when the pickList is showing, the user can select the current value by hitting\n the <code>Tab</code> key.",
        name:"completeOnTab",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:FormItem.blurItem":{
        ref:"method:FormItem.blurItem",
        flags:"",
        description:"			Takes focus from this form item's focusable element.\n",
        name:"blurItem",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling", "focus"]
    },
    "attr:TabSet.symmetricEdges":{
        ref:"attr:TabSet.symmetricEdges",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n this property determines whether the same edge media will be used regardless of the tab\n bar position, or whether different media should be used (necessary if the edge appearance is\n not symmetrical on all sides).\n <P>\n If this property is set to false the paneContainer edge image URLs will be prefixed with\n the tabBarPosition of the tabSet - for example <code>\"[SKIN]edge_top_T.gif\"</code> rather\n than just <code>\"[SKIN]edge_T.gif\"</code>.\n <P>\n When <code>symmetricEdges</code> is false, custom edge sizes for the pane container may be\n specified via ${isc.DocUtils.linkForRef('attr:TabSet.topEdgeSizes')} et al, and custom edge offsets via \n ${isc.DocUtils.linkForRef('attr:TabSet.topEdgeOffsets')} et al.",
        name:"symmetricEdges",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:DataSourceField.multiple":{
        ref:"attr:DataSourceField.multiple",
        flags:"IR",
        description:"Indicates that this field should always be Array-valued.  If the value derived from\n ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','XML or JSON data')} is singular, it will be wrapped in an Array.\n <P>\n Specifically for XML serialization and deserialization, <code>multiple:true</code> behaves\n similarly to the \n <a href='http://www.google.com/search?hl=en&q=soap+array' onclick=\"window.open('http://www.google.com/search?hl=en&q=soap+array');return false;\">SOAP array idiom</a>, that is,\n there will be a \"wrapper element\" named after the field name, whose contents will be several\n elements of the specified ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')}.  \n <P>\n For example, ${isc.DocUtils.linkForRef('attr:Layout.members')} is declared with <code>type:\"Canvas\",\n multiple:true</code>.  The correct XML format is thus:\n <pre>\n &lt;VLayout&gt;\n     &lt;members&gt;\n         &lt;Canvas ID=\"myCanvas\" ... /&gt;\n         &lt;ListGrid ID=\"myGrid\" .../&gt;\n         &lt;Toolstrip ID=\"myToolStrip\" ... /&gt;\n     &lt;/members&gt;\n &lt;/VLayout&gt;\n </pre>",
        name:"multiple",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["xmlSerialize", "componentSchema"]
    },
    "attr:ListGrid.canDragRecordsOut":{
        ref:"attr:ListGrid.canDragRecordsOut",
        flags:"IRW",
        description:"Indicates whether records can be dragged from this listGrid and dropped elsewhere.",
        name:"canDragRecordsOut",
        seeAlso:[
            {ref:"attr:ListGridRecord.canDrag", description:null},
            {ref:"attr:ListGridRecord.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragListMove')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "classMethod:Page.unregisterKey":{
        ref:"classMethod:Page.unregisterKey",
        flags:"",
        description:" Clears an action registered to fire on a specific a keyPress event via the ${isc.DocUtils.linkForRef('classMethod:Page.registerKey')}\n method. \n",
        name:"unregisterKey",
        seeAlso:[
            {ref:"classMethod:Page.registerKey", description:null}
        ],
        params:[
            {description:"Name of key to clear registry enties for.", optional:false, name:"actionID", 
             defaultValue:null,type:"KeyName"},
            {description:"target specified when the action was registered for the key.", 
             optional:true,name:"target", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["KeyRegistry"]
    },
    "attr:RichTextEditor.controlGroups":{
        ref:"attr:RichTextEditor.controlGroups",
        flags:"IRA",
        description:"An array of control group names (strings) specifying which groups of controls should \n  be included in the editor toolbar.<br>\n  For each control group name, this[controlGroupName] should be defined as an array of \n  ${isc.DocUtils.linkForRef('type:ControlName')}s, allowing the controlGroup to be customized.",
        name:"controlGroups",
        seeAlso:[],
        valueType:"array",
        defaultValue:"[\"fontControls\", \"formatControls\", \"styleControls\", \"colorControls\"]",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('RichTextEditor')}"],
        definingClass:"class:RichTextEditor"
    },
    "attr:Window.modalMask":{
        ref:"attr:Window.modalMask",
        flags:"R",
        description:"A ScreenSpan instance used to darken the rest of a page when a modal window is\n active. To use, set ${isc.DocUtils.linkForRef('attr:Window.showModalMask')} to true, add a CSS style \n \"modalMask\" to the active skin (generally with background-color set), \n and adjust ${isc.DocUtils.linkForRef('attr:Window.modalMaskOpacity')}.",
        name:"modalMask",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["modal", "appearance"]
    },
    "method:Log.logIsDebugEnabled":{
        ref:"method:Log.logIsDebugEnabled",
        flags:"",
        description:" Check whether a message logged at \"debug\" priority would be visible in the log.\n <P>\n As with logDebug, category is defaulted to the current className.  Use this method to avoid\n putting together expensive log messages if they will never appear in the log.\n\n",
        name:"logIsDebugEnabled",
        seeAlso:[],
        params:[
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "class:ValuesManager":{
        exampleConfig:"ValuesManager.xml",
        methods:["method:ValuesManager.setDataSource", "method:ValuesManager.getDataSource", 
         "method:ValuesManager.validate","method:ValuesManager.getValidatedValues", "method:ValuesManager.setErrors", 
         "method:ValuesManager.addFieldErrors","method:ValuesManager.setFieldErrors", "method:ValuesManager.clearErrors", 
         "method:ValuesManager.clearFieldErrors","method:ValuesManager.getErrors", "method:ValuesManager.getFieldErrors", 
         "method:ValuesManager.hasErrors","method:ValuesManager.hasFieldErrors", "method:ValuesManager.showErrors", 
         "method:ValuesManager.showFieldErrors","method:ValuesManager.getValues", "method:ValuesManager.setValues", 
         "method:ValuesManager.clearValues","method:ValuesManager.getMemberValues", "method:ValuesManager.setMemberValues", 
         "method:ValuesManager.rememberValues","method:ValuesManager.resetValues", "method:ValuesManager.valuesHaveChanged", 
         "method:ValuesManager.getValue","method:ValuesManager.setValue", "method:ValuesManager.addMember", 
         "method:ValuesManager.addMembers","method:ValuesManager.removeMember", "method:ValuesManager.removeMembers", 
         "method:ValuesManager.getMembers","method:ValuesManager.getMember", "method:ValuesManager.getMemberForField", 
         "method:ValuesManager.getItem","method:ValuesManager.handleHiddenValidationErrors", "method:ValuesManager.editNewRecord", 
         "method:ValuesManager.editRecord","method:ValuesManager.editSelectedData", "method:ValuesManager.saveData", 
         "method:ValuesManager.submit","method:ValuesManager.cancel", "method:ValuesManager.filterData", 
         "method:ValuesManager.fetchData"],
        type:"class",
        ref:"class:ValuesManager",
        classAttrs:[],
        treeLocation:["Client Reference/Forms"],
        classMethods:[],
        description:"The ValuesManager manages data from multiple member forms.\n <P>\n If a single logical form needs to be separated into multiple DynamicForm instances for\n Layout purposes (for example, spanning one logical form across multiple Tabs), a\n ValuesManager can be used to make the forms act as one logical form, supporting all\n value-related APIs otherwise called on DynamicForm directly.\n <P>\n A ValuesManager has no visual representation - it is strictly a logical entity, and the\n member forms provide the user interface.  You can initialize a ValuesManager with a set of\n member forms (by setting ${isc.DocUtils.linkForRef('attr:ValuesManager.members')} at init) or add and remove member\n forms dynamically.\n <P>\n Calling ${isc.DocUtils.linkForRef('method:ValuesManager.setValues')} on a ValuesManager will automatically route new\n field values to whichever member form is showing an editor for that field.  Likewise,\n calling ${isc.DocUtils.linkForRef('method:ValuesManager.validate')} will validate all member forms, and\n ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')} will initiate a save operation which aggregates values from\n all member forms.\n <P>\n Like a DynamicForm, a ValuesManager can be databound by setting\n ${isc.DocUtils.linkForRef('attr:ValuesManager.dataSource')}.  In this case all member forms must also be bound to the\n same DataSource.\n <P>\n In general, when working with a ValuesManager and its member forms, call APIs on the\n ValuesManager whenever you are dealing with values that span multiple forms, and only call\n APIs on member forms that are specific to that form or its fields.\n <P>\n Note that, just as a DynamicForm can track values that are not shown in any FormItem, a\n ValuesManager may track values for which there is no FormItem in any member form.  However,\n when using a ValuesManager these extra values are only allowed on the ValuesManager itself.\n Member forms will not track values for which they do not have FormItems.",
        attrs:["attr:ValuesManager.dataSource", "attr:ValuesManager.members", 
         "attr:ValuesManager.unknownErrorMessage","attr:ValuesManager.disableValidation"],
        name:"ValuesManager",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('formSplitting')}"]
    },
    "method:Array.setLength":{
        ref:"method:Array.setLength",
        flags:"",
        description:" Set the length of this list.\n <P>\n If the length of the list is shortened, any elements past the new length of the list are removed.\n If the length is increased, all positions past the old length have the value\n <code>undefined</code>.\n\n",
        name:"setLength",
        seeAlso:[],
        params:[
            {description:"new length", optional:false, name:"length", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "method:ListGridField.cellChanged":{
        ref:"method:ListGridField.cellChanged",
        flags:"",
        description:"  Callback fired when field changes value as the result of a cell edit.  Fired only on\n  successful save of edit, when the new value doesn't match the value before editing.<br>\n  <p>\n  Same signature as ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')}, but defined on a per-field basis.\n\n",
        name:"cellChanged",
        seeAlso:[
            {ref:"method:ListGrid.cellChanged", description:null}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:FormItem.itemHoverHTML":{
        ref:"method:FormItem.itemHoverHTML",
        flags:"A",
        description:"  If defined, this method should return the HTML to display in a hover canvas when the \n  user holds the mousepointer over this item.  Return null to suppress the hover \n  canvas altogether.<br>\n  If not defined, <code>dynamicForm.itemHoverHTML()</code> will be evaluated to \n  determine hover content instead.\n\n",
        name:"itemHoverHTML",
        seeAlso:[
            {ref:"attr:FormItem.prompt", description:null},
            {ref:"method:FormItem.itemHover", description:null},
            {ref:"method:FormItem.titleHoverHTML", description:null}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('itemHoverHTML')}"],
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "method:StretchImg.setState":{
        ref:"method:StretchImg.setState",
        flags:"",
        description:" Set the specified image's state to newState and update the displayed image given by\n whichPart, or set the state for all images to newState and update the displayed images\n if whichPart is not provided.\n",
        name:"setState",
        seeAlso:[],
        params:[
            {description:"name for the new state (\"off\", \"down\", etc)", optional:false, 
             name:"newState",defaultValue:null, type:"string"},
            {description:"name of the piece to set (\"start\", \"stretch\" or \"end\")											if not specified, sets them all", 
             optional:true,name:"whichPart", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "method:ResultTree.dataArrived":{
        ref:"method:ResultTree.dataArrived",
        flags:"",
        description:" This callback fires whenever the resultTree receives new nodes from the server, after\n the new nodes have been integrated into the tree.\n \n",
        name:"dataArrived",
        seeAlso:[],
        params:[
            {description:"The parentNode for which children were just loaded", optional:false, 
             name:"parentNode",defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:ResultTree"
    },
    "classMethod:Class.setProperties":{
        ref:"classMethod:Class.setProperties",
        flags:"",
        description:"	Apply a set of properties to a class object, calling the appropriate setter class methods if\n	any are found.\n\n",
        name:"setProperties",
        seeAlso:[],
        params:[
            {description:"objects with properties to add (think named parameters).										all the properties of each argument will be applied one after another\n										so later properties will override", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:DynamicForm.method":{
        ref:"attr:DynamicForm.method",
        flags:"IRW",
        description:"The mechanism by which form data is sent to the action URL. See FormMethod type\n for details.\n <p>\n <b>NOTE:</b> this is used only in the very rare case that a form is used to submit data\n directly to a URL.  Normal server contact is through \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.",
        name:"method",
        seeAlso:[],
        valueType:"FormMethod",
        defaultValue:"DynamicForm.POST",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "classMethod:RPCManager.resendTransaction":{
        ref:"classMethod:RPCManager.resendTransaction",
        flags:"A",
        description:" Resend a transaction to the server.\n <P>\n A transaction means a batch of one or more RPCRequests that have already been sent to\n the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')}.\n <P>\n This is typically used as part of ${isc.DocUtils.linkForRef('group:relogin','Relogin')} handling to resend a\n request that encountered a session timeout.\n\n",
        name:"resendTransaction",
        seeAlso:[
            {ref:"group:relogin", description:null}
        ],
        params:[
            {description:"id of the transaction to be re-sent", optional:false, name:"transactionNum", 
             defaultValue:null,type:"id"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "method:ActiveXControl.getPluginID":{
        ref:"method:ActiveXControl.getPluginID",
        flags:"",
        description:"  Returns the ID for this ISC ActiveX control object.\n  If the <code>id</code> property was specified for the object, that will be used, otherwise \n  the ID will be auto-generated.\n",
        name:"getPluginID",
        seeAlso:[],
        type:"method",
        definingClass:"class:ActiveXControl"
    },
    "attr:DetailViewer.data":{
        ref:"attr:DetailViewer.data",
        flags:"IRW",
        description:"A single record object or an array of them, specifying data. Note that DetailViewers do\n not observe changes to the data array (in other words they will not automatically\n re-draw when the data provided via this property is altered).",
        name:"data",
        setter:["setData"],
        seeAlso:[],
        valueType:"Array of DetailViewerRecord",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["basics"]
    },
    "attr:FormItemIcon.neverDisable":{
        ref:"attr:FormItemIcon.neverDisable",
        flags:"IRWA",
        description:"If <code>icon.neverDisable</code> is true, when this form item is disabled, the \n  icon will remain enabled. \n  Note that disabling the entire form will disable all items, together with their \n  icons including those marked as neverDisable - this property only has an effect \n  if the form is enabled and a specific item is disabled within it.",
        name:"neverDisable",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "classAttr:RPCManager.defaultTransport":{
        ref:"classAttr:RPCManager.defaultTransport",
        flags:"IRW",
        description:"Selects the transport use for RPC requests by default.  You can override this setting on\n a per-request basis by setting ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}.",
        name:"defaultTransport",
        seeAlso:[
            {ref:"attr:RPCRequest.transport", description:null}
        ],
        valueType:"RPCTransport",
        defaultValue:"\"xmlHttpRequest\"",
        type:"classAttr",
        definingClass:"class:RPCManager"
    },
    "class:ImgSplitbar":{
        methods:[],
        ref:"class:ImgSplitbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:ImgSplitbar.target", "attr:ImgSplitbar.vertical", "attr:ImgSplitbar.canDrag", 
         "attr:ImgSplitbar.canCollapse","attr:ImgSplitbar.skinImgDir", "attr:ImgSplitbar.src", "attr:ImgSplitbar.hSrc", 
         "attr:ImgSplitbar.vSrc"],
        description:"Subclass of the ${isc.DocUtils.linkForRef('class:Img')} class. As with the ${isc.DocUtils.linkForRef('class:Splitbar')} class, \n  widgets of this class can be displayed as a resize-bar for widgets \n  in Layouts where showResizeBar is set to true. Provides a different appearance from\n  the <code>Splitbar</code> class.<br>\n  To specify the resizeBar class for some layout, use the ${isc.DocUtils.linkForRef('attr:Layout.resizeBarClass')}\n  property.",
        name:"ImgSplitbar",
        seeAlso:[
            {ref:"class:Layout", description:null},
            {ref:"class:Splitbar", description:null}
        ],
        type:"class"
    },
    "method:ValuesManager.getDataSource":{
        ref:"method:ValuesManager.getDataSource",
        flags:"A",
        description:" Returns the dataSource for this valuesManager.  Will return null if this is not a \n data-bound valuesManager instance.\n",
        name:"getDataSource",
        seeAlso:[],
        returns:{description:"Datasource object for this valuesManager.", type:"DataSource"},
        type:"method",
        definingClass:"class:ValuesManager"
    },
    "method:GridRenderer.getCellValue":{
        ref:"method:GridRenderer.getCellValue",
        flags:"",
        description:" Return the HTML to display in this cell.  Implementing this is required to get a non-empty\n grid.\n\n",
        name:"getCellValue",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"HTML to display in this cell", type:"string"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "classMethod:Validator.addValidator":{
        ref:"classMethod:Validator.addValidator",
        flags:"A",
        description:" Add a new validator type that can be specified as ${isc.DocUtils.linkForRef('attr:Validator.type')} anywhere\n validators are declared, such as ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')} or\n ${isc.DocUtils.linkForRef('attr:FormItem.validators')}.\n <br>\n The <code>condition</code> argument should be a method of the same signature as\n ${isc.DocUtils.linkForRef('method:Validator.condition')}.\n\n",
        name:"addValidator",
        seeAlso:[
            {ref:"classMethod:Validator.addValidators", description:null}
        ],
        params:[
            {description:"type name for the new validator", optional:false, name:"type", 
             defaultValue:null,type:"String"},
            {description:"function or expression to evaluate to determine whether                                 validation was successful", 
             optional:false,name:"condition", defaultValue:null, type:"StringMethod"}
        ],
        type:"classMethod",
        definingClass:"class:Validator",
        groups:["validation"]
    },
    "attr:ImgButton.autoFit":{
        ref:"attr:ImgButton.autoFit",
        flags:"IRW",
        description:"If true, ignore the specified size of this widget and always size just large\n enough to accomodate the title.  If <code>setWidth()</code> is explicitly called on an\n autoFit:true button, autoFit will be reset to <code>false</code>.\n <P>\n Note that for StretchImgButton instances, autoFit will occur horizontally only, as \n unpredictable vertical sizing is likely to distort the media. If you do want vertical \n auto-fit, this can be achieved by simply setting a small height, and having \n overflow:\"visible\"",
        name:"autoFit",
        setter:["setAutoFit"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["sizing"]
    },
    "method:ListGrid.showField":{
        ref:"method:ListGrid.showField",
        flags:"",
        description:" Force a field to be shown.<br><br>\n\n NOTE: If a field.showIf expression exists, it will be destroyed.\n\n",
        name:"showField",
        seeAlso:[],
        params:[
            {description:"field to show", optional:false, name:"field", defaultValue:null, 
             type:"field name or ListGridField"},
            {description:"If passed, don't resize non-explicitly sized columns                                       to fill the available space.", 
             optional:true,name:"suppressRelayout", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('columnOrder')}"],
        definingClass:"class:ListGrid"
    },
    "attr:SelectItem.defaultToFirstOption":{
        ref:"attr:SelectItem.defaultToFirstOption",
        flags:"IRW",
        description:"Select the first option as the default value for this SelectItem. If options are derived from\n a dataSource, the first value returned by the server will be used, otherwise the first\n value in the valueMap. If enabled, this setting overrides ${isc.DocUtils.linkForRef('attr:SelectItem.defaultValue')} and\n ${isc.DocUtils.linkForRef('method:SelectItem.defaultDynamicValue')}.",
        name:"defaultToFirstOption",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:SectionHeader.icon":{
        ref:"attr:SectionHeader.icon",
        flags:"IRA",
        description:"Base filename of the icon that represents open and closed states. The default settings\n also change the icon for disabled sections, so a total of four images are required\n (opened, closed, Disabled_opened, Disabled_closed).",
        name:"icon",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]SectionHeader/opener.gif\"",
        type:"attr",
        definingClass:"class:SectionHeader"
    },
    "classMethod:Log.clearPriority":{
        ref:"classMethod:Log.clearPriority",
        flags:"",
        description:" Clear the priority setting for a particular category, so that the category's effective\n priority returns to <code>Log.defaultPriority</code><br>\n If the optional second parameter is passed, the specific priority setting for the \n category on that object will be cleared, so logs in that category on that object will\n be logged at the global priority level for the category.\n\n",
        name:"clearPriority",
        seeAlso:[],
        params:[
            {description:"category name", optional:false, name:"category", defaultValue:null, 
             type:"String"},
            {description:"Optional instance or class object - if passed                                        clear logging priority for the appropriate category\n                                        on that object.", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"}
        ],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "attr:PickList.pickListWidth":{
        ref:"attr:PickList.pickListWidth",
        flags:"IRW",
        description:"Default width to show the pickList.\n If not specified, the width of this form item's element will be used instead.",
        name:"pickListWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('listComboBox')}"],
        definingClass:"interface:PickList"
    },
    "attr:Label.showDownIcon":{
        ref:"attr:Label.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "method:DataSource.addData":{
        ref:"method:DataSource.addData",
        flags:"",
        description:" Perform an \"add\" DataSource operation against this DataSource, to create a new DataSource\n record.\n\n",
        name:"addData",
        seeAlso:[],
        params:[
            {description:"new record", optional:false, name:"newRecord", defaultValue:null, 
             type:"Object"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on                                                       the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest Properties"}
        ],
        type:"method",
        definingClass:"class:DataSource",
        groups:["operations"]
    },
    "method:ListGrid.selectRecord":{
        ref:"method:ListGrid.selectRecord",
        flags:"",
        description:"\n  Select/deselect a records passed in explicitly, or by index.\n\n      <br><i>methodType</i> action\n",
        name:"selectRecord",
        seeAlso:[],
        params:[
            {description:"record (or row number) to select", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord | number"},
            {description:"new selection state (if null, defaults to true)", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "classMethod:FileLoader.loadJSFiles":{
        ref:"classMethod:FileLoader.loadJSFiles",
        flags:"",
        description:"\n Loads the specified JS files into the context of the current page.\n\n",
        name:"loadJSFiles",
        seeAlso:[],
        params:[
            {description:"List of URLs pointing to JS files to load.  This can either be a                                string with comma separated URLs or an Array of URLs.", 
             optional:false,name:"URLs", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified URLs                                      has completed loading.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "class:ImgTab":{
        methods:[],
        ref:"class:ImgTab",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:ImgTab.capSize", "attr:ImgTab.skinImgDir", "attr:ImgTab.baseStyle", 
         "attr:ImgTab.titleStyle","attr:ImgTab.src", "attr:ImgTab.showRollOver", "attr:ImgTab.showFocus", 
         "attr:ImgTab.showFocused","attr:ImgTab.align"],
        description:"Specialized StretchImgButton used by TabSet/TabBar for tabs",
        name:"ImgTab",
        seeAlso:[],
        type:"class"
    },
    "attr:DataSourceField.group":{
        ref:"attr:DataSourceField.group",
        flags:"IR",
        description:"For use in ${isc.DocUtils.linkForRef('group:componentSchema')}, indicates what group to place the property in when\n editing in Visual Builder.",
        name:"group",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentSchema"]
    },
    "method:FormItem.click":{
        ref:"method:FormItem.click",
        flags:"",
        description:" Called when this FormItem is clicked on.\n <P>\n Note: <code>click()</code> is available on StaticTextItem, BlurbItems, ButtonItem, and\n derivatives.  Other form items (such as HiddenItem) do not support <code>click()</code>.\n\n",
        name:"click",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "group:eventBubbling":{
        ref:"group:eventBubbling",
        refs:[],
        name:"eventBubbling",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItemIcon.width":{
        ref:"attr:FormItemIcon.width",
        flags:"IRW",
        description:"If set, this property determines the width of this icon in px.\n      If unset the form item's <code>iconWidth</code> property will be used instead.",
        name:"width",
        seeAlso:[
            {ref:"attr:FormItem.iconWidth", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "attr:Scrollbar.trackEndWidth":{
        ref:"attr:Scrollbar.trackEndWidth",
        flags:"IRWA",
        description:"The minimum pixel width of the track end segments (if enabled with showTrackEnds).",
        name:"trackEndWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"12",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "attr:ImgButton.state":{
        flags:"IRWA",
        getter:["getState"],
        type:"attr",
        ref:"attr:ImgButton.state",
        description:"Current \"state\" of this widget. StatefulCanvases will have a different appearance based\n on their current state. By default this is handled by changing the css className applied to\n the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is\n done.<P>\n For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the \n appearance may also be updated by changing the src of the rendered image. See\n ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL \n is modified to reflect the state of the widget in this case.",
        name:"state",
        setter:["setState"],
        valueType:"State",
        seeAlso:[
            {ref:"type:State", description:null},
            {ref:"group:state", description:null}
        ],
        defaultValue:"\"\"",
        groups:["state"],
        definingClass:"class:ImgButton"
    },
    "method:ValuesManager.saveData":{
        ref:"method:ValuesManager.saveData",
        flags:"",
        description:"\n Validate and then save the form's current values to the ${isc.DocUtils.linkForRef('class:DataSource')} this form is\n bound to.\n <p>\n If client-side validators are defined, they are executed first, and if any errors are\n found the save is aborted and the form will show the errors.\n <p>\n If client-side validation passes, a ${isc.DocUtils.linkForRef('class:DSRequest')} will be sent, exactly as though\n ${isc.DocUtils.linkForRef('method:DataSource.addData')} or ${isc.DocUtils.linkForRef('method:DataSource.updateData')} had been called with \n ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','the form's values')} as data.  The\n ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')} will be either \"update\" or \"add\" depending\n on whether values were initially provided via <code>editRecord()</code> or\n <code>editNew()</code>.\n <P>\n On either a client-side or server-side validation failure, validation errors will be\n displayed in the form.  Visible items within a DynamicForms will be redrawn to display\n errors. Validation failure occuring on hidden items, or DataSource fields with no \n associated form items may be handled via ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}\n or ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.validationURL','validationURL')} can be set to do validation against a\n different URL from where the form will ultimately save, as part of an incremental\n upgrade strategy for Struts and Struts-like applications.\n\n",
        name:"saveData",
        seeAlso:[],
        params:[
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('addOperation')}"],
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "group:formIcons":{
        ref:"group:formIcons",
        refs:["method:FormItemIcon.click", "method:FormItemIcon.keyPress", "method:FormItem.iconClick", 
         "method:FormItem.iconKeyPress","object:FormItemIcon", "attr:FormItem.icons", "attr:FormItem.defaultIconSrc", 
         "attr:FormItem.showOverIcons","attr:FormItem.showFocusedIcons", "attr:FormItem.iconVAlign", "attr:FormItem.iconHeight", 
         "attr:FormItem.iconWidth","attr:FormItem.showIcons", "attr:FormItemIcon.src", "attr:FormItemIcon.showOver", 
         "attr:FormItemIcon.showFocused","attr:FormItemIcon.showFocusedWithIcon", "attr:FormItemIcon.neverDisable", 
         "attr:FormItemIcon.width","attr:FormItemIcon.height", "attr:TextAreaItem.iconVAlign"],
        name:"formIcons",
        seeAlso:[],
        type:"group"
    },
    "method:Progressbar.getLength":{
        ref:"method:Progressbar.getLength",
        flags:"",
        description:" Returns the current width of a horizontal progressbar, or height of a vertical progressbar.\n\n",
        name:"getLength",
        seeAlso:[],
        returns:{description:"the length of the progressbar", type:"number"},
        type:"method",
        definingClass:"class:Progressbar"
    },
    "method:Log.setDefaultLogPriority":{
        ref:"method:Log.setDefaultLogPriority",
        flags:"",
        description:" Set the default priority of logging for messages logged on this Class or Instance object.\n All categories for which there is no explicit, instance level logging priority set will\n log at this level on this object.<br>  \n To set the default visible log priority across the entire page, use\n <code>isc.Log.setDefaultPriority()</code> instead.\n",
        name:"setDefaultLogPriority",
        seeAlso:[
            {ref:"classMethod:Log.setPriority", description:null}
        ],
        params:[
            {description:"Category for which the log priority will be updated. If not                          all logs on this canvas will be logged at the priority passed in.", 
             optional:false,name:"category", defaultValue:null, type:"string"},
            {description:"priority level", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:TabBar.baseLineCapSize":{
        ref:"attr:TabBar.baseLineCapSize",
        flags:"IR",
        description:"Set ${isc.DocUtils.linkForRef('attr:StretchImg.capSize')} for the ${isc.DocUtils.linkForRef('group:baseLine')} stretchImg.",
        name:"baseLineCapSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:TabBar",
        groups:["baseLine"]
    },
    "attr:StretchImgButton.showSelectedIcon":{
        ref:"attr:StretchImgButton.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:DetailViewerField.type":{
        ref:"attr:DetailViewerField.type",
        flags:"IR",
        description:"Specifies the type of this DetailViewerField.  By default (value is <code>null</code>)\n the field shows a field title on the left and the field value on the right.  There are\n two special values for this attribute:\n <ul>\n <li>\"header\" - If you specify type \"header\", the field spans both the field name and\n field value columns and contains text defined in the ${isc.DocUtils.linkForRef('attr:DetailViewerField.value')}\n attribute with the style specifed by ${isc.DocUtils.linkForRef('attr:DetailViewer.headerStyle')}.  You can use this\n field type as a titled separator.\n <li>\"separator\" - If you specify type \"separator\", the field spans both the field name\n and the field value columns with no text, and is styled using the style specified via\n ${isc.DocUtils.linkForRef('attr:DetailViewer.separatorStyle')}.  The height of the separator field can be controlled\n via ${isc.DocUtils.linkForRef('attr:DetailViewerField.height')}.\n </ul>",
        name:"type",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:DetailViewerField"
    },
    "classAttr:ValidatorTypes.isOneOf":{
        ref:"classAttr:ValidatorTypes.isOneOf",
        flags:"IR",
        description:"Tests whether the value for this field matches any value from an arbitrary\n list of acceptable values.  The set of acceptable values is specified via\n the <code>list</code> property on the validator, which should be set to an array of\n values. If validator.list is not supplied, the valueMap for the field will be used.\n If there is no valueMap, not providing validator.list is an error.",
        name:"isOneOf",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "method:TabSet.scrollBack":{
        ref:"method:TabSet.scrollBack",
        flags:"",
        description:" If there is not enough space to display all the tabs in this tabSet, this method will \n scroll the previous tab (that first tab that is clipped at the beginning of the tab-bar) \n into view.\n",
        name:"scrollBack",
        seeAlso:[],
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:Button.setBaseStyle":{
        ref:"method:Button.setBaseStyle",
        flags:"",
        description:" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n",
        name:"setBaseStyle",
        seeAlso:[],
        params:[
            {description:"new base style", optional:false, name:"style", defaultValue:null, 
             type:"className"}
        ],
        type:"method",
        definingClass:"class:Button"
    },
    "attr:ListGrid.loadingMessage":{
        ref:"attr:ListGrid.loadingMessage",
        flags:"IR",
        description:"If you have a databound listGrid and you scroll out of the currently loaded dataset, by\n default you will see blank rows until the server returns the data for those rows.  The\n loadingMessage attribute allows you to specify arbitrary html that will be shown in each\n such \"blank\" record while the data for that record is loading.",
        name:"loadingMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\\&nbsp;\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["emptyMessage", "i18nMessages"]
    },
    "method:Array.max":{
        ref:"method:Array.max",
        flags:"",
        description:"\n 			Returns the largest number in the array, skipping non-numeric values.\n\n			If the start and/or end are given, searches the specified subset of the list.\n\n",
        name:"max",
        seeAlso:[],
        params:[
            {description:"optional start index (default is 0)", optional:true, name:"start", 
             defaultValue:null,type:"number"},
            {description:"optional end index (default is list.length)", optional:true, name:"end", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"maximum of all items in the list, or null if all values are non-numeric", 
         type:"number"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "method:Array.getUniqueItems":{
        ref:"method:Array.getUniqueItems",
        flags:"",
        description:" Return a list of each unique item in this list exactly once.\n <P>\n Returns in the same order they were found in the list.\n <P>\n Usage example:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;uniqueList = myArray.getProperty(\"foo\").getUniqueItems();\n\n",
        name:"getUniqueItems",
        seeAlso:[],
        returns:{description:"list of each unique item in the list", type:"array"},
        type:"method",
        definingClass:"object:Array",
        groups:["subset"]
    },
    "method:CubeGrid.facetRemoved":{
        ref:"method:CubeGrid.facetRemoved",
        flags:"",
        description:" Notification fired when a facet is removed.\n \n",
        name:"facetRemoved",
        seeAlso:[
            {ref:"method:CubeGrid.facetAdded", description:"<br><i>methodType</i>  handler"}
        ],
        params:[
            {description:"facetId that was removed", optional:false, name:"facetId", defaultValue:null, 
             type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "method:Array.map":{
        ref:"method:Array.map",
        flags:"",
        description:" Return an array where the value of item <code>i</code> is the result of calling the provided\n function on item <code>i</code> in this array.\n <P>\n The function to call can either be provided directly as a function object, in which case it\n is invoked with the item as the first argument, or can be provided as the String name of a\n method present on each item, which will be invoked.  In the latter case, if any item is null\n or lacks the named method, null will be returned for that item.\n <P>\n Examples:<PRE>\n    // line up widgets at 20 pixels from page edge\n    [widget1, widget2].map(\"setPageLeft\", 20);\n\n    // find furthest right widget\n    [widget1, widget2].map(\"getPageRight\").max();\n </PRE>\n \n",
        name:"map",
        seeAlso:[],
        params:[
            {description:"function object, or name of method", optional:false, name:"method", 
             defaultValue:null,type:"string or function"},
            {description:"arguments to pass to the function or method                                           invoked on each item", 
             optional:true,name:"(arguments 1-N)", defaultValue:null, type:"any"}
        ],
        returns:{description:"array of returned values", type:"array"},
        type:"method",
        definingClass:"object:Array",
        groups:["iteration"]
    },
    "method:Canvas.getSnapTo":{
        ref:"method:Canvas.getSnapTo",
        flags:"",
        description:" Return the snapTo value of this object\n",
        name:"getSnapTo",
        seeAlso:[],
        returns:{description:"snapTo", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "classMethod:Hover.show":{
        ref:"classMethod:Hover.show",
        flags:"",
        description:" Displays a standard Hover canvas containing the specified HTML content.<br>\n This method may also be called to modify the content of the hover if it is already showing.\n Call ${isc.DocUtils.linkForRef('classMethod:Hover.hide')} to hide the canvas again.<br>\n A common use case for calling this method is to asynchronously fetch detail data from the\n server about some component, and display it in the Hover canvas when the data is returned.\n Note that in this case you will typically need to verify that the user is still hovering \n over the component in question before calling Hover.show() - if the user has moved the mouse \n off the component, the information will not apply to whatever is now under the mouse. \n Suggested approaches for handling this are to either use a ${isc.DocUtils.linkForRef('method:Canvas.mouseOut')} handler\n to track when the user moves off the component, or checking ${isc.DocUtils.linkForRef('classMethod:EventHandler.getTarget')}\n as part of the asynchronous callback\n <p>\n The default Hover canvas position will be based on the mouse pointer position, adjusted by\n ${isc.DocUtils.linkForRef('classAttr:Hover.leftOffset')} and ${isc.DocUtils.linkForRef('classAttr:Hover.topOffset')}. If this position would render the\n Hover canvas partially clipped, it will be automatically modified to ensure the Hover \n is entirely visible.\n",
        name:"show",
        seeAlso:[],
        params:[
            {description:"contents for the hover", optional:false, name:"contents", defaultValue:null, 
             type:"html"},
            {description:"object containing attributes for managing the hover canvas'   appearance. Valid properties include:<ul>\n  <li>left, top, width, height\n  <li>baseStyle\n  <li>opacity\n  <li>wrap\n  <li>moveWithMouse [overrides ${isc.DocUtils.linkForRef('classAttr:Hover.moveWithMouse')}]\n </ul>", 
             optional:false,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:Hover"
    },
    "attr:MenuButton.showMenuButtonImage":{
        ref:"attr:MenuButton.showMenuButtonImage",
        flags:"IRW",
        description:"show menu button image (up / down arrowhead) for this menu button",
        name:"showMenuButtonImage",
        setter:["setShowMenuButtonImage"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "method:Date.setFormatter":{
        ref:"method:Date.setFormatter",
        deprecated:"As of SmartClient 5.5 use the static methods              ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')} and \n              ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')} to set default formatters for all dates",
        flags:"",
        description:"  Set the formatter for this date object to the method name passed in.  After this call\n  wherever appropriate SmartClient components will use this formatter function to return \n  the date as a string.\n",
        name:"setFormatter",
        seeAlso:[],
        params:[
            {description:"name of a date formatter method on this Date", optional:false, 
             name:"functionName",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:ListGrid.cellClick":{
        ref:"method:ListGrid.cellClick",
        flags:"",
        description:" Called when a cell receives a click event.\n\n",
        name:"cellClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('cellClicks')}"],
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:Slider.value":{
        ref:"attr:Slider.value",
        flags:"IRW",
        getter:["getValue"],
        description:"The slider value. This value should lie between the minValue and maxValue and increases as\n the thumb is moved up (for a vertical slider) or right (for a horizontal slider) unless\n flipValues is set to true.",
        name:"value",
        setter:["setValue"],
        seeAlso:[
            {ref:"attr:Slider.minValue", description:null},
            {ref:"attr:Slider.maxValue", description:null},
            {ref:"attr:Slider.flipValues", description:null},
            {ref:"attr:Slider.showValue", description:null}
        ],
        valueType:"float",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:Canvas.scrollByPercent":{
        ref:"method:Canvas.scrollByPercent",
        flags:"",
        description:"  Scroll this widget by some percentage of scroll size in either (or both) direction(s).\n\n",
        name:"scrollByPercent",
        seeAlso:[],
        params:[
            {description:"Percentage to scroll horizontally. Will accept either                                      a numeric percent value, or a string like \"10%\".", 
             optional:false,name:"dX", defaultValue:null, type:"number | string"},
            {description:"Percentage to scroll horizontally. Will accept either                                      a numeric percent value, or a string like \"10%\".", 
             optional:false,name:"dY", defaultValue:null, type:"number | string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:Canvas.getVSnapOrigin":{
        ref:"method:Canvas.getVSnapOrigin",
        flags:"",
        description:" Get an offset to be used when calculating snap positioning. Returns 0 by default.\n\n",
        name:"getVSnapOrigin",
        seeAlso:[
            {ref:"method:Canvas.getVSnapPosition", description:null}
        ],
        params:[
            {description:"the child that is being snapped", optional:true, name:"snapChild", 
             defaultValue:null,type:"Canvas"}
        ],
        returns:{description:"The offset to use when snapping", type:"integer"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:FacetValue.collapsed":{
        ref:"attr:FacetValue.collapsed",
        flags:"IR",
        description:"For tree facets, initial collapse state for this node.  Defaults to facet.collapsed",
        name:"collapsed",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"facet.collapsed",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "attr:MenuItem.enabled":{
        ref:"attr:MenuItem.enabled",
        flags:"IR",
        description:"Affects the visual style and interactivity of the menu item.  If set to\n <code>false</code>, the menu item will not respond to mouse rollovers or clicks.\n <p>\n If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.enableIf')} instead.",
        name:"enabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"object:MenuItem",
        groups:["menuBasic"]
    },
    "attr:Canvas.hoverDelay":{
        ref:"attr:Canvas.hoverDelay",
        flags:"IRW",
        description:"If <code>this.canHover</code> is true, how long should the mouse be kept over this\n widget before the hover event is fired",
        name:"hoverDelay",
        seeAlso:[
            {ref:"attr:Canvas.canHover", description:null},
            {ref:"method:Canvas.hover", description:null}
        ],
        valueType:"number",
        defaultValue:"300",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:ResultSet.find":{
        ref:"method:ResultSet.find",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.find')}.  Checks only loaded rows and will not trigger a fetch.\n",
        name:"find",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"first matching object or null if not found", type:"Object"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access", "find"]
    },
    "attr:FormItem.form":{
        ref:"attr:FormItem.form",
        flags:"R",
        description:"A Read-Only pointer to this formItem's DynamicForm widget.",
        name:"form",
        seeAlso:[],
        valueType:"DynamicForm",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem"
    },
    "attr:StretchImgButton.title":{
        flags:"IRW",
        getter:["getTitle"],
        type:"attr",
        ref:"attr:StretchImgButton.title",
        description:"The text title to display in this button.",
        name:"title",
        setter:["setTitle"],
        valueType:"string",
        seeAlso:[],
        defaultValue:"varies",
        groups:["basics"],
        definingClass:"class:StretchImgButton"
    },
    "method:HTMLFlow.setContentsURL":{
        ref:"method:HTMLFlow.setContentsURL",
        flags:"",
        description:" Change the URL this component loads content from.  Triggers a fetch for content from the new\n URL.\n <p>\n Can also be called with no arguments to reload content from the existing ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')}.\n <P>\n This feature relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.\n\n",
        name:"setContentsURL",
        seeAlso:[],
        params:[
            {description:"URL to retrieve contents from", optional:true, name:"url", defaultValue:null, 
             type:"URL"},
            {description:"Parameters to send to the contentsURL.  Merged with                            <code>component.contentsURLParams</code> if both are set.", 
             optional:true,name:"params", defaultValue:null, type:"Object"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('loadHtmlPages')}"],
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "attr:ToolStripResizer.skinImgDir":{
        ref:"attr:ToolStripResizer.skinImgDir",
        flags:"IR",
        description:"Path to resizer image.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"images/ToolStrip/\"",
        type:"attr",
        definingClass:"class:ToolStripResizer"
    },
    "attr:Canvas.scrollbarSize":{
        ref:"attr:Canvas.scrollbarSize",
        flags:"IRWA",
        getter:["getScrollbarSize"],
        description:"How thick should we make the scrollbars for this canvas.<br>\n			NOTE: has no effect if showCustomScrollbars is false.",
        name:"scrollbarSize",
        seeAlso:[
            {ref:"method:Canvas.getScrollbarSize", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:FormItem.setLeft":{
        ref:"method:FormItem.setLeft",
        flags:"A",
        description:" For a form with ${isc.DocUtils.linkForRef('attr:DynamicForm.itemLayout','itemLayout')}:\"absolute\" only, set the left\n coordinate of this form item.\n <P>\n Causes the form to redraw.\n",
        name:"setLeft",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem"
    },
    "classAttr:Dialog.LOGIN_TITLE":{
        ref:"classAttr:Dialog.LOGIN_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed by ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.\n A custom title can alternatively be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"LOGIN_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Please log in\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "classMethod:RPCManager.sendRequest":{
        ref:"classMethod:RPCManager.sendRequest",
        flags:"",
        description:"\n Send the passed <code>RPCRequest</code> to the server.  If queuing is in effect, this queues\n the request instead.\n\n",
        name:"sendRequest",
        seeAlso:[],
        params:[
            {description:"RPCRequest to send to the server", optional:false, name:"rpcRequest", 
             defaultValue:null,type:"RPCRequest Properties"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "classMethod:RPCManager.loginRequired":{
        ref:"classMethod:RPCManager.loginRequired",
        flags:"",
        description:" Called when a session timeout is encountered while trying to do a background RPC.  See\n ${isc.DocUtils.linkForRef('group:relogin','Relogin')}.\n <P>\n The transaction with the passed <code>transactionId</code> is suspended, and should either\n be ${isc.DocUtils.linkForRef('classMethod:RPCManager.clearTransaction','cleared')} or ${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction','resent')}\n after the user has been re-authenticated.  \n <P>\n The <code>rpcRequest</code> parameter can be used to determine whether the suspended\n transaction can simply be dropped (eg, it's periodic polling request).\n <P>\n The <code>rpcResponse</code> parameter has rpcResponse.data set to the raw text of the\n response that triggered <code>loginRequired()</code>.  Some very advanced relogin strategies\n may need to inspect the raw response to get information needed for re-authentication.\n\n",
        name:"loginRequired",
        seeAlso:[],
        params:[
            {description:"id of the transaction", optional:false, name:"transactionNum", 
             defaultValue:null,type:"id"},
            {description:"first RPCRequest of the transaction", optional:false, name:"rpcRequest", 
             defaultValue:null,type:"RPCRequest"},
            {description:"RPCResponse containing the session timeout response that                                  caused loginRequired() to be invoked", 
             optional:false,name:"rpcResponse", defaultValue:null, type:"RPCResponse"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager",
        groups:["relogin"]
    },
    "attr:ListGridField.inputFormat":{
        ref:"attr:ListGridField.inputFormat",
        flags:"IRWA",
        description:"For fields of type <code>\"date\"</code>, if this is an editable listGrid, this property \n allows you to specify the ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} applied to the editor \n for this field.",
        name:"inputFormat",
        seeAlso:[
            {ref:"attr:ListGridField.displayFormat", description:null}
        ],
        valueType:"DateInputFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "method:Canvas.keyPress":{
        ref:"method:Canvas.keyPress",
        flags:"A",
        description:"\n Executed when a key is pressed and released on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}:\n true). \n <P>\n Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that\n was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine\n whether modifier keys were down.\n\n",
        name:"keyPress",
        seeAlso:[
            {ref:"attr:Canvas.canFocus", description:null}
        ],
        returns:{description:"false to suppress native behavior in response to the keyPress, and prevent                    this event from bubbling to this widget's parent, or true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('keyboardEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:StatefulCanvas.setDisabled":{
        ref:"method:StatefulCanvas.setDisabled",
        flags:"A",
        description:" Enable or disable this object\n",
        name:"setDisabled",
        seeAlso:[],
        params:[
            {description:"true if this widget is to be disabled", optional:false, name:"disabled", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["enable", "state"]
    },
    "method:CubeGrid.facetLabelOut":{
        ref:"method:CubeGrid.facetLabelOut",
        flags:"",
        description:"    StringMethod handler fired when mouseout occurs over a facet label\n  <br><i>methodType</i> handler\n",
        name:"facetLabelOut",
        seeAlso:[],
        params:[
            {description:"ID of the appropriate facet", optional:false, name:"facetId", 
             defaultValue:null,type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "method:Selection.deselect":{
        ref:"method:Selection.deselect",
        flags:"",
        description:"			Deselect a particular item\n",
        name:"deselect",
        seeAlso:[],
        params:[
            {description:"object to select", optional:false, name:"item", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:MenuButton.menuAnimationEffect":{
        ref:"attr:MenuButton.menuAnimationEffect",
        flags:"IRWA",
        description:"Allows you to specify an animation effect to apply to the menu when it is being shown.\n Valid options are \"none\" (no animation), \"fade\", \"slide\" and \"wipe\".\n If unspecified falls through to <code>menu.showAnimationEffect</code>",
        name:"menuAnimationEffect",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "type:Selected":{
        ref:"type:Selected",
        values:[
            {description:"StatefulCanvas should show focused state", value:"StatefulCanvas.FOCUSED"},
            {description:"StatefulCanvas is selected", value:"StatefulCanvas.SELECTED"},
            {description:"StatefulCanvas is not selected", value:"StatefulCanvas.UNSELECTED"}
        ],
        description:null,
        name:"Selected",
        seeAlso:[],
        type:"type",
        groups:["state"]
    },
    "attr:DateChooser.alternateStyleSuffix":{
        ref:"attr:DateChooser.alternateStyleSuffix",
        flags:"IRW",
        description:"The text appended to the style name when using ${isc.DocUtils.linkForRef('attr:DateChooser.alternateWeekStyles')}.",
        name:"alternateStyleSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Dark\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:FormItem.focusInItem":{
        ref:"method:FormItem.focusInItem",
        flags:"",
        description:"			Move the keyboard focus into this item's focusable element\n",
        name:"focusInItem",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling", "focus"]
    },
    "method:Class.observe":{
        ref:"method:Class.observe",
        flags:"",
        description:" Take an arbitrary action whenever a method is called on an instance.<br><br>\n\n When you observe some method of another object, eg:<br>\n			<code>thisObject.observe(thatObject, \"someMethod\", \"observer.foo()\")</code><br><br>\n\n When <code>thatObject.someMethod()</code> is called,<br>\n			<code>thisObject.foo()</code> <br>\n will be called automatically, after the observed method completes.<br><br>\n\n Action is typically a string expression.  Available variables:\n <ul>\n    <li> observed: target of the observation, that is, object passed to observe()\n    <li> observer: object that observes, that is, object that observe() was called on\n    <li> returnVal: return value of observed function\n </ul>\n\n An unlimited number of observers can observe any message, they will all be notified\n automatically in the order that the observations were set up.<br><br>\n\n NOTES: \n - observation also works on JavaScript Array objects\n - a method may trigger an observation of itself by another object, either through code \n   within the method itself or within an observer's action.  In this case the observation\n   will be set up, but the new observation action will not fire as part of this thread.\n   When the method is called again in the future the newly added observer will be fired.\n\n\n",
        name:"observe",
        seeAlso:[
            {ref:"method:Class.ignore", description:null}
        ],
        params:[
            {description:"object to observe", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"name of the method to observe", optional:false, name:"methodName", 
             defaultValue:null,type:"string"},
            {description:"String for the function to call.										In this string, \n											<code>observer</code> is the object that is observing, \n											<code>this</code> is the object that is being observed\n\n										If <code>action</code> is not specified, \n											<code>observer.methodName()</code> will be called.", 
             optional:true,name:"action", defaultValue:null, type:"string"}
        ],
        returns:{description:"true == observation set up, false == observation not set up", type:"boolean"},
        type:"method",
        definingClass:"class:Class",
        groups:["observation"]
    },
    "method:ListGrid.getRecord":{
        ref:"method:ListGrid.getRecord",
        flags:"A",
        description:" Return the pointer to a particular record by record number.\n Synonym for ${isc.DocUtils.linkForRef('method:ListGrid.getCellRecord')}.\n",
        name:"getRecord",
        seeAlso:[
            {ref:"method:ListGrid.getCellRecord", description:null},
            {ref:"method:ListGrid.getEditedRecord", description:null}
        ],
        params:[
            {description:"row index of record to return.", optional:false, name:"recordNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"Record object for the row.", type:"ListGridRecord"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:MenuItem.dynamicTitle":{
        ref:"attr:MenuItem.dynamicTitle",
        flags:"IR",
        description:"A string of script that is evaluated to a string value for the item's title property\n whenever the menu is shown or a shortcut key is pressed.\n <p>\n If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.title')} instead.",
        name:"dynamicTitle",
        seeAlso:[],
        valueType:"expression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('menuDynamicItems')}"],
        definingClass:"object:MenuItem",
        groups:["dynamicMenuItem"]
    },
    "attr:TabSet.rightEdgeOffsets":{
        ref:"attr:TabSet.rightEdgeOffsets",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeOffsets</code>, \n <code>rightEdgeOffsets</code>, <code>topEdgeOffsets</code> and <code>bottomEdgeOffsets</code> \n propertes allow the offsets of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"rightEdgeOffsets",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:Window.closeButton":{
        ref:"attr:Window.closeButton",
        flags:"R",
        description:"Button show in the header that will close this Window by calling ${isc.DocUtils.linkForRef('method:Window.closeClick')}.",
        name:"closeButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:ListGrid.canPickFields":{
        ref:"attr:ListGrid.canPickFields",
        flags:"IRW",
        description:"Indicates whether the field picker item and submenu should be present in the header\n context menu",
        name:"canPickFields",
        seeAlso:[],
        valueType:"Boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "attr:TabSet.showPartialEdges":{
        ref:"attr:TabSet.showPartialEdges",
        flags:"IRA",
        description:"If the paneContainer for this tab set is showing ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}, setting this\n attribute to <code>true</code> will set the paneContainer to show\n ${isc.DocUtils.linkForRef('attr:Canvas.customEdges','customEdges')} for the three sides opposing the tabBarPosition.",
        name:"showPartialEdges",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:DataBoundComponent.useAllDataSourceFields":{
        ref:"attr:DataBoundComponent.useAllDataSourceFields",
        flags:"IRW",
        description:"If true, the set of fields given by the \"default binding\" (see \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}) is used, with any fields specified in\n <code>component.fields</code> acting as overrides that can suppress or modify the\n display of individual fields, without having to list the entire set of fields that\n should be shown.\n <P>\n If <code>component.fields</code> contains fields that are not found in the DataSource,\n they will be shown after the most recently referred to DataSource field.  If the new\n fields appear first, they will be shown first.\n <P>\n ${isc.DocUtils.linkForExampleId('validationFieldBinding', 'This example')} shows a mixture of component\n fields and DataSource fields, and how they interact for validation.",
        name:"useAllDataSourceFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('validationFieldBinding')}"],
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "attr:Canvas.snapAxis":{
        ref:"attr:Canvas.snapAxis",
        flags:"IRW",
        description:"Describes which axes to apply snap-to-grid to.\n Valid values are Canvas.HORIZONTAL, Canvas.VERTICAL and Canvas.BOTH",
        name:"snapAxis",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"attr:Canvas.snapResizeToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapResizeToGrid", description:null}
        ],
        valueType:"string",
        defaultValue:"Canvas.BOTH",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:TabSet.scrollerHSrc":{
        ref:"attr:TabSet.scrollerHSrc",
        flags:"IR",
        description:"If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and \n ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, this property governs the base\n URL for the tab bar back and forward scroller button images for horizontal tab bars [IE for\n tab sets with ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} set to \"top\" or \"bottom\"].\n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, \n ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} will be used instead.\n <P>\n To get the path to the image to display, this base URL will be modified as follows:\n <ul>\n <li>If appropriate a state suffix of <code>\"Down\"</code> or <code>\"Disabled\"</code> will be\n     appended.</li>\n <li>A suffix of <code>\"forward\"</code> or <code>\"back\"</code> will be appended for the\n     forward or backward scrolling button.</li>\n </ul>\n For example - if the scrollerHSrc is set to <code>\"[SKIN]hscroll.gif\"</code>, the image\n displayed for the back-scroller button on a tabSet with <code>tabBarPosition</code> set to\n \"top\" and <code>symmetricScroller</code> set to true would be one of \n <code>\"[SKIN]hscroll_back.gif\"</code>, <code>\"[SKIN]hscroll_Down_back.gif\"</code>,\n and <code>\"[SKIN]hscroll_Disabled_back.gif\"</code>.\n <P>\n Note that for best results the media should be sized to match the scroller button sizes, \n determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}.",
        name:"scrollerHSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricScroller", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]hscroll.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "method:Canvas.setClassName":{
        ref:"method:Canvas.setClassName",
        deprecated:"As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('method:Canvas.setStyleName')} instead.",
        flags:"A",
        description:" Sets the CSS class for this widget\n",
        name:"setClassName",
        seeAlso:[],
        params:[
            {description:"new CSS class name (must be defined previously)", optional:false, 
             name:"newClass",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "group:dynamicLoading":{
        ref:"group:dynamicLoading",
        refs:[],
        name:"dynamicLoading",
        seeAlso:[],
        type:"group"
    },
    "attr:MenuButton.showMenuBelow":{
        ref:"attr:MenuButton.showMenuBelow",
        flags:"IRW",
        description:"The menu drops down below the menu button.\n			Set to false if the menu should appear above the menu button.",
        name:"showMenuBelow",
        setter:["setShowMenuBelow"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "attr:TextAreaItem.width":{
        ref:"attr:TextAreaItem.width",
        flags:"IRW",
        description:"default width of this item",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"150",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["appearance"]
    },
    "attr:RestDataSource.xmlRecordXPath":{
        ref:"attr:RestDataSource.xmlRecordXPath",
        flags:"IR",
        description:"<code>recordXPath</code> mapping to the data node of XML returned by the server.\n Applies if this.dataFormat is set to <code>\"xml\"</code>.<br>\n The default value will pick up data from a response structured as follows:<br>\n <pre>\n &lt;response&gt;\n    &lt;status&gt;0&lt;/status&gt;\n    &lt;data&gt;\n      &lt;record&gt;\n          &lt;field1&gt;value&lt;/field1&gt;\n          &lt;field2&gt;value&lt;/field2&gt;\n      &lt;/record&gt;\n      &lt;record&gt;\n          &lt;field1&gt;value&lt;/field1&gt;\n          &lt;field2&gt;value&lt;/field2&gt;\n      &lt;/record&gt;\n    &lt;/data&gt;\n &lt;/response&gt;\n </pre>",
        name:"xmlRecordXPath",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"/response/data/*\"",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:DynamicForm.titleOrientation":{
        ref:"attr:DynamicForm.titleOrientation",
        flags:"IRW",
        description:"Default orientation for titles for items in this form.  ${isc.DocUtils.linkForRef('type:TitleOrientation')}\n lists valid options.\n <P>\n Note that titles on the left or right take up a cell in tabular\n ${isc.DocUtils.linkForRef('group:formLayout','form layouts')}, but titles on top do not.",
        name:"titleOrientation",
        seeAlso:[],
        valueType:"TitleOrientation",
        defaultValue:"\"left\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formLayoutTitles')}"],
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "attr:TabSet.paneContainerClassName":{
        ref:"attr:TabSet.paneContainerClassName",
        flags:"IRW",
        description:"CSS style used for the paneContainer.",
        name:"paneContainerClassName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "class:ComboBoxItem":{
        methods:["method:ComboBoxItem.defaultDynamicValue", "method:ComboBoxItem.fetchData", 
         "method:ComboBoxItem.getDisplayFieldName","method:ComboBoxItem.getValueFieldName", "method:ComboBoxItem.getSelectedRecord", 
         "method:ComboBoxItem.getPickListFilterCriteria","method:ComboBoxItem.getClientPickListData", 
         "method:ComboBoxItem.filterClientPickListData","method:ComboBoxItem.dataArrived"],
        type:"class",
        ref:"class:ComboBoxItem",
        classAttrs:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        classMethods:[],
        description:"The Combobox is a text input field which can show a list of options via a drop-down\n PickList.\n <p>\n The set of options will be filtered based on the current value in the text field, so only\n options that match what has been typed so far will be displayed.\n The set of options can be derived from a ValueMap or dynamically retrieved from a\n dataSource.  See the ${isc.DocUtils.linkForRef('interface:PickList')} interface for further settings.\n <P>\n Note that to select the first option as a default value for the item,\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} may be set.",
        attrs:["attr:ComboBoxItem.defaultValue", "attr:ComboBoxItem.defaultToFirstOption", 
         "attr:ComboBoxItem.showPickerIcon","attr:ComboBoxItem.pickerIconWidth", "attr:ComboBoxItem.pickerIconHeight", 
         "attr:ComboBoxItem.pickerIconSrc","attr:ComboBoxItem.showPickListOnKeypress", "attr:ComboBoxItem.completeOnTab", 
         "attr:ComboBoxItem.optionDataSource","attr:ComboBoxItem.pickListFields", "attr:ComboBoxItem.optionFilterContext", 
         "attr:ComboBoxItem.displayField","attr:ComboBoxItem.valueField", "attr:ComboBoxItem.filterLocally", 
         "attr:ComboBoxItem.pickListCriteria","attr:ComboBoxItem.showOptionsFromDataSource", "attr:ComboBoxItem.pickListProperties", 
         "attr:ComboBoxItem.autoFetchData","attr:ComboBoxItem.filterWithValue", "attr:ComboBoxItem.textMatchStyle", 
         "attr:ComboBoxItem.showAllOptions","attr:ComboBoxItem.separatorRows"],
        implementsInterfaces:["PickList"],
        name:"ComboBoxItem",
        seeAlso:[
            {ref:"interface:PickList", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('listComboBox')}", 
         "${isc.DocUtils.linkForExampleId('listComboBox')}"]
    },
    "group:enable":{
        ref:"group:enable",
        title:"Enabling and Disabling",
        refs:["method:FormItem.setDisabled", "method:FormItem.isDisabled", "method:FormItem.enable", 
         "method:FormItem.disable","method:StatefulCanvas.setDisabled", "method:Button.setDisabled", 
         "method:ImgButton.setDisabled","method:StretchImgButton.setDisabled", "method:Canvas.setEnabled", 
         "method:Canvas.setDisabled","method:Canvas.enable", "method:Canvas.disable", "method:Canvas.isDisabled", 
         "method:Canvas.isEnabled","attr:Canvas.disabled", "attr:Canvas.enabled"],
        description:"Disabled components do not respond to mouse or keyboard events, and change appearance to\n indicate they are disabled.",
        name:"enable",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.hiliteCell":{
        ref:"method:CubeGrid.hiliteCell",
        flags:"",
        description:"\n      apply a hilite to a specific cell.\n      Note: can be called either as \n          hiliteCell(cellObject, hiliteID) or \n          hiliteCell(row, column, hiliteID)\n\n      <br><i>methodType</i> action\n",
        name:"hiliteCell",
        seeAlso:[],
        params:[
            {description:"cell to hilite / row of cell to hilite", optional:false, name:"cellObj", 
             defaultValue:null,type:"cell object | row number"},
            {description:"hilite ID / column of cell to hilite", optional:false, name:"hiliteID", 
             defaultValue:null,type:"string | column number"},
            {description:"optional third parameter - hilite ID.", optional:true, name:"", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true if the cell was successfully hilited.", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "method:ComboBoxItem.getPickListFilterCriteria":{
        ref:"method:ComboBoxItem.getPickListFilterCriteria",
        flags:"A",
        description:" Returns filter criteria for options displayed for this item.  \n <P>\n The criteria returned by this method are used to decide which options should appear in\n the drop-down ${isc.DocUtils.linkForRef('interface:PickList')} shown by this ComboBox.\n <P>\n While the user is typing in a value, this method will return the typed-in value as part\n of the criteria, so that only matching values are shown.  Matching is determined by the\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.textMatchStyle','textMatchStyle')}.  \n <P>\n If the user explicitly shows the down-down pickList, via either clicking on the drop\n down icon or use the <i>Ctrl+Arrow Down</i> key combo, the typed in value is ignored for\n filtering.\n <P>\n If included in the criteria, the typed in value will be included as a value for the \n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.displayField','displayField')} (or for the\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.valueField','valueField')} if <code>this.displayField</code> is\n unspecified).\n <P>\n Static criteria, specified via ${isc.DocUtils.linkForRef('attr:ComboBoxItem.pickListCriteria','pickListCriteria')},\n will always be included.\n <P>\n If you are implementing your own <code>getPickListFilterCriteria()</code> the\n <b>read-only</b> property ${isc.DocUtils.linkForRef('attr:ComboBoxItem.filterWithValue','this.filterWithValue')} can\n be read to determine whether the ComboBox would ordinarily ignore the typed-in value for\n filtering.  Note that in addition to cases where the user explicitly shows the pickList,\n <code>filterWithValue</code> will also be <code>true</code> during a call to \n ${isc.DocUtils.linkForRef('method:ComboBoxItem.fetchData')} on a databound comboBox.\n    \n",
        name:"getPickListFilterCriteria",
        seeAlso:[],
        returns:{description:"criteria to be used for databound or local filtering", type:"Criteria"},
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "method:GridRenderer.rowDoubleClick":{
        ref:"method:GridRenderer.rowDoubleClick",
        flags:"A",
        description:" Called when a row receives a double click event.\n\n",
        name:"rowDoubleClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:CanvasItem.canvas":{
        ref:"attr:CanvasItem.canvas",
        flags:"IRW",
        description:"The canvas that will be displayed inside this item.  You can pass an instance you've \n already created, or its global ID as a String.  If none is passed, one will be \n auto-created using the overrideable defaults: ${isc.DocUtils.linkForRef('attr:CanvasItem.canvasProperties')} and\n ${isc.DocUtils.linkForRef('attr:CanvasItem.canvasConstructor')}",
        name:"canvas",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CanvasItem"
    },
    "attr:DataSource.testData":{
        ref:"attr:DataSource.testData",
        flags:"IR",
        description:"For a client-only DataSource, a set of records to use as a dataset, specified as an\n Array of JavaScript Objects.\n <P>\n See ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','this discussion')} for ways to populate a\n client-only DataSource with test data.",
        name:"testData",
        seeAlso:[
            {ref:"attr:DataSource.clientOnly", description:null}
        ],
        valueType:"Array of Object",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('localDataSource')}"],
        definingClass:"class:DataSource",
        groups:["clientOnlyDataSources"]
    },
    "type:ControlName":{
        ref:"type:ControlName",
        values:[
            {description:"A button to make the current selection bold.", value:"\"boldSelection\""},
            {description:"A button to make the current selection italic.", 
             value:"\"italicSelection\""},
            {description:"A button to make the current selection underlined.", 
             value:"\"underlineSelection\""},
            {description:"A select item allowing the user to change the font of the current                     text selection.", 
             value:"\"fontSelector\""},
            {description:"A select item allowing the user to change the font                       size of the current text selection.", 
             value:"\"fontSizeSelector\""},
            {description:"A button to left-align the selected text.", value:"\"alignLeft\""},
            {description:"A button to right-align the selected text.", value:"\"alignRight\""},
            {description:"A button to center the selected text", value:"\"alignCenter\""},
            {description:"A button to justify the selected line of text.", value:"\"justify\""},
            {description:"A color-picker allowing the user to set the text color", value:"\"color\""},
            {description:"A color picker allowing the user to set the text background  color", 
             value:"\"backgroundColor\""}
        ],
        description:"<code>ControlNames</code> are strings used to specify which UI controls should appear\n  in the editor toolbar.<br>",
        name:"ControlName",
        seeAlso:[],
        type:"type"
    },
    "attr:ListGrid.editOnFocus":{
        ref:"attr:ListGrid.editOnFocus",
        flags:"IRWA",
        description:"Should we start editing when this widget recieves focus (if this ListGrid supports\n editing)?\n <P>\n Note that this property being set to true will cause editing to occur on a single\n click, even if ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent')} is <code>\"doubleClick\"</code>, because single clicking\n the grid will place keyboard focus there automatically.",
        name:"editOnFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Canvas.mouseMove":{
        ref:"method:Canvas.mouseMove",
        flags:"A",
        description:"\n Executed when the mouse moves within this widget.  No default implementation.\n\n",
        name:"mouseMove",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customMouseEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:Scrollbar.showCorner":{
        ref:"attr:Scrollbar.showCorner",
        flags:"IRWA",
        description:"If true, displays a corner piece at the bottom end of a vertical scrollbar, or the\n          right end of a horizontal scrollbar. This is typically set only when both horizontal\n          and vertical scrollbars are displayed and about the same corner.",
        name:"showCorner",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Scrollbar",
        groups:["appearance"]
    },
    "class:LayoutSpacer":{
        methods:[],
        ref:"class:LayoutSpacer",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:[],
        description:"Add a LayoutSpacer to a Layout to take up space just like a normal member, without actually\n drawing anything.  Semantically equivalent to using an empty canvas, but higher performance\n for this particular use case.",
        name:"LayoutSpacer",
        seeAlso:[],
        type:"class"
    },
    "attr:Window.bodyConstructor":{
        ref:"attr:Window.bodyConstructor",
        flags:"IRWA",
        description:"The name of the widget class (as a string) to use for the body. If unset the appropriate\n constructor type will be determined as follows:<br>\n - if ${isc.DocUtils.linkForRef('attr:Window.items')} is defined as an array of widgets, and ${isc.DocUtils.linkForRef('attr:Window.contentLayout')} \n   is not set to <code>\"none\"</code>, bodyConstructor defaults to a ${isc.DocUtils.linkForRef('class:VLayout')}<br>\n - if ${isc.DocUtils.linkForRef('attr:Window.src')} is set, bodyConstructor defaults to an ${isc.DocUtils.linkForRef('class:HTMLFlow')}<br>\n - otherwise bodyConstructor will default to a simple ${isc.DocUtils.linkForRef('class:Canvas')}<br>\n Note that if this property is overridden for some window, the specified constructor \n should be a subclass of one of these defaults to ensure the window renders out as \n expected.",
        name:"bodyConstructor",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "method:ValuesManager.rememberValues":{
        ref:"method:ValuesManager.rememberValues",
        flags:"A",
        description:"			Make a snapshot of the current set of values, so we can reset to them later.\n			Creates a new object, then adds all non-method properties of values\n			to the new object.  Use <code>resetValues()</code> to revert to these values.\n          Note that this method is automatically called when the values for this form are\n          set programmatically via a call to ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.\n\n",
        name:"rememberValues",
        seeAlso:[],
        returns:{description:"copy of current form values", type:"object"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:Menu.autoDraw":{
        ref:"attr:Menu.autoDraw",
        flags:"IRWA",
        description:"Menus will not draw on initialization, until they're explicitly show()n",
        name:"autoDraw",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Menu"
    },
    "attr:TreeGrid.data":{
        ref:"attr:TreeGrid.data",
        flags:"IRW",
        description:"A ${isc.DocUtils.linkForRef('class:Tree')} object containing of nested ${isc.DocUtils.linkForRef('object:TreeNode')}s to \n display as rows in this TreeGrid.  \n The <code>data</code> property will typically not be explicitly specified for \n databound TreeGrids, where the data is returned from the server via databound component\n methods such as <code>fetchData()</code>",
        name:"data",
        setter:["setData"],
        seeAlso:[],
        valueType:"Tree",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["data"]
    },
    "group:errorIcon":{
        ref:"group:errorIcon",
        refs:["attr:FormItem.errorIconHeight", "attr:FormItem.errorIconWidth", 
         "attr:FormItem.errorIconSrc","attr:FormItem.showErrorIcon"],
        name:"errorIcon",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.chartData":{
        ref:"method:ListGrid.chartData",
        flags:"",
        description:" Chart the data in this listGrid as a multi-series chart.\n <P>\n Each row provides a series of data.  Each series of data is labelled by a value from one\n column, called the <code>labelField</code>.  \n <P>\n For example, cell values are sales figures, and fields are \"Product\", \"August\",\n \"September\", \"October\".  In this case each row gives a series: sales figures for each of 3\n months.  The <code>labelField</code> in this case is the \"Product\" field, meaning each row\n represents sales figures for each of 3 months for a particular product.  This dataset\n can be charted via any multi-series chart: stacked or clustered bar or column chart, line\n chart with multiple lines, or area chart (stacked lines).\n <P>\n By default, all visible fields other than the label field are assumed to be labels for\n series values, but an explicit list of fields can be provided as <code>dataFields</code>.\n <P>\n By default, all data is charted if all data is loaded, otherwise, data visible in the\n viewport is charted.  An explicit set of rows can be provided via <code>dataRows</code>.\n \n",
        name:"chartData",
        seeAlso:[],
        params:[
            {description:"name of the field", optional:false, name:"labelField", defaultValue:null, 
             type:"String"},
            {description:"optional list of fields to use as labels.  By      default, all fields are used.", 
             optional:true,name:"dataFields", defaultValue:null, type:"Array of String"},
            {description:"set of records to chart.  Can be obtained by eg      ${isc.DocUtils.linkForRef('method:ResultSet.getRange','grid.data.getRange()')}.", 
             optional:true,name:"dataRows", defaultValue:null, type:"Array of ListGridRecord"},
            {description:"properties to pass to the created chart", optional:true, 
             name:"chartProperties",defaultValue:null, type:"Chart Properties"},
            {description:"if true, use the labelField as the \"first\" set of labels,      for example, as the bar labels in a stacked bar chart, whereas the second set of labels\n      would appear as the legend.", 
             optional:true,name:"labelFieldFirst", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"created Chart instance", type:"Chart"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('gridCharting')}"],
        definingClass:"class:ListGrid"
    },
    "attr:DateChooser.showCancelButton":{
        ref:"attr:DateChooser.showCancelButton",
        flags:"IRW",
        description:"Determines whether the \"Cancel\" button will be displayed.",
        name:"showCancelButton",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:FormItem.top":{
        ref:"attr:FormItem.top",
        flags:"IRWA",
        description:"Top coordinate of this item in pixels.  Applies only when the containing DynamicForm\n sets <code>itemLayout:\"absolute\"</code>.",
        name:"top",
        setter:["setTop"],
        seeAlso:[],
        valueType:"integer",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:FormItem"
    },
    "attr:FormItem.hint":{
        ref:"attr:FormItem.hint",
        flags:"IRWA",
        description:"Specifies \"hint\" string to show next to the form item to indicate something to the user.\n This string generally appears to the right of the form item.",
        name:"hint",
        seeAlso:[
            {ref:"attr:FormItem.hintStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formHints')}"],
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:List.addList":{
        ref:"method:List.addList",
        flags:"",
        description:" Add a list of items to this array.\n <P>\n Note: you can specify that a subset range be added by passing start and end indices\n\n",
        name:"addList",
        seeAlso:[],
        params:[
            {description:"list of items to add", optional:false, name:"list", defaultValue:null, 
             type:"array"},
            {description:"optional start index in list", optional:true, name:"listStartRow", 
             defaultValue:null,type:"number"},
            {description:"optional end index in list (non-inclusive)", optional:true, 
             name:"listEndRow",defaultValue:null, type:"number"}
        ],
        returns:{description:"list of items that were added", type:"list"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "method:Canvas.showNextTo":{
        ref:"method:Canvas.showNextTo",
        flags:"",
        description:" Show this widget next to another widget.\n",
        name:"showNextTo",
        seeAlso:[],
        params:[
            {description:"Canvas to show next to", optional:false, name:"otherWidget", 
             defaultValue:null,type:"Canvas"},
            {description:"which side to show on, defaults to \"right\"", optional:true, name:"side", 
             defaultValue:null,type:"String"}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "classMethod:Page.isRTL":{
        ref:"classMethod:Page.isRTL",
        flags:"",
        description:"\n Return whether the page text direction is right to left.  If you set \"DIR=RTL\" in the BODY tag of\n the page, then this method will return true.  If you set \"DIR=LTR\" then this method will return\n false.\n    \n",
        name:"isRTL",
        seeAlso:[],
        returns:{description:"true if Page text direction is RTL, false otherwise", type:"boolean"},
        type:"classMethod",
        definingClass:"class:Page"
    },
    "method:GridRenderer.getCellCSSText":{
        ref:"method:GridRenderer.getCellCSSText",
        flags:"A",
        description:" Return CSS text for styling this cell, which will be applied in addition to the CSS class\n for the cell, as overrides.\n <p>\n \"CSS text\" means semicolon-separated style settings, suitable for inclusion in a CSS\n stylesheet or in a STYLE attribute of an HTML element.\n\n",
        name:"getCellCSSText",
        seeAlso:[
            {ref:"method:GridRenderer.getCellStyle", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS text for this cell", type:"string"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "method:Scrollbar.setScrollTarget":{
        ref:"method:Scrollbar.setScrollTarget",
        flags:"",
        description:"          Sets or clears the scrollbar's scrollTarget. If no argument is provided, then the\n          scrollTarget will be set to the scrollbar itself.\n\n",
        name:"setScrollTarget",
        seeAlso:[],
        params:[
            {description:"target canvas to be scrolled", optional:true, name:"newTarget", 
             defaultValue:null,type:"Canvas"}
        ],
        type:"method",
        definingClass:"class:Scrollbar",
        groups:["scroll"]
    },
    "attr:ServerObject.dropExtraFields":{
        ref:"attr:ServerObject.dropExtraFields",
        flags:"IR",
        description:"By default, for DMI DSResponses, DSResponse.data is filtered on the server to just the set\n of fields defined on the DataSource.  This behavior can be overridden in several ways - see\n the overview in ${isc.DocUtils.linkForRef('class:DMI')} for details.  The value of this attribute overrides\n ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')}.",
        name:"dropExtraFields",
        seeAlso:[],
        valueType:"Boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "method:FormItemIcon.click":{
        ref:"method:FormItemIcon.click",
        flags:"",
        description:"      StringMethod action to fire when this icon is clicked\n      If unset the form item's <code>iconClick</code> method will be fired instead (if\n      specified).\n",
        name:"click",
        seeAlso:[],
        params:[
            {description:"The Dynamic Form to which this icon's item belongs.", optional:false, 
             name:"form",defaultValue:null, type:"DynamicForm"},
            {description:"The Form Item containing this icon", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"},
            {description:"A pointer to the form item icon clicked", optional:false, name:"icon", 
             defaultValue:null,type:"FormItemIcon"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('formIcons')}"],
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "attr:ListGrid.longTextEditorType":{
        ref:"attr:ListGrid.longTextEditorType",
        flags:"IRW",
        description:"When the length of the field specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} exceeds \n <code>this.longTextEditorThreshold</code> show an edit field of this type\n rather than the standard text field when the field enters inline edit mode.",
        name:"longTextEditorType",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"PopUpTextAreaItem\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Canvas.keepInParentRect":{
        ref:"attr:Canvas.keepInParentRect",
        flags:"IRWA",
        description:"Constrains drag-resizing and drag-repositioning of this canvas to either the rect of its\n parent (if set to true) or an arbitrary rect (if set to a [Left,Top,Width,Height] rect\n array).  If this canvas has no parent, constrains dragging to within the browser window.\n <p>\n Affects target and outline dragAppearance, not tracker.\n <p>\n Note: keepInParentRect affects only user drag interactions, not programmatic moves.",
        name:"keepInParentRect",
        seeAlso:[],
        valueType:"boolean or rect",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:SectionStack.headerHeight":{
        ref:"attr:SectionStack.headerHeight",
        flags:"IR",
        description:"Height of headers for sections.",
        name:"headerHeight",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "classMethod:isA.RegularExpression":{
        ref:"classMethod:isA.RegularExpression",
        flags:"",
        description:"\n	Is <code>object</code> a Regular Expression (RegExp) object?\n\n",
        name:"RegularExpression",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Boolean", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:ActiveXControl.codeBase":{
        ref:"attr:ActiveXControl.codeBase",
        flags:"IR",
        description:"Specifies the URL from which to load the ActiveX control.",
        name:"codeBase",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ActiveXControl"
    },
    "attr:DataBoundComponent.dataPageSize":{
        ref:"attr:DataBoundComponent.dataPageSize",
        flags:"IRW",
        description:"When using data paging, how many records to fetch at a time.  The value of this\n attribute is passed on to the auto-constructed ${isc.DocUtils.linkForRef('class:ResultSet')} object for this\n component.  In effect, this gives you control over the ${isc.DocUtils.linkForRef('attr:ResultSet.resultSize')}\n attribute for this component.",
        name:"dataPageSize",
        seeAlso:[
            {ref:"attr:ResultSet.resultSize", description:null}
        ],
        valueType:"number",
        defaultValue:"75",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "method:Array.addAt":{
        ref:"method:Array.addAt",
        flags:"",
        description:" Add a single item to this array at a specific position in the list, sliding other items over\n to fit.\n\n",
        name:"addAt",
        seeAlso:[],
        params:[
            {description:"object to add", optional:false, name:"obj", defaultValue:null, type:"object"},
            {description:"position in the list to add at", optional:false, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"object that was added", type:"object"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "attr:ListGrid.skinImgDir":{
        ref:"attr:ListGrid.skinImgDir",
        flags:"IRWA",
        description:"Where do 'skin' images (those provided with the class) live?",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"images/ListGrid/\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance", "images"]
    },
    "attr:FacetValue.align":{
        ref:"attr:FacetValue.align",
        flags:"IR",
        description:"Default alignment for facet label title, and cells for this facetValue.\n Can be overridden by setting titleAlign or cellAlign on the facetValue.",
        name:"align",
        seeAlso:[],
        valueType:"alignEnum",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "attr:RestDataSource.addDataURL":{
        ref:"attr:RestDataSource.addDataURL",
        flags:"IR",
        description:"Custom dataURL for add type operations",
        name:"addDataURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:TreeGrid.nodeIcon":{
        flags:"IRW",
        type:"attr",
        ref:"attr:TreeGrid.nodeIcon",
        description:"The filename of the default icon for all leaf nodes in this treeGrid. To specify a \n custom image for an individual node, set the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')} directly on\n the node.",
        name:"nodeIcon",
        setter:["setNodeIcon"],
        valueType:"SCImgURL",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        defaultValue:"\"[SKIN]file.gif\"",
        groups:["treeIcons"],
        definingClass:"class:TreeGrid"
    },
    "classMethod:Timer.setTimeout":{
        ref:"classMethod:Timer.setTimeout",
        flags:"",
        description:"    \n Execute an action in a given amount of time.  This method wraps the native setTimeout() method,\n correcting for browser-specific memory leaks.\n\n",
        name:"setTimeout",
        seeAlso:[
            {ref:"classMethod:Timer.clear", description:null}
        ],
        params:[
            {description:"Function to be called when delay has elapsed. \n				     Can also be a string representation of an expression.\n	    			 Passing a string is preferred.", 
             optional:false,name:"action", defaultValue:null, type:"string expression or function"},
            {description:"Time until action is executed (in milliseconds). If not specified, the                       default is 100 milliseconds.", 
             optional:false,name:"delay", defaultValue:null, type:"number"}
        ],
        returns:{description:"Reference to the timerEvent created. Note that this reference is provided 							 only so that it can be used as an argument for Timer.clear().", 
         type:"timerEvent"},
        type:"classMethod",
        definingClass:"class:Timer"
    },
    "attr:Facet.titleAlign":{
        ref:"attr:Facet.titleAlign",
        flags:"IR",
        description:"Alignment of facet label title",
        name:"titleAlign",
        seeAlso:[
            {ref:"attr:CubeGrid.facetTitleAlign", description:null}
        ],
        valueType:"alignEnum",
        defaultValue:"cubeGrid.facetTitleAlign",
        type:"attr",
        definingClass:"class:Facet"
    },
    "class:MultiFilePicker":{
        methods:[],
        ref:"class:MultiFilePicker",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items/MultiFileItem"],
        attrs:[],
        description:"The MultiFilePicker is a pop-up picker used by the ${isc.DocUtils.linkForRef('class:MultiFileItem')} to allow the user to\n enter several files for upload.",
        name:"MultiFilePicker",
        seeAlso:[],
        type:"class",
        groups:["upload"]
    },
    "method:Layout.removeMember":{
        ref:"method:Layout.removeMember",
        flags:"",
        description:"\n Removes the specified member from the layout. If it has a resize bar, the bar will be\n destroyed.\n\n",
        name:"removeMember",
        seeAlso:[],
        params:[
            {description:"the canvas to be removed from the layout", optional:false, name:"member", 
             defaultValue:null,type:"canvas"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "method:StretchImgButton.getTitle":{
        ref:"method:StretchImgButton.getTitle",
        flags:"A",
        description:" Return the title - text/HTML drawn inside the component.\n <p>\n Default is to simply return this.title.\n",
        name:"getTitle",
        seeAlso:[],
        returns:{description:"HTML for the title", type:"string"},
        type:"method",
        definingClass:"class:StretchImgButton"
    },
    "attr:StretchImgButton.showRollOverIcon":{
        ref:"attr:StretchImgButton.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:ToolStripSeparator.hSrc":{
        ref:"attr:ToolStripSeparator.hSrc",
        flags:"IRW",
        description:"Image for horizontally oriented separator (for vertical toolstrips).",
        name:"hSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]hseparator.png\"",
        type:"attr",
        definingClass:"class:ToolStripSeparator"
    },
    "attr:Layout.overflow":{
        ref:"attr:Layout.overflow",
        flags:"IR",
        description:"Normal ${isc.DocUtils.linkForRef('type:Overflow')} settings can be used on layouts, for example, an\n overflow:auto Layout will scroll if members exceed its specified size, whereas an\n overflow:visible Layout will grow to accomodate members.",
        name:"overflow",
        seeAlso:[],
        valueType:"Overflow",
        defaultValue:"\"visible\"",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "method:DynamicForm.getErrors":{
        ref:"method:DynamicForm.getErrors",
        flags:"",
        description:" Returns the current set of validation errors for this form.\n",
        name:"getErrors",
        seeAlso:[],
        returns:{description:"Errors are returned as an object of the format<br> <code>{fieldName:errors, fieldName:errors}</code><br>\n where each <code>errors</code> object will be either an error message string or an array\n of error message strings.", 
         type:"object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "method:Canvas.animateResize":{
        ref:"method:Canvas.animateResize",
        flags:"",
        description:" Animate a resize of this canvas from its current size to the specified size\n",
        name:"animateResize",
        seeAlso:[],
        params:[
            {description:"new width (or null for unchanged)", optional:false, name:"width", 
             defaultValue:null,type:"number"},
            {description:"new height (or null for unchanged)", optional:false, name:"height", 
             defaultValue:null,type:"number"},
            {description:"When the resize completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated resize", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration effect to apply to the resize", optional:true, 
             name:"acceleration",defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateResize')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:StretchImgButton.capSize":{
        ref:"attr:StretchImgButton.capSize",
        flags:"IRW",
        description:"How big are the end pieces by default",
        name:"capSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"12",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["appearance"]
    },
    "attr:ListGrid.initialCriteria":{
        ref:"attr:ListGrid.initialCriteria",
        flags:"IR",
        description:"Criteria to be used when ${isc.DocUtils.linkForRef('attr:ListGrid.autoFetchData')} is set.",
        name:"initialCriteria",
        seeAlso:[],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "attr:GridRenderer.scrollRedrawDelay":{
        ref:"attr:GridRenderer.scrollRedrawDelay",
        flags:"IRW",
        description:"While drag scrolling in an incrementally rendered grid, time in milliseconds to wait\n before redrawing, after the last mouse movement by the user.",
        name:"scrollRedrawDelay",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"75",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["performance"]
    },
    "attr:ListGridRecord.enabled":{
        ref:"attr:ListGridRecord.enabled",
        flags:"IR",
        description:"Affects the visual style and interactivity of the record.  If set to <code>false</code>\n the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the\n mouse moves over it, nor will it respond to mouse clicks.",
        name:"enabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('disabledRows')}"],
        definingClass:"object:ListGridRecord"
    },
    "attr:Label.showSelectedIcon":{
        ref:"attr:Label.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "attr:DSRequest.resultSet":{
        ref:"attr:DSRequest.resultSet",
        flags:"R",
        description:"For advanced use in integrating dataset paging with web services,\n the ResultSet that issued this \"fetch\" DSRequest is automatically made available as the\n <code>resultSet</code> property.\n <P>\n This property can only be read.  There is no meaning to setting this property\n yourself.",
        name:"resultSet",
        seeAlso:[],
        valueType:"ResultSet",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "classAttr:Date.shortDayNames":{
        ref:"classAttr:Date.shortDayNames",
        flags:"IRWA",
        description:"This property may be set to an array of names of days of the week. <br>\n For example:\n <pre>\n [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n </pre>\n The appropriate day name will then be returned from ${isc.DocUtils.linkForRef('method:Date.getShortDayName')}, and may \n be used whenever SmartClient components display day-names (for example in the \n ${isc.DocUtils.linkForRef('class:DateItem','DateItem class')}).<br>\n Note: For US based applications the first item in the array should be the name for Sunday, \n then Monday, Tuesday, etc. For browsers with different locales this may vary. \n To determine the first day for some locale, you can run the following code:\n <pre>\n    alert(new Date(2000, 0, 2).getDay());\n </pre>\n You should see an alert with a number between zero and 6. This represents the numerical\n 'day' value for Sunday for your browser's locale, since Jan 2nd 2000 was a Sunday. \n Therefore if this code alerted the number 6, Sunday should appear last in your list \n of day-names, and Monday first.",
        name:"shortDayNames",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"null",
        type:"classAttr",
        definingClass:"class:Date",
        groups:["i18nMessages"]
    },
    "method:DynamicForm.fetchData":{
        ref:"method:DynamicForm.fetchData",
        flags:"",
        description:" Retrieve data that matches the provided criteria, and edit the first record returned\n \n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "attr:Window.headerStyle":{
        ref:"attr:Window.headerStyle",
        flags:"IRWA",
        description:"Style for the Window header.",
        name:"headerStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"WindowHeader\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:ListGrid.headerButtonConstructor":{
        ref:"attr:ListGrid.headerButtonConstructor",
        flags:"IR",
        description:"Widget class for this ListGrid's header buttons. If unset constructor will be \n picked up directly standard ${isc.DocUtils.linkForRef('class:Toolbar')} button constructor.",
        name:"headerButtonConstructor",
        seeAlso:[],
        valueType:"Class",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:DateChooser.nextYearIconHeight":{
        ref:"attr:DateChooser.nextYearIconHeight",
        flags:"IRW",
        description:"Height of the icon for the next year button",
        name:"nextYearIconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:SectionStack.animateSections":{
        ref:"attr:SectionStack.animateSections",
        flags:"IRW",
        description:"If true, sections are animated during expand/collapse and addition/removal of\n SectionItems is likewise animated.",
        name:"animateSections",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('animateSections')}"],
        definingClass:"class:SectionStack",
        groups:["animation"]
    },
    "method:List.containsAll":{
        ref:"method:List.containsAll",
        flags:"",
        description:" Return whether this list contains all the item in the specified list.\n\n",
        name:"containsAll",
        seeAlso:[],
        params:[
            {description:"items to look for", optional:false, name:"list", defaultValue:null, 
             type:"List"}
        ],
        returns:{description:"whether all items were found", type:"boolean"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:ListGridField.editorValueIconHeight":{
        ref:"attr:ListGridField.editorValueIconHeight",
        flags:"IRW",
        description:"When some cell in this field is being edited, setting this property will specify the\n height for value icons in the cell's editor. If unset, the editor's valueIcon width and\n height will be determined in the same way as it would be for a static cell.",
        name:"editorValueIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:CubeGrid.cellAlign":{
        ref:"attr:CubeGrid.cellAlign",
        flags:"IRW",
        description:"default align for cell values (in body)",
        name:"cellAlign",
        seeAlso:[],
        valueType:"alignEnum",
        defaultValue:"\"center\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "method:Tree.getFolders":{
        ref:"method:Tree.getFolders",
        flags:"",
        description:"\n Returns all the first-level folders of a node.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getFolders",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"List of immediate children that are folders", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:Canvas.getScrollWidth":{
        ref:"method:Canvas.getScrollWidth",
        flags:"A",
        description:" Returns the scrollable width of the widget's contents, including children, ignoring\n clipping.\n",
        name:"getScrollWidth",
        seeAlso:[],
        returns:{description:"the scrollable width of the widget's contents", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "classMethod:isc.showLoginDialog":{
        ref:"classMethod:isc.showLoginDialog",
        flags:"",
        description:" Handle a complete login interaction with a typical login dialog asking for username and\n password credentials.\n <P>\n As with other convenience methods that show Dialogs, such as ${isc.DocUtils.linkForRef('classMethod:isc.warn')},\n the dialog is shown and the function immediately returns.  When the user responds, the\n provided callback function is called.\n <P>\n If the user clicks the \"Log in\" button, the credentials entered by the user are passed to\n the provided \"loginFunc\" as an Object with properties \"username\" and \"password\" (NOTE: both\n property names are all lowercase), as the variable \"credentials\".  For example:\n <pre>{ username: \"barney\", password: \"rUbbL3\" }</pre>\n <P>\n The \"loginFunc\" should then attempt to log in by whatever means is necessary.  The second\n parameter to the loginFunc, \"dialogCallback\", is a function, which must be called <i>whether\n login succeeds or fails</i> with a true/false value indicating whether login succeeded.\n <P>\n If the login dialog is dismissable (settable as properties.dismissable, default false) and\n the user dismisses it, the loginFunc will be fired with null for the credentials.\n <P>\n The following code shows typical usage.  This code assumes you have created a global\n function sendCredentials() that send credentials to some authentication system and fires a\n callback function with the result:\n <pre>\n isc.showLoginDialog(function (credentials, dialogCallback) {\n     if (credentials == null) return; // dismissed\n\n     // send credentials    \n     sendCredentials(credentials, function (loginSucceeded) {\n         // report success or failure\n         dialogCallback(loginSucceeded);\n     })\n })\n </pre>\n The login dialog has several built-in behaviors:\n <ul>\n <li> keyboard focus is automatically placed in the username field\n <li> hitting enter in the username field proceeds to the password field\n <li> hitting enter in the password field submits (fires the provided callback)\n </ul>\n In addition to normal properties supported by Dialog/Window, the following special\n properties can be passed:\n <ul>\n <li><code>username</code>: initial value for the username field\n <li><code>password</code>: initial value for the password field\n <li><code>usernameTitle</code>: title for the username field\n <li><code>passwordTitle</code>: title for the password field\n <li><code>errorMessage</code>: default error message on login failure\n <li><code>loginButtonTitle</code>: title for the login button\n <li><code>dismissable</code>: whether the dialog can be dismissed, default false\n <li><code>errorStyle</code>: CSS style for the error message, if shown\n </ul>\n See below for links to the default values for these properties.\n\n",
        name:"showLoginDialog",
        seeAlso:[
            {ref:"classAttr:Dialog.LOGIN_TITLE", description:null},
            {ref:"classAttr:Dialog.USERNAME_TITLE", description:null},
            {ref:"classAttr:Dialog.PASSWORD_TITLE", description:null},
            {ref:"classAttr:Dialog.LOGIN_BUTTON_TITLE", description:null},
            {ref:"classAttr:Dialog.LOGIN_ERROR_MESSAGE", description:null}
        ],
        params:[
            {description:"Function to call to attempt login.  Recieves parameters                                      \"credentials\" and \"dialogCallback\", described above", 
             optional:false,name:"loginFunc", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog", optional:true, name:"properties", 
             defaultValue:null,type:"Dialog properties"}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "method:Array.min":{
        ref:"method:Array.min",
        flags:"",
        description:"          \n 			Returns the smallest number in the array, skipping non-numeric values.\n\n			If the start and/or end are given, searches the specified subset of the list.\n\n",
        name:"min",
        seeAlso:[],
        params:[
            {description:"optional start index (default is 0)", optional:true, name:"start", 
             defaultValue:null,type:"number"},
            {description:"optional end index (default is list.length)", optional:true, name:"end", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"minimum of all items in the list, or null if all values are non-numeric", 
         type:"number"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "method:ListGrid.getCellAlign":{
        ref:"method:ListGrid.getCellAlign",
        flags:"",
        description:" Return the horizontal alignment for cell contents. Default implementation returns \n ${isc.DocUtils.linkForRef('attr:ListGridField.cellAlign')} if specified, otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.align')}.\n\n",
        name:"getCellAlign",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null}
        ],
        params:[
            {description:"this cell's record", optional:false, name:"record", defaultValue:null, 
             type:"listGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"Horizontal alignment of cell contents: 'right', 'center', or 'left'", 
         type:"string"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:Canvas.parentResized":{
        ref:"method:Canvas.parentResized",
        flags:"",
        description:" Fires when the interior size of the parent changes, including parent resize and\n scrollbar introduction or removal \n <p>\n This method allows a child to implement a layout policy that can be used within any \n parent, such as a Resizer component that always snaps to the parent's\n bottom-right corner.  The default implementation of this method applies a child's\n percent sizes, if any, or implements layout based on the ${isc.DocUtils.linkForRef('attr:Canvas.snapTo')} property\n",
        name:"parentResized",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:FormItem.endRow":{
        ref:"attr:FormItem.endRow",
        flags:"IRW",
        description:"Whether this item should end the row it's in in the form layout",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "method:Button.action":{
        ref:"method:Button.action",
        flags:"",
        description:" This property contains the default 'action' for the Button to fire when activated.\n",
        name:"action",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button"
    },
    "group:serverDataIntegration":{
        ref:"group:serverDataIntegration",
        title:"Server DataSource Integration",
        treeLocation:["Concepts/Client-Server Integration", "Java Server Reference"],
        refs:["attr:DataSource.dataFormat", "attr:DataSource.requestProperties", 
         "attr:DataSource.serverType","attr:DataSource.tableName", "attr:DataSource.dbName", "attr:DataSource.serverObject", 
         "attr:OperationBinding.requestProperties","type:DSDataFormat", "type:DSServerType"],
        description:"Server Data Integration means:\n <ul>\n <li> You ${isc.DocUtils.linkForRef('group:iscInstall','install')} the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Java\n Server')} into any J2SE/J2EE environment\n <li> You ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create DataSources')} in either XML or JavaScript,\n possibly on-the-fly from ${isc.DocUtils.linkForRef('group:metadataImport','existing metadata')}.  \n <li> When you bind ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable UI components')} to these\n DataSources, the ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} issued by these components will be\n transmitted to the server using a proprietary HTTP-based protocol, and the DataSource\n responses likewise sent back via a proprietary protocol\n <li> You will use SmartClient server APIs to receive the request data as Java Objects, and\n you will provide response data as Java Objects\n </ul>\n This approach is in contrast to \n ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side Data Integration')}, which does not require the\n SmartClient server, and in which client-side DataSources are configured to directly send and\n receive HTTP messages containing XML, JSON or other content.\n <P>\n <B>Handling DataSource Requests</B>\n <P>\n Client-side ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} will send\n ${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')} to the ISC server as background communications transparent to\n the user.  Integrating SmartClient's DataSource layer with your data model is a matter of\n handling these DSRequests and sending back DSResponses, in order to fulfill the 4 basic\n operations of the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Protocol')}.\n <P>\n There are two approaches for routing inbound dsRequests to your business logic:\n <dl>\n <dt>RPCManager dispatch</dt>\n <dd>inbound requests are handled by a single dispatcher implemented as a Java servlet or\n .jsp.  The ${isc.DocUtils.linkForRef('class:RPCManager')} is used to retrieve requests and provide responses</dd>\n <dt>${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation')}</dt>\n <dd>XML declarations route requests to existing business logic methods.  Inbound request\n data is adapted to method parameters, and method return values are delivered as\n responses</dd>\n </dl>\n <P>\n Which approach you use is largely a matter of preference.  Direct Method Invocation (DMI)\n may allow simple integration without writing any SmartClient-specific server code.\n RPCManager dispatch integration provides an earlier point of control, allowing logic that\n applies across different DataSource operations to be shared more easily.\n <P>\n Whether using RPCManager dispatch or DMI request routing, you must return data which, \n translated to JavaScript via the rules described in com.isomorphic.js.JSTranslater.toJS(),\n matches the ${isc.DocUtils.linkForRef('group:dataSourceOperations','response data required for the operationType')}.\n <P>\n For example, for a \"fetch\" request, your return data should translate to an Array of\n JavaScript objects.  Your backend may be capable of returning data in a number of ways - you\n should compare each format you can readily retrieve against the capabilities of the\n JSTranslater.  Common options are to pass an XML document fragment or a Collection of Java\n Beans/POJOs directly to DSResponse.setData().\n <p>\n For \"update\" and \"add\" DataSource requests, the inbound data is intended to be permanently\n stored.  If you are using a DataSource specified in XML format, you can run the validators\n you declared in the DataSource by calling the DSRequest.validate() method.  Assuming the\n declared validation is passed, you can run custom validation logic, if any, and finally\n create or update objects in your object model.  If you are using Beans/POJOs, the method\n DataSource.applyProperties(map, bean) is an easy way to apply the validated values to an\n Object tree or XML structure.\n <P>\n For more information on the DMI subsystem, see the ${isc.DocUtils.linkForRef('class:DMI')} class and the \n <a href='/examples/server_integration/#customDataSourceIntegrationDMI' onclick=\"window.open('/examples/server_integration/#customDataSourceIntegrationDMI');return false;\">DMI example</a> in\n the SDK.\n <P>\n Note that, as you continue to integrate your prototype with your backend, you can use a\n mixture of DataSources that have been fully integrated with your backend and DataSources\n that are either running in \"client-only\" mode (see ${isc.DocUtils.linkForRef('group:clientOnlyDataSources')}) or\n that use ISC's built-in SQL connectivity (see ${isc.DocUtils.linkForRef('group:sqlDataSource')}).\n <P>\n <b>RPCManager dispatch</b>\n <P>\n The basic flow of logic for handling DataSource requests using RPCManager dispatch is:\n <P>\n <table class=\"normal\" border=1>\n <tr>\n <td>1. Get current list of requests from the client.</td>\n <td>rpcManager.getRequests()</td>\n </tr>\n\n <tr>\n <td>2. Determine operation type (Fetch, Add, Update, Remove) for a single request.</td>\n <td>dsRequest.getOperationType()</td>\n </tr>\n\n <tr>\n <td>3. Get inbound values (Add, Update) and/or criteria (Fetch, Update, Remove) for this\n request.</td>\n <td>dsRequest.getFieldValue()<br>\n dsRequest.getValues()<br> \n dsRequest.getCriteria()</td>\n </tr>\n\n <tr>\n <td>4. Business logic, validation, calls to data and service tiers... anything you can code.\n </td>\n <td><b>execute custom logic</b></td>\n </tr>\n\n <tr>\n <td>5. Set status and data for the response.</td>\n <td>dsResponse.setStatus()<br>\n dsResponse.setData()</td>\n </tr>\n\n <tr>\n <td>6. Send response to the client.</td>\n <td>rpcManager.send()</td>\n </tr>\n </table>\n <P>\n For more information, see the ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}, and the \n <a href='/examples/server_integration/#customDataSourceIntegration' onclick=\"window.open('/examples/server_integration/#customDataSourceIntegration');return false;\">RPCManager example</a>.",
        name:"serverDataIntegration",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeGrid.customIconOpenProperty":{
        ref:"attr:TreeGrid.customIconOpenProperty",
        flags:"IRWA",
        description:"For folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),\n this property allows the developer to specify on a per-node basis whether a\n open state icon should be displayed when the folder is open.\n Set <code>node[treeGrid.customIconOpenProperty]</code> to true to show the open state\n icons, or false to suppress this.<br>\n If not specified this this behavior is determined by <code>treeGrid.showCustomIconOpen</code>\n for this node.",
        name:"customIconOpenProperty",
        seeAlso:[
            {ref:"attr:TreeGrid.customIconProperty", description:null},
            {ref:"attr:TreeGrid.showCustomIconOpen", description:null}
        ],
        valueType:"string",
        defaultValue:"\"showOpenIcon\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:Window.resizer":{
        ref:"attr:Window.resizer",
        flags:"R",
        description:"ImgButton-based resizer, shown in the footer.",
        name:"resizer",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:DataBoundComponent.useFlatFields":{
        ref:"attr:DataBoundComponent.useFlatFields",
        flags:"IR",
        description:"The <code>useFlatFields</code> flag causes all simple type fields anywhere in a nested\n set of DataSources to be exposed as a flat list for form binding.  \n <P>\n <code>useFlatFields</code> is typically used with imported metadata, such as \n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','XML Schema')} from a \n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL','WSDL-described web servce')}, as a means of eliminating levels of XML\n nesting that aren't meaningful in a user interface, without the cumbersome and fragile\n process of mapping form fields to XML structures.\n <P>\n For example, having called ${isc.DocUtils.linkForRef('method:WebService.getInputDS')} to retrieve the input message\n schema for a web service operation whose input message looks like this:\n <pre>\n &lt;FindServices&gt;\n     &lt;searchFor&gt;search text&lt;/searchFor&gt;\n     &lt;Options&gt;\n         &lt;caseSensitive&gt;false&lt;/caseSensitive&gt;\n     &lt;/Options&gt;\n     &lt;IncludeInSearch&gt;\n         &lt;serviceName&gt;true&lt;/serviceName&gt;\n         &lt;documentation&gt;true&lt;/documentation&gt;\n         &lt;keywords&gt;true&lt;/keywords&gt;\n     &lt;/IncludeInSearch&gt;\n &lt;/FindServices&gt;\n </pre>\n Setting <code>useFlatFields</code> on a ${isc.DocUtils.linkForRef('class:DynamicForm')} that is bound to this input\n message schema would result in 5 ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} reflecting the 5 simple type\n fields in the message.\n <P>\n For this form, the result of ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')} might look\n like:\n <P>\n <pre>{\n    searchFor: \"search text\",\n    caseSensitive: false,\n    serviceName: true,\n    documentation : true,\n    keywords : true\n }</pre>\n When contacting a ${isc.DocUtils.linkForRef('class:WebService','WSDL web service')}, these values can be automatically\n mapped to the structure of the input message for a web service operation by setting\n ${isc.DocUtils.linkForRef('attr:WSRequest.useFlatFields')} (for use with ${isc.DocUtils.linkForRef('method:WebService.callOperation')}) or by setting\n ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')} (for use with a ${isc.DocUtils.linkForRef('class:DataSource')} that is\n ${isc.DocUtils.linkForRef('group:wsdlBinding','bound to a WSDL web service')} via\n ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')}).  \n <P>\n Using these two facilities in conjunction (component.useFlatFields and\n request.useFlatFields) allows gratuitous nesting to be consistently bypassed in both the user\n presentation and in the actual XML messaging.\n <P>\n You can also set ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} to automatically enable \n \"flattened\" XML serialization (request.useFlatFields) for all DataSource requests of a\n particular operationType.\n <P>\n Note that <code>useFlatFields</code> is not generally recommended for use with structures\n where multiple simple type fields exist with the same name, however if used with such a\n structure, the first field to use a given name wins.  \"first\" means the first field\n encountered in a depth first search.  \"wins\" means only the first field will be present as a\n field when data binding.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:DataBoundComponent"
    },
    "method:Img.setImageType":{
        ref:"method:Img.setImageType",
        flags:"",
        description:" Change the style of image rendering.\n\n",
        name:"setImageType",
        seeAlso:[],
        params:[
            {description:"new style of image rendering", optional:false, name:"imageType", 
             defaultValue:null,type:"ImageStyle"}
        ],
        type:"method",
        definingClass:"class:Img"
    },
    "classAttr:Page.defaultUnsupportedBrowserURL":{
        ref:"classAttr:Page.defaultUnsupportedBrowserURL",
        flags:"IRWA",
        description:"On a call to <code>Page.checkBrowserAndRedirect()</code>, if no explicit URL\n      is passed in, and the browser is not supported by ISC, redirect to this URL.",
        name:"defaultUnsupportedBrowserURL",
        seeAlso:[
            {ref:"classMethod:Page.checkBrowserAndRedirect", description:null}
        ],
        valueType:"URL",
        defaultValue:"\"[SKIN]/unsupported_browser.html\"",
        type:"classAttr",
        definingClass:"class:Page",
        groups:["files"]
    },
    "classMethod:isc.clearPrompt":{
        ref:"classMethod:isc.clearPrompt",
        flags:"",
        description:"\n	Clear the modal prompt being shown to the user.\n\n",
        name:"clearPrompt",
        seeAlso:[
            {ref:"classAttr:Dialog.Prompt", description:null}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "group:compression":{
        ref:"group:compression",
        title:"Compression",
        treeLocation:["Optional Modules/Network Performance"],
        refs:[],
        description:"Compression helps reduce the sizes of various data fetched from the server.  Most modern web\n browsers can handle compressed responses of certain content types. The time it takes to\n decompress these responses on a client system is negligible compared to the time saved\n by reducing the number of bits on the wire, especially for slow connections.\n <p>\n If you're not using the SmartClient Java back-end, there are several compression solutions\n available, depending on your server of choice.  Microsoft's IIS has built-in compression\n capability, please check the reference manual for details.  If you're using Apache, you can\n use <a href='http://sourceforge.net/projects/mod-gzip/' onclick=\"window.open('http://sourceforge.net/projects/mod-gzip/');return false;\">mod_gzip</a> or \n use <a href='http://httpd.apache.org/docs/2.0/mod/mod_deflate.html' onclick=\"window.open('http://httpd.apache.org/docs/2.0/mod/mod_deflate.html');return false;\">mod_deflate</a>.  Some\n servlet containers also natively support dynamic compression.\n <p>\n The SmartClient Java back-end supports two types of response compression:\n <ul>\n <li>Pre-compressed static content served via the ISC FileDownload servlet.\n <li>On-the-fly compression of arbitrary content using the CompressionFilter.\n </ul>\n <u>Serving pre-compressed files</u>\n <p>\n To serve pre-compressed static content via FileDownload, register the FileDownload servlet\n in your web.xml as follows:\n <pre>\n     &lt;servlet&gt;\n       &lt;servlet-name&gt;FileDownload&lt;/servlet-name&gt;\n       &lt;servlet-class&gt;com.isomorphic.servlet.FileDownload&lt;/servlet-class&gt;\n     &lt;/servlet&gt;\n </pre>\n Then map any resource that you want to serve compressed to the FileDownload servlet in your\n web.xml.  Typically, you'll want to serve all SmartClient modules compressed.  You can do so\n by adding the following servlet-mapping directive to your web.xml:\n <pre>\n     &lt;servlet-mapping&gt;\n       &lt;servlet-name&gt;FileDownload&lt;/servlet-name&gt;\n       &lt;url-pattern&gt;/isomorphic/system/modules/*&lt;/url-pattern&gt;\n     &lt;/servlet-mapping&gt;\n </pre>\n Finally, you'll need to create pre-compressed versions of your files alongside the\n uncompressed versions.  If you're using the FileAssembler mechanism, it can create\n pre-compressed files for you automatically.  For all other files, you can use any program\n that uses the gzip encoding.  The compressed file must have exactly the same filename as the\n uncompressed version, with a '.gz' extension.  Note that it's important that both the\n compressed and uncompressed versions be present alongside each other because there are cases\n where serving compressed content is not possible (for example HTTP 1.0 requests) - for those\n situations it's important that the uncompressed files be available to be served to the\n client.  The FileDownload filter automatically detects whether or not compression is\n possible.\n <p>\n <u>Dynamic Compression</u>\n <p>\n Dynamic Compression requires the optional Network Performance module.  To use Dynamic\n Compression, register the CompressionFilter filter in your web.xml as follows:\n <pre>\n     &lt;filter&gt;\n         &lt;filter-name&gt;CompressionFilter&lt;/filter-name&gt;\n         &lt;filter-class&gt;com.isomorphic.servlet.CompressionFilter&lt;/filter-class&gt;\n     &lt;/filter&gt;\n </pre>\n Then map any resource that you want dynamically compressed to this filter.  Note that the\n CompressionFilter knows the mime types that are compressible and will automatically ignore\n any stream that sets a content-encoding header, and it automatically figures out if the\n current request is an include or forward (and doesn't compress in that case), so it's safe\n to simply map it to all resources as follows:\n <pre>\n     &lt;filter-mapping&gt;\n         &lt;filter-name&gt;CompressionFilter&lt;/filter-name&gt;\n         &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n     &lt;/filter-mapping&gt;\n </pre>\n You can register the CompressionFilter anywhere in your filter chain, but be aware that\n if any filters in front wrap and inspect the HttpServletResponse output stream, they will\n be inspecting the compressed response.  Filters are typically applied in the order in which\n they are listed in web.xml. \n <p>\n <u>Compressable mime types and compatibility</u>\n <p>\n The FileDownload servlet and CompressionFilter filter can serve the following mime-types\n compressed: text/html, text/xml, application/x-javascript, text/javascript, text/ecmascript,\n image/svg+xml.  If your files are not being compressed, make sure your servlet container\n has a mime type mapping that identifies it as one of the above file types.\n <p>\n Compression for the mime types listed above is supported on all browsers supported by\n SmartClient.  There is one exception: compression of javascript files for IE versions older\n than IE6 Service Pack 2 requires that the CompressionFilter be registerd to dynamically\n compress the page that loads these javascript files.",
        name:"compression",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGridRecord.canDrag":{
        ref:"attr:ListGridRecord.canDrag",
        flags:"IR",
        description:"When set to <code>false</code>, this record cannot be dragged. If canDrag is false for\n any record in the current selection, none of the records will be draggable.",
        name:"canDrag",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridRecord"
    },
    "attr:Canvas.animateScrollAcceleration":{
        ref:"attr:Canvas.animateScrollAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated scroll.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateScrollAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:HeaderItem.defaultValue":{
        ref:"attr:HeaderItem.defaultValue",
        flags:"IRW",
        description:"Header text",
        name:"defaultValue",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"Header\"",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "attr:Window.footer":{
        ref:"attr:Window.footer",
        flags:"R",
        description:"Optional footer for the window, providing space for a resizer and status bar.",
        name:"footer",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:SectionHeader.baseStyle":{
        ref:"attr:SectionHeader.baseStyle",
        flags:"IRA",
        description:"CSS class for the section header.",
        name:"baseStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"sectionHeader\"",
        type:"attr",
        definingClass:"class:SectionHeader"
    },
    "attr:ListGridField.valueIcons":{
        ref:"attr:ListGridField.valueIcons",
        flags:"IRW",
        description:"This property is a mapping between data values and URLs of icons to display.\n If specified, for every cell in this field where the data value matches an entry in\n the valueIcons map, an icon with the appropriate URL will be displayed.<br>\n By default any editors displayed for this field will have the same valueIcons object\n applied to them. This may be overridden by explicitly setting \n ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueIcons')}.<br>\n Note that the following attributes related to valueIcon styling will also be picked up\n by the editor from the ListGridField object unless explicitly specified via the\n equivalent <code>editor_</code> attributes:<br>\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')}<br>\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconHeight')}<br>\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}<br>\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconLeftPadding')}<br>\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconRightPadding')}<br>            \n ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')}<br>    \n ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLSuffix')}",
        name:"valueIcons",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:DataSource.dataTransport":{
        ref:"attr:DataSource.dataTransport",
        flags:"IR",
        description:"Transport to use for all operations on this DataSource. Defaults to\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  This would typically only be set to\n enable \"scriptInclude\" transport for contacting ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} web\n services hosted on servers other than the origin server.\n <p>\n When using the \"scriptInclude\" transport, be sure to set ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')} or\n ${isc.DocUtils.linkForRef('attr:OperationBinding.callbackParam')} to match the name of the query parameter name expected\n by your JSON service provider.",
        name:"dataTransport",
        seeAlso:[
            {ref:"type:RPCTransport", description:null},
            {ref:"attr:DataSource.callbackParam", description:null}
        ],
        valueType:"RPCTransport",
        defaultValue:"RPCManager.defaultTransport",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "class:ServerObject":{
        methods:[],
        ref:"class:ServerObject",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/RPC"],
        attrs:["attr:ServerObject.lookupStyle", "attr:ServerObject.className", "attr:ServerObject.ID", 
         "attr:ServerObject.bean","attr:ServerObject.attributeName", "attr:ServerObject.attributeScope", 
         "attr:ServerObject.visibleMethods","attr:ServerObject.dropExtraFields"],
        description:"The ServerObject tells the ISC server how to find or create a server-side object involved in\n ${isc.DocUtils.linkForRef('class:DMI')} (Direct Method Invocation).  \n <p>\n A ServerObject declaration appears in the XML definition of a ${isc.DocUtils.linkForRef('class:DataSource')} (for\n responding to ${isc.DocUtils.linkForRef('class:DSRequest')}s) or in an Application configuration file (.app.xml) for\n responding to ${isc.DocUtils.linkForRef('class:RPCRequest')}s.",
        name:"ServerObject",
        seeAlso:[
            {ref:"class:DMI", description:null}
        ],
        type:"class",
        requiresModules:["SCServer"]
    },
    "group:jsStringTag":{
        ref:"group:jsStringTag",
        title:"&lt;isomorphic:jsString&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i>JavaScript\n <p>\n This tag takes everything in its body and outputs a correctly-escaped JavaScript string.\n This is useful for capturing HTML for display in a Canvas or Label, for example.\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>var</b><br>\n <i>value format</i>: Any legal egal JavaScript variable name\n <i>default value</i>: NONE\n <p>\n If specified, the escaped string is assigned to a newly created variable of the specified\n name.  e.g: var foo = \"bar\";\n <p>\n <b>filename</b><br>\n <i>value format</i>: webRoot-relative path to file\n <i>default value</i>: NONE\n <p>\n If specified, the resulting string contents is loaded from the specified file instead of\n from the tag body.",
        name:"jsStringTag",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:ValuesManager.hasErrors":{
        ref:"method:ValuesManager.hasErrors",
        flags:"",
        description:" Are there any errors associated with any fields in this valuesManager?\n",
        name:"hasErrors",
        seeAlso:[],
        returns:{description:"returns true if there are any oustanding validation errors, false                   otherwise.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "method:Slider.setValue":{
        ref:"method:Slider.setValue",
        flags:"",
        description:" Sets the slider value to newValue and moves the slider thumb to the appropriate position for this\n value. Sends the 'sliderMove' event to the sliderTarget.\n\n",
        name:"setValue",
        seeAlso:[],
        params:[
            {description:"the new value", optional:false, name:"newValue", defaultValue:null, 
             type:"float"},
            {description:"do not animate the slider thumb to the new value", optional:false, 
             name:"noAnimation",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Slider"
    },
    "class:Label":{
        methods:["method:Label.setIconOrientation", "method:Label.setIcon", "method:Label.setContents"],
        ref:"class:Label",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:Label.contents", "attr:Label.dynamicContents", "attr:Label.align", 
         "attr:Label.valign","attr:Label.wrap", "attr:Label.autoFit", "attr:Label.icon", "attr:Label.iconSize", 
         "attr:Label.iconWidth","attr:Label.iconHeight", "attr:Label.iconOrientation", "attr:Label.iconAlign", 
         "attr:Label.iconSpacing","attr:Label.showDisabledIcon", "attr:Label.showRollOverIcon", "attr:Label.showFocusedIcon", 
         "attr:Label.showDownIcon","attr:Label.showSelectedIcon"],
        description:"Labels display a small amount of ${isc.DocUtils.linkForRef('attr:Label.align','alignable')} ${isc.DocUtils.linkForRef('attr:Label.contents','text')}\n with optional ${isc.DocUtils.linkForRef('attr:Label.icon','icon')} and ${isc.DocUtils.linkForRef('attr:Label.autoFit','autoFit')}.\n <P>\n For a general-purpose container for HTML content, use ${isc.DocUtils.linkForRef('class:HTMLFlow')} or ${isc.DocUtils.linkForRef('class:HTMLPane')}\n instead.",
        name:"Label",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('label')}"]
    },
    "attr:ListGrid.emptyMessageStyle":{
        ref:"attr:ListGrid.emptyMessageStyle",
        flags:"IRW",
        description:"The CSS style name applied to the ${isc.DocUtils.linkForRef('attr:ListGrid.emptyMessage')} if displayed.",
        name:"emptyMessageStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"emptyMessage\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["emptyMessage"]
    },
    "classMethod:isc.defineClass":{
        ref:"classMethod:isc.defineClass",
        flags:"",
        description:" Shortcut for <code>isc.ClassFactory.defineClass()</code>.\n",
        name:"defineClass",
        seeAlso:[
            {ref:"classMethod:ClassFactory.defineClass", description:null}
        ],
        params:[
            {description:"Name for the new class.", optional:false, name:"className", defaultValue:null, 
             type:"string"},
            {description:"Optional SuperClass Class object or name", optional:true, name:"superClass", 
             defaultValue:null,type:"Class"}
        ],
        returns:{description:"Returns the new Class object.", type:"Class"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "method:ListGrid.saveAllEdits":{
        ref:"method:ListGrid.saveAllEdits",
        flags:"",
        description:" Save a number of outstanding edits for this ListGrid. If no rows are specifed, all \n outstanding edits will be saved\n",
        name:"saveAllEdits",
        seeAlso:[],
        params:[
            {description:"optionally specify which rows to save", optional:true, name:"rows", 
             defaultValue:null,type:"array of numbers"},
            {description:"If specified this callback will be fired on a successful save  of the specified rows.", 
             optional:true,name:"saveCallback", defaultValue:null, type:"callback"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Canvas.enable":{
        ref:"method:Canvas.enable",
        flags:"",
        description:" Enables this widget and any children / peers of this widget.\n",
        name:"enable",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "attr:DynamicForm.unknownErrorMessage":{
        ref:"attr:DynamicForm.unknownErrorMessage",
        flags:"IRW",
        description:"The error message for a failed validator that does not specify its own errorMessage.",
        name:"unknownErrorMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Invalid value\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation", "i18nMessages"]
    },
    "attr:Validator.stopIfFalse":{
        ref:"attr:Validator.stopIfFalse",
        flags:"IR",
        description:"Normally, all validators defined for a field will be run even if one of the validators has\n already failed.  However, if <code>stopIfFalse</code> is set, validation will not proceed\n beyond this validator if the check fails.\n <P>\n This is useful to prevent expensive validators from being run unnecessarily, or to allow\n custom validators that don't need to be robust about handling every conceivable type of\n value.",
        name:"stopIfFalse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Validator"
    },
    "attr:RPCRequest.contentType":{
        ref:"attr:RPCRequest.contentType",
        flags:"IRW",
        description:"Valid with the xmlHttpRequest transport only and only when\n ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} is set to \"POST\".",
        name:"contentType",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"application/x-www-form-urlencoded\"",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:Facet.isTree":{
        ref:"attr:Facet.isTree",
        flags:"IR",
        description:"Marks this facet as a hierarchical facet.\n <P>\n If set, ${isc.DocUtils.linkForRef('attr:Facet.values','facet.value')} will be linked as for a\n ${isc.DocUtils.linkForRef('attr:Tree.modelType','modelType:\"parent\"')} Tree, using\n ${isc.DocUtils.linkForRef('attr:FacetValue.id','facetValue.id')} and\n ${isc.DocUtils.linkForRef('attr:FacetValue.parentId','facetValue.parentId')}.\n Expand/collapse controls will be shown allowing navigation of the facet's values.\n <P>\n The CubeGrid's ${isc.DocUtils.linkForRef('attr:CubeGrid.dataSource','load on demand')} system automatically avoids\n fetching data for facetValues that are not currently visible due to the expand/collapse\n state of a tree facet.\n <P>\n Initial open/close state can be controlled via\n ${isc.DocUtils.linkForRef('attr:Facet.collapsed','facet.collapsed')} and ${isc.DocUtils.linkForRef('attr:FacetValue.collapsed')}.",
        name:"isTree",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Facet"
    },
    "method:ComboBoxItem.fetchData":{
        ref:"method:ComboBoxItem.fetchData",
        flags:"",
        description:" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).<br>\n Performs a fetch type operation on this item's DataSource to retrieve the set of valid\n options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"Callback to fire when the fetch completes. Callback will               fire with 2 parameters: <code>item</code> a pointer to the form item and\n              <code>dsResponse</code> the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server.", 
             optional:false,name:"callback", defaultValue:null, type:"callback"},
            {description:"properties to apply to the              dsRequest for this fetch.", 
             optional:false,name:"requestProperties", defaultValue:null, type:"dsRequest properties"}
        ],
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "attr:Menu.autoDismiss":{
        ref:"attr:Menu.autoDismiss",
        flags:"IRW",
        description:"When true, when a menu item is chosen (via mouse click or keyboard), the menu is not \n		automatically hidden, staying in place for further interactivity",
        name:"autoDismiss",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Menu"
    },
    "attr:Validator.clientOnly":{
        ref:"attr:Validator.clientOnly",
        flags:"IR",
        description:"Indicates this validator runs on the client only.\n <p>\n Normally, if the server is trying to run validators and finds a validator that it can't\n execute, for safety reasons validation is considered to have failed.  Use this flag to\n explicitly mark a validator that only needs to run on the client.",
        name:"clientOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Validator"
    },
    "attr:RowSpacerItem.startRow":{
        ref:"attr:RowSpacerItem.startRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RowSpacerItem",
        groups:["appearance"]
    },
    "method:DynamicForm.setValues":{
        ref:"method:DynamicForm.setValues",
        flags:"",
        description:" Sets the values of the entire form, as an Object containing the values of the form as\n properties, where each propertyName is the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and\n each property value is the value held by that form item.\n <P>\n Any ${isc.DocUtils.linkForRef('class:FormItem')} for which a value is not provided will revert to its\n ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue','defaultValue')}.  To cause all FormItems to revert to default\n values, pass null.\n <P>\n This method also calls ${isc.DocUtils.linkForRef('method:DynamicForm.rememberValues')} so that a subsequent later call to\n ${isc.DocUtils.linkForRef('method:DynamicForm.resetValues')} will revert to the passed values.\n\n",
        name:"setValues",
        seeAlso:[],
        params:[
            {description:"values for the form, or null to reset all items to default values", 
             optional:true,name:"newData", defaultValue:null, type:"Object"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "method:FormItem.isDisabled":{
        ref:"method:FormItem.isDisabled",
        flags:"A",
        description:"  Is this item disabled?\n",
        name:"isDisabled",
        seeAlso:[
            {ref:"attr:FormItem.disabled", description:null}
        ],
        returns:{description:"disabledtrue if this item is be disabled", type:"boolean"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["enable"]
    },
    "attr:GridRenderer.canSelectOnRightMouse":{
        ref:"attr:GridRenderer.canSelectOnRightMouse",
        flags:"RW",
        description:"If true, rightMouseDown events will fire 'selectOnRightMouseDown()' for the appropriate cells.",
        name:"canSelectOnRightMouse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:DataSourceField.validators":{
        ref:"attr:DataSourceField.validators",
        flags:"IR",
        description:"Validators to be applied to this field.\n <p>\n Validators are applied whenever there is an attempt to save changes to a field.\n <p>\n For the available set of built-in validators, and how to define a custom validator, see the\n ${isc.DocUtils.linkForRef('class:Validator')} class.",
        name:"validators",
        seeAlso:[
            {ref:"class:Validator", description:null}
        ],
        valueType:"Array of Validator",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["dataType", "validation"]
    },
    "method:Class.ignore":{
        ref:"method:Class.ignore",
        flags:"A",
        description:"		Stop observing a method on some other object.\n\n",
        name:"ignore",
        seeAlso:[
            {ref:"method:Class.observe", description:null}
        ],
        params:[
            {description:"object to observe", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"name of the method to observe", optional:false, name:"methodName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true == observation stopped, false == no change made", type:"boolean"},
        type:"method",
        definingClass:"class:Class",
        groups:["observation"]
    },
    "attr:CubeGrid.canResizeColumns":{
        ref:"attr:CubeGrid.canResizeColumns",
        flags:"IRW",
        description:"If true, body columns can be resized via the innermost column headers.",
        name:"canResizeColumns",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:GridRenderer.alternateRowFrequency":{
        ref:"attr:GridRenderer.alternateRowFrequency",
        flags:"IRW",
        description:"The number of consecutive rows to draw in the same style before alternating, when\n alternateRowStyles is true.",
        name:"alternateRowFrequency",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "method:String.contains":{
        ref:"method:String.contains",
        flags:"",
        description:"			Returns true if this string contains the specified substring.\n",
        name:"contains",
        seeAlso:[],
        params:[
            {description:"string to look for", optional:false, name:"substring", defaultValue:null, 
             type:"String"}
        ],
        returns:{description:"true == this string contains the substring", type:"boolean"},
        type:"method",
        definingClass:"class:String",
        groups:["stringProcessing"]
    },
    "attr:OperationBinding.callbackParam":{
        ref:"attr:OperationBinding.callbackParam",
        flags:"IR",
        description:"Applies only to dataFormat: \"json\".  Specifies the name of the query parameter that\n tells your JSON service what function to call as part of the response for this operation.\n <P>\n Typically set once for the DataSource as a whole via ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')}.",
        name:"callbackParam",
        seeAlso:[
            {ref:"attr:DataSource.callbackParam", description:null}
        ],
        valueType:"String",
        defaultValue:"\"callback\"",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:CubeGrid.canMinimizeColumns":{
        ref:"attr:CubeGrid.canMinimizeColumns",
        flags:"IRW",
        description:"If true, allow columns in the grid body to be minimized (reduced to the width of the\n minimize control) by clicking on a minimize control in the innermost column headers.",
        name:"canMinimizeColumns",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:StretchImgButton.showFocusedIcon":{
        ref:"attr:StretchImgButton.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "class:HTMLFlow":{
        methods:["method:HTMLFlow.setContentsURL", "method:HTMLFlow.loadingContent", 
         "method:HTMLFlow.handleError","method:HTMLFlow.transformHTML", "method:HTMLFlow.contentLoaded"],
        type:"class",
        ref:"class:HTMLFlow",
        classAttrs:[],
        treeLocation:["Client Reference/Foundation"],
        classMethods:[],
        description:"Use the HTMLFlow component to display HTML content that should expand to its natural size\n without scrolling.  \n <p>\n HTML content can be loaded and reloaded from a URL via the property\n <code>contentsURL</code>.  This method of loading is for simple HTML content\n only; SmartClient components should be loaded via the ${isc.DocUtils.linkForRef('class:ViewLoader')} class.\n <P>\n NOTE: Since the size of an HTMLFlow component is determined by its HTML contents, this\n component will draw at varying sizes if given content of varying size.  When using HTMLFlow\n components within a Layout, consider what will happen if the HTMLFlow renders at various\n sizes.  An HTMLFlow which can expand should be placed in a container where other components\n can render smaller, where the container is allowed to scroll, or where there is padding to\n expand into.",
        attrs:["attr:HTMLFlow.contents", "attr:HTMLFlow.dynamicContents", "attr:HTMLFlow.contentsURL", 
         "attr:HTMLFlow.loadingMessage","attr:HTMLFlow.contentsURLParams", "attr:HTMLFlow.httpMethod", 
         "attr:HTMLFlow.contentsType","attr:HTMLFlow.evalScriptBlocks", "attr:HTMLFlow.captureSCComponents"],
        name:"HTMLFlow",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('htmlFlow')}"],
        groups:["contentLoading"]
    },
    "attr:DynamicForm.valuesManager":{
        ref:"attr:DynamicForm.valuesManager",
        flags:"IA",
        description:"If set at init time, this dynamicForm will be created as a member form for the\n specified valuesManager.  To update the valuesManager to which a form belongs after init\n use <code>valuesManager.addMember(form)</code> and \n <code>valuesManager.removeMember(form)</code>",
        name:"valuesManager",
        seeAlso:[
            {ref:"class:ValuesManager", description:null}
        ],
        valueType:"ValuesManager instance or global ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formValuesManager"]
    },
    "type:RPCTransport":{
        ref:"type:RPCTransport",
        values:[
            {description:"Uses the XMLHttpRequest object to make the request to the server. Note that in some browsers with certain configurations, this transport may not be\n available.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.  This transport is\n not useful with file uploads.  Cannot be used to target cross-domain URLs directly.", 
             value:"\"xmlHttpRequest\""},
            {description:"Write a SCRIPT tag into the DOM with a SRC attribute that targets an arbitrary URL.  This transport is the only one that allows direct cross-domain URL\n access.  \n <P>\n For ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} to work, the server being contacted must support the ability\n to generate JavaScript code in the response that will call a JavaScript function generated\n by SmartClient.  SmartClient passes the name of the function to call via a URL parameter,\n which can be controlled with ${isc.DocUtils.linkForRef('attr:RPCRequest.callbackParam')}.", 
             value:"\"scriptInclude\""},
            {description:"Available with SmartClient Server only.  An HTML form is dynamically assembled that targets a hidden IFRAME.  This mechanism is supported on all\n browsers and cannot be disabled by end users.  \n <P>\n If using the SmartClient Server and using \n ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side data integration')}, the \"hiddenFrame\" transport\n is automatically used for all RPCManager and DataSource requests if the \"xmlHttpRequest\"\n transport is not available.\n <P>\n Cannot be used to target cross-domain URLs directly.", 
             value:"\"hiddenFrame\""}
        ],
        description:"SmartClient supports multiple RPC transports for maximum compatibility and feature richness.\n All of transports use HTTP as the underlying protocol, but use different mechanisms for\n sending the HTTP request and processing the response.  The transport is typically\n auto-selected for by based on the feature being used and the current browser settings.  For\n advanced use cases, ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')} and ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} are\n exposed as override points.\n <p>",
        name:"RPCTransport",
        seeAlso:[],
        type:"type"
    },
    "attr:Tree.defaultNodeTitle":{
        ref:"attr:Tree.defaultNodeTitle",
        flags:"IRW",
        description:"Title assigned to nodes without a ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')} value or a\n ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} value.",
        name:"defaultNodeTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Untitled\"",
        type:"attr",
        definingClass:"class:Tree"
    },
    "class:HStack":{
        methods:[],
        exampleConfig:"HStack.xml",
        ref:"class:HStack",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:[],
        description:"A subclass of Layout that simply stacks members on the horizontal axis without trying to\n manage their width.  On the vertical axis, any members that do not have explict heights will\n be sized to match the height of the stack.",
        name:"HStack",
        seeAlso:[
            {ref:"attr:Layout.hPolicy", description:null}
        ],
        type:"class"
    },
    "method:ListGrid.getEditCol":{
        ref:"method:ListGrid.getEditCol",
        flags:"",
        description:"\n  Returns the index of the column being edited.\n\n",
        name:"getEditCol",
        seeAlso:[],
        returns:{description:"Index of the current edit column", type:"number"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Layout.drop":{
        ref:"method:Layout.drop",
        flags:"A",
        description:" Layouts have built-in handling of component drag and drop.  See the discussion in\n ${isc.DocUtils.linkForRef('class:Layout')} on how it works.  If you override this builtin implementation of drop() and\n you're using the built-in dropLine via ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')}:true, be sure to call\n ${isc.DocUtils.linkForRef('method:Layout.hideDropLine')} to hide the dropLine after doing your custom drop() handling.\n\n",
        name:"drop",
        seeAlso:[
            {ref:"class:Layout", description:null}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:EdgedCanvas.centerBackgroundColor":{
        ref:"attr:EdgedCanvas.centerBackgroundColor",
        flags:"IR",
        description:"Background color for the center section only.  Can be used as a surrogate background\n color for the decorated Canvas, if the Canvas is set to partially overlap the edges and\n hence can't show a background color itself without occluding media.",
        name:"centerBackgroundColor",
        seeAlso:[],
        valueType:"cssColor",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "group:prompt":{
        ref:"group:prompt",
        refs:[],
        name:"prompt",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.clearRowErrors":{
        ref:"method:ListGrid.clearRowErrors",
        flags:"",
        description:"  Clear any stored validation errors for some row\n",
        name:"clearRowErrors",
        seeAlso:[
            {ref:"method:ListGrid.setRowErrors", description:null}
        ],
        params:[
            {description:"index of row to clear validation error for", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["validtion"]
    },
    "method:ListGrid.displayHeaderContextMenu":{
        ref:"method:ListGrid.displayHeaderContextMenu",
        flags:"",
        description:" If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')} is <code>true</code> this method is fired\n when the user right-clicks on the header for this grid.<br>\n Default implementation will display a menu with entries derived from\n ${isc.DocUtils.linkForRef('method:ListGrid.getHeaderContextMenuItems')} for the appropriate column.\n",
        name:"displayHeaderContextMenu",
        seeAlso:[
            {ref:"attr:ListGrid.showHeaderContextMenu", description:null}
        ],
        params:[
            {description:"which button in the header recieved the right-click event                         (may be the sorter button)", 
             optional:false,name:"target", defaultValue:null, type:"Canvas"},
            {description:"Optional 2-element array specifying position at which the menu should                           be shown. If this is not passed in the menu will be shown at the\n                           mouseEvent position (default context menu behavior).", 
             optional:true,name:"position", defaultValue:null, type:"Array"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridHeader"]
    },
    "attr:DetailViewer.showEmptyField":{
        ref:"attr:DetailViewer.showEmptyField",
        flags:"IRWA",
        description:"Whether to show the field when the value is null",
        name:"showEmptyField",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "method:Canvas.scrollToRight":{
        ref:"method:Canvas.scrollToRight",
        flags:"",
        description:" Horizontally scrolls the content of the widget to the end of its content\n\n",
        name:"scrollToRight",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:CubeGrid.deselectAll":{
        ref:"method:CubeGrid.deselectAll",
        flags:"",
        description:"\n  deselect all cells and facetValues\n\n      <br><i>methodType</i> action\n",
        name:"deselectAll",
        seeAlso:[],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:ImgSplitbar.canCollapse":{
        ref:"attr:ImgSplitbar.canCollapse",
        flags:"IRW",
        description:"If this property is true, a click on the Splitbar will collapse its \n ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}, hiding it and shifting the Splitbar and other members\n of the layout across to fill the newly available space. If the target is already hidden\n a click will expand it again (showing it at it's normal size).",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "group:cacheSync":{
        ref:"group:cacheSync",
        refs:["attr:DSResponse.invalidateCache", "attr:ResultSet.initialData", 
         "attr:ResultSet.initialLength","attr:ResultSet.allRows", "attr:ResultSet.updateCacheFromRequest", 
         "attr:ResultSet.dropCacheOnUpdate","attr:ResultSet.disableCacheSync", "attr:ResultSet.neverDropUpdatedRows", 
         "attr:ResultSet.updatePartialCache","attr:ResultTree.updateCacheFromRequest", "attr:ResultTree.disableCacheSync"],
        name:"cacheSync",
        seeAlso:[],
        type:"group"
    },
    "method:Layout.showMember":{
        ref:"method:Layout.showMember",
        flags:"",
        description:" Show the specified member, firing the specified callback when the hide is complete.\n <P>\n Members can always be directly shown via <code>member.show()</code>, but if\n ${isc.DocUtils.linkForRef('attr:Layout.animateMembers','animation')} is enabled, animation will only occur if showMember() is\n called to show the member.\n\n",
        name:"showMember",
        seeAlso:[],
        params:[
            {description:"Member to show", optional:false, name:"member", defaultValue:null, 
             type:"Canvas"},
            {description:"action to fire when the member has been shown", optional:false, 
             name:"callback",defaultValue:null, type:"Callback"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "group:submitting":{
        ref:"group:submitting",
        refs:["method:DynamicForm.submitForm", "method:DynamicForm.submitValues", 
         "method:SearchForm.search","method:DynamicForm.cancel", "method:ValuesManager.cancel", "attr:DynamicForm.action", 
         "attr:DynamicForm.target","attr:DynamicForm.method", "attr:DynamicForm.encoding", "attr:DynamicForm.canSubmit", 
         "attr:DynamicForm.saveOnEnter","type:FormMethod", "type:Encoding"],
        description:"Direct submission of forms to a target URL\n <P>\n <b>NOTE:</b> directly submitting forms is only done for specialized purposes, such as\n integration with certain legacy systems.  Normal form usage contacts the server via \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}, through the RPCManager system.",
        name:"submitting",
        seeAlso:[],
        type:"group"
    },
    "attr:SelectOtherItem.separatorTitle":{
        ref:"attr:SelectOtherItem.separatorTitle",
        flags:"IRW",
        description:"title for the separator between normal items and the Other... value",
        name:"separatorTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"--------------------\"",
        type:"attr",
        definingClass:"class:SelectOtherItem",
        groups:["appearance"]
    },
    "method:ListGrid.groupBy":{
        ref:"method:ListGrid.groupBy",
        flags:"",
        description:" Display the current set of records grouped by their values for the given field or\n fields. With no arguments, disables all grouping.\n <P>\n Grouping tranforms the current dataset into a Tree on the fly, then provides a familiar tree\n interface for exploring the grouped data.\n <P>\n Grouping works automatically with any dataset, providing simple default grouping based on\n each field's declared type.  However, you can use the\n ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue','field.getGroupValue()')} API to control how records are\n grouped, and the ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle','field.getGroupTitle()')} API to control\n how groups are titled.\n <P>\n Grouping can be performed programmatically via this API, or you can set\n ${isc.DocUtils.linkForRef('attr:ListGrid.canGroupBy','grid.canGroupBy:true')} to enable menus that allow the user to performing\n grouping. To group a grid automatically, instantiate the grid with a\n  ${isc.DocUtils.linkForRef('attr:ListGrid.groupByField')} setting.\n <P>\n While grouped, the automatically created Tree is available as\n ${isc.DocUtils.linkForRef('attr:ListGrid.groupTree','grid.groupTree')} and the original dataset is availabe as\n ${isc.DocUtils.linkForRef('attr:ListGrid.originalData','grid.originalData')}.\n\n",
        name:"groupBy",
        seeAlso:[],
        params:[
            {description:"name of fields to group by", optional:true, name:"arguments 0-N", 
             defaultValue:null,type:"String"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dynamicGrouping')}"],
        definingClass:"class:ListGrid"
    },
    "attr:TreeGrid.showCustomIconOpen":{
        ref:"attr:TreeGrid.showCustomIconOpen",
        flags:"IRWA",
        description:"Should folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),\n show open state images when the folder is opened.\n If true, the ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} will be appended to the image URL\n (so <code>\"customFolder.gif\"</code> might be replaced with \n <code>\"customFolder_open.gif\"</code>).<br>\n <b>Note</b> that we never append the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} to custom folder icons.<br>\n Can be overridden at the node level via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconOpenProperty')} property.",
        name:"showCustomIconOpen",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:Layout.layoutLeftMargin":{
        ref:"attr:Layout.layoutLeftMargin",
        flags:"IRW",
        description:"Space outside of all members, on the left-hand side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.\n <P>\n Requires a manual call to <code>setLayoutMargin()</code> if changed on the fly.",
        name:"layoutLeftMargin",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "method:Class.getClass":{
        ref:"method:Class.getClass",
        flags:"",
        description:"	\n	Gets a pointer to the class object for this instance\n\n",
        name:"getClass",
        seeAlso:[],
        returns:{description:"Class object that was used to construct this object", type:"Class"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:Splitbar.skinImgDir":{
        ref:"attr:Splitbar.skinImgDir",
        flags:"IR",
        description:"Default directory for skin images (those defined by the class), relative to the\n Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["images"]
    },
    "group:filterEditor":{
        ref:"group:filterEditor",
        refs:["method:ListGrid.focusInFilterEditor", "method:ListGrid.filterByEditor", 
         "method:ListGrid.setShowFilterEditor","method:ListGrid.getFilterEditorValueMap", "method:ListGrid.getFilterEditorType", 
         "attr:ListGridField.canFilter","attr:ListGridField.filterEditorValueMap", "attr:ListGridField.filterEditorType", 
         "attr:ListGridField.defaultFilterValue","attr:ListGridField.filterEditorProperties", "attr:ListGridField.filterOnKeypress", 
         "attr:ListGrid.showFilterEditor","attr:ListGrid.filterEditorHeight", "attr:ListGrid.filterByCell", 
         "attr:ListGrid.filterOnKeypress"],
        name:"filterEditor",
        seeAlso:[],
        type:"group"
    },
    "attr:RPCRequest.promptCursor":{
        ref:"attr:RPCRequest.promptCursor",
        flags:"IRW",
        description:"Controls the cursor shown when ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')} is set to\n <code>\"cursor\"</code> for this request only. Defaults to ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptCursor')}.\n <p>\n In Safari, IE 5.5 and Firefox 1.0 the default value is \"wait\", on all other platforms it is\n \"progress\".  The reason for this split is that the above-mentioned browsers do not support\n CSS2.1 - which is required for the \"progress\" cursor type.",
        name:"promptCursor",
        seeAlso:[
            {ref:"classAttr:RPCManager.promptCursor", description:null}
        ],
        valueType:"String",
        defaultValue:"browser-dependent",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["rpcPrompt"]
    },
    "method:Canvas.updateHover":{
        ref:"method:Canvas.updateHover",
        flags:"A",
        description:" If this canvas is currently showing a hover (see ${isc.DocUtils.linkForRef('method:Canvas.handleHover')}), this method\n can be called to update the contents of the hover. Has no effect if the hover canvas is not\n showing for this widget.\n",
        name:"updateHover",
        seeAlso:[],
        params:[
            {description:"Option to specify new HTML for the hover. If not passed, the result   of ${isc.DocUtils.linkForRef('method:Canvas.getHoverHTML','this.getHoverHTML()')} will be used instead. Note that if the\n   hover HTML is empty the hover will be hidden.", 
             optional:true,name:"hoverHTML", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:ListGrid.bodyBackgroundColor":{
        ref:"attr:ListGrid.bodyBackgroundColor",
        flags:"IRW",
        description:"Background color applied to the ListGrid body (that is, the area of the grid where\n data values are rendered).<br>\n Note that this will typically not be visible to the user unless there are few enough\n rows that there is visible space in the body below the last row. To style data cells,\n override ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle')} instead.",
        name:"bodyBackgroundColor",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"white\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "method:Canvas.setLeft":{
        ref:"method:Canvas.setLeft",
        flags:"",
        description:"			Set the left coordinate of this object, relative to its enclosing context, in pixels.\n			NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()\n          instead\n",
        name:"setLeft",
        seeAlso:[],
        params:[
            {description:"new left coordinate", optional:false, name:"left", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:Selection.select":{
        ref:"method:Selection.select",
        flags:"",
        description:"			Select a particular item\n",
        name:"select",
        seeAlso:[],
        params:[
            {description:"object to select", optional:false, name:"item", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:FormItem.editorType":{
        ref:"attr:FormItem.editorType",
        flags:"IR",
        description:"Name of the FormItem to use for editing, eg \"TextItem\" or \"SelectItem\".\n <P>\n The type of FormItem to use for editing is normally derived automatically from\n ${isc.DocUtils.linkForRef('attr:FormItem.type','field.type')}, which is the data type of the field, by the rules\n explained ${isc.DocUtils.linkForRef('type:FormItemType','here')}.",
        name:"editorType",
        seeAlso:[
            {ref:"type:FormItemType", description:null},
            {ref:"type:FieldType", description:null}
        ],
        valueType:"FormItem class",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "classMethod:EventHandler.setDragTracker":{
        ref:"classMethod:EventHandler.setDragTracker",
        flags:"",
        description:" Set the HTML for the drag tracker that follows the mouse during a drag and drop interaction.\n <P>\n Your canvas can use this routine to set the drag tracker to whatever HTML you want like so:\n <pre>\n    dragStart : function () {\n        isc.EventHandler.setDragTracker('Your contents here');\n    }\n </pre>\n\n",
        name:"setDragTracker",
        seeAlso:[],
        params:[
            {description:"HTML for the tracker", optional:false, name:"html", defaultValue:null, 
             type:"string"},
            {description:"new width for the tracker", optional:true, name:"newWidth", defaultValue:null, 
             type:"number"},
            {description:"new height for the tracker", optional:true, name:"newHeight", 
             defaultValue:null,type:"number"},
            {description:"x-offset for the tracker", optional:true, name:"offsetX", defaultValue:null, 
             type:"number"},
            {description:"y-offset for the tracker", optional:true, name:"offsetY", defaultValue:null, 
             type:"number"},
            {description:"Opportunity to pass in a free-form set of properties                                       for the dragTracker", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["dragDrop", "dragTracker"]
    },
    "attr:ListGrid.headerBarStyle":{
        ref:"attr:ListGrid.headerBarStyle",
        flags:"IR",
        description:"Set the CSS style used for the header as a whole.",
        name:"headerBarStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:Canvas.percentBox":{
        ref:"attr:Canvas.percentBox",
        flags:"IRA",
        description:"Governs the model to be used when sizing canvases with percentage width or height, or \n positioning widgets with a specified ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')}.\n <P>\n Only  effects widgets with a a specified ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')}, or \n widgets that have ${isc.DocUtils.linkForRef('attr:Canvas.snapTo')} set and are peers of some \n ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','other canvas')}.\n <P>\n Determins whether the coordinates used for sizing (for percentage sized widgets) and\n positioning (if <code>snapTo</code> is set) should be relative to the visible size or the\n viewport size of the percentSource or masterElement widget.",
        name:"percentBox",
        seeAlso:[],
        valueType:"PercentBoxModel",
        defaultValue:"\"visible\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Tree.getParents":{
        ref:"method:Tree.getParents",
        flags:"",
        description:"\n Given a node, return an array of the node's parents with the immediate parent first.  The\n node itself is not included in the result.  For example, for the following tree:\n <pre>\n root\n   foo\n     bar\n </pre>\n Calling <code>tree.getParents(bar)</code> would return: <code>[foo, root]</code>.  Note that\n the returned array will contain references to the nodes, not the names.\n\n",
        name:"getParents",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"array of node's parents", type:"Array"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:StatefulCanvas.iconWidth":{
        ref:"attr:StatefulCanvas.iconWidth",
        flags:"IR",
        description:"Width in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:ListGrid.removeSelectedData":{
        ref:"method:ListGrid.removeSelectedData",
        flags:"",
        description:" Remove the currently selected records from this component.\n If this is a databound grid, the records will be removed directly from the DataSource.\n <P>\n If no records are selected, no action is taken. The grid will automatically be\n updated if the record deletion succeeds.\n\n",
        name:"removeSelectedData",
        seeAlso:[],
        params:[
            {description:"callback to fire when the data has been removed", optional:true, 
             name:"callback",defaultValue:null, type:"callback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('removeOperation')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:ListGrid.validateByCell":{
        ref:"attr:ListGrid.validateByCell",
        flags:"IRW",
        description:"Whether client-side validation checks should be performed when the user moves between\n cells in the current edit row.  If unset, defaults to ${isc.DocUtils.linkForRef('attr:ListGrid.editByCell')}.<br>\n Note that if false validation occurs on row-transition rather than cell transitions.\n Validation also always occurs when a row is to be saved.",
        name:"validateByCell",
        seeAlso:[
            {ref:"group:editing", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:Canvas.snapHGap":{
        ref:"attr:Canvas.snapHGap",
        flags:"IRW",
        description:"The horizontal grid size to use, in pixels, when snap-to-grid is enabled.",
        name:"snapHGap",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"attr:Canvas.snapResizeToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapResizeToGrid", description:null}
        ],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:GridRenderer.getEventColumn":{
        ref:"method:GridRenderer.getEventColumn",
        flags:"",
        description:" Returns the column number of the most recent mouse event.\n",
        name:"getEventColumn",
        seeAlso:[],
        params:[
            {description:"optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event", 
             optional:false,name:"x", defaultValue:null, type:"number"}
        ],
        returns:{description:"column number, or -2 if beyond last drawn column", type:"number"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events", "selection"]
    },
    "group:debug":{
        ref:"group:debug",
        refs:["method:Log.getCallTrace", "method:Log.getStackTrace", "method:Log.echoLeaf", 
         "method:Log.echo","method:Log.echoAll", "class:Log", "classMethod:Log.show", "classMethod:Log.traceMethod", 
         "classMethod:Log.timeMethod"],
        description:"Support for debugging and logging",
        name:"debug",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.snapTo":{
        flags:"IRW",
        getter:["getSnapTo"],
        type:"attr",
        ref:"attr:Canvas.snapTo",
        description:"Position this widget such that it is aligned with (\"snapped to\") an edge of its \n ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')} (if specified), or its\n ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}.\n <P>\n Note that this property also impacts the sizing of this widget. If this widgets size\n is specifed as a percent value, and has no explicit\n ${isc.DocUtils.linkForRef('attr:Canvas.percentSource')}, sizing will be calculated based on the size of the \n masterElement when snapTo is set.\n <P>\n Possible values: BR, BL, TR, TL, R, L, B, T where B=Bottom, T=Top, L=Left, R=right",
        name:"snapTo",
        setter:["setSnapTo"],
        valueType:"String",
        seeAlso:[
            {ref:"attr:Canvas.snapEdge", description:null},
            {ref:"attr:Canvas.percentBox", description:null}
        ],
        defaultValue:"null",
        groups:["sizing"],
        definingClass:"class:Canvas"
    },
    "attr:DataSource.dataFormat":{
        ref:"attr:DataSource.dataFormat",
        flags:"IR",
        description:"Indicates the format to be used for HTTP requests and responses when\n fulfilling DSRequests (eg ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} is called).",
        name:"dataFormat",
        seeAlso:[],
        valueType:"DSDataFormat",
        defaultValue:"\"iscServer\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('jsonDataSource')}", 
         "${isc.DocUtils.linkForExampleId('simpleJSON')}"],
        definingClass:"class:DataSource",
        groups:["clientDataIntegration", "serverDataIntegration"]
    },
    "attr:Canvas.edgeCursorMap":{
        ref:"attr:Canvas.edgeCursorMap",
        flags:"IRWA",
        description:"Cursor to use when over each edge of a Canvas that is drag resizable.\n <P>\n To disable drag resize cursors, set the edgeCursorMap property to null.",
        name:"edgeCursorMap",
        seeAlso:[
            {ref:"attr:Canvas.resizeFrom", description:null}
        ],
        valueType:"object",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Canvas.hoverWidth":{
        ref:"attr:Canvas.hoverWidth",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.showHover','this.showHover')} is true, this property can be used to customize the\n width of the hover canvas shown.",
        name:"hoverWidth",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customHovers')}"],
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:Array.lastIndexOf":{
        ref:"method:Array.lastIndexOf",
        flags:"",
        description:" Return the position in the list of the last instance of the specified object.\n <p>\n If pos is specified, starts looking before that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"lastIndexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"earliest index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:FormItem.iconWidth":{
        ref:"attr:FormItem.iconWidth",
        flags:"IRWA",
        getter:["getIconWidth"],
        description:"Default width for form item icons",
        name:"iconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "attr:DSRequest.resultTree":{
        ref:"attr:DSRequest.resultTree",
        flags:"R",
        description:"For advanced use in integrating trees that \n ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','load data on demand')} with web services,\n the ResultTree that issued this \"fetch\" DSRequest is automatically made available as the\n <code>resultTree</code> property.\n <P>\n This property can only be read.  There is no meaning to setting this property\n yourself.",
        name:"resultTree",
        seeAlso:[],
        valueType:"ResultTree",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "attr:ValuesManager.members":{
        ref:"attr:ValuesManager.members",
        flags:"IRW",
        getter:["getMembers"],
        description:"The set of member forms for this valuesManager.  These can be specified at init time via\n the <code>members</code> property, or updated at runtime via <code>addMember()</code> and\n <code>removeMember()</code>.<br>\n Note: Alternatively a form can be initialized as a member of a valuesManager by setting\n the <code>valuesManager</code> property of the form to a pre-defined valuesManager\n instance.",
        name:"members",
        seeAlso:[
            {ref:"method:ValuesManager.addMember", description:null},
            {ref:"method:ValuesManager.removeMember", description:null}
        ],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ValuesManager"
    },
    "method:DynamicForm.submitValues":{
        ref:"method:DynamicForm.submitValues",
        flags:"",
        description:" Triggered when a SubmitItem is included in the form is submitted and gets pressed.\n \n",
        name:"submitValues",
        seeAlso:[
            {ref:"method:DynamicForm.submit", description:null}
        ],
        params:[
            {description:"the form values", optional:false, name:"values", defaultValue:null, 
             type:"object"},
            {description:"the form being submitted", optional:false, name:"form", defaultValue:null, 
             type:"DynamicForm"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "method:StatefulCanvas.select":{
        ref:"method:StatefulCanvas.select",
        flags:"",
        description:" Select this object.\n",
        name:"select",
        seeAlso:[],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "object:CellRecord":{
        methods:[],
        ref:"object:CellRecord",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Analytics/CubeGrid"],
        attrs:["attr:CellRecord.enabled"],
        description:"A CellRecord represents the data for one cell of the body area.\n <P>\n Each CellRecord should be an object that minimally has a property named after each\n visible facetId with the value being a facetValueId from that facet, and also a value\n for ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty')}.\n <P>\n Cell records can contain any other properties desired, such as cell ids, or values for\n facets not initially shown.",
        name:"CellRecord",
        seeAlso:[],
        type:"object",
        requiresModules:["Analytics"]
    },
    "attr:DynamicForm.itemLayout":{
        ref:"attr:DynamicForm.itemLayout",
        flags:"IRWA",
        description:"Layout style to use with this form.  \n <P>\n The default of \"table\" uses a tabular layout similar to HTML tables, but with much more\n powerful control over sizing, item visibility and reflow, overflow handling, etc.\n <P>\n <code>itemLayout:\"absolute\"</code> allows absolute positioning of every form item.  This\n provides maximum flexibility in placement, with the following limitations:<ul>\n <li> titles, which normally take up an adjacent cell, are not shown.  Use\n      StaticTextItems to show titles\n <li> no automatic reflow when showing or hiding items.  ${isc.DocUtils.linkForRef('method:FormItem.setLeft')}\n      and ${isc.DocUtils.linkForRef('method:FormItem.setTop')} can be used for manual reflow.\n <li> only pixel and percent sizes are allowed, no \"*\".  Percent widths mean percentage\n      of the overall form size rather than the column size\n <li> with different font styling or internationalized titles, items may overlap that did\n      not overlap in the skin used at design time\n </ul>",
        name:"itemLayout",
        seeAlso:[],
        valueType:"FormLayoutType",
        defaultValue:"\"table\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formLayout"]
    },
    "attr:DateChooser.prevYearIcon":{
        ref:"attr:DateChooser.prevYearIcon",
        flags:"IRW",
        description:"Icon for the previous year button",
        name:"prevYearIcon",
        seeAlso:[
            {ref:"attr:DateChooser.showDoubleYearIcon", description:null}
        ],
        valueType:"URL",
        defaultValue:"\"[SKIN]doubleArrow_left.gif\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:TreeGrid.openLeaf":{
        ref:"method:TreeGrid.openLeaf",
        flags:"A",
        description:" Executed when a leaf node receives a 'doubleClick' event. This handler must be\n specified as a function, whose single parameter is a reference to the relevant leaf node in\n the tree's data.<br>\n See the ListGrid Widget Class for inherited recordClick and recordDoubleClick events.\n\n",
        name:"openLeaf",
        seeAlso:[
            {ref:"class:ListGrid", description:null}
        ],
        params:[
            {description:"node to open", optional:false, name:"node", defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "classMethod:XMLTools.selectObjects":{
        ref:"classMethod:XMLTools.selectObjects",
        flags:"A",
        description:" Applies an XPath expression to JavaScript objects, returning matching objects.\n <P>\n Both child and attribute names are interpreted as property names, and array access notation\n can be used to select elements from Arrays.  For example:<pre>\n     var results = {\n        searchResults:[\n            { title:\"Page One\", relevance:6.3 },\n            { title:\"Page Two\", relevance:5.2, \n              summary: \"Summary of Page One\" }\n        ]\n     };\n\n     // returns the \"searchResults\" two-item Array\n     isc.XMLTools.selectObjects(results, \"/searchResults\");\n\n     // returns the first item under \"searchResults\", in an Array (NOTE: in XPath, Array\n     // index starts at 1, not 0)\n     isc.XMLTools.selectObjects(results, \"/searchResults[1]\");\n\n     // returns [\"Page One\"]\n     isc.XMLTools.selectObjects(results, \"/searchResults[1]/title\");\n\n     // also returns [\"Page One\"]\n     isc.XMLTools.selectObjects(results, \"/searchResults[1]@title\");\n </pre>\n A limited form of XPath \"predicates\", that is, expressions with brackets that filter\n returned objects, is allowed.  A predicate can be either:\n <ul>\n <li> a number only, eg [5], for Array access\n <li> the XPath function call \"last()\", eg [last()], to retrieve the last item\n <li> a property name (*without* any leading \"@\"), meaning that the property contains a value\n      that is considered \"true\" in JavaScript.  For example: [summary]\n <li> a property name, comparison operator, and either a number or String literal, for\n      example, [name = \"bob\"].  In this case the property can also be the XPath function\n      position(), for example, [position() > 5]\n </ul>\n Some examples of using simple predicates with the sample data above:\n <pre>\n     // returns an Array with only the first result\n     isc.XMLTools.selectObjects(results, \"/searchResults[relevance > 5.5]\");\n \n     // return an Array with only the second result, since the first has no summary\n     isc.XMLTools.selectObjects(results, \"/searchResults[summary]\");\n </pre>\n Details of the XPath -> Objects mapping:\n <ul> \n <li> JavaScript Object properties are considered element children, and text children do not\n      exist (in the XML model, text children exist *between* element children, but nothing\n      exists between JavaScript properties)\n <li> The contents of Array-valued properties are considered immediate element children (this\n      is consistent with the predicate \"[5]\" acting like Array access)\n <li> \"*\" in XML selects all element children, so \"*\" in Object XPath selects the values of\n      all properties, that is, ${isc.DocUtils.linkForRef('classMethod:isc.getValues','isc.getValues(object)')}, except\n      that Array-valued properties are \"flattened\" into the returned list.\n </ul>\n\n",
        name:"selectObjects",
        seeAlso:[],
        params:[
            {description:"Object to select results from", optional:false, name:"object", 
             defaultValue:null,type:"Object"},
            {description:"XPath expression", optional:false, name:"xPath", defaultValue:null, 
             type:"String"}
        ],
        returns:{description:"Array of matching objects, or null for no match", type:"Array"},
        type:"classMethod",
        definingClass:"class:XMLTools"
    },
    "method:ListGrid.getSelectedState":{
        ref:"method:ListGrid.getSelectedState",
        flags:"",
        description:" Returns a snapshot of the current selection within this listGrid as \n a ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setSelectedState')} to reset this grid's selection\n the current state (assuming the same data is present in the grid).<br>\n",
        name:"getSelectedState",
        seeAlso:[
            {ref:"method:ListGrid.setSelectedState", description:null}
        ],
        returns:{description:"current state of this grid's selection", type:"listGridSelectedState"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:Tree.rootValue":{
        ref:"attr:Tree.rootValue",
        flags:"IR",
        description:"If you are using the \"parent\" modelType and did not specify a root node via ${isc.DocUtils.linkForRef('attr:Tree.root')}\n with an id (${isc.DocUtils.linkForRef('attr:Tree.idField')}), then you can provide the root node's id via this property.\n See the example in ${isc.DocUtils.linkForRef('attr:Tree.data')} for more info.",
        name:"rootValue",
        seeAlso:[
            {ref:"attr:Tree.data", description:null}
        ],
        valueType:"string|number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "attr:TabSet.pickerButtonSize":{
        ref:"attr:TabSet.pickerButtonSize",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, this property governs the size of tab-picker\n button. Applied as the width of buttons if the tabBar is horizontal, or the height\n if tabBar is vertical. Note that the other dimension is determined by\n ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness','this.tabBarThickness')}",
        name:"pickerButtonSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "attr:Splitbar.canCollapse":{
        ref:"attr:Splitbar.canCollapse",
        flags:"IRW",
        description:"If this property is true, a click on the Splitbar will collapse its \n ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}, hiding it and shifting the Splitbar and other members\n of the layout across to fill the newly available space. If the target is already hidden\n a click will expand it again (showing it at it's normal size).",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Splitbar"
    },
    "group:event":{
        ref:"group:event",
        refs:[],
        name:"event",
        seeAlso:[],
        type:"group"
    },
    "method:DynamicForm.focusInItem":{
        ref:"method:DynamicForm.focusInItem",
        flags:"",
        description:" Move the keyboard focus into a particular item.\n",
        name:"focusInItem",
        seeAlso:[],
        params:[
            {description:"Item (or reference to) item to focus in.", optional:false, name:"itemName", 
             defaultValue:null,type:"number|itemName|formItem"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["eventHandling", "focus"]
    },
    "group:dateFormatting":{
        ref:"group:dateFormatting",
        refs:["method:Date.getShortDayName", "method:Date.getShortMonthName", "method:Date.getShortYear", 
         "method:Date.toDateStamp","method:Date.toNormalDate", "method:Date.toShortDate", "method:Date.toUSShortDate", 
         "method:Date.toUSShortDateTime","method:Date.toEuropeanShortDate", "method:Date.toEuropeanShortDateTime", 
         "method:Date.toJapanShortDate","method:Date.toJapanShortDateTime", "method:Date.toSerializeableDate", 
         "method:Date.setFormatter","method:Date.toPrettyString", "classMethod:Date.parseInput", 
         "classMethod:Date.setNormalDisplayFormat","classMethod:Date.setShortDisplayFormat"],
        name:"dateFormatting",
        seeAlso:[],
        type:"group"
    },
    "group:grouping":{
        ref:"group:grouping",
        refs:["attr:groupNode.groupMembers", "attr:groupNode.groupTitle", "attr:groupNode.groupValue", 
         "attr:ListGrid.originalData","attr:ListGrid.groupTree", "attr:ListGrid.groupStartOpen", "attr:ListGrid.groupNodeStyle", 
         "attr:ListGrid.groupIcon","attr:ListGrid.groupIconSize", "attr:ListGrid.groupIndentSize", 
         "attr:ListGrid.groupLeadingIndent","attr:ListGrid.canGroupBy", "attr:ListGrid.groupByMaxRecords", "attr:ListGrid.isGrouped", 
         "attr:ListGrid.nullGroupTitle","attr:ListGrid.groupByField"],
        name:"grouping",
        seeAlso:[],
        type:"group"
    },
    "classMethod:Page.getScrollHeight":{
        ref:"classMethod:Page.getScrollHeight",
        flags:"",
        description:"		Get the height of the window contents as they have been drawn.\n		If the page scrolls, this may be larger than the page.getHeight().\n",
        name:"getScrollHeight",
        seeAlso:[],
        returns:{description:"height of the page as drawn", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "method:ListGrid.setEditValue":{
        ref:"method:ListGrid.setEditValue",
        flags:"A",
        description:"\n  Modifies a field value being tracked as an unsaved user edit.<P>\n  Use for suggested or reformatted values for edits that remain unsaved.\n\n",
        name:"setEditValue",
        seeAlso:[],
        params:[
            {description:"Row number (or edit values ID)", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"Column number of cell, or name of field                                           having editValue updated", 
             optional:false,name:"colNum", defaultValue:null, type:"number | string"},
            {description:"New value for the appropriate field.", optional:false, name:"value", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:CubeGrid.simpleDeselect":{
        ref:"attr:CubeGrid.simpleDeselect",
        flags:"IRW",
        description:"If true, clicking on the existing selection causes it to be entirely deselected.",
        name:"simpleDeselect",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Splitbar.src":{
        ref:"attr:Splitbar.src",
        flags:"IR",
        description:"The base URL for the image. \n <P>\n As with ${isc.DocUtils.linkForRef('attr:Img.src')}, the ${isc.DocUtils.linkForRef('type:State')} of the component is added to this URL.  Then,\n the image segment name as specified by ${isc.DocUtils.linkForRef('attr:StretchImg.items')} is added.\n <P>\n For example, for a stretchImg in \"Over\" state with a <code>src</code> of \"button.png\"\n and a segment name of \"stretch\", the resulting URL would be \"button_Over_stretch.png\".",
        name:"src",
        seeAlso:[
            {ref:"attr:StretchImg.hSrc", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["appearance"]
    },
    "group:dataSourceRelations":{
        ref:"group:dataSourceRelations",
        title:"Relations",
        refs:["attr:DataSourceField.primaryKey", "attr:DataSourceField.foreignKey", 
         "attr:DataSourceField.childrenProperty","attr:DataSourceField.rootValue", "attr:DataSource.childrenField"],
        description:"Properties for declaring relations between DataSource and within DataSources, such as\n master-detail relationship (a SalesOrder contains 0 or more OrderItems) and tree\n relationships (records can be linked by a parentId field).",
        name:"dataSourceRelations",
        seeAlso:[
            {ref:"attr:DataSourceField.foreignKey", description:null}
        ],
        type:"group"
    },
    "attr:RPCRequest.evalVars":{
        ref:"attr:RPCRequest.evalVars",
        flags:"IRWA",
        description:"If you've set ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} : true, then the property values of this object\n will be available in the evaluation scope of the result under the variable names\n specified by the property names. \n <p>\n So e.g. if evalVars is: <code>{foo: \"bar\"}</code> then a reference to the\n variable <code>foo</code> in the result will evaluate to <code>\"bar\"</code>.",
        name:"evalVars",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["viewLoading"]
    },
    "classMethod:Log.show":{
        ref:"classMethod:Log.show",
        flags:"",
        description:" Open the Developer Console.\n <P>\n The Developer Console should <b>always</b> be open while developing any ISC-enabled\n application, because ISC logs many important errors and warnings to the Developer Console.\n <P>\n In Internet Explorer, the Developer Console is able to log a stack trace for every JS error,\n including errors that occur in non-ISC code.\n <P>\n NOTE: if you have the Microsoft JavaScript Debugger installed, ISC will be unable to log\n stack traces on JS errors until you go to Tools->Internet Options->Advanced Tab and check\n \"Disable script debugging\".  The ability to see stack traces in the Developer Console is\n generally much more useful for debugging ISC-based applications than the generic Javascript\n Debugging facilities.\n \n",
        name:"show",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "classAttr:Array.LOADING":{
        ref:"classAttr:Array.LOADING",
        flags:"A",
        description:"Marker value returned by Lists that manage remote datasets, indicating the requested data is\n being loaded.",
        name:"LOADING",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"loading\"",
        type:"classAttr",
        definingClass:"object:Array"
    },
    "attr:Toolbar.canResizeItems":{
        ref:"attr:Toolbar.canResizeItems",
        flags:"IRWA",
        description:"If true, items (buttons) can be resized by dragging on them.",
        name:"canResizeItems",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["dragndrop"]
    },
    "attr:MenuButton.menuButtonImage":{
        ref:"attr:MenuButton.menuButtonImage",
        flags:"IRWA",
        description:"Image for menu button indicating that the button expands a menu.  This image is shown\n for menus expanding down from the button.   Menu direction is controlled by\n ${isc.DocUtils.linkForRef('attr:MenuButton.showMenuBelow')}.",
        name:"menuButtonImage",
        seeAlso:[
            {ref:"attr:MenuButton.menuButtonImageUp", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]menu_button.gif\"",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "type:PageEvent":{
        ref:"type:PageEvent",
        values:[
            {description:"Fires repeatedly (every 10 ms by default) when the system is idle (i.e.,\n        not busy running other scripts) after the page is loaded.", 
             value:"\"idle\""},
            {description:"Fires when the page has finished loading. It corresponds to the\n        browser 'load' event normally handled by window.onload.", 
             value:"\"load\""},
            {description:"Fires when the page is exited or unloaded. It corresponds to the\n        browser 'unload' event normally handled by window.onunload.", 
             value:"\"unload\""},
            {description:"Fires when the browser window is resized by the user. It corresponds\n        to the browser 'resize' event normally handled by window.onresize.", 
             value:"\"resize\""},
            {description:"Fires when the left mouse button is pressed on the Page.", 
             value:"\"mouseDown\""},
            {description:"Fires when the right mouse button is pressed on the Page.", 
             value:"\"rightMouseDown\""},
            {description:"Fires when the mouse moves on the Page.", value:"\"mouseMove\""},
            {description:"Fires when the left mouse button released on the Page.", 
             value:"\"mouseUp\""},
            {description:"Fires when the user clicks the mouse on the Page.", value:"\"cick\""},
            {description:"Fires when the uesr double-clicks on the Page.", value:"\"doubleClick\""},
            {description:"Fires when the right mouse button is clicked on the page.  If your event handler\n        for this event returns false, the native browser context menu will be suppressed.<br>\n        Note: On the Macintosh platform, <code>Command+Click</code> may be used instead\n        of right-button click to trigger a context menu event.<br>\n        On the Opera browser, <code>Ctrl+Shift+Click</code> should be used instead of\n        right-button click.", 
             value:"\"showContextMenu\""},
            {description:"Fires when a user presses a key on the keyboard. \n see classMethod:Page.setEvent()\n see classMethod:Page.clearEvent()", 
             value:"\"keyPress\""}
        ],
        description:"Events registerable via ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')}",
        name:"PageEvent",
        seeAlso:[],
        type:"type"
    },
    "method:Canvas.intersects":{
        ref:"method:Canvas.intersects",
        flags:"",
        description:"			Returns true if the rectangles of this widget and the specified widget overlap.\n",
        name:"intersects",
        seeAlso:[],
        params:[
            {description:"other canvas to test for intersection", optional:false, name:"other", 
             defaultValue:null,type:"canvas"}
        ],
        returns:{description:"true if this canvas intersects other; false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:PickList.pickListBaseStyle":{
        ref:"attr:PickList.pickListBaseStyle",
        flags:"IR",
        description:"Base Style for pickList cells.  As with ListGrid Cells, will have 'over', 'selected'\n and 'disabled' appended on changes of state for the cells.",
        name:"pickListBaseStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"pickListCell\"",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "method:ValuesManager.getMemberForField":{
        ref:"method:ValuesManager.getMemberForField",
        flags:"",
        description:" Given a fieldName, this method will find the member form containing an item for that\n field. If no member form is found, returns null.\n",
        name:"getMemberForField",
        seeAlso:[],
        params:[
            {description:"fieldName to check", optional:false, name:"fieldName", defaultValue:null, 
             type:"string"}
        ],
        returns:{description:"member form containing an item for the fieldName, or null.", type:"DynamicForm"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "attr:Progressbar.vertical":{
        ref:"attr:Progressbar.vertical",
        flags:"IRW",
        description:"Indicates whether this is a vertical or horizontal progressbar.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Progressbar",
        groups:["appearance"]
    },
    "attr:ListGrid.editEvent":{
        ref:"attr:ListGrid.editEvent",
        flags:"IRW",
        description:"Event that will trigger inline editing, see ${isc.DocUtils.linkForRef('type:ListGridEditEvent')} for options.\n <P>\n Note this setting has no effect unless ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')} has been set to enable editing.\n <P>\n See also ${isc.DocUtils.linkForRef('attr:ListGrid.editOnFocus')} and ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}.",
        name:"editEvent",
        seeAlso:[],
        valueType:"ListGridEditEvent",
        defaultValue:"\"doubleClick\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('editByRow')}"],
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:widgetEvents":{
        ref:"group:widgetEvents",
        refs:["method:Canvas.showContextMenu", "method:Canvas.hideContextMenu", 
         "method:Canvas.mouseOver","method:Canvas.mouseDown", "method:Canvas.rightMouseDown", "method:Canvas.mouseStillDown", 
         "method:Canvas.mouseMove","method:Canvas.mouseOut", "method:Canvas.mouseUp", "method:Canvas.click", 
         "method:Canvas.doubleClick","method:Canvas.mouseWheel", "method:Canvas.dragRepositionStart", 
         "method:Canvas.dragRepositionMove","method:Canvas.dragRepositionStop", "method:Canvas.dragStart", "method:Canvas.dragMove", 
         "method:Canvas.dragStop","method:Canvas.dropOver", "method:Canvas.dropMove", "method:Canvas.dropOut", 
         "method:Canvas.drop","method:Canvas.keyDown", "method:Canvas.keyUp", "method:Canvas.keyPress"],
        name:"widgetEvents",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.setSelectedState":{
        ref:"method:ListGrid.setSelectedState",
        flags:"",
        description:" Reset this grid's selection to match the ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to \n ${isc.DocUtils.linkForRef('method:ListGrid.getSelectedState')}.\n\n",
        name:"setSelectedState",
        seeAlso:[
            {ref:"method:ListGrid.getSelectedState", description:null}
        ],
        params:[
            {description:"Object describing the desired selection state of                                              the grid", 
             optional:false,name:"selectedState", defaultValue:null, type:"listGridSelectedState"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "method:Layout.reflowNow":{
        ref:"method:Layout.reflowNow",
        flags:"A",
        description:" Layout members according to current settings, immediately.\n <br>\n Generally, when changes occur that require a layout to reflow (such as members being shown\n or hidden), the Layout will reflow only after a delay, so that multiple changes cause only\n one reflow.  To remove this delay for cases where it is not helpful, reflowNow() can be\n called.\n",
        name:"reflowNow",
        seeAlso:[],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:TreeGrid.openerImage":{
        ref:"attr:TreeGrid.openerImage",
        flags:"IR",
        description:"The base filename of the opener icon for the folder node when 'showConnectors' is false\n for this TreeGrid.<br>\n The opener icon is displayed beside the folder icon in the Tree column for folder nodes.\n Clicking on this icon will toggle the open state of the folder.<br>\n The filenames for these icons are assembled from this base filename and the state of the\n node, as follows:<br>\n If the openerImage is set to <code>{baseName}.{extension}</code>, \n <code>{baseName}_opened.{extension}</code> will be displayed next to opened folders, and\n <code>{baseName}_closed.{extension}</code> will be displayed next to closed folders, or\n if this page is in RTL mode, <code>{baseName}_opened_rtl.{extension}</code> and\n <code>{baseName}_closed_rtl.{extension}</code> will be used.",
        name:"openerImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]opener.gif\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "group:hiliting":{
        ref:"group:hiliting",
        refs:["method:CubeGrid.enableHilite", "method:CubeGrid.disableHilite", 
         "method:CubeGrid.enableHiliting","method:CubeGrid.disableHiliting", "method:CubeGrid.hiliteCell", 
         "method:CubeGrid.hiliteCellList","method:CubeGrid.hiliteFacetValue"],
        description:null,
        name:"hiliting",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgButton.selected":{
        ref:"attr:ImgButton.selected",
        flags:"IRW",
        description:"Whether this component is selected.  For some components, selection affects appearance.",
        name:"selected",
        setter:["setSelected"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:ValuesManager.disableValidation":{
        ref:"attr:ValuesManager.disableValidation",
        flags:"IRWA",
        description:"If set to true, client-side validators will not run on the form when validate() is\n called.  Server-side validatiors (if any) will still run on attempted save.",
        name:"disableValidation",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null},
            {ref:"method:DynamicForm.submit", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ValuesManager",
        groups:["validation"]
    },
    "interface:List":{
        methods:["method:List.get", "method:List.getLength", "method:List.isEmpty", "method:List.first", 
         "method:List.last","method:List.indexOf", "method:List.lastIndexOf", "method:List.findIndex", 
         "method:List.findNextIndex","method:List.find", "method:List.findAll", "method:List.contains", 
         "method:List.containsAll","method:List.intersect", "method:List.equals", "method:List.getItems", 
         "method:List.getRange","method:List.duplicate", "method:List.set", "method:List.addAt", "method:List.removeAt", 
         "method:List.add","method:List.addList", "method:List.setLength", "method:List.addListAt", 
         "method:List.remove","method:List.removeList", "method:List.sort", "method:List.sortByProperty", 
         "method:List.getValueMap","method:List.dataChanged"],
        ref:"interface:List",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"An interface for an ordered collection of items.\n <P>\n This is the interface that is expected by list-oriented display components such as the\n ListGrid.  The JavaScript native Array object is retrofitted to support the List interface.\n Also, a valid List can be created by mixing the List interface into any class that supports:\n <ul>\n <li> for read-only support: get(position), getLength()\n <li> for modifiable support: set(position), addAt(object, position), removeAt(position)\n </ul>\n <P>\n NOTE: this interface is compatible with the java.util.List interface, except that:\n <ul>\n <li> for removal by index, removeAt() must be called instead of remove().  In Java, remove()\n is an overloaded method that takes either an int or Object, whereas in JavaScript, a\n Number is an Object.\n <li> Iterators don't exist.\n </ul> \n Some methods from the Java List interface have been omitted from the documentation to avoid\n redundancy.",
        name:"List",
        seeAlso:[],
        type:"interface"
    },
    "classMethod:EventHandler.leftButtonDown":{
        ref:"classMethod:EventHandler.leftButtonDown",
        flags:"",
        description:"			Returns true if the left mouse button is being pressed.\n\n",
        name:"leftButtonDown",
        seeAlso:[],
        returns:{description:"true == left button is down, false == up", type:"boolean"},
        type:"classMethod",
        platformNotes:"Mac:		Macintosh platform generally has only one mouse button - ISC considers it to be the \"left\"\n		mouse button, so this method will return true if the mouse is down on a single-button mouse Mac.",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "method:Canvas.dropOver":{
        ref:"method:Canvas.dropOver",
        flags:"A",
        description:"\n Executed when the compatible dragged object is first moved over this drop target. Your\n implementation can use this to show a custom visual indication that the object can be\n dropped here.\n\n",
        name:"dropOver",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customDrag')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:CubeGrid.getEditValues":{
        ref:"method:CubeGrid.getEditValues",
        flags:"",
        description:" Returns the current set of unsaved edits for a given row being edited.\n\n",
        name:"getEditValues",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"valuesID", defaultValue:null, type:"number | Object"},
            {description:"colNum of the record being edited. Only required if valuesID                         is passed in as a rowNum.", 
             optional:false,name:"colNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"Current editValues object for the row.  This contains the current                     edit values in {fieldName1:value1, fieldName2:value2} format.", 
         type:"object"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "method:Selection.selectRange":{
        ref:"method:Selection.selectRange",
        flags:"",
        description:"			Select range of records from <code>start</code> to <code>end</code>, non-inclusive.\n",
        name:"selectRange",
        seeAlso:[],
        params:[
            {description:"start index to select", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end index (non-inclusive)", optional:false, name:"end", defaultValue:null, 
             type:"number"},
            {description:"optional new selection state to set.  True means                                      selected, false means unselected.  Defaults to true.", 
             optional:true,name:"newState", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:ListGrid.headerMenuButtonConstructor":{
        ref:"attr:ListGrid.headerMenuButtonConstructor",
        flags:"IRA",
        description:"Constrocutor for the  ${isc.DocUtils.linkForRef('attr:ListGrid.headerMenuButton')}. If unset a standard \"Button\" will\n be rendered out. Note that this property may be overridden by different skins.",
        name:"headerMenuButtonConstructor",
        seeAlso:[],
        valueType:"className",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "classMethod:Page.setAppImgDir":{
        ref:"classMethod:Page.setAppImgDir",
        flags:"",
        description:" Specify the directory for app-specific images.\n <P>\n This becomes the default location where any SmartClient component will load images from\n unless the special \"[SKIN]\" prefix is used to indicate that an image is part of a skin.\n <P>\n Default is \"[APP]images/\"\n\n",
        name:"setAppImgDir",
        seeAlso:[],
        params:[
            {description:"New imgDir URL.", optional:true, name:"URL", defaultValue:null, type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "method:ListGrid.hasChanges":{
        ref:"method:ListGrid.hasChanges",
        flags:"",
        description:" Whether the grid as a whole has any unsaved edits, in any row.\n",
        name:"hasChanges",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Layout.hPolicy":{
        ref:"attr:Layout.hPolicy",
        flags:"IRWA",
        description:"Sizing policy applied to members on horizonal axis",
        name:"hPolicy",
        seeAlso:[],
        valueType:"LayoutPolicy",
        defaultValue:"\"fill\"",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "attr:ListGrid.canResizeFields":{
        ref:"attr:ListGrid.canResizeFields",
        flags:"IRW",
        description:"Indicates whether fields in this listGrid can be resized by dragging header\n          fields.",
        name:"canResizeFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('columnSize')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "attr:Window.showFooter":{
        ref:"attr:Window.showFooter",
        flags:"IRW",
        description:"If true, show a footer for this Window, including resizer, statusBar, etc.\n This setting is commonly overridden for skinning purposes.",
        name:"showFooter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('windowFooter')}"],
        definingClass:"class:Window",
        groups:["appearance", "footer"]
    },
    "type:XMLDocument":{
        ref:"type:XMLDocument",
        description:"XMLDocument is the \"parsed\" or object form of XML, which allows XML to be navigated as\n a tree of nodes with attributes, namespaces and other metadata, as opposed to being\n manipulated as just a String.\n <P> \n XMLDocument is a native object supplied directly by the browser.  The SmartClient-supported\n interfaces for this object are methods that take an XMLDocument as an argument (such as\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}).  If you want to retrieve XML data and display it in a\n SmartClient component, read about ${isc.DocUtils.linkForRef('group:clientDataIntegration','XML Data Binding')}.  To\n extract data as JavaScript Objects from XML, see ${isc.DocUtils.linkForRef('classMethod:XMLTools.toJS')}.  Direct\n manipulation of XMLDocument is subject to cross-browser inconsistencies, bugs, memory leaks\n and performance issues.",
        name:"XMLDocument",
        seeAlso:[],
        type:"type"
    },
    "method:Canvas.setPercentSource":{
        ref:"method:Canvas.setPercentSource",
        flags:"A",
        description:" Setter method for the ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')} attribute.\n",
        name:"setPercentSource",
        seeAlso:[],
        params:[
            {description:"eterNew percent source (if ommitted existing                                      percentSource will just be cleared).", 
             optional:true,name:"sourceWidget", defaultValue:null, type:"Canvas"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:DynamicForm.rightTitlePrefix":{
        ref:"attr:DynamicForm.rightTitlePrefix",
        flags:"IRW",
        description:"The string prepended to the title of an item in this form if its\n          titleOrientation property is set to \"right\".",
        name:"rightTitlePrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\":&nbsp;\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "method:SectionStack.getVisibleSections":{
        ref:"method:SectionStack.getVisibleSections",
        flags:"",
        description:"\n Returns the list of currently visible sections.  The list items are section IDs.\n\n",
        name:"getVisibleSections",
        seeAlso:[],
        returns:{description:"list of hidden sections", type:"List"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "group:componentBinding":{
        ref:"group:componentBinding",
        title:"Component Binding",
        refs:["attr:DataSourceField.title", "attr:DataSourceField.canEdit", 
         "attr:DataSourceField.editorType","attr:DataSourceField.hidden", "attr:DataSourceField.detail"],
        description:"Properties that control how a DataBound Component binds to this DataSource",
        name:"componentBinding",
        seeAlso:[],
        type:"group"
    },
    "classMethod:EventHandler.getKey":{
        ref:"classMethod:EventHandler.getKey",
        flags:"",
        description:"			Return the name of the key for the event passed in.\n			Note that this is only set reliably for keyboard events.\n\n",
        name:"getKey",
        seeAlso:[],
        returns:{description:"Key Name", type:"KeyName"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["keyboardEvents"]
    },
    "attr:ListGridField.baseStyle":{
        ref:"attr:ListGridField.baseStyle",
        flags:"IRW",
        description:"Custom base style to apply to all cells in this field instead of ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle')}\n  To override the baseStyle at the row level, use \n  ${isc.DocUtils.linkForRef('attr:ListGrid.recordBaseStyleProperty','record[listGrid.recordBaseStyleProperty]')}\n  instead.",
        name:"baseStyle",
        seeAlso:[
            {ref:"attr:ListGrid.recordBaseStyleProperty", description:null}
        ],
        valueType:"cssClass",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('gridCells')}"],
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:ImgButton.setState":{
        ref:"method:ImgButton.setState",
        flags:"",
        description:" Set the 'state' of this object, this changes it's appearance.\n\n",
        name:"setState",
        seeAlso:[
            {ref:"method:ImgButton.setDisabled", description:"which also affects state values."}
        ],
        params:[
            {description:"new state", optional:false, name:"newState", defaultValue:null, type:"State"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state", "appearance"]
    },
    "attr:Canvas.animateAcceleration":{
        ref:"attr:Canvas.animateAcceleration",
        flags:"IRWA",
        description:"Default acceleration effect to apply to all animations on this Canvas.\n Can be overridden by setting animationAcceleration for specific animations or by passing\n an acceleration function directly into the appropriate method.",
        name:"animateAcceleration",
        seeAlso:[],
        valueType:"AnimationEffect",
        defaultValue:"\"smoothEnd\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:CubeGrid.cellSelectionChanged":{
        ref:"method:CubeGrid.cellSelectionChanged",
        flags:"",
        description:"\n      Handler/Notification function for cell selection change\n      May update header button styles.\n\n      <br><i>methodType</i> handler\n",
        name:"cellSelectionChanged",
        seeAlso:[],
        params:[
            {description:"array of cells with new selection state", optional:false, name:"cellList", 
             defaultValue:null,type:"Array of cells"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:ListGrid.refreshFields":{
        ref:"method:ListGrid.refreshFields",
        flags:"",
        description:" Re-evaluates ${isc.DocUtils.linkForRef('attr:ListGridField.showIf')} for each field, dynamically showing and \n hiding the appropriate set of fields\n",
        name:"refreshFields",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:ListGridField.imageURLSuffix":{
        ref:"attr:ListGridField.imageURLSuffix",
        flags:"IRWA",
        description:"If any cells in this field are showing a value icon (see: ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')})\n or this is has ${isc.DocUtils.linkForRef('type:ListGridFieldType')} set to <code>\"image\"</code>, this the value\n of this property will be appended to the end of the URL for the icon displayed.<br>\n Typical usage might be to append a file type such as <code>\".gif\"</code> to the\n filename of the image.<br>\n For editable fields, this property will also be passed through to any editors as\n ${isc.DocUtils.linkForRef('attr:FormItem.imageURLSuffix')}.",
        name:"imageURLSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('imageType')}"],
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:StretchImgButton.labelVPad":{
        ref:"attr:StretchImgButton.labelVPad",
        flags:"IRW",
        description:"The padding for a StretchImgButton's label is determined as follows.\n <P>\n If <code>labelHPad</code> is set it will specify the horizontal padding applied to the\n label. Similarly if <code>labelVPad</code> is set it will specify the vertical padding\n for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.\n <P>\n Otherwise <code>labelLengthPad</code> can be set to specify the label padding along the\n length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,\n otherwise vertical padding), and \n <code>labelBreadthPad</code> can be set to specify the label padding along the other axis.\n <P>\n Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and\n will be set to zero on the breadth axis.\n <P>\n So by default the label will be sized to match the center image of the StretchImgButton, but\n these settings allow the label to partially or wholly overlap the caps.",
        name:"labelVPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "attr:StretchImgButton.labelLengthPad":{
        ref:"attr:StretchImgButton.labelLengthPad",
        flags:"IRW",
        description:"The padding for a StretchImgButton's label is determined as follows.\n <P>\n If <code>labelHPad</code> is set it will specify the horizontal padding applied to the\n label. Similarly if <code>labelVPad</code> is set it will specify the vertical padding\n for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.\n <P>\n Otherwise <code>labelLengthPad</code> can be set to specify the label padding along the\n length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,\n otherwise vertical padding), and \n <code>labelBreadthPad</code> can be set to specify the label padding along the other axis.\n <P>\n Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and\n will be set to zero on the breadth axis.\n <P>\n So by default the label will be sized to match the center image of the StretchImgButton, but\n these settings allow the label to partially or wholly overlap the caps.",
        name:"labelLengthPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:Array.remove":{
        ref:"method:Array.remove",
        flags:"",
        description:" Remove first instance of the passed object from this array, sliding other items around to\n fill gaps.\n\n",
        name:"remove",
        seeAlso:[],
        params:[
            {description:"item to remove", optional:false, name:"obj", defaultValue:null, type:"any"}
        ],
        returns:{description:"true if a matching object was found and removed, false if no matching object was found and the list remains unchanged.", 
         type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "method:Canvas.scrollToLeft":{
        ref:"method:Canvas.scrollToLeft",
        flags:"",
        description:" Horizontally scrolls the content of the widget to 0\n\n",
        name:"scrollToLeft",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:ImgButton.select":{
        ref:"method:ImgButton.select",
        flags:"",
        description:" Select this object.\n",
        name:"select",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:Chart.title":{
        ref:"attr:Chart.title",
        flags:"IR",
        description:"Title for the chart as a whole.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "method:GridRenderer.refreshCellStyle":{
        ref:"method:GridRenderer.refreshCellStyle",
        flags:"",
        description:" Refresh the styling of an individual cell without redrawing the grid.\n <P>\n The cell's CSS class and CSS text will be refreshed, to the current values returned by\n getCellStyle() and getCellCSSText() respectively.\n <P>\n The cell's contents (as returned by getCellValue()) will <b>not</b> be refreshed.  To\n refresh both styling and contents, call refreshCell() instead.\n\n",
        name:"refreshCellStyle",
        seeAlso:[
            {ref:"method:GridRenderer.refreshCell", description:"to update cell contents too"}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column number of cell to refresh", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["appearance"]
    },
    "method:Canvas.setCursor":{
        ref:"method:Canvas.setCursor",
        flags:"",
        description:"			Sets the cursor for this widget to cursor. See the cursor property\n          for possible values.\n",
        name:"setCursor",
        seeAlso:[],
        params:[
            {description:"new cursor", optional:false, name:"newCursor", defaultValue:null, 
             type:"Cursor"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["cues"]
    },
    "group:subset":{
        ref:"group:subset",
        refs:["method:Array.getUniqueItems"],
        name:"subset",
        seeAlso:[],
        type:"group"
    },
    "method:List.isEmpty":{
        ref:"method:List.isEmpty",
        flags:"",
        description:" Return whether or not this array is empty\n\n",
        name:"isEmpty",
        seeAlso:[],
        returns:{description:"true == this array is empty, false == some items in the array", type:"boolean"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "method:SectionStack.addItem":{
        ref:"method:SectionStack.addItem",
        flags:"",
        description:" Add a canvas as an item to a section.\n",
        name:"addItem",
        seeAlso:[],
        params:[
            {description:"ID or index of the section to add item to", optional:false, name:"section", 
             defaultValue:null,type:"String or Number"},
            {description:"Item to insert into the section", optional:false, name:"item", 
             defaultValue:null,type:"Canvas"},
            {description:"Index into section to insert item", optional:false, name:"index", 
             defaultValue:null,type:"Number"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:Canvas.animateScrollTime":{
        ref:"attr:Canvas.animateScrollTime",
        flags:"IRWA",
        description:"Default time for performing an animated scroll.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateScrollTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "group:buttonIcon":{
        ref:"group:buttonIcon",
        title:"Button Icon",
        refs:["method:StatefulCanvas.setIconOrientation", "method:StatefulCanvas.setIcon", 
         "method:Button.setIconOrientation","method:Button.setIcon", "method:Button.iconClick", "method:Label.setIconOrientation", 
         "method:Label.setIcon","method:ImgButton.setIconOrientation", "method:ImgButton.setIcon", 
         "method:StretchImgButton.setIconOrientation","method:StretchImgButton.setIcon", "method:StretchImgButton.iconClick", 
         "attr:ListGridField.iconSpacing","attr:ListGridField.showDisabledIcon", "attr:ListGridField.showRollOverIcon", 
         "attr:ListGridField.showFocusedIcon","attr:ListGridField.showDownIcon", "attr:ListGridField.showSelectedIcon", 
         "attr:StatefulCanvas.icon","attr:StatefulCanvas.iconSize", "attr:StatefulCanvas.iconWidth", 
         "attr:StatefulCanvas.iconHeight","attr:StatefulCanvas.iconOrientation", "attr:StatefulCanvas.iconSpacing", 
         "attr:StatefulCanvas.showDisabledIcon","attr:StatefulCanvas.showRollOverIcon", "attr:StatefulCanvas.showDownIcon", 
         "attr:StatefulCanvas.showSelectedIcon","attr:StatefulCanvas.showFocusedIcon", "attr:Button.icon", "attr:Button.iconSize", 
         "attr:Button.iconWidth","attr:Button.iconHeight", "attr:Button.iconOrientation", "attr:Button.iconAlign", 
         "attr:Button.iconSpacing","attr:Button.showDisabledIcon", "attr:Button.showRollOverIcon", 
         "attr:Button.showFocusedIcon","attr:Button.showDownIcon", "attr:Button.showSelectedIcon", "attr:Label.icon", 
         "attr:Label.iconSize","attr:Label.iconWidth", "attr:Label.iconHeight", "attr:Label.iconOrientation", 
         "attr:Label.iconAlign","attr:Label.iconSpacing", "attr:Label.showDisabledIcon", "attr:Label.showRollOverIcon", 
         "attr:Label.showFocusedIcon","attr:Label.showDownIcon", "attr:Label.showSelectedIcon", "attr:ImgButton.icon", 
         "attr:ImgButton.iconSize","attr:ImgButton.iconWidth", "attr:ImgButton.iconHeight", "attr:ImgButton.iconOrientation", 
         "attr:ImgButton.iconAlign","attr:ImgButton.iconSpacing", "attr:ImgButton.showDisabledIcon", 
         "attr:ImgButton.showRollOverIcon","attr:ImgButton.showFocusedIcon", "attr:ImgButton.showDownIcon", 
         "attr:ImgButton.showSelectedIcon","attr:StretchImgButton.icon", "attr:StretchImgButton.iconSize", 
         "attr:StretchImgButton.iconWidth","attr:StretchImgButton.iconHeight", "attr:StretchImgButton.iconOrientation", 
         "attr:StretchImgButton.iconAlign","attr:StretchImgButton.iconSpacing", "attr:StretchImgButton.showDisabledIcon", 
         "attr:StretchImgButton.showRollOverIcon","attr:StretchImgButton.showFocusedIcon", "attr:StretchImgButton.showDownIcon", 
         "attr:StretchImgButton.showSelectedIcon"],
        description:"Control over optional icons shown in Buttons, Labels and other contexts",
        name:"buttonIcon",
        seeAlso:[],
        type:"group"
    },
    "attr:Tree.nameProperty":{
        ref:"attr:Tree.nameProperty",
        flags:"IRW",
        description:"Name of the property that holds the 'name' of a node for the purpose of calculating the path\n to the node.  By default this is set to ${isc.DocUtils.linkForRef('attr:TreeNode.name')}.  If the value of the\n nameProperty of a node (e.g. node.name) is not a string, it will be converted to a string by\n the Tree via \"\"+value.",
        name:"nameProperty",
        seeAlso:[
            {ref:"attr:TreeNode.name", description:null}
        ],
        valueType:"string",
        defaultValue:"\"name\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "attr:StretchImgButton.hiliteAccessKey":{
        ref:"attr:StretchImgButton.hiliteAccessKey",
        flags:"IRW",
        description:"If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the\n specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user\n it will be modified to include HTML to underline the accessKey.<br>\n Note that this property may cause titles that include HTML (rather than simple strings)\n to be inappropriately modified, so should be disabled if your title string includes\n HTML characters.",
        name:"hiliteAccessKey",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:CubeGrid.getFacetValuesRow":{
        ref:"method:CubeGrid.getFacetValuesRow",
        flags:"",
        description:" Get the index of the first row in the grid that matches the specified FacetValueMap.<br>\n The facetValues passed in should contain values for at least one row facet. If values are \n sparse (values not specified for every row facet), the first row matching the specified\n facet values will be returned.\n",
        name:"getFacetValuesRow",
        seeAlso:[],
        params:[
            {description:"facet values to find", optional:false, name:"facetValues", defaultValue:null, 
             type:"facetValueMap"}
        ],
        returns:{description:"index of first row in the grid that matches the facet values passed in.", 
         type:"integer"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "method:ListGrid.selectionChanged":{
        ref:"method:ListGrid.selectionChanged",
        flags:"",
        description:" Called when (row-based) selection changes within this grid. Note this method fires for\n each record for which selection is modified - so when a user clicks inside a grid this\n method will typically fire twice (once for the old record being deselected, and once for\n the new record being selected).\n\n",
        name:"selectionChanged",
        seeAlso:[],
        params:[
            {description:"record for which selection changed", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"New selection state (true for selected, false for unselected)", 
             optional:false,name:"state", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('multipleSelect')}"],
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "attr:Canvas.dragRepositionCursor":{
        ref:"attr:Canvas.dragRepositionCursor",
        flags:"IRWA",
        description:"Cursor to switch to if the mouse is over a widget that is drag repositionable.",
        name:"dragRepositionCursor",
        seeAlso:[],
        valueType:"Cursor",
        defaultValue:"Canvas.MOVE",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:StretchImg.vSrc":{
        ref:"attr:StretchImg.vSrc",
        flags:"IRW",
        description:"Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true and \n ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset.",
        name:"vSrc",
        seeAlso:[
            {ref:"attr:StretchImg.src", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "group:clientOnlyDataSources":{
        ref:"group:clientOnlyDataSources",
        title:"Client Only DataSources",
        treeLocation:["Client Reference/Data Binding/DataSource"],
        refs:["attr:DataSource.clientOnly", "attr:DataSource.testData"],
        description:"For prototyping purposes, a \"client-only\" DataSource can be created that has no permanent\n storage and never contacts the server, instead using a set of test data to respond to\n requests in the same manner as a server-based DataSource might.\n <P>\n The client-side interface to a client-only DataSource is identical to a server-based\n DataSource, including asynchronous responses, so that a client-only DataSource can be\n replaced by a server-based DataSource without code changes.  The only difference is that\n changes to records belonging to the DataSource persist only until the page is reloaded.\n <p>\n Client-only DataSources allow you to create a complete prototype application in an .html\n file that does not require a server.\n <p>\n The <code>clientOnly</code> property is specified to create a client-only DataSource, and\n the <code>testData</code> property should contain the test dataset, as an Array of Objects,\n one per DataSource record.  For example:\n <pre>\n   isc.DataSource.create({\n       ID:\"supplyItem\",\n       fields: ...,\n       clientOnly:true,\n       testData:[\n          {itemName:\"Pencil\", cost:5.50},\n          ...\n       ]\n   });\n </pre>\n If you have existing test data in XML, you can use the XML->JS translation engine to load it\n into a client-only DataSource, like so:\n <pre>\n   isc.DataSource.create({\n     ID:\"solutions\",\n     fields: ...,\n     clientOnly : true,\n     testData : \n         &lt;isomorphic:XML filename=\"shared/ds/test_data/solutions.data.xml\"/&gt;\n   });\n </pre>\n Another useful practice is to specify both the DataSource and it's test data in XML, so that\n the ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')} can later be used to import the DataSource and\n its test data into a SQL DataBase.  An idiom for accomplishing this is:\n <pre>\n   &lt;isomorphic:loadDS name=\"solutions\"/&gt;\n   isc.DataSource.getDataSource(\"solutions\").addProperties({\n     clientOnly : true,\n     testData : \n        &lt;isomorphic:XML filename=\"shared/ds/test_data/solutions.data.xml\"/&gt;\n   });\n </pre>\n Finally, if you specify your DataSource as <code>clientOnly: true</code>, omit testData\n entirely, and provide either a ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} or a <code>testFileName</code>, the\n DataSource will lazily make a one-time fetch against the specified data file the first time\n an operation is called on it.  From then on, the DataSource will work against the local\n cache created from this initial request.  This is a quick way to prototype against some test\n data that may eventually be returned from an arbitrary back-end.",
        name:"clientOnlyDataSources",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.doubleClick":{
        ref:"method:Canvas.doubleClick",
        flags:"A",
        description:"\n Executed when the left mouse button is clicked twice in rapid succession (within\n ${isc.DocUtils.linkForRef('attr:Canvas.doubleClickDelay')} by default) in this object.\n\n",
        name:"doubleClick",
        seeAlso:[
            {ref:"attr:Canvas.doubleClickDelay", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "type:SortDirection":{
        ref:"type:SortDirection",
        values:[
            {description:"Sort in ascending order (eg: A-Z, larger items later in the list)", 
             value:"\"ascending\""},
            {description:"Sort in descending order (eg: Z-A, larger items earlier in the list)", 
             value:"\"descending\""}
        ],
        description:null,
        name:"SortDirection",
        seeAlso:[],
        type:"type",
        groups:["sorting"]
    },
    "group:sizing":{
        ref:"group:sizing",
        refs:["method:ListGrid.setHeaderHeight", "method:FormItem.getIconHeight", 
         "method:FormItem.getIconWidth","method:Canvas.setRect", "method:Canvas.getWidth", "method:Canvas.setWidth", 
         "method:Canvas.getHeight","method:Canvas.setHeight", "method:Canvas.getRight", "method:Canvas.setRight", 
         "method:Canvas.getBottom","method:Canvas.setBottom", "method:Canvas.getScrollWidth", "method:Canvas.getScrollHeight", 
         "method:Canvas.getViewportWidth","method:Canvas.getViewportHeight", "method:Canvas.getInnerHeight", 
         "method:Canvas.getInnerWidth","method:Canvas.getInnerContentHeight", "method:Canvas.getInnerContentWidth", 
         "method:Canvas.getVisibleWidth","method:Canvas.getVisibleHeight", "method:Canvas.resizeBy", 
         "method:Canvas.setPercentSource","method:Canvas.layoutChildren", "method:Canvas.resizeTo", "method:Canvas.parentResized", 
         "method:Canvas.setOverflow","method:Canvas.adjustForContent", "classMethod:Page.resizeTo", "classMethod:Page.getWidth", 
         "classMethod:Page.getHeight","classMethod:Page.getScrollWidth", "classMethod:Page.getScrollHeight", 
         "classMethod:Page.getScrollLeft","classMethod:Page.getScrollTop", "attr:GridRenderer.fixedColumnWidths", 
         "attr:GridRenderer.autoFit","attr:ListGrid.bodyOverflow", "attr:ListGrid.headerHeight", "attr:Menu.defaultWidth", 
         "attr:Menu.cellHeight","attr:StatefulCanvas.autoFit", "attr:Button.autoFit", "attr:Img.size", "attr:Label.wrap", 
         "attr:Label.autoFit","attr:ToolStrip.height", "attr:ImgButton.autoFit", "attr:StretchImgButton.autoFit", 
         "attr:Canvas.width","attr:Canvas.height", "attr:Canvas.defaultWidth", "attr:Canvas.defaultHeight", 
         "attr:Canvas.minWidth","attr:Canvas.maxWidth", "attr:Canvas.minHeight", "attr:Canvas.maxHeight", 
         "attr:Canvas.overflow","attr:Canvas.percentSource", "attr:Canvas.percentBox", "attr:Canvas.snapTo", 
         "attr:Canvas.snapEdge","attr:Canvas.snapOffsetLeft", "attr:Canvas.snapOffsetTop", "type:Overflow"],
        description:"Width and height of an object",
        name:"sizing",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.cellHeight":{
        ref:"attr:ListGrid.cellHeight",
        flags:"IRW",
        description:"The default height of each row in pixels.",
        name:"cellHeight",
        seeAlso:[
            {ref:"method:GridRenderer.getRowHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('multilineValues')}"],
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "attr:DetailViewer.recordsPerBlock":{
        ref:"attr:DetailViewer.recordsPerBlock",
        flags:"IRW",
        description:"The number of records to display in a block. A block is a horizontal row on a page\n          containing one or more records, as specified by the value of recordsPerBlock. The\n          height of a block is equal to the height of a single record. The default setting of\n          1 causes each record to appear by itself in a vertical row. Setting recordsPerBlock\n          to 2 would cause records to appear side by side in groups of two.\n          Use a value of \"*\" to indicate all records.",
        name:"recordsPerBlock",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "group:labels":{
        ref:"group:labels",
        refs:["attr:DetailViewer.labelPrefix", "attr:DetailViewer.labelSuffix", 
         "attr:DetailViewer.wrapLabel"],
        name:"labels",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.position":{
        ref:"attr:Canvas.position",
        flags:"IRWA",
        description:"Absolute or relative, corresponding to the \"absolute\" (with respect to parent) or\n \"relative\" (with respect to document flow) values for the CSS position attribute. \n <P>\n Defaults to \"absolute\" unless ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} has been set, in which case\n \"relative\" is used.\n <P>\n For best consistency and flexibility across browsers, all SmartClient layout managers\n use absolute positioning.  Relative positioning should be used only as a short-term\n integration scenario while incrementally upgrading existing applications.  \n <P>\n When relative positioning is used, only the outermost SmartClient component should have\n position:\"relative\" set, none of it's children should.",
        name:"position",
        seeAlso:[],
        valueType:"Positioning",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('inlineComponents')}"],
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:CubeGrid.makeChart":{
        ref:"method:CubeGrid.makeChart",
        flags:"",
        description:" Chart the portion of the dataset indicated by <code>fixedFacetValues</code>, for all \n values of the <code>variableFacets</code>.\n <P>\n One, two or more variableFacets may be passed.  Two variable facets for a column chart will\n result in ${isc.DocUtils.linkForRef('attr:Chart.stacked','stacking')} or clustering.  Three facets or more may be\n supported by some ${isc.DocUtils.linkForRef('attr:CubeGrid.chartType','chartTypes')} or\n ${isc.DocUtils.linkForRef('attr:CubeGrid.chartConstructor','charting engines')}.\n \n",
        name:"makeChart",
        seeAlso:[],
        params:[
            {description:"set of facet values to hold constant.  Pass null to                                         chart the entire dataset.", 
             optional:false,name:"fixedFacetValues", defaultValue:null, type:"FacetValueMap"},
            {description:"set of facets to be charted", optional:false, name:"variableFacets", 
             defaultValue:null,type:"Array of FacetIds"},
            {description:"properties to pass through to the created                        ${isc.DocUtils.linkForRef('interface:Chart')}", 
             optional:false,name:"chartProperties", defaultValue:null, type:"Chart properties"}
        ],
        returns:{description:"created chart instance", type:"Chart"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:SectionStackSection.resizeable":{
        ref:"attr:SectionStackSection.resizeable",
        flags:"I",
        description:"If set to false, then the items in this section will not be resized by sectionHeader\n repositioning.  You may also set this flag directly on any of the items in any section to\n cause that item to not be resizeable.",
        name:"resizeable",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('resizeSections')}"],
        definingClass:"object:SectionStackSection"
    },
    "method:MenuButton.setShowMenuBelow":{
        ref:"method:MenuButton.setShowMenuBelow",
        flags:"",
        description:" Setter for the 'showMenuButtonBelow' property - determines whether the menu will be\n shown above or below the menubutton.\n",
        name:"setShowMenuBelow",
        seeAlso:[],
        params:[
            {description:"True if the menu should be shown below the menubutton.", optional:false, 
             name:"below",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:MenuButton"
    },
    "method:PickList.getPickListFilterCriteria":{
        ref:"method:PickList.getPickListFilterCriteria",
        flags:"A",
        description:" Returns a set of filter criteria to be applied to the data displayed in the pickList when\n it is shown.\n <P>\n If this is a databound item the criteria will be passed as criteria to\n ${isc.DocUtils.linkForRef('method:DataSource.fetchData')}.  Otherwise an equivalent client-side filter will be\n performed on the data returned by ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.\n <P>\n By default returns ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} if specified, otherwise an empty \n set of criteria so all records will be displayed.\n\n",
        name:"getPickListFilterCriteria",
        seeAlso:[],
        returns:{description:"criteria to be used for databound or local filtering", type:"Criteria"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "method:Array.equals":{
        ref:"method:Array.equals",
        flags:"",
        description:" Return whether this list is equal to another list.\n <P>\n Two lists are equal only if they have the same length and all contained items are in the same\n order and are also equal.\n\n",
        name:"equals",
        seeAlso:[],
        params:[
            {description:"list to check for equality", optional:false, name:"list", defaultValue:null, 
             type:"List"}
        ],
        returns:{description:"whether the specified list is equal to this list", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:Tab.pickerTitle":{
        ref:"attr:Tab.pickerTitle",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true for this TabSet, if set this property will determine\n the title of the picker menu item for this tab. If unset, ${isc.DocUtils.linkForRef('attr:Tab.title')} will be used\n instead",
        name:"pickerTitle",
        seeAlso:[
            {ref:"attr:TabSet.showTabPicker", description:null},
            {ref:"attr:Tab.title", description:null}
        ],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab",
        groups:["tabBarControls"]
    },
    "attr:CubeGrid.defaultFacetWidth":{
        ref:"attr:CubeGrid.defaultFacetWidth",
        flags:"IRW",
        description:"default width of inner column headers",
        name:"defaultFacetWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "method:ListGrid.hasErrors":{
        ref:"method:ListGrid.hasErrors",
        flags:"",
        description:" Does this grid currently have errors associated with editValues for any row in the grid.\n",
        name:"hasErrors",
        seeAlso:[
            {ref:"method:ListGrid.rowHasErrors", description:null},
            {ref:"method:ListGrid.cellHasErrors", description:null}
        ],
        returns:{description:"true if there are unresolved errors, false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "method:ListGrid.rowEditorExit":{
        ref:"method:ListGrid.rowEditorExit",
        flags:"A",
        description:" Callback fired when the user attempts to navigate away from the current edit row, \n or complete the current edit.\n <P>\n Return false from this method to cancel the default behavior (Saving / cancelling the\n current edit / moving to the next edit cell).\n\n",
        name:"rowEditorExit",
        seeAlso:[
            {ref:"method:ListGridField.editorExit", description:null}
        ],
        params:[
            {description:"How was the edit completion fired?", optional:false, 
             name:"editCompletionEvent",defaultValue:null, type:"EditCompletionEvent"},
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"new values for the record [Note that fields that have                                 not been edited will not be included in this object]", 
             optional:false,name:"newValues", defaultValue:null, type:"object"},
            {description:"row number for the row being left", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus\n                      in this edit cell.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:ValuesManager.cancel":{
        ref:"method:ValuesManager.cancel",
        flags:"",
        description:"\n This method exists for clean integration with existing server frameworks that have a 'cancel'\n feature which typically clears session state associated with the form.  When this method is\n called, an RPC is sent to the server with a parameter named\n ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamName')} with the value\n ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamValue')}.<p>\n\n Note that no other form data is sent.  By default the current top-level page is replaced with the\n reply.  If you wish to ignore the server reply instead, call this method like this:\n <pre>\n dynamicFormInstance.cancel({ignoreTimeout: true, target: null});\n </pre>\n\n",
        name:"cancel",
        seeAlso:[],
        params:[
            {description:"additional properties to set on the RPCRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["submitting"]
    },
    "method:Label.setIconOrientation":{
        ref:"method:Label.setIconOrientation",
        flags:"",
        description:" Changes the orientation of the icon relative to the text of the button.\n\n",
        name:"setIconOrientation",
        seeAlso:[],
        params:[
            {description:"The new orientation of the icon relative to the text of the button.", 
             optional:false,name:"orientation", defaultValue:null, type:"\"left\" or \"right\""}
        ],
        type:"method",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "method:List.findAll":{
        ref:"method:List.findAll",
        flags:"",
        description:" Find all objects where property == value in the object.\n <P>\n Pass an Object as the <code>propertyName</code> argument to match multiple properties.\n\n",
        name:"findAll",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"all matching Objects or null if none found", type:"Array"},
        type:"method",
        definingClass:"interface:List",
        groups:["access", "find"]
    },
    "method:DOMGrid.setRootElement":{
        ref:"method:DOMGrid.setRootElement",
        flags:"",
        description:" Set the root element (or document) to view in the tree.\n",
        name:"setRootElement",
        seeAlso:[],
        params:[
            {description:"new root element", optional:false, name:"rootElement", defaultValue:null, 
             type:"DOMElement"}
        ],
        type:"method",
        definingClass:"class:DOMGrid"
    },
    "method:CubeGrid.getEditedRecord":{
        ref:"method:CubeGrid.getEditedRecord",
        flags:"",
        description:" Returns the combination of unsaved edits (if any) and original values (if any) for a given\n cell being edited.\n <P>\n The returned value is never null, and can be freely modified.\n\n",
        name:"getEditedRecord",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"valuesID", defaultValue:null, type:"number | Object"},
            {description:"colNum of the record being edited. Only required if the records                          rowNum is passed in as the first parameter", 
             optional:true,name:"colNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"A copy of the record with unsaved edits included", type:"Object"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "method:ListGridField.getFieldTitle":{
        ref:"method:ListGridField.getFieldTitle",
        flags:"",
        description:" If your derivation of the field title is more complex than specifying a static string,\n you can specify a getFieldTitle() method on your field to return the title string.\n Otherwise you can use the ${isc.DocUtils.linkForRef('attr:ListGridField.title')} attribute on the field to specify the title.\n <P>\n You can use ${isc.DocUtils.linkForRef('method:ListGrid.setFieldProperties','setFieldProperties()')} to dynamically\n update the title.\n\n",
        name:"getFieldTitle",
        seeAlso:[
            {ref:"attr:ListGridField.title", description:null}
        ],
        params:[
            {description:"pointer back to the ListGrid", optional:false, name:"viewer", 
             defaultValue:null,type:"ListGrid"},
            {description:"index of this field in the grid's fields array.", optional:false, 
             name:"fieldNum",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:Tree.addList":{
        ref:"method:Tree.addList",
        flags:"",
        description:"\n Add a list of nodes to some parent.\n\n",
        name:"addList",
        seeAlso:[
            {ref:"group:sharingNodes", description:null}
        ],
        params:[
            {description:"The list of nodes to add", optional:false, name:"nodeList", defaultValue:null, 
             type:"List of TreeNode"},
            {description:"Parent of the node being added.  You can pass                                          in either the ${isc.DocUtils.linkForRef('object:TreeNode')} itself, or a path to\n	                                        the node (as a String), in which case a\n	                                        ${isc.DocUtils.linkForRef('method:Tree.find')} is performed to find\n	                                        the node.", 
             optional:false,name:"parent", defaultValue:null, type:"String or TreeNode"},
            {description:"Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list.", 
             optional:true,name:"position", defaultValue:null, type:"number"}
        ],
        returns:{description:"List of added nodes.", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "group:viewLoading":{
        ref:"group:viewLoading",
        refs:["method:ViewLoader.setViewURL", "class:ViewLoader", "attr:RPCRequest.evalResult", 
         "attr:RPCRequest.evalVars","attr:ViewLoader.loadingMessage"],
        name:"viewLoading",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.booleanTrueImage":{
        ref:"attr:ListGrid.booleanTrueImage",
        flags:"IRWA",
        description:"Image to display for a true value in a boolean field.\n <P>\n To turn this off explicitly set ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} to true.\n <P>",
        name:"booleanTrueImage",
        seeAlso:[
            {ref:"attr:ListGrid.booleanFalseImage", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]checked.png\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:PickTreeItem.displayField":{
        ref:"attr:PickTreeItem.displayField",
        flags:"IR",
        description:"Specifies an alternative field from which display values should be retrieved for this\n item.<br>\n If this item is not databound (${isc.DocUtils.linkForRef('attr:PickTreeItem.dataSource')} is unset), this is\n implemented by picking up the value of the specified field from the\n ${isc.DocUtils.linkForRef('attr:PickTreeItem.valueTree')}.<br>\n Otherwise this item will attempt to map its underlying value to a display value\n by retrieving a record from the ${isc.DocUtils.linkForRef('attr:PickTreeItem.dataSource')} where the \n ${isc.DocUtils.linkForRef('attr:PickTreeItem.valueField')} matches this item's value, and displaying the \n <code>displayField</code> value from that record.<br>",
        name:"displayField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:PickTreeItem"
    },
    "method:DynamicForm.getField":{
        ref:"method:DynamicForm.getField",
        flags:"",
        description:"    Synonym for dynamicForm.getItem()\n\n",
        name:"getField",
        seeAlso:[
            {ref:"method:DynamicForm.getItem", description:null}
        ],
        params:[
            {description:"name of the item you're looking for", optional:false, name:"itemName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"FormItem object or null if not found", type:"object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["items"]
    },
    "classMethod:EventHandler.rightButtonDown":{
        ref:"classMethod:EventHandler.rightButtonDown",
        flags:"",
        description:"			Returns true if the right mouse button is being pressed.\n\n",
        name:"rightButtonDown",
        seeAlso:[],
        returns:{description:"true == right button is down, false == up", type:"boolean"},
        type:"classMethod",
        platformNotes:"Mac:		Macintosh platform generally has only one mouse button, and the\n		control key being held down serves the same purpose of the \n		right mouse button on Windows.  This is taken into account automatically.<br>\n      Opera: \n      The Opera browser does not pass right mouse button events to JavaScript code by default\n      (the user must explictly enable this bahavior via a menu item). Therefore we \n      treat <b>Shift+Ctrl+Click</b> as a context click in Opera.",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "attr:StretchImgButton.showDownIcon":{
        ref:"attr:StretchImgButton.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "method:ListGrid.setRowErrors":{
        ref:"method:ListGrid.setRowErrors",
        flags:"",
        description:" Set the validation errors for some row (replacing any pre-existant validation errors)\n",
        name:"setRowErrors",
        seeAlso:[
            {ref:"method:ListGrid.getRowErrors", description:null},
            {ref:"method:ListGrid.setFieldError", description:null}
        ],
        params:[
            {description:"row to add validation error for", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"validation errors for the row in the format                           <code>{fieldName:errorMessage, ...}</code> <br>or <br>\n                          <code>{fieldName:[errorMessage1, errorMessage2], ...}</code>", 
             optional:false,name:"errors", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:ListGrid.valueIconLeftPadding":{
        ref:"attr:ListGrid.valueIconLeftPadding",
        flags:"IRW",
        description:"How much padding should there be on the left of valueIcons by default\n Can be overridden at the field level",
        name:"valueIconLeftPadding",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:ListGridField.displayFormat":{
        ref:"attr:ListGridField.displayFormat",
        flags:"IRWA",
        description:"For fields of type <code>\"date\"</code>, set this property to a valid\n ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to specify how the date should be formatted.<br>\n For fields of type <code>\"time\"</code>, set this property to a valid \n ${isc.DocUtils.linkForRef('type:timeFormatter','timeFormatter')} to specify how the time should be formatted.<br>\n If unset, display format may be set at the listGrid level via ${isc.DocUtils.linkForRef('attr:ListGrid.dateFormatter')}\n or ${isc.DocUtils.linkForRef('attr:ListGrid.timeFormatter')}.\n <p>\n If this field is editable the displayFormat will also be passed to the editor created\n to edit this field.  For dates you may also need to set ${isc.DocUtils.linkForRef('attr:ListGridField.inputFormat')}.",
        name:"displayFormat",
        seeAlso:[
            {ref:"attr:ListGridField.inputFormat", description:null},
            {ref:"attr:ListGrid.dateFormatter", description:null},
            {ref:"attr:ListGrid.timeFormatter", description:null}
        ],
        valueType:"varies",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "attr:Toolbar.buttons":{
        ref:"attr:Toolbar.buttons",
        flags:"IRW",
        description:"An array of button object initializers. See the Button Widget Class for standard\n button properties. The following additional properties can also be specified for\n button sizing and positioning on the toolbar itself:<br><br>\n <ul><li>width--Specifies the width of this button as an absolute number of pixels, a\n named property of the toolbar that specifies an absolute number of pixels, a\n percentage of the remaining space (e.g. '60%'), or \"*\" (default) to allocate an\n equal portion of the remaining space.\n <li>height--Specifies the height of this button.\n <li>extraSpace--Specifies an optional amount of extra space, in pixels, to separate\n this button from the next button in the toolbar.</ul>",
        name:"buttons",
        seeAlso:[
            {ref:"class:Button", description:null}
        ],
        valueType:"array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Toolbar"
    },
    "method:WebService.getSoapMessage":{
        ref:"method:WebService.getSoapMessage",
        flags:"A",
        description:" Return the SOAP message that will be formed from this WSRequest.\n \n",
        name:"getSoapMessage",
        seeAlso:[],
        params:[
            {description:"web service request object", optional:false, name:"wsRequest", 
             defaultValue:null,type:"WSRequest"}
        ],
        returns:{description:"SOAP message", type:"String"},
        type:"method",
        definingClass:"class:WebService"
    },
    "attr:DSRequest.useFlatHeaderFields":{
        ref:"attr:DSRequest.useFlatHeaderFields",
        flags:"IRW",
        description:"Cause the ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields','useFlatFields')} XML serialization behavior to be used\n for <b>all</b> soap headers in the request.  See also ${isc.DocUtils.linkForRef('attr:DSRequest.headerData')}.",
        name:"useFlatHeaderFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest",
        groups:["flatFields"]
    },
    "attr:Window.src":{
        ref:"attr:Window.src",
        flags:"IRW",
        description:"A URL to load as content for the Window's body.  If specified, this\n attribute will take precedence over the items attribute.\n <P>\n Note that setting window.src is essentially a shortcut for setting ${isc.DocUtils.linkForRef('attr:Window.items')}\n to a single HTMLflow with a specified ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL','contentsURL')}.",
        name:"src",
        setter:["setSrc"],
        seeAlso:[
            {ref:"attr:Window.contentsType", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "attr:Canvas.className":{
        deprecated:"In favor or ${isc.DocUtils.linkForRef('attr:Canvas.styleName')} as of SmartClient release 5.5",
        flags:"IRW",
        type:"attr",
        ref:"attr:Canvas.className",
        description:"The CSS class applied to this widget as a whole.",
        name:"className",
        setter:["setClassName"],
        valueType:"CSSStyleName",
        seeAlso:[],
        defaultValue:"\"normal\"",
        groups:["appearance"],
        definingClass:"class:Canvas"
    },
    "attr:DataSource.resultSetClass":{
        ref:"attr:DataSource.resultSetClass",
        flags:"IRA",
        description:"Class for ResultSets used by this datasource.  If null, defaults to using\n ${isc.DocUtils.linkForRef('class:ResultSet')}.\n <P>\n This can be set to a custom subclass of ResultSet that, for example, hangs onto to extra\n information necessary for integration with web services.",
        name:"resultSetClass",
        seeAlso:[],
        valueType:"Class Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "attr:DataSourceField.canEdit":{
        ref:"attr:DataSourceField.canEdit",
        flags:"IR",
        description:"Whether this field can ever be edited by the user.  If set to <code>false</code>, no\n DataBound component will ever try to offer an editing interface for this field.",
        name:"canEdit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentBinding"]
    },
    "method:ValuesManager.editSelectedData":{
        ref:"method:ValuesManager.editSelectedData",
        flags:"",
        description:"\n Edit the record selected in the specified selection component (typically a\n ${isc.DocUtils.linkForRef('class:ListGrid')}).\n <P>\n Updates the values of this editor to match the selected record's values.\n <P>\n If this form has a dataSource, then saving via ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')} will use the \n \"update\" operation type.\n\n",
        name:"editSelectedData",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected\n     record(s) is/are to be edited", 
             optional:false,name:"selectionComponent", defaultValue:null, type:"ListGrid or ID"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('updateOperation')}"],
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "method:ListGrid.setFieldProperties":{
        ref:"method:ListGrid.setFieldProperties",
        flags:"",
        description:" Set properties for a particular field, such as the title.\n <P>\n NOTE: to resize a field, use resizeField() instead.\n\n",
        name:"setFieldProperties",
        seeAlso:[],
        params:[
            {description:"name of the field, or index.", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number or String"},
            {description:"properties to apply to the header", optional:false, name:"properties", 
             defaultValue:null,type:"Button Properties"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:Img.resetSrc":{
        ref:"method:Img.resetSrc",
        flags:"A",
        description:" Refresh the image being shown.  Call this when the ${isc.DocUtils.linkForRef('attr:Img.src')} attribute has not changed, but\n other state that affects the image URL (such as being selected) has changed.\n\n",
        name:"resetSrc",
        seeAlso:[],
        type:"method",
        definingClass:"class:Img",
        groups:["appearance"]
    },
    "method:Array.duplicate":{
        ref:"method:Array.duplicate",
        flags:"A",
        description:" Return an Array that is a shallow copy of the list, that is, containing the same items.\n\n",
        name:"duplicate",
        seeAlso:[],
        returns:{description:"new array, pointing to the same items", type:"Array"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:ImgButton.showTitle":{
        ref:"attr:ImgButton.showTitle",
        flags:"IRWA",
        description:"Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be \n displayed for this component.<br>\n Applies to Image-based components only, where the title will be rendered out in a label\n floating over the component",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton"
    },
    "attr:FormItem.name":{
        ref:"attr:FormItem.name",
        flags:"IRW",
        description:"Name for this form field.\n <br><br>\n The FormItem's name determines the name of the property it edits within the form.",
        name:"name",
        seeAlso:[],
        valueType:"identifer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["basics"]
    },
    "method:ListGrid.setFieldState":{
        ref:"method:ListGrid.setFieldState",
        flags:"",
        description:" Sets some presentation properties (visibility and width) of the listGrid fields based on the\n ${isc.DocUtils.linkForRef('type:listGridFieldState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to ${isc.DocUtils.linkForRef('method:ListGrid.getFieldState')}.\n\n",
        name:"setFieldState",
        seeAlso:[
            {ref:"method:ListGrid.getFieldState", description:null}
        ],
        params:[
            {description:"state to apply to the listGrid's fields.", optional:false, name:"fieldState", 
             defaultValue:null,type:"listGridFieldState"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:TextItem.width":{
        ref:"attr:TextItem.width",
        flags:"IRW",
        description:"Default width for fields.",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"150",
        type:"attr",
        definingClass:"class:TextItem",
        groups:["appearance"]
    },
    "classMethod:EventHandler.getY":{
        ref:"classMethod:EventHandler.getY",
        flags:"",
        description:"			Return the page-relative Y (vertical) coordinate of an event.\n\n",
        name:"getY",
        seeAlso:[],
        returns:{description:"y-coordinate in page coordinate space", type:"number"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "method:MenuItem.click":{
        ref:"method:MenuItem.click",
        flags:"",
        description:" Executed when this menu item is clicked by the user. The click handler must be specified\n as a function or string of script.  Return false to suppress the ${isc.DocUtils.linkForRef('method:Menu.itemClick')}\n handler if specified.\n\n",
        name:"click",
        seeAlso:[],
        params:[
            {description:"for a menu shown as a context menu, the Canvas the menu was shown                        on.  Otherwise the ${isc.DocUtils.linkForRef('class:Menu')} instance of which this\n                        ${isc.DocUtils.linkForRef('object:MenuItem')} is a member.", 
             optional:false,name:"target", defaultValue:null, type:"Canvas"},
            {description:"The ${isc.DocUtils.linkForRef('object:MenuItem')} that was clicked on.", 
             optional:false,name:"item", defaultValue:null, type:"MenuItem"},
            {description:"The ${isc.DocUtils.linkForRef('class:Menu')} instance of which this ${isc.DocUtils.linkForRef('object:MenuItem')} is a                          member.", 
             optional:false,name:"menu", defaultValue:null, type:"Menu"},
            {description:"Index of the column the user clicked. May be null if the                          user activated the menu via a keyboard event.", 
             optional:true,name:"colNum", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"object:MenuItem",
        groups:["menuItemEvents"]
    },
    "classMethod:Time.setNormalDisplayFormat":{
        ref:"classMethod:Time.setNormalDisplayFormat",
        flags:"",
        description:" Sets the default format for strings returned by ${isc.DocUtils.linkForRef('classMethod:Time.toTime')}.\n",
        name:"setNormalDisplayFormat",
        seeAlso:[],
        params:[
            {description:"Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or\n  a string designating a standard formatter", 
             optional:false,name:"formatter", defaultValue:null, type:"timeFormatter|function"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "attr:TreeGrid.canDropOnLeaves":{
        ref:"attr:TreeGrid.canDropOnLeaves",
        flags:"IRWA",
        description:"Whether drops are allowed on leaf nodes.\n <P>\n Dropping is ordinarily not allowed on leaf nodes unless ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')} is\n set.  \n <P>\n The default action for a drop on a leaf node is to place the node in that leaf's parent\n folder.  This can be customized by overriding ${isc.DocUtils.linkForRef('method:TreeGrid.folderDrop')}.",
        name:"canDropOnLeaves",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "method:Canvas.getHSnapOrigin":{
        ref:"method:Canvas.getHSnapOrigin",
        flags:"",
        description:" Get an offset to be used when calculating snap positioning. Returns 0 by default.\n\n",
        name:"getHSnapOrigin",
        seeAlso:["canvas.canvas.getHSnapPosition"],
        params:[
            {description:"the child that is being snapped", optional:true, name:"snapChild", 
             defaultValue:null,type:"Canvas"}
        ],
        returns:{description:"The offset to use when snapping", type:"integer"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:SectionStack.reorderSection":{
        ref:"method:SectionStack.reorderSection",
        deprecated:"As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('method:SectionStack.moveSection')}.",
        flags:"",
        description:"\n Reorder the sections by shifting the specified section to a new position\n\n",
        name:"reorderSection",
        seeAlso:[],
        params:[
            {description:"Section to move.  You can pass the position                       of the section in the SectionStack or the ID of the section.", 
             optional:false,name:"section", defaultValue:null, type:"position|sectionId"},
            {description:"new position index for the section.", optional:false, name:"position", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "method:StatefulCanvas.setIconOrientation":{
        ref:"method:StatefulCanvas.setIconOrientation",
        flags:"",
        description:" Changes the orientation of the icon relative to the text of the button.\n\n",
        name:"setIconOrientation",
        seeAlso:[],
        params:[
            {description:"The new orientation of the icon relative to the text of the button.", 
             optional:false,name:"orientation", defaultValue:null, type:"\"left\" or \"right\""}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:CubeGrid.getFacet":{
        ref:"method:CubeGrid.getFacet",
        flags:"",
        description:" Get a facet definition by facetId.  Constant time.\n\n",
        name:"getFacet",
        seeAlso:[
            {ref:"class:Facet", description:null}
        ],
        params:[
            {description:"the id of the facet to retrieve", optional:false, name:"facetId", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"the Facet if found, or null", type:"Facet"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:SelectItem.showOptionsFromDataSource":{
        ref:"attr:SelectItem.showOptionsFromDataSource",
        flags:"IRWA",
        description:"If this item is part of a databound form, and has a specified <code>valueMap</code>\n by default we show the valueMap options in the pickList for the item.\n Setting this property to true will ensure that the options displayed in our pickList\n are derived from the form's <code>dataSource</code>.",
        name:"showOptionsFromDataSource",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["databinding"]
    },
    "attr:Splitbar.target":{
        ref:"attr:Splitbar.target",
        flags:"R",
        description:"When a <code>Splitbar</code> is created by a layout, the <code>target</code> property\n of the Splitbar will be a pointer to the member for which it is acting as a resizeBar.\n The Splitbar will be positioned next to its target, and will resize it on drag completion.",
        name:"target",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar"
    },
    "attr:Canvas.edgeShowCenter":{
        ref:"attr:Canvas.edgeShowCenter",
        flags:"IR",
        description:"Whether to show media in the center section, that is, behind the decorated Canvas.",
        name:"edgeShowCenter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('corners')}"],
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "attr:Toolbar.canAcceptDrop":{
        ref:"attr:Toolbar.canAcceptDrop",
        flags:"IRWA",
        description:"If true, items (buttons) can be dropped into this toolbar, and the toolbar will\n show a drop line at the drop location.  Override drop() to decide what happens when the\n item is dropped.",
        name:"canAcceptDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["dragndrop"]
    },
    "method:List.find":{
        ref:"method:List.find",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}, but returns the object itself instead of its index.\n\n",
        name:"find",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"first matching object or null if not found", type:"Object"},
        type:"method",
        definingClass:"interface:List",
        groups:["access", "find"]
    },
    "attr:ListGridField.canSort":{
        ref:"attr:ListGridField.canSort",
        flags:"IRW",
        description:"Enables or disables sorting by this column. If false, neither interactive\n  nor scripted (via the sort() method) instructions will sort the listGrid by this\n  column.",
        name:"canSort",
        seeAlso:[
            {ref:"method:ListGrid.sort", description:null},
            {ref:"attr:ListGrid.canSort", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["sorting"]
    },
    "attr:ListGrid.dragTrackerMode":{
        ref:"attr:ListGrid.dragTrackerMode",
        flags:"IRA",
        description:"When records are being dragged from within a ListGrid, what sort of drag-tracker\n should be displayed?<br>\n Note that if multiple records are being dragged the displayed tracker will be\n based on the first selected record.",
        name:"dragTrackerMode",
        seeAlso:[],
        valueType:"DragTrackerMode",
        defaultValue:"\"icon\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["dragTracker"]
    },
    "method:StretchImgButton.setBaseStyle":{
        ref:"method:StretchImgButton.setBaseStyle",
        flags:"",
        description:" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n",
        name:"setBaseStyle",
        seeAlso:[],
        params:[
            {description:"new base style", optional:false, name:"style", defaultValue:null, 
             type:"className"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton"
    },
    "attr:TreeGrid.separateFolders":{
        ref:"attr:TreeGrid.separateFolders",
        flags:"IR",
        description:"Specifies whether folders and leaves should be segregated in the treeGrid display.\n          With separateFolders:true and sortDirection:\"descending\", folders are displayed\n          before their sibling leaves; with sortDirection:\"ascending\", leaves are displayed\n          before their sibling folders.",
        name:"separateFolders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeField"]
    },
    "attr:ComboBoxItem.valueField":{
        ref:"attr:ComboBoxItem.valueField",
        flags:"IRW",
        getter:["FormItem.getValueFieldName"],
        description:"If this form item maps data values to display values by retrieving the \n ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an \n ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property \n denotes the the field to use as the underlying data value in records from the \n optionDataSource.<br>\n If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item.",
        name:"valueField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem",
        groups:["display_values"]
    },
    "attr:Img.name":{
        ref:"attr:Img.name",
        flags:"IA",
        description:"The value of this attribute is specified as the value of the 'name' attribute in the\n resulting HTML.\n <p>\n Note: this attribute is ignored if the imageType is set to \"tile\"",
        name:"name",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"main\"",
        type:"attr",
        definingClass:"class:Img"
    },
    "method:ListGrid.getSortState":{
        ref:"method:ListGrid.getSortState",
        flags:"",
        description:" Returns a snapshot of the current sort state (sort field and order) within this listGrid as \n a ${isc.DocUtils.linkForRef('type:listGridSortState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setSortState')} to reset this grid's sort to\n the current state (assuming the same fields are present in the grid).<br>\n",
        name:"getSortState",
        seeAlso:[
            {ref:"method:ListGrid.setSortState", description:null}
        ],
        returns:{description:"current sort state for the grid.", type:"listGridSortState"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:DynamicForm.cancelParamName":{
        ref:"attr:DynamicForm.cancelParamName",
        flags:"IRW",
        description:"The name of the special field sent to the server as part of ${isc.DocUtils.linkForRef('method:DynamicForm.cancel')}",
        name:"cancelParamName",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"org.apache.struts.taglib.html.CANCEL\"",
        type:"attr",
        definingClass:"class:DynamicForm"
    },
    "classMethod:isc.clone":{
        ref:"classMethod:isc.clone",
        flags:"",
        description:" Create a deep clone of an object that can be edited without affecting the original\n <br>\n All mutable types, including Objects, Arrays and Dates, are copied.  All immutable types are\n just preserved by reference.\n <br>\n Does not handle looping references (will infinite loop).\n\n",
        name:"clone",
        seeAlso:[],
        params:[
            {description:"object to clone", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"cloned object", type:"object"},
        type:"classMethod",
        definingClass:"class:isc",
        groups:["serialization"]
    },
    "attr:Canvas.customEdges":{
        ref:"attr:Canvas.customEdges",
        flags:"IR",
        description:"Array of side names (\"T\", \"B\", \"L\", \"R\") specifying which sides of the decorated\n component should show edges.  For example: <pre>\n      customEdges : [\"T\", \"B\"]\n </pre>\n .. would show edges only on the top and bottom of a component.\n <P>\n The default of <code>null</code> means edges will be shown on all sides.",
        name:"customEdges",
        seeAlso:[],
        valueType:"Array of String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "class:DataSource":{
        methods:["method:DataSource.getLegalChildTags", "method:DataSource.transformRequest", 
         "method:DataSource.getXMLRequestBody","method:DataSource.xmlSerialize", "method:DataSource.recordsFromXML", 
         "method:DataSource.transformResponse","method:DataSource.fetchData", "method:DataSource.filterData", "method:DataSource.addData", 
         "method:DataSource.updateData","method:DataSource.removeData", "method:DataSource.handleError", 
         "method:DataSource.getField","method:DataSource.getFieldNames", "method:DataSource.applyFilter", 
         "method:DataSource.fieldMatchesFilter","method:DataSource.supportsTextMatchStyle", "method:DataSource.compareCriteria"],
        ref:"class:DataSource",
        classAttrs:[],
        classMethods:["classMethod:DataSource.getDataSource", "classMethod:DataSource.get"],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:DataSource.ID", "attr:DataSource.addGlobalId", "attr:DataSource.dataFormat", 
         "attr:DataSource.callbackParam","attr:DataSource.requestProperties", "attr:DataSource.dataTransport", 
         "attr:DataSource.serverType","attr:DataSource.tableName", "attr:DataSource.dbName", "attr:DataSource.jsonPrefix", 
         "attr:DataSource.jsonSuffix","attr:DataSource.fields", "attr:DataSource.inheritsFrom", "attr:DataSource.useFlatFields", 
         "attr:DataSource.showLocalFieldsOnly","attr:DataSource.useParentFieldOrder", "attr:DataSource.dropExtraFields", 
         "attr:DataSource.serviceNamespace","attr:DataSource.schemaNamespace", "attr:DataSource.recordXPath", 
         "attr:DataSource.dataURL","attr:DataSource.tagName", "attr:DataSource.clientOnly", "attr:DataSource.testData", 
         "attr:DataSource.criteriaPolicy","attr:DataSource.resultTreeClass", "attr:DataSource.resultSetClass", 
         "attr:DataSource.useLocalValidators","attr:DataSource.showPrompt", "attr:DataSource.title", "attr:DataSource.pluralTitle", 
         "attr:DataSource.titleField","attr:DataSource.childrenField", "attr:DataSource.globalNamespaces", 
         "attr:DataSource.resultBatchSize","attr:DataSource.serverObject", "attr:DataSource.operationBindings"],
        description:"A DataSource is data-provider-independant description of a set of objects\n that will be loaded, edited and saved within the user interface of your application.\n <P>\n Each DataSource consists of a list of ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} that make up a\n DataSource <code>record</code>, along with ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field types')}, \n ${isc.DocUtils.linkForRef('attr:DataSourceField.validators','validation rules')}, \n ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','relationships')} to other DataSources, and other\n metadata.\n <P>\n The abstract object description provided by a DataSource is easily mapped to a variety of\n backend object models and storage schemes.  The following table shows analogous terminology\n across systems.\n <table border=1 class=\"normal\">\n <tr>\n   <td>Isomorphic SmartClient</td>\n   <td>Relational Database</td>\n   <td>Enterprise Java Beans (EJB)</td>\n   <td>Entity/Relationship Modelling</td>\n   <td>OO/UML</td>\n   <td>XML Schema/WSDL</td>\n   <td>LDAP</td>\n </tr><tr>\n   <td>DataSource</td>\n   <td>Table</td>\n   <td>EJB class</td>\n   <td>Entity</td>\n   <td>Class</td>\n   <td>Element Schema (ComplexType)</td>\n   <td>Objectclass</td>\n </tr><tr>\n   <td>Record</td>\n   <td>Row</td>\n   <td>EJB instance</td>\n   <td>Entity instance</td>\n   <td>Class instance/Object</td>\n   <td>Element instance (ComplexType)</td>\n   <td>Entry</td>\n </tr><tr>\n   <td>Field</td>\n   <td>Column</td>\n   <td>Property</td>\n   <td>Attribute</td>\n   <td>Property/Attribute</td>\n   <td>Attribute or Element (SimpleType)</td>\n   <td>Attribute</td>\n </tr></table>\n <P>\n DataSources can be ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','declared')} in either JavaScript or XML\n format, and can also be ${isc.DocUtils.linkForRef('group:metadataImport','imported')} from existing metadata formats,\n including XML Schema.\n <P>\n <i>Data Binding</i> is the process by which\n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','Data Binding-capable UI components')} can automatically configure\n themselves for viewing, editing and saving data described by DataSources.  DataBinding is\n covered in the ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')}, Chapter 6, <i>Data\n Binding</i>.\n <P>\n ${isc.DocUtils.linkForRef('group:clientServerIntegration','Data Integration')} is the process by which a DataSource\n can be connected to server systems such as SQL DataBases, Java Object models, WSDL web\n services and other data providers.  Data Integration comes in two variants: client-side and\n server-side.  ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')} uses the\n SmartClient Java-based server to connect to data represented by Java Objects or\n JDBC-accessible databases.  ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side integration')}\n connects SmartClient DataSources to XML, JSON or other formats accessible via HTTP.\n <P>\n DataSources have a concept of ${isc.DocUtils.linkForRef('group:dataSourceOperations','4 core operations')} (\"fetch\",\n \"add\", \"update\" and \"remove\") that can be performed on the set of objects represented by a\n DataSource.  Once a DataSource has been integrated with your data store, databinding-capable \n UI components can leverage the 4 core DataSource operations to provide many complete user\n interactions without the need to configure how each individual component loads and saves\n data.\n <P>\n These interactions include ${isc.DocUtils.linkForRef('class:ListGrid','grid views')}, ${isc.DocUtils.linkForRef('class:TreeGrid','tree views')}, \n ${isc.DocUtils.linkForRef('class:DetailViewer','detail views')}, ${isc.DocUtils.linkForRef('class:DynamicForm','form')}-based \n ${isc.DocUtils.linkForRef('method:DynamicForm.editRecord','editing')} and ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','saving')},\n grid-based ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','editing')} and ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell','saving')},\n and custom interactions provided by ${isc.DocUtils.linkForExampleId('patternReuse')} custom\n databinding-capable components.",
        name:"DataSource",
        seeAlso:[
            {ref:"interface:DataBoundComponent", 
             description:"for information on DataBound Components"},
            {ref:"group:dataSourceDeclaration", description:"for how to create DataSources"}
        ],
        type:"class"
    },
    "attr:Slider.maxValueLabel":{
        ref:"attr:Slider.maxValueLabel",
        flags:"IRW",
        description:"The text displayed in the label for the maximum value of the slider. If left as null, then\n slider.maxValue will be displayed.",
        name:"maxValueLabel",
        seeAlso:[
            {ref:"attr:Slider.showRange", description:null},
            {ref:"attr:Slider.maxValue", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:ComboBoxItem.pickerIconHeight":{
        ref:"attr:ComboBoxItem.pickerIconHeight",
        flags:"IRW",
        description:"Don't specify an explicit height for the picker icon - instead have it size to match the\n height of the combo box item.",
        name:"pickerIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "type:Properties":{
        ref:"type:Properties",
        description:"When the type for a parameter mentions \"properties\" as in \"ListGrid Properties\" or\n \"RPCRequest Properties\", it means that the expected value is a JavaScript Object\n containing any set of properties generally legal when creating an object of that type.\n <P>\n For example, the first parameter of ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')} is of type\n \"RPCRequest Properties\".  This means it should be called like:\n <pre>\n    isc.RPCManager.sendRequest({\n        actionURL : \"/foo.do\",\n        showPrompt:false\n    });</pre>\n ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL','actionURL')} and ${isc.DocUtils.linkForRef('attr:RPCRequest.showPrompt','showPrompt')} are \n properties of ${isc.DocUtils.linkForRef('class:RPCRequest')}.  \n <P>\n Note that the notation shown above is an example of a\n ${isc.DocUtils.linkForRef('type:ObjectLiteral','JavaScript object literal')}.",
        name:"Properties",
        seeAlso:[],
        type:"type"
    },
    "group:buttons":{
        ref:"group:buttons",
        refs:["method:Toolbar.getButton", "method:Window.closeClick", "method:Dialog.saveData", 
         "method:Dialog.closeClick","method:Dialog.cancelClick", "method:Dialog.okClick", "method:Dialog.applyClick", 
         "method:Dialog.yesClick","method:Dialog.noClick"],
        name:"buttons",
        seeAlso:[],
        type:"group"
    },
    "method:Log.logIsWarnEnabled":{
        ref:"method:Log.logIsWarnEnabled",
        flags:"",
        description:" Check whether a message logged at \"warn\" priority would be visible in the log.\n <P>\n As with logDebug, category is defaulted to the current className.  Use this method to avoid\n putting together expensive log messages if they will never appear in the log.\n\n",
        name:"logIsWarnEnabled",
        seeAlso:[],
        params:[
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "method:Canvas.setTop":{
        ref:"method:Canvas.setTop",
        flags:"",
        description:" Set the top coordinate of this object, relative to its enclosing context, in pixels.\n <P>\n NOTE: if you're setting multiple coordinates, use setRect() or moveTo() instead\n\n",
        name:"setTop",
        seeAlso:[],
        params:[
            {description:"new top coordinate", optional:false, name:"top", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "class:SubmitItem":{
        methods:[],
        ref:"class:SubmitItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:SubmitItem.title"],
        description:"Button that saves the data in the form, by calling <code>DynamicForm.submit()</code> \n Behavior depends on the containing form's ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} property. \n If <code>form.canSubmit</code> is true, this method will perform a direct submission\n of the underlying HTML form.<br>\n Otherwise standard RPC operations will be used to save the changes.",
        name:"SubmitItem",
        seeAlso:[
            {ref:"group:operations", description:null},
            {ref:"attr:DynamicForm.canSubmit", description:null},
            {ref:"method:DynamicForm.submit", description:null}
        ],
        type:"class"
    },
    "method:StretchImgButton.setDisabled":{
        ref:"method:StretchImgButton.setDisabled",
        flags:"",
        description:" Enable or disable this object\n",
        name:"setDisabled",
        seeAlso:[],
        params:[
            {description:"true if this widget is to be disabled", optional:false, name:"disabled", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["enable", "state"]
    },
    "method:Canvas.drop":{
        ref:"method:Canvas.drop",
        flags:"A",
        description:"\n Executed when the mouse button is released over a compatible drop target at the end of\n a drag sequence. Your widget should implement whatever it wants to do when receiving a\n drop here. For example, in a file moving interface, a drop might mean that you should\n move or copy the dragged file into the folder it was dropped on, or dropping something in\n a trash can might mean to clear it from the screen.\n\n",
        name:"drop",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null},
            {ref:"classMethod:EventHandler.getDragTarget", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:ResultSet.findAll":{
        ref:"method:ResultSet.findAll",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.findAll')}.  Checks only loaded rows and will not trigger a fetch.\n",
        name:"findAll",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"all matching Objects or null if none found", type:"Array"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access", "find"]
    },
    "classMethod:SchemaSet.get":{
        ref:"classMethod:SchemaSet.get",
        flags:"A",
        description:" Retrieve a SchemaSet object by it's schemaNamespace.\n\n",
        name:"get",
        seeAlso:[],
        params:[
            {description:"uri from the \"targetNamespace\" attribute of the &lt;xsd:schema&gt; element from the XML Schema or WSDL file this SchemaSet was derived\n from.", 
             optional:false,name:"schemaNamespace", defaultValue:null, type:"String"}
        ],
        returns:{description:"the requested SchemaSet, or null if not loaded", type:"SchemaSet"},
        type:"classMethod",
        definingClass:"class:SchemaSet"
    },
    "attr:StretchImg.hSrc":{
        ref:"attr:StretchImg.hSrc",
        flags:"IRW",
        description:"Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is false and \n ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset.",
        name:"hSrc",
        seeAlso:[
            {ref:"attr:StretchImg.src", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "method:GridRenderer.cellOver":{
        ref:"method:GridRenderer.cellOver",
        flags:"A",
        description:" Called when the mouse pointer enters a cell\n\n",
        name:"cellOver",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:Flashlet.params":{
        ref:"attr:Flashlet.params",
        flags:"IR",
        description:"A map of key/value pairs to pass to the flashlet as parameters.  Note that these will be set\n  on the outer &lt;object&gt; element as well as the inner &lt;embed&gt; element.",
        name:"params",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "method:ComboBoxItem.getDisplayFieldName":{
        ref:"method:ComboBoxItem.getDisplayFieldName",
        flags:"A",
        description:" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.\n If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method\n will return the title field for the <code>optionDataSource</code>\n",
        name:"getDisplayFieldName",
        seeAlso:[],
        returns:{description:"display field name, or null", type:"String"},
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "method:CubeGrid.clearEditValue":{
        ref:"method:CubeGrid.clearEditValue",
        flags:"A",
        description:"\n  Clear a field value being tracked as an unsaved user edit for some cell.<P>\n  The saved record value will be displayed in the the appropriate cell instead.\n\n",
        name:"clearEditValue",
        seeAlso:[],
        params:[
            {description:"Row number, primary keys object for the record,                                              or editValues object", 
             optional:false,name:"editValuesID", defaultValue:null, type:"number | object"},
            {description:"Column number for the cell in question. Only required if the                              first parameter is a row number.", 
             optional:true,name:"colNum", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "attr:Menu.submenuDisabledImage":{
        ref:"attr:Menu.submenuDisabledImage",
        flags:"IRWA",
        description:"Default image to use for the submenu indicator when item is disabled. Valid src, width and\n height must be specified. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.<br>\n If ${isc.DocUtils.linkForRef('attr:Menu.submenuDirection')} is set to <code>\"left\"</code>, the image src will have\n the suffix <code>\"_left\"</code> appended to it.",
        name:"submenuDisabledImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Menu"
    },
    "group:fields":{
        ref:"group:fields",
        refs:["attr:DataSource.fields", "attr:DataSource.inheritsFrom", "attr:DataSource.useFlatFields", 
         "attr:DataSource.showLocalFieldsOnly","attr:DataSource.useParentFieldOrder"],
        name:"fields",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgButton.iconOrientation":{
        ref:"attr:ImgButton.iconOrientation",
        flags:"IR",
        description:"If this button is showing an icon should it appear to the left or right of the title?\n valid options are <code>\"left\"</code> and <code>\"right\"</code>.",
        name:"iconOrientation",
        setter:["setIconOrientation"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"left\"",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "method:Toolbar.getButton":{
        ref:"method:Toolbar.getButton",
        flags:"",
        description:"          Retrieves a button widget instance (within this toolbar) from the ID / index / \n          descriptor object for the button (as with the getButtonNumber() method)\n          This provides a way to access a toolbar button's properties and methods directly.\n",
        name:"getButton",
        seeAlso:[
            {ref:"method:Toolbar.getButtonNumber", description:null}
        ],
        params:[
            {description:"identifier for the button to retrieve", optional:false, name:"index", 
             defaultValue:null,type:"number | string | object"}
        ],
        returns:{description:"the button, or null if the button wasn't found", type:"Button"},
        type:"method",
        definingClass:"class:Toolbar",
        groups:["buttons"]
    },
    "method:CubeGrid.facetHasSelection":{
        ref:"method:CubeGrid.facetHasSelection",
        flags:"",
        description:"\n return whether any facet value for this facet is selected in headers.  If no facetId passed,\n return whether any facet has a selection\n\n  <br><i>methodType</i> tester\n",
        name:"facetHasSelection",
        seeAlso:[],
        params:[
            {description:"Id for facet to test", optional:false, name:"facetId", defaultValue:null, 
             type:"string"}
        ],
        returns:{description:"true if any facet value in this header is selected", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:ListGrid.setViewState":{
        ref:"method:ListGrid.setViewState",
        flags:"",
        description:" Reset this grid's view state to match the ${isc.DocUtils.linkForRef('type:listGridViewState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to \n ${isc.DocUtils.linkForRef('method:ListGrid.getViewState')}.\n\n",
        name:"setViewState",
        seeAlso:[
            {ref:"method:ListGrid.getViewState", description:null}
        ],
        params:[
            {description:"Object describing the desired view state for the grid", optional:false, 
             name:"viewState",defaultValue:null, type:"listGridViewState"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:ListGridField.valueIconOrientation":{
        ref:"attr:ListGridField.valueIconOrientation",
        flags:"IRW",
        description:"If we're showing a valueIcon for this field should it appear to the left or the right\n of the text?  By default the icon will appear to the left of the textual value - \n set this to \"right\" to show the icon on the right of the text.\n Has no effect if ${isc.DocUtils.linkForRef('attr:ListGridField.showValueIconOnly')} is true",
        name:"valueIconOrientation",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "method:Canvas.isEnabled":{
        ref:"method:Canvas.isEnabled",
        deprecated:"As of SmartClient version 5.5 deprecated in favor of ${isc.DocUtils.linkForRef('method:Canvas.isDisabled')}.",
        flags:"",
        description:" Returns true if the widget and all widgets above it in the containment hierarchy are enabled.\n Returns false otherwise.\n",
        name:"isEnabled",
        seeAlso:[],
        returns:{description:"true if the widget and all widgets above it in the containment hierarchy                      are enabled; false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "classAttr:RPCManager.timeoutErrorMessage":{
        ref:"classAttr:RPCManager.timeoutErrorMessage",
        flags:"IRW",
        description:"Default message displayed to user when an opration fails to return from the server within\n the timeout period specified by ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTimeout')}.",
        name:"timeoutErrorMessage",
        seeAlso:[
            {ref:"classAttr:RPCManager.defaultTimeout", description:null}
        ],
        valueType:"string",
        defaultValue:"\"Operation timed out\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["i18nMessages"]
    },
    "attr:Canvas.backgroundColor":{
        ref:"attr:Canvas.backgroundColor",
        flags:"IR",
        description:"The background color for this widget. It corresponds to the CSS background-color\n attribute. You can set this property to an RGB value (e.g. #22AAFF) or a named color\n (e.g. red) from a list of browser supported color names.",
        name:"backgroundColor",
        setter:["setBackgroundColor"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "attr:ListGridField.valueMap":{
        ref:"attr:ListGridField.valueMap",
        flags:"IRW",
        description:"Array of legal values for this field, or an Object where each property maps a stored\n value to a user-displayable value.<br>\n Note that if this field is editable (see ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')}, \n ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit')}), editors displayed for this field will pick up their\n valueMap either from this value or from ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueMap')}.\n <P>\n See also ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}.",
        name:"valueMap",
        seeAlso:[
            {ref:"method:ListGrid.setValueMap", description:null}
        ],
        valueType:"Array of Object",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('listType')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "group:event handling":{
        ref:"group:event handling",
        refs:["method:TreeGrid.willAcceptDrop", "method:StatefulCanvas.getActionType", 
         "method:StatefulCanvas.setActionType","method:StatefulCanvas.addToRadioGroup", "method:StatefulCanvas.removeFromRadioGroup", 
         "method:Button.addToRadioGroup","method:Button.removeFromRadioGroup", "method:Button.setActionType", 
         "method:Button.getActionType","method:Toolbar.itemClick", "method:ImgButton.addToRadioGroup", 
         "method:ImgButton.removeFromRadioGroup","method:ImgButton.setActionType", "method:ImgButton.getActionType", 
         "method:StretchImgButton.addToRadioGroup","method:StretchImgButton.removeFromRadioGroup", "method:StretchImgButton.setActionType", 
         "method:StretchImgButton.getActionType","attr:StatefulCanvas.actionType", "attr:StatefulCanvas.radioGroup", 
         "attr:Button.radioGroup","attr:Button.actionType", "attr:ImgButton.radioGroup", "attr:ImgButton.actionType", 
         "attr:StretchImgButton.radioGroup","attr:StretchImgButton.actionType", "type:SelectionType"],
        name:"event handling",
        seeAlso:[],
        type:"group"
    },
    "attr:SelectItem.addUnknownValues":{
        ref:"attr:SelectItem.addUnknownValues",
        flags:"IRWA",
        description:"If we're setting the value of a select item and the value isn't a legal value in the\n valueMap, whether we should allow the value (creating a new option for it) or reject it.\n <P>\n Exception: If the value is set to <code>null</code> but there is no null entry in the\n valueMap for this item, setting <code>addUnknownValues</code> to true will not cause\n a null option to show up at the top of the select item pickList. Whether an empty \n option is shown in the pickList is governed by ${isc.DocUtils.linkForRef('attr:SelectItem.allowEmptyValue')}\n instead.",
        name:"addUnknownValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formDependentSelects')}"],
        definingClass:"class:SelectItem"
    },
    "class:Splitbar":{
        methods:[],
        ref:"class:Splitbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:Splitbar.target", "attr:Splitbar.vertical", "attr:Splitbar.src", 
         "attr:Splitbar.hSrc","attr:Splitbar.vSrc", "attr:Splitbar.capSize", "attr:Splitbar.skinImgDir", 
         "attr:Splitbar.showGrip","attr:Splitbar.gripImgSuffix", "attr:Splitbar.showDownGrip", 
         "attr:Splitbar.showRollOverGrip","attr:Splitbar.showClosedGrip", "attr:Splitbar.canDrag", "attr:Splitbar.canCollapse", 
         "attr:Splitbar.cursor","attr:Splitbar.vResizeCursor", "attr:Splitbar.hResizeCursor"],
        description:"Subclass of the ${isc.DocUtils.linkForRef('class:StretchImg')} class. As with the ${isc.DocUtils.linkForRef('class:ImgSplitbar')} class, \n  widgets of this class can be displayed as a resize-bar for widgets \n  in Layouts where showResizeBar is set to true. Provides a different appearance from\n  the <code>ImgSplitbar</code> class.<br>\n  To specify the resizeBar class for some layout, use the ${isc.DocUtils.linkForRef('attr:Layout.resizeBarClass')}\n  property.",
        name:"Splitbar",
        seeAlso:[
            {ref:"class:Layout", description:null},
            {ref:"class:ImgSplitbar", description:null}
        ],
        type:"class"
    },
    "method:CubeGrid.getCellFacetValues":{
        ref:"method:CubeGrid.getCellFacetValues",
        flags:"",
        description:" Given a cell coordinate within this CubeGrid return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')}\n indicating the facet values for the cell.\n",
        name:"getCellFacetValues",
        seeAlso:[],
        params:[
            {description:"row index of the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"row index of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"facet values for the specified cell. Returns null if the specified cell    is not present in the grid.", 
         type:"FacetValueMap"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "method:Button.setState":{
        ref:"method:Button.setState",
        flags:"",
        description:" Set the 'state' of this object, this changes it's appearance.\n\n",
        name:"setState",
        seeAlso:[
            {ref:"method:Button.setDisabled", description:"which also affects state values."}
        ],
        params:[
            {description:"new state", optional:false, name:"newState", defaultValue:null, type:"State"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["state", "appearance"]
    },
    "attr:BlurbItem.wrap":{
        ref:"attr:BlurbItem.wrap",
        flags:"IRW",
        description:"If true, item contents can wrap. If false, all the contents should appear on a single line.",
        name:"wrap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:BlurbItem",
        groups:["appearance"]
    },
    "method:ImgButton.getTitle":{
        ref:"method:ImgButton.getTitle",
        flags:"A",
        description:" Return the title - text/HTML drawn inside the component.\n <p>\n Default is to simply return this.title.\n",
        name:"getTitle",
        seeAlso:[],
        returns:{description:"HTML for the title", type:"string"},
        type:"method",
        definingClass:"class:ImgButton"
    },
    "attr:Label.icon":{
        ref:"attr:Label.icon",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"icon",
        setter:["setIcon"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "classMethod:EventHandler.getX":{
        ref:"classMethod:EventHandler.getX",
        flags:"",
        description:"			Return the page-relative X (horizontal) coordinate of an event.\n\n",
        name:"getX",
        seeAlso:[],
        returns:{description:"x-coordinate in page coordinate space", type:"number"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "method:Canvas.getPageRight":{
        ref:"method:Canvas.getPageRight",
        flags:"",
        description:" Return the page-relative right coordinate of this object, in pixels.\n		\n",
        name:"getPageRight",
        seeAlso:[],
        returns:{description:"GLOBAL right coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:Canvas.top":{
        flags:"IRW",
        getter:["getTop"],
        type:"attr",
        ref:"attr:Canvas.top",
        description:"Number of pixels the top of the widget is offset down from its default drawing context\n (either its parent's top-left corner, or the document flow, depending on the value of\n the ${isc.DocUtils.linkForRef('attr:Canvas.position')} property).",
        name:"top",
        setter:["setTop"],
        valueType:"number",
        seeAlso:[],
        defaultValue:"0",
        groups:["positioning"],
        definingClass:"class:Canvas"
    },
    "method:ImgButton.setTitle":{
        ref:"method:ImgButton.setTitle",
        flags:"",
        description:" Set the title.\n",
        name:"setTitle",
        seeAlso:[],
        params:[
            {description:"new title", optional:false, name:"newTitle", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["appearance"]
    },
    "method:TreeGrid.nodeClick":{
        ref:"method:TreeGrid.nodeClick",
        flags:"",
        description:"\n This method is called when a leaf or folder record is clicked on.  Note that if you set\n up a callback for <code>nodeClick()</code> and e.g. ${isc.DocUtils.linkForRef('method:TreeGrid.leafClick')}, then\n both will fire (in that order) if a leaf is clicked on.\n\n",
        name:"nodeClick",
        seeAlso:[
            {ref:"method:TreeGrid.folderClick", description:null},
            {ref:"method:TreeGrid.leafClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which leafClick() occurred.", optional:false, name:"viewer", 
             defaultValue:null,type:"TreeGrid"},
            {description:"The node (record) that was clicked", optional:false, name:"node", 
             defaultValue:null,type:"TreeNode"},
            {description:"Index of the row where the click occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('treeDropEvents')}"],
        definingClass:"class:TreeGrid"
    },
    "method:ImgButton.getActionType":{
        ref:"method:ImgButton.getActionType",
        flags:"",
        description:" Return the 'actionType' for this canvas (radio / checkbox / button)\n",
        name:"getActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state", "event handling"]
    },
    "attr:SectionStackSection.ID":{
        ref:"attr:SectionStackSection.ID",
        flags:"IR",
        description:"Optional ID for the section.  This can be used later in calls to ${isc.DocUtils.linkForRef('class:SectionStack')} APIs such as\n ${isc.DocUtils.linkForRef('method:SectionStack.expandSection')} and ${isc.DocUtils.linkForRef('method:SectionStack.collapseSection')}.",
        name:"ID",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "method:DynamicForm.getItem":{
        ref:"method:DynamicForm.getItem",
        flags:"",
        description:"    Takes an item name (specified via the form.fieldIdProperty value, or retrieved via\n    item.getFieldName()) returns a reference to the appropriate item in this form.\n    Notes:<br>\n    - This method will also return a (top-level) item from the index of an item in the form's\n      items array<br>\n    - Items are also available via their global IDs as window[itemID].  To get the item's ID\n      use item.getItemID()<br>\n\n",
        name:"getItem",
        seeAlso:[],
        params:[
            {description:"name of the item you're looking for", optional:false, name:"itemName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"FormItem object or null if not found", type:"object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["items"]
    },
    "group:clientServerIntegration":{
        ref:"group:clientServerIntegration",
        title:"Client-Server Integration",
        treeLocation:["Concepts"],
        refs:[],
        description:"Like client-server desktop applications, SmartClient browser-based applications interact\n with remote data and services via background communication channels. Background requests\n retrieve chunks of data rather than new HTML pages, and update your visual components in\n place rather than rebuilding the entire user interface.\n <P>\n SmartClient supports two general classes of client-server operations:\n ${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')} (DataSource Requests) and ${isc.DocUtils.linkForRef('class:RPCRequest')}s (Remote Procedure\n Call Requests).  DataSource requests are for manipulating structured data described by\n ${isc.DocUtils.linkForRef('class:DataSource','DataSources')}.  RPCRequests are a low-level, very flexible mechanism for\n custom client-server communications.  In an nutshell, RPCRequests:\n <ul>\n <li> may contain arbitrary data\n <li> are always initiated by custom code (a call to ${isc.DocUtils.linkForRef('classMethod:RPCManager.send')}), and have\n their responses handled by custom code (the callback passed to <code>send()</code>)\n </ul>\n <P>\n DSRequests:\n <ul>\n <li> contain data that follows the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')},\n which reflect the 4 basic operations on stored records: fetch, update, create, remove.\n <li> are initiated by ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} in response to user\n actions, and have their responses automatically managed (for example, \n ${isc.DocUtils.linkForRef('class:ResultSet','cache management')} and \n ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','validation error handling')}).  DSRequests can also be\n initiated manually and have their responses handled with custom code.\n </ul>\n See the ${isc.DocUtils.linkForRef('class:RPCManager')} documentation for further information on RPCRequests - the\n remainder of this document focuses on integrating DataSource operations with your server.\n <P>\n <b>DataSource Creation</b>\n <p>\n First you must create ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} that describe the objects from\n your object model that will be loaded or manipulated within your application.  All of ISC's\n most powerful functionality builds on the concept of a DataSource, and because of ISC's \n databinding framework (see ${isc.DocUtils.linkForRef('interface:DataBoundComponent')}), it's as easy to create a\n DataSource that can configure an unlimited number of components as it is to configure a\n single component.\n <P>\n There are a number of options for creating DataSources; for early prototyping, creating a\n DataSource by hand in either JavaScript or XML is simplest (this is covered under \n ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','DataSource declaration')}).  Later on, you can persue one of\n many ${isc.DocUtils.linkForRef('group:metadataImport','metadata import')} strategies for automatically leveraging\n your existing metadata.\n <p>\n Once you have a DataSource, you can bind a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} such as a \n ${isc.DocUtils.linkForRef('class:ListGrid')} to it, call one of the \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')} on it, such as\n ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}, the ListGrid will send a background HTTP request to the\n server asking for data.  You can set the log category \"RPCManager\" to DEBUG threshold to see\n the outbound request and the server's response.\n <P>\n In this case, the ListGrid is sending a DataSource operation request of type \"fetch\".  To\n fulfill it, you will need to provide a set of matching records in one of many possible\n formats.\n <P>\n At this point your code is just a handful of lines (this example shows a DataSource created\n in JavaScript):\n <pre>\n     DataSource.create({\n         ID:\"employees\",\n         fields:[ \n             ... \n         ]\n     });\n     ListGrid.create({\n         ID:\"myGrid\",\n         dataSource:\"employees\"\n     });\n     myGrid.fetchData();\n </pre>\n If you now bind a ${isc.DocUtils.linkForRef('class:DynamicForm')} to your DataSource, you can use the \n ${isc.DocUtils.linkForRef('method:DynamicForm.editSelectedData')} and ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')}\n methods to cause the client to submit \"update\" operations.  For both \"update\" and \"add\"\n operations, the DSRequest object you receive will have inbound data that is expected to be\n committed to your data model.  \n <P>\n <b>Data Integration</b>\n <P>\n There are two main approaches to integrating DataSources with your server technology:\n <ul>\n <li> ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')}: DataSource requests from\n the browser arrive as Java Objects on the server.  You deliver responses to the browser by\n returning Java Objects.\n <li> ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side integration')}: DataSource requests arrive\n as simple HTTP requests which your server code receives directly (in Java, you use the\n Servlet API or .jsps to handle the requests).  Responses are sent as XML or JSON which you\n directly generate.  \n </ul>\n Note that using WSDL-described web services is also considered a client-side integration\n approach, although in this case it is typical to use extensive third-party web service\n libraries such as <a href='http://ws.apache.org/axis/' onclick=\"window.open('http://ws.apache.org/axis/');return false;\">Apache Axis</a> to provide Java\n bindings.\n <P>\n The possible approaches are summarized in the diagram below.  Paths 2, 3, and 4 are\n client-side integration approaches, and path 1 includes all server-side integration\n approaches.\n <P>\n <img src=\"${isc.DocViewer.instance.referenceRoot}skin/ds_bindings.png\" width=763 height=475>\n <P>\n All of these integration options can be used in parallel within the same application.  For\n example, an application that typically talks to a Java backend may contact Yahoo's\n JSON-based search services to get related search results, or integrate with SalesForce\n applications via the AppForce WSDL-described web service.\n <P>\n If you cannot install the SmartClient Server or must integrate with a pre-existing web\n service, then you must pursue ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')}.\n Otherwise there are several factors to consider:\n\n <ul>\n\n <li> With an existing Java backend, the fastest integration approach is\n ${isc.DocUtils.linkForRef('group:serverDataIntegration','server-side integration')} using \n ${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation (DMI)')}.  Given \n a Java method that returns a Collection of POJOs, a short XML declaration will achieve\n data loading.</li>\n\n <li> If you are building an \n <a href='http://www.google.com/search?q=SOA+architecture' onclick=\"window.open('http://www.google.com/search?q=SOA+architecture');return false;\">SOA Architecture</a>, and some of\n the services that your SmartClient application needs to contact could be shared with other\n kinds of clients, consider the WSDL- or XML-based\n ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-Side Integration')}.</li>\n\n <li> The SmartClient server accelerates Java integration and provides various useful\n facilities, including the broadest possible browser support, server-push, and network\n performance enhancements.  See the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Server Summary')} for\n details.</li>\n\n </ul>",
        name:"clientServerIntegration",
        seeAlso:[],
        type:"group"
    },
    "attr:CubeGrid.hiliteProperty":{
        ref:"attr:CubeGrid.hiliteProperty",
        flags:"IRW",
        description:"Property to use to determine whether a value should be ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites','hilited')}.\n <P>\n This property is legal on ${isc.DocUtils.linkForRef('object:CellRecord','cellRecords')} and on\n ${isc.DocUtils.linkForRef('class:FacetValue','facetValues')}.  In the latter case, an entire row or column of\n cells in the body area will be hilited.",
        name:"hiliteProperty",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"_hilite\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Canvas.peers":{
        ref:"attr:Canvas.peers",
        flags:"IRWA",
        description:"Array of all Canvii that are peers of this Canvas.",
        name:"peers",
        seeAlso:[],
        valueType:"Array of Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "method:TabSet.addTabs":{
        ref:"method:TabSet.addTabs",
        flags:"A",
        description:" Add one or more tabs\n",
        name:"addTabs",
        seeAlso:[
            {ref:"method:TabSet.addTab", description:null}
        ],
        params:[
            {description:"new tab or tabs", optional:false, name:"tabs", defaultValue:null, 
             type:"Tab or Array of Tab"},
            {description:"position where tab should be added (or array of positions)", optional:false, 
             name:"position",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:DateChooser.prevMonthIcon":{
        ref:"attr:DateChooser.prevMonthIcon",
        flags:"IRW",
        description:"Icon for the previous month button",
        name:"prevMonthIcon",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"[SKIN]arrow_left.gif\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:ResultSet.lengthIsKnown":{
        ref:"method:ResultSet.lengthIsKnown",
        flags:"",
        description:" Whether the ResultSet actually knows how many records are available from the server.\n The ResultSet will not know how many records are available when initially fetching and \n filtering data. Note that the value returned from ${isc.DocUtils.linkForRef('method:ResultSet.getLength')} will be \n an arbitrary, large value if the actual length is not known.\n",
        name:"lengthIsKnown",
        seeAlso:[],
        returns:{description:"whether length is known", type:"boolean"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "group:EventRegistry":{
        ref:"group:EventRegistry",
        refs:["classMethod:Page.setEvent", "classMethod:Page.clearEvent", "type:FireStyle"],
        name:"EventRegistry",
        seeAlso:[],
        type:"group"
    },
    "class:ToolbarItem":{
        methods:[],
        exampleConfig:"ToolbarItem.xml",
        ref:"class:ToolbarItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:ToolbarItem.buttons", "attr:ToolbarItem.showTitle", "attr:ToolbarItem.startRow", 
         "attr:ToolbarItem.endRow","attr:ToolbarItem.colSpan", "attr:ToolbarItem.vertical", 
         "attr:ToolbarItem.buttonConstructor","attr:ToolbarItem.buttonProperties", "attr:ToolbarItem.buttonBaseStyle"],
        description:"Set of horizontally arranged buttons.",
        name:"ToolbarItem",
        seeAlso:[],
        type:"class"
    },
    "attr:CubeGrid.autoSelectValues":{
        ref:"attr:CubeGrid.autoSelectValues",
        flags:"IR",
        description:"Whether to select cells in the body when row or column headers are selected.<br><br>\n Legal values: \"both\", \"rows\", \"cols\", \"none\" (or false)",
        name:"autoSelectValues",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"both\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Layout.membersMargin":{
        ref:"attr:Layout.membersMargin",
        flags:"IRW",
        description:"Space between each member of the layout.\n <P>\n Requires a manual call to <code>reflow()</code> if changed on the fly.",
        name:"membersMargin",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"0",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('userSizing')}"],
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "attr:Window.dismissOnOutsideClick":{
        ref:"attr:Window.dismissOnOutsideClick",
        flags:"IRW",
        description:"If true, a click outside the bounds of the Window will have the same effect as\n      pressing its cancel button.<br>\n      <b>Note:</b> Applies only to modal windows.",
        name:"dismissOnOutsideClick",
        seeAlso:[
            {ref:"attr:Window.isModal", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["modal"]
    },
    "method:Canvas.moveAbove":{
        ref:"method:Canvas.moveAbove",
        flags:"",
        description:" Puts this widget just above the specified widget in the stacking order, so it appears in\n front of the specified widget if both widgets have the same parent.\n",
        name:"moveAbove",
        seeAlso:[],
        params:[
            {description:"canvas to move above", optional:false, name:"canvas", defaultValue:null, 
             type:"Canvas or subclass"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('layer')}"],
        definingClass:"class:Canvas",
        groups:["zIndex"]
    },
    "attr:Canvas.animateResizeAcceleration":{
        ref:"attr:Canvas.animateResizeAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated resize.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateResizeAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:CellSelection.deselectCell":{
        ref:"method:CellSelection.deselectCell",
        flags:"",
        description:"			Deselect a particular cell\n",
        name:"deselectCell",
        seeAlso:[],
        params:[
            {description:"row index of the cell to select", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column index of the cell to select", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection"]
    },
    "attr:SelectItem.valueField":{
        flags:"IRW",
        getter:["FormItem.getValueFieldName"],
        type:"attr",
        ref:"attr:SelectItem.valueField",
        description:"If this form item maps data values to display values by retrieving the \n ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an \n ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property \n denotes the the field to use as the underlying data value in records from the \n optionDataSource.<br>\n If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item.",
        name:"valueField",
        valueType:"string",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('relatedRecords')}"],
        defaultValue:"null",
        groups:["display_values"],
        definingClass:"class:SelectItem"
    },
    "method:FormItem.setValueMap":{
        ref:"method:FormItem.setValueMap",
        flags:"A",
        description:" Set the valueMap for this item.\n",
        name:"setValueMap",
        seeAlso:[
            {ref:"attr:FormItem.valueMap", description:null}
        ],
        params:[
            {description:"new valueMap", optional:false, name:"valueMap", defaultValue:null, 
             type:"Array or Object"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["valueMap"]
    },
    "attr:Layout.animateMembers":{
        ref:"attr:Layout.animateMembers",
        flags:"IRW",
        description:"If true when members are added / removed, they should be animated as they are shown\n or hidden in position",
        name:"animateMembers",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('animateLayout')}"],
        definingClass:"class:Layout",
        groups:["animation"]
    },
    "class:Page":{
        methods:[],
        ref:"class:Page",
        classAttrs:["classAttr:Page.defaultUnsupportedBrowserURL"],
        classMethods:["classMethod:Page.isLoaded", "classMethod:Page.setTitle", "classMethod:Page.getAppDir", 
         "classMethod:Page.setAppImgDir","classMethod:Page.getAppImgDir", "classMethod:Page.setAppFilesDir", 
         "classMethod:Page.getAppFilesDir","classMethod:Page.setIsomorphicDir", "classMethod:Page.getIsomorphicDir", 
         "classMethod:Page.setSkinDir","classMethod:Page.getSkinDir", "classMethod:Page.getSkinImgDir", 
         "classMethod:Page.getImgURL","classMethod:Page.getURL", "classMethod:Page.isRTL", "classMethod:Page.loadStyleSheet", 
         "classMethod:Page.resizeTo","classMethod:Page.moveTo", "classMethod:Page.scrollTo", "classMethod:Page.getWidth", 
         "classMethod:Page.getHeight","classMethod:Page.getScrollWidth", "classMethod:Page.getScrollHeight", 
         "classMethod:Page.getScrollLeft","classMethod:Page.getScrollTop", "classMethod:Page.getScreenWidth", 
         "classMethod:Page.getScreenHeight","classMethod:Page.goBack", "classMethod:Page.checkBrowserAndRedirect", 
         "classMethod:Page.setEvent","classMethod:Page.clearEvent", "classMethod:Page.registerKey", 
         "classMethod:Page.unregisterKey"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Provides information about the page you're loaded in.  We define \"page\" here to be roughly\n 	equivalent to the browser window or frame the libraries have been loaded in.",
        name:"Page",
        seeAlso:[],
        type:"class"
    },
    "attr:StatefulCanvas.autoFit":{
        ref:"attr:StatefulCanvas.autoFit",
        flags:"IRW",
        description:"If true, ignore the specified size of this widget and always size just large\n enough to accomodate the title.  If <code>setWidth()</code> is explicitly called on an\n autoFit:true button, autoFit will be reset to <code>false</code>.\n <P>\n Note that for StretchImgButton instances, autoFit will occur horizontally only, as \n unpredictable vertical sizing is likely to distort the media. If you do want vertical \n auto-fit, this can be achieved by simply setting a small height, and having \n overflow:\"visible\"",
        name:"autoFit",
        setter:["setAutoFit"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["sizing"]
    },
    "attr:ImgButton.iconSpacing":{
        ref:"attr:ImgButton.iconSpacing",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"iconSpacing",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:HiddenItem.showTitle":{
        ref:"attr:HiddenItem.showTitle",
        flags:"IRW",
        description:"we never show a separate title cell for hidden fields",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:HiddenItem",
        groups:["appearance"]
    },
    "method:Canvas.setHtmlPosition":{
        ref:"method:Canvas.setHtmlPosition",
        flags:"",
        description:" Setter for the ${isc.DocUtils.linkForRef('attr:Canvas.htmlPosition')}.\n",
        name:"setHtmlPosition",
        seeAlso:[],
        params:[
            {description:"New htmlPosition for this canvas", optional:false, name:"element", 
             defaultValue:null,type:"DrawPosition"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["htmlElement"]
    },
    "attr:TreeGrid.treeFieldTitle":{
        ref:"attr:TreeGrid.treeFieldTitle",
        flags:"IR",
        description:"Visible title for the tree column (field).",
        name:"treeFieldTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Name\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeField"]
    },
    "method:ImgButton.setBaseStyle":{
        ref:"method:ImgButton.setBaseStyle",
        flags:"",
        description:" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n",
        name:"setBaseStyle",
        seeAlso:[],
        params:[
            {description:"new base style", optional:false, name:"style", defaultValue:null, 
             type:"className"}
        ],
        type:"method",
        definingClass:"class:ImgButton"
    },
    "attr:OperationBinding.serverMethod":{
        ref:"attr:OperationBinding.serverMethod",
        flags:"IR",
        description:"The name of the method to invoke on the ${isc.DocUtils.linkForRef('class:ServerObject')} for this operationBinding.",
        name:"serverMethod",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        requiresModules:["SCServer"]
    },
    "attr:ListGrid.groupTree":{
        ref:"attr:ListGrid.groupTree",
        flags:"R",
        description:"The data tree that results from a call to  ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')}.\n This will be a ${isc.DocUtils.linkForRef('class:ResultTree')} if ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is\n present, otherwise it will be a ${isc.DocUtils.linkForRef('class:Tree')}.",
        name:"groupTree",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "classAttr:RPCManager.saveDataPrompt":{
        ref:"classAttr:RPCManager.saveDataPrompt",
        flags:"IRW",
        description:"Default prompt displayed to the user while an opreration is running to save data to\n the server.<br>\n Displayed as a result of the ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} code path.",
        name:"saveDataPrompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Saving form...\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["i18nMessages"]
    },
    "attr:Scrollbar.showTrackEnds":{
        ref:"attr:Scrollbar.showTrackEnds",
        flags:"IRWA",
        description:"If true, displays track start and end segments.",
        name:"showTrackEnds",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Scrollbar",
        groups:["appearance"]
    },
    "attr:SelectItem.showFocused":{
        ref:"attr:SelectItem.showFocused",
        flags:"IRWA",
        description:"When this item recieves focus, should it be re-styled to indicate it has focus?",
        name:"showFocused",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true, [IRWA]",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "method:ListGrid.reorderFields":{
        ref:"method:ListGrid.reorderFields",
        flags:"A",
        description:" Reorder a set of adjacent fields, from start to end exclusive at the end, by distance\n moveDelta.<br><br>\n\n NOTE: start and end coordinates are in terms of the currently visible fields, not the full set of\n fields.\n\n",
        name:"reorderFields",
        seeAlso:[],
        params:[
            {description:"Start of the range of fields to move, inclusive", optional:false, 
             name:"start",defaultValue:null, type:"number"},
            {description:"End of the range of fields to move, non-inclusive", optional:false, 
             name:"end",defaultValue:null, type:"number"},
            {description:"Distance to move by", optional:false, name:"moveDelta", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:TreeGrid.animateFolders":{
        ref:"attr:TreeGrid.animateFolders",
        flags:"IRW",
        description:"If true, when folders are opened / closed children will be animated into view.",
        name:"animateFolders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('animateTree')}"],
        definingClass:"class:TreeGrid",
        groups:["animation"]
    },
    "attr:ListGridRecord.singleCellValue":{
        ref:"attr:ListGridRecord.singleCellValue",
        flags:"IRW",
        description:"Default property name denoting the single value to display for all fields of this row.\n If this property is set for some record, the record will be displayed as a single \n cell spanning every column in the grid, with contents set to the value of this\n property.<br>\n Note: this attribute name is governed by ${isc.DocUtils.linkForRef('attr:ListGrid.singleCellValueProperty')}.",
        name:"singleCellValue",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridRecord"
    },
    "classAttr:Time.shortDisplayFormat":{
        ref:"classAttr:Time.shortDisplayFormat",
        flags:"RWA",
        description:"Standard formatter to be used when converting a date to a time-string via ${isc.DocUtils.linkForRef('classMethod:Time.toShortTime')}",
        name:"shortDisplayFormat",
        setter:["setShortDisplayFormat"],
        seeAlso:[],
        valueType:"timeFormatter|function",
        defaultValue:"\"toShortTime\"",
        type:"classAttr",
        definingClass:"class:Time"
    },
    "method:TabSet.getTabObject":{
        ref:"method:TabSet.getTabObject",
        flags:"",
        description:" Get the tab Object originally passed to ${isc.DocUtils.linkForRef('attr:TabSet.tabs')}, by index or ID.\n If passed a tab Object, just returns it.\n\n",
        name:"getTabObject",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"int | ID | Tab"}
        ],
        returns:{description:"the tab, or null if not found", type:"Tab"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:DSResponse.clientContext":{
        ref:"attr:DSResponse.clientContext",
        flags:"R",
        description:"The ${isc.DocUtils.linkForRef('attr:DSRequest.clientContext')} object as set on the ${isc.DocUtils.linkForRef('class:DSRequest')}.",
        name:"clientContext",
        seeAlso:[
            {ref:"attr:DSRequest.clientContext", description:null},
            {ref:"attr:RPCResponse.clientContext", description:null}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse"
    },
    "method:ListGridField.formatEditorValue":{
        ref:"method:ListGridField.formatEditorValue",
        flags:"",
        description:" Return the value to display in cells of this field which are being edited.\n <P>\n <i>Example usage</i>: converting a stored value in cents (100) to a dollar-and-cents \n value in the editor (1.00)\n <P>\n The value passed to this method is the raw value for the cell.\n <P>\n <code>formatEditorValue</code> takes precedence over ${isc.DocUtils.linkForRef('method:ListGrid.formatEditorValue')}\n defined at the grid level for cells in this field.\n <P>\n To convert the formatted value displayed within an editor back to a raw value, implement\n ${isc.DocUtils.linkForRef('method:ListGridField.parseEditorValue')} as well.\n\n",
        name:"formatEditorValue",
        seeAlso:[
            {ref:"method:ListGridField.formatCellValue", description:null},
            {ref:"method:ListGrid.formatEditorValue", description:null},
            {ref:"method:ListGridField.parseEditorValue", description:null}
        ],
        params:[
            {description:"raw value for the cell being edited", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"Record object for the cell. Note: If this is a new row that has not been saved, in an \n   editable grid, it has no associated record object. In this case the edit values will\n   be passed in as this parameter.", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"},
            {description:"A pointer to the ListGrid displaying the cell", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid instance"}
        ],
        returns:{description:"formatted value to display in the editor", type:"any"},
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:CubeGrid.facetLabelOver":{
        ref:"method:CubeGrid.facetLabelOver",
        flags:"",
        description:"    StringMethod handler fired when mouseover occurs over a facet label\n  <br><i>methodType</i> handler\n",
        name:"facetLabelOver",
        seeAlso:[],
        params:[
            {description:"ID of the appropriate facet", optional:false, name:"facetId", 
             defaultValue:null,type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "attr:Label.iconSize":{
        ref:"attr:Label.iconSize",
        flags:"IR",
        description:"Size in pixels of the icon image.\n <P>\n The <code>iconWidth</code> and <code>iconHeight</code> properties can be used to\n configure width and height separately.",
        name:"iconSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "attr:DetailViewerField.valueMap":{
        ref:"attr:DetailViewerField.valueMap",
        flags:"IR",
        description:"A property list (or an expression that evaluates to a property list)\n specifying a mapping of internal values to display values for the field (row).",
        name:"valueMap",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:DetailViewerField"
    },
    "attr:FacetValue.canCollapse":{
        ref:"attr:FacetValue.canCollapse",
        flags:"IR",
        description:"For individual parent facetValues within a hierarchical facet, this flag controls\n whether an expand/collapse control will be shown.",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "method:CubeGrid.deselectCell":{
        ref:"method:CubeGrid.deselectCell",
        flags:"",
        description:"\n  deselect a single cell - accepts cell ID or cell record.\n\n      <br><i>methodType</i> action\n",
        name:"deselectCell",
        seeAlso:[],
        params:[
            {description:"cell to deselect", optional:false, name:"cell", defaultValue:null, 
             type:"ID | object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:ViewLoader.viewURL":{
        ref:"attr:ViewLoader.viewURL",
        flags:"IR",
        description:"URL to load components from.",
        name:"viewURL",
        setter:["setViewURL"],
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('viewLoading')}"],
        definingClass:"class:ViewLoader"
    },
    "method:DataSource.updateData":{
        ref:"method:DataSource.updateData",
        flags:"",
        description:" Perform an \"update\" DataSource operation against this DataSource, to update values in an\n existing DataSource record.\n\n",
        name:"updateData",
        seeAlso:[],
        params:[
            {description:"updated record", optional:false, name:"updatedRecord", defaultValue:null, 
             type:"Object"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on                                                       the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest Properties"}
        ],
        type:"method",
        definingClass:"class:DataSource",
        groups:["operations"]
    },
    "method:Canvas.moveBelow":{
        ref:"method:Canvas.moveBelow",
        flags:"",
        description:" Puts this widget just below the specified widget in the stacking order, so it appears\n behind the specified widget if both widgets have the same parent.\n",
        name:"moveBelow",
        seeAlso:[],
        params:[
            {description:"canvas to move below", optional:false, name:"canvas", defaultValue:null, 
             type:"Canvas or subclass"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('layer')}"],
        definingClass:"class:Canvas",
        groups:["zIndex"]
    },
    "attr:Applet.altHTML":{
        ref:"attr:Applet.altHTML",
        flags:"IR",
        description:"This text is displayed if the browser does not understand the tag used for the applet html\n  element.",
        name:"altHTML",
        seeAlso:[
            {ref:"attr:Applet.alt", description:null},
            {ref:"attr:Applet.useTag", description:null}
        ],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:ListGrid.discardEditsSaveButtonTitle":{
        ref:"attr:ListGrid.discardEditsSaveButtonTitle",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.confirmDiscardEdits')} is true this is the title for the save button\n appearing in the lost edits confirmation dialog. Override this for localization if necessary.",
        name:"discardEditsSaveButtonTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Save\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing", "i18nMessages"]
    },
    "attr:ViewLoader.viewURLParams":{
        ref:"attr:ViewLoader.viewURLParams",
        flags:"IR",
        description:"Parameters to be sent to the viewURL when fetching the view.",
        name:"viewURLParams",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ViewLoader"
    },
    "classMethod:Log.traceMethod":{
        ref:"classMethod:Log.traceMethod",
        flags:"",
        description:"\n  Observe a method on an object, logging a stack trace whenever the method is called.\n  <P>\n  Call a second time with identical arguments to disable tracing.\n\n",
        name:"traceMethod",
        seeAlso:[],
        params:[
            {description:"object to observe", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"name of the method to observe", optional:false, name:"methodName", 
             defaultValue:null,type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "attr:Canvas.showEdges":{
        ref:"attr:Canvas.showEdges",
        flags:"IR",
        description:"Whether an ${isc.DocUtils.linkForRef('class:EdgedCanvas')} should be used to show image-based edges around this\n component.",
        name:"showEdges",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('edges')}"],
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "method:DynamicForm.submit":{
        ref:"method:DynamicForm.submit",
        flags:"",
        description:" <code>submit()</code> is automatically called when a ${isc.DocUtils.linkForRef('class:SubmitItem')} included in the\n form is clicked, or, if ${isc.DocUtils.linkForRef('attr:DynamicForm.saveOnEnter','saveOnEnter')} is set, when the\n \"Enter\" key is pressed in a text input.  Submit can also be manually called.\n <P>\n If ${isc.DocUtils.linkForRef('method:DynamicForm.submitValues','form.submitValues()')} exists, it will be called, then\n immediately return.\n <P>\n Otherwise, default behavior varies based on ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit','form.canSubmit')}: if\n <code>canSubmit</code> is false, ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will be called to\n handle saving via SmartClient databinding.  \n <P>\n If <code>canSubmit</code> is true, the form will be submitted like an ordinary HTML\n form via ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')}.\n <P>\n The parameters to <code>submit()</code> apply only if <code>submit()</code> will be\n calling ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')}.  If you override <code>submit()</code>, you can safely\n ignore the parameters as SmartClient framework code does not pass them.\n \n",
        name:"submit",
        seeAlso:[
            {ref:"method:DynamicForm.submitValues", description:null}
        ],
        params:[
            {description:"callback to invoke on completion.                                          [Ignored if this.canSubmit is true]", 
             optional:true,name:"callback", defaultValue:null, type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued\n                                          [Ignored if this.canSubmit is true]", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "method:RichTextEditor.setValue":{
        ref:"method:RichTextEditor.setValue",
        flags:"",
        description:"  Updates the current value of the edit area.\n",
        name:"setValue",
        seeAlso:[],
        type:"method",
        definingClass:"class:RichTextEditor"
    },
    "class:SelectItem":{
        methods:["method:SelectItem.defaultDynamicValue", "method:SelectItem.showPicker", 
         "method:SelectItem.fetchData","method:SelectItem.getDisplayFieldName", "method:SelectItem.getValueFieldName", 
         "method:SelectItem.dataArrived","method:SelectItem.getSelectedRecord"],
        ref:"class:SelectItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:SelectItem.height", "attr:SelectItem.addUnknownValues", 
         "attr:SelectItem.defaultValue","attr:SelectItem.defaultToFirstOption", "attr:SelectItem.showPickerIcon", 
         "attr:SelectItem.textBoxStyle","attr:SelectItem.controlStyle", "attr:SelectItem.pickerIconStyle", 
         "attr:SelectItem.showFocused","attr:SelectItem.pickerIconWidth", "attr:SelectItem.pickerIconHeight", 
         "attr:SelectItem.pickerIconSrc","attr:SelectItem.pickerIconProperties", "attr:SelectItem.hiliteOnFocus", 
         "attr:SelectItem.hiliteColor","attr:SelectItem.hiliteTextColor", "attr:SelectItem.pickButtonWidth", 
         "attr:SelectItem.pickButtonHeight","attr:SelectItem.pickButtonSrc", "attr:SelectItem.showOver", 
         "attr:SelectItem.allowEmptyValue","attr:SelectItem.autoFetchData", "attr:SelectItem.optionDataSource", 
         "attr:SelectItem.pickListFields","attr:SelectItem.optionFilterContext", "attr:SelectItem.displayField", 
         "attr:SelectItem.valueField","attr:SelectItem.filterLocally", "attr:SelectItem.pickListCriteria", 
         "attr:SelectItem.showOptionsFromDataSource","attr:SelectItem.pickListProperties", "attr:SelectItem.multiple"],
        description:"FormItem that allows picking between several mutually exclusive options via a select list.\n <P>\n Options may be derived from a <code>dataSource</code> or a <code>valueMap</code>\n <P>\n Note that to select the first option as a default value for the item,\n ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} may be set.",
        name:"SelectItem",
        implementsInterfaces:["PickList"],
        seeAlso:[
            {ref:"attr:PickList.optionDataSource", description:null},
            {ref:"attr:FormItem.valueMap", description:null}
        ],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('selectItem')}"]
    },
    "group:dragTracker":{
        ref:"group:dragTracker",
        refs:["method:ListGrid.setDragTracker", "method:ListGrid.getDragTrackerIcon", 
         "method:ListGrid.getDragTrackerTitle","method:TreeGrid.getDragTrackerIcon", "classMethod:EventHandler.setDragTracker", 
         "attr:ListGrid.dragTrackerMode","attr:ListGrid.trackerImage", "type:DragTrackerMode"],
        name:"dragTracker",
        seeAlso:[],
        type:"group"
    },
    "attr:StretchImgButton.iconHeight":{
        ref:"attr:StretchImgButton.iconHeight",
        flags:"IR",
        description:"Height in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:Layout.enforcePolicy":{
        ref:"attr:Layout.enforcePolicy",
        flags:"IRWA",
        description:"Whether the layout policy is continuously enforced as new members are added or removed\n and as members are resized.\n <p>\n This setting implies that any member that resizes larger, or any added member, will take\n space from other members in order to allow the overall layout to stay the same size.",
        name:"enforcePolicy",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "method:DataSource.removeData":{
        ref:"method:DataSource.removeData",
        flags:"",
        description:" Perform a \"remove\" DataSource operation against this DataSource, to delete an existing\n DataSource record.\n\n",
        name:"removeData",
        seeAlso:[],
        params:[
            {description:"primary key values of record to delete,                                             (or complete record)", 
             optional:false,name:"data", defaultValue:null, type:"Object"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on                                                       the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest Properties"}
        ],
        type:"method",
        definingClass:"class:DataSource",
        groups:["operations"]
    },
    "attr:Dialog.styleName":{
        ref:"attr:Dialog.styleName",
        flags:"IRW",
        description:"Style of the Dialog background",
        name:"styleName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"dialogBackground\"",
        type:"attr",
        definingClass:"class:Dialog",
        groups:["appearance"]
    },
    "attr:FormItem.cellStyle":{
        ref:"attr:FormItem.cellStyle",
        flags:"IRW",
        description:"CSS style applied to the form item as a whole, including the text element, any icons, and\n any hint text for the item. Applied to the cell containing the form item.\n <P>\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"cellStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"formCell\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:Tab.icon":{
        ref:"attr:Tab.icon",
        flags:"IRW",
        description:"If specified, this tab will show an icon next to the tab title.  Note that as with \n ${isc.DocUtils.linkForRef('attr:Button.icon')}, the URL of a tabs icon will be updated to reflect disabled state.<br>\n If desired a click handler may be assigned to the icon, which will be fired when the user\n clicks the tab. This method takes a single parameter <code>tab</code>, a pointer to the tab\n object.",
        name:"icon",
        seeAlso:[
            {ref:"method:TabSet.tabIconClick", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('tabsOrientation')}"],
        definingClass:"object:Tab"
    },
    "attr:TextItem.height":{
        ref:"attr:TextItem.height",
        flags:"IRW",
        description:"Default height for text items.",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"19",
        type:"attr",
        definingClass:"class:TextItem",
        groups:["appearance"]
    },
    "attr:MenuItem.dynamicIcon":{
        ref:"attr:MenuItem.dynamicIcon",
        flags:"IR",
        description:"A string of script that is evaluated to a string value for the item's icon property\n whenever the menu is shown or a shortcut key is pressed.\n <p>\n If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.icon')} instead.",
        name:"dynamicIcon",
        seeAlso:[],
        valueType:"expression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('menuDynamicItems')}"],
        definingClass:"object:MenuItem",
        groups:["dynamicMenuItem"]
    },
    "attr:Slider.animateThumbInit":{
        ref:"attr:Slider.animateThumbInit",
        flags:"IRW",
        description:"If thumb animation is enabled, should the thumb be animated to its initial value?",
        name:"animateThumbInit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Slider",
        groups:["animation"]
    },
    "attr:RestDataSource.metaDataPrefix":{
        ref:"attr:RestDataSource.metaDataPrefix",
        flags:"IR",
        description:"I ${isc.DocUtils.linkForRef('attr:RestDataSource.sendMetaData')} is true, this attribute is used to specify\n the prefix to apply to 'meta data' properties when assembling parameters to send to the \n server.  Applies to operations where OperationBinding.dataProtocol is set to \n <code>\"getParams\"</code> or <code>\"postParams\"</code> only.",
        name:"metaDataPrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"_\"",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "method:ListGrid.filterByEditor":{
        ref:"method:ListGrid.filterByEditor",
        flags:"",
        description:" If the filter editor (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')}) is visible for this grid, \n this method will perform a filter based on the current values in the editor.\n",
        name:"filterByEditor",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "attr:ListGridField.validateOnChange":{
        ref:"attr:ListGridField.validateOnChange",
        flags:"IRW",
        description:"If set to true, any ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} for this field will be run whenever\n the value of the field is edited.<br>\n Analgous to the ${isc.DocUtils.linkForRef('attr:FormItem.validateOnChange')} property.",
        name:"validateOnChange",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["gridValidation"]
    },
    "attr:HiddenItem.rowSpan":{
        ref:"attr:HiddenItem.rowSpan",
        flags:"IRW",
        description:"hidden fields don't take up any rows",
        name:"rowSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:HiddenItem",
        groups:["appearance"]
    },
    "method:CubeGrid.facetValueHoverHTML":{
        ref:"method:CubeGrid.facetValueHoverHTML",
        flags:"",
        description:"\n      Get the HTML for the facetValue button hover.  Default implementation returns null.\n\n      <br><i>methodType</i> callback\n",
        name:"facetValueHoverHTML",
        seeAlso:[],
        params:[
            {description:"facetValues object for the button", optional:false, name:"facetValues", 
             defaultValue:null,type:"facetValues object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:Tree.hasChildren":{
        ref:"method:Tree.hasChildren",
        flags:"",
        description:"\n Returns true if this node has any children.\n\n",
        name:"hasChildren",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the node has children", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:TreeGrid.setOpenState":{
        ref:"method:TreeGrid.setOpenState",
        flags:"",
        description:" Reset this set of open folders within this grid's data to match the \n ${isc.DocUtils.linkForRef('type:treeGridOpenState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to \n ${isc.DocUtils.linkForRef('method:TreeGrid.getOpenState')}.\n\n",
        name:"setOpenState",
        seeAlso:[
            {ref:"method:TreeGrid.getOpenState", description:null}
        ],
        params:[
            {description:"Object describing the desired set of open folders.", optional:false, 
             name:"openState",defaultValue:null, type:"treeGridOpenState"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "attr:Canvas.dynamicContents":{
        ref:"attr:Canvas.dynamicContents",
        flags:"IRWA",
        description:"Dynamic contents allows the contents string to be treated as a simple, but powerful\n template.  When this attribute is set to true, expressions of the form \\${arbitrary JS\n here} are replaced by the result of the evaluation of the JS code inside the curly\n brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation\n of the expressions in the contents string you can call markForRedraw() on the canvas.\n <p>\n You can use this feature to build some simple custom components. For example, let's say\n you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do\n this by observing the valueChanged() method on the slider and calling setContents() on\n your canvas with the new string or you can set the contents of the canvas to something\n like:\n <p><code>\n \"The slider value is \\${sliderInstance.getValue()}.\"\n </code><p>\n Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider\n and call canvas.markForRedraw() in that observation.  This approach is cleaner than\n setContents() when the Canvas is aggregating several values or dynamic expressions.\n Like so:\n <p>\n <pre>\n Slider.create({\n     ID: \"mySlider\"\n });\n\n Canvas.create({\n     ID: \"myCanvas\",\n     dynamicContents: true,\n     contents: \"The slider value is \\${mySlider.getValue()}.\"\n });\n     \n myCanvas.observe(mySlider, \"valueChanged\", \n                  \"observer.markForRedraw()\");\n </pre>\n You can embed an arbitrary number of dynamic expressions in the contents string.  The\n search and replace is optimized for speed.\n <p>\n If an error occurs during the evaluation of one of the expressions, a warning is logged\n to the ISC Developer Console and the error string is embedded in place of the expected\n value in the Canvas.\n <p>\n The value of a function is its return value.  The value of any variable is the same as\n that returned by its toString() representation.\n <p>\n Inside the evalution contentext, <code>this</code> points to the canvas instance that\n has the dynamicContents string as its contents - in other words the canvas instance on\n which the template is declared.",
        name:"dynamicContents",
        seeAlso:[
            {ref:"attr:Canvas.contents", description:null},
            {ref:"attr:Canvas.dynamicContentsVars", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dynamicContents')}"],
        definingClass:"class:Canvas",
        groups:["contents"]
    },
    "attr:ListGrid.bodyOverflow":{
        flags:"IRWA",
        type:"attr",
        ref:"attr:ListGrid.bodyOverflow",
        description:"Overflow setting for the \"body\", that is, the area of the grid where data values are\n rendered.\n <P>\n By setting both the grid itself and the body to overflow:visible, it is possible to\n \"auto-fit\" to the rendered height or width of the rows.  Note that in this case\n <code>grid.width</code> and <code>grid.height</code> act as minimums.",
        name:"bodyOverflow",
        setter:["setBodyOverflow"],
        valueType:"Overflow",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('autofitRows')}"],
        defaultValue:"Canvas.AUTO",
        groups:["sizing"],
        definingClass:"class:ListGrid"
    },
    "attr:Chart.data":{
        ref:"attr:Chart.data",
        flags:"IR",
        description:"Dataset for this chart.\n <P>\n Two basic formats are supported:\n <ul>\n <li> \"Standard model\": <code>data</code> is an array of CellRecords where each record\n contains one data value.  Each record also contains a property named after each facetId\n whose value is a facetValueId from that facet.\n <p>\n For example, with a facet with id \"regions\" and facetValues \"west\", \"north\" and \"east\", and\n with ${isc.DocUtils.linkForRef('attr:Chart.valueProperty')} with it's default value \"_value\", the <code>data</code> property\n could be:\n <pre>\n    isc.Chart.create({\n       facets:[{ id:\"regions\" }],\n       data : [\n          {regions:\"west\", _value:4},\n          {regions:\"north\", _value:2},\n          {regions:\"east\", _value:5}\n       ]\n    })</pre>\n If there were a second facet with id \"product\" and facetValues \"cars\" and \"trucks\", a Chart\n with a complete set of values would be:\n <pre>\n    isc.Chart.create({\n       facets:[{ id:\"regions\" }, { id:\"product\" }],\n       data : [\n          {product:\"cars\", regions:\"west\", _value:4},\n          {product:\"cars\", regions:\"north\", _value:2},\n          {product:\"cars\", regions:\"east\", _value:5},\n          {product:\"trucks\", regions:\"west\", _value:1},\n          {product:\"trucks\", regions:\"north\", _value:9},\n          {product:\"trucks\", regions:\"east\", _value:3}\n       ]\n    })</pre>\n This 2 facet (or \"2 dimensional\") dataset, if rendered as a bar chart, would use stacked or\n clustered bars and a legend.\n <P>\n\n <li> \"Inlined facet\": <code>data</code> is a single CellRecord or Array of CellRecords where\n each record contains multiple data values.  In this case, one facet definition is considered\n \"inlined\", meaning that the facetValueIds from this facet appear as properties in each\n record, and each such property holds one data value.  For example, a complete chart\n definition whose dataset is equivalent to the previous example would be:\n <pre>\n    isc.Chart.create({\n       facets: [{ \n          inlinedValues:true,\n          values : [ { id:\"west\" }, { id:\"north\" }, { id : \"east\" } ]\n       }],\n       data : { west:4, north:5, east:2 }\n    })</pre>\n Note that the property \"inlinedValues\" must be set on the facet definition, and the set of\n facetValueIds must be specified outside of the data array (with the \"standard model\",\n facetValueIds can be automatically derived from the data).  \n <P>\n A two facet chart with an inlined facet can be defined as follows:\n <pre>\n    isc.Chart.create({\n       facets: [\n         { \n            inlinedValues:true,\n            values : [ { id:\"west\" }, { id:\"north\" }, { id : \"east\" } ]\n         }, \n         { id:\"product\" }\n       ],\n       data : [\n           { product:\"cars\", west:4, north:5, east:2 },\n           { product:\"trucks\", west:1, north:9, east:3 }\n       ]\n    })</pre>\n </ul>\n Comparing between the formats, the \"standard model\" format treats all facets identically,\n which can be of use when integrating with server technology that likewise treats all facets\n identically.  The \"inlined facet\" format is a more compact data representation and allows\n easier conversion from data displayed in a ListGrid.",
        name:"data",
        setter:["setData"],
        seeAlso:[],
        valueType:"Array of CellRecord or CellRecord",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "attr:ListGridField.valueIconHeight":{
        ref:"attr:ListGridField.valueIconHeight",
        flags:"IRW",
        description:"Height for value icons for this listGrid field.\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}, ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconHeight')}, and\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}.",
        name:"valueIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "classAttr:RPCManager.promptStyle":{
        ref:"classAttr:RPCManager.promptStyle",
        flags:"IRW",
        description:"Controls the default prompt style.  Overrideable by ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')}.",
        name:"promptStyle",
        seeAlso:[
            {ref:"attr:RPCRequest.promptStyle", description:null}
        ],
        valueType:"PromptStyle",
        defaultValue:"\"dialog\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["rpcPrompt"]
    },
    "method:Class.addPropertyList":{
        ref:"method:Class.addPropertyList",
        flags:"",
        description:"\n	Add properties to this instance.\n\n",
        name:"addPropertyList",
        seeAlso:[],
        params:[
            {description:"listarray of objects with properties to add", optional:true, name:"", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"the object after properties have been added to it", type:"object"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:ImgButton.showFocusedIcon":{
        ref:"attr:ImgButton.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:Window.footerHeight":{
        ref:"attr:Window.footerHeight",
        flags:"IR",
        description:"The height of the footer, in pixels.",
        name:"footerHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"18",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "footer"]
    },
    "attr:ImgButton.radioGroup":{
        ref:"attr:ImgButton.radioGroup",
        flags:"IRWA",
        description:"String identifier for this canvas's mutually exclusive selection group.",
        name:"radioGroup",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonRadioToggle')}"],
        definingClass:"class:ImgButton",
        groups:["state", "event handling"]
    },
    "method:PickList.fetchData":{
        ref:"method:PickList.fetchData",
        flags:"",
        description:" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).<br>\n Performs a fetch type operation on this item's DataSource to retrieve the set of valid\n options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"Callback to fire when the fetch completes. Callback will               fire with 2 parameters: <code>item</code> a pointer to the form item and\n              <code>dsResponse</code> the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server.", 
             optional:false,name:"callback", defaultValue:null, type:"callback"},
            {description:"properties to apply to the              dsRequest for this fetch.", 
             optional:false,name:"requestProperties", defaultValue:null, type:"dsRequest properties"}
        ],
        type:"method",
        definingClass:"interface:PickList"
    },
    "attr:Slider.labelWidth":{
        ref:"attr:Slider.labelWidth",
        flags:"IRW",
        description:"The width of the labels used to display the minimum, maximum and current values of the\n slider.",
        name:"labelWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"50",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:DynamicForm.getFields":{
        ref:"method:DynamicForm.getFields",
        flags:"",
        description:" Method to retrieve the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. \n\n",
        name:"getFields",
        seeAlso:[],
        params:[
            {description:"list of new items to show in the form", optional:false, name:"itemList", 
             defaultValue:null,type:"Array of objects"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["elements"]
    },
    "method:Tree.getPath":{
        ref:"method:Tree.getPath",
        flags:"",
        description:"\n Returns the path of a node - a path has the following format:\n <code>([name][pathDelim]?)*</code>\n <br><br>\n For example, in this tree:\n <pre>\n root\n   foo\n     bar\n </pre>\n Assuming that ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} is the default <code>/</code>, the <code>bar</code>\n node would have the path <code>root/foo/bar</code> and the path for the <code>foo</code>\n node would be <code>root/foo</code>.\n <br><br>\n Once you have a path to a node, you can call find(path) to retrieve a reference to the node\n later.\n\n",
        name:"getPath",
        seeAlso:[
            {ref:"method:Tree.getParentPath", description:null}
        ],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"path to the node", type:"string"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Slider.vertical":{
        ref:"attr:Slider.vertical",
        flags:"IRW",
        description:"Indicates whether this is a vertical or horizontal slider.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:Slider"
    },
    "attr:Window.showHeaderBackground":{
        ref:"attr:Window.showHeaderBackground",
        flags:"IRA",
        description:"Should the window header show a background image? Default value is true for all browsers\n except for Internet Explorer.<br>\n If set to true the image source is derived from ${isc.DocUtils.linkForRef('attr:Window.headerSrc')} and \n ${isc.DocUtils.linkForRef('attr:Window.hiliteHeaderSrc')}, otherwise the background will be styled according to \n ${isc.DocUtils.linkForRef('attr:Window.headerStyle')} / ${isc.DocUtils.linkForRef('attr:Window.hiliteHeaderStyle')}.",
        name:"showHeaderBackground",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"varies",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:DynamicForm.minColWidth":{
        ref:"attr:DynamicForm.minColWidth",
        flags:"IRW",
        description:"Minimum width of a form column.",
        name:"minColWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "attr:CubeGrid.hideEmptyFacetValues":{
        ref:"attr:CubeGrid.hideEmptyFacetValues",
        flags:"IRW",
        description:"This causes the headers for any combination of facetValues for which there are no \n  cellRecords to be suppressed.\n  (Note: Valid only for CubeGrids that specify the complete dataset upfront - \n   don't use load on demand)",
        name:"hideEmptyFacetValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "class:SpacerItem":{
        methods:[],
        ref:"class:SpacerItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:SpacerItem.showTitle", "attr:SpacerItem.width", "attr:SpacerItem.height"],
        description:"A SpacerItem takes up a single cell in the FormLayout, of arbitrary size.",
        name:"SpacerItem",
        seeAlso:[],
        type:"class"
    },
    "attr:FormItem.valueIconRightPadding":{
        ref:"attr:FormItem.valueIconRightPadding",
        flags:"IRW",
        description:"If we're showing a value icon, this attribute governs the amount of space between the \n icon and the label of the form item",
        name:"valueIconRightPadding",
        seeAlso:[
            {ref:"attr:FormItem.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"3",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:Canvas.canDrag":{
        ref:"attr:Canvas.canDrag",
        flags:"IRWA",
        description:"Indicates whether this widget can initiate custom drag-and-drop operations (other than\n      reposition or resize). Normally canDragReposition or canDragResize would be used\n      instead of this property.\n      Note: this property may be manipulated by higher-level dragging semantics.",
        name:"canDrag",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "type:DateDisplayFormat":{
        ref:"type:DateDisplayFormat",
        values:[
            {description:"Default native browser 'toString()' implementation. May vary by browser.<br>\n <i>Example</i>: <code>Fri Nov 04 2005 11:03:00 GMT-0800 (Pacific Standard Time)</code>", 
             value:"toString"},
            {description:"Default native browser 'toLocaleString()' implementation. May vary by browser.\n <i>Example</i>: <code>Friday, November 04, 2005 11:03:00 AM</code>", 
             value:"toLocaleString"},
            {description:"Short date in format MM/DD/YYYY.<br> <i>Example</i>: <code>11/4/2005</code>", 
             value:"toUSShortDate"},
            {description:"Short date with time in format MM/DD/YYYY HH:MM<br> <i>Example</i>: <code>11/4/2005 11:03</code>", 
             value:"toUSShortDateTime"},
            {description:"Short date in format DD/MM/YYYY.<br> <i>Example</i>: <code>4/11/2005</code>", 
             value:"toEuropeanShortDate"},
            {description:"Short date with time in format DD/MM/YYYY HH:MM<br> <i>Example</i>: <code>4/11/2005 11:03</code>", 
             value:"toEuropeanShortDateTime"},
            {description:"Short date in format YYYY/MM/DD.<br> <i>Example</i>: <code>2005/11/4</code>", 
             value:"toJapanShortDate"},
            {description:"Short date with time in format YYYY/MM/DD HH:MM<br> <i>Example</i>: <code>2005/11/4 11:03</code>", 
             value:"toJapanShortDateTime"},
            {description:"Date in the format YYYY-MM-DD HH:MM:SS<br> <i>Example</i>: <code>2005-11-04 11:09:15</code>", 
             value:"toSerializeableDate"},
            {description:"Date in the format &lt;YYYYMMDD&gt;T&lt;HHMMSS&gt;Z <i>Example</i>: <code>20051104T111001Z</code>\n <br>\n <br>\n Note: In addition to these standard formats, custom formatting can be set by passing\n a function directly to ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')} et al. This \n function will then be executed whenever the appropriate formatter method is called [eg \n ${isc.DocUtils.linkForRef('method:Date.toNormalDate')}], in the scope of the date instance in question.", 
             value:"toDateStamp"}
        ],
        description:"Valid display formats for dates.  These strings are the names of formatters which can be \n passed to <code>Date.setNormalDisplayFormat()</code> or <code>Date.setShortDisplayFormat()</code>\n and will be subsequently used as default long or short formatters for date objects by\n SmartClient components.<br>\n Default set of valid display formats is as follows:<br><br>",
        name:"DateDisplayFormat",
        seeAlso:[],
        type:"type"
    },
    "method:Progressbar.setBreadth":{
        ref:"method:Progressbar.setBreadth",
        flags:"",
        description:" Sets the breadth of the progressbar to newLength. This is the height of a horizontal progressbar,\n or the width of a vertical progressbar.\n\n",
        name:"setBreadth",
        seeAlso:[],
        params:[
            {description:"the new breadth of the progressbar", optional:false, name:"newBreadth", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Progressbar"
    },
    "attr:ListGridField.imageURLPrefix":{
        ref:"attr:ListGridField.imageURLPrefix",
        flags:"IRWA",
        description:"If this field has type [${isc.DocUtils.linkForRef('type:ListGridFieldType')}] set to <code>\"image\"</code>\n and the URL for the image displayed is not absolute, the path of the URL will be relative \n to this string<br>\n Alternatively, if this field displays any valueIcons, this prefix will be applied to\n the beginning of any ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')} when determining the\n URL for the image.",
        name:"imageURLPrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('imageType')}"],
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "method:Menu.itemClick":{
        ref:"method:Menu.itemClick",
        flags:"A",
        description:"          Executed when a menu item with no click handler is clicked by the user. This\n          itemClick handler must be specified as a function. It is passed an item parameter that\n          is a reference to the clicked menu item.\n\n",
        name:"itemClick",
        seeAlso:[],
        params:[
            {description:"pointer to the item in question", optional:false, name:"item", 
             defaultValue:null,type:"object"},
            {description:"Index of the column clicked by the user. May be null if                                  this menu item was activated in response to a keyboard event.", 
             optional:true,name:"colNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"false if event processing should be stopped, true to continue", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('menuColumns')}"],
        definingClass:"class:Menu"
    },
    "class:SchemaSet":{
        methods:["method:SchemaSet.getSchema"],
        ref:"class:SchemaSet",
        classAttrs:[],
        classMethods:["classMethod:SchemaSet.get"],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:SchemaSet.schemaNamespace"],
        description:"A set of schema derived from the &lt;xsd:schema&gt; element in a WSDL or XML schema file\n loaded by ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} or ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}.",
        name:"SchemaSet",
        seeAlso:[],
        type:"class"
    },
    "method:CubeGrid.saveAllEdits":{
        ref:"method:CubeGrid.saveAllEdits",
        flags:"",
        description:" Save a number of outstanding edits for this CubeGrids. If no cells are specifed, all \n outstanding edits will be saved\n",
        name:"saveAllEdits",
        seeAlso:[],
        params:[
            {description:"optionally specify which cells to save. Each cell  should be specified as a 2 element array in the format <code>[rowNum,colNum]</code>.", 
             optional:true,name:"cells", defaultValue:null, type:"array of 2-element arrays"},
            {description:"If specified this callback will be fired on a successful save  of the specified rows.", 
             optional:true,name:"saveCallback", defaultValue:null, type:"callback"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "attr:MenuItem.icon":{
        ref:"attr:MenuItem.icon",
        flags:"IR",
        description:"The base filename for this item's custom icon. If both this property and\n ${isc.DocUtils.linkForRef('attr:MenuItem.checked')} are both specified, only icon specified by this property will be\n displayed. The path to the loaded skin directory and the skinImgDir are prepended to\n this filename to form the full URL.\n <p>\n If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.dynamicIcon')} instead.",
        name:"icon",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"],
        definingClass:"object:MenuItem",
        groups:["menuIcons"]
    },
    "attr:ViewLoader.viewRPCProperties":{
        ref:"attr:ViewLoader.viewRPCProperties",
        flags:"IRA",
        description:"RPCRequest properties to be sent with every RPCRequest issued by the ViewLoader.  Very\n advanced; could be used to, for example, set HTTP headers.",
        name:"viewRPCProperties",
        seeAlso:[],
        valueType:"RPCRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ViewLoader"
    },
    "method:Canvas.dropOut":{
        ref:"method:Canvas.dropOut",
        flags:"A",
        description:"\n Executed when the dragged object is moved out of the rectangle of this drop target. If you\n have set a visual indication in dropOver or dropMove, you should reset it to its normal\n state in dropOut.\n\n",
        name:"dropOut",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customDrag')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:TreeGrid.setData":{
        ref:"method:TreeGrid.setData",
        flags:"",
        description:" Set the ${isc.DocUtils.linkForRef('class:Tree')} object this TreeGrid will view and manipulate.\n\n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"Tree to show", optional:false, name:"newData", defaultValue:null, type:"Tree"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:Slider.thumbThinWidth":{
        ref:"attr:Slider.thumbThinWidth",
        flags:"IRW",
        description:"The dimension of the thumb parallel to the slider track.",
        name:"thumbThinWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"17",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:ListGrid.dragDataAction":{
        ref:"attr:ListGrid.dragDataAction",
        flags:"IRW",
        description:"Indicates what to do with data dragged into another listGrid. See\n          DragDataAction type for details.",
        name:"dragDataAction",
        seeAlso:[],
        valueType:"DragDataAction",
        defaultValue:"ListGrid.MOVE",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('gridsDragMove')}", 
         "${isc.DocUtils.linkForExampleId('gridsDragCopy')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "class:EdgedCanvas":{
        methods:[],
        ref:"class:EdgedCanvas",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:EdgedCanvas.skinImgDir", "attr:EdgedCanvas.edgeImage", "attr:EdgedCanvas.edgeColor", 
         "attr:EdgedCanvas.customEdges","attr:EdgedCanvas.showCenter", "attr:EdgedCanvas.edgeSize", "attr:EdgedCanvas.edgeLeft", 
         "attr:EdgedCanvas.edgeRight","attr:EdgedCanvas.edgeTop", "attr:EdgedCanvas.edgeBottom", "attr:EdgedCanvas.edgeOffset", 
         "attr:EdgedCanvas.edgeOffsetTop","attr:EdgedCanvas.edgeOffsetBottom", "attr:EdgedCanvas.edgeOffsetLeft", 
         "attr:EdgedCanvas.edgeOffsetRight","attr:EdgedCanvas.centerBackgroundColor"],
        description:"EdgedCanvas acts as a decorative, image-based frame around another single Canvas.",
        name:"EdgedCanvas",
        seeAlso:[],
        type:"class",
        groups:["imageEdges"]
    },
    "attr:Window.canDragReposition":{
        ref:"attr:Window.canDragReposition",
        flags:"IRW",
        description:"if true, this Window may be moved around by the user by dragging on the Window header.  \n Note that if the header is not showing, the Window can't be drag-repositioned regardless\n of this setting.",
        name:"canDragReposition",
        seeAlso:[
            {ref:"attr:Window.showHeader", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["dragging"]
    },
    "method:Log.logInfo":{
        ref:"method:Log.logInfo",
        flags:"",
        description:" Log a message at \"info\" priority\n \n",
        name:"logInfo",
        seeAlso:[
            {ref:"method:Log.logDebug", description:"for usage info"}
        ],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:Scrollbar.autoEnable":{
        ref:"attr:Scrollbar.autoEnable",
        flags:"IRWA",
        description:"If true, this scrollbar will automatically enable when the scrollTarget is\n          scrollable (i.e., when the contents of the scrollTarget exceed its clip size in the\n          direction relevant to this scrollbar), and automatically disable when the\n          scrollTarget is not scrollable. Set this property to false for full manual control\n          over a scrollbar's enabled state.",
        name:"autoEnable",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "method:Button.setAutoFit":{
        ref:"method:Button.setAutoFit",
        flags:"",
        description:" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn\n autoFit on or off. When autoFit is set to <code>false</code>, canvas will be resized to\n it's previously specified size.\n",
        name:"setAutoFit",
        seeAlso:[],
        params:[
            {description:"New autoFit setting.", optional:false, name:"autoFit", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Button"
    },
    "attr:StretchImgButton.wrap":{
        ref:"attr:StretchImgButton.wrap",
        flags:"IRW",
        description:"Should the title for this button wrap? If unset, default behavior is to allow wrapping\n if this.vertical is true, otherwise disallow wrapping",
        name:"wrap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:Canvas.resizeTo":{
        ref:"method:Canvas.resizeTo",
        flags:"",
        description:"			Resizes the widget to the specified width and height (moves the right and/ or bottom\n          sides of the widget). The width and height parameters can be expressed as a percentage\n          of viewport size or as the number of pixels.\n",
        name:"resizeTo",
        seeAlso:[],
        params:[
            {description:"new width for canvas", optional:true, name:"width", defaultValue:null, 
             type:"number"},
            {description:"new height for canvas", optional:true, name:"height", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether the size actually changed", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('resize')}"],
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "classAttr:RPCManager.useCursorTracker":{
        ref:"classAttr:RPCManager.useCursorTracker",
        flags:"IRW",
        description:"If true, an image is shown to the right of the cursor when ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')} is\n set to \"cursor\", otherwise the cursor itself is modified via css to the value of\n ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.  The default is platform-dependent.  In Safari, IE 5.5 and\n Firefox 1.0 the default is true, on all other platforms it is false.  The reason for\n this split is that, the above browsers require that the cursor move before CSS settings are\n re-evaluated - this means the progress cursor can stick until the user moves the mouse.\n <p>\n This value can be overridden on a per-request basis via ${isc.DocUtils.linkForRef('classAttr:RPCRequest.useCursorTracker')}.",
        name:"useCursorTracker",
        seeAlso:[
            {ref:"classAttr:RPCRequest.useCursorTracker", description:null}
        ],
        valueType:"boolean",
        defaultValue:"platform-dependent",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["rpcPrompt"]
    },
    "attr:ListGrid.headerMenuButtonHeight":{
        ref:"attr:ListGrid.headerMenuButtonHeight",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the height of the \n auto-generated <code>headerMenuButton</code>",
        name:"headerMenuButtonHeight",
        seeAlso:[],
        valueType:"measure",
        defaultValue:"\"100%\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "attr:DateChooser.prevMonthIconHeight":{
        ref:"attr:DateChooser.prevMonthIconHeight",
        flags:"IRW",
        description:"Height of the icon for the previous month button",
        name:"prevMonthIconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:Canvas.getInnerHTML":{
        ref:"method:Canvas.getInnerHTML",
        flags:"A",
        description:"      Return the inner HTML for this canvas. Called when the canvas is drawn or redrawn; \n      override to customize.\n",
        name:"getInnerHTML",
        seeAlso:[],
        returns:{description:"HTML contents of this canvas", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "classAttr:ValidatorTypes.isString":{
        ref:"classAttr:ValidatorTypes.isString",
        flags:"IR",
        description:"Validation will fail if the value is not a string value.",
        name:"isString",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:Window.canFocusInHeaderButtons":{
        ref:"attr:Window.canFocusInHeaderButtons",
        flags:"IRWA",
        description:"If true, the user can give the header buttons keyboard focus (by clicking on\n      them and including them in the tabOrder)",
        name:"canFocusInHeaderButtons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["focus", "header"]
    },
    "attr:ToolStrip.members":{
        ref:"attr:ToolStrip.members",
        flags:"IR",
        description:"Array of components that will be contained within this Toolstrip, like\n ${isc.DocUtils.linkForRef('attr:Layout.members')}, with the following special behaviors:\n <ul>\n <li>the String \"separator\" will cause a separator to be created (instance of \n ${isc.DocUtils.linkForRef('attr:ToolStrip.separatorClass')})\n <li>the String \"resizer\" will cause a resizer to be created (instance of\n ${isc.DocUtils.linkForRef('attr:ToolStrip.resizeBarClass')}).  This is equivalent to setting\n ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar','showResizeBar:true')} on the preceding member.\n </ul>",
        name:"members",
        seeAlso:[],
        valueType:"Array of Canvas",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('toolstrip')}"],
        definingClass:"class:ToolStrip"
    },
    "attr:Toolbar.buttonDefaults":{
        ref:"attr:Toolbar.buttonDefaults",
        flags:"IRWA",
        description:"Settings to apply to all buttons of a toolbar. Properties that can be applied to\n button objects can be applied to all buttons of a toolbar by specifying them in\n buttonDefaults using the following syntax:<br>\n <code>buttonDefaults:{property1:value1, property2:value2, ...}</code><br>\n See the Button Widget Class for standard button properties.",
        name:"buttonDefaults",
        seeAlso:[
            {ref:"class:Button", description:null}
        ],
        valueType:"object",
        defaultValue:"varies",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["appearance"]
    },
    "attr:RPCRequest.evalResult":{
        ref:"attr:RPCRequest.evalResult",
        flags:"IRWA",
        description:"This works similarly to ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} except the resulting String\n is automatically evaluated as JavaScript.  The result of the evaluation is then passed to\n any specified ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} as ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}.\n <p>\n This feature can be used to dynamically load new application modules into a running\n application.  An RPCRequest with <code>evalResult</code> enabled can be used to fetch a\n static .js file or JavaScript dynamically generated by the server.  The returned JavaScript\n can contain anything that a JavaScript file loaded at init time can contain, including new\n views and new SmartClient class definitions.\n <p>\n <i>Example usage with ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')}:</i>\n <pre>\n isc.RPCManager.sendRequest({\n     evalResult:true,\n     actionURL:\"js/loadLabel.js\",\n     evalVars:{var1:\"A Value\"}\n });\n </pre>\n This call would execute the code from <code>loadLabel.js</code>, and make the variable\n <code>var1</code> available to that code. Therefore if the .js file contained this code:\n <pre>\n isc.Label.create({\n     contents:var1\n })\n </pre>\n A label would be created with contents set to the value of <code>var1</code> - the string\n <code>\"A Value\"</code>.\n \n <p>\n This feature relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.",
        name:"evalResult",
        seeAlso:[
            {ref:"class:ViewLoader", description:null},
            {ref:"attr:RPCRequest.evalVars", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["viewLoading"]
    },
    "type:DrawPosition":{
        ref:"type:DrawPosition",
        values:[
            {description:"insert before the target element", value:"\"beforeBegin\""},
            {description:"insert as the target element's first child", value:"\"afterBegin\""},
            {description:"insert as the target element's last child", value:"\"beforeEnd\""},
            {description:"insert after the target element", value:"\"afterEnd\""},
            {description:"replace the target element", value:"\"replace\""}
        ],
        description:null,
        name:"DrawPosition",
        seeAlso:[],
        type:"type",
        groups:["drawContext"]
    },
    "attr:Menu.showIcons":{
        ref:"attr:Menu.showIcons",
        flags:"IRW",
        description:"A boolean, indicating whether the checkmark/custom icon column should be displayed.\n If showIcons is not set, the menu will show the icon column only if one of its items\n specifies an icon, checked, checkIf, or dynamicIcon property.",
        name:"showIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Menu"
    },
    "attr:FormItem.showFocusedIcons":{
        ref:"attr:FormItem.showFocusedIcons",
        flags:"IRWA",
        description:"If we're showing icons, should we change their image source to the appropriate\n  <i>focused</i>  source when this item has focus?  Can be overridden on a per\n  icon basis by the formItemIcon <code>showFocused</code> property.",
        name:"showFocusedIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "method:CubeGrid.getEditedCell":{
        ref:"method:CubeGrid.getEditedCell",
        flags:"",
        description:" Returns the current value of a cell. If the cell has an outstanding edit value, this will\n be returned, otherwise the underlying value of the record will be returned.\n\n",
        name:"getEditedCell",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"record", defaultValue:null, type:"number | Object"},
            {description:"colNum of the cell. Only required if the first parameter is                              a rowNum", 
             optional:false,name:"colNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"Current edit value, or underlying value for the cell.", type:"any"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "attr:Slider.trackImageType":{
        ref:"attr:Slider.trackImageType",
        flags:"IRW",
        description:"The imageType setting for the slider track.",
        name:"trackImageType",
        seeAlso:[
            {ref:"type:ImageStyle", description:null},
            {ref:"attr:StretchImg.imageType", description:null}
        ],
        valueType:"ImageStyle",
        defaultValue:"\"stretch\"",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:TreeNode.id":{
        ref:"attr:TreeNode.id",
        flags:"IR",
        description:"For trees with ${isc.DocUtils.linkForRef('attr:Tree.modelType')} \"parent\", this property specifies the unique ID of this\n node. The unique ID of a node, together with the unique ID of its parent (see\n ${isc.DocUtils.linkForRef('attr:TreeNode.parentId')}) is used by ${isc.DocUtils.linkForRef('method:Tree.linkNodes')} to link a list of nodes into a\n tree.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.idField')}.",
        name:"id",
        seeAlso:[
            {ref:"attr:TreeNode.parentId", description:null},
            {ref:"method:Tree.linkNodes", description:null},
            {ref:"attr:Tree.modelType", description:null},
            {ref:"attr:Tree.idField", description:null}
        ],
        valueType:"String or Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:FormItem.filterLocally":{
        ref:"attr:FormItem.filterLocally",
        flags:"IRA",
        description:"If this form item is mapping data values to a display value by fetching them from a \n dataSource (see ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}, ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} \n and ${isc.DocUtils.linkForRef('attr:FormItem.fetchMissingValues')}), setting this property to true ensures that when\n the form item value is set, entire data-set from the dataSource is loaded at once and \n used as a valueMap, rather than just loading the display value for the current value.\n This avoids the need to perform fetches each time setValue() is called with a new value.\n <br>\n See also ${isc.DocUtils.linkForRef('attr:PickList.filterLocally')} for behavior on form items such as SelectItems\n that show pick-lists.",
        name:"filterLocally",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "attr:Canvas.matchElement":{
        ref:"attr:Canvas.matchElement",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} is specified, should this canvas initially be drawn\n at the same dimensions as the htmlElement?<br>\n Note: setting this property will not force the canvas to resize if the element\n subsequently resizes (for example due to page reflow).",
        name:"matchElement",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas"
    },
    "method:CubeGrid.getSelectedCellIds":{
        ref:"method:CubeGrid.getSelectedCellIds",
        flags:"",
        description:"\n  return an array of the IDs of all selected cell records\n\n  <br><i>methodType</i> getter\n",
        name:"getSelectedCellIds",
        seeAlso:[],
        returns:{description:"array of the selected cell IDs", type:"Array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:ListGrid.bodyStyleName":{
        ref:"attr:ListGrid.bodyStyleName",
        flags:"IR",
        description:"CSS style used for the body of this grid.  If applying a background-color to the body\n via a CSS style applied using this property, be sure to set \n ${isc.DocUtils.linkForRef('attr:ListGrid.bodyBackgroundColor')} to <code>null</code>.",
        name:"bodyStyleName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "method:List.getValueMap":{
        ref:"method:List.getValueMap",
        flags:"",
        description:" Get a map of the form <code>{ item[idField] -&gt; item[displayField] }</code>, for all \n items in the list.  Note that if more than one item has the same <code>idProperty</code>, \n the value for the later item in the list will clobber the value for the earlier item.\n\n",
        name:"getValueMap",
        seeAlso:[],
        params:[
            {description:"Property to use as ID (data value) in the valueMap", optional:false, 
             name:"idField",defaultValue:null, type:"string"},
            {description:"Property to use a display value in the valueMap", optional:false, 
             name:"displayField",defaultValue:null, type:"string"}
        ],
        returns:{description:"valueMap object", type:"object"},
        type:"method",
        definingClass:"interface:List"
    },
    "method:ListGrid.recordClick":{
        ref:"method:ListGrid.recordClick",
        flags:"",
        description:" Executed when the listGrid receives a 'click' event on an enabled, non-separator\n record. The default implementation does nothing -- override to perform some action\n when any record or field is clicked.<br>\n A record event handler can be specified either as\n a function to execute, or as a string of script to evaluate. If the handler is defined\n as a string of script, all the parameters below will be available as variables for use\n in the script.<br>\n	To do something specific if a particular field is clicked, add a recordClick\n	method or string of script to that field (same parameters) when you're setting up\n	the list.<br>\n	<b>Notes:</b><ul>\n  <li>This will not be called if the click is below the last item of the list.</li>\n  <li>This method is called from the default implementaiton of\n  ${isc.DocUtils.linkForRef('method:ListGrid.rowClick')}, so if that method is overridden\n  this method may not be fired.</li></ul>\n",
        name:"recordClick",
        seeAlso:[
            {ref:"method:ListGrid.rowClick", description:null}
        ],
        params:[
            {description:"the listGrid that contains the click event", optional:false, name:"viewer", 
             defaultValue:null,type:"listGrid"},
            {description:"the record that was clicked on", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"number of the record clicked on in the current set of                                  displayed records (starts with 0)", 
             optional:false,name:"recordNum", defaultValue:null, type:"number"},
            {description:"the field that was clicked on (field definition)", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"number of the field clicked on in the listGrid.fields                                  array", 
             optional:false,name:"fieldNum", defaultValue:null, type:"number"},
            {description:"value of the cell (after valueMap, etc. applied)", optional:false, 
             name:"value",defaultValue:null, type:"object"},
            {description:"raw value of the cell (before valueMap, etc applied)", optional:false, 
             name:"rawValue",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:Menu.setItemTitle":{
        ref:"method:Menu.setItemTitle",
        flags:"",
        description:"			Sets the title of a particular menu item to the string specified by newTitle and\n          redraws the menu if necessary.\n",
        name:"setItemTitle",
        seeAlso:[],
        params:[
            {description:"pointer to (or number of) the item in question", optional:false, name:"item", 
             defaultValue:null,type:"item | number"},
            {description:"new title", optional:false, name:"newTitle", defaultValue:null, type:"string"}
        ],
        returns:{description:"true if the title was changed, and false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:Menu"
    },
    "attr:ServerObject.attributeScope":{
        ref:"attr:ServerObject.attributeScope",
        flags:"IR",
        description:"Specifies the scope in which the DMI instance is to be looked up.  Valid values are: \n <code>\"request\"</code>, <code>\"session\"</code>, and <code>\"application\"</code>.  If\n <code>attributeScope</code> is left out of the <code>ServerObject</code> definition, then\n all scopes are searched in the order in which they are listed above.\n <p>\n This attribute is consulted only when the value of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is\n <code>\"attribute\"</code>.",
        name:"attributeScope",
        seeAlso:[
            {ref:"attr:ServerObject.attributeName", description:null},
            {ref:"attr:ServerObject.lookupStyle", description:null}
        ],
        valueType:"\"request\"|\"session\"|\"application\"",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "classAttr:RPCRequest.useCursorTracker":{
        ref:"classAttr:RPCRequest.useCursorTracker",
        flags:"IRW",
        description:"If true, an image is shown to the right of the cursor when ${isc.DocUtils.linkForRef('attr:RPCRequest.promptStyle')} is\n set to \"cursor\", otherwise the cursor itself is modified via css to the value of\n ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.  The default is platform-dependent.  In Safari, IE 5.5 and\n Firefox 1.0 the default is true, on all other platforms it is false.  The reason for this\n split is that the above browsers require that the cursor move before CSS settings are\n re-evaluated - this means the progress cursor can stick until the user moves the mouse.\n <p>\n If left unspecified, the default value is set by ${isc.DocUtils.linkForRef('classAttr:RPCManager.useCursorTracker')}.",
        name:"useCursorTracker",
        seeAlso:[
            {ref:"classAttr:RPCManager.useCursorTracker", description:null}
        ],
        valueType:"boolean",
        defaultValue:"platform-dependent",
        type:"classAttr",
        definingClass:"class:RPCRequest",
        groups:["rpcPrompt"]
    },
    "attr:TreeGrid.showDropIcons":{
        ref:"attr:TreeGrid.showDropIcons",
        flags:"IRW",
        description:"If true, when the user drags a droppable target over a folder in this TreeGrid, show \n a different icon folder icon.\n This is achieved by appending the ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} onto the\n ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} URL (for example <code>\"[SKIN]/folder.gif\"</code> may be\n replaced by <code>\"[SKIN]/folder_drop.gif\"</code>).",
        name:"showDropIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "method:Applet.getPluginHandle":{
        ref:"method:Applet.getPluginHandle",
        flags:"A",
        description:" \n  Returns a handle to the applet DOM element (valid only after the component has been drawn).  \n\n",
        name:"getPluginHandle",
        seeAlso:[],
        type:"method",
        definingClass:"class:Applet"
    },
    "attr:Canvas.cursor":{
        flags:"IRWA",
        type:"attr",
        ref:"attr:Canvas.cursor",
        description:"Specifies the cursor image to display when the mouse pointer is\n      over this widget. It corresponds to the CSS cursor attribute. See Cursor type for\n      different cursors.",
        name:"cursor",
        setter:["setCursor"],
        valueType:"Cursor",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}", 
         "${isc.DocUtils.linkForExampleId('cursors')}"],
        defaultValue:"Canvas.DEFAULT",
        groups:["cues"],
        definingClass:"class:Canvas"
    },
    "method:StretchImgButton.getState":{
        ref:"method:StretchImgButton.getState",
        flags:"",
        description:" Return the state of this StatefulCanvas\n",
        name:"getState",
        seeAlso:[],
        returns:{description:null, type:"State"},
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "method:DataSource.fetchData":{
        ref:"method:DataSource.fetchData",
        flags:"",
        description:" Perform a \"fetch\" DataSource operation against this DataSource, sending search criteria\n and retrieving matching records.\n <P>\n In contrast to ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}, which creates a ${isc.DocUtils.linkForRef('class:ResultSet')} to manage\n the returned data, calling <code>dataSource.fetchData()</code> provides the returned\n data in the callback as a simple JavaScript Array of JavaScript Objects.  Calling\n <code>dataSource.fetchData()</code> does not automatically update any visual components or\n caches: code in the callback passed to <code>fetchData()</code> decides what to do with\n the returned data. \n <P>\n For example, given a ListGrid \"myGrid\" and a DataSource \"employees\", the following code\n would populate \"myGrid\" with data fetched from the DataSource:\n <pre>\n    isc.DataSource.get(\"employees\").fetchData(null, \"myGrid.setData(data)\");\n </pre>\n Unlike calling <code>myGrid.fetchData()</code>, which creates a ${isc.DocUtils.linkForRef('class:ResultSet')}, the\n data provided to the grid is \"disconnected\" data, unmanaged by SmartClient's databinding\n facilities and safe to directly modify.  This is useful when, for example, a ListGrid is\n being used as a more sophisticated version of HTML's multi-select component.\n <P>\n Disconnected datasets may be used to populate various visual components.  For example,\n while an individual FormItem can be configured to fetch\n ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} options from a DataSource via the\n ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')} property, the following code shows\n storing a dataset to derive valueMaps from later:\n <pre>\n    isc.DataSource.get(\"countries\").fetchData(null, \"window.countries = data\");\n\n    ... later, a form is created dynamically ...\n\n    function showForm() {\n       isc.DynamicForm.create({\n           items : [\n              { name:\"country\", title:\"Pick Country\",\n                valueMap: window.countries.getValueMap(\"countryId\", \"countryName\")\n              },\n       ...\n </pre>\n <P>\n You can also create a ResultSet from the data retrieved from <code>fetchData()</code>,\n like so:\n <pre>\n    isc.DataSource.get(\"countries\").fetchData(null,\n        function (dsResponse, data) {\n           isc.ResultSet.create({\n              dataSource:\"countries\",\n              allRows:data\n           })\n        }\n    )\n </pre>\n <P>\n This gives you a dataset that supports client-side filtering (via\n ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')}), can provide \n ${isc.DocUtils.linkForRef('method:ResultSet.getValueMap','filtered valueMaps')}, will \n ${isc.DocUtils.linkForRef('attr:ResultSet.disableCacheSync','automatically reflect updates')} to the DataSource made via\n other components, and can be re-used with multiple visual components.\n <P>\n See also the server-side com.isomorphic.js.JSTranslater class in the\n ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for other, similar approaches\n involving dumping data into the page during initial page load.  <b>Note:</b> care should\n be taken when using this approach.  Large datasets degrade the basic performance of some\n browsers, so use ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','optionDataSource')} and similar\n facilities to manage datasets that may become very large.\n <P>\n <b>Data-Driven Visual Component Creation</b>\n <P>\n <code>DataSource.fetchData()</code> can also be used to create SmartClient components in\n a data-driven way.  Many properties on SmartClient visual components are configured via\n an Array of Objects - the same data format that <code>dataSource.fetchData()</code>\n returns.  These include ${isc.DocUtils.linkForRef('attr:ListGrid.fields')}, ${isc.DocUtils.linkForRef('attr:TabSet.tabs')},\n ${isc.DocUtils.linkForRef('attr:DynamicForm.items')}, ${isc.DocUtils.linkForRef('attr:Facet.values')} and even ${isc.DocUtils.linkForRef('attr:DataSource.fields')}.\n <P>\n For example, if you had a DataSource \"myFormFields\" whose fields included the\n basic properties of ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} (name, title, type, etc), this example\n code would create a form based on stored field definitions, loaded from the\n \"myFormFields\" DataSource on the fly:\n <pre>\n    isc.DataSource.get(\"myFormFields\").fetchData(null, \n        \"isc.DynamicForm.create({ items:data })\"\n    )\n </pre>\n This capability to dynamically create visual components from dynamically fetched data\n provides a foundation for creating interfaces that can be customized by end users.\n See also ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.\n\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on                                                       the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest Properties"}
        ],
        type:"method",
        definingClass:"class:DataSource",
        groups:["operations"]
    },
    "classAttr:Log.defaultPriority":{
        ref:"classAttr:Log.defaultPriority",
        flags:"IRWA",
        getter:["getDefaultPriority"],
        description:"Any logs below this priority will be suppressed, unless a more specific setting exists for\n the category.",
        name:"defaultPriority",
        setter:["setDefaultPriority"],
        seeAlso:[
            {ref:"classMethod:Log.setPriority", description:null}
        ],
        valueType:"LogPriority",
        defaultValue:"Log.WARN",
        type:"classAttr",
        definingClass:"class:Log"
    },
    "attr:DateChooser.todayButtonTitle":{
        ref:"attr:DateChooser.todayButtonTitle",
        flags:"IRW",
        description:"Title for \"Today\" button.",
        name:"todayButtonTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Today\"",
        type:"attr",
        definingClass:"class:DateChooser",
        groups:["i18nMessages"]
    },
    "method:ListGrid.cellOut":{
        ref:"method:ListGrid.cellOut",
        flags:"",
        description:" Called when the mouse pointer leaves a cell\n\n",
        name:"cellOut",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:Canvas.skinImgDir":{
        ref:"attr:Canvas.skinImgDir",
        flags:"IRWA",
        description:"Default directory for skin images (those defined by the class), relative to the\n Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"images/\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "attr:CubeGrid.facetValueHoverWidth":{
        ref:"attr:CubeGrid.facetValueHoverWidth",
        flags:"IRWA",
        description:"If specified and <code>this.showHover</code> is true, this is the default width to apply\n to hover tips shown for facetValues. If unset, hover canvas will be sized to \n <code>this.hoverWidth</code> if specified instead.",
        name:"facetValueHoverWidth",
        seeAlso:[
            {ref:"attr:Canvas.hoverWidth", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:TreeGrid.setViewState":{
        ref:"method:TreeGrid.setViewState",
        flags:"",
        description:" Overridden to take a ${isc.DocUtils.linkForRef('type:treeGridViewState')} object.\n\n",
        name:"setViewState",
        seeAlso:[
            {ref:"method:TreeGrid.getViewState", description:null}
        ],
        params:[
            {description:"Object describing the desired view state for the grid", optional:false, 
             name:"viewState",defaultValue:null, type:"treeGridViewState"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "attr:StretchImgButton.src":{
        ref:"attr:StretchImgButton.src",
        flags:"IRW",
        description:"Base URL for the image.  By default, StretchImgButtons consist of three image parts: A\n start image (displayed at the top or left), a scaleable central image and an end image\n displayed at the bottom or right.\n <P>\n The images displayed in the stretchImgButton are derived from this property in the \n following way:\n <P>\n <ul>\n <li> When the button is in its standard state the suffixes \"_start\", \"_end\" and \n      \"_stretch\" are applied to the src (before the file extension), so by default \n      the images displayed will be \"button_start.gif\" (sized to be \n      <code>this.capSize</code> by the specified width of the stretchImgButton), \n      \"button_stretch.gif\" (stretched to the necessary width) and \"button_end.gif\" \n      (sized the same as the start image).\n <li> As the button's state changes, the images will have suffixes appended <b>before</b>\n      the \"_start\" / \"_end\" / \"_stretch\" to represent the button state. Possible states \n      are \"Down\", \"Over\", \"Selected\" \"Focused\" and \"Disabled\". Note that \"Selected\" and\n      \"Focused\" are compound states which may be applied in addition to \"Down\" etc.\n </ul>\n For example the center piece of a selected stretchImgButton with the mouse hovering\n over it might have the URL: <code>\"button_Selected_Down_stretch.gif\"</code>.\n <P>\n Media should be present for each possible state of the _start, _end and _stretch images.",
        name:"src",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"button.gif\"",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "classAttr:Dialog.NO_BUTTON_TITLE":{
        ref:"classAttr:Dialog.NO_BUTTON_TITLE",
        flags:"IRW",
        description:"Title for the <code>\"No\"</code> button.",
        name:"NO_BUTTON_TITLE",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        valueType:"HTML",
        defaultValue:"\"No\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "method:Canvas.animateScroll":{
        ref:"method:Canvas.animateScroll",
        flags:"",
        description:" Animate a scroll from the current scroll position to the specified position.\n",
        name:"animateScroll",
        seeAlso:[],
        params:[
            {description:"desired final left scroll postion", optional:false, name:"scrollLeft", 
             defaultValue:null,type:"number"},
            {description:"desired final top scroll postion", optional:false, name:"scrollTop", 
             defaultValue:null,type:"number"},
            {description:"When the scroll completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated scroll", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration to bias the animation ratios", optional:true, 
             name:"acceleration",defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:Button.autoFit":{
        flags:"IRW",
        type:"attr",
        ref:"attr:Button.autoFit",
        description:"If true, ignore the specified size of this widget and always size just large\n enough to accomodate the title.  If <code>setWidth()</code> is explicitly called on an\n autoFit:true button, autoFit will be reset to <code>false</code>.\n <P>\n Note that for StretchImgButton instances, autoFit will occur horizontally only, as \n unpredictable vertical sizing is likely to distort the media. If you do want vertical \n auto-fit, this can be achieved by simply setting a small height, and having \n overflow:\"visible\"",
        name:"autoFit",
        setter:["setAutoFit"],
        valueType:"boolean",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonAutoFit')}"],
        defaultValue:"null",
        groups:["sizing"],
        definingClass:"class:Button"
    },
    "method:Tree.add":{
        ref:"method:Tree.add",
        flags:"",
        description:"\n Add a single node under the specified parent\n\n",
        name:"add",
        seeAlso:[
            {ref:"group:sharingNodes", description:null},
            {ref:"method:Tree.addList", description:null}
        ],
        params:[
            {description:"node to add", optional:false, name:"node", defaultValue:null, type:"TreeNode"},
            {description:"Parent of the node being added.  You can pass                                          in either the ${isc.DocUtils.linkForRef('object:TreeNode')} itself, or a path to\n	                                        the node (as a String), in which case a\n	                                        ${isc.DocUtils.linkForRef('method:Tree.find')} is performed to find\n	                                        the node.", 
             optional:false,name:"parent", defaultValue:null, type:"String or TreeNode"},
            {description:"Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list.", 
             optional:true,name:"position", defaultValue:null, type:"number"}
        ],
        returns:{description:"The added node.", type:"TreeNode"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:ImgButton.deselect":{
        ref:"method:ImgButton.deselect",
        flags:"",
        description:" Select this object.\n",
        name:"deselect",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:Tab.title":{
        ref:"attr:Tab.title",
        flags:"IRW",
        description:"Specifies the title of the this tab.  To change the title after the TabSet has been\n created, call ${isc.DocUtils.linkForRef('method:TabSet.setTabTitle')}.",
        name:"title",
        seeAlso:[
            {ref:"method:TabSet.setTabTitle", description:null}
        ],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab"
    },
    "attr:MenuItem.keys":{
        ref:"attr:MenuItem.keys",
        flags:"IR",
        description:"Shortcut key(s) to fire the menu item action. Each key can be defined as a ${isc.DocUtils.linkForRef('type:KeyIdentifier')}.\n To apply multiple shortcut keys to this item, set this property to an array of such key\n identifiers.",
        name:"keys",
        seeAlso:[],
        valueType:"KeyIdentifier | Array of KeyIdentifer",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:MenuItem",
        groups:["menuKeys"]
    },
    "group:sorting":{
        ref:"group:sorting",
        refs:["method:List.sortByProperty", "method:ListGridField.sortNormalizer", 
         "method:ListGrid.unsort","method:ListGrid.sort", "method:ResultSet.sortByProperty", "method:Array.sortByProperty", 
         "method:Array.unsort","classMethod:Array.compareAscending", "classMethod:Array.compareDescending", 
         "attr:ListGridField.canSort","attr:ListGridField.sortDirection", "attr:ListGrid.canSort", "attr:ListGrid.sortFieldNum", 
         "attr:ListGrid.sortDirection","attr:ListGrid.showSortArrow", "attr:ListGrid.canPickFields", "type:SortArrow", 
         "type:SortDirection"],
        description:null,
        name:"sorting",
        seeAlso:[],
        type:"group"
    },
    "method:TreeGrid.transferSelectedData":{
        ref:"method:TreeGrid.transferSelectedData",
        flags:"",
        description:" Simulates a drag / drop type transfer of the selected records in some other grid to this\n treeGrid, without requiring any user interaction.<br>\n See the ${isc.DocUtils.linkForRef('group:dragging')} documentation for an overview of grid drag/drop data\n transfer.\n",
        name:"transferSelectedData",
        seeAlso:[],
        params:[
            {description:"source grid from which the records will be tranferred", optional:false, 
             name:"sourceGrid",defaultValue:null, type:"ListGrid"},
            {description:"parent node into which records should be dropped - if null    records will be transferred as children of the root node.", 
             optional:true,name:"folder", defaultValue:null, type:"TreeNode"},
            {description:"target index (drop position) within the parent folder", optional:true, 
             name:"index",defaultValue:null, type:"integer"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragTree')}"],
        definingClass:"class:TreeGrid",
        groups:["dragging"]
    },
    "group:cellStyling":{
        ref:"group:cellStyling",
        refs:["attr:GridRenderer.cellHeight", "attr:GridRenderer.fixedRowHeights", 
         "attr:GridRenderer.wrapCells","attr:GridRenderer.cellPadding", "attr:GridRenderer.baseStyle", 
         "attr:GridRenderer.alternateRowStyles","attr:GridRenderer.alternateRowFrequency", "attr:GridRenderer.emptyCellValue", 
         "attr:ListGrid.emptyCellValue","attr:ListGrid.cellHeight", "attr:ListGrid.fixedRecordHeights", "attr:ListGrid.wrapCells", 
         "attr:ListGrid.cellPadding","attr:ListGrid.baseStyle", "attr:ListGrid.alternateRecordStyles", 
         "attr:ListGrid.alternateRecordFrequency","attr:CubeGrid.baseStyle"],
        name:"cellStyling",
        seeAlso:[],
        type:"group"
    },
    "attr:DataBoundComponent.fetchOperation":{
        ref:"attr:DataBoundComponent.fetchOperation",
        flags:"IRW",
        description:"Operation ID this component should use when performing fetch operations.",
        name:"fetchOperation",
        seeAlso:[
            {ref:"attr:DSRequest.operationId", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["operations"]
    },
    "attr:ListGrid.frozenHeaderTitleStyle":{
        ref:"attr:ListGrid.frozenHeaderTitleStyle",
        flags:"IR",
        description:"If this listGrid contains any frozen fields, this property can be used to apply a custom\n headerTitleStyle to the frozen fields set of fields. If unset, the standard headerTitleStyle\n will be used for both frozen and unfrozen cells.",
        name:"frozenHeaderTitleStyle",
        seeAlso:[
            {ref:"attr:ListGrid.headerTitleStyle", description:null},
            {ref:"attr:ListGridField.frozen", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHead4er", "appearance", "frozenFields"]
    },
    "method:Canvas.getOffsetX":{
        ref:"method:Canvas.getOffsetX",
        flags:"",
        description:"	Return the X-coordinate of the last event relative to the left edge of the content of this\n	Canvas.<br><br>\n\n  NOTE: To get a coordinate relative to the <b>viewport</b> of this Canvas, subtract\n  this.getScrollLeft()\n\n",
        name:"getOffsetX",
        seeAlso:[],
        returns:{description:null, type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["events", "positioning"]
    },
    "method:ListGrid.hideField":{
        ref:"method:ListGrid.hideField",
        flags:"",
        description:" Force a field to be hidden.<br><br>\n\n NOTE: If a field.showIf expression exists, it will be destroyed.\n \n",
        name:"hideField",
        seeAlso:[],
        params:[
            {description:"field to hide", optional:false, name:"field", defaultValue:null, 
             type:"field name or ListGridField"},
            {description:"if passed, don't relayout non-explicit sized fields                                       to fit the available space", 
             optional:true,name:"suppressRelayout", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('columnOrder')}"],
        definingClass:"class:ListGrid"
    },
    "attr:Canvas.animateMoveAcceleration":{
        ref:"attr:Canvas.animateMoveAcceleration",
        flags:"IRWA",
        description:"Default acceleration effect for performing an animated move.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateMoveAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:Canvas.getOffsetY":{
        ref:"method:Canvas.getOffsetY",
        flags:"",
        description:"	Return the Y-coordinate of the last event, relative to the top edge of the content of this\n	Canvas.<br><br>\n\n  NOTE: To get a coordinate relative to the <b>viewport</b> of this Canvas, subtract\n  this.getScrollTop()\n\n",
        name:"getOffsetY",
        seeAlso:[],
        returns:{description:null, type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["events", "positioning"]
    },
    "method:CubeGrid.resizeFacetValue":{
        ref:"method:CubeGrid.resizeFacetValue",
        flags:"",
        description:" Resizes all columns for the provided facetValueId, which must be a facetValueId from the\n innermost column facet.\n\n",
        name:"resizeFacetValue",
        seeAlso:[],
        params:[
            {description:"facetValueId of columns to be resized", optional:false, name:"facetValueId", 
             defaultValue:null,type:"id"},
            {description:"column's new width", optional:false, name:"newWidth", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "group:orientation":{
        ref:"group:orientation",
        refs:["type:Orientation"],
        name:"orientation",
        seeAlso:[],
        type:"group"
    },
    "attr:CubeGrid.facetValueAlign":{
        ref:"attr:CubeGrid.facetValueAlign",
        flags:"IRW",
        description:"default alignment for facet values (in headers)",
        name:"facetValueAlign",
        seeAlso:[],
        valueType:"alignEnum",
        defaultValue:"\"center\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:CheckboxItem.valueMap":{
        ref:"attr:CheckboxItem.valueMap",
        flags:"IRW",
        description:"Object defining how the checkbox \"checked\" state will be mapped to the field value.<br>\n Checkboxes only support 2 states. By default a checked checkbox will have\n value <code>true</code>, and an unchecked one will have value <code>false</code>\n (or <code>null</code> if there is no default value and the value has never been set).\n <p>\n A valueMap can modify this in 2 ways:<br>\n - If the desired checked/unchecked values can be resolved to <code>true</code> \n   and <code>false</code> directly in JavaScript, the valueMap may be specified as\n   a 2-element array containing these values. Examples of this woud include<br>\n   <code>&nbsp;&nbsp;[0,1]</code>: \n   In this case an unchecked checkbox would have value <code>0</code> and a checked box\n   would have value <code>1</code><br>\n   <code>&nbsp;&nbsp;[null,\"Some String\"]</code>:\n   In this case an unchecked checkbox would have value <code>null</code> and a checked \n    box would have value <code>\"Some String\"</code><br>\n - More arbitrary data values can be resolved to checked / unchecked values via an\n   object mapping the abitrary data values to display values of <code>true</code> and\n   <code>false</code>. For example:<br>\n   <code>&nbsp;&nbsp;{\"A\":false, \"B\":true}</code><br>\n    In this case an unchecked checkbox would have value \"A\", and a checked box \n    would have value \"B\"\n <p>\n Note: ValueMaps in other formats will be ignored by the CheckboxItem class. To update\n the valueMap at runtime, always use ${isc.DocUtils.linkForRef('method:CheckboxItem.setValueMap')}",
        name:"valueMap",
        setter:["setValueMap"],
        seeAlso:[],
        valueType:"object | Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["valueMap"]
    },
    "group:containment":{
        ref:"group:containment",
        refs:["method:Canvas.addChild", "method:Canvas.removePeer", "method:Canvas.removeChild", 
         "method:Canvas.addPeer","method:Canvas.getParentElements", "method:Canvas.contains", "attr:Canvas.parentElement", 
         "attr:Canvas.topElement","attr:Canvas.masterElement", "attr:Canvas.children", "attr:Canvas.peers"],
        description:"Canvases containing other objects as children or peers",
        name:"containment",
        seeAlso:[],
        type:"group"
    },
    "group:creation":{
        ref:"group:creation",
        refs:[],
        name:"creation",
        seeAlso:[],
        type:"group"
    },
    "method:DynamicForm.editNewRecord":{
        ref:"method:DynamicForm.editNewRecord",
        flags:"",
        description:"\n Prepare to edit a new record by clearing the current set of values (or replacing them \n with initialValues if specified).\n <br>\n Subsequent calls to <code>saveData()</code> will use an <code>add</code> rather than\n an <code>update</code> operation.\n\n",
        name:"editNewRecord",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"initial set of values for the editor as a map of field names to their corresponding\n     values", 
             optional:true,name:"initialValues", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "classMethod:Page.getScrollLeft":{
        ref:"classMethod:Page.getScrollLeft",
        flags:"",
        description:"		Get the amount that the browser window has been scrolled horizontally.\n",
        name:"getScrollLeft",
        seeAlso:[],
        returns:{description:"horizontal scroll amount", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "class:SectionItem":{
        exampleConfig:"SectionItem.xml",
        methods:["method:SectionItem.expandSection", "method:SectionItem.collapseSection"],
        type:"class",
        ref:"class:SectionItem",
        classAttrs:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        classMethods:[],
        description:"Header item for a collapsable section in a ${isc.DocUtils.linkForRef('class:DynamicForm')}.  Each <code>SectionItem</code>\n is associated with a number of other <code>item</code>s in the form, which will be shown or\n hidden as a group when the section is expanded or collapsed.  Clicking on a\n <code>SectionItem</code> will expand or collapse the section.\n <P>\n To make a form where only one section is expanded at a time, set\n ${isc.DocUtils.linkForRef('attr:DynamicForm.sectionVisibilityMode')} to \"mutex\".",
        attrs:["attr:SectionItem.defaultValue", "attr:SectionItem.itemIds", 
         "attr:SectionItem.sectionVisible","attr:SectionItem.sectionExpanded", "attr:SectionItem.sectionHeaderClass", 
         "attr:SectionItem.canCollapse"],
        name:"SectionItem",
        seeAlso:[
            {ref:"attr:DynamicForm.sectionVisibilityMode", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('formSections')}"]
    },
    "method:Layout.reflow":{
        ref:"method:Layout.reflow",
        flags:"A",
        description:" Layout members according to current settings.\n <P>\n Members will reflow automatically when the layout is resized, members resize, the list of\n members changes or members change visibility.  It is only necessary to manually call\n <code>reflow()</code> after changing settings on the layout, for example,\n <code>layout.reverseOrder</code>.\n\n",
        name:"reflow",
        seeAlso:[],
        params:[
            {description:"reason reflow() had to be called (appear in logs if enabled)", 
             optional:true,name:"reason", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "class:RPCManager":{
        methods:[],
        ref:"class:RPCManager",
        classAttrs:["classAttr:RPCManager.defaultTimeout", "classAttr:RPCManager.defaultPrompt", 
         "classAttr:RPCManager.timeoutErrorMessage","classAttr:RPCManager.removeDataPrompt", "classAttr:RPCManager.saveDataPrompt", 
         "classAttr:RPCManager.promptStyle","classAttr:RPCManager.useCursorTracker", "classAttr:RPCManager.promptCursor", 
         "classAttr:RPCManager.fetchDataPrompt","classAttr:RPCManager.showPrompt", "classAttr:RPCManager.actionURL", 
         "classAttr:RPCManager.useXmlHttpRequest","classAttr:RPCManager.defaultTransport", "classAttr:RPCManager.credentialsURL"],
        classMethods:["classMethod:RPCManager.xmlHttpRequestAvailable", "classMethod:RPCManager.send", 
         "classMethod:RPCManager.sendProxied","classMethod:RPCManager.sendRequest", "classMethod:RPCManager.startQueue", 
         "classMethod:RPCManager.cancelQueue","classMethod:RPCManager.clearTransaction", "classMethod:RPCManager.resendTransaction", 
         "classMethod:RPCManager.sendQueue","classMethod:RPCManager.handleError", "classMethod:RPCManager.loginRequired"],
        treeLocation:["Client Reference/RPC"],
        attrs:[],
        description:"RPCManager is a static singleton class that manages transparent client/server RPC (remote\n procedure call).  This class provides a generic, low-level client/server communication\n integration point.  You can use it to send arbitrary data to a URL of your choosing on the\n server and optionally be called back with server-returned data when the server replies.  \n You can process the RPC request in a JSP, Servlet or Filter on the server.\n <P>\n SmartClient's powerful ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')} automatically issue\n RPCs as necessary, based on the \n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')}.  To integrate DataBoundComponents\n with your server, ${isc.DocUtils.linkForRef('group:clientServerIntegration','start here')}.\n <P>\n <u>Simple example (client code):</u>\n <P><code>\n var data = { here: \"is some data\", to: [\"send to the server\"]};<br>\n RPCManager.sendRequest({ data: data, callback: \"myCallback(data)\", actionURL: \"/rpcHandler.jsp\"});<br>\n function myCallback(data) { alert(\"response from the server: \" + data); }\n </code><br><br>\n <u>Simple example (server code: /rpcHandler.jsp):</u>\n <br><br><code>\n RPCManager rpc = new RPCManager(request, response, out);<br>\n Object data = rpc.getData();<br>\n System.out.println(\"client sent: \" + data.toString());<br>\n rpc.send(\"here's a response\");<br>\n </code>\n <P>\n Note that, while the example above uses the SmartClient Java Server, the RPCManager is also\n capable of issuing RPCs that do not require a SmartClient server.  See\n ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-Side Data Integration')} for details.\n <P>\n <u><b>Queuing</b></u>\n <br>\n Because of browser limitations on the total number of simultaneous HTTP connections to a given\n server, batching multiple RPC requests into a single HTTP request is highly advisable whenever\n possible.  The RPCManager provides a queuing mechanism that allows this.\n <br><br>\n <u>Queuing example (client code):</u>\n <br><br><code>\n RPCManager.startQueue();<br>\n RPCManager.send(\"a string of data\", \"myCallback(data)\", {actionURL: \"/rpcHandler.jsp\"});<br>\n RPCManager.sendRequest({ data: [\"some\", \"more data\", 2], callback: \"myCallback(data)\", actionURL: \"/rpcHandler.jsp\"});<br>\n RPCManager.sendRequest({ data: \"different callback\", callback: \"myCallback2(data)\", actionURL: \"/rpcHandler.jsp\"});<br>\n RPCManager.sendQueue()<br>\n function myCallback(data) { alert(\"response from the server: \" + data); }<br>\n function myCallback2(data) { alert(\"response from the server (other callback): \" + data); }\n </code><br><br>\n <u>Queuing example (server code: /rpcHandler.jsp):</u>\n <br><br><code>\n RPCManager rpc = new RPCManager(request, response, out);<br>\n for(Iterator i = rpc.getRequests().iterator(); i.hasNext();) {<br>\n &nbsp;&nbsp;&nbsp;&nbsp;RPCRequest rpcRequest = (RPCRequest)i.next();<br>\n &nbsp;&nbsp;&nbsp;&nbsp;Object data = rpcRequest.getData();<br>\n &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"client sent:\" + data.toString());<br>\n &nbsp;&nbsp;&nbsp;&nbsp;//send back the data sent to us by the client<br>\n &nbsp;&nbsp;&nbsp;&nbsp;rpc.send(rpcRequest, new RPCResponse(data));<br>\n }<br>\n </code>\n <br><br>\n <u><b>Error Handling</b></u>\n <br>\n The ${isc.DocUtils.linkForRef('class:RPCResponse')} object has an integer status field that the RPCManager inspects when\n the response is received from the server. If the value of this field is less than zero, the\n request is considered to have failed.  Otherwise it is considered to have succeeded.  This\n value is settable via the setStatus() method call on the RPCResponse server-side object.\n <br><br>\n If the status field shows a failure, the RPCManager will, by default, show a dialog with the\n contents of the ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} field (which is assumed to contain a \n meaningful description of the error that occured).  If you specified a callback in your\n RPCRequest, it will <b>not</b> be called if the status shows a failure (see below for how to\n change this).\n <br><br>\n If the status field shows success, the RPCManager takes no special action.\n <br><br>\n The built-in status codes and default behavior are there for convenience.  You can choose to\n completely ignore it and handle errors as you see fit (for example by encoding them into the data\n field returned by the server, and always setting the RPCResponse status field to a success\n value).  In fact, the status field is automatically set to a success code\n (RPCResponse.STATUS_SUCCESS) by the constructor of the RPCResponse object on the server. \n <br><br>\n If you choose to use the status field, but want to handle the errors yourself in your callback\n (and suppress the default error dialog popped up by the RPCManager), simply specify the\n ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError','willHandleError:true')} on your RPCRequest object.  This\n allows you to use the RPCManager.sendError() convenience methods on the server without the\n default error handling behavior on the client.",
        name:"RPCManager",
        seeAlso:[],
        type:"class"
    },
    "method:TabSet.closeClick":{
        ref:"method:TabSet.closeClick",
        flags:"",
        description:" Method fired when the user clicks the \"close\" icon for a tab.<br>\n This icon will be visible if ${isc.DocUtils.linkForRef('attr:Tab.canClose')} is true for the tab in question.<br>\n Default implementation will remove the tab from the tabSet.\n",
        name:"closeClick",
        seeAlso:[],
        params:[
            {description:"tab to close", optional:false, name:"tab", defaultValue:null, type:"Tab"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:DataSourceField.getFieldValue":{
        ref:"method:DataSourceField.getFieldValue",
        flags:"A",
        description:" Function or JavaScript expression used to retrieve the field's value from the XML element or\n JSON record returned from a web service.\n <P>\n This is an advanced API for use when a ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','valueXPath')} setting\n is insufficient to derive a field's value, yet an implementation of\n ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} is overkill.\n\n",
        name:"getFieldValue",
        seeAlso:[],
        params:[
            {description:"record object selected from web service response data                                      by ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}", 
             optional:false,name:"record", defaultValue:null, type:"Object or XMLElement"},
            {description:"default value derived by the method described in                    ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')}", 
             optional:false,name:"value", defaultValue:null, type:"any"},
            {description:"DataSourceField definition", optional:false, name:"field", defaultValue:null, 
             type:"DataSourceField"},
            {description:"name of the DataSource field", optional:false, name:"fieldName", 
             defaultValue:null,type:"String"}
        ],
        type:"method",
        definingClass:"class:DataSourceField",
        groups:["clientDataIntegration"]
    },
    "method:ListGrid.rowEditorEnter":{
        ref:"method:ListGrid.rowEditorEnter",
        flags:"A",
        description:" Callback fired when the user starts editing a new row.\n\n",
        name:"rowEditorEnter",
        seeAlso:[
            {ref:"method:ListGrid.editorEnter", description:null}
        ],
        params:[
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"ListGridField"},
            {description:"edit values for the current row", optional:false, name:"editValues", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:DynamicForm.cancel":{
        ref:"method:DynamicForm.cancel",
        flags:"",
        description:"\n This method exists for clean integration with existing server frameworks that have a 'cancel'\n feature which typically clears session state associated with the form.  When this method is\n called, an RPC is sent to the server with a parameter named\n ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamName')} with the value\n ${isc.DocUtils.linkForRef('attr:DynamicForm.cancelParamValue')}.<p>\n\n Note that no other form data is sent.  By default the current top-level page is replaced with the\n reply.  If you wish to ignore the server reply instead, call this method like this:\n <pre>\n dynamicFormInstance.cancel({ignoreTimeout: true, target: null});\n </pre>\n\n",
        name:"cancel",
        seeAlso:[],
        params:[
            {description:"additional properties to set on the RPCRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "attr:Layout.stackZIndex":{
        ref:"attr:Layout.stackZIndex",
        flags:"IR",
        description:"For use in conjunction with ${isc.DocUtils.linkForRef('attr:Layout.memberOverlap')}, controls the z-stacking order of\n members.\n <P>\n If \"lastOnTop\", members stack from the first member at bottom to the last member at\n top. If \"firstOnTop\", members stack from the last member at bottom to the first member\n at top.",
        name:"stackZIndex",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout"
    },
    "method:Canvas.mouseUp":{
        ref:"method:Canvas.mouseUp",
        flags:"A",
        description:"\n Executed when the left mouse is released on this widget.  No default implementation.\n\n",
        name:"mouseUp",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customMouseEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:WebService.getOutputHeaderSchema":{
        ref:"method:WebService.getOutputHeaderSchema",
        flags:"",
        description:" Get the schema for each part of the SOAP header for the output message of a given\n operation, as a mapping from part name to schema.  For example, given WSDL like:\n <pre>\n     &lt;soap:header part=\"SessionHeader\"/&gt;\n     &lt;soap:header part=\"CallOptions\"/&gt;\n </pre>\n The following schema would be returned:\n <pre>\n     { SessionHeader : <i>sessionHeaderPartSchema</i>,\n       CallOptions : <i>callOptionsPartSchema</i> }\n </pre>\n The schema are instances of ${isc.DocUtils.linkForRef('class:DataSource')} that can be inspected to discover the\n elements and types that are legal in that header part, and can construct a valid SOAP\n header part if ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} is invoked.\n\n",
        name:"getOutputHeaderSchema",
        seeAlso:[],
        params:[
            {description:"name of an operation from this web service", optional:false, 
             name:"operationName",defaultValue:null, type:"String"}
        ],
        returns:{description:"mapping from partName to schema", type:"Object"},
        type:"method",
        definingClass:"class:WebService"
    },
    "attr:StretchImgButton.showRollOver":{
        ref:"attr:StretchImgButton.showRollOver",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes over this object?",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "attr:ListGrid.booleanImageWidth":{
        ref:"attr:ListGrid.booleanImageWidth",
        flags:"IRWA",
        description:"Width for the ${isc.DocUtils.linkForRef('attr:ListGrid.booleanTrueImage')} and ${isc.DocUtils.linkForRef('attr:ListGrid.booleanFalseImage')}",
        name:"booleanImageWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "class:HiddenItem":{
        methods:[],
        ref:"class:HiddenItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:HiddenItem.showTitle", "attr:HiddenItem.colSpan", "attr:HiddenItem.rowSpan"],
        description:"HiddenItems track a value but have no visible appearance and do not take up space in the form\n layout.\n <P>\n When using SmartClient databinding it is usually not necessary to use a HiddenItem, since\n the DynamicForm will track values for which no actual form control exists, and will submit\n these 'extra' values when ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} is called.  HiddenItems only apply\n to forms that are submitted like ordinary HTML forms, via the\n ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')} method.",
        name:"HiddenItem",
        seeAlso:[],
        type:"class"
    },
    "object:FormItemIcon":{
        methods:["method:FormItemIcon.click", "method:FormItemIcon.keyPress"],
        type:"object",
        ref:"object:FormItemIcon",
        classAttrs:[],
        treeLocation:["Client Reference/Forms/Form Items/FormItem"],
        classMethods:[],
        description:"Form item icon descriptor objects used by Form Items to specify the appearance and\n  behavior of icons displayed after the item in the page flow.",
        attrs:["attr:FormItemIcon.src", "attr:FormItemIcon.showOver", "attr:FormItemIcon.showFocused", 
         "attr:FormItemIcon.showFocusedWithIcon","attr:FormItemIcon.neverDisable", "attr:FormItemIcon.width", "attr:FormItemIcon.height"],
        name:"FormItemIcon",
        seeAlso:[
            {ref:"attr:FormItem.icons", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('formIcons')}"],
        groups:["formIcons"]
    },
    "attr:ListGridField.editorValueMap":{
        ref:"attr:ListGridField.editorValueMap",
        flags:"IRW",
        description:"A valueMap to use for editors shown for this field.  By default if this is not\n specified ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','field.valueMap')} will be used instead.\n <P>\n Dynamic valueMaps can be provided by implementing ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap')}.",
        name:"editorValueMap",
        seeAlso:[
            {ref:"method:ListGrid.getEditorValueMap", description:null},
            {ref:"method:ListGrid.setEditorValueMap", description:null}
        ],
        valueType:"Array or Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:Canvas.defaultWidth":{
        ref:"attr:Canvas.defaultWidth",
        flags:"IRWA",
        description:"For custom components, establishes a default width for the component.\n <P>\n For a component that should potentially be sized automatically by a Layout, set this\n property rather than ${isc.DocUtils.linkForRef('attr:Canvas.width')} directly, because Layouts regard a width setting as\n an explicit size that shouldn't be changed.",
        name:"defaultWidth",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Canvas.layoutChildren":{
        ref:"method:Canvas.layoutChildren",
        flags:"A",
        description:"\n layoutChildren() is where a Canvas should implement a sizing policy for it's Canvas children.\n Since this calls parentResized() on its children, ${isc.DocUtils.linkForRef('method:Canvas.parentResized')} is a good place\n for a child to implement a layout policy that can be used within any parent.\n <P>\n Recommended practice for a Canvas that manages Canvas children is to create those children\n without any initial coordinate or size settings and do all sizing when layoutChildren() is\n called.\n <P>\n layoutChildren() is always called at least once before children are drawn, and is called\n automatically whenever the viewport size changes (which includes both resizing and\n introduction/removal of scrolling).  layoutChildren() can also be manually invoked in any\n other component-specific situation which changes the layout.\n <P>\n NOTE: layoutChildren() may be called before draw() if a widget is resized before draw(), so\n be sure to avoid errors such as assuming that any children you automatically create have\n already been created.\n <P>\n NOTE: auto-sizing: layoutChildren() is also called once during the initial draw(), before\n children are drawn, with a \"reason\" of \"initial draw\".  During this invocation of\n layoutChildren() it is legal to directly draw children (call child.draw()), which is\n otherwise never allowed.  This allows a Canvas to implement an auto-sizing layout policy by\n drawing some children before deciding on the sizes of remaining children, which is far more\n efficient than drawing all children and resizing some of them after they are drawn.\n",
        name:"layoutChildren",
        seeAlso:[],
        params:[
            {description:"reason why layoutChildren() is being called, passed when framework                        code invokes layoutChildren()", 
             optional:false,name:"reason", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:CubeGrid.deselectFacetValues":{
        ref:"method:CubeGrid.deselectFacetValues",
        flags:"",
        description:"\n deselect the header showing a given set of facet values\n\n  <br><i>methodType</i> action\n",
        name:"deselectFacetValues",
        seeAlso:[],
        params:[
            {description:"facetVales to deselect", optional:false, name:"facetValues", 
             defaultValue:null,type:"facetValues object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "group:scrolling":{
        ref:"group:scrolling",
        refs:["method:Canvas.getScrollLeft", "method:Canvas.getScrollTop", 
         "method:Canvas.getScrollbarSize","method:Canvas.getScrollBottom", "method:Canvas.getScrollRight", 
         "method:Canvas.scrollToTop","method:Canvas.scrollToBottom", "method:Canvas.scrollToLeft", 
         "method:Canvas.scrollToRight","method:Canvas.scrollBy", "method:Canvas.scrollByPercent", "method:Canvas.scrollTo", 
         "method:Canvas.scrolled","method:Canvas.scrollToPercent", "attr:Canvas.showCustomScrollbars", 
         "attr:Canvas.scrollbarSize"],
        description:"Scrolling and clipping of objects when part of the object is obscured",
        name:"scrolling",
        seeAlso:[],
        type:"group"
    },
    "method:Selection.selectList":{
        ref:"method:Selection.selectList",
        flags:"",
        description:" Select an array of items (subset of the entire list)\n",
        name:"selectList",
        seeAlso:[],
        params:[
            {description:"listarray of objects to select", optional:true, name:"", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:DynamicForm.titleHoverHTML":{
        ref:"method:DynamicForm.titleHoverHTML",
        flags:"A",
        description:"  Retrieves the HTML to display in a hover canvas when the user holds the mousepointer over\n  some item's title.  Return null to suppress the hover canvas altogether.<br>\n  Default implementation returns the prompt for the item if defined.  If no prompt is defined\n  and the item title is clipped, the item title will be shown in a hover by default.<br>\n  Can be overridden via <code>item.titleHoverHTML()</code>\n\n",
        name:"titleHoverHTML",
        seeAlso:[
            {ref:"attr:FormItem.prompt", description:null},
            {ref:"method:FormItem.titleHoverHTML", description:null}
        ],
        params:[
            {description:"Item the user is hovering over.", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "attr:StretchImgButton.showDown":{
        ref:"attr:StretchImgButton.showDown",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes down in this object?",
        name:"showDown",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "method:FormItem.getIconWidth":{
        ref:"method:FormItem.getIconWidth",
        flags:"A",
        description:"	Takes an icon definition object, and returns the width for that icon in px.\n",
        name:"getIconWidth",
        seeAlso:[],
        params:[
            {description:"icon definition object for this item.", optional:false, name:"icon", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"width of the form item icon in px", type:"number"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["sizing"]
    },
    "classMethod:Log.getLogPriorities":{
        ref:"classMethod:Log.getLogPriorities",
        flags:"",
        description:" Get all priority settings as an object mapping category names to priority levels.\n\n",
        name:"getLogPriorities",
        seeAlso:[],
        params:[
            {description:"Optional param to get priorities specific to                                            some ISC class or instance.", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"},
            {description:"If this method is retrieving the priorities specific                                   to logging for some class or instance, this parameter\n                                  can be used to view only the overrides to the default\n                                  log priorites on this object.", 
             optional:true,name:"overridesOnly", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"priority settings", type:"Object"},
        type:"classMethod",
        definingClass:"class:Log"
    },
    "method:StatefulCanvas.setBaseStyle":{
        ref:"method:StatefulCanvas.setBaseStyle",
        flags:"",
        description:" Sets the base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n",
        name:"setBaseStyle",
        seeAlso:[],
        params:[
            {description:"new base style", optional:false, name:"style", defaultValue:null, 
             type:"className"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas"
    },
    "method:CubeGrid.selectCell":{
        ref:"method:CubeGrid.selectCell",
        flags:"",
        description:"\n  select / deselect a single cell - accepts cell ID or cell record.\n\n      <br><i>methodType</i> action\n",
        name:"selectCell",
        seeAlso:[],
        params:[
            {description:"cell to select / deselect", optional:false, name:"cell", defaultValue:null, 
             type:"ID | object"},
            {description:"new selection state (if null, defaults to true)", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "group:skins":{
        ref:"group:skins",
        refs:["classMethod:Page.setSkinDir", "classMethod:Page.loadStyleSheet"],
        description:"Properties used to manage to the the overall appearance of the application.\n <P>\n A \"skin\" consists of \n <ul>\n <li><code>skin_styles.css</code>: a .css file defining the set of \n     classes to apply to SmartClient components' visual elements</li>\n <li><code>images/</code>: a directory of image files used as part of visual \n     components</li>\n <li><code>load_skin.js</code>: a .js file containing overrides for various \n     SmartClient component properties that affect the appearance of those components.</li>\n </ul>\n Skins are loaded via the <code>skin</code> attribute of the ${isc.DocUtils.linkForRef('group:loadISCTag')} or \n by including the appropriate <code>load_skin.js</code> source file with a standard script\n include tag.\n <P>\n To create a custom skin, we suggest making a complete copy of an existing skin, then\n modifying the media, css class definitions and component property overrides you wish to\n change.\n <P>\n Note that the <code>load_skin.js</code> file contains a ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} \n directive to set up the skin dir (used to ensure media is retrieved from the appropriate\n directory), and a ${isc.DocUtils.linkForRef('classMethod:Page.loadStyleSheet')} directive to load the .css file.\n <P>\n See the ${isc.DocUtils.linkForRef('group:skinning','Skinning Overview')} for more information.",
        name:"skins",
        seeAlso:[
            {ref:"group:appearance", description:null},
            {ref:"group:images", description:null},
            {ref:"group:files", description:null}
        ],
        type:"group"
    },
    "class:ListGrid":{
        exampleConfig:"ListGrid.xml",
        methods:["method:ListGrid.getVisibleRows", "method:ListGrid.getDrawnRows", 
         "method:ListGrid.getCellStyle","method:ListGrid.getCellCSSText", "method:ListGrid.refreshCellStyle", 
         "method:ListGrid.cellOver","method:ListGrid.rowOver", "method:ListGrid.cellOut", "method:ListGrid.rowOut", 
         "method:ListGrid.cellHover","method:ListGrid.rowHover", "method:ListGrid.cellHoverHTML", 
         "method:ListGrid.cellContextClick","method:ListGrid.rowContextClick", "method:ListGrid.cellMouseDown", 
         "method:ListGrid.rowMouseDown","method:ListGrid.cellMouseUp", "method:ListGrid.rowMouseUp", "method:ListGrid.cellClick", 
         "method:ListGrid.cellDoubleClick","method:ListGrid.setData", "method:ListGrid.setBodyOverflow", 
         "method:ListGrid.setFieldProperties","method:ListGrid.showField", "method:ListGrid.hideField", "method:ListGrid.fieldIsVisible", 
         "method:ListGrid.getTitleField","method:ListGrid.setFields", "method:ListGrid.focusInFilterEditor", 
         "method:ListGrid.filterByEditor","method:ListGrid.getFieldState", "method:ListGrid.setFieldState", 
         "method:ListGrid.getSelectedState","method:ListGrid.setSelectedState", "method:ListGrid.getSortState", 
         "method:ListGrid.setSortState","method:ListGrid.getViewState", "method:ListGrid.setViewState", 
         "method:ListGrid.refreshFields","method:ListGrid.getFieldWidth", "method:ListGrid.getBaseStyle", 
         "method:ListGrid.getCellValue","method:ListGrid.getCellAlign", "method:ListGrid.getCellVAlign", 
         "method:ListGrid.getValueIcon","method:ListGrid.rowClick", "method:ListGrid.rowDoubleClick", 
         "method:ListGrid.selectRecord","method:ListGrid.deselectRecord", "method:ListGrid.selectRecords", 
         "method:ListGrid.deselectRecords","method:ListGrid.selectAllRecords", "method:ListGrid.deselectAllRecords", 
         "method:ListGrid.bodyKeyPress","method:ListGrid.getFocusRow", "method:ListGrid.recordClick", 
         "method:ListGrid.recordDoubleClick","method:ListGrid.setShowFilterEditor", "method:ListGrid.getFilterEditorValueMap", 
         "method:ListGrid.getFilterEditorType","method:ListGrid.canEditCell", "method:ListGrid.startEditing", "method:ListGrid.stopHover", 
         "method:ListGrid.getEditorValueMap","method:ListGrid.getEditorValueIcons", "method:ListGrid.setEditorValueMap", 
         "method:ListGrid.getEditorType","method:ListGrid.refreshCell", "method:ListGrid.refreshRow", 
         "method:ListGrid.startEditingNew","method:ListGrid.getAllEditRows", "method:ListGrid.getEditValues", 
         "method:ListGrid.getEditedRecord","method:ListGrid.getEditedCell", "method:ListGrid.setEditValues", 
         "method:ListGrid.setEditValue","method:ListGrid.getEditValue", "method:ListGrid.clearEditValue", 
         "method:ListGrid.getEditRow","method:ListGrid.getEditCol", "method:ListGrid.getEditField", 
         "method:ListGrid.cancelEditing","method:ListGrid.endEditing", "method:ListGrid.discardAllEdits", 
         "method:ListGrid.discardEdits","method:ListGrid.saveEdits", "method:ListGrid.hasChanges", 
         "method:ListGrid.cellHasChanges","method:ListGrid.saveAllEdits", "method:ListGrid.validateRow", 
         "method:ListGrid.validateCell","method:ListGrid.getRequiredFieldMessage", "method:ListGrid.hasErrors", 
         "method:ListGrid.rowHasErrors","method:ListGrid.cellHasErrors", "method:ListGrid.getRowErrors", 
         "method:ListGrid.getCellErrors","method:ListGrid.setFieldError", "method:ListGrid.setRowErrors", 
         "method:ListGrid.clearFieldError","method:ListGrid.clearRowErrors", "method:ListGrid.setDragTracker", 
         "method:ListGrid.getDragTrackerIcon","method:ListGrid.getDragTrackerTitle", "method:ListGrid.willAcceptDrop", 
         "method:ListGrid.transferSelectedData","method:ListGrid.recordDrop", "method:ListGrid.getDragData", 
         "method:ListGrid.transferDragData","method:ListGrid.getRecord", "method:ListGrid.getCellRecord", 
         "method:ListGrid.getTotalRows","method:ListGrid.getFieldName", "method:ListGrid.getField", "method:ListGrid.getFieldNum", 
         "method:ListGrid.setValueMap","method:ListGrid.getRecordIndex", "method:ListGrid.getEventRow", 
         "method:ListGrid.getEventColumn","method:ListGrid.anySelected", "method:ListGrid.selectionChanged", 
         "method:ListGrid.freezeField","method:ListGrid.unfreezeField", "method:ListGrid.setHeaderHeight", 
         "method:ListGrid.setShowHeader","method:ListGrid.reorderField", "method:ListGrid.reorderFields", 
         "method:ListGrid.resizeField","method:ListGrid.displayHeaderContextMenu", "method:ListGrid.getToggleFreezeText", 
         "method:ListGrid.getGroupByText","method:ListGrid.getHeaderContextMenuItems", "method:ListGrid.unsort", 
         "method:ListGrid.sort","method:ListGrid.chartData", "method:ListGrid.chartRow", "method:ListGrid.chartColumn", 
         "method:ListGrid.groupBy","method:ListGrid.getGroupNodeHTML", "method:ListGrid.ungroup", 
         "method:ListGrid.cellChanged","method:ListGrid.editComplete", "method:ListGrid.editFailed", 
         "method:ListGrid.editorEnter","method:ListGrid.rowEditorEnter", "method:ListGrid.editorExit", 
         "method:ListGrid.rowEditorExit","method:ListGrid.formatCellValue", "method:ListGrid.formatEditorValue", 
         "method:ListGrid.parseEditorValue","method:ListGrid.fieldStateChanged", "method:ListGrid.fetchData", 
         "method:ListGrid.filterData","method:ListGrid.fetchRelatedData", "method:ListGrid.clearCriteria", 
         "method:ListGrid.addData","method:ListGrid.updateData", "method:ListGrid.removeData", 
         "method:ListGrid.removeSelectedData","method:ListGrid.getSelection", "method:ListGrid.getSelectedRecord"],
        type:"class",
        ref:"class:ListGrid",
        classAttrs:[],
        treeLocation:["Client Reference/Grids"],
        classMethods:[],
        description:"A ListGrid displays a list of Objects in a grid, where each row represents one object and\n each cell in the row represents one property.",
        attrs:["attr:ListGrid.fastCellUpdates", "attr:ListGrid.styleName", "attr:ListGrid.data", 
         "attr:ListGrid.fields","attr:ListGrid.dataSource", "attr:ListGrid.useAllDataSourceFields", 
         "attr:ListGrid.showDetailFields","attr:ListGrid.titleField", "attr:ListGrid.dataProperties", "attr:ListGrid.originalData", 
         "attr:ListGrid.groupTree","attr:ListGrid.groupStartOpen", "attr:ListGrid.groupNodeStyle", "attr:ListGrid.groupIcon", 
         "attr:ListGrid.groupIconSize","attr:ListGrid.groupIndentSize", "attr:ListGrid.groupLeadingIndent", 
         "attr:ListGrid.canGroupBy","attr:ListGrid.groupByMaxRecords", "attr:ListGrid.isGrouped", 
         "attr:ListGrid.nullGroupTitle","attr:ListGrid.groupByField", "attr:ListGrid.valueIconSize", 
         "attr:ListGrid.valueIconWidth","attr:ListGrid.valueIconHeight", "attr:ListGrid.valueIconLeftPadding", 
         "attr:ListGrid.valueIconRightPadding","attr:ListGrid.imageSize", "attr:ListGrid.modalEditing", "attr:ListGrid.showAllRecords", 
         "attr:ListGrid.drawAheadRatio","attr:ListGrid.quickDrawAheadRatio", "attr:ListGrid.scrollRedrawDelay", 
         "attr:ListGrid.dataPageSize","attr:ListGrid.body", "attr:ListGrid.bodyOverflow", "attr:ListGrid.bodyBackgroundColor", 
         "attr:ListGrid.bodyStyleName","attr:ListGrid.emptyCellValue", "attr:ListGrid.cellHeight", 
         "attr:ListGrid.fixedRecordHeights","attr:ListGrid.leaveScrollbarGap", "attr:ListGrid.wrapCells", "attr:ListGrid.cellPadding", 
         "attr:ListGrid.dateFormatter","attr:ListGrid.dateInputFormat", "attr:ListGrid.timeFormatter", "attr:ListGrid.baseStyle", 
         "attr:ListGrid.editFailedBaseStyle","attr:ListGrid.editFailedCSSText", "attr:ListGrid.editPendingBaseStyle", 
         "attr:ListGrid.editPendingCSSText","attr:ListGrid.recordCustomStyleProperty", "attr:ListGrid.recordBaseStyleProperty", 
         "attr:ListGrid.frozenBaseStyle","attr:ListGrid.shrinkForFreeze", "attr:ListGrid.alternateRecordStyles", 
         "attr:ListGrid.alternateRecordFrequency","attr:ListGrid.generateClickOnSpace", "attr:ListGrid.generateClickOnEnter", 
         "attr:ListGrid.generateDoubleClickOnSpace","attr:ListGrid.generateDoubleClickOnEnter", "attr:ListGrid.arrowKeyAction", 
         "attr:ListGrid.showRollOver","attr:ListGrid.canHover", "attr:ListGrid.showHover", "attr:ListGrid.hoverStyle", 
         "attr:ListGrid.selection","attr:ListGrid.selectionType", "attr:ListGrid.canDragSelect", 
         "attr:ListGrid.showEmptyMessage","attr:ListGrid.emptyMessage", "attr:ListGrid.emptyMessageStyle", 
         "attr:ListGrid.loadingDataMessage","attr:ListGrid.loadingDataMessageStyle", "attr:ListGrid.loadingMessage", 
         "attr:ListGrid.singleCellValueProperty","attr:ListGrid.isSeparatorProperty", "attr:ListGrid.showFilterEditor", 
         "attr:ListGrid.filterEditorHeight","attr:ListGrid.canEdit", "attr:ListGrid.recordEditProperty", "attr:ListGrid.editByCell", 
         "attr:ListGrid.saveByCell","attr:ListGrid.validateByCell", "attr:ListGrid.validateOnChange", 
         "attr:ListGrid.neverValidate","attr:ListGrid.filterByCell", "attr:ListGrid.filterOnKeypress", 
         "attr:ListGrid.waitForSave","attr:ListGrid.stopOnErrors", "attr:ListGrid.autoSaveEdits", 
         "attr:ListGrid.confirmCancelEditing","attr:ListGrid.cancelEditingConfirmationMessage", "attr:ListGrid.confirmDiscardEdits", 
         "attr:ListGrid.confirmDiscardEditsMessage","attr:ListGrid.discardEditsSaveButtonTitle", "attr:ListGrid.rowEndEditAction", 
         "attr:ListGrid.listEndEditAction","attr:ListGrid.enterKeyEditAction", "attr:ListGrid.escapeKeyEditAction", 
         "attr:ListGrid.editEvent","attr:ListGrid.editOnFocus", "attr:ListGrid.selectOnEdit", 
         "attr:ListGrid.longTextEditorThreshold","attr:ListGrid.longTextEditorType", "attr:ListGrid.header", "attr:ListGrid.headerHeight", 
         "attr:ListGrid.showHeader","attr:ListGrid.headerBarStyle", "attr:ListGrid.headerBackgroundColor", 
         "attr:ListGrid.headerButtonConstructor","attr:ListGrid.headerBaseStyle", "attr:ListGrid.headerTitleStyle", 
         "attr:ListGrid.frozenHeaderBaseStyle","attr:ListGrid.frozenHeaderTitleStyle", "attr:ListGrid.headerButtonDefaults", 
         "attr:ListGrid.headerButtonProperties","attr:ListGrid.sorterConstructor", "attr:ListGrid.sorterDefaults", 
         "attr:ListGrid.sorterProperties","attr:ListGrid.canSort", "attr:ListGrid.sortFieldNum", "attr:ListGrid.sortDirection", 
         "attr:ListGrid.showSortArrow","attr:ListGrid.canPickFields", "attr:ListGrid.canFreezeFields", 
         "attr:ListGrid.showHeaderContextMenu","attr:ListGrid.showHeaderMenuButton", "attr:ListGrid.headerMenuButtonConstructor", 
         "attr:ListGrid.headerMenuButton","attr:ListGrid.headerMenuButtonIcon", "attr:ListGrid.headerMenuButtonIconWidth", 
         "attr:ListGrid.headerMenuButtonIconHeight","attr:ListGrid.headerMenuButtonWidth", "attr:ListGrid.headerMenuButtonHeight", 
         "attr:ListGrid.canDragRecordsOut","attr:ListGrid.canAcceptDroppedRecords", "attr:ListGrid.canReorderRecords", 
         "attr:ListGrid.canReorderFields","attr:ListGrid.canResizeFields", "attr:ListGrid.dragTrackerMode", 
         "attr:ListGrid.resizeFieldsInRealTime","attr:ListGrid.dragDataAction", "attr:ListGrid.skinImgDir", 
         "attr:ListGrid.sortAscendingImage","attr:ListGrid.sortDescendingImage", "attr:ListGrid.trackerImage", 
         "attr:ListGrid.booleanTrueImage","attr:ListGrid.booleanFalseImage", "attr:ListGrid.booleanImageWidth", 
         "attr:ListGrid.booleanImageHeight","attr:ListGrid.dragTrackerStyle", "attr:ListGrid.freezeOnRightText", 
         "attr:ListGrid.freezeOnLeftText","attr:ListGrid.sortFieldAscendingText", "attr:ListGrid.sortFieldDescendingText", 
         "attr:ListGrid.fieldVisibilitySubmenuTitle","attr:ListGrid.ungroupText", "attr:ListGrid.autoFetchData", 
         "attr:ListGrid.initialCriteria"],
        implementsInterfaces:["DataBoundComponent"],
        name:"ListGrid",
        seeAlso:[]
    },
    "attr:SectionStack.sections":{
        ref:"attr:SectionStack.sections",
        flags:"IR",
        getter:["getSections"],
        description:"List of sections of components managed by this SectionStack.",
        name:"sections",
        seeAlso:[
            {ref:"method:SectionStack.getSections", description:null}
        ],
        valueType:"Array of SectionStackSection Properties",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"],
        definingClass:"class:SectionStack"
    },
    "attr:Menu.showSubmenus":{
        ref:"attr:Menu.showSubmenus",
        flags:"IRW",
        description:"A boolean, indicating whether the submenu indicator column should be displayed. If\n showSubmenus is not set, the menu will show the indicator column only if one of its\n items specifies a submenu property. If showSubmenus is false, the submenu arrows\n will not be displayed, but submenus will still appear on rollover.",
        name:"showSubmenus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Menu"
    },
    "attr:SimpleType.editorType":{
        ref:"attr:SimpleType.editorType",
        flags:"IR",
        description:"Classname of the FormItem that should be the default for editing values of this type (eg\n \"SelectItem\").\n <P>\n You can create a simple custom FormItem by adding default ${isc.DocUtils.linkForRef('attr:FormItem.icons')} that\n launch custom value picking dialogs (an example is in the <i>QuickStart\n Guide</i>, Chapter 9, <i>Extending SmartClient</i>).  By setting simpleType.editorType\n to the name of your custom FormItem, forms will automatically use the custom FormItem,\n as will grids performing ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','inline editing')}.",
        name:"editorType",
        seeAlso:[],
        valueType:"FormItem ClassName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SimpleType"
    },
    "attr:Canvas.snapEdge":{
        flags:"IRW",
        getter:["getSnapEdge"],
        type:"attr",
        ref:"attr:Canvas.snapEdge",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined to this widget, this property can be used to\n define which edge of this widget should be snapped to an edge of the master or parent \n element.\n <P>\n If unspecified the, default snapTo behavior is set up to align the \"snapTo\" edge of this \n widget width the snapTo edge of the master or parent.",
        name:"snapEdge",
        setter:["setSnapEdge"],
        valueType:"String",
        seeAlso:[
            {ref:"attr:Canvas.snapTo", description:null}
        ],
        defaultValue:"null",
        groups:["sizing"],
        definingClass:"class:Canvas"
    },
    "method:Tree.indexOf":{
        ref:"method:Tree.indexOf",
        flags:"",
        description:" Return the position in the list of the first instance of the specified object.\n <p>\n If pos is specified, starts looking after that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"indexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"earliest index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"last index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"class:Tree",
        groups:["access"]
    },
    "attr:TreeGrid.folderIcon":{
        ref:"attr:TreeGrid.folderIcon",
        flags:"IRW",
        description:"The URL of the base icon for all folder nodes in this treeGrid. Note that this URL will\n have ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')} or \n ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} appended to indicate state changes if appropriate - \n see documentation on  ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} and ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')}.",
        name:"folderIcon",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]folder.gif\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:ListGrid.editPendingCSSText":{
        ref:"attr:ListGrid.editPendingCSSText",
        flags:"IRWA",
        description:"Custom CSS text to be applied to cells with pending edits that have not yet been\n  submitted.<br>\n For further customization of styling for cells with pending edits use\n <code>this.editPendingBaseStyle</code> instead.",
        name:"editPendingCSSText",
        seeAlso:[
            {ref:"attr:ListGrid.editFailedBaseStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"\"border:color:#0066CC;\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:CubeGrid.canMoveFacets":{
        ref:"attr:CubeGrid.canMoveFacets",
        flags:"IRW",
        description:"Whether row and column facets can be rearranged by the user, by dragging and dropping the\n facet labels.",
        name:"canMoveFacets",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:Button.showDown":{
        ref:"attr:Button.showDown",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes down in this object?",
        name:"showDown",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonStates')}"],
        definingClass:"class:Button",
        groups:["state"]
    },
    "method:ListGrid.endEditing":{
        ref:"method:ListGrid.endEditing",
        flags:"",
        description:"\n Complete the current edit by storing the value and hiding the inline editor. Note that\n if ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')} is true, the value will be saved to the server. \n\n",
        name:"endEditing",
        seeAlso:[
            {ref:"method:ListGrid.startEditing", description:null}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:GridRenderer.snapInsideBorder":{
        ref:"attr:GridRenderer.snapInsideBorder",
        flags:"IRW",
        description:"If true, snap-to-cell drops will snap the dropped object inside the selected cell's border.\n If false, snap-to-cell drops will snap the dropped object to the edge of the selected cell, \n regardless of borders",
        name:"snapInsideBorder",
        seeAlso:[
            {ref:"attr:GridRenderer.snapToCells", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["dragdrop"]
    },
    "attr:CubeGrid.bodyMinWidth":{
        ref:"attr:CubeGrid.bodyMinWidth",
        flags:"IRWA",
        description:"Minimum width for the body of this cubeGrid",
        name:"bodyMinWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "method:HTMLFlow.handleError":{
        ref:"method:HTMLFlow.handleError",
        flags:"",
        description:"\n This method is called when a transport error occurs.  Typically, this is the result of the\n server returning an HTTP error code such as 404 - document not found.  You can inspect the\n RPCResponse object for the reasons for the error and take appropriate action.  Typical\n properties to look at are rpcResponse.status, and rpcResponse.httpResponseCode.\n <p>\n This method is called from the response processing pipeline.  If you want to provide your\n own HTML response that should be rendered into this component as the result of the error,\n you can do so by setting rpcResponse.data to your HTML string.  Returning false from this\n method suppresses any further response handling.  The default implementation of this method\n causes an error message to be logged to the Developer Console and sets the HTML to the error\n string.\n\n",
        name:"handleError",
        seeAlso:[],
        params:[
            {description:"The RPCRequest that was made to the server", optional:false, 
             name:"rpcRequest",defaultValue:null, type:"RPCRequest"},
            {description:"The RPCResponse that was received", optional:false, name:"rpcResponse", 
             defaultValue:null,type:"RPCResponse"}
        ],
        returns:{description:"false to suppress further response processing", type:"boolean"},
        type:"method",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "attr:EdgedCanvas.showCenter":{
        ref:"attr:EdgedCanvas.showCenter",
        flags:"IR",
        description:"Whether to show media in the center section, that is, behind the decorated Canvas.",
        name:"showCenter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "method:Tree.linkNodes":{
        ref:"method:Tree.linkNodes",
        flags:"",
        description:"\n This method is provided as a mechanism to link new nodes into the tree of modelType\n \"parent\".  This method takes a list of nodes that must contain at a minimum a unique ID\n (keyed by ${isc.DocUtils.linkForRef('attr:Tree.idField')}) and a parent ID (keyed by\n ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}).  Based on this information, the list of nodes is integrated\n into the tree structure.\n\n",
        name:"linkNodes",
        seeAlso:[
            {ref:"attr:Tree.data", description:null},
            {ref:"attr:Tree.modelType", description:null}
        ],
        params:[
            {description:"list of nodes to link into the tree.", optional:false, name:"nodes", 
             defaultValue:null,type:"Array of TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "group:dragResize":{
        ref:"group:dragResize",
        refs:["classMethod:Canvas.getEventEdge"],
        name:"dragResize",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItem.titleOrientation":{
        ref:"attr:FormItem.titleOrientation",
        flags:"IRW",
        description:"On which side of this item should the title be placed.  ${isc.DocUtils.linkForRef('type:TitleOrientation')}\n lists valid options.\n <P>\n Note that titles on the left or right take up a cell in tabular\n ${isc.DocUtils.linkForRef('group:formLayout','form layouts')}, but titles on top do not.",
        name:"titleOrientation",
        seeAlso:[
            {ref:"attr:DynamicForm.titleOrientation", description:null}
        ],
        valueType:"TitleOrientation",
        defaultValue:"Canvas.LEFT",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "method:Toolbar.getButtonNumber":{
        ref:"method:Toolbar.getButtonNumber",
        flags:"A",
        description:"			get the index of a button in the buttons array<p>\n          The button can be specified as - \n          <ul>\n          <li>an index within this.buttons (just returned)\n          <li>the ID property of a button\n          <li>a pointer to the button descriptor object in this.buttons\n          <li>the actual button widget in this.members\n          </ul><p>\n			returns -1 if not found\n\n",
        name:"getButtonNumber",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"button", defaultValue:null, 
             type:"number | string  | button object | button widget"}
        ],
        returns:{description:"index of the button in question", type:"number"},
        type:"method",
        definingClass:"class:Toolbar"
    },
    "attr:ListGrid.sortFieldNum":{
        ref:"attr:ListGrid.sortFieldNum",
        flags:"IRW",
        description:"Specifies the number of the field by which to sort this listGrid. Column numbers\n          start at 0 for the left-most column.",
        name:"sortFieldNum",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sort')}"],
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "attr:SectionItem.sectionExpanded":{
        ref:"attr:SectionItem.sectionExpanded",
        flags:"IR",
        description:"Whether this form section should be initially collapsed. Can be set programatically\n via ${isc.DocUtils.linkForRef('method:SectionItem.expandSection')} and ${isc.DocUtils.linkForRef('method:SectionItem.collapseSection')}.",
        name:"sectionExpanded",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formSections')}"],
        definingClass:"class:SectionItem"
    },
    "attr:StatefulCanvas.iconOrientation":{
        ref:"attr:StatefulCanvas.iconOrientation",
        flags:"IR",
        description:"If this button is showing an icon should it appear to the left or right of the title?\n valid options are <code>\"left\"</code> and <code>\"right\"</code>.",
        name:"iconOrientation",
        setter:["setIconOrientation"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"left\"",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "class:FusionChart":{
        methods:["method:FusionChart.getDataColor"],
        type:"class",
        requiresModules:["Analytics"],
        ref:"class:FusionChart",
        classAttrs:[],
        treeLocation:["Optional Modules/Analytics"],
        classMethods:[],
        description:"Component that wraps the FusionCharts charting engine.\n <P>\n Provides multiple-series (area, bar, column, line, radar) and single-series (doughnut, pie)\n chart types. These charts all depict a single continuous dimension (eg revenue), broken down\n by one or two discrete dimensions (eg product, region).",
        attrs:["attr:FusionChart.chartsBaseURL", "attr:FusionChart.chartURL", 
         "attr:FusionChart.fusionVersion","attr:FusionChart.chartProperties", "attr:FusionChart.dataColors"],
        implementsInterfaces:["Chart"],
        name:"FusionChart",
        seeAlso:[]
    },
    "method:GridRenderer.cellMouseDown":{
        ref:"method:GridRenderer.cellMouseDown",
        flags:"A",
        description:" Called when a cell receives a mousedown event.\n \n",
        name:"cellMouseDown",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:FormItem.showFocused":{
        ref:"attr:FormItem.showFocused",
        flags:"IRWA",
        description:"When this item recieves focus, should it be re-styled to indicate it has focus?",
        name:"showFocused",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:ImgButton.align":{
        ref:"attr:ImgButton.align",
        flags:"IRW",
        description:"Horizontal alignment of this component's title.",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["appearance"]
    },
    "attr:CubeGrid.canReorderColumns":{
        ref:"attr:CubeGrid.canReorderColumns",
        flags:"IRW",
        description:"If true, body columns can be reordered via the innermost column headers.",
        name:"canReorderColumns",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:Canvas.shadowDepth":{
        ref:"attr:Canvas.shadowDepth",
        flags:"IR",
        description:"Depth of the shadow, or the virtual height above the page of the widget throwing the shadow.\n <P>\n This is a single parameter that can be used to control both <code>shadowSoftness</code> and\n <code>shadowOffset</code>.",
        name:"shadowDepth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"4",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["shadow"]
    },
    "method:Canvas.setSnapTo":{
        ref:"method:Canvas.setSnapTo",
        flags:"",
        description:" Set the snapTo property of this canvas, and handle repositioning.\n\n",
        name:"setSnapTo",
        seeAlso:[],
        params:[
            {description:"new snapTo value", optional:false, name:"snapTo", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:MenuItem.title":{
        ref:"attr:MenuItem.title",
        flags:"IR",
        description:"The text displayed for the menu item",
        name:"title",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:MenuItem",
        groups:["menuBasic"]
    },
    "class:FacetValue":{
        methods:["method:FacetValue.getCellValue"],
        ref:"class:FacetValue",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Analytics/CubeGrid"],
        attrs:["attr:FacetValue.id", "attr:FacetValue.title", "attr:FacetValue.parentId", 
         "attr:FacetValue.canEdit","attr:FacetValue.collapsed", "attr:FacetValue.canCollapse", 
         "attr:FacetValue.isMinimizeValue","attr:FacetValue.width", "attr:FacetValue.align", "attr:FacetValue.cellAlign", 
         "attr:FacetValue.borderBefore","attr:FacetValue.borderAfter", "attr:FacetValue.selectionBoundary", 
         "attr:FacetValue.titleHilite"],
        description:"Facet value definition object made use of by the CubeGrid class (contained by facets)",
        name:"FacetValue",
        seeAlso:[],
        type:"class",
        requiresModules:["Analytics"]
    },
    "method:ListGrid.clearFieldError":{
        ref:"method:ListGrid.clearFieldError",
        flags:"",
        description:" Clears any validation errors for some cell.\n",
        name:"clearFieldError",
        seeAlso:[
            {ref:"method:ListGrid.setFieldError", description:null}
        ],
        params:[
            {description:"row index of cell to add validation error for", optional:false, 
             name:"rowNum",defaultValue:null, type:"number"},
            {description:"col index or field name of cell to add validation error for", 
             optional:false,name:"fieldName", defaultValue:null, type:"number | string"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:ListGrid.stopOnErrors":{
        ref:"attr:ListGrid.stopOnErrors",
        flags:"IRWA",
        description:"If this is an editable listGrid, this property determines how failure to save due to \n validation errors should be displayed to the user.\n <P>\n If this property is true, when validation errors occur the errors will be displayed\n to the user in an alert, and focus will be returned to the first cell to fail validation.\n <P>\n If false, this the cells that failed validation will be silently styled with the \n editFailedBaseStyle.<br>\n <b>Note:</b> stopOnErrors being set to true implies that 'waitForSave' is also true.\n We will not dismiss the editor until save has completed if stopOnErrors is true.",
        name:"stopOnErrors",
        seeAlso:[
            {ref:"attr:ListGrid.waitForSave", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:List.dataChanged":{
        ref:"method:List.dataChanged",
        flags:"A",
        description:" Method called when this array changes in some way.  Observe the method to react to changes in\n this list.\n <P>\n Note: dataChanged() will only fire when items are added, removed or rearranged.  If a list\n contains objects, dataChanged() will not fire if changes are made to objects within the list\n without changing their position within the list.  If an observer of dataChanged() needs to react\n to such a change, you can manually fire dataChanged() by simply calling it.\n <P>\n Note: may be called multiple times as the result of a multi-item add or remove, etc.\n\n",
        name:"dataChanged",
        seeAlso:[],
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "method:CubeGrid.disableHiliting":{
        ref:"method:CubeGrid.disableHiliting",
        flags:"",
        description:"\n      disable all hilites\n\n      <br><i>methodType</i> action\n",
        name:"disableHiliting",
        seeAlso:[],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "attr:ListGrid.canSort":{
        ref:"attr:ListGrid.canSort",
        flags:"IRW",
        description:"Enables or disables interactive sorting behavior for this listGrid. Does not\n          affect sorting by direct calls to the sort method.",
        name:"canSort",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "class:LinkItem":{
        methods:["method:LinkItem.setLinkTitle"],
        ref:"class:LinkItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:LinkItem.target", "attr:LinkItem.linkTitle"],
        description:"A FormItem that displays an HTML link",
        name:"LinkItem",
        seeAlso:[],
        type:"class"
    },
    "attr:FormItem.ID":{
        ref:"attr:FormItem.ID",
        flags:"IRW",
        description:"Global identifier for referring to the formItem in JavaScript.  The ID property is\n optional if you do not need to refer to the widget from JavaScript, or can refer to it\n indirectly (for example, via <code>form.getItem(\"<i>itemName</i>\")</code>).\n <P>\n An internal, unique ID will automatically be created upon instantiation for any formItem\n where one is not provided.",
        name:"ID",
        seeAlso:[],
        valueType:"identifier",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["basics"]
    },
    "attr:ListGrid.valueIconHeight":{
        ref:"attr:ListGrid.valueIconHeight",
        flags:"IRW",
        description:"Height for value icons for this listGrid.\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}.\n Can be overridden at the field level",
        name:"valueIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "type:SortArrow":{
        ref:"type:SortArrow",
        values:[
            {description:"Don't show a sort arrow at all.", value:"\"none\""},
            {description:"Display sort arrow in the upper-right corner (above the scrollbar) only.", 
             value:"\"corner\""},
            {description:"Display sort arrow above each field header only.", value:"\"field\""},
            {description:"Display sort arrow above each field header AND in corner above scrollbar.BOTH:\"both\", // NOTE: Canvas establishes this constant", 
             value:"\"both\""}
        ],
        description:"Do we display an arrow for the sorted field ?",
        name:"SortArrow",
        seeAlso:[],
        type:"type",
        groups:["sorting", "appearance"]
    },
    "method:ListGrid.getGroupNodeHTML":{
        ref:"method:ListGrid.getGroupNodeHTML",
        flags:"",
        description:" Returns the HTML code necessary to render a group node, including icon, title, and padding.\n The amount of the padding is at least ${isc.DocUtils.linkForRef('attr:ListGrid.groupLeadingIndent')} pixels, and\n an additional ${isc.DocUtils.linkForRef('attr:ListGrid.groupIndentSize')} pixels for each increasing level of the\n node.\n",
        name:"getGroupNodeHTML",
        seeAlso:[],
        params:[
            {description:"Specified group node", optional:false, name:"node", defaultValue:null, 
             type:"Object"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:Layout.managePercentBreadth":{
        ref:"attr:Layout.managePercentBreadth",
        flags:"IR",
        description:"If set, a Layout with breadthPolicy:\"fill\" will specially interpret a percentage breadth on\n a member as a percentage of available space excluding the ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.  If false,\n percentages work exactly as for a non-member, with layoutMargins, if any, ignored.",
        name:"managePercentBreadth",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Layout"
    },
    "method:Canvas.animateFade":{
        ref:"method:Canvas.animateFade",
        flags:"",
        description:" Animate a change in opacity from the widget's current opacity to the specified opacity.\n",
        name:"animateFade",
        seeAlso:[],
        params:[
            {description:"desired final opacity", optional:false, name:"opacity", defaultValue:null, 
             type:"number"},
            {description:"When the fade completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated fade", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional animation acceleration to bias the ratios", optional:true, 
             name:"acceleration",defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateFade')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "type:MenuFieldID":{
        ref:"type:MenuFieldID",
        values:[
            {description:"Displays the icon field for the menu. This field contains the items                  specified icon (if there is one), or if the item is checked, the \n                  checkmark icon for the item.", 
             value:"\"icon\""},
            {description:"Displays the item's title", value:"\"title\""},
            {description:"Displays the key field for the menu. This field contains the name or                title of any shortcut keys for this menu item.", 
             value:"\"key\""},
            {description:"Field to display the submenu image for items that have a submenu.", 
             value:"\"subMenu\""}
        ],
        description:"Simple string identifiers for standard menu fields.",
        name:"MenuFieldID",
        seeAlso:[],
        type:"type"
    },
    "classAttr:ValidatorTypes.dateRange":{
        ref:"classAttr:ValidatorTypes.dateRange",
        flags:"IR",
        description:"Tests whether the value for a date field is within the range specified.\n Range is inclusive, and is specified via <code>validator.min</code> and\n <code>validator.max</code>, which should be dates.<br>\n Note that the <code>errorMessage</code> for this validator will be evaluated as\n a dynamicString - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"dateRange",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "method:Canvas.getScrollRight":{
        ref:"method:Canvas.getScrollRight",
        flags:"",
        description:" Returns the scrollLeft required to scroll horizontally to the end of this widget's content.\n",
        name:"getScrollRight",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:ValuesManager.validate":{
        ref:"method:ValuesManager.validate",
        flags:"",
        description:" Validate the current set of values for this values manager against validators defined\n in the member forms. For databound valuesManagers, also perform validation against any\n validators defined on datasource fields.\n <P>\n Note that if validation errors occur for a value that is not shown in any member forms,\n those errors will cause a warning and ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be\n called.  This can occur if:<br>\n - A datasource field has no correspending item in any member form<br>\n - The item in question is hidden<br>\n - The member form containing the item is hidden.\n\n",
        name:"validate",
        seeAlso:[],
        returns:{description:"true if all validation passed", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('formSplitting')}"],
        definingClass:"class:ValuesManager"
    },
    "method:Canvas.getPageBottom":{
        ref:"method:Canvas.getPageBottom",
        flags:"",
        description:" Return the page-relative bottom coordinate of this object, in pixels.\n",
        name:"getPageBottom",
        seeAlso:[],
        returns:{description:"GLOBAL bottom coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:GridRenderer.fastCellUpdates":{
        ref:"attr:GridRenderer.fastCellUpdates",
        flags:"I",
        description:"Whether to speed up dynamic styling at the expense of slightly slower drawing.\n <P>\n <code>fastCellUpdates</code> speeds up the dynamic styling system used by rollovers,\n selections, and custom styling that calls ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCellStyle')}, at\n the cost of slightly slower draw() and redraw() times.",
        name:"fastCellUpdates",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer"
    },
    "attr:Canvas.dragOpacity":{
        ref:"attr:Canvas.dragOpacity",
        flags:"IRWA",
        description:"If this widget has dragAppearance <code>\"target\"</code>, this value specifies the\n opacity to render the target while it is being dragged. A null value implies we do\n not modify the opacity.",
        name:"dragOpacity",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragEffects')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "classMethod:XMLTools.parseXML":{
        ref:"classMethod:XMLTools.parseXML",
        flags:"",
        description:" Parse XML text into an ${isc.DocUtils.linkForRef('type:XMLDocument')}.  Parse errors, if any, are reported to the log.\n\n",
        name:"parseXML",
        seeAlso:[],
        params:[
            {description:"XML text to be parsed", optional:false, name:"xmlText", defaultValue:null, 
             type:"String"}
        ],
        returns:{description:"resulting XMLDocument", type:"XMLDocument"},
        type:"classMethod",
        definingClass:"class:XMLTools"
    },
    "attr:DataSourceField.detail":{
        ref:"attr:DataSourceField.detail",
        flags:"IR",
        description:"Whether this field should be considered a \"detail\" by a DataBound component.\n <P>\n Detail fields won't be included in a DataBound component where \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.showDetailFields')} is false. This allows for compact representation\n of datasource records.<br>\n In addition to this databound components may apply other logic to detail fields - for example\n a ${isc.DocUtils.linkForRef('class:ListGrid')} instance will include detail fields but have them be initially hidden by\n default.",
        name:"detail",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentBinding"]
    },
    "method:SectionStack.hideSection":{
        ref:"method:SectionStack.hideSection",
        flags:"",
        description:" \n Hides a section or sections.  This includes the section header and its items.  The space\n vacated by this action is reassigned to the nearest visible section item above this\n section.  If there are no visible section items above this section, the space is\n reassigned to the nearest visible section item below this section.\n\n",
        name:"hideSection",
        seeAlso:[
            {ref:"method:SectionStack.collapseSection", description:null}
        ],
        params:[
            {description:"Section(s) to hide.  For this parameter, you can pass the position \n                      of the section in the SectionStack, the ID of the section, or a\n                      List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"},
            {description:"callback to fire when the section has been hidden", optional:true, 
             name:"callback",defaultValue:null, type:null}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsShowAndHide')}"],
        definingClass:"class:SectionStack"
    },
    "method:ResultSet.rowIsLoaded":{
        ref:"method:ResultSet.rowIsLoaded",
        flags:"A",
        description:" Whether the given row has been loaded.\n <p>\n Unlike get(), will not trigger a server fetch.  \n\n",
        name:"rowIsLoaded",
        seeAlso:[],
        params:[
            {description:"row to check", optional:false, name:"rowNum", defaultValue:null, type:"number"}
        ],
        returns:{description:"true whether if the given row has been loaded, false if it has not been                   loaded or is still in the process of bring loaded", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:CubeGrid.facetValueContextClick":{
        ref:"method:CubeGrid.facetValueContextClick",
        flags:"",
        description:"    StringMethod handler fired when context click occurs over a facetValue button in a header.\n  <br><i>methodType</i> handler\n",
        name:"facetValueContextClick",
        seeAlso:[],
        params:[
            {description:"facetValuesObject for the appropriate header button", optional:false, 
             name:"facetValues",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "attr:Window.isModal":{
        ref:"attr:Window.isModal",
        flags:"IRW",
        description:"If true, when shown this Window will intercept and block events to all other existing\n components on the page.\n <P>\n Use ${isc.DocUtils.linkForRef('attr:Window.showModalMask')} to darken all other elements on the screen when a modal dialog\n is showing.\n <P>\n Chained modal windows - that is, modal windows that launch other modal windows - are\n allowed.  You can accomplish this by simply creating a second modal Window while a modal\n Window is showing.\n <P>\n Note only top-level Windows (Windows without parents) can be modal.",
        name:"isModal",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('modality')}"],
        definingClass:"class:Window",
        groups:["modal"]
    },
    "class:TimeItem":{
        methods:[],
        exampleConfig:"TimeItem.xml",
        ref:"class:TimeItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:TimeItem.displayFormat"],
        description:"Class for editing times in a text field. Values are stored as <code>Date</code> objects.",
        name:"TimeItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('timeItem')}"]
    },
    "class:CubeGrid":{
        exampleConfig:"CubeGrid.xml",
        methods:["method:CubeGrid.getEventRow", "method:CubeGrid.getEventColumn", 
         "method:CubeGrid.getCellStyle","method:CubeGrid.getBaseStyle", "method:CubeGrid.setEditValues", 
         "method:CubeGrid.setEditValue","method:CubeGrid.getEditValue", "method:CubeGrid.getEditedRecord", 
         "method:CubeGrid.getEditedCell","method:CubeGrid.getEditValues", "method:CubeGrid.clearEditValue", 
         "method:CubeGrid.saveEdits","method:CubeGrid.getAllEditCells", "method:CubeGrid.discardAllEdits", 
         "method:CubeGrid.saveAllEdits","method:CubeGrid.getFacet", "method:CubeGrid.getFacetValue", 
         "method:CubeGrid.getRollupValue","method:CubeGrid.getCellFacetValues", "method:CubeGrid.getFacetValuesColumn", 
         "method:CubeGrid.getFacetValuesRow","method:CubeGrid.getRowFacetValues", "method:CubeGrid.getColumnFacetValues", 
         "method:CubeGrid.getCellRow","method:CubeGrid.getCellColumn", "method:CubeGrid.getCellCoordinates", 
         "method:CubeGrid.facetLabelHoverHTML","method:CubeGrid.facetValueHoverHTML", "method:CubeGrid.closeFacet", 
         "method:CubeGrid.closeColumn","method:CubeGrid.facetValueSelectionChanged", "method:CubeGrid.getSelectedCells", 
         "method:CubeGrid.getSelectedCellIds","method:CubeGrid.anyCellSelected", "method:CubeGrid.cellIsSelected", 
         "method:CubeGrid.selectCell","method:CubeGrid.deselectCell", "method:CubeGrid.selectCells", 
         "method:CubeGrid.deselectCells","method:CubeGrid.selectAllCells", "method:CubeGrid.deselectAllCells", 
         "method:CubeGrid.getSelectedFacetValues","method:CubeGrid.facetValuesSelected", "method:CubeGrid.facetHasSelection", 
         "method:CubeGrid.getFacetsHavingSelection","method:CubeGrid.selectFacetValues", "method:CubeGrid.deselectFacetValues", 
         "method:CubeGrid.selectFacetValue","method:CubeGrid.deselectFacetValue", "method:CubeGrid.selectAllFacetValues", 
         "method:CubeGrid.deselectAllFacetValues","method:CubeGrid.deselectAll", "method:CubeGrid.resizeFacetValue", 
         "method:CubeGrid.enableHilite","method:CubeGrid.disableHilite", "method:CubeGrid.enableHiliting", 
         "method:CubeGrid.disableHiliting","method:CubeGrid.hiliteCell", "method:CubeGrid.hiliteCellList", 
         "method:CubeGrid.hiliteFacetValue","method:CubeGrid.setFacetTitle", "method:CubeGrid.setFacetTitleAlign", 
         "method:CubeGrid.setFacetValueTitle","method:CubeGrid.setFacetValueTitleAlign", "method:CubeGrid.getFacetValueLayout", 
         "method:CubeGrid.getRowFacetLayout","method:CubeGrid.getColumnFacetLayout", "method:CubeGrid.makeChart", 
         "method:CubeGrid.addRowFacet","method:CubeGrid.addColumnFacet", "method:CubeGrid.addFacet", 
         "method:CubeGrid.removeFacet","method:CubeGrid.setFixedFacetValue", "method:CubeGrid.facetValueOver", 
         "method:CubeGrid.facetValueOut","method:CubeGrid.facetValueHover", "method:CubeGrid.facetValueContextClick", 
         "method:CubeGrid.facetValueReordered","method:CubeGrid.facetAdded", "method:CubeGrid.facetRemoved", "method:CubeGrid.facetMoved", 
         "method:CubeGrid.facetLabelOver","method:CubeGrid.facetLabelOut", "method:CubeGrid.facetLabelHover", 
         "method:CubeGrid.cellSelectionChanged"],
        type:"class",
        requiresModules:["Analytics"],
        ref:"class:CubeGrid",
        classAttrs:[],
        treeLocation:["Optional Modules/Analytics"],
        classMethods:[],
        description:"The CubeGrid is an interactive grid component that presents very large, multi-dimensional\n data sets (also known as data cubes) for reporting or analytic applications.\n <P>\n CubeGrids are often called crosstabs, for their cross-tabular display of data dimensions in\n stacked/nested rows and columns, or pivot tables, for their ability to \"pivot\" dimensions\n between rows and columns to view a data cube from different perspectives. They are typically\n used in the querying and reporting front-ends of data warehousing, decision support, OLAP,\n and business intelligence systems.\n <P>\n <B>Multi-Dimensional Data Terminology</B>\n <P>\n The CubeGrid refers to the dimensions of a data cube as facets, to the possible values in\n each facet as facet values, and to the values within the data cube as data values or cell\n values. Equivalent terms that are commonly used in data warehousing or business intelligence\n systems include:<br>\n <b>facet:</b> dimension, attribute, feature<br>\n <b>facet value:</b> dimension member, attribute value, feature value<br>\n <b>cell value:</b> data value, metric value, measure\n <P>\n <B>Visual Structure</B>\n <P>\n Like the ListGrid and TreeGrid components, the CubeGrid displays data values in a tabular\n \"body\" with adjacent \"headers\".  While the ListGrid and TreeGrid display rows of records\n with field values, the CubeGrid displays a body of individual cell values, each associated\n with a combination of facet values. The facet values for a cell are displayed in the column\n headers above the cell and row headers to the left of the cell. CubeGrids can display an\n arbitrary number of facets, by stacking multiple levels of row and/or column headers.\n <P>\n Except for the innermost column facet, each facet in a CubeGrid has a facet label adjacent\n to its row or column headers. The facet labels serve two main purposes: they display the\n titles of the facets, and they provide drag-and-drop reordering or pivoting of facets within\n the . The row facet labels also provide interactive selection, resizing, and other\n operations on the columns of row facet values.\n <P>\n The innermost column headers provide special behaviors and controls for manipulating the\n columns of data in a CubeGrid. End users may select, resize, reorder, minimize, maximize, or\n auto-fit the columns of data via mouse interactions with these headers. Customizable\n indicators and controls may be included at the top of each innermost column header.\n <P>\n If a CubeGrid is not large enough to display all of its cell values, horizontal and/or\n vertical scrollbars will appear below and to the right of the body. The body of the CubeGrid\n may be scrolled on either axis. The headers are \"frozen\" from scrolling on one axis - row\n headers only scroll vertically, while column headers only scroll horizontally - so the facet\n values for the visible cells are always displayed.\n <P>\n <B>Data Loading</B>\n <P>\n In order to allow intuitive and efficient navigation through very large datasets, the\n CubeGrid supports adding and removing facets from the display on the fly, and also tree-like\n expanding and collapsing both within facets and across facets, all integrated with a\n load-on-demand system that only loads visible data, and works with standard ISC DataSources.",
        attrs:["attr:CubeGrid.styleName", "attr:CubeGrid.bodyStyleName", "attr:CubeGrid.baseStyle", 
         "attr:CubeGrid.facetValueHoverWidth","attr:CubeGrid.facetLabelHoverWidth", "attr:CubeGrid.facetValueHoverHeight", 
         "attr:CubeGrid.facetLabelHoverHeight","attr:CubeGrid.facetValueHoverAlign", "attr:CubeGrid.facetLabelHoverAlign", 
         "attr:CubeGrid.facetValueHoverVAlign","attr:CubeGrid.facetLabelHoverVAlign", "attr:CubeGrid.facetValueHoverStyle", 
         "attr:CubeGrid.facetLabelHoverStyle","attr:CubeGrid.fixedFacetValues", "attr:CubeGrid.dataSource", "attr:CubeGrid.facets", 
         "attr:CubeGrid.hilites","attr:CubeGrid.hiliteProperty", "attr:CubeGrid.canSelectValues", 
         "attr:CubeGrid.canSelectHeaders","attr:CubeGrid.autoSelectHeaders", "attr:CubeGrid.autoSelectValues", 
         "attr:CubeGrid.simpleDeselect","attr:CubeGrid.columnFacets", "attr:CubeGrid.rowFacets", 
         "attr:CubeGrid.hideEmptyFacetValues","attr:CubeGrid.data", "attr:CubeGrid.valueProperty", "attr:CubeGrid.cellIdProperty", 
         "attr:CubeGrid.canEdit","attr:CubeGrid.editByCell", "attr:CubeGrid.saveByCell", 
         "attr:CubeGrid.alternateRecordStyles","attr:CubeGrid.canReorderColumns", "attr:CubeGrid.canResizeColumns", 
         "attr:CubeGrid.canCollapseFacets","attr:CubeGrid.canMinimizeFacets", "attr:CubeGrid.canMinimizeColumns", 
         "attr:CubeGrid.canMoveFacets","attr:CubeGrid.autoSizeHeaders", "attr:CubeGrid.facetTitleAlign", 
         "attr:CubeGrid.facetValueAlign","attr:CubeGrid.cellAlign", "attr:CubeGrid.wrapFacetTitles", 
         "attr:CubeGrid.wrapFacetValueTitles","attr:CubeGrid.padTitles", "attr:CubeGrid.defaultFacetWidth", "attr:CubeGrid.rollupValue", 
         "attr:CubeGrid.metricFacetId","attr:CubeGrid.valueTitle", "attr:CubeGrid.bodyMinWidth", "attr:CubeGrid.bodyMinHeight", 
         "attr:CubeGrid.chartConstructor","attr:CubeGrid.chartType", "attr:CubeGrid.chartConfirmThreshold"],
        name:"CubeGrid",
        seeAlso:[
            {ref:"class:Facet", description:null},
            {ref:"class:FacetValue", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('analytics')}"]
    },
    "method:Canvas.focusChanged":{
        ref:"method:Canvas.focusChanged",
        flags:"",
        description:" Notification function fired when this widget recieves or loses keyboard focus.\n",
        name:"focusChanged",
        seeAlso:[],
        params:[
            {description:"If true this widget now has keyboard focus", optional:false, name:"hasFocus", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "attr:ListGridField.type":{
        ref:"attr:ListGridField.type",
        flags:"IRW",
        description:"ListGrids picks a renderer for the view and edit mode of a field based on this attribute.",
        name:"type",
        seeAlso:[
            {ref:"type:ListGridFieldType", description:null},
            {ref:"type:FieldType", description:null}
        ],
        valueType:"ListGridFieldType",
        defaultValue:"\"text\"",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:Canvas.setImage":{
        ref:"method:Canvas.setImage",
        flags:"A",
        description:" Set the URL of an image element by name.\n <p>\n The image element must have been created from HTML generated by calling\n <code>canvas.imgHTML()</code> on this particular Canvas.\n\n",
        name:"setImage",
        seeAlso:[],
        params:[
            {description:"name of the image to change, as originally passed to                              <code>imgHTML</code>", 
             optional:false,name:"identifier", defaultValue:null, type:"string"},
            {description:"URL for the image", optional:false, name:"URL", defaultValue:null, 
             type:"SCImgURL"},
            {description:"optional image directory, overrides the default for this Canvas", 
             optional:true,name:"imgDir", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "attr:GridRenderer.emptyCellValue":{
        ref:"attr:GridRenderer.emptyCellValue",
        flags:"IRW",
        description:"Value to show in empty cells (when getCellValue returns null)",
        name:"emptyCellValue",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "attr:ImgTab.src":{
        ref:"attr:ImgTab.src",
        flags:"IRW",
        description:"Base URL for tab images",
        name:"src",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"tab.gif\"",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "type:FacetValueMap":{
        ref:"type:FacetValueMap",
        description:"A JavaScript Object where each property name is a facetId and each property value is a\n facetValueId for that facet.  \n <P>\n The facetId -> facetValueId mappings in a FacetValueMap describe a specific slice of the\n dataset.  If mappings are included for all facets, a FacetValueMap describes a unique\n cell.  If some facets are omitted, it describes a row, column, or set of rectangular\n areas, or equivalently, a particular row or column header (if all facetIds in the map are\n displayed on the same axis)\n <P>\n FacetValueMaps are used in various contexts to describe headers, datasets to be loaded,\n screen regions, etc.",
        name:"FacetValueMap",
        seeAlso:[],
        type:"type"
    },
    "method:TabBar.selectTab":{
        ref:"method:TabBar.selectTab",
        flags:"",
        description:" Select a tab\n",
        name:"selectTab",
        seeAlso:[],
        params:[
            {description:"index of tab to select", optional:false, name:"tabNum", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:TabBar"
    },
    "class:WebService":{
        methods:["method:WebService.getOperationNames", "method:WebService.getSchema", 
         "method:WebService.callOperation","method:WebService.getSoapMessage", "method:WebService.getInputDS", 
         "method:WebService.getInputHeaderSchema","method:WebService.getOutputHeaderSchema", "method:WebService.getHeaderData", 
         "method:WebService.getFetchDS","method:WebService.setLocation"],
        ref:"class:WebService",
        classAttrs:[],
        classMethods:["classMethod:WebService.get"],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:WebService.serviceNamespace", "attr:WebService.globalNamespaces"],
        description:"Class representing a WebService definition derived from a WSDL file.\n <P>\n A Web Service object allows you to invoke operations (via\n ${isc.DocUtils.linkForRef('method:WebService.callOperation','callOperation()')}), inspect schema declared in the\n WSDL file (${isc.DocUtils.linkForRef('method:WebService.getSchema','getSchema()')}), and perform simple read-only\n databinding ${isc.DocUtils.linkForRef('method:WebService.getFetchDS')}.  \n <P>\n Once a WebService has been loaded, a DataSource can be declared with a\n ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} to connect it to the web service, allowing DataSource\n data to be loaded and saved to the web service using\n ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')}.",
        name:"WebService",
        seeAlso:[],
        type:"class",
        groups:["webService"]
    },
    "attr:EdgedCanvas.edgeRight":{
        ref:"attr:EdgedCanvas.edgeRight",
        flags:"IR",
        description:"Height in pixels for right corners and edges.  Defaults to edgeSize when unset.",
        name:"edgeRight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:PickTreeItem.valueField":{
        ref:"attr:PickTreeItem.valueField",
        flags:"IR",
        description:"Which field in the tree-data should be returned as this item's value?\n If unspecified, the path will be used",
        name:"valueField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('pickTree')}"],
        definingClass:"class:PickTreeItem"
    },
    "attr:TreeNode.canAcceptDrop":{
        ref:"attr:TreeNode.canAcceptDrop",
        flags:"IRA",
        description:"Governs whether dragged data (typicaly other <code>treeNode</code>s) may be dropped over\n this node. Only has an effect if this node is displayed in a ${isc.DocUtils.linkForRef('class:TreeGrid')} where\n ${isc.DocUtils.linkForRef('attr:TreeGrid.canAcceptDroppedRecords')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')} or \n ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is true.",
        name:"canAcceptDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "method:Toolbar.deselectButton":{
        ref:"method:Toolbar.deselectButton",
        flags:"",
        description:"	Deselects the specified button from the toolbar, where buttonID is the index of\n  the button's object initializer. The button will be redrawn if necessary.\n  The button identifier can be a number (index), string (id), or object (widget or init block),\n as with the getButtonNumber() method.\n",
        name:"deselectButton",
        seeAlso:[
            {ref:"method:Toolbar.getButtonNumber", description:null}
        ],
        params:[
            {description:"Button / Button identifier", optional:false, name:"buttonID", 
             defaultValue:null,type:"number | string | object | canvas"}
        ],
        type:"method",
        definingClass:"class:Toolbar",
        groups:["selection"]
    },
    "attr:Window.autoCenter":{
        ref:"attr:Window.autoCenter",
        flags:"IRW",
        description:"If true, this Window widget will automatically be centered on the page when shown.\n      If false, it will show up in the last position it was placed (either programatically,\n      or by user interaction).",
        name:"autoCenter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"autoCenter",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "location"]
    },
    "class:Log":{
        methods:["method:Log.getCallTrace", "method:Log.getStackTrace", "method:Log.echoLeaf", 
         "method:Log.echo","method:Log.echoAll", "method:Log.logDebug", "method:Log.logInfo", "method:Log.logWarn", 
         "method:Log.logError","method:Log.logFatal", "method:Log.logIsEnabledFor", "method:Log.logIsDebugEnabled", 
         "method:Log.logIsInfoEnabled","method:Log.logIsWarnEnabled", "method:Log.logIsErrorEnabled", "method:Log.setLogPriority", 
         "method:Log.setDefaultLogPriority","method:Log.clearLogPriority"],
        ref:"class:Log",
        classAttrs:["classAttr:Log.defaultPriority", "classAttr:Log.stackTracePriority"],
        classMethods:["classMethod:Log.getDefaultLogPriority", "classMethod:Log.applyLogPriorities", 
         "classMethod:Log.getLogPriorities","classMethod:Log.getPriority", "classMethod:Log.setPriority", 
         "classMethod:Log.setDefaultPriority","classMethod:Log.getDefaultPriority", "classMethod:Log.clearPriority", 
         "classMethod:Log.isEnabledFor","classMethod:Log.show", "classMethod:Log.clear", "classMethod:Log.traceMethod", 
         "classMethod:Log.timeMethod"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"A logging system similar to the Java log4j package: messages are logged with a \"category\" and\n \"priority\", and developers can dynamically set which log messages are being displayed.\n <P>\n 5 log priorities are available, with the following general meaning:\n <ul>\n <li> \"debug\": diagnostic info which is only likely to be understood by a developer with\n source access, or would occur too frequently for normal usage\n <li> \"info\": reports of significant events in the normal operation of the subsystem\n <li> \"warn\": some kind of problem is likely to occur, an API appears is apparently being\n misused or will yield a partial or very slow result\n <li> \"error\": a definite error has occurred which may be recoverable\n <li> \"fatal\": total failure with no possibility of recovery\n </ul>\n <P>\n Log categories do not need to be declared in advance - you can simply make up a category name and\n start logging to it, and control whether that category's messages will be displayed via\n <code>setPriority()</code>.\n <P>\n <b>NOTE:</b> to open the Developer Console in any page that loads ISC, type\n javascript:isc.Log.show() in the URL bar - this URL is bookmarkable.  \n <P>\n The Developer Console should <b>always</b> be open while developing any ISC-enabled application,\n because ISC logs many important errors and warnings to the Developer Console.\n <P>\n In Internet Explorer, the Developer Console is able to log a stack trace for every JS error,\n including errors that occur in non-ISC code.\n <P>\n NOTE: if you have the Microsoft JavaScript Debugger installed, ISC will be unable to log stack\n traces on JS errors until you go to Tools->Internet Options->Advanced Tab and check \"Disable\n script debugging\".  The ability to see stack traces in the Developer Console is generally much\n more useful for debugging ISC-based applications than the generic Javascript Debugging\n facilities.",
        name:"Log",
        seeAlso:[
            {ref:"classMethod:Log.setPriority", description:null}
        ],
        type:"class",
        groups:["debug"]
    },
    "group:image":{
        ref:"group:image",
        refs:[],
        description:"Utilities to render images",
        name:"image",
        seeAlso:[],
        type:"group"
    },
    "attr:ResultSet.fetchOperation":{
        ref:"attr:ResultSet.fetchOperation",
        flags:"IR",
        description:"Operation this dataModel should use to fetch sets of objects",
        name:"fetchOperation",
        seeAlso:[],
        valueType:"Operation or ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "attr:StatefulCanvas.showSelectedIcon":{
        ref:"attr:StatefulCanvas.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "attr:Dialog.showToolbar":{
        ref:"attr:Dialog.showToolbar",
        flags:"IRW",
        description:"Whether to show a toolbar of buttons at the bottom of the Dialog.",
        name:"showToolbar",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Dialog",
        groups:["appearance", "toolbar"]
    },
    "attr:DetailViewer.emptyMessage":{
        ref:"attr:DetailViewer.emptyMessage",
        flags:"IRW",
        description:"The string to display in the body of a detailViewer with no records.",
        name:"emptyMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"No items to display.\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["emptyMessage"]
    },
    "group:clipping":{
        ref:"group:clipping",
        refs:[],
        name:"clipping",
        seeAlso:[],
        type:"group"
    },
    "method:DynamicForm.filterData":{
        ref:"method:DynamicForm.filterData",
        flags:"",
        description:" Retrieve data that matches the provided criteria, and edit the first record returned.<br>\n Differs from ${isc.DocUtils.linkForRef('method:DynamicForm.fetchData')} in that a case insensitive substring match\n will be performed against the criteria to retrieve the data.\n \n",
        name:"filterData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "attr:Window.showMaximizeButton":{
        ref:"attr:Window.showMaximizeButton",
        flags:"IRW",
        description:"If true, show a maximize button in the header - clicking it maximizes the Window",
        name:"showMaximizeButton",
        setter:["setShowMaximizeButton"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:ResultSet.resultSize":{
        ref:"attr:ResultSet.resultSize",
        flags:"IRWA",
        description:"How many rows to retrieve at once.\n <P>\n Applicable only with <code>fetchMode: \"paged\"</code>.  When a paged ResultSet is asked\n for rows that have not yet been loaded, it will fetch adjacent rows that are likely to\n be required soon, in batches of this size.",
        name:"resultSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"75",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching"]
    },
    "group:cellEditing":{
        ref:"group:cellEditing",
        refs:["attr:CubeGrid.canEdit", "attr:CubeGrid.editByCell", "attr:CubeGrid.saveByCell"],
        name:"cellEditing",
        seeAlso:[],
        type:"group"
    },
    "method:StatefulCanvas.removeFromRadioGroup":{
        ref:"method:StatefulCanvas.removeFromRadioGroup",
        flags:"A",
        description:" Remove this widget from the specified mutually exclusive selection group with the ID\n passed in.\n No-op's if this widget is not a member of the groupID passed in.\n If no groupID is passed in, defaults to removing from whatever radioGroup this widget\n is a member of.\n",
        name:"removeFromRadioGroup",
        seeAlso:[],
        params:[
            {description:"- optional radio group ID (to ensure the widget is removed                                        from the appropriate group.", 
             optional:true,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state", "event handling"]
    },
    "attr:Button.iconHeight":{
        ref:"attr:Button.iconHeight",
        flags:"IR",
        description:"Height in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:ListGridField.editorValueIcons":{
        ref:"attr:ListGridField.editorValueIcons",
        flags:"IRW",
        description:"When some cell in this field is being edited, setting this property will specify the\n value icons to display in the cell's editor. If unset, the editor's valueIcons\n will be determined in the same way as it would be for a static cell.",
        name:"editorValueIcons",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:ListGridField.showRollOverIcon":{
        ref:"attr:ListGridField.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "attr:OperationBinding.serverObject":{
        ref:"attr:OperationBinding.serverObject",
        flags:"IR",
        description:"Optional ServerObject declaration that specifies the ServerObject configuration for this\n operationBinding.  In the absense of a serverObject specification here, the one specified on\n the DataSource itself is used by default, if present (${isc.DocUtils.linkForRef('attr:DataSource.serverObject')}).  If\n neither is present, then Direct Method Invocation will not be enabled for this operationBinding.",
        name:"serverObject",
        seeAlso:[
            {ref:"attr:DataSource.serverObject", description:null}
        ],
        valueType:"ServerObject",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        requiresModules:["SCServer"]
    },
    "method:Date.toUSShortDate":{
        ref:"method:Date.toUSShortDate",
        flags:"",
        description:"			Return this date in the format: <code>MM/DD/YYYY</code>\n",
        name:"toUSShortDate",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:Canvas.hoverHidden":{
        ref:"method:Canvas.hoverHidden",
        flags:"A",
        description:" If ${isc.DocUtils.linkForRef('attr:Canvas.showHover','showHover')} is true for this canvas, this notification method will be\n fired whenever the hover shown in response to ${isc.DocUtils.linkForRef('method:Canvas.handleHover','handleHover()')} is \n hidden. This method may be observed or overridden.\n",
        name:"hoverHidden",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:ListGrid.getAllEditRows":{
        ref:"method:ListGrid.getAllEditRows",
        flags:"",
        description:" Returns an array of every rowNum for which we have pending (unsubmitted) edits.\n",
        name:"getAllEditRows",
        seeAlso:[],
        returns:{description:"Array of rowNums for rows with edit values pending submission.", type:"array"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:CubeGrid.canCollapseFacets":{
        ref:"attr:CubeGrid.canCollapseFacets",
        flags:"IRW",
        description:"If true, hierarchical facets will show expand/collapse controls to allow the user to\n expand and collapse the tree of facetValues for that facet.",
        name:"canCollapseFacets",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetExpansion"]
    },
    "group:scroll":{
        ref:"group:scroll",
        refs:["method:Scrollbar.setScrollTarget"],
        name:"scroll",
        seeAlso:[],
        type:"group"
    },
    "method:ResultSet.applyFilter":{
        ref:"method:ResultSet.applyFilter",
        flags:"A",
        description:" The ResultSet will call applyFilter() when it needs to determine whether rows match the\n current filter criteria.\n <P>\n Default behavior is to call ${isc.DocUtils.linkForRef('method:DataSource.applyFilter')} to determine which rows match\n that provided criteria.\n <P>\n Override this method or ${isc.DocUtils.linkForRef('method:DataSource.applyFilter')} to implement your own client-side\n filtering behavior.\n\n",
        name:"applyFilter",
        seeAlso:[],
        params:[
            {description:"the list of rows", optional:false, name:"data", defaultValue:null, 
             type:"Array"},
            {description:"the filter criteria", optional:false, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"dataSource request properties", optional:true, name:"requestProperties", 
             defaultValue:null,type:"DSRequest Properties"}
        ],
        returns:{description:"the list of matching rows", type:"Array"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "group:platformDependencies":{
        ref:"group:platformDependencies",
        title:"Platform Dependencies",
        treeLocation:["/Client Reference/System"],
        refs:[],
        description:"Client-side processing of web services, XML parsing, and some UI loading mechanisms rely on\n a native in-browser XML parser and/or the XMLHttpRequest object - one or both of which will\n not be available if the end user disables ActiveX support in Internet Explorer.  Note that\n these features do not require plugins or downloads of any kind - IE simply exposes certain\n built-in functionality like the XML parser and XMLHttpRequest through the ActiveX\n interface.  Disabling ActiveX also disables all browser plugins such as Flash, Java, SVG, etc.\n <p>\n Barring ActiveX being disabled, the XMLHttpRequest object is available to SmartClient on all\n supported browsers and an XML parser is available on all supported browsers except Safari\n versions prior to 3.0.3.\n <p>\n SmartClient client-server communication is not affected by the lack of an XML parser or the\n XMLHttpRequest object, but the <code>xmlHttpRequest</code> transport will not be available\n if the XMLHttpRequest object is not available.  Instead, the <code>hiddenFrame</code> or the\n <code>scriptInclude</code> transports are used for client-server communication.\n <p>\n <b><u>XML Parser</u></b>\n <p>\n If an XML Parser is not available to SmartClient, all client-side web service bindings and\n related methods will be unavailable.  Turning off ActiveX disables integration paths 2 and 3\n in the diagram below.  If you want to bind to web services and require deployment to IE\n without ActiveX (or you need to support Safari pre 3.0.3), you'll need to do all XML processing on the\n server and use either the SmartClient DSRequest or JSON operation pathways (integration\n paths 1 and 4 in the diagram below).  See the discussion in ${isc.DocUtils.linkForRef('group:clientServerIntegration')}\n for more information on the integration paths shown in the diagram below.\n <p>\n You call ${isc.DocUtils.linkForRef('classMethod:XMLTools.nativeXMLAvailable')} to check for the avialability of a native XML\n parser at runtime.\n <p>\n <img src=\"${isc.DocViewer.instance.referenceRoot}skin/ds_bindings.png\" width=763 height=475>\n <p>\n <b><u>XMLHttpRequest</u></b>\n <p>\n The XMLHttpRequest object is used for the <code>xmlHttpRequest</code> ${isc.DocUtils.linkForRef('type:RPCTransport')}.\n Safari, Mozilla, Firefox, and IE 7 provide a native XMLHttpRequest implementation that is\n not affected by ActiveX being disabled (although the native IE 7 implementation can still be\n explicitly disabled by the end user).  IE 5.5 and IE 6.0 rely on the ActiveX bridge to\n support XMLHttpRequest, so if ActiveX is disabled in these browsers, XMLHttpRequest will not\n be available.\n <p>\n The lack of the XMLHttpRequest objects affects UI loading features like ${isc.DocUtils.linkForRef('class:ViewLoader')},\n and ${isc.DocUtils.linkForRef('class:HTMLFlow')} when used in remote loading mode (via ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')},\n ${isc.DocUtils.linkForRef('method:HTMLFlow.setContentsURL')}, but does not affect the typical client/server communication\n pathways (integration paths 1 and 5 in the diagram above).\n <p>\n Also affected are low level features ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')},\n ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')}, and ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}.\n <p>\n In all of the above cases, it is possible to use the <code>hiddenFrame</code> transport to\n support these features when XMLHttpRequest is not available.  SmartClient will automatically\n send the request using the <code>hiddenFrame</code> transport when it detects that\n XMLHttpRequest is unavailable.  To support the above features, you'll need to use the\n RPCManager APIs on the server to send back the data that would normally be returned by\n XMLHttpRequest.  Since XMLHttpRequest cannot target URLs outside of the current domain, this\n strategy applies also to using the above features with cross-domain URLs.\n <p>\n You can call ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')} to check for the availability of\n XMLHttpRequest at runtime.",
        name:"platformDependencies",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setRect":{
        ref:"method:Canvas.setRect",
        flags:"",
        description:" Set all four coordinates, relative to the enclosing context, at once.\n <P>\n Moves the widget so that its top-left corner is at the specified top-left coordinates,\n then resizes it to the specified width and height.\n\n",
        name:"setRect",
        seeAlso:[],
        params:[
            {description:"new left coordinate, Array of coordinates                                                  in parameter order, or Object with left,\n                                                  top, width, height properties.  If an Array\n                                                  or Object is passed, the remaining\n                                                  parameters are ignored", 
             optional:true,name:"left", defaultValue:null, type:"number, Array, Object"},
            {description:"new top coordinate", optional:true, name:"top", defaultValue:null, 
             type:"number"},
            {description:"new width", optional:true, name:"width", defaultValue:null, type:"number"},
            {description:"new height", optional:true, name:"height", defaultValue:null, type:"number"}
        ],
        returns:{description:"whether the component's size actually changed", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "sizing"]
    },
    "method:CubeGrid.getAllEditCells":{
        ref:"method:CubeGrid.getAllEditCells",
        flags:"",
        description:" Method to determine which records currently have pending (unsubmitted) edits.\n Returns an array of 2 element arrays indicating the <code>[rowNum,colNum]</code> of the\n cells in question.\n",
        name:"getAllEditCells",
        seeAlso:[],
        returns:{description:"Array of <code>[rowNum,colNum]</code> arrays for cells with edit               values pending submission.", 
         type:"array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "classMethod:Class.changeDefaults":{
        ref:"classMethod:Class.changeDefaults",
        flags:"A",
        description:" \n Changes a set of defaults defined as a JavaScript Object.  For these kind of properties,\n simply calling ${isc.DocUtils.linkForRef('method:Class.addProperties')} would replace the original Object\n with yours, wiping out settings required for the basic functionality of the component.\n This method instead applies your overrides over the existing properties, without\n destroying non-overridden properties.\n <p>\n For example let's say you have a component that's defined as follows\n <pre>\n isc.defineClass(\"MyComponent\");\n isc.MyComponent.addProperties({\n     simpleProperty: \"some value\",\n     propertyBlock : {\n       foo: \"bar\",\n       zoo: \"moo\"\n     }\n }\n </pre>\n If you wanted to override simpleProperty, you can just call ${isc.DocUtils.linkForRef('method:Class.addProperties')}\n like this:\n <pre>\n isc.addProperties(MyComponent, {\n     simpleProperty: \"my override\"\n });\n </pre>\n If you want to override the value of <code>propertyBlock.moo</code> above,\n but you don't want to clobber the value of <code>propertyBlock.zoo</code>.  If you use\n the above pattern like so:\n <pre>\n isc.addProperties(MyComponent, {\n     propertyBlock: {\n         foo: \"new value\",\n         zoo: \"moo\"\n     }\n });\n </pre>\n You need to re-specify the value of <code>propertyBlock.zoo</code> which you didn't want\n to override.  Failing to respecify it would destroy the value.\n <p>\n Instead of re-specifying the value, you can use this method to modify the value of\n <code>foo</code> - like this:\n <pre>\n isc.changeDefaults(MyComponent, \"propertyBlock\", {\n     foo: \"new value\"\n });\n </pre>\n <p>\n A typical pattern for creating a custom component with overrides only is to create a\n subclass of the component you want to customize and then call\n <code>changeDefaults()</code> to modify override points that are specified as object\n literals. \n <p>\n SmartClient components that accept overrides in this manner will typically document what\n properties are overrideable.\n\n",
        name:"changeDefaults",
        seeAlso:[],
        params:[
            {description:"name of the property to change", optional:false, name:"defaultsName", 
             defaultValue:null,type:"String"},
            {description:"The new default(s)", optional:false, name:"newDefaults", defaultValue:null, 
             type:"Object"}
        ],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "group:dynamicMenuItem":{
        ref:"group:dynamicMenuItem",
        refs:["attr:MenuItem.enableIf", "attr:MenuItem.checkIf", "attr:MenuItem.dynamicTitle", 
         "attr:MenuItem.dynamicIcon"],
        name:"dynamicMenuItem",
        seeAlso:[],
        type:"group"
    },
    "classAttr:RPCResponse.STATUS_TRANSPORT_ERROR":{
        ref:"classAttr:RPCResponse.STATUS_TRANSPORT_ERROR",
        flags:"R",
        description:"This response code is usable only with the XMLHttpRequest transport and indicates that\n the server returned an HTTP response code other than 200: OK.  To get the actual\n response code, you can query rpcResponse.httpResponseCode in your callback.\n <p>\n Note that currently this error code will never occur for the <code>hiddenFrame</code>\n transport - instead, use ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_SERVER_TIMEOUT')} to detect\n <code>hiddenFrame</code> transport errors.",
        name:"STATUS_TRANSPORT_ERROR",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"-90",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "type:DSCallback":{
        ref:"type:DSCallback",
        treeLocation:["Client Reference/Data Binding/DataSource"],
        description:"A ${isc.DocUtils.linkForRef('type:Callback')} to evaluate when a DataSource request completes.\n <P>\n The parameters available in the DSCallback expression are:\n <ul>\n <li>dsResponse: a ${isc.DocUtils.linkForRef('class:DSResponse')} instance with metadata about the returned data\n <li>data: data returned to satisfy the DataSource request.  See the\n     ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operations')} topic for expected results\n     for each type of DataSource operation\n <li>dsRequest: the ${isc.DocUtils.linkForRef('class:DSRequest')} that was sent.  You can use\n     ${isc.DocUtils.linkForRef('attr:DSRequest.clientContext')} to track state during the server turnaround.\n </ul>\n For example, if you had a DynamicForm with ID \"myForm\" and you wanted to retrieve a \n record from a DataSource \"myUsers\", where each record has a \"userId\" field:\n <pre>\n     myUsers.fetchData({ userId : \"fred\" }, \"myForm.setValues(data)\");\n </pre>\n or\n <pre>\n     myUsers.fetchData({ userId : \"fred\" }, function (dsResponse, data, dsRequest) {\n                                              myForm.setValues(data);\n                                            });\n </pre>",
        name:"DSCallback",
        seeAlso:[],
        type:"type"
    },
    "classAttr:Validator.mustBeGreaterThan":{
        ref:"classAttr:Validator.mustBeGreaterThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>integerRange</code> type validator\n  returns false because the value passed in is less than the specified minimum.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeGreaterThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be at least ${min}\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:SchemaSet.schemaNamespace":{
        ref:"attr:SchemaSet.schemaNamespace",
        flags:"R",
        description:"Namespace of this SchemaSet, derived from the <code>targetNamespace</code>\n attribute of the <code>&lt;schema&gt;</code> element.",
        name:"schemaNamespace",
        seeAlso:[],
        valueType:"URI",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SchemaSet",
        groups:["webService"]
    },
    "method:Tree.getDescendantFolders":{
        ref:"method:Tree.getDescendantFolders",
        flags:"",
        description:"\n Ruturns the list of all descendants of a node that are folders.  This works just like\n ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, except leaf nodes are not part of the returned list.\n Like ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, this method can be very slow for large trees.\n Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in combination with ${isc.DocUtils.linkForRef('method:Tree.getFolders')} \n be much faster.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getDescendantFolders",
        seeAlso:[],
        params:[
            {description:"node in question (the root node is assumed if none specified)", 
             optional:true,name:"node", defaultValue:null, type:"TreeNode"}
        ],
        returns:{description:"List of descendants of the node that are folders.", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:FusionChart.chartsBaseURL":{
        ref:"attr:FusionChart.chartsBaseURL",
        flags:"IR",
        description:"Base URL where FusionCharts are installed.  SmartClient expects to find the FusionCharts\n \".swf\" files under this URL.\n <P>\n The default value indicates that SmartClient will look for a FusionCharts directory\n parallel to the \"isomorphic/\" directory.\n <P>\n Note that the URL formation logic automatically compensates for various inconsistencies and\n typos in the default names for the chart .swf files, as well as differences between\n FusionCharts 2.3 and 3.0.   The chart .swf files should be left exactly as found in the\n FusionCharts distribution.  If you have renamed the charts for other purposes, you\n can set ${isc.DocUtils.linkForRef('attr:FusionChart.chartURL')} to the full path to any given chart type.",
        name:"chartsBaseURL",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"[ISOMORPHIC]/../FusionCharts/\"",
        type:"attr",
        definingClass:"class:FusionChart"
    },
    "attr:Window.headerLabel":{
        ref:"attr:Window.headerLabel",
        flags:"R",
        description:"Label that shows Window title in header.",
        name:"headerLabel",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "method:DynamicForm.itemChange":{
        ref:"method:DynamicForm.itemChange",
        flags:"",
        description:" Handler fired when there is a change() event fired on a FormItem within this form.\n <P>\n Fires after the change() handler on the FormItem itself, and only if the item did not\n cancel the change event and chooses to allow it to propagate to the form as a whole. \n\n",
        name:"itemChange",
        seeAlso:[],
        params:[
            {description:"the FormItem where the change event occurred", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"},
            {description:"new value for the FormItem", optional:false, name:"newValue", 
             defaultValue:null,type:"any"},
            {description:"value for the FormItem had previous to this change() event", optional:false, 
             name:"oldValue",defaultValue:null, type:"any"}
        ],
        returns:{description:"return false to cancel the change, or true to allow it", type:"boolean"},
        type:"method",
        definingClass:"class:DynamicForm"
    },
    "method:Window.setShowMinimizeButton":{
        ref:"method:Window.setShowMinimizeButton",
        flags:"",
        description:" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton')} to show / hide the minimizeButton\n",
        name:"setShowMinimizeButton",
        seeAlso:[
            {ref:"attr:Window.headerControls", description:null},
            {ref:"attr:Window.showMinimizeButton", description:null}
        ],
        type:"method",
        definingClass:"class:Window"
    },
    "attr:Tree.showRoot":{
        ref:"attr:Tree.showRoot",
        flags:"IRW",
        description:"Controls whether a call to ${isc.DocUtils.linkForRef('method:Tree.getOpenList')} includes the root node.  Since view\n components such as a ${isc.DocUtils.linkForRef('class:TreeGrid')} use <code>getOpenList()</code> to display the currently\n visible tree, <code>showRoot</code> controls whether the root node is shown to the user.\n <P>\n All Trees must have a single, logical root, however, most applications want to show multiple\n nodes at top level.  <code>showRoot:false</code>, the default setting, prevents the logical\n root from being shown, so that the displayed tree begins with the children of root.\n <P>\n You can set <code>showRoot:true</code> to show the single, logical root node as the only\n top-level node.  This property is only meaningful for Trees where you supplied a value for\n ${isc.DocUtils.linkForRef('attr:Tree.root')}, otherwise, you will see an automatically generated root node that is\n meaningless to the user.",
        name:"showRoot",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Tree"
    },
    "method:Button.iconClick":{
        ref:"method:Button.iconClick",
        flags:"",
        description:" If this button is showing an ${isc.DocUtils.linkForRef('attr:Button.icon','icon')}, a separate click handler for the\n icon may be defined as <code>this.iconClick</code>.\n Returning false will suppress the standard button click handling code.\n",
        name:"iconClick",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:Chart.valueTitle":{
        ref:"attr:Chart.valueTitle",
        flags:"IR",
        description:"A label for the data values, such as \"Sales in Thousands\", typically used as the label for\n the value axis.",
        name:"valueTitle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "classAttr:RPCManager.defaultTimeout":{
        ref:"classAttr:RPCManager.defaultTimeout",
        flags:"RW",
        description:"In milliseconds, how long the RPCManager waits for an RPC request to complete before\n returning an error.  If set to zero, the RPCManager will not enforce a timeout, but note that\n most browsers enforce their own timeouts on HTTP requests.\n <p>\n For the \"xmlHttpRequest\" transport, this timeout can only happen if the server actually fails to\n respond within the specified number of milliseconds.  For the \"hiddenFrames\" transport,\n this timeout will occur for non-200 (HTTP_OK) responses.",
        name:"defaultTimeout",
        seeAlso:[],
        valueType:"number",
        defaultValue:"240000 [4 minutes]",
        type:"classAttr",
        definingClass:"class:RPCManager"
    },
    "method:Dialog.cancelClick":{
        ref:"method:Dialog.cancelClick",
        flags:"",
        description:" Handle a click on the 'cancel' button of this Dialog.\n Default implementation is to return null and hide the Dialog.\n Override to do something else.\n",
        name:"cancelClick",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "attr:CubeGrid.facets":{
        ref:"attr:CubeGrid.facets",
        flags:"I",
        description:"Facet definitions for this CubeGrid.  Facets, also called \"dimensions\", are orthogonal\n aspects of the data model.\n <P>\n For example, you can look at profit by the facets \"plant and product\" or by \"product and\n plant\" and it's the same number, because the facets - plant and product - are the same.\n What would change the profit numbers would be to remove a facet, called \"summarizing\",\n or add a new facet, called \"drilling down\".  For example, showing profit by plant and\n product, you could \"drill down\" by adding the region facet, which would divide profit\n among each region.  Or you could remove the \"plant\" facet, showing total profit for each\n \"product\", summed across all plants.",
        name:"facets",
        seeAlso:[
            {ref:"method:CubeGrid.getFacet", description:null},
            {ref:"class:Facet", description:null},
            {ref:"method:CubeGrid.getFacetValue", description:null},
            {ref:"class:FacetValue", description:null}
        ],
        valueType:"Array of Facet",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "method:List.lastIndexOf":{
        ref:"method:List.lastIndexOf",
        flags:"",
        description:" Return the position in the list of the last instance of the specified object.\n <p>\n If pos is specified, starts looking before that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"lastIndexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"earliest index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:CheckboxItem.valueIconHeight":{
        ref:"attr:CheckboxItem.valueIconHeight",
        flags:"IRW",
        description:"Height of the checkbox image.",
        name:"valueIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"13",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["valueIcons"]
    },
    "method:ListGrid.getGroupByText":{
        ref:"method:ListGrid.getGroupByText",
        flags:"",
        description:" If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and\n ${isc.DocUtils.linkForRef('attr:ListGrid.canGroupBy','this.canGroupBy')} is true, this string will be shown as the\n title for the menu item to toggle the group by setting for a field.<br>\n Default implementation returns <code>\"Group by \"</code> + the field's\n title.\n",
        name:"getGroupByText",
        seeAlso:[],
        params:[
            {description:"field to get the menu item title for", optional:false, name:"field", 
             defaultValue:null,type:"ListGridField"}
        ],
        returns:{description:"Title to show in the menu item", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "attr:ListGrid.headerMenuButton":{
        ref:"attr:ListGrid.headerMenuButton",
        flags:"RA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, when the user rolls over the header buttons in this\n grid the headerMenuButton will be shown over the header button in question. When clicked\n this button will display the standard header context menu (see\n ${isc.DocUtils.linkForRef('method:ListGrid.displayHeaderContextMenu')}).\n <P>\n ${isc.DocUtils.linkForRef('group:headerMenuButton','Several properties')} exist to customize the appearance of the\n headerMenuButton. Also see the ${isc.DocUtils.linkForRef('type:AutoChild')} documentation for information on how \n to make freeform modifications to autoChild widgets",
        name:"headerMenuButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "attr:DetailViewer.loadingMessageStyle":{
        ref:"attr:DetailViewer.loadingMessageStyle",
        flags:"IRWA",
        description:"CSS style to use for the ${isc.DocUtils.linkForRef('attr:DetailViewer.loadingMessage')}.",
        name:"loadingMessageStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"normal\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["emptyMessage"]
    },
    "attr:FormItem.type":{
        ref:"attr:FormItem.type",
        flags:"IR",
        description:"The DynamicForm picks a field renderer based on the type of the field (and sometimes other\n attributes of the field).",
        name:"type",
        seeAlso:[
            {ref:"type:FormItemType", description:null},
            {ref:"type:FieldType", description:null}
        ],
        valueType:"FormItemType",
        defaultValue:"\"text\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:SelectItem.displayField":{
        flags:"IRW",
        getter:["FormItem.getDisplayFieldName"],
        type:"attr",
        ref:"attr:SelectItem.displayField",
        description:"Specifies an alternative field from which display values should be retrieved for this\n item.<br>\n If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound \n to the same dataSource as the form as a whole, this is implemented by picking up the\n value of the specified field from the Form's values object.<br>\n Otherwise this item will attempt to map its underlying value to a display value\n by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the \n ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the \n <code>displayField</code> value from that record.<br>\n This essentially enables the specified <code>optionDataSource</code> to be used as\n a server based ${isc.DocUtils.linkForRef('group:valueMap')}.",
        name:"displayField",
        valueType:"string",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('relatedRecords')}"],
        defaultValue:"null",
        groups:["display_values"],
        definingClass:"class:SelectItem"
    },
    "class:Class":{
        methods:["method:Class.init", "method:Class.getID", "method:Class.getClass", 
         "method:Class.getSuperClass","method:Class.getClassName", "method:Class.addProperties", "method:Class.addPropertyList", 
         "method:Class.setProperty","method:Class.setProperties", "method:Class.isA", "method:Class.observe", 
         "method:Class.ignore","method:Class.isObserving", "method:Class.fireCallback", "method:Class.delayCall", 
         "method:Class.map","method:Class.Super", "method:Class.toString"],
        ref:"class:Class",
        classAttrs:[],
        classMethods:["classMethod:Class.create", "classMethod:Class.getClassName", 
         "classMethod:Class.getSuperClass","classMethod:Class.registerStringMethods", "classMethod:Class.addClassProperties", 
         "classMethod:Class.addProperties","classMethod:Class.addPropertyList", "classMethod:Class.changeDefaults", 
         "classMethod:Class.setProperties","classMethod:Class.isA", "classMethod:Class.Super", "classMethod:Class.map", 
         "classMethod:Class.getInstanceProperty","classMethod:Class.setInstanceProperty", "classMethod:Class.fireCallback", 
         "classMethod:Class.delayCall","classMethod:Class.toString"],
        treeLocation:["Client Reference/System"],
        attrs:["attr:Class.addPropertiesOnCreate"],
        description:"The Class object is root of the Isomorphic SmartClient inheritance tree -- it includes\n functionality for creating instances, adding methods and properties, getting prototypes,\n etc.<br><br>\n\n To add functionality to ALL classes, add them to Class.<br><br>\n\n To create a Class, call <code>ClassFactory.defineClass(\"MyClass\", \"MySuperClass\")</code>\n <P>\n <code>defineClass</code> will return the created class, and make it available as\n <code>isc.MyClass</code>, and as the global variable <code>MyClass</code> if not in\n ${isc.DocUtils.linkForRef('class:isc','portal mode')}.\n <P>\n You can then:\n <UL>\n		<LI>add class-level (static) properties and methods to the class:\n				<code>MyClass.addClassProperties()</code>	\n			these methods and properties are accessed through the Class variable itself, eg:\n				<code>MyClass.someStaticMethod()</code> or <code>MyClass.someStaticProperty</code>\n\n		<LI>add default instance properties and methods to the class:\n				<code>MyClass.addProperties()</code>\n			these methods and properties are accessed through a class instance, eg:\n				<code>var myInstance = MyClass.create();</code>\n				<code>myInstance.someInstanceMethod()</code>\n\n		<LI>create new instances of this class:\n				<code>var myInstance = MyClass.create()</code>\n </UL>\n NOTE: as a convention, all class names begin with a capital letter and all instances begin\n with a lower case letter.",
        name:"Class",
        seeAlso:[],
        type:"class"
    },
    "method:TreeGrid.willAcceptDrop":{
        ref:"method:TreeGrid.willAcceptDrop",
        flags:"A",
        description:" \n This method overrides ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')} and works as follows:\n <br><br>\n First, ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')} (the superclass definition) is consulted.  If it\n returns false, then this method returns false immediately.<br>\n This handles the following cases:<br>\n - reordering of records withing this TreeGrid when ${isc.DocUtils.linkForRef('attr:ListGrid.canReorderRecords')} is true<br>\n - accepting dropped records from another dragTarget when ${isc.DocUtils.linkForRef('attr:ListGrid.canAcceptDroppedRecords')} \n   is true and the dragTarget gives us a valid set of records to drop into place.<br>\n - disallowing drop over disabled nodes, or nodes with <code>canAcceptDrop:false</code>\n <br>\n This method will also return false if the drop occurred over a leaf node whos immediate \n parent has <code>canAcceptDrop</code> set to <code>false</code><br>\n If ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is true, and the user is dragging a node from one folder\n to another, this method will return true to allow the change of parent folder.<br>\n <br><br>\n Otherwise this method returns true.\n\n",
        name:"willAcceptDrop",
        seeAlso:[],
        returns:{description:"true if this component will accept a drop of the dragData", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["event handling"]
    },
    "attr:Canvas.maxWidth":{
        ref:"attr:Canvas.maxWidth",
        flags:"IRWA",
        description:"Maximum width that this Canvas can be resized to.",
        name:"maxWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"10000",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:FormItem.imageURLSuffix":{
        ref:"attr:FormItem.imageURLSuffix",
        flags:"IRWA",
        description:"Suffix to apply to the end of any ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} when determining the URL for\n the image. A common usage would be to specify a suffix of <code>\".gif\"</code> in which\n case the <code>valueIcons</code> property would map values to the names of images without\n the <code>\".gif\"</code> extension.",
        name:"imageURLSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "method:Array.makeIndex":{
        ref:"method:Array.makeIndex",
        flags:"A",
        description:" Make an index for the items in this Array by a particular property of each item.\n <P>\n Returns an Object with keys for each distinct listItem[property] value.  Each key will point\n to an array of items that share that property value.  The sub-array will be in the same order\n that they are in this list.\n\n",
        name:"makeIndex",
        seeAlso:[],
        params:[
            {description:"names of the property to index by", optional:false, name:"property", 
             defaultValue:null,type:"strings"},
            {description:"if true, we always make an array for every index.  if false, we make an Array only\n              when more than one item has the same value for the index property", 
             optional:false,name:"alwaysMakeArray", defaultValue:"false", type:"boolean"}
        ],
        returns:{description:"index object", type:"object"},
        type:"method",
        definingClass:"object:Array"
    },
    "attr:SimpleType.validators":{
        ref:"attr:SimpleType.validators",
        flags:"IR",
        description:"Validators to apply to value of this type.",
        name:"validators",
        seeAlso:[],
        valueType:"Array of Validator",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SimpleType",
        groups:["validation"]
    },
    "method:Canvas.setAccessKey":{
        ref:"method:Canvas.setAccessKey",
        flags:"A",
        description:" Set the accessKey for this canvas.\n <P>\n The accessKey can be set to any alphanumeric character (symbols not supported)\n Having set an accessKey, the canvas will be given focus when the user hits \n Alt+[accessKey], or in Mozilla Firefox 2.0 and above, Shift+Alt+[accessKey].\n\n",
        name:"setAccessKey",
        seeAlso:[],
        params:[
            {description:"Character to use as an accessKey for this widget.  Case Insensitive.", 
             optional:false,name:"accessKey", defaultValue:null, type:null}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "attr:FormItem.hintClassName":{
        ref:"attr:FormItem.hintClassName",
        deprecated:"As of SmartClient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.hintStyle')}",
        flags:"IRW",
        description:"CSS class for the \"hint\" string.",
        name:"hintClassName",
        seeAlso:[
            {ref:"attr:FormItem.hint", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"formHint\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:CubeGrid.facetLabelHoverAlign":{
        ref:"attr:CubeGrid.facetLabelHoverAlign",
        flags:"IRWA",
        description:"Allows the developer to override the horizontal text alignment of hover tips shown for\n facetLabels.  If unspecified the hover canvas content alignment will be set by\n <code>this.hoverAlign</code> if specified.",
        name:"facetLabelHoverAlign",
        seeAlso:[
            {ref:"attr:Canvas.hoverAlign", description:null}
        ],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "group:members":{
        ref:"group:members",
        refs:["method:ValuesManager.addMember", "method:ValuesManager.addMembers", 
         "method:ValuesManager.removeMember","method:ValuesManager.removeMembers", "method:ValuesManager.getMembers", 
         "method:ValuesManager.getMember","method:ValuesManager.getMemberForField"],
        name:"members",
        seeAlso:[],
        type:"group"
    },
    "classMethod:FormItem.create":{
        ref:"classMethod:FormItem.create",
        flags:"",
        description:" FormItem.create() should never be called directly, instead, create a ${isc.DocUtils.linkForRef('class:DynamicForm')}\n and specify form items via ${isc.DocUtils.linkForRef('attr:DynamicForm.items','form.items')}.\n\n",
        name:"create",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:FormItem"
    },
    "method:Canvas.setCanFocus":{
        ref:"method:Canvas.setCanFocus",
        flags:"A",
        description:" Change whether a widget can accept keyboard focus. \n",
        name:"setCanFocus",
        seeAlso:[
            {ref:"attr:Canvas.canFocus", description:null}
        ],
        params:[
            {description:"whether the widget should now accept focus", optional:false, name:"canFocus", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "attr:Facet.width":{
        ref:"attr:Facet.width",
        flags:"IR",
        description:"Integer number of pixels.  For row facets, width of headers.",
        name:"width",
        seeAlso:[
            {ref:"attr:CubeGrid.defaultFacetWidth", description:null}
        ],
        valueType:"number",
        defaultValue:"cubeGrid.defaultFacetWidth",
        type:"attr",
        definingClass:"class:Facet"
    },
    "classMethod:Time.toTime":{
        ref:"classMethod:Time.toTime",
        flags:"",
        description:" Given a date object, return the time associated with the date as a string.\n If no formatter is passed, use the standard formatter set up via ${isc.DocUtils.linkForRef('classMethod:Time.setNormalDisplayFormat')}\n",
        name:"toTime",
        seeAlso:[],
        params:[
            {description:"Date to convert to a time string.", optional:false, name:"date", 
             defaultValue:null,type:"Date"},
            {description:"Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or\n  a string designating a standard formatter", 
             optional:true,name:"formatter", defaultValue:null, type:"timeFormatter|function"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "method:Array.sum":{
        ref:"method:Array.sum",
        flags:"",
        description:" 			Returns the sum of the numbers in the array, skipping non-numeric values.\n\n			If the start and/or end are given, uses only the specified subset of the list.\n\n",
        name:"sum",
        seeAlso:[],
        params:[
            {description:"optional start index (default is 0)", optional:true, name:"start", 
             defaultValue:null,type:"number"},
            {description:"optional end index (default is list.length)", optional:true, name:"end", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"sum of all items in the list", type:"number"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "method:ListGrid.parseEditorValue":{
        ref:"method:ListGrid.parseEditorValue",
        flags:"",
        description:" Method used to convert the value displayed in an editor for some cell being edited into\n a raw value for saving.<br>\n If <code>parseEditorValue</code> is defined at the field level for some cell being edited,\n the field level method will be used to parse the edit value and this method will not\n be called for that cell.<br>\n\n",
        name:"parseEditorValue",
        seeAlso:[
            {ref:"method:ListGridField.parseEditorValue", description:null},
            {ref:"method:ListGrid.formatEditorValue", description:null}
        ],
        params:[
            {description:"value displayed in the editor for the cell", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"record object for the row being edited. May be null if this                          is a new row being added to the end of the list.", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"value in raw format", type:"any"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:FormItemIcon.showOver":{
        ref:"attr:FormItemIcon.showOver",
        flags:"IRWA",
        description:"Should this icon's image switch to the appropriate \"over\" source when the user rolls\n  over or focuses on the icon?",
        name:"showOver",
        seeAlso:[
            {ref:"attr:FormItem.showOverIcons", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "attr:Canvas.snapHDirection":{
        ref:"attr:Canvas.snapHDirection",
        flags:"IRW",
        description:"The horizontal snap direction.\n Set this value to Canvas.BEFORE to snap to the nearest gridpoint to the left;\n set it to Canvas.AFTER to snap to the nearest gridpoint to the right; and set\n it to Canvas.NEAREST to snap to the nearest gridpoint in either direction.",
        name:"snapHDirection",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"attr:Canvas.snapResizeToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapResizeToGrid", description:null}
        ],
        valueType:"string",
        defaultValue:"Canvas.AFTER",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Splitbar.capSize":{
        ref:"attr:Splitbar.capSize",
        flags:"IR",
        description:"If the default items are used, capSize is the size in pixels of the first and last\n          images in this stretchImg.",
        name:"capSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["appearance"]
    },
    "attr:PickList.valueIconField":{
        ref:"attr:PickList.valueIconField",
        flags:"IRWA",
        description:"For Databound formItems, this property determines which column \n ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} should show up in for this formItem's pickList.<br>\n If unset valueIcons show up in the ${isc.DocUtils.linkForRef('attr:PickList.displayField')} column if specified, \n otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')} column.<br>\n In most cases only the <code>displayField</code> or <code>valueField</code> will be visible.\n This property is typically only required if custom ${isc.DocUtils.linkForRef('attr:PickList.pickListFields')} \n have been specfied for this item.",
        name:"valueIconField",
        seeAlso:[
            {ref:"attr:FormItem.valueIcons", description:null},
            {ref:"attr:PickList.pickListFields", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:Window.keepInParentRect":{
        ref:"attr:Window.keepInParentRect",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Window.canDragReposition')} or ${isc.DocUtils.linkForRef('attr:Window.canDragResize')} is true, should the\n windows size and position be constrained such that it remains within the viewport of\n its parent element (or for top level windows, within the viewport of the browser window)?\n <br>\n Can also be set to an array denoting an arbitrary rect [Left,Top,Width,Height] beyond\n which the window cannot be moved.\n <p>\n Note: keepInParentRect affects only user drag interactions, not programmatic moves.",
        name:"keepInParentRect",
        seeAlso:[
            {ref:"attr:Window.canDragReposition", description:null}
        ],
        valueType:"boolean or rect",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["dragdrop"]
    },
    "method:StretchImgButton.setState":{
        ref:"method:StretchImgButton.setState",
        flags:"",
        description:" Set the 'state' of this object, this changes it's appearance.\n\n",
        name:"setState",
        seeAlso:[
            {ref:"method:StretchImgButton.setDisabled", 
             description:"which also affects state values."}
        ],
        params:[
            {description:"new state", optional:false, name:"newState", defaultValue:null, type:"State"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state", "appearance"]
    },
    "method:Tree.setRoot":{
        ref:"method:Tree.setRoot",
        flags:"",
        description:"\n Set the root of the tree. \n\n",
        name:"setRoot",
        seeAlso:[],
        params:[
            {description:"new root node", optional:false, name:"newRoot", defaultValue:null, 
             type:"TreeNode"},
            {description:"set to true to automatically open the new root node.", optional:false, 
             name:"autoOpen",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "method:Tree.getOpenList":{
        ref:"method:Tree.getOpenList",
        flags:"",
        description:"\n Return a flattened list of nodes that are open under some parent, including the parent\n itself.  If the passed in node is a leaf, this method returns null\n\n",
        name:"getOpenList",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"flattened list of open nodes", type:"List of TreeNode"},
        type:"method",
        definingClass:"class:Tree"
    },
    "group:sharingNodes":{
        ref:"group:sharingNodes",
        title:"Sharing Nodes",
        refs:[],
        description:"For local Trees, that is, Trees that don't use load on demand, SmartClient supports setting\n up the Tree structure by setting properties such as \"childrenProperty\", directly on data\n nodes.  This allows for simpler, faster structures for many common tree uses, but can create\n confusion if nodes need to be shared across Trees.\n <P>\n <b>using one node in two places in one Tree</b>\n <P>\n To do this, either clone the shared node like so:<pre>\n\n     tree.add(isc.addProperties({}, sharedNode));\n\n </pre> or place the shared data in a shared subobject instead.\n <P>\n <b>sharing nodes or subtrees across Trees</b>\n <P>\n Individual nodes within differing tree structures can be shared by two Trees only if\n ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}, ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}, and ${isc.DocUtils.linkForRef('attr:Tree.openProperty')} have\n different values in each Tree.\n <P>\n As a special case of this, two Trees can maintain different open state across a single\n read-only structure as long as just \"openProperty\" has a different value in each Tree.",
        name:"sharingNodes",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setOpacity":{
        ref:"method:Canvas.setOpacity",
        flags:"",
        description:"			Sets the opacity for the widget to the newOpacity value. This newOpacity\n          value must be within the range of 0 (transparent) to 100 (opaque). <br>\n          In Internet Explorer, any other filter effects will be wiped out.\n",
        name:"setOpacity",
        seeAlso:[],
        params:[
            {description:"new opacity level", optional:false, name:"newOpacity", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('translucency')}"],
        definingClass:"class:Canvas",
        groups:["cues"]
    },
    "method:Array.findIndex":{
        ref:"method:Array.findIndex",
        flags:"",
        description:" Find the index of the first Object where property == value in the object.\n <P>\n Pass an Object instead to match multiple properties.\n <P>\n Note: for string values, matches are case sensitive.\n\n",
        name:"findIndex",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"object:Array",
        groups:["access", "find"]
    },
    "method:List.sort":{
        ref:"method:List.sort",
        flags:"",
        description:" Sorts the elements of the List in place.\n <P>\n The optional comparator function should take two parameters \"a\" and \"b\" which are the two list\n items to compare, and should return:\n <ul>\n <li> a value less than zero, if \"a\" is less than \"b\" such that \"a\" should appear earlier in the\n      list\n <li> zero, if \"a\" and \"b\" are equal\n <li> a value greater than zero, if \"a\" is greater than \"b\" such that \"b\" should appear earlier in\n      the list\n </ul>\n \n",
        name:"sort",
        seeAlso:[],
        params:[
            {description:"comparator function to use", optional:true, name:"comparator", 
             defaultValue:null,type:"function"}
        ],
        returns:{description:"the list itself", type:"List"},
        type:"method",
        definingClass:"interface:List"
    },
    "attr:WSRequest.useFlatFields":{
        ref:"attr:WSRequest.useFlatFields",
        flags:"IR",
        description:"When <code>useFlatFields</code> is set for a request to be sent to a WSDL web service, when\n creating the input XML message to send to the web service, properties in\n ${isc.DocUtils.linkForRef('attr:WSRequest.data','request.data')} will be used as the values for XML elements of the same name, at\n any level of nesting.\n <P>\n <code>useFlatFields</code> allows you to ignore gratuitous XML message structure, such as\n extra levels of nested elements, and provides some insulation against changes in the\n required structure of the input message.\n <P>\n For example, given this input message:\n <pre>\n &lt;FindServices&gt;\n     &lt;searchFor&gt;search text&lt;/searchFor&gt;\n     &lt;Options&gt;\n         &lt;caseSensitive&gt;false&lt;/caseSensitive&gt;\n     &lt;/Options&gt;\n     &lt;IncludeInSearch&gt;\n         &lt;serviceName&gt;true&lt;/serviceName&gt;\n         &lt;documentation&gt;true&lt;/documentation&gt;\n         &lt;keywords&gt;true&lt;/keywords&gt;\n     &lt;/IncludeInSearch&gt;\n &lt;/FindServices&gt;\n </pre>\n If <code>useFlatFields</code> were <b>not</b> set, in order to fill out this message\n correctly, <code>request.data</code> would need to be:\n <pre>{\n    searchFor: \"search text\",\n    Options : {\n        caseSensitive: false,\n    },\n    IncludeInSearch : {\n        serviceName: true,\n        documentation : true,\n        keywords : true\n    }\n }</pre>\n However if useFlatFields were set, <code>request.data</code> could be just:\n <pre>{\n    searchFor: \"search text\",\n    caseSensitive: false,\n    serviceName: true,\n    documentation : true,\n    keywords : true\n }</pre>\n <code>useFlatFields</code> is often set when the input data comes from a ${isc.DocUtils.linkForRef('class:DynamicForm')}\n to avoid the cumbersome and fragile process of mapping input fields to an XML structure.\n <P>\n ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} can also be set to cause <b>all</b> dsRequests of a\n particular type to <code>useFlatFields</code> automatically.\n <P>\n For ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')} can be set use \"flattened\"\n binding to fields of a WSDL message or XML Schema.\n <P>\n Note that <code>useFlatFields</code> is not generally recommended for use with XML input\n messages where multiple simple type fields exist with the same name, however if used in this\n way, the first field to use a given name wins.  \"first\" means the first field encountered in a\n depth first search.  \"wins\" means only the first field will be populated in the generated\n XML message.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:WSRequest",
        groups:["flatFields"]
    },
    "method:DetailViewer.viewSelectedData":{
        ref:"method:DetailViewer.viewSelectedData",
        flags:"",
        description:"\n Displays the currently selected record(s) of the selectionComponent widget (typically a\n listGrid) in the detailViewer.\n\n",
        name:"viewSelectedData",
        seeAlso:[],
        params:[
            {description:"the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected\n     record(s) is/are to be edited", 
             optional:false,name:"selectionComponent", defaultValue:null, type:"ListGrid or ID"}
        ],
        type:"method",
        definingClass:"class:DetailViewer",
        groups:["dataBoundComponentMethods"]
    },
    "attr:TreeGrid.showConnectors":{
        ref:"attr:TreeGrid.showConnectors",
        flags:"IRW",
        description:"Should this treeGrid show connector lines illustrating the trees hierachy?",
        name:"showConnectors",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('connectors')}"],
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "group:xmlSchema":{
        ref:"group:xmlSchema",
        refs:["method:DataSource.getLegalChildTags", "classMethod:XMLTools.loadXMLSchema", 
         "classMethod:XMLTools.loadWSDL"],
        name:"xmlSchema",
        seeAlso:[],
        type:"group"
    },
    "class:ActiveXControl":{
        methods:["method:ActiveXControl.getPluginID", "method:ActiveXControl.getPluginHandle"],
        ref:"class:ActiveXControl",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Client Bridges"],
        attrs:["attr:ActiveXControl.id", "attr:ActiveXControl.params", "attr:ActiveXControl.uuid", 
         "attr:ActiveXControl.classID","attr:ActiveXControl.codeBase"],
        description:"ISC Abstraction for ActiveX controls",
        name:"ActiveXControl",
        seeAlso:[],
        type:"class",
        requiresModules:["PluginBridges"]
    },
    "method:TabSet.getTab":{
        ref:"method:TabSet.getTab",
        flags:"",
        description:" Get the live Canvas representing a tab by index or ID.  \n If passed a tab Canvas, just returns it.\n <P>\n Note that live Tab instances are not available until ${isc.DocUtils.linkForRef('method:Canvas.draw','draw()')}.\n <P>\n The returned Tab is considered an internal component of the TabSet.  In order to maximize\n forward compatibility, manipulate tabs through APIs such as a ${isc.DocUtils.linkForRef('method:TabSet.setTabTitle')} instead.\n Also note that a super-lightweight TabSet implementation may not use a separate Canvas per\n Tab, and code that accesses an manipulates Tabs as Canvases won't be compatible with that\n implementation.\n\n",
        name:"getTab",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"int | ID | Canvas"}
        ],
        returns:{description:"the tab Canvas, or null if not found or TabSet not drawn yet", type:"Tab"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:PickList.dataArrived":{
        ref:"method:PickList.dataArrived",
        flags:"",
        description:" If this item is showing a dataBound pickList, this notification method will be fired \n when new data arrives from the server.\n",
        name:"dataArrived",
        seeAlso:[],
        params:[
            {description:"index of first row returned by the server", optional:false, name:"startRow", 
             defaultValue:null,type:"number"},
            {description:"index of last row returned by the server", optional:false, name:"endRow", 
             defaultValue:null,type:"number"},
            {description:"pointer this pickList's data", optional:false, name:"data", defaultValue:null, 
             type:"ResultSet"}
        ],
        type:"method",
        definingClass:"interface:PickList"
    },
    "attr:DSRequest.useFlatFields":{
        ref:"attr:DSRequest.useFlatFields",
        flags:"IR",
        description:"When <code>useFlatFields</code> is set for a request to be sent to a WSDL web service, when\n creating the input XML message to send to the web service, properties in\n ${isc.DocUtils.linkForRef('attr:DSRequest.data','request.data')} will be used as the values for XML elements of the same name, at\n any level of nesting.\n <P>\n <code>useFlatFields</code> allows you to ignore gratuitous XML message structure, such as\n extra levels of nested elements, and provides some insulation against changes in the\n required structure of the input message.\n <P>\n For example, given this input message:\n <pre>\n &lt;FindServices&gt;\n     &lt;searchFor&gt;search text&lt;/searchFor&gt;\n     &lt;Options&gt;\n         &lt;caseSensitive&gt;false&lt;/caseSensitive&gt;\n     &lt;/Options&gt;\n     &lt;IncludeInSearch&gt;\n         &lt;serviceName&gt;true&lt;/serviceName&gt;\n         &lt;documentation&gt;true&lt;/documentation&gt;\n         &lt;keywords&gt;true&lt;/keywords&gt;\n     &lt;/IncludeInSearch&gt;\n &lt;/FindServices&gt;\n </pre>\n If <code>useFlatFields</code> were <b>not</b> set, in order to fill out this message\n correctly, <code>request.data</code> would need to be:\n <pre>{\n    searchFor: \"search text\",\n    Options : {\n        caseSensitive: false,\n    },\n    IncludeInSearch : {\n        serviceName: true,\n        documentation : true,\n        keywords : true\n    }\n }</pre>\n However if useFlatFields were set, <code>request.data</code> could be just:\n <pre>{\n    searchFor: \"search text\",\n    caseSensitive: false,\n    serviceName: true,\n    documentation : true,\n    keywords : true\n }</pre>\n <code>useFlatFields</code> is often set when the input data comes from a ${isc.DocUtils.linkForRef('class:DynamicForm')}\n to avoid the cumbersome and fragile process of mapping input fields to an XML structure.\n <P>\n ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} can also be set to cause <b>all</b> dsRequests of a\n particular type to <code>useFlatFields</code> automatically.\n <P>\n For ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}, \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')} can be set use \"flattened\"\n binding to fields of a WSDL message or XML Schema.\n <P>\n Note that <code>useFlatFields</code> is not generally recommended for use with XML input\n messages where multiple simple type fields exist with the same name, however if used in this\n way, the first field to use a given name wins.  \"first\" means the first field encountered in a\n depth first search.  \"wins\" means only the first field will be populated in the generated\n XML message.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest",
        groups:["flatFields"]
    },
    "method:StatefulCanvas.getState":{
        ref:"method:StatefulCanvas.getState",
        flags:"A",
        description:" Return the state of this StatefulCanvas\n",
        name:"getState",
        seeAlso:[],
        returns:{description:null, type:"State"},
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "attr:RPCRequest.callback":{
        ref:"attr:RPCRequest.callback",
        flags:"IRW",
        description:"If you expect to receive a response to your RPC request, you can specify a callback that\n will be called with an instance or RPCResponse class as sent by the server.  Queuing does\n not affect callbacks in any way - your specified callback will be invoked for each\n RPCRequest that contained a callback regardless of whether the request was sent as part of a\n queue or not.",
        name:"callback",
        seeAlso:[],
        valueType:"RPCCallback",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "classAttr:Dialog.OK_BUTTON_TITLE":{
        ref:"classAttr:Dialog.OK_BUTTON_TITLE",
        flags:"IRW",
        description:"Title for the <code>\"OK\"</code> button.",
        name:"OK_BUTTON_TITLE",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        valueType:"HTML",
        defaultValue:"\"OK\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:FormItem.required":{
        ref:"attr:FormItem.required",
        flags:"IR",
        description:"Whether a non-empty value is required for this field to pass validation.\n <BR>\n <b>Note:</b> if specified on a FormItem, <code>required</code> is only enforced on the\n client.  <code>required</code> should generally be specified on a\n ${isc.DocUtils.linkForRef('class:DataSourceField')}.",
        name:"required",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formShowAndHide')}"],
        definingClass:"class:FormItem",
        groups:["validation"]
    },
    "method:Tree.isRoot":{
        ref:"method:Tree.isRoot",
        flags:"",
        description:"\n Return true if the passed node is the root node.\n\n",
        name:"isRoot",
        seeAlso:[],
        params:[
            {description:"node to test", optional:false, name:"node", defaultValue:null, type:"TreeNode"}
        ],
        returns:{description:"true if the node is the root node", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Menu.data":{
        flags:"IRW",
        type:"attr",
        ref:"attr:Menu.data",
        description:"An array of menuItem objects, specifying the menu items this menu should show.",
        name:"data",
        setter:["setData"],
        valueType:"Array of MenuItem",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"],
        defaultValue:"null",
        groups:["data"],
        definingClass:"class:Menu"
    },
    "attr:DateItem.useTextField":{
        ref:"attr:DateItem.useTextField",
        flags:"IRW",
        description:"Should we show the date in a text field, or as 3 select boxes?",
        name:"useTextField",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dateItem')}"],
        definingClass:"class:DateItem",
        groups:["basics"]
    },
    "attr:Layout.animateMemberTime":{
        ref:"attr:Layout.animateMemberTime",
        flags:"IRWA",
        description:"If specified this is the duration of show/hide animations when members are being shown\n or hidden due to being added / removed from this layout.",
        name:"animateMemberTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["animation"]
    },
    "attr:ListGrid.selectOnEdit":{
        ref:"attr:ListGrid.selectOnEdit",
        flags:"IRWA",
        description:"When the user starts editing a row, should the data in that row also be selected?",
        name:"selectOnEdit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:DataSourceField.xmlAttribute":{
        ref:"attr:DataSourceField.xmlAttribute",
        flags:"IR",
        description:"Indicates that ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} should serialize this value as an XML\n attribute.\n <P>\n Note this does not need to be declared in order for DataSource records to be derived from\n XML data: a field will be populated with either an attribute or subelement with matching\n name.",
        name:"xmlAttribute",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["xmlSerialize", "componentSchema"]
    },
    "class:Hover":{
        methods:[],
        ref:"class:Hover",
        classAttrs:["classAttr:Hover.moveWithMouse", "classAttr:Hover.leftOffset", "classAttr:Hover.topOffset", 
         "classAttr:Hover.hoverCanvasDefaults"],
        classMethods:["classMethod:Hover.show", "classMethod:Hover.hide"],
        treeLocation:["Client Reference/Control"],
        attrs:[],
        description:"The Hover class handles showing a simple SmartClient canvas containing arbitrary HTML, or\n triggering some other action in response to a user holding the mouse-pointer (or hovering)\n over a specific widget.",
        name:"Hover",
        seeAlso:[],
        type:"class"
    },
    "classMethod:XMLTools.selectString":{
        ref:"classMethod:XMLTools.selectString",
        flags:"A",
        description:" Retrieve a string value from an XML element or document based on an XPath expression.\n <P>\n If more than one node matches, only the first node's value will be returned.\n <P>\n Namespacing works as described under ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}\n <P>\n <b>NOTE:</b> this API cannot be supported on the Safari web browser for versions prior to\n 3.0.3.\n\n",
        name:"selectString",
        seeAlso:[],
        params:[
            {description:"Native XMLElement or document to select from", optional:false, 
             name:"element",defaultValue:null, type:"XMLElement or XMLDocument"},
            {description:"XPath expression to use to select nodes", optional:false, name:"expression", 
             defaultValue:null,type:"XPath"},
            {description:"namespace mapping used by the expression", optional:true, name:"namespaces", 
             defaultValue:null,type:"prefix -> URI mapping"}
        ],
        returns:{description:"result of the XPath, in String form", type:"String"},
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}"],
        definingClass:"class:XMLTools",
        groups:["xmlTransform"]
    },
    "attr:Slider.trackWidth":{
        ref:"attr:Slider.trackWidth",
        flags:"IRW",
        description:"The thickness of the track. This is the width, for a vertical slider, or the height, for\n a horizontal slider.",
        name:"trackWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:ListGrid.addData":{
        ref:"method:ListGrid.addData",
        flags:"",
        description:" Perform a DataSource \"add\" operation to add new records to this component's DataSource.\n\n",
        name:"addData",
        seeAlso:[],
        params:[
            {description:"new record", optional:false, name:"newRecord", defaultValue:null, 
             type:"Object"},
            {description:"method to call on operation completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundAdd')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "method:EBay.setSandboxToken":{
        ref:"method:EBay.setSandboxToken",
        flags:"",
        description:"\n Sets the token to be used by queries to the eBay sandbox environment.\n \n",
        name:"setSandboxToken",
        seeAlso:[],
        params:[
            {description:"Your sanbox authToken, provided to you by eBay.", optional:false, 
             name:"authToken",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:EBay"
    },
    "attr:DetailViewer.labelStyle":{
        ref:"attr:DetailViewer.labelStyle",
        flags:"IRW",
        description:"CSS style for a normal detail label",
        name:"labelStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"detailLabel\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "classMethod:isc.getIconRect":{
        ref:"classMethod:isc.getIconRect",
        flags:"A",
        description:"  Returns the size / position of an icon with respect to the widget rendering out the\n  form item as an array of coordinates.\n",
        name:"getIconRect",
        seeAlso:[],
        params:[
            {description:"icon definition for the icon you want to determine the                               position of (defaults to first icon in this.icons).", 
             optional:false,name:"icon", defaultValue:null, type:"object"}
        ],
        returns:{description:"four element array representing the Left, Top, Width, and Height of                      the icon in px.", 
         type:"array"},
        type:"method",
        definingClass:"class:isc"
    },
    "method:ListGrid.cellOver":{
        ref:"method:ListGrid.cellOver",
        flags:"",
        description:" Called when the mouse pointer enters a cell\n\n",
        name:"cellOver",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:SchemaSet.getSchema":{
        ref:"method:SchemaSet.getSchema",
        flags:"A",
        description:" Get the schema definition of any complexType or element of complexType defined within\n the &lt;schema&gt; element this SchemaSet represents.\n\n",
        name:"getSchema",
        seeAlso:[],
        params:[
            {description:"name of the schema to retrieve", optional:false, name:"schemaName", 
             defaultValue:null,type:"String"},
            {description:"optional type of schema to return, either \"element\" for                              xs:element definitions only or \"type\" for xs:complexType\n                              definitions.  If unspecified, either will be returned,\n                              with types preferred if names collide", 
             optional:true,name:"schemaType", defaultValue:null, type:"String"}
        ],
        returns:{description:"the schema if found, or null", type:"DataSource"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('xmlSchemaImport')}"],
        definingClass:"class:SchemaSet"
    },
    "group:iscInstall":{
        ref:"group:iscInstall",
        title:"Deploying SmartClient",
        treeLocation:["Concepts"],
        refs:[],
        description:"This overview serves as a how-to for installing SmartClient into your web application.\n Evaluators are urged to use the SmartClient SDK with the embedded tomcat servlet engine\n during evaluation rather than persue installation into an existing web application up front,\n however, reading this document and the related ${isc.DocUtils.linkForRef('group:clientServerIntegration','server\n integration')} materials is recommended to get an overview.\n <P>\n SmartClient has two pieces - the client components that run in the browser and the server\n components that run in a J2SE compatible container.  You don't need to use a Java back-end\n to use SmartClient, but the SDK comes with some examples that assume the presence of the\n Java back-end and, for some examples, a SQL Database.  If you will be using SmartClient with\n a Java back-end, see below for the list of J2SE application servers supported by the Java\n implementation of the SmartClient server.\n <p>\n The SDK contains two top-level directories: <code>smartclientSDK</code> and\n <code>smartclientRuntime</code>.  The <code>smartclientSDK</code> directory contains the\n membedded servlet engine, embedded database, examples, and documentation.  The\n <code>smartclientRuntime</code> directory contains just the client and server components of\n the SmartClient product - use the contents of this directory when deploying SmartClient into\n your application environment.\n <p>\n <u><b>Client integration</b></u>\n <p>\n To install the client-side portion of SmartClient, simply copy the <code>isomorphic</code>\n directory from the smartclientRuntime webroot to the webroot of your application.  Having\n done this you can use SmartClient components on your pages regardless of the technologies\n used on your back-end and you can bind to server-side componentry backed by arbitrary\n technology - see the <i>Data Integration</i> section of the\n ${isc.DocUtils.linkForRef('group:clientServerIntegration')} section for more information.\n <p>\n <u><b>Server integration</b></u>\n <p>\n SmartClient can be ${isc.DocUtils.linkForRef('group:nonJavaBackend','integrated with any backend')} without\n installing the SmartClient Java server.  However, the SmartClient server accelerates Java\n integration and provides other useful facilities, including server-push and network\n performance enhancements.  See the ${isc.DocUtils.linkForRef('group:iscServer','SmartClient Server summary')} for\n details.\n <P>\n To integrate the server portion of SmartClient, you need to follow the steps below for each\n application (WAR) that uses SmartClient.  Note that, if installing into an environment that\n uses multiple WARs, installation of SmartClient JARs into a directory shared by multiple\n applications is not supported.  Installation of a separate WAR with client-side SmartClient\n modules for maintaining cache coherence across applications using the same version of ISC is\n supported - contact Isomorphic support for more details on how to set that up.  \n <p>\n <ul>\n <li> Copy all files from WEB-INF/lib directory of the smartclientRuntime to your\n WEB-INF/lib.  SmartClient\n leverages a number of third-party libraries - if there are conflicts with the versions you\n want to use, use the versions you want - SmartClient has minimal dependencies on these\n libraries.  Contact Isomorphic with any specific questions about compatibility.\n See the \"Java Module Dependencies\" section below for a dependency tree that will\n help you select a minimal set of JARs to deploy.\n <li> Copy the WEB-INF/classes/log4j.isc.config.xml from the smartclientRuntime to your\n WEB-INF/classes\n directory.  This file contains the SmartClient server log configuration.\n <li> Copy the WEB-INF/classes/server.properties from the smartclientRuntime to your WEB-INF/classes\n directory.  This file contains settings for basic file locations such the location of\n webroot, the SmartClient SQL engine and DMI.  The version under smartclientRuntime has a\n basic, secure configuration.  See the version of server.properties under the\n smartclientSDK directory for sample SQL and other settings.\n <li> Copy the WEB-INF/iscTaglib.xml from the smartclientRuntime to your WEB-INF directory.\n This file enables the use of custom SmartClient tags in your JSPs.  \n <li> Merge portions of the WEB-INF/web.xml into your application's web.xml.  To use\n SmartClient JSP tags like &lt;loadISC&gt;, you'll need to merge the &lt;jsp-config&gt;\n section from web.xml.  Also there are some mandatory and optional servlets and filters to\n merge - see below.\n </ul>\n <u>Merging web.xml</u>\n <p>\n The following is a description of the servlets and filters you'll find in the web.xml file\n contained in the smartclientRuntime and what they do:\n <p>\n <i>Core Functionality</i>\n <ul>\n <li>Init servlet- <b>required:</b> initializes the SmartClient server componentry from config files\n at container startup time.  Notice that this servlet has no mapping - it's purely an\n initialization servlet.\n <li>IDACall servlet - <b>required</b> for ${isc.DocUtils.linkForRef('class:DMI')}, built-in RPC operations and built-in DataSource\n operations to work.  All databound examples in the SDK use this servlet.  If you're planning on\n using a custom actionURL for all your RPC requests, then you don't need this servlet.\n <li>FileDownload servlet - required for serving the Isomorphic framework code compressed and with\n caching headers as well as for serving skin images with caching headers.  It is highly\n recommended that you use this for production but is not required. \n <li>PreCache servlet - loads resources into memory on container startup.  Not required, but if you\n exclude this servlet there may be a slow response to the very first request.\n <li>jsp-config section - the iscTaglib registration block is required to use\n &lt;isomorphic&gt; tags, and the *.isc and *.rpc mappings.  These are optional, if you want\n to use these as handy development tools.\n </ul>\n <p>\n <i>Optional Functionality</i>\n <ul>\n <li>HttpProxy - used by the RPCManager when sending AJAX RPCs to a server other than the\n server that serves the main application page.  You need to install this servlet if, for\n example, your application will be querying web services exposed by servers other than the\n server that is serving the rest of the application.  See the javadoc for this servlet for\n various configuration options, such as how to restrict the URLs that are allowed to be\n proxied. \n <li>MessagingServlet - used by the realtime messaging system.  If you're planning\n on using this subsystem, you'll need this servlet.\n <li>CompressionFilter - required if you want to use dynamic compression of html and js\n files.\n <li>JSSyntaxScannerFilter - development tool that looks for trailing commas in JS\n source (scans html files for &lt;script&gt; tags and scans .js files in their entirety).\n This is a useful development tool, but should not be included in production.\n <li>NoCacheFilter - development tool that makes any content it intercepts non-cacheable in\n order to ensure developers are looking at the latest version of a file when modifying\n examples.  Not for production use.\n </ul>\n Note that not all of the servlets and filters listed under <i>Optional Functionality</i>\n above are present in the web.xml that ships with the smartclientRuntime - if you need to use\n any of these, copy their configuration from the web.xml available under the WEB-INF\n directory of smartclientSDK.  Other servlets, filters and configuration files from the\n smartclientSDK should not be copied to your deployment, simply because the SDK includes many\n developer tools that are not extensively audited from a security standpoint.\n <p>\n <u><b>Java Module Dependencies</b></u>\n <p>\n The following is a description of what functionality is contained in each SmartClient JAR\n file, and which other SmartClient JARs and third party libraries are required to enable that\n functionality.  Note that actual filenames in WEB-INF/lib will typically contain the version\n number of the library, whereas the library names below simply list the base name.\n <ul>\n <li><b>isomorphic_core_rpc</b>: This is the core SmartClient module.  It provides the RPC, DMI,\n and DataSource support.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-cli<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-collections<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-pool<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-codec<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isc-jakarta-oro<br>\n &nbsp;&nbsp;&nbsp;&nbsp;log4j<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-jxpath<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-httpclient<br>\n &nbsp;&nbsp;&nbsp;&nbsp;velocity<br>\n &nbsp;&nbsp;<u>Optionally Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;xercesImpl - if you're using JDK &lt; 1.5<br>\n &nbsp;&nbsp;&nbsp;&nbsp;xml-apis - if you're using JDK &lt; 1.5<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-fileupload - if you plan to use the upload form item with\n SmartClient processing.<br>\n </li>\n <li><b>isomorphic_web_services</b>: Web services examples only.  Contains code backing the\n SmartClientOperations.wsdl example.  Do not deploy in production.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;axis<br>\n &nbsp;&nbsp;&nbsp;&nbsp;axis-schema<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-discovery<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-logging<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jaxrpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;saaj<br>\n &nbsp;&nbsp;&nbsp;&nbsp;wsdl4j<br>\n </li>\n <li><b>isomorphic_tools</b>: Contains back-end logic for the \"Admin Console\" tool visible in\n the Developer Console, and also standalone from the SDK home page.  This is an SDK-only\n tool, not intended for production deployment, and further intended for rapid prototyping\n only.  Do not deploy this module to production, but you may use it in your development if\n you're using the SmartClient rapid prototyping SQL engine.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_sql<br>\n </li>\n <li><b>isomorphic_embedded_tomcat</b>: This contains the bootstrap class for the Embedded\n Tomcat engine shipped with the SmartClient SDK.  It is not intended to be used in any way\n other than via the start_embedded_tomcat.bat|sh|command scripts in the webRoot of the\n SDK.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;All JARs under WEB-INF/embeddedTomcat/lib<br>\n </li>\n <li><b>isomorphic_struts</b>: Contains the ValidationAction and ValidationFailureAction\n classes that implement RPC-based validation of DynamicForms using the Struts\n ValidatorPlugIn.  If you're not using Struts or if you don't need this particular feature of\n SmartClient, you do not need this module or its dependencies.  An example of this style of\n validation is available here: <a href='/examples/struts/forms/welcome.do' onclick=\"window.open('/examples/struts/forms/welcome.do');return false;\">/examples/struts/forms/welcome.do</a> - read the\n info on this page, and follow the \"Dynamic Form (With RPC-based Validation) Link for\n the actual example.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;struts<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-digester<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-beanutils<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-fileupload<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-logging<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-validator<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jakarta-oro<br>\n </li>\n <li><b>isomorphic_spring</b>: Required for ${isc.DocUtils.linkForRef('class:DMI')} dispatches to Spring beans (via\n ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} : \"spring\").<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;spring<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-logging<br>\n </li>\n <li><b>isomorphic_examples</b>: Contains code for various SmartClient examples shown in the\n SDK.  Do not deploy to production.  The source code for the compiled classes in this module\n are present in the SDK in various locations and typically linked to directly from the\n examples that use them.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_sql<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_struts<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_spring<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_hibernate<br>\n &nbsp;&nbsp;&nbsp;&nbsp;commons-logging<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jstl<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jakarta-taglib-standard<br>\n </li>\n <li><b>isomorphic_realtime_messaging</b>: Server support required for the SmartClient\n Realtime Messaging Module.  Install this if you're using this 'push' technology.  For more\n information, see: ${isc.DocUtils.linkForDocNode('Messaging QuickRef')}:<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n </li>\n <li><b>isomorphic_hibernate</b>: Contains support for Hibernate DataSources as described\n here: ${isc.DocUtils.linkForRef('group:hibernateIntegration')}.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br>\n &nbsp;&nbsp;&nbsp;&nbsp;hibernate3<br>\n &nbsp;&nbsp;&nbsp;&nbsp;dom4j<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jdbc2_0-stdext<br>\n &nbsp;&nbsp;&nbsp;&nbsp;asm<br>\n &nbsp;&nbsp;&nbsp;&nbsp;asm-attrs<br>\n &nbsp;&nbsp;&nbsp;&nbsp;jta<br>\n &nbsp;&nbsp;&nbsp;&nbsp;cglib<br>\n &nbsp;&nbsp;&nbsp;&nbsp;antlr<br>\n &nbsp;&nbsp;<u>Optionally Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;hsqldb - not required for linking, but needed for Hibernate to\n actually connect to databases of this type, and hsqldb is what's used in the SDK examples.\n Note that for production use you will need a JDBC driver for your database type.<br>\n </li>\n <li><b>isomorphic_sql</b>: Implementation of the SmartClient SQL rapid prototyping layer.\n This is a SQL generation engine similar to Hibernate, but not as flexible.  Some SQL-based\n SDK examples rely on this logic, but it should not be used in production.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br> \n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_hibernate<br> \n &nbsp;&nbsp;&nbsp;&nbsp;commons-dbcp<br> \n &nbsp;&nbsp;&nbsp;&nbsp;hsqldb<br> \n </li>\n <li><b>isomorphic_js_parser</b>: A parser capable of reading a JSON byte stream and creating\n an in-memory Java object structure to match.  Used by any mechanism that relies on\n JSON-style configuration.  Examples include FileAssembly definitions in JSON format, any use\n of the rulesFile with a URIRegexFilter (Java Servlet) or subclass.  Generally not\n required.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br> \n </li>\n <li><b>isomorphic_compression</b>: This is a part of the Network Performance Module.  The\n isomorphic_compression module is required for dynamic and static compression of various\n assets delivered to the browser.  For more information, see: \n ${isc.DocUtils.linkForRef('group:compression')}.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br> \n </li>\n <li><b>isomorphic_assembly</b>: This is part of the Network Performance Module.  The\n isomorphic_assembly module is required for file assembly and stripping.  For more\n information, see: ${isc.DocUtils.linkForRef('group:fileAssembly')}.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br> \n &nbsp;&nbsp;<u>Optionally Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_obfuscation - for code obfuscation<br> \n </li>\n <li><b>isomorphic_obfuscation</b>: This is part of the Network Performance Module.  The\n isomorphic_obfuscation module is required to enable obfuscation of code assembled by the\n File Assembly system.  For more information, see: \n ${isc.DocUtils.linkForRef('group:compression')}.<br>\n &nbsp;&nbsp;<u>Requires</u>:<br>\n &nbsp;&nbsp;&nbsp;&nbsp;isomorphic_core_rpc<br> \n </li>\n </ul>\n <p>\n <u><b>Caching Considerations</b></u>\n <p>\n When upgrading from one SmartClient release to the next you want to make sure that the user\n picks up the new version on next access, but you also want to keep the ISC modules cacheable\n so they're not refetched on every access.\n <p>\n SmartClient deals with this problem by appending a version string as a query parameter to\n each module load directive.  This is done by the &lt;isomorphic:loadISC&gt; and\n &lt;isomorphic:loadModules&gt; tags automatically.  As long as you make sure that the file\n that contains these tags is non-cacheable, you will get the desired behavior.\n <p>\n <u><b>Supported J2SE Containers</b></u>\n <p>\n Below is the list of J2SE containters that have been tested to be compatible with this\n version of SmartClient.  Installation in these containers is supported for deployment by\n Isomorphic.  If your application server is not on this list, please contact us at the\n <a href=\"http://forums.smartclient.com\" target='_blank'>SmartClient forums</a> to see if we can support\n your deployment.  In general, the Java portion of ISC should work on servlet containers that\n comply with servlet specification version 2.3 and up and utilize a JVM no older than version\n 1.4.\n <p>\n Supported J2SE Containers:\n <p>\n <table class='normal'>\n <tr><td width=40></td><td width=200><i>Apache Tomcat 4.0.x, 4.1.x, 5.0.x, 5.5x, 6.0.x</i></td><td></td></tr>\n <tr><td></td><td><i>Apache Geronimo 1.x, 2.x</i></td><td></td></tr>\n <tr><td></td><td><i>BEA WebLogic 6.x, 7x, 8.x, 9.x, 10.x</i></td><td></td></tr>\n <tr><td></td><td><i>Caucho Resin 2.1.x, 3.0.x, 3.1.x</i></td><td></td></tr>\n <tr><td></td><td><i>IBM WebSphere 5.x, 6.x</i></td><td></td></tr>\n <tr><td></td><td><i>IBM WebSphere Community Edition 1.x</i></td><td></td></tr>\n <tr><td></td><td><i>JBoss 3.2.x, 4.0.x, 4.2.x</i></td><td></td></tr>\n <tr><td></td><td><i>Mortbay Jetty 4.x, 5.x, 6.x</i></td><td></td></tr>\n <tr><td></td><td><i>Oracle Containers for J2EE (OC4J) 9.x, 10.x, 11.x</i></td><td></td></tr>\n <tr><td></td><td><i>Oracle Application Server 10g 9.x, 10.x</i></td><td></td></tr>\n <tr><td></td><td><i>Sun Application Server 8.x, 9.x</i></td><td></td></tr>\n </table>\n\n <p>\n <u><b>Troubleshooting</b></u>\n <p>\n This section covers some common problems with possible solutions. You may also need to refer to the\n documentation for your specific application server, web server,  or database. If you experience any problems\n installing and configuring SmartClient in your environment, please post on the \n <a href=\"http://forums.smartclient.com/\" target='_blank'>SmartClient forums</a> for\n assistance.\n <p>\n <table width=\"90%\" class=\"normal\" align=\"center\" border=\"1\" cellpadding=\"5\">\n <tr bgcolor=\"#808080\">\n 	<td width=\"30%\"><b>Problem</b></td>\n 	<td width=\"30%\"><b>Possible Causes</b></td>\n 	<td width=\"40%\"><b>Solution</b></td>\n </tr><tr>\n 	<td rowspan='3'>Browser displays a generic \"page cannot be displayed\" or \"unable to locate the server\" message.</td>\n 	<td>Servlet engine not started.</td>\n 	<td>Start your application server.</td>\n </tr><tr>\n 	<td>Missing/incorrect port for servlet engine in URL.</td>\n 	<td>Check the startup messages, logs, or documentation for the servlet engine to determine what port it is using.</td>\n </tr><tr>\n 	<td>Host name is incorrect.</td>\n 	<td>Check whether other pages on the host can be accessed.\n 		Try the base URL http://[host name]:[port number] to see whether the servlet engine or webserver is functioning.</td>\n </tr><tr>\n 	<td>Browser displays a 404 or other page/file not found error.</td>\n 	<td>Incorrect URL.</td>\n 	<td>Check for errors in the URL, including capitalization.</td>\n </tr><tr>\n 	<td>Server error: taglib not defined</td>\n 	<td>Missing iscTaglib.xml or iscTaglib.xml not referenced in web.xml</td>\n 	<td>Copy WEB-INF/iscTaglib.xml from smartclientRuntime to your deployment WEB-INF directory\n 	and make sure that you have merged the &lt;jsp-config&gt; section from the\n 	smartclientRuntime web.xml</td>\n </tr><tr>\n  <td>ClassNotFound or other Java Exceptions in the server log.</td>\n  <td>Missing JAR files</td>\n  <td>Verify every .jar from the smartclientRuntime WEB-INF/lib directory has been copied to\n  your deployment WEB-INF/lib.  Although you might later be able to remove some .jars, for\n  initial installation testing, copy every .jar</td>\n </tr><tr>\n  <td>\"isc\" is not defined JS error</td>\n  <td>Incorreect URLs to SmartClient modules</td>\n  <td>use View Source to look at SCRIPT includes (e.g. for ISC_Core.js), try those URLs\n  directly in the browser to  verify the files are correctly deployed</td>\n </tr>\n </table>",
        name:"iscInstall",
        seeAlso:[],
        type:"group"
    },
    "group:line":{
        ref:"group:line",
        refs:[],
        name:"line",
        seeAlso:[],
        type:"group"
    },
    "class:ToolStripResizer":{
        methods:[],
        ref:"class:ToolStripResizer",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/ToolStrip"],
        attrs:["attr:ToolStripResizer.skinImgDir", "attr:ToolStripResizer.vSrc", 
         "attr:ToolStripResizer.hSrc"],
        description:"Simple subclass of ImgSplitbar with appearance appropriate for a ToolStrip resizer.",
        name:"ToolStripResizer",
        seeAlso:[],
        type:"class"
    },
    "classAttr:Dialog.USERNAME_TITLE":{
        ref:"classAttr:Dialog.USERNAME_TITLE",
        flags:"IRW",
        description:"Default title for the \"username\" field in the dialog displayed by \n ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.",
        name:"USERNAME_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Username\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:MenuBar.tabIndex":{
        ref:"attr:MenuBar.tabIndex",
        flags:"IRWA",
        description:"By default exclude menubars from the page's tab order. To include a menubar in the page's\n tab order, set tabIndex to an explicit tab index, or <code>null</code> for automatically \n assigned tabIndex",
        name:"tabIndex",
        seeAlso:[],
        valueType:"number",
        defaultValue:"-1",
        type:"attr",
        definingClass:"class:MenuBar"
    },
    "method:StatefulCanvas.setActionType":{
        ref:"method:StatefulCanvas.setActionType",
        flags:"A",
        description:" Update the 'actionType' for this canvas (radio / checkbox / button)\n If the canvas is currently selected, and the passed in actionType is 'button'\n this method will deselect the canvas.\n",
        name:"setActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state", "event handling"]
    },
    "attr:Splitbar.cursor":{
        ref:"attr:Splitbar.cursor",
        flags:"IRW",
        description:"Splitbars' cursors are set at init time based on whether they are to be used for vertical or\n horizontal resize.  To customize the cursor for this class, modify \n ${isc.DocUtils.linkForRef('attr:Splitbar.vResizeCursor')} or ${isc.DocUtils.linkForRef('attr:Splitbar.hResizeCursor')} rather than this property.",
        name:"cursor",
        seeAlso:[],
        valueType:"Cursor",
        defaultValue:"\"hand\"",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["cursor"]
    },
    "method:Canvas.focus":{
        ref:"method:Canvas.focus",
        flags:"",
        description:" If this canvas can accept focus, give it keyboard focus. After this method, the canvas\n will appear focussed and will recieve keyboard events.\n",
        name:"focus",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "method:GridRenderer.selectionChanged":{
        ref:"method:GridRenderer.selectionChanged",
        flags:"A",
        description:" Called when (row-based) selection changes within this grid. Note this method fires for\n each record for which selection is modified - so when a user clicks inside a grid this\n method will typically fire twice (once for the old record being deselected, and once for\n the new record being selected).\n\n",
        name:"selectionChanged",
        seeAlso:[],
        params:[
            {description:"record for which selection changed", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"New selection state (true for selected, false for unselected)", 
             optional:false,name:"state", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["selection"]
    },
    "method:Layout.hasMember":{
        ref:"method:Layout.hasMember",
        flags:"",
        description:"		    Returns true if the layout includes the specified canvas.\n",
        name:"hasMember",
        seeAlso:[],
        params:[
            {description:"the canvas to check for", optional:false, name:"canvas", defaultValue:null, 
             type:"canvas"}
        ],
        returns:{description:"true if the layout includes the specified canvas", type:"boolean"},
        type:"method",
        definingClass:"class:Layout"
    },
    "group:editing":{
        ref:"group:editing",
        title:"Grid Editing",
        refs:["method:ListGridField.defaultDynamicValue", "method:ListGridField.editorEnter", 
         "method:ListGridField.editorExit","method:ListGridField.cellChanged", "method:ListGridField.formatEditorValue", 
         "method:ListGridField.parseEditorValue","method:ListGridField.change", "method:ListGridField.changed", 
         "method:ListGrid.canEditCell","method:ListGrid.startEditing", "method:ListGrid.getEditorValueMap", 
         "method:ListGrid.setEditorValueMap","method:ListGrid.getEditorType", "method:ListGrid.startEditingNew", 
         "method:ListGrid.getAllEditRows","method:ListGrid.getEditValues", "method:ListGrid.getEditedRecord", 
         "method:ListGrid.getEditedCell","method:ListGrid.setEditValue", "method:ListGrid.getEditValue", 
         "method:ListGrid.clearEditValue","method:ListGrid.getEditRow", "method:ListGrid.getEditCol", "method:ListGrid.getEditField", 
         "method:ListGrid.cancelEditing","method:ListGrid.endEditing", "method:ListGrid.discardAllEdits", 
         "method:ListGrid.discardEdits","method:ListGrid.saveEdits", "method:ListGrid.hasChanges", 
         "method:ListGrid.cellHasChanges","method:ListGrid.saveAllEdits", "method:ListGrid.cellChanged", 
         "method:ListGrid.editComplete","method:ListGrid.editFailed", "method:ListGrid.editorEnter", 
         "method:ListGrid.rowEditorEnter","method:ListGrid.editorExit", "method:ListGrid.rowEditorExit", 
         "method:ListGrid.formatEditorValue","method:ListGrid.parseEditorValue", "method:DynamicForm.getEditorType", 
         "method:CubeGrid.setEditValue","method:CubeGrid.getEditValue", "method:CubeGrid.getEditedRecord", 
         "method:CubeGrid.getEditedCell","method:CubeGrid.getEditValues", "method:CubeGrid.clearEditValue", 
         "method:CubeGrid.saveEdits","method:CubeGrid.getAllEditCells", "method:CubeGrid.discardAllEdits", 
         "method:CubeGrid.saveAllEdits","attr:ListGridField.editorImageURLPrefix", "attr:ListGridField.editorImageURLSuffix", 
         "attr:ListGridField.icons","attr:ListGridField.editorIconWidth", "attr:ListGridField.editorIconHeight", 
         "attr:ListGridField.defaultIconSrc","attr:ListGridField.iconVAlign", "attr:ListGridField.canEdit", 
         "attr:ListGridField.defaultValue","attr:ListGridField.enterKeyEditAction", "attr:ListGridField.escapeKeyEditAction", 
         "attr:ListGridField.editorType","attr:ListGridField.editorProperties", "attr:ListGrid.modalEditing", 
         "attr:ListGridField.editorValueMap","attr:ListGrid.canEdit", "attr:ListGrid.recordEditProperty", "attr:ListGrid.editByCell", 
         "attr:ListGrid.saveByCell","attr:ListGrid.waitForSave", "attr:ListGrid.stopOnErrors", "attr:ListGrid.autoSaveEdits", 
         "attr:ListGrid.confirmCancelEditing","attr:ListGrid.cancelEditingConfirmationMessage", "attr:ListGrid.confirmDiscardEdits", 
         "attr:ListGrid.confirmDiscardEditsMessage","attr:ListGrid.discardEditsSaveButtonTitle", "attr:ListGrid.rowEndEditAction", 
         "attr:ListGrid.listEndEditAction","attr:ListGrid.enterKeyEditAction", "attr:ListGrid.escapeKeyEditAction", 
         "attr:ListGrid.editEvent","attr:ListGrid.editOnFocus", "attr:ListGrid.selectOnEdit", "attr:ListGridField.canToggle", 
         "attr:ListGrid.longTextEditorThreshold","attr:ListGrid.longTextEditorType", "type:RowEndEditAction", "type:EnterKeyEditAction", 
         "type:EscapeKeyEditAction","type:EditCompletionEvent", "type:ListGridEditEvent"],
        description:"Data being displayed by a grid may be edited within the grid, by showing editing\n interfaces embedded inside the cells of the grid.\n <P>\n <b>Enabling editing</b>\n <P>\n Editing is enabled when ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','canEdit')} is <code>true</code>.  When enabled,\n the user can begin editing via the \n ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent','editEvent')}, typically click or double-click.  Editing can also be triggered\n programmatically by a call to ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing()')} or\n ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew','startEditingNew()')}.\n <P>\n <b>New record creation</b>\n <P>\n By default, editing is restricted to existing records.  Setting ${isc.DocUtils.linkForRef('attr:ListGrid.listEndEditAction')} to\n \"next\" allows the user to create new records by simply navigating off the end of the dataset\n with the keyboard.  Editing of new records can also be initiated with \n ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew')}, for example, from a button outside the grid.\n <P>\n <b>Saving changes</b>\n <P>\n Saving of changes is triggered automatically when the user navigates out of the row or cell\n being edited (based on ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell')}) or when the user ends editing.   Automatic\n saving of changes can be disabled entirely via \n ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits','autoSaveEdits:false')}, in which case a manual call to \n ${isc.DocUtils.linkForRef('method:ListGrid.saveEdits','saveEdits()')} or ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits','saveAllEdits()')} is required\n to trigger saving. \n <P>\n If a grid has no DataSource, saving means that the properties of the ${isc.DocUtils.linkForRef('object:ListGridRecord')}s\n in ${isc.DocUtils.linkForRef('attr:ListGrid.data','grid.data')} are directly changed.\n <P>\n For a grid with a DataSource, saving will be accomplished by using DataSource \"update\"\n operations for existing records, and DataSource \"add\" operations for new records.  If multiple\n records have been edited and ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits','saveAllEdits()')} is called, \n ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} will be automatically used to enable all\n edits to be saved in one HTTP turnaround (if using the SmartClient Server).\n <P>\n By default, a grid will send only updated fields and the primaryKey field as part of \n ${isc.DocUtils.linkForRef('attr:DSRequest.data')} so that the server can discern which fields the user actually changed.\n However, the grid always includes the original field values in the\n dsRequest as ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')}.\n <P>\n Note that although it is possible to load DataSource data without actually declaring a\n ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey field')}, a primaryKey must be declared for\n editing and saving.  The primaryKey value is how SmartClient identifies the changed\n record to the server.\n <P>\n <b>Validation</b>\n <P>\n Any time saving is attempted, validation is automatically triggered.  Values entered by the\n user will be checked against the ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} and the\n ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}. Any invalid values abort an attempted save.\n <P>\n Similar to editing and saving, validation can be done on row transitions or on cell\n transitions by setting ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell','validateByCell')}, or can be disabled entirely\n via ${isc.DocUtils.linkForRef('attr:ListGrid.neverValidate','neverValidate:true')}.\n <P>\n <b>Editability of cells</b>\n <P>\n Editors will either be shown for the complete row or for a single cell based on \n ${isc.DocUtils.linkForRef('class:ListGrid','editByCell,editByCell')}.  Whether a cell can be edited can be controlled on a\n per field basis by setting ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','field.canEdit')}, or on a per-record basis\n by setting ${isc.DocUtils.linkForRef('attr:ListGrid.recordEditProperty','recordEditProperty')} on a \n ${isc.DocUtils.linkForRef('object:ListGridRecord','record')}, or can be controlled on an arbitrary, programmatic basis via\n an override of ${isc.DocUtils.linkForRef('method:ListGrid.canEditCell')}.\n <P>\n Cells which are not editable just display the cell's current value.\n <P>\n <b>Keyboard Navigation</b>\n <P>\n Full keyboard navigation is supported by default, including Tab and Shift-Tab to navigate\n between cells in a row, and Up Arrow and Down Arrow to traverse rows.  Several properties\n on both grids and fields, all named *EditAction, control navigation behavior of certain keys\n (eg Enter).\n <P>\n You can use ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing(<i>rowNum</i>, <i>colNum</i>)')} to \n programmatically move editing to a particular cell, for example, during a \n ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} event.\n <P>\n <b>editValues (unsaved changes)</b>\n <P>\n The term \"editValues\" means changes that the user has made to the dataset which have not\n been saved.  The grid manages and stores editValues separately from the data itself in order\n to allow the user to revert to original values, and in order to enable to grid to send only\n updated fields to the server.  \n <P>\n Because editValues are stored separately, if you directly access the dataset (eg via \n <code>grid.data.get()</code>) you will see the records without the user's unsaved changes.\n Many APIs exist for retrieving and managing editValues (search for editValue).\n For the common case of needing to access the record-as-edited, you can call \n ${isc.DocUtils.linkForRef('method:ListGrid.getEditedRecord','grid.getEditedRecord(rowNum)')}.\n <P>\n When accessing and manipulating edited data, you should think carefully about whether\n you want to be working with the original data or with the edited version.  Values entered\n by the user may not have been validated yet, or may have failed validation, hence you may\n find a String value in a field of type \"date\" or \"int\", which could cause naive formatters or\n totalling functions to crash.\n <P>\n Setting editValues is fully equivalent to the user making changes to data via the editing UI.\n If you <i>also</i> allow editing external to the grid, setting editValues is one way to \n combine changes from external editors into the grid's edits, so that you can do a single \n save.\n <P>\n <b>Customizing Cell Editors</b>\n <P>\n When a cell is being edited, the editor displayed in the cell will be a ${isc.DocUtils.linkForRef('class:FormItem')}.\n The editor type for the cell will be determined by ${isc.DocUtils.linkForRef('method:ListGrid.getEditorType')} based on the\n specified ${isc.DocUtils.linkForRef('attr:ListGridField.editorType')} or ${isc.DocUtils.linkForRef('attr:ListGridField.type','data type')} for the field in\n question.\n <P>\n You can customize the editor by setting ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties')} to a set of\n properties that is valid for that FormItem type.  Custom FormItem classes are also allowed,\n for example, you may use ${isc.DocUtils.linkForRef('attr:FormItem.icons')} to create an icon that launches a separate\n ${isc.DocUtils.linkForRef('class:Dialog')} in order to provide an arbitrary interface that allows the user to select the\n value for a field.\n <P>\n <b>Events</b>\n <P>\n Editing triggers several events which you can provide handlers for in order to customize\n editing behavior.  Some of the most popular are ${isc.DocUtils.linkForRef('method:ListGridField.change','field.change()')},\n ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} for detecting changes made by the user,\n ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')} for detecting changes that have been successfully saved,\n and ${isc.DocUtils.linkForRef('method:ListGrid.editorEnter')} and ${isc.DocUtils.linkForRef('method:ListGrid.editorExit','editorExit()')} for detecting user\n navigation during editing.\n <P>\n You can also install event handlers directly on the FormItem-based editors used in the grid\n via ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties','editorProperties')} as mentioned above.  When handling\n event on items, or which involve items, be aware that in addition to standard \n ${isc.DocUtils.linkForRef('class:FormItem')} APIs, editors have the following properties:\n <P>\n - <code>rowNum</code>: The rowNum of the record being edited.<br>\n - <code>colNum</code>: The colNum of the cell being edited.<br>\n - <code>grid</code>: A pointer back to the listGrid containing the record.",
        name:"editing",
        seeAlso:[],
        type:"group"
    },
    "method:DataSource.fieldMatchesFilter":{
        ref:"method:DataSource.fieldMatchesFilter",
        flags:"",
        description:" Compares a criteria value to a field value and returns whether they match, as follows:\n <ul>\n <li> any non-String filter value is directly compared (==) to the field value\n <li> any String filter value is compared according to\n      ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} in the passed <code>requestProperties</code>,\n      regardless of the actual field type\n <li> if the filter value is an Array, it matches if the field value is contained in the\n      Array\n </ul>\n",
        name:"fieldMatchesFilter",
        seeAlso:[],
        params:[
            {description:"field value to be compared", optional:false, name:"fieldValue", 
             defaultValue:null,type:"object"},
            {description:"filter value to be compared", optional:false, name:"filterValue", 
             defaultValue:null,type:"object"},
            {description:"dataSource request properties", optional:false, name:"requestProperties", 
             defaultValue:null,type:"DSRequest Properties"}
        ],
        returns:{description:"true if the filter and field values match, false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "attr:TabSet.leftEdgeOffsets":{
        ref:"attr:TabSet.leftEdgeOffsets",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeOffsets</code>, \n <code>rightEdgeOffsets</code>, <code>topEdgeOffsets</code> and <code>bottomEdgeOffsets</code> \n propertes allow the offsets of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"leftEdgeOffsets",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:FormItem.disable":{
        ref:"method:FormItem.disable",
        flags:"",
        description:" Set this item to be disabled at runtime.\n",
        name:"disable",
        seeAlso:[
            {ref:"attr:FormItem.disabled", description:null}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["enable"]
    },
    "method:Canvas.click":{
        ref:"method:Canvas.click",
        flags:"A",
        description:"\n Executed when the left mouse is clicked (pressed and then released) on this widget.  No default\n implementation.\n\n",
        name:"click",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:GridRenderer.refreshCell":{
        ref:"method:GridRenderer.refreshCell",
        flags:"A",
        description:" Refresh an individual cell without redrawing the grid.\n <P>\n The cell's value, CSS class, and CSS text will be refreshed, to the current values returned\n by getCellValue(), getCellStyle() and getCellCSSText() respectively.\n\n",
        name:"refreshCell",
        seeAlso:[
            {ref:"method:GridRenderer.refreshCellStyle", description:"to update just styling"}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column number of cell to refresh", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["appearance"]
    },
    "attr:Canvas.snapVGap":{
        ref:"attr:Canvas.snapVGap",
        flags:"IRW",
        description:"The vertical grid size to use, in pixels, when snap-to-grid is enabled.",
        name:"snapVGap",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"attr:Canvas.snapResizeToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapResizeToGrid", description:null}
        ],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:ComboBoxItem.pickListFields":{
        ref:"attr:ComboBoxItem.pickListFields",
        flags:"IRA",
        description:"This property allows the developer to specify which field[s] will be displayed in the \n drop down list of options.\n <P>\n Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists\n with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.\n <P>\n If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, \n otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}<br>\n \n If there are multiple fields, column headers will be shown for each field, the\n height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute.",
        name:"pickListFields",
        seeAlso:[
            {ref:"attr:ComboBoxItem.valueField", description:null},
            {ref:"attr:PickList.pickListHeaderHeight", description:null}
        ],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:Array.removeList":{
        ref:"method:Array.removeList",
        flags:"",
        description:" Remove all instances of objects in the specified list from this list, sliding the remaining\n objects around to fill gaps.\n\n",
        name:"removeList",
        seeAlso:[],
        params:[
            {description:"list of items to remove", optional:false, name:"list", defaultValue:null, 
             type:"array"}
        ],
        returns:{description:"list of items passed in", type:"list"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "attr:DataSource.showPrompt":{
        ref:"attr:DataSource.showPrompt",
        flags:"A",
        description:"Whether RPCRequests sent by this DataSource should enable \n ${isc.DocUtils.linkForRef('attr:RPCRequest.showPrompt')} if it's unset.",
        name:"showPrompt",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "attr:GridHilite.disabled":{
        ref:"attr:GridHilite.disabled",
        flags:"IRW",
        description:"Whether this hilite is currently disabled.\n <P>\n Hilites can be programmatically enabled and disabled via ${isc.DocUtils.linkForRef('method:CubeGrid.enableHilite')}.",
        name:"disabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:GridHilite"
    },
    "method:SimpleType.shortDisplayFormatter":{
        ref:"method:SimpleType.shortDisplayFormatter",
        flags:"",
        description:" Formatter for values of this type when compact display is required, for example, in a\n ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}.\n <P>\n When this formatter is called, the SimpleType object is available as \"this\".  \n <P>\n A formatter can make itself configurable on a per-component or per-field basis by\n checking properties on the component or field.  For example, a formatter for account IDs\n may want to omit a prefix in views where it is redundant, and could check a flag\n listGridField.omitAccountIdPrefix for this purpose.\n\n",
        name:"shortDisplayFormatter",
        seeAlso:[],
        params:[
            {description:"value to be formatted", optional:false, name:"value", defaultValue:null, 
             type:"any"},
            {description:"field descriptor from the component calling the formatter, if                      applicable.  Depending on the calling component, this could be a\n                      ${isc.DocUtils.linkForRef('object:ListGridField')}, ${isc.DocUtils.linkForRef('object:TreeGridField')}, etc", 
             optional:true,name:"field", defaultValue:null, type:"Field"},
            {description:"component calling this formatter, if applicable", optional:true, 
             name:"component",defaultValue:null, type:"DataBoundComponent"},
            {description:"Full record, if applicable", optional:true, name:"record", defaultValue:null, 
             type:"Object"}
        ],
        type:"method",
        definingClass:"class:SimpleType"
    },
    "attr:SelectItem.autoFetchData":{
        ref:"attr:SelectItem.autoFetchData",
        flags:"IRA",
        description:"If this select item retrieves its options from a <code>dataSource</code>, should options\n be fetched from the server when the item is first written out, or should this fetch be\n delayed until the user opens the pickList.",
        name:"autoFetchData",
        seeAlso:[
            {ref:"attr:PickList.optionDataSource", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "method:Canvas.getVSnapPosition":{
        ref:"method:Canvas.getVSnapPosition",
        flags:"A",
        description:" Override this method to provide a custom snap-to grid.  Note that you do not need to do\n this if your grid is regular (ie, grid points are every x pixels) - regular grids should be \n defined using ${isc.DocUtils.linkForRef('attr:Canvas.snapHGap')} and ${isc.DocUtils.linkForRef('attr:Canvas.snapVGap')}.\n You should only override this method if you want to provide support for a grid of \n irregularly-placed points\n\n",
        name:"getVSnapPosition",
        seeAlso:[],
        params:[
            {description:"y-coordinate of the drag event (note: using page-level coordinates)", 
             optional:false,name:"coordinate", defaultValue:null, type:"integer"},
            {description:"\"before\" or \"after\" denoting whether the returned coordinate should   match the top or bottom edge of the current square. If unset ${isc.DocUtils.linkForRef('attr:Canvas.snapHDirection')} will\n   be used by default", 
             optional:true,name:"direction", defaultValue:null, type:"string"}
        ],
        returns:{description:"The vertical coordinate to snap to", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:StretchImgButton.iconClick":{
        ref:"method:StretchImgButton.iconClick",
        flags:"",
        description:" If this button is showing an ${isc.DocUtils.linkForRef('attr:StretchImgButton.icon','icon')}, a separate click\n handler for the icon may be defined as <code>this.iconClick</code>.\n Returning false will suppress the standard button click handling code.\n",
        name:"iconClick",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:FormItem.valueIconWidth":{
        ref:"attr:FormItem.valueIconWidth",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, use this property to specify a width for\n the value icon written out.",
        name:"valueIconWidth",
        seeAlso:[
            {ref:"attr:FormItem.valueIconHeight", description:null},
            {ref:"attr:FormItem.valueIconSize", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "type:FetchMode":{
        ref:"type:FetchMode",
        values:[
            {description:"All records that match the current filter are fetched.  Sorting is                performed on the client", 
             value:"\"basic\""},
            {description:"Only requested ranges of records are fetched, with predictive fetch                ahead.  Sorting is performed on the server.", 
             value:"\"paged\""},
            {description:"All records available from the DataSource are fetched.  Filtering by                search criteria and sorting are both performed on the client", 
             value:"\"local\""}
        ],
        description:"Mode of fetching records from the server.\n <P>\n Generally, \"paged\" mode should be used unless the maximum number of records is\n guaranteed to be small.",
        name:"FetchMode",
        seeAlso:[],
        type:"type",
        groups:["fetching"]
    },
    "attr:DataSource.clientOnly":{
        ref:"attr:DataSource.clientOnly",
        flags:"IR",
        description:"Whether to ask as a \"client-only\" DataSource, which has no permanent storage and never\n contacts the server, instead using a set of test data to respond to requests in the same\n manner as a server-based DataSource might.\n <P>\n See ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','this discussion')} for ways to populate a\n client-only DataSource with test data.",
        name:"clientOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('localDataSource')}"],
        definingClass:"class:DataSource",
        groups:["clientOnlyDataSources"]
    },
    "method:Canvas.hover":{
        ref:"method:Canvas.hover",
        flags:"",
        description:" If <code>canHover</code> is true for this widget, the <code>hover</code> string method will\n be fired when the user hovers over this canvas. If this method returns false, it will\n suppress the default behavior of showing a hover canvas if <code>this.showHover</code> \n is true.\n",
        name:"hover",
        seeAlso:[
            {ref:"attr:Canvas.canHover", description:null}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:ListGridField.parseEditorValue":{
        ref:"method:ListGridField.parseEditorValue",
        flags:"",
        description:" Method used to convert the value displayed in an editor for some cell in this field into\n a raw value for saving.<br>\n Takes precedence over <code>parseEditorValue</code> defined at the grid level.\n\n",
        name:"parseEditorValue",
        seeAlso:[
            {ref:"method:ListGrid.parseEditorValue", description:null},
            {ref:"method:ListGridField.formatEditorValue", description:null}
        ],
        params:[
            {description:"value displayed in the editor for the cell", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"record object for the row being edited. May be null if this                          is a new row being added to the end of the list.", 
             optional:false,name:"record", defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"},
            {description:"A pointer to the ListGrid displaying the cell", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid instance"}
        ],
        returns:{description:"raw value for the field derived from formatted value in editor", type:"any"},
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "type:EditCompletionEvent":{
        ref:"type:EditCompletionEvent",
        values:[
            {description:"User clicked outside editor during edit.", value:"ListGrid.CLICK_OUTSIDE"},
            {description:"User started editing another row by clicking on it", value:"ListGrid.CLICK"},
            {description:"User started editing another row by double                               clicking", 
             value:"ListGrid.DOUBLE_CLICK"},
            {description:"Enter pressed.", value:"ListGrid.ENTER_KEYPRESS"},
            {description:"User pressed Escape.", value:"ListGrid.ESCAPE_KEYPRESS"},
            {description:"Up arrow key pressed.", value:"ListGrid.UP_ARROW_KEYPRESS"},
            {description:"down arrow key.", value:"ListGrid.DOWN_ARROW_KEYPRESS"},
            {description:"User pressed Tab.", value:"ListGrid.TAB_KEYPRESS"},
            {description:"User pressed Shift+Tab.", value:"ListGrid.SHIFT_TAB_KEYPRESS"},
            {description:"Edit moved to a different field (same row)", 
             value:"ListGrid.EDIT_FIELD_CHANGE"},
            {description:"Edit completed via explicit function call", value:"ListGrid.PROGRAMMATIC"}
        ],
        description:"What event / user interaction type caused cell editing to complete.",
        name:"EditCompletionEvent",
        seeAlso:[],
        type:"type",
        groups:["editing"]
    },
    "attr:Canvas.snapOnDrop":{
        ref:"attr:Canvas.snapOnDrop",
        flags:"IRWA",
        description:"When this canvas is dropped onto an object supporting snap-to-grid, should it snap\n to the grid (true, the default) or just drop wherever the mouse is (false).",
        name:"snapOnDrop",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"method:Canvas.shouldSnapOnDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "classAttr:RPCResponse.STATUS_FAILURE":{
        ref:"classAttr:RPCResponse.STATUS_FAILURE",
        flags:"R",
        description:"Indicates a generic failure on the server.  \n See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}\n for more information.",
        name:"STATUS_FAILURE",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-1",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "method:Window.setShowHeaderIcon":{
        ref:"method:Window.setShowHeaderIcon",
        flags:"",
        description:" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showHeaderIcon')} to show / hide the headerIcon\n",
        name:"setShowHeaderIcon",
        seeAlso:[
            {ref:"attr:Window.headerControls", description:null},
            {ref:"attr:Window.showHeaderIcon", description:null}
        ],
        type:"method",
        definingClass:"class:Window"
    },
    "attr:Scrollbar.endThumbOverlap":{
        ref:"attr:Scrollbar.endThumbOverlap",
        flags:"IRWA",
        description:"Number of pixels the thumb is allowed to overlap the buttons at the end of the track.\n Default prevents doubling of 1px borders.  Set higher to allow media that shows curved\n joins between the track button and ScrollThumb.",
        name:"endThumbOverlap",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "attr:ListGridField.icons":{
        ref:"attr:ListGridField.icons",
        flags:"IRA",
        description:"If this field is editable, this property can be used to specify \n ${isc.DocUtils.linkForRef('attr:FormItem.icons','icons')} to be displayed in the editors displayed for this field",
        name:"icons",
        seeAlso:[],
        valueType:"Array of FormItemIcon Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:ValuesManager.getItem":{
        ref:"method:ValuesManager.getItem",
        flags:"",
        description:" Takes an item name (specified via the form.fieldIdProperty value, or retrieved via\n item.getFieldName()) returns a reference to the appropriate item in this valuesManager.\n <br>Note: Unlike the <code>DynamicForm</code> class, this method will not return an \n item by index\n",
        name:"getItem",
        seeAlso:[],
        type:"method",
        definingClass:"class:ValuesManager"
    },
    "attr:Layout.dropLine":{
        ref:"attr:Layout.dropLine",
        flags:"R",
        description:"Line showed to mark the drop position when components are being dragged onto this Layout.\n A simple Canvas typically styled via CSS.  The default dropLine.styleName is\n \"layoutDropLine\".",
        name:"dropLine",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragMove')}"],
        definingClass:"class:Layout"
    },
    "attr:Layout.layoutBottomMargin":{
        ref:"attr:Layout.layoutBottomMargin",
        flags:"IRW",
        description:"Space outside of all members, on the bottom side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.\n <P>\n Requires a manual call to <code>setLayoutMargin()</code> if changed on the fly.",
        name:"layoutBottomMargin",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "method:Dialog.saveData":{
        ref:"method:Dialog.saveData",
        flags:"A",
        description:" Method to save this Dialog's data. Called from <code>okClick()</code>, \n <code>applyClick()</code>.\n No default implementation - override to perform some action if required.\n      \n",
        name:"saveData",
        seeAlso:[
            {ref:"method:Dialog.okClick", description:null},
            {ref:"method:Dialog.applyClick", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "method:ImgButton.setSelected":{
        ref:"method:ImgButton.setSelected",
        flags:"",
        description:" Select this object.\n",
        name:"setSelected",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:RichTextEditor.colorControls":{
        ref:"attr:RichTextEditor.colorControls",
        flags:"IRA",
        description:"Control group for modifying text color / background color. \n  Consists of an array of ${isc.DocUtils.linkForRef('type:ControlName')}s.\n  To display this group of controls for some RichTextEditor,\n  include <code>\"formatControls\"</code> in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array",
        name:"colorControls",
        seeAlso:[],
        valueType:"array",
        defaultValue:"[\"color\", \"backgroundColor\"]",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "attr:CubeGrid.facetLabelHoverVAlign":{
        ref:"attr:CubeGrid.facetLabelHoverVAlign",
        flags:"IRWA",
        description:"Allows the developer to override the vertical text alignment of hover tips shown for\n facetLabels.  If unspecified the hover canvas content alignment will be set by\n <code>this.hoverVAlign</code> if specified.",
        name:"facetLabelHoverVAlign",
        seeAlso:[
            {ref:"attr:Canvas.hoverVAlign", description:null}
        ],
        valueType:"VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:Canvas.blur":{
        ref:"method:Canvas.blur",
        flags:"",
        description:" If this canvas has keyboard focus, blur it. After this method, the canvas\n will no longer appear focussed and will stop recieving keyboard events.\n",
        name:"blur",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "method:Canvas.visibleAtPoint":{
        ref:"method:Canvas.visibleAtPoint",
        flags:"A",
        description:" Does this widget contain the specified global (x,y) coordinates, and have no other widgets\n also at the specified position, obscuring this one?  This is commonly used for (for example)\n drag and drop interactions.\n\n",
        name:"visibleAtPoint",
        seeAlso:[],
        params:[
            {description:"GLOBAL x-coordinate", optional:false, name:"x", defaultValue:null, 
             type:"number"},
            {description:"GLOBAL y-coordinate", optional:false, name:"y", defaultValue:null, 
             type:"number"},
            {description:"point lies within our viewport rather than                                              just our drawn area", 
             optional:true,name:"withinViewport", defaultValue:null, type:"boolean"},
            {description:"If passed ignore widget(s), do not check whether                                           those widgets occludes this one.", 
             optional:true,name:"ignoreWidgets", defaultValue:null, type:"canvas"}
        ],
        returns:{description:"true if this object contains the specified point; false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:Canvas.contextMenu":{
        ref:"attr:Canvas.contextMenu",
        flags:"IRWA",
        description:"Context menu to show for this object, an instance of the Menu widget.",
        name:"contextMenu",
        seeAlso:[
            {ref:"method:Canvas.showContextMenu", description:null}
        ],
        valueType:"Menu",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('contextMenus')}"],
        definingClass:"class:Canvas",
        groups:["cues"]
    },
    "attr:DataSource.resultBatchSize":{
        ref:"attr:DataSource.resultBatchSize",
        flags:"IRWA",
        description:"Very advanced: for servers that do not support paging, and must return large numbers of XML\n records in one HTTP response, SmartClient breaks up the processing of the response\n in order to avoid the \"script running slowly\" dialog appearing for an end user.\n <P>\n If you have a relatively small number of records with a great deal of properties or\n subojects on each record, and you have not set ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')} to eliminate unused\n data, and you see the \"script running slowly\" dialog, you may need to set this number\n lower.",
        name:"resultBatchSize",
        seeAlso:[],
        valueType:"int",
        defaultValue:"150",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "attr:CubeGrid.canSelectValues":{
        ref:"attr:CubeGrid.canSelectValues",
        flags:"IRW",
        description:"Determines whether cell values in the body can be selected.",
        name:"canSelectValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Canvas.shadowImage":{
        ref:"attr:Canvas.shadowImage",
        flags:"IRA",
        description:"Base name of the series of images for the sides, corners, and center of the shadow.\n <P>\n The actual image names fetched for the dropShadow combine the segment name and the\n <code>shadowDepth</code> setting.  For example, given \"ds.png\" as the base name, a depth of\n 4, and the top-left segment of the shadow, we'd use \"ds4_TL.png\".\n <P>\n The names for segments are the same as those given for controlling resizable edges; see\n ${isc.DocUtils.linkForRef('attr:Canvas.resizeFrom')}.  The center segment has the name \"center\".  The center segment is\n the only segment that doesn't include the depth in the URL, so the final image name for the\n center given a baseName of \"ds.png\" would be just \"ds_center.png\".",
        name:"shadowImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]ds.png\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["shadow"]
    },
    "attr:CubeGrid.fixedFacetValues":{
        ref:"attr:CubeGrid.fixedFacetValues",
        flags:"IR",
        description:"A ${isc.DocUtils.linkForRef('type:FacetValueMap')} describing the set of facet values that should be regarded as\n \"fixed\" in this cubeGrid.  These are used as fixed criteria for load on demand, and also\n allow using a dataset with more facets in it than are currently shown in the grid.",
        name:"fixedFacetValues",
        seeAlso:[
            {ref:"method:CubeGrid.addFacet", description:null},
            {ref:"method:CubeGrid.removeFacet", description:null}
        ],
        valueType:"FacetValueMap",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "group:flatFields":{
        ref:"group:flatFields",
        refs:["attr:DSRequest.useFlatFields", "attr:DSRequest.useFlatHeaderFields", 
         "attr:WSRequest.useFlatFields"],
        name:"flatFields",
        seeAlso:[],
        type:"group"
    },
    "attr:DataSource.title":{
        ref:"attr:DataSource.title",
        flags:"IRW",
        description:"User-visible name for this DataSource.\n <P>\n For example, for the supplyItem DataSource, \"Supply Item\".\n <P>\n Defaults to <code>dataSource.ID</code>.",
        name:"title",
        seeAlso:[],
        valueType:"string",
        defaultValue:"dataSource.ID",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["titles"]
    },
    "method:Dialog.yesClick":{
        ref:"method:Dialog.yesClick",
        flags:"",
        description:" Handle a click on the 'yes' button of this Dialog.\n Default implementation is to return <code>true</code>.\n Override to do something else\n",
        name:"yesClick",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "attr:TreeGrid.customIconDropProperty":{
        ref:"attr:TreeGrid.customIconDropProperty",
        flags:"IRWA",
        description:"For folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),\n this property allows the developer to specify on a per-node basis whether a\n drop state icon (with ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')}) should be displayed when the \n user drop-hovers over this folder.<br>\n Set <code>node[treeGrid.customIconDropProperty]</code> to true to show the drop state\n icons, or false to suppress this.<br>\n If not specified this this behavior is determined by <code>treeGrid.showCustomIconDrop</code>\n for this node.",
        name:"customIconDropProperty",
        seeAlso:[
            {ref:"attr:TreeGrid.customIconProperty", description:null},
            {ref:"attr:TreeGrid.showCustomIconDrop", description:null}
        ],
        valueType:"string",
        defaultValue:"\"showDropIcon\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:CheckboxItem.uncheckedImage":{
        ref:"attr:CheckboxItem.uncheckedImage",
        flags:"IRW",
        description:"URL for the image to display when this checkbox is not selected, or unchecked",
        name:"uncheckedImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/unchecked.gif\"",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["appearance"]
    },
    "attr:SpinnerItem.step":{
        ref:"attr:SpinnerItem.step",
        flags:"IRW",
        description:"How much should the value be incremented / decremented when the user hits the icons\n  to increase / decrease the value?",
        name:"step",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('spinnerItem')}"],
        definingClass:"class:SpinnerItem"
    },
    "classAttr:ValidatorTypes.floatRange":{
        ref:"classAttr:ValidatorTypes.floatRange",
        flags:"IR",
        description:"Tests whether the value for this field is a floating point number within the range \n  specified.  The <code>max</code> and <code>min</code> properties on the validator\n  are used to determine the acceptable range.<br>\n Note that the <code>errorMessage</code> for this validator will be evaluated as\n a dynamicString - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"floatRange",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:ImgTab.skinImgDir":{
        ref:"attr:ImgTab.skinImgDir",
        flags:"IRW",
        description:"Base path for the images.   <B>Note</B> that when used within a TabSet, the\n ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is appended as an additional path segment, yielding\n \"images/Tab/top/\" et al.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"images/Tab/\"",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "class:Window":{
        methods:["method:Window.setShowCloseButton", "method:Window.setShowMinimizeButton", 
         "method:Window.setShowMaximizeButton","method:Window.setShowHeaderIcon", "method:Window.setTitle", "method:Window.setStatus", 
         "method:Window.setSrc","method:Window.addItem", "method:Window.removeItem", "method:Window.addItems", 
         "method:Window.removeItems","method:Window.setAutoSize", "method:Window.shouldDismissOnEscape", 
         "method:Window.centerInPage","method:Window.flash", "method:Window.minimize", "method:Window.restore", 
         "method:Window.maximize","method:Window.closeClick"],
        exampleConfig:"Window.xml",
        ref:"class:Window",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:Window.canDragReposition", "attr:Window.keepInParentRect", 
         "attr:Window.canDragResize","attr:Window.isModal", "attr:Window.modalMask", "attr:Window.showModalMask", 
         "attr:Window.modalMaskOpacity","attr:Window.modalMaskStyle", "attr:Window.autoCenter", 
         "attr:Window.dismissOnOutsideClick","attr:Window.dismissOnEscape", "attr:Window.body", "attr:Window.showBody", 
         "attr:Window.bodyStyle","attr:Window.bodyColor", "attr:Window.hiliteBodyColor", "attr:Window.items", 
         "attr:Window.src","attr:Window.contentsType", "attr:Window.bodyConstructor", "attr:Window.bodyDefaults", 
         "attr:Window.contentLayout","attr:Window.autoSize", "attr:Window.header", "attr:Window.showHeader", 
         "attr:Window.headerBackground","attr:Window.showHeaderBackground", "attr:Window.headerStyle", "attr:Window.headerSrc", 
         "attr:Window.headerControls","attr:Window.hiliteHeaderStyle", "attr:Window.hiliteHeaderSrc", "attr:Window.headerLabel", 
         "attr:Window.showTitle","attr:Window.title", "attr:Window.headerLabelDefaults", "attr:Window.headerIcon", 
         "attr:Window.showHeaderIcon","attr:Window.headerIconDefaults", "attr:Window.canFocusInHeaderButtons", 
         "attr:Window.closeButton","attr:Window.showCloseButton", "attr:Window.minimizeButton", 
         "attr:Window.showMinimizeButton","attr:Window.minimized", "attr:Window.defaultMinimizeHeight", "attr:Window.minimizeHeight", 
         "attr:Window.animateMinimize","attr:Window.minimizeTime", "attr:Window.minimizeAcceleration", 
         "attr:Window.restoreButton","attr:Window.maximized", "attr:Window.maximizeButton", "attr:Window.showMaximizeButton", 
         "attr:Window.footer","attr:Window.showFooter", "attr:Window.footerHeight", "attr:Window.statusBar", 
         "attr:Window.showStatusBar","attr:Window.resizer", "attr:Window.showResizer"],
        description:"A general purpose Window class for implementing dialogs, portlets, alerts, prompts, wizards\n and desktop-like windowing interfaces.\n <P>\n Windows can contain arbitrary SmartClient components, configured via the ${isc.DocUtils.linkForRef('attr:Window.items')}\n property.  Windows may be ${isc.DocUtils.linkForRef('attr:Window.isModal','modal')} or non-modal.\n <P>\n Windows provide a series of highly configurable and skinnable ${isc.DocUtils.linkForRef('type:AutoChild','autoChildren')}\n including a header, various header controls, footer, and corner resizer.\n <P>\n The more specialized ${isc.DocUtils.linkForRef('class:Dialog')} subclass of Window has additional functionality targetted\n at simple prompts and confirmations, such as buttons with default actions, and single-method\n ${isc.DocUtils.linkForRef('classMethod:isc.warn','shortcuts')} for common application dialogs.",
        name:"Window",
        seeAlso:[],
        type:"class"
    },
    "classMethod:isc.getErrorsHTML":{
        ref:"classMethod:isc.getErrorsHTML",
        flags:"",
        description:" If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false, the form will render all errors in a list at\n the top of the form. This method returns the HTML for this list of errors.\n",
        name:"getErrorsHTML",
        seeAlso:[],
        params:[
            {description:"Map of field names to error messages. Each field may contain a single                        error message (string) or an array of errors", 
             optional:false,name:"errors", defaultValue:null, type:"object"}
        ],
        returns:{description:"error HTML.", type:"HTML"},
        type:"method",
        definingClass:"class:isc",
        groups:["validation"]
    },
    "classAttr:Validator.notAString":{
        ref:"classAttr:Validator.notAString",
        flags:"IRA",
        description:"Default error message to display when standard <code>isString</code> type validator\n  returns false.",
        name:"notAString",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be a string.\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "type:DragTrackerMode":{
        ref:"type:DragTrackerMode",
        values:[
            {description:"Don't display a drag tracker at all", value:"\"none\""},
            {description:"Display an icon to represent the record(s) being dragged. Icon src is              derived from ${isc.DocUtils.linkForRef('method:ListGrid.getDragTrackerIcon')}", 
             value:"\"icon\""},
            {description:"Display a title for the record being dragged. Title derived from              ${isc.DocUtils.linkForRef('method:ListGrid.getDragTrackerTitle')}", 
             value:"\"title\""},
            {description:"Display the entire record being dragged", value:"\"record\""}
        ],
        description:"When records are being dragged from within a ListGrid, what sort of drag-tracker\n should be displayed?",
        name:"DragTrackerMode",
        seeAlso:[],
        type:"type",
        groups:["dragTracker"]
    },
    "attr:FormItem.colSpan":{
        ref:"attr:FormItem.colSpan",
        flags:"IRW",
        description:"Number of columns that this item spans (not including label)",
        name:"colSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "method:ListGrid.fieldIsVisible":{
        ref:"method:ListGrid.fieldIsVisible",
        flags:"",
        description:" Check whether a field is currently visible\n\n",
        name:"fieldIsVisible",
        seeAlso:[],
        params:[
            {description:"field to be checked", optional:false, name:"field", defaultValue:null, 
             type:"field name or field object"}
        ],
        returns:{description:"true if the field is currently visible, false otherwise.", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "class:BlurbItem":{
        methods:[],
        ref:"class:BlurbItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:BlurbItem.showTitle", "attr:BlurbItem.colSpan", "attr:BlurbItem.textBoxStyle", 
         "attr:BlurbItem.wrap","attr:BlurbItem.clipValue"],
        description:"FormItem intended for inserting blurbs of instructional HTML into DynamicForms.\n <p>\n Set the <code>defaultValue</code> of this item to the HTML you want to embed in the form.",
        name:"BlurbItem",
        seeAlso:[],
        type:"class"
    },
    "attr:ListGrid.header":{
        ref:"attr:ListGrid.header",
        flags:"R",
        description:"A Toolbar used to manager the headers shown for each column of the grid.",
        name:"header",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader"]
    },
    "classAttr:RPCManager.actionURL":{
        ref:"classAttr:RPCManager.actionURL",
        flags:"RW",
        description:"The actionURL specifies the URL to which the RPC request will be sent.  Note that if you\n override this global default and your application uses DataSource databound components,\n you'll need to dispatch the DataSource requests from your RPC handler.  Your other option is\n to specify a url on a per-request basis.",
        name:"actionURL",
        seeAlso:[
            {ref:"attr:RPCRequest.actionURL", description:null}
        ],
        valueType:"URL",
        defaultValue:"RPCManager.actionURL",
        type:"classAttr",
        definingClass:"class:RPCManager"
    },
    "attr:Flashlet.pluginsPage":{
        ref:"attr:Flashlet.pluginsPage",
        flags:"IR",
        description:"This attribute specifies the page the user should go to to get the plugin required to view\n  this flashlet.\n  <p>\n  The default pluginsPage is: \"http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash\"\n  <p>",
        name:"pluginsPage",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "attr:RestDataSource.sendMetaData":{
        ref:"attr:RestDataSource.sendMetaData",
        flags:"IR",
        description:"Should  operation meta data be included when assmebling parameters to send \n to the server? If true, meta data parameters will be prefixed with the \n ${isc.DocUtils.linkForRef('attr:RestDataSource.metaDataPrefix')}.<br>\n Applies to operations where OperationBinding.dataProtocol is set to \n <code>\"getParams\"</code> or <code>\"postParams\"</code> only.",
        name:"sendMetaData",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "classAttr:ValidatorTypes.requiredIf":{
        ref:"classAttr:ValidatorTypes.requiredIf",
        flags:"IR",
        description:"RequiredIf type validators should be specified with an <code>expression</code>\n  property set to a stringMethod, which takes three parameters:<ul>\n  <li>item - the DynamicForm item on which the error occurred (may be null)\n  <li>validator - a pointer to the validator object\n  <li>value - the value of the field in question</ul>\n  When validation is perfomed, the expression will be evaluated - if it returns \n  <code>true</code>, the field will be treated as a required field, so validation \n  will fail if the field has no value.",
        name:"requiredIf",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        examples:["${isc.DocUtils.linkForExampleId('conditionallyRequired')}"],
        definingClass:"class:ValidatorTypes"
    },
    "classMethod:XMLTools.selectNodes":{
        ref:"classMethod:XMLTools.selectNodes",
        flags:"",
        description:" Retrieve a set of nodes from an XML element or document based on an XPath expression.\n <P>\n If the target document is namespaced, namespace prefixes declared in the document element of\n the target document will be available, as well as the default namespace, if declared, under\n the prefix \"default\".\n <P>\n To declare your own namespace prefixes, provide a prefix to URI mapping as a simple JS\n Object, for example:\n <pre>\n   {\n      az : \"http://webservices.amazon.com/AWSECommerceService/2005-03-23\",\n      xsd : \"http://www.w3.org/2001/XMLSchema\"\n   }\n </pre>\n <P>\n <b>NOTE:</b> this API cannot be supported on the Safari web browser for versions earlier\n than 3.0.3.\n\n",
        name:"selectNodes",
        seeAlso:[],
        params:[
            {description:"Native XMLElement or document to select from", optional:false, 
             name:"element",defaultValue:null, type:"XMLElement or XMLDocument"},
            {description:"XPath expression to use to select nodes", optional:false, name:"expression", 
             defaultValue:null,type:"XPath"},
            {description:"namespace mapping used by the expression", optional:true, name:"namespaces", 
             defaultValue:null,type:"prefix -> URI mapping"}
        ],
        returns:{description:"list of nodes matching XPath", type:"Array"},
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}"],
        definingClass:"class:XMLTools",
        groups:["xmlTransform"]
    },
    "attr:ListGrid.headerButtonDefaults":{
        ref:"attr:ListGrid.headerButtonDefaults",
        flags:"IRA",
        description:"Defaults to apply to all header buttons. To modify this object, \n use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','ListGrid.changeDefaults()')} \n rather than replacing with an entirely new object.",
        name:"headerButtonDefaults",
        seeAlso:[],
        valueType:"Button Properties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:WSRequest.headerData":{
        ref:"attr:WSRequest.headerData",
        flags:"IR",
        description:"Data to be serialized to form the SOAP headers, as a map from the header part name to the\n data.  For example, given WSDL like this:\n <pre>\n     &lt;soap:header part=\"SessionHeader\" message=\"tns:HeaderMessage\"/&gt;\n     &lt;soap:header part=\"CallOptions\" message=\"tns:HeaderMessage/&gt;\n </pre>\n <code>headerData</code> like this might be provided:\n <pre>\n     dsRequest.headerData = \n         { SessionHeader : <i>data</i>\n           CallOptions : <i>data</i> };\n </pre>\n The provided data will be serialized to XML by the\n ${isc.DocUtils.linkForRef('method:WebService.getInputHeaderSchema','SOAP header schema')} via\n ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}",
        name:"headerData",
        seeAlso:[],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:WSRequest"
    },
    "attr:ImgProperties.height":{
        ref:"attr:ImgProperties.height",
        flags:"IRW",
        description:"Specifies the height of the image.",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "method:CubeGrid.selectFacetValues":{
        ref:"method:CubeGrid.selectFacetValues",
        flags:"",
        description:"\n select/deselect the header showing a given set of facet values\n\n  <br><i>methodType</i> action\n",
        name:"selectFacetValues",
        seeAlso:[],
        params:[
            {description:"facetValues to select the header of", optional:false, name:"facetValues", 
             defaultValue:null,type:"facetValues object"},
            {description:"new selection state - if null defaults to true", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:Class.getClassName":{
        ref:"method:Class.getClassName",
        flags:"",
        description:"	\n	Gets the name of this class as a string.\n\n",
        name:"getClassName",
        seeAlso:[],
        returns:{description:"String name of this instance's Class object.", type:"string"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:MenuButton.hiliteAccessKey":{
        ref:"attr:MenuButton.hiliteAccessKey",
        flags:"IR",
        description:"If this MenuButton has a specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, underline it\n in the title of the button by default",
        name:"hiliteAccessKey",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "method:Canvas.imgHTML":{
        ref:"method:Canvas.imgHTML",
        flags:"A",
        description:" Generates the HTML for an image unique to this Canvas.\n <P>\n The full URL for the image will be formed according to the rules documented for\n <code>${isc.DocUtils.linkForRef('method:Canvas.getImgURL')}</code>.\n <P>\n The created image will have an identifier unique to this Canvas, and subsequent calls to\n <code>${isc.DocUtils.linkForRef('method:Canvas.getImage')}</code> and\n <code>${isc.DocUtils.linkForRef('method:Canvas.setImage')}</code> \n with the name passed to this function will act on the image object produced by the HTML\n returned from this call.\n\n",
        name:"imgHTML",
        seeAlso:[],
        params:[
            {description:"URL local to the skin or application directory.<br>		NOTE: instead of passing several parameters, you can pass an object as the 'src'\n      parameter with properties for all the various function parameters with, eg:<br>\n      canvas.imgHTML( {src:\"foo\", width:10, height:10} );", 
             optional:false,name:"src", defaultValue:null, type:"SCImgURL"},
            {description:"width of the image", optional:true, name:"width", defaultValue:null, 
             type:"number"},
            {description:"height of the image", optional:true, name:"height", defaultValue:null, 
             type:"number"},
            {description:"name for the image", optional:true, name:"name", defaultValue:null, 
             type:"string"},
            {description:"additional attributes to write in the tag", optional:true, name:"extraStuff", 
             defaultValue:null,type:"string"},
            {description:"image-specific image directory to override the default                                  for this Canvas", 
             optional:true,name:"imgDir", defaultValue:null, type:"string"}
        ],
        returns:{description:"HTML to draw the image.", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "method:ListGrid.getFilterEditorType":{
        ref:"method:ListGrid.getFilterEditorType",
        flags:"A",
        description:"\n  If we're showing the filter (query-by-example) row for this ListGrid, this method is\n  used to determine the type of form item to display in the filter edit row for this field.\n  Default implementation will return the field.filterEditorType if specified, or\n  field.valueMap.\n\n",
        name:"getFilterEditorType",
        seeAlso:[],
        params:[
            {description:"field definition field for which we need a valueMap", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"}
        ],
        returns:{description:"ValueMap for the edit field (or null if no valueMap required)", type:"ValueMap"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "attr:DSRequest.dataSource":{
        ref:"attr:DSRequest.dataSource",
        flags:"IR",
        description:"DataSource this DSRequest will act on.\n <P>\n This property is generally automatically populated, for example when calling\n ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} the dataSource property is set to the target\n DataSource.",
        name:"dataSource",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "method:Canvas.getScrollLeft":{
        ref:"method:Canvas.getScrollLeft",
        flags:"A",
        description:" Get the number of pixels this Canvas is scrolled from its left edge.\n",
        name:"getScrollLeft",
        seeAlso:[],
        returns:{description:"scrollLeft", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "scrolling"]
    },
    "method:List.findIndex":{
        ref:"method:List.findIndex",
        flags:"",
        description:" Find the index of the first Object where property == value in the object.\n <P>\n Pass an Object instead to match multiple properties.\n <P>\n Note: for string values, matches are case sensitive.\n\n",
        name:"findIndex",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"interface:List",
        groups:["access", "find"]
    },
    "classMethod:isc.addDefaults":{
        ref:"classMethod:isc.addDefaults",
        flags:"",
        description:"\n Copy any properties that do not already have a value in destination.  Null and zero values\n are not overwritten, but 'undef' values will be.\n\n",
        name:"addDefaults",
        seeAlso:[],
        params:[
            {description:"Object to which properties will be added.", optional:false, 
             name:"destination",defaultValue:null, type:"Object"},
            {description:"Object from which properties will be added.", optional:false, name:"source", 
             defaultValue:null,type:"Object"}
        ],
        returns:{description:"The destination object is returned.", type:"Object"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "group:dragDrop":{
        ref:"group:dragDrop",
        refs:["classMethod:EventHandler.setDragTracker"],
        name:"dragDrop",
        seeAlso:[],
        type:"group"
    },
    "attr:DynamicForm.colWidths":{
        ref:"attr:DynamicForm.colWidths",
        flags:"IRW",
        description:"An array of widths for the columns of items in this form's layout grid. \n <P>\n If specified, these widths should sum to the total width of the form (form.width).\n If not specified, we assume every other column will contain form item titles, and so\n should have <code>form.titleWidth</code>, and all other columns should share the\n remaining space.\n <P>\n Acceptable values for each element in the array are:<br>\n <ul>\n <li>A number (e.g. 100) representing the number of pixel widths to allocate to a\n     column.\n <li>A percent (e.g. 20%) representing the percentage of the total form.width to\n     allocate to a column.\n <li>\"*\" (all) to allocate remaining width (form.width minus all specified column\n     widths). Multiple columns can use \"*\", in which case remaining width is divided\n     between all columns marked \"*\".\n </ul>",
        name:"colWidths",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('columnSpanning')}"],
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "class:HLayout":{
        methods:[],
        exampleConfig:"HLayout.xml",
        ref:"class:HLayout",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:[],
        description:"A subclass of Layout that applies a sizing policy along the horizontal axis, interpreting\n  percent and \"*\" sizes as proportions of the width of the layout. HLayouts will set any members\n  that do not have explict heights to match the layout.",
        name:"HLayout",
        seeAlso:[
            {ref:"attr:Layout.hPolicy", description:null}
        ],
        type:"class"
    },
    "attr:Canvas.dynamicContentsVars":{
        ref:"attr:Canvas.dynamicContentsVars",
        flags:"IRWA",
        description:"An optional map of name:value parameters that will be evailable within the scope of the\n dynamicContents evaluation.  For example - if you have e.g:\n <pre>\n Canvas.create({\n   dynamicContents: true,\n   dynamicContentsVars: {\n       name: \"Bob\"\n   },\n   contents: \"hello \\${name}\"\n });\n </pre>\n The above will create a canvas with contents <code>hello Bob</code>.  You can add, remove, and\n change values in the dynamicContentsVars object literal, just call\n <code>markForRedraw()</code> on the canvas to have the dynamicContents template re-evaluated.\n <p>\n Note that <code>this</code> is always evailable inside a dynamic contents string and points to\n the canvas instance containing the dynamic contents.\n <p>\n Used only if ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents')} : true has been set.",
        name:"dynamicContentsVars",
        seeAlso:[
            {ref:"attr:Canvas.dynamicContents", description:null}
        ],
        valueType:"ValueMap",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas"
    },
    "method:CubeGrid.facetLabelHover":{
        ref:"method:CubeGrid.facetLabelHover",
        flags:"",
        description:"    StringMethod handler fired from hover over a facet label\n  <br><i>methodType</i> handler\n",
        name:"facetLabelHover",
        seeAlso:[],
        params:[
            {description:"ID of the appropriate facet", optional:false, name:"facetId", 
             defaultValue:null,type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "attr:GridRenderer.autoFit":{
        ref:"attr:GridRenderer.autoFit",
        flags:"IRWA",
        description:"If true, make columns only wide enough to fit content, ignoring any widths specified.\n Overrides fixedFieldWidths.",
        name:"autoFit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["sizing"]
    },
    "attr:ComboBoxItem.showOptionsFromDataSource":{
        ref:"attr:ComboBoxItem.showOptionsFromDataSource",
        flags:"IRWA",
        description:"If this item is part of a databound form, and has a specified <code>valueMap</code>\n by default we show the valueMap options in the pickList for the item.\n Setting this property to true will ensure that the options displayed in our pickList\n are derived from the form's <code>dataSource</code>.",
        name:"showOptionsFromDataSource",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem",
        groups:["databinding"]
    },
    "method:List.getRange":{
        ref:"method:List.getRange",
        flags:"",
        description:" Return the items between position start and end, non-inclusive at the end.\n\n",
        name:"getRange",
        seeAlso:[],
        params:[
            {description:"start position", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end position", optional:false, name:"end", defaultValue:null, type:"number"}
        ],
        returns:{description:"subset of the array from start -> end-1", type:"Array"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:FusionChart.chartURL":{
        ref:"attr:FusionChart.chartURL",
        flags:"IR",
        description:"Full URL to the chart.  Needed only if you have renamed the charts such that automatic\n URL formation won't work.",
        name:"chartURL",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FusionChart"
    },
    "method:ListGrid.startEditing":{
        ref:"method:ListGrid.startEditing",
        flags:"A",
        description:" Start inline editing at the provided coordinates.\n <p>\n Invoked when a cell is editable and the <code>editEvent</code> occurs on that cell.  Can\n also be invoked explicitly.\n <P>\n If this method is called while editing is already in progress, the value from the current\n editCell will either be stored locally as a temporary edit value, or saved via 'saveEdits()'\n depending on <code>this.saveByCell</code>, and the position of the new edit cell.<br>\n Will update the UI to show the editor for the new cell, and put focus in it unless \n explicitly suppressed by the optional <code>suppressFocus</code> parameter.\n\n",
        name:"startEditing",
        seeAlso:[
            {ref:"method:ListGrid.canEditCell", description:null},
            {ref:"attr:ListGrid.editEvent", description:null}
        ],
        params:[
            {description:"Row number of the cell to edit.  Defaults to first                                  editable row", 
             optional:true,name:"rowNum", defaultValue:null, type:"number"},
            {description:"Column number of the cell to edit.  Defaults to first                                  editable column", 
             optional:true,name:"colNum", defaultValue:null, type:"number"},
            {description:"If passed this parameter suppresses the default                                   behavior of focussing in the edit form item when \n                                  the editor is shown.", 
             optional:true,name:"suppressFocus", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if we are editing the cell, false if not editing for some reason", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "object:DetailViewerRecord":{
        methods:[],
        ref:"object:DetailViewerRecord",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/DetailViewer"],
        attrs:[],
        description:"A DetailViewerRecord is an object literal with properties that define the values for the\n various fields of a ${isc.DocUtils.linkForRef('class:DetailViewer')}.\n <p>\n For example a DetailViewer that defines the following fields:\n <pre>\n fields : [\n     {name: \"field1\"},\n     {name: \"field2\"}\n ],\n </pre>\n Might have the following data:\n <pre>\n data : [\n     {field1: \"foo\", field2: \"bar\"},\n     {field1: \"field1 value\", field2: \"field2 value\"}\n ]\n </pre>\n Each element in the data array above is an instance of DetailViewerRecord - notice that\n these are specified simply as object literals with properties.",
        name:"DetailViewerRecord",
        seeAlso:[],
        type:"object"
    },
    "classAttr:Browser.isSupported":{
        ref:"classAttr:Browser.isSupported",
        flags:"R",
        description:"Whether SmartClient supports the current browser.\n <P>\n Note that this flag will only be available on browsers that at least support basic\n JavaScript.",
        name:"isSupported",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"varies by browser",
        type:"classAttr",
        definingClass:"object:Browser"
    },
    "attr:Tree.openProperty":{
        ref:"attr:Tree.openProperty",
        flags:"IRWA",
        description:"The property the default implementation of ${isc.DocUtils.linkForRef('method:Tree.isOpen')} consules to determine if the\n node is open or not.  By default, this property is auto-generated for you, but you can set\n it to a custom value if you want to declaratively specify this state, but be careful - if\n you display this Tree in multiple TreeGrids at the same time, the open state will not be\n tracked independently - see ${isc.DocUtils.linkForRef('group:sharingNodes')} for more info on this.",
        name:"openProperty",
        seeAlso:[
            {ref:"group:sharingNodes", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('initialData')}"],
        definingClass:"class:Tree",
        groups:["openList"]
    },
    "method:ValuesManager.getErrors":{
        ref:"method:ValuesManager.getErrors",
        flags:"",
        description:" Returns the set of errors for this valuesManager.\n Errors will be returned as an object of the format <br>\n <code>{field1:errors, field2:errors}</code><br>\n Where each errors object is either a single error message or an array of error message\n strings.\n",
        name:"getErrors",
        seeAlso:[],
        returns:{description:"Object contining mapping from field names to error strings. Returns null                  if there are no errors for this valuesManager.", 
         type:"object"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:ListGridField.iconSpacing":{
        ref:"attr:ListGridField.iconSpacing",
        flags:"IR",
        description:"Pixels between icon and title text.",
        name:"iconSpacing",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"integer",
        defaultValue:"6",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "class:EventHandler":{
        methods:[],
        ref:"class:EventHandler",
        classAttrs:[],
        classMethods:["classMethod:EventHandler.setDragTracker", "classMethod:EventHandler.getDragRect", 
         "classMethod:EventHandler.getTarget","classMethod:EventHandler.getDragTarget", "classMethod:EventHandler.getX", 
         "classMethod:EventHandler.getY","classMethod:EventHandler.leftButtonDown", "classMethod:EventHandler.rightButtonDown", 
         "classMethod:EventHandler.getKey","classMethod:EventHandler.shiftKeyDown", "classMethod:EventHandler.ctrlKeyDown", 
         "classMethod:EventHandler.altKeyDown"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"The ISC system provides a predictable cross-browser event-handling mechanism for ISC\n widgets. Events can be handled both at the page level (i.e., globally), and at the level of\n individual widgets.\n <p>\n With the exception of a few page-specific events ('load', 'unload', 'idle' and 'resize'),\n events are processed in the following sequence:\n <p>\n 1. The event is sent to any global (page-level) event handlers. These handlers can cancel\n further propagation of the event by returning false.  You can register to listen for any of the\n events linked in the seeAlso section (below) by calling ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')}\n method.\n <p>\n 2. If the event occurred on a form element or a link, it is passed on to the browser so that\n the element will perform its default action. No widget receives the event.\n <p>\n 3. If the event occurred on an enabled widget (but not on a form element or link inside\n the widget), it is sent to that widget's event handler, if any. This handler can cancel\n further propagation of the event by returning false.  An \"enabled\" widget is any widget that\n defines an event handler for one of the supported events.  Interceptable events are defined in\n the ${isc.DocUtils.linkForRef('class:Canvas#methods#events','\"widgetEvents\" section of Canvas')}.\n <p>\n 4. The event is \"bubbled\" up to the widget's parent in the containment hierarchy, if any.\n Again, the parent's handler for the event can cancel further propagation by returning\n false. This step is repeated, with the event \"bubbling\" up through the containment\n hierarchy, until a top-level widget is reached or the event is explicitly canceled.\n In brief, the ISC event model offers the best features of browser event models:\n <ul>\n <li> Page-first event handling allows you to reliably process or cancel any event before it\n      affects the objects on the page.\n <li> Event \"bubbling\" ensures that parent widgets receive events sent to their children,\n      and allows you to create generalized parent-level handlers rather than duplicating\n      code in each child.\n </ul>\n Note: Canceling propagation of an event may cancel its side effects as well, including the\n generation of other (synthetic) events. For example, if a global mouseDown handler returns\n false, drag-and-drop events will not be generated. Specific effects are discussed in the\n descriptions of the various events in the following sections.\n <p>\n SmartClient libraries will not interfere with native event handling when events occur\n outside of a target widget. You can therefore have HTML that is not ISC-based on the same\n page as widget objects that will react to native events as you would expect.\n <p>\n You can use isc.Event as an alias for isc.EventHandler.",
        name:"EventHandler",
        seeAlso:[
            {ref:"type:PageEvent", description:null},
            {ref:"classMethod:Page.setEvent", description:null},
            {ref:"classMethod:Page.clearEvent", description:null},
            {ref:"class:Canvas#methods#widgetEvents", description:null}
        ],
        type:"class"
    },
    "attr:ListGrid.nullGroupTitle":{
        ref:"attr:ListGrid.nullGroupTitle",
        flags:"IRW",
        description:"Default alias to use for groups with no value",
        name:"nullGroupTitle",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"String",
        defaultValue:"'-none-'",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:ImgTab.titleStyle":{
        ref:"attr:ImgTab.titleStyle",
        flags:"IR",
        description:"Like ${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')}, can set to provide a separate style for the\n title text.\n <P>\n If set and the ImgTab is ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')}, a \"v\" will be\n automatically prepended to the style name (hence \"tabTitle\" -> \"vtabTitle\").",
        name:"titleStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "group:upload":{
        ref:"group:upload",
        title:"Uploading Files",
        treeLocation:["Client Reference/Forms/Form Items/FileItem"],
        refs:["class:UploadItem", "class:FileItem", "class:MultiFileItem", "class:MultiFilePicker"],
        description:"SmartClient provides special client and server-side support for file upload that allows\n uploaded files to be treated like ordinary DataSource fields.  This includes:\n <ul>\n <li>the ${isc.DocUtils.linkForRef('class:FileItem')} and ${isc.DocUtils.linkForRef('class:MultiFileItem')} FormItems that enable users to upload one or\n more files as a background operation, without leaving the current page\n <li>server-side support that allows binary uploads to be treated as a normal DataSource field\n values, with all other aspects of server-side integration unchanged\n <li>built-in SQL DataSource support that can store and retrieve uploaded files from SQL\n databases\n <li>\n </ul>\n The following documentation assumes you are using the SmartClient Java Server.  If you are\n not, skip to the sections near the end of this soducment.\n <P>\n <b>Single file upload: \"binary\" field type</b>\n <P>\n To use SmartClient's client-server upload system, you use a DataSource field of\n ${isc.DocUtils.linkForRef('attr:DataSourceField.type','type')} \"binary\".  By default, a DynamicForm bound to a DataSource\n with a field of type \"binary\" will use the ${isc.DocUtils.linkForRef('class:FileItem')}, which displays a standard HTML\n &lt;input type=\"upload\"&gt; form control.\n <P>\n When you call ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} on a DynamicForm containing a FileItem,\n SmartClient processes the save identically to a saveData() call that did not include a file\n upload:\n <ul>\n <li> if you are using the built-in SQL connectors via serverType:\"sql\", the file will be\n saved to SQL as described under ${isc.DocUtils.linkForRef('type:FieldType','field type \"binary\"')}.\n <li> if you have server-side business logic, the inbound request may be routed to your\n business logic via RPCManager dispatch or DMI declarations as normal, your business logic\n will receive a normal DSRequest, and you are expected to provide a normal DSResponse.\n </ul>\n <P>\n Client-side callbacks, such as the callback passed to saveData(), fire normally.\n <P>\n <b>Processing File Uploads with server-side business logic</b>\n <P>\n Server-side business logic that processes file uploads may retrieve upload files via the\n server side API dsRequest.getUploadedFile(<i>fieldName</i>).  The uploaded file is returned\n as an instance of ISCFileItem, which provides access to a Java InputStream as well as\n metadata about the file (size, name).  \n See the ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for details.\n <P>\n Server-side validation errors may be provided, including validation errors for the uploaded\n file (such as too large or invalid content), and will be displayed in the form that\n attempted an upload.\n <P>\n Be aware of the following special concerns when processing file uploads:\n <ul>\n <li> if you provide your own Java Servlet or JSP that creates an instance of RPCManager in\n order process SmartClient requests, many APIs of the HttpServletRequest are not safe to call\n before you have created the RPCManager, passing in the HttpServletRequest.  These include\n getReader(), getParameter() and other commonly called methods.  This is a limitation of\n Java Servlets, not specific to SmartClient\n <li> unlike other DataSource \"add\" and \"update\" operations, you are not expected to return\n the file as part of the data returned in the DSResponse\n </ul>\n <P>\n <b>Multi file upload: MultiFileItem</b>\n <P>\n The MultiFileItem provides an interface for a user to save one or more files that are\n related to a DataSource record, where each file is represented by a record in a\n related DataSource.\n <P>\n See the ${isc.DocUtils.linkForRef('class:MultiFileItem')} docs for details.\n <P>\n <b>Upload without the SmartClient Server</b>\n <P>\n If it is acceptable that the application will do a full-page reload after the upload\n completes, you can simply:\n <ul>\n <li> set ${isc.DocUtils.linkForRef('attr:DynamicForm.encoding')} to \"multipart\"\n <li> include an ${isc.DocUtils.linkForRef('class:UploadItem')} to get a basic HTML upload control\n <li> set ${isc.DocUtils.linkForRef('attr:DynamicForm.action')} to a URL where you have deployed server-side code to\n handle the upload\n <li> call ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')} to cause the form to be submitted\n </ul>\n This cause the DynamicForm component to submit to the form.action URL like an ordinary HTML\n &lt;form&gt; element.  Many \n <a href='http://www.google.com/search?q=html+file+upload+example' onclick=\"window.open('http://www.google.com/search?q=html+file+upload+example');return false;\">online tutorials</a>\n are available which explain how to handle HTML form file upload in various server-side\n technologies.\n <P>\n Note that when you submitForm(), the only values that will be sent to your actionURL are \n values for which actual FormItems exist.  This differs from saveData(), in which the\n entire set of ${isc.DocUtils.linkForRef('attr:DynamicForm.values','form values')} are always sent.  To handle submitting\n extra values, use ${isc.DocUtils.linkForRef('class:HiddenItem')}s.\n <P>\n For further details, see the ${isc.DocUtils.linkForRef('class:UploadItem')} docs.\n <P>\n <b>Background upload without the SmartClient Server</b>\n <P>\n Achieving background file upload without using the SmartClient server is also possible\n although considerably more advanced.  In addition to the steps above, create a hidden\n &lt;iframe&gt; element in the page, and use ${isc.DocUtils.linkForRef('attr:DynamicForm.target')} to target the form\n submission at this IFRAME.  In order receive a callback notification when the upload\n completes, after processing the file upload, your server should output HTML content for the\n IFRAME that includes a &lt;SCRIPT&gt; block which will navigate out of the IFRAME (generally\n via the JavaScript global \"top\") and call a global method you have declared as a callback.",
        name:"upload",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.closeColumn":{
        ref:"method:CubeGrid.closeColumn",
        flags:"",
        description:"\n  Handler fired when column is closed\n\n      <br><i>methodType</i> handler\n",
        name:"closeColumn",
        seeAlso:[],
        params:[
            {description:"FacetValues for the appropriate col.", optional:false, 
             name:"headerFacetValues",defaultValue:null, type:"facetValues object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["columnControls"]
    },
    "attr:FormItem.globalTabIndex":{
        ref:"attr:FormItem.globalTabIndex",
        flags:"IRWA",
        description:"TabIndex for the form item within the page. Takes presidence over any local tab index\n specified as ${isc.DocUtils.linkForRef('attr:FormItem.tabIndex','item.tabIndex')}.",
        name:"globalTabIndex",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["focus"]
    },
    "type:SelectionStyle":{
        ref:"type:SelectionStyle",
        values:[
            {description:"don't select at all", value:"Selection.NONE"},
            {description:"select only one item at a time", value:"Selection.SINGLE"},
            {description:"select one or more items", value:"Selection.MULTIPLE"},
            {description:"select one or more items as a toggle 								  so you don't need to hold down control keys to select \n                                  more than one object", 
             value:"Selection.SIMPLE"}
        ],
        description:"Different styles of selection that a list, etc. might support",
        name:"SelectionStyle",
        seeAlso:[],
        type:"type",
        groups:["selection"]
    },
    "method:Date.toJapanShortDateTime":{
        ref:"method:Date.toJapanShortDateTime",
        flags:"",
        description:"			Return this date in the format: <code>YYYY/MM/DD HH:MM:SS</code>\n",
        name:"toJapanShortDateTime",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:ResultSet.dataArrived":{
        ref:"method:ResultSet.dataArrived",
        flags:"",
        description:" Notification fired when data has arrived from the server and has been successfully\n integrated into the cache.\n <P>\n When <code>dataArrived()</code> fires, an immediate call to <code>getRange()</code> with\n the <code>startRow</code> and <code>endRow</code> passed as arguments will return a List\n with no <code>Array.LOADING</code> markers.\n\n",
        name:"dataArrived",
        seeAlso:[],
        params:[
            {description:"starting index of rows that have just loaded", optional:false, 
             name:"startRow",defaultValue:null, type:"number"},
            {description:"ending index of rows that have just loaded, non-inclusive", optional:false, 
             name:"endRow",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:CheckboxItem.titleStyle":{
        ref:"attr:CheckboxItem.titleStyle",
        deprecated:"As of Isomorphic SmartClient build 5.5, use textBoxStyle instead",
        flags:"IRW",
        description:"Base CSS class for this item's title text",
        name:"titleStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["appearance"]
    },
    "attr:DataSource.jsonSuffix":{
        ref:"attr:DataSource.jsonSuffix",
        flags:"IRA",
        description:"Allows you to specify an arbitrary suffix string to apply to all json format responses \n sent from the server to this application.<br>\n The inclusion of such a suffix ensures your code is not directly executable outside of\n your application, as a preventitive measure against\n <a href='http://www.google.com/search?q=javascript+hijacking' onclick=\"window.open('http://www.google.com/search?q=javascript+hijacking');return false;\">javascript hijacking</a>.\n <br>\n Only applies to responses formatted as json objects. Does not apply to responses returned\n via scriptInclude type transport.",
        name:"jsonSuffix",
        seeAlso:[
            {ref:"attr:OperationBinding.dataFormat", description:null},
            {ref:"attr:OperationBinding.dataTransport", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "method:Window.removeItem":{
        ref:"method:Window.removeItem",
        flags:"A",
        description:"			Removes a widget from the window.\n",
        name:"removeItem",
        seeAlso:[],
        params:[
            {description:"the widget to be removed", optional:false, name:"item", defaultValue:null, 
             type:"Canvas"}
        ],
        returns:{description:"the array of widgets removed", type:"array"},
        type:"method",
        definingClass:"class:Window",
        groups:["windowItems"]
    },
    "attr:StaticTextItem.wrap":{
        ref:"attr:StaticTextItem.wrap",
        flags:"IRW",
        description:"If true, item contents can wrap. If false, all the contents should appear on a single line.",
        name:"wrap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StaticTextItem",
        groups:["appearance"]
    },
    "method:ResultSet.allRowsCached":{
        ref:"method:ResultSet.allRowsCached",
        flags:"A",
        description:" Do we have a complete client-side cache of all records for this dataSource?\n",
        name:"allRowsCached",
        seeAlso:[],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:Tree.getDescendants":{
        ref:"method:Tree.getDescendants",
        flags:"",
        description:"\n Returns the list of all descendants of a node.  Note: this method can be very slow,\n especially on large trees because it assembles a list of all descendants recursively.\n Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in combination with ${isc.DocUtils.linkForRef('method:Tree.getChildren')} will\n be much faster.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getDescendants",
        seeAlso:[],
        params:[
            {description:"node in question (the root node is asumed if none specified)", 
             optional:true,name:"node", defaultValue:null, type:"TreeNode"}
        ],
        returns:{description:"List of descendants of the node.", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:StretchImgButton.setActionType":{
        ref:"method:StretchImgButton.setActionType",
        flags:"",
        description:" Update the 'actionType' for this canvas (radio / checkbox / button)\n If the canvas is currently selected, and the passed in actionType is 'button'\n this method will deselect the canvas.\n",
        name:"setActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state", "event handling"]
    },
    "method:Selection.selectSingle":{
        ref:"method:Selection.selectSingle",
        flags:"",
        description:" Select a single item and deselect everything else\n",
        name:"selectSingle",
        seeAlso:[],
        params:[
            {description:"object to select", optional:false, name:"item", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:DynamicForm.itemHoverStyle":{
        ref:"attr:DynamicForm.itemHoverStyle",
        flags:"IRW",
        description:"CSS Style for hovers shown for items",
        name:"itemHoverStyle",
        seeAlso:[
            {ref:"attr:FormItem.hoverStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"formHover\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "attr:ListGrid.autoFetchData":{
        ref:"attr:ListGrid.autoFetchData",
        flags:"IR",
        description:"If true, when this component is first drawn, automatically call <code>this.fetchData()</code>",
        name:"autoFetchData",
        seeAlso:[
            {ref:"method:ListGrid.fetchData", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fetchOperation')}"],
        definingClass:"class:ListGrid",
        groups:["databinding"]
    },
    "attr:StretchImg.capSize":{
        ref:"attr:StretchImg.capSize",
        flags:"IRW",
        description:"If the default items are used, capSize is the size in pixels of the first and last\n          images in this stretchImg.",
        name:"capSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "method:Canvas.shouldSnapOnDrop":{
        ref:"method:Canvas.shouldSnapOnDrop",
        flags:"A",
        description:" Override this method to give programmatic control over whether or not the parameter \n <code>dragTarget</code> should snap to this object's grid when dropped.  Note that this only applies\n if snap-to-grid is enabled on either <code>dragTarget</code> or this object.  See \n ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid')} and ${isc.DocUtils.linkForRef('attr:Canvas.childrenSnapToGrid')}.\n <P>\n The default implementation simply returns true.\n\n",
        name:"shouldSnapOnDrop",
        seeAlso:[],
        params:[
            {description:"The object about to be dropped", optional:false, name:"dragTarget", 
             defaultValue:null,type:"isc.Canvas"}
        ],
        returns:{description:"true if <code>dragTarget</code> should snap to this object's grid; otherwise false", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Canvas.showDragShadow":{
        ref:"attr:Canvas.showDragShadow",
        flags:"IRWA",
        description:"When this widget is dragged, if its dragAppearance is <code>\"target\"</code>, should\n we show a shadow behind the canvas during the drag.",
        name:"showDragShadow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragEffects')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:CubeGrid.selectFacetValue":{
        ref:"method:CubeGrid.selectFacetValue",
        flags:"",
        description:"\n  select/deselect the header for a given facet value\n\n  <br><i>methodType</i> action\n",
        name:"selectFacetValue",
        seeAlso:[],
        params:[
            {description:"ID of facet", optional:false, name:"facetId", defaultValue:null, type:"string"},
            {description:"ID of facetValue to select", optional:false, name:"facetValueId", 
             defaultValue:null,type:"string"},
            {description:"new selection state - if null defaults to true", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:Tree.getLength":{
        ref:"method:Tree.getLength",
        flags:"",
        description:"\n Returns the number of items in the current open list.\n\n",
        name:"getLength",
        seeAlso:[
            {ref:"method:Tree.getOpenList", description:null}
        ],
        returns:{description:"number of items in open list", type:"number"},
        type:"method",
        definingClass:"class:Tree"
    },
    "group:dataBoundComponentMethods":{
        ref:"group:dataBoundComponentMethods",
        title:"DataBound Component Methods",
        treeLocation:["Client Reference/Data Binding"],
        refs:["method:DynamicForm.editNewRecord", "method:DynamicForm.editRecord", 
         "method:DynamicForm.editSelectedData","method:DynamicForm.submit", "method:DynamicForm.saveData", "method:DynamicForm.fetchData", 
         "method:DynamicForm.filterData","method:ValuesManager.editNewRecord", "method:ValuesManager.editRecord", 
         "method:ValuesManager.editSelectedData","method:ValuesManager.saveData", "method:ValuesManager.submit", 
         "method:ValuesManager.filterData","method:ValuesManager.fetchData", "method:DetailViewer.viewSelectedData", 
         "method:ListGrid.fetchData","method:ListGrid.filterData", "method:ListGrid.fetchRelatedData", 
         "method:ListGrid.clearCriteria","method:ListGrid.addData", "method:ListGrid.updateData", "method:ListGrid.removeData", 
         "method:ListGrid.removeSelectedData","method:TreeGrid.fetchData", "method:TreeGrid.filterData"],
        description:"An Action Method initiates an orchestrated client-server flow that stores or retrieves data\n and updates one or more components.\n <P>\n For example, the ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','editor.saveData()')} Action Method saves the\n record currently being edited in the form, transparently handling the trip to the server,\n standard error conditions such as validation errors (whether the validation error\n happens on the client or server), and update of client-side caches.\n <P>\n Action Methods are available on DataBoundComponents.",
        name:"dataBoundComponentMethods",
        seeAlso:[
            {ref:"interface:DataBoundComponent", description:null}
        ],
        type:"group"
    },
    "attr:groupNode.groupMembers":{
        ref:"attr:groupNode.groupMembers",
        flags:"R",
        description:"Array of ListGridRecord that belong to this group, or, for multi-field grouping, array\n of groupNodes of subgroups under this groupNode.",
        name:"groupMembers",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Array of ListGridRecord or GroupNode",
        defaultValue:"see below",
        type:"attr",
        definingClass:"object:groupNode",
        groups:["grouping"]
    },
    "attr:EdgedCanvas.edgeLeft":{
        ref:"attr:EdgedCanvas.edgeLeft",
        flags:"IR",
        description:"Height in pixels for left corners and edges.  Defaults to edgeSize when unset.",
        name:"edgeLeft",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:ToolStrip.resizeBarSize":{
        ref:"attr:ToolStrip.resizeBarSize",
        flags:"IRA",
        description:"Thickness of the resizeBars in pixels",
        name:"resizeBarSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"14",
        type:"attr",
        definingClass:"class:ToolStrip"
    },
    "method:Button.setTitle":{
        ref:"method:Button.setTitle",
        flags:"",
        description:" Set the title.\n",
        name:"setTitle",
        seeAlso:[],
        params:[
            {description:"new title", optional:false, name:"newTitle", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["appearance"]
    },
    "method:Tree.getDescendantLeaves":{
        ref:"method:Tree.getDescendantLeaves",
        flags:"",
        description:"\n Returns the list of all descendants of a node that are leaves.  This works just like\n ${isc.DocUtils.linkForRef('method:Tree.getDescendants')}, except folders are not part of the returned list.\n Folders are still recursed into, just not returned.  Like ${isc.DocUtils.linkForRef('method:Tree.getDescendants')},\n this method can be very slow for large trees.  Generally, ${isc.DocUtils.linkForRef('method:Tree.find')} in\n combination with ${isc.DocUtils.linkForRef('method:Tree.getLeaves')} be much faster.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getDescendantLeaves",
        seeAlso:[],
        params:[
            {description:"node in question (the root node is assumed if none specified)", 
             optional:true,name:"node", defaultValue:null, type:"TreeNode"}
        ],
        returns:{description:"List of descendants of the node that are leaves.", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:DynamicForm.reset":{
        ref:"method:DynamicForm.reset",
        flags:"",
        description:"\n Resets values to the state it was the last time <code>setValues()</code> or\n <code>rememberValues()</code> was called. If neither of those methods has been called,\n values will be set back to their inital values at init time.\n\n",
        name:"reset",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "method:ListGrid.setValueMap":{
        ref:"method:ListGrid.setValueMap",
        flags:"",
        description:" Set the ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','valueMap')} for a field.\n See also the ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap','setEditorValueMap()')}\n and ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap','getEditorValueMap()')} methods which allow further \n customization of the valueMap displayed while the field is in edit mode.\n\n",
        name:"setValueMap",
        seeAlso:[],
        params:[
            {description:"Name or number of field to update", optional:false, name:"fieldID", 
             defaultValue:null,type:"string || number"},
            {description:"ValueMap for the field", optional:false, name:"map", defaultValue:null, 
             type:"object"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "group:noFrames":{
        ref:"group:noFrames",
        title:"Don't Misuse Frames",
        refs:[],
        description:"Loading the SmartClient framework into multiple frames or iframes within the same browser is\n not a supported configuration, or more accurately, not a <i>supportable</i> configuration,\n for the following reasons:\n <ul>\n <li> each additional frame multiplies the memory footprint and reduces speed\n <li> having multiple frames prevents drag and drop between components in different frames\n <li> modality handling (eg modal dialogs) doesn't automatically take into account multiple\n frames (consider tabbing order, nested modality and other issues, you'll see it's not\n realistic to provide automatic cross-frame modality handling)\n <li> inter-frame communication triggers several browser bugs: memory leaks, performance\n issues, intermittent crashes in some browsers, inconsistencies in basic JavaScript operators\n such as \"typeof\", and problems with form focus handling in IE, among many other bugs\n </ul>\n None of these problems are specific to SmartClient.  They happen with Ajax frameworks in\n general as well as other RIA technologies.  This is why no successful Ajax application has\n ever used the approach of double-loading a component framework into multiple frames.\n <P>\n The recommended ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient Architecture')} involves loading as many\n SmartClient-based application views as possible in the first page load, then showing and\n hiding different views as the user navigates through the application.\n <P>\n If, for whatever reason, you cannot follow the SmartClient Architecture and must load new\n SmartClient-based views by contacting the server each time, use the ${isc.DocUtils.linkForRef('class:ViewLoader')} class\n to load new views, never frames.\n <P>\n Note that the use of IFrames is appropriate in certain circumstances, including loading\n certain types of content within an ${isc.DocUtils.linkForRef('class:HTMLFlow','contentsType,HTMLFlow')}.  The only\n prohibited usage is loading the SmartClient framework into multiple frames within the same\n browser.",
        name:"noFrames",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeGrid.closedIconSuffix":{
        ref:"attr:TreeGrid.closedIconSuffix",
        flags:"IRW",
        description:"This suffix will be appended to the ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for closed folders.\n If ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} is set to <code>false</code> this suffix will also be\n appended to open folders' icons.",
        name:"closedIconSuffix",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"closed",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:DateChooser.prevYearIconHeight":{
        ref:"attr:DateChooser.prevYearIconHeight",
        flags:"IRW",
        description:"Height of the icon for the previous year button",
        name:"prevYearIconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:Window.addItems":{
        ref:"method:Window.addItems",
        flags:"",
        description:"			Adds an array of widgets to the window.\n",
        name:"addItems",
        seeAlso:[],
        params:[
            {description:"an array of widgets to be added", optional:false, name:"items", 
             defaultValue:null,type:"Array of Canvas"}
        ],
        returns:{description:"array of widgets added", type:"array"},
        type:"method",
        definingClass:"class:Window",
        groups:["windowItems"]
    },
    "group:chartAppearance":{
        ref:"group:chartAppearance",
        refs:["attr:Chart.threeD", "attr:Chart.shouldAnimateShow", "attr:Chart.labelValues"],
        name:"chartAppearance",
        seeAlso:[],
        type:"group"
    },
    "class:OperationBinding":{
        methods:[],
        ref:"class:OperationBinding",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding/DataSource"],
        attrs:["attr:OperationBinding.operationType", "attr:OperationBinding.operationId", 
         "attr:OperationBinding.serverMethod","attr:OperationBinding.methodArguments", "attr:OperationBinding.serverObject", 
         "attr:OperationBinding.wsOperation","attr:OperationBinding.dataURL", "attr:OperationBinding.dataProtocol", 
         "attr:OperationBinding.dataFormat","attr:OperationBinding.dataTransport", "attr:OperationBinding.callbackParam", 
         "attr:OperationBinding.requestProperties","attr:OperationBinding.defaultParams", "attr:OperationBinding.recordXPath", 
         "attr:OperationBinding.recordName","attr:OperationBinding.responseDataSchema", "attr:OperationBinding.useFlatFields", 
         "attr:OperationBinding.xmlNamespaces"],
        description:"An operationBinding tells a DataSource how to execute one of the basic DS operations: fetch,\n add, update, remove.\n <P>\n OperationBindings are typically used to declaratively bind a DataSource to a Web Service, by\n associating each DataSource operation with a Web Service operation, and providing properties\n such as ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} to map web service responses to data expected by a\n DataSource.",
        name:"OperationBinding",
        seeAlso:[],
        type:"class"
    },
    "attr:CheckboxItem.unsetImage":{
        ref:"attr:CheckboxItem.unsetImage",
        flags:"IRW",
        description:"URL for the image to display when this checkbox is unset.  Defaults to matching the\n unchecked image.",
        name:"unsetImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/unchecked.gif\"",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["appearance"]
    },
    "attr:ImgTab.showFocus":{
        ref:"attr:ImgTab.showFocus",
        deprecated:"as of SmartClient 6.1 in favor of ${isc.DocUtils.linkForRef('attr:ImgTab.showFocused')}",
        flags:"IRW",
        description:"Should we visibly change state when the tab recieves keyboard focus?",
        name:"showFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "attr:ImgButton.iconHeight":{
        ref:"attr:ImgButton.iconHeight",
        flags:"IR",
        description:"Height in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "method:ListGrid.rowMouseDown":{
        ref:"method:ListGrid.rowMouseDown",
        flags:"",
        description:" Called when a row receives a mousedown event.\n \n",
        name:"rowMouseDown",
        seeAlso:[],
        params:[
            {description:"record object returned from 'getCellRecord()'", optional:false, 
             name:"record",defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:SliderItem.minValue":{
        ref:"attr:SliderItem.minValue",
        flags:"IRW",
        description:"The minimum slider value. The slider value is equal to minValue when the thumb is at the\n bottom or left of the slider (unless flipValues is true, in which case the minimum value\n is at the top/right of the slider)",
        name:"minValue",
        seeAlso:[
            {ref:"attr:Slider.flipValues", description:null}
        ],
        valueType:"float",
        defaultValue:"1",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sliderItem')}"],
        definingClass:"class:SliderItem"
    },
    "attr:StretchImgButton.labelBreadthPad":{
        ref:"attr:StretchImgButton.labelBreadthPad",
        flags:"IRW",
        description:"The padding for a StretchImgButton's label is determined as follows.\n <P>\n If <code>labelHPad</code> is set it will specify the horizontal padding applied to the\n label. Similarly if <code>labelVPad</code> is set it will specify the vertical padding\n for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.\n <P>\n Otherwise <code>labelLengthPad</code> can be set to specify the label padding along the\n length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,\n otherwise vertical padding), and \n <code>labelBreadthPad</code> can be set to specify the label padding along the other axis.\n <P>\n Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and\n will be set to zero on the breadth axis.\n <P>\n So by default the label will be sized to match the center image of the StretchImgButton, but\n these settings allow the label to partially or wholly overlap the caps.",
        name:"labelBreadthPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:Array.or":{
        ref:"method:Array.or",
        flags:"",
        description:" Returns true if at least one value between the start and end indices is true.\n\n",
        name:"or",
        seeAlso:[],
        params:[
            {description:"optional start index (default is 0)", optional:true, name:"start", 
             defaultValue:null,type:"number"},
            {description:"optional end index (default is list.length)", optional:true, name:"end", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"at least one of the items is true", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "attr:Canvas.ID":{
        ref:"attr:Canvas.ID",
        flags:"IR",
        getter:["getID"],
        description:"Global identifier for referring to a widget in JavaScript.  The ID property is optional if\n you do not need to refer to the widget from JavaScript, or can refer to it indirectly\n (for example, by storing the reference returned by ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}).\n <P>\n An internal, unique ID will automatically be created upon instantiation for any canvas\n where one is not provided.",
        name:"ID",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["basics"]
    },
    "type:PercentBoxModel":{
        ref:"type:PercentBoxModel",
        values:[
            {description:"use coordinates relative to the {${isc.DocUtils.linkForRef('method:Canvas.getVisibleHeight')},visibleHeight} and width of the other canvas", 
             value:"\"visible\""},
            {description:"use coordinates relative to the {${isc.DocUtils.linkForRef('method:Canvas.getViewportHeight')},viewportHeight} and width of the other canvas", 
             value:"\"viewport\""}
        ],
        description:"Determines sizing model when sizing / positioning a canvas relative to its\n ${isc.DocUtils.linkForRef('attr:Canvas.percentBox','percentBox')}.",
        name:"PercentBoxModel",
        seeAlso:[],
        type:"type"
    },
    "method:Button.setIcon":{
        ref:"method:Button.setIcon",
        flags:"",
        description:" Change the icon being shown next to the title text.\n",
        name:"setIcon",
        seeAlso:[],
        params:[
            {description:"URL of new icon", optional:false, name:"icon", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:ListGridField.showDownIcon":{
        ref:"attr:ListGridField.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "attr:CheckboxItem.textBoxStyle":{
        ref:"attr:CheckboxItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class for this item's title text",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"labelAnchor\"",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["appearance"]
    },
    "method:CubeGrid.facetAdded":{
        ref:"method:CubeGrid.facetAdded",
        flags:"",
        description:"      Notification fired when a new facet is added.\n \n",
        name:"facetAdded",
        seeAlso:[
            {ref:"method:CubeGrid.facetRemoved", description:"<br><i>methodType</i>  handler"}
        ],
        params:[
            {description:"facetId that was added", optional:false, name:"facetId", defaultValue:null, 
             type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "method:GridRenderer.getNearestColToEvent":{
        ref:"method:GridRenderer.getNearestColToEvent",
        flags:"",
        description:"			Returns the nearest column to the event coordinates\n",
        name:"getNearestColToEvent",
        seeAlso:[],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events", "selection"]
    },
    "attr:DynamicForm.longTextEditorThreshold":{
        ref:"attr:DynamicForm.longTextEditorThreshold",
        flags:"IRW",
        description:"When creating form items for fields with text type data, if the specified length of the\n field exceeds this threshold we will create form item of type \n <code>this.longTextEditorType</code> (a TextAreaItem by default), rather than a simple\n text item.  Overridden by explicitly specifying <code>editorType</code> for the field.",
        name:"longTextEditorThreshold",
        seeAlso:[],
        valueType:"number",
        defaultValue:"255",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["appearance"]
    },
    "method:Canvas.getViewportHeight":{
        ref:"method:Canvas.getViewportHeight",
        flags:"A",
        description:"  Returns the height of the viewport onto the scrollable content.\n\n",
        name:"getViewportHeight",
        seeAlso:[],
        returns:{description:"height of the viewport, in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "classAttr:FileLoader.defaultSkin":{
        ref:"classAttr:FileLoader.defaultSkin",
        flags:"RW",
        description:"Default skin for  ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} to\n use if one is not provided by the user.",
        name:"defaultSkin",
        seeAlso:[
            {ref:"classMethod:FileLoader.cacheISC", description:null},
            {ref:"classMethod:FileLoader.loadISC", description:null}
        ],
        valueType:"String",
        defaultValue:"\"standard\"",
        type:"classAttr",
        definingClass:"class:FileLoader"
    },
    "attr:FormItem.hoverOpacity":{
        ref:"attr:FormItem.hoverOpacity",
        flags:"IRW",
        description:"Opacity for any hover shown for this item",
        name:"hoverOpacity",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverOpacity", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "class:StatefulCanvas":{
        methods:["method:StatefulCanvas.setBaseStyle", "method:StatefulCanvas.setState", 
         "method:StatefulCanvas.getState","method:StatefulCanvas.setSelected", "method:StatefulCanvas.select", 
         "method:StatefulCanvas.deselect","method:StatefulCanvas.isSelected", "method:StatefulCanvas.getActionType", 
         "method:StatefulCanvas.setActionType","method:StatefulCanvas.addToRadioGroup", "method:StatefulCanvas.removeFromRadioGroup", 
         "method:StatefulCanvas.setDisabled","method:StatefulCanvas.setIconOrientation", "method:StatefulCanvas.setAutoFit", 
         "method:StatefulCanvas.getTitle","method:StatefulCanvas.setTitle", "method:StatefulCanvas.setIcon"],
        ref:"class:StatefulCanvas",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:StatefulCanvas.title", "attr:StatefulCanvas.redrawOnStateChange", 
         "attr:StatefulCanvas.selected","attr:StatefulCanvas.state", "attr:StatefulCanvas.showRollOver", 
         "attr:StatefulCanvas.showFocus","attr:StatefulCanvas.showFocused", "attr:StatefulCanvas.showFocusedAsOver", 
         "attr:StatefulCanvas.showDown","attr:StatefulCanvas.showDisabled", "attr:StatefulCanvas.actionType", 
         "attr:StatefulCanvas.radioGroup","attr:StatefulCanvas.baseStyle", "attr:StatefulCanvas.align", "attr:StatefulCanvas.valign", 
         "attr:StatefulCanvas.autoFit","attr:StatefulCanvas.icon", "attr:StatefulCanvas.iconSize", 
         "attr:StatefulCanvas.iconWidth","attr:StatefulCanvas.iconHeight", "attr:StatefulCanvas.iconOrientation", 
         "attr:StatefulCanvas.iconSpacing","attr:StatefulCanvas.showDisabledIcon", "attr:StatefulCanvas.showRollOverIcon", 
         "attr:StatefulCanvas.showDownIcon","attr:StatefulCanvas.showSelectedIcon", "attr:StatefulCanvas.showFocusedIcon", 
         "attr:StatefulCanvas.showOverCanvas","attr:StatefulCanvas.overCanvas", "attr:StatefulCanvas.overCanvasConstructor", 
         "attr:StatefulCanvas.overCanvasDefaults"],
        description:"A component that has a set of possible states, and which presents itself differently according to\n which state it is in.  An example is a button, which can be \"up\", \"down\", \"over\" or \"disabled\".",
        name:"StatefulCanvas",
        seeAlso:[],
        type:"class"
    },
    "method:Canvas.setShowShadow":{
        ref:"method:Canvas.setShowShadow",
        flags:"",
        description:" Method to update ${isc.DocUtils.linkForRef('attr:Canvas.showShadow')}.\n",
        name:"setShowShadow",
        seeAlso:[],
        params:[
            {description:"true if the shadow should be visible false if not", optional:false, 
             name:"showShadow",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["shadow"]
    },
    "attr:ComboBoxItem.pickListCriteria":{
        ref:"attr:ComboBoxItem.pickListCriteria",
        flags:"IRWA",
        description:"If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is\n set) this property can be used to provide static filter criteria when retrieving the data\n for the pickList.",
        name:"pickListCriteria",
        seeAlso:[],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:GridRenderer.fixedColumnWidths":{
        ref:"attr:GridRenderer.fixedColumnWidths",
        flags:"IRWA",
        description:"Should we horizontally clip cell contents, or allow columns to expand horizontally to\n show all contents?<br><br>\n\n If we allow columns to expand, the column width is treated as a minimum.",
        name:"fixedColumnWidths",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["sizing"]
    },
    "method:Canvas.show":{
        ref:"method:Canvas.show",
        flags:"",
        description:" Sets this widget's visibility to \"inherit\", so that it becomes visible if all it's parents\n are visible or it has no parents.\n <P>\n If the widget has not yet been drawn (and doesn't have a parent or master), this method\n calls the draw method as well.\n\n",
        name:"show",
        seeAlso:[],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('showAndHide')}"],
        definingClass:"class:Canvas",
        groups:["visibility"]
    },
    "attr:Button.wrap":{
        ref:"attr:Button.wrap",
        flags:"IRW",
        description:"A boolean indicating whether the button's title should word-wrap, if necessary.",
        name:"wrap",
        setter:["setWrap"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["basics"]
    },
    "classAttr:Time.UTCHoursOffset":{
        ref:"classAttr:Time.UTCHoursOffset",
        flags:"IRA",
        description:"Time data is stored in Date type objects. \n In order to have times display consistently across browsers all times assumed to be stored\n as UTC times.\n This property allows you to specify an timezone offset between the stored time \n and the displayed time - for example if you have legacy server data with date-time data \n in PST modify this property to be the number of hours offset from UTC.\n <P>\n Alternatively this property can be used to display local times for values stored on\n the server in UTC time. Here's some sample code that would achieve this based on the \n browser's locale settings:\n <pre>\n    isc.Time.addClassProperties({\n        UTCHoursOffset:new Date().getTimezoneOffset()/60\n    });\n </pre>",
        name:"UTCHoursOffset",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"classAttr",
        definingClass:"class:Time"
    },
    "attr:HiddenItem.colSpan":{
        ref:"attr:HiddenItem.colSpan",
        flags:"IRW",
        description:"hidden fields don't take up any columns",
        name:"colSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:HiddenItem",
        groups:["appearance"]
    },
    "object:TreeNode":{
        methods:[],
        ref:"object:TreeNode",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/TreeGrid", "Client Reference/System/Tree"],
        attrs:["attr:TreeNode.enabled", "attr:TreeNode.canDrag", "attr:TreeNode.canAcceptDrop", 
         "attr:TreeNode.isFolder","attr:TreeNode.name", "attr:TreeNode.title", "attr:TreeNode.id", "attr:TreeNode.parentId", 
         "attr:TreeNode.children"],
        description:"Every node in the tree is represented by TreeNode object which is an object literal with a\n set or properties that configure the node.\n <p>\n When a Tree is supplied as ${isc.DocUtils.linkForRef('attr:TreeGrid.data')} to ${isc.DocUtils.linkForRef('class:TreeGrid')}, you can also set\n properties from ${isc.DocUtils.linkForRef('object:ListGridRecord')} on the TreeNode (e.g. setting\n ${isc.DocUtils.linkForRef('attr:ListGridRecord.enabled')}:<code>false</code> on the node).",
        name:"TreeNode",
        seeAlso:[],
        type:"object"
    },
    "attr:Facet.borderAfter":{
        ref:"attr:Facet.borderAfter",
        flags:"IR",
        description:"CSS line style to apply as a border after this facet, eg \"1px dashed blue\"",
        name:"borderAfter",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "method:ValuesManager.submit":{
        ref:"method:ValuesManager.submit",
        flags:"",
        description:" <code>submit()</code> is automatically called when a ${isc.DocUtils.linkForRef('class:SubmitItem')} included in the\n form is clicked, or, if ${isc.DocUtils.linkForRef('attr:DynamicForm.saveOnEnter','saveOnEnter')} is set, when the\n \"Enter\" key is pressed in a text input.  Submit can also be manually called.\n <P>\n If ${isc.DocUtils.linkForRef('method:DynamicForm.submitValues','form.submitValues()')} exists, it will be called, then\n immediately return.\n <P>\n Otherwise, default behavior varies based on ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit','form.canSubmit')}: if\n <code>canSubmit</code> is false, ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will be called to\n handle saving via SmartClient databinding.  \n <P>\n If <code>canSubmit</code> is true, the form will be submitted like an ordinary HTML\n form via ${isc.DocUtils.linkForRef('method:DynamicForm.submitForm')}.\n <P>\n The parameters to <code>submit()</code> apply only if <code>submit()</code> will be\n calling ${isc.DocUtils.linkForRef('method:ValuesManager.saveData')}.  If you override <code>submit()</code>, you can safely\n ignore the parameters as SmartClient framework code does not pass them.\n \n",
        name:"submit",
        seeAlso:[
            {ref:"method:DynamicForm.submitValues", description:null}
        ],
        params:[
            {description:"callback to invoke on completion.                                          [Ignored if this.canSubmit is true]", 
             optional:true,name:"callback", defaultValue:null, type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued\n                                          [Ignored if this.canSubmit is true]", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "attr:CubeGrid.chartType":{
        ref:"attr:CubeGrid.chartType",
        flags:"IRW",
        description:"Default type of chart to plot.",
        name:"chartType",
        seeAlso:[],
        valueType:"ChartType",
        defaultValue:"\"Column\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Canvas.childrenSnapToGrid":{
        ref:"attr:Canvas.childrenSnapToGrid",
        flags:"IRW",
        description:"If true, causes this canvas's children to snap to its grid when dragging.\n This behavior can be overridden on a per-child basis by setting the \n ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} value on the child.",
        name:"childrenSnapToGrid",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Canvas.htmlPosition":{
        ref:"attr:Canvas.htmlPosition",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')} is specified, this attribute specifies the position where \n the canvas should be inserted relative to the <code>htmlElement</code> in the DOM.",
        name:"htmlPosition",
        setter:["setHtmlPosition"],
        seeAlso:[],
        valueType:"DrawPosition",
        defaultValue:"\"afterBegin\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["htmlElement", "positioning"]
    },
    "method:ListGrid.setEditValues":{
        ref:"method:ListGrid.setEditValues",
        flags:"",
        description:"\n This method sets up a set of editValues for some row / cell.  It differs from \n 'setEditValue()' in that:<br>\n &nbsp;- it takes values for multiple fields<br> \n &nbsp;- it clears out any previous edit values for the record<br>\n\n",
        name:"setEditValues",
        seeAlso:[],
        params:[
            {description:"Row number for the record being edited", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"New values for the row", optional:false, name:"values", defaultValue:null, 
             type:"any"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:DynamicForm.requiredRightTitlePrefix":{
        ref:"attr:DynamicForm.requiredRightTitlePrefix",
        flags:"IRW",
        description:"The string prepended to the title of every required item in this form if\n highlightRequiredFields is true and the titleOrientation property is set to \"right\".",
        name:"requiredRightTitlePrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"<B>:&nbsp;\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "method:ValuesManager.getMembers":{
        ref:"method:ValuesManager.getMembers",
        flags:"",
        description:"  Retrieves an array of pointers to all the member forms for this valuesManager.\n",
        name:"getMembers",
        seeAlso:[],
        returns:{description:"array of member forms", type:"array"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "method:GridRenderer.getCellRecord":{
        ref:"method:GridRenderer.getCellRecord",
        flags:"",
        description:" Return the record that holds the value for this cell.\n <P>\n Implementing <code>getCellRecord</code> is optional: the actual HTML placed into each\n grid cell comes from <code>getCellValue</code>, and a valid grid can be created without any\n notion of \"records\" at all.\n <p>\n If you do implement <code>getCellRecord</code>, the value you return is passed to you as the\n \"record\" parameter in other methods.\n\n",
        name:"getCellRecord",
        seeAlso:[],
        params:[
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"record for this cell", type:"object"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "attr:ComboBoxItem.autoFetchData":{
        ref:"attr:ComboBoxItem.autoFetchData",
        flags:"IRA",
        description:"If this combo box retrieves its options from a <code>dataSource</code>, should options\n be fetched from the server when the item is first written out, or should this fetch be\n delayed until the user opens the pickList.",
        name:"autoFetchData",
        seeAlso:[
            {ref:"attr:PickList.optionDataSource", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:Canvas.isDisabled":{
        ref:"method:Canvas.isDisabled",
        flags:"",
        description:" Is this canvas disabled? Note that the disabled state is inherited - this method will return\n true if this widget, or any of its ancestors are marked disabled.\n",
        name:"isDisabled",
        seeAlso:[],
        returns:{description:"true if the widget or any widget above it in the containment hierarchy                      are disabled.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "group:safeSkinning":{
        ref:"group:safeSkinning",
        title:"Safe Skinning",
        refs:[],
        description:"The skinning mechanism is extremely powerful and gives you the ability to change\n internal functionality of components.  While this is useful for workarounds, you should\n think through any properties you override, considering what will happen with future\n versions of SmartClient, where the defaults may change or be expanded.\n <P>\n The following kinds of overrides are generally very safe:\n <ul>\n <li> Change ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} or ${isc.DocUtils.linkForRef('attr:Button.baseStyle','baseStyle')} to\n provide a custom CSS style or series of styles\n <li> Change a media path such as the ${isc.DocUtils.linkForRef('attr:Img.src','src')} of the \n ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}.\n <li> Change the size of any part of the UI that has a fixed pixel size, such as\n the height and width of the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}, especially when this is done\n to match the size of media you have created\n <li> Set properties such as ${isc.DocUtils.linkForRef('attr:Button.showRollOver')} that cause a component to\n visually react to more or fewer UI states (disabled, over, down, etc)\n </ul>\n The following should be very carefully considered:\n <ul>\n <li> Adding custom behaviors by passing in event handlers such as \n (eg ${isc.DocUtils.linkForRef('method:Canvas.showContextMenu','showContextMenu()')}).  If future versions of the\n component add more functionality, you may prevent new features from functioning, cause\n them to function only partially, or break.\n <P>\n If you want to ensure that you do not break new functionality added in future SmartClient\n versions, be sure to call ${isc.DocUtils.linkForRef('method:Class.Super','Super()')} for methods you override, and do not\n prevent events from bubbling.\n <P>\n If you want to ensure that <b>only</b> your custom behavior is used if a future version\n of a SmartClient component adds functionality, override all methods involved in the\n interaction, even if your methods do nothing.  For example, for a custom drop\n interaction, override dropOver, dropMove, dropOut and drop, even if you do nothing on\n dropMove().  Then, do not call Super() if there is no superclass behavior required for\n the interaction you've implemented.  Also, for any event handlers (such as drop())\n return false if you consider your code to have completely handled the event (no\n parent component should react).\n </ul>\n The following are not recommended:\n <ul>\n <li> Providing a global ${isc.DocUtils.linkForRef('attr:Canvas.ID','ID')} to a subcomponent (only works once).\n <li> Overriding ${isc.DocUtils.linkForRef('attr:Canvas.backgroundColor')}, ${isc.DocUtils.linkForRef('attr:Canvas.border','border')},\n ${isc.DocUtils.linkForRef('attr:Canvas.margin','margin')}, ${isc.DocUtils.linkForRef('attr:Canvas.padding','padding')}, or in general any single\n attribute otherwise controlled by CSS.  Future SmartClient versions may change the base\n CSS style, rendering your single-property customization senseless.  Change the entire\n CSS style via ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} instead.\n </ul>",
        name:"safeSkinning",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.validateOnChange":{
        ref:"attr:ListGrid.validateOnChange",
        flags:"IRW",
        description:"If true, validation will be perfomed on each edited cell when each editor's \n \"change\" handler is fired.<br>",
        name:"validateOnChange",
        seeAlso:[
            {ref:"attr:ListGridField.validateOnChange", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:GridRenderer.emptyMessageTableStyle":{
        ref:"attr:GridRenderer.emptyMessageTableStyle",
        flags:"IRW",
        description:"CSS styleName for the table as a whole if we're showing the empty message",
        name:"emptyMessageTableStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["emptyMessage"]
    },
    "attr:FormItem.wrapTitle":{
        ref:"attr:FormItem.wrapTitle",
        flags:"IRW",
        description:"If specified determines whether this items title should wrap.\n Overrides ${isc.DocUtils.linkForRef('attr:DynamicForm.wrapItemTitles','wrapItemTitles')} at the DynamicForm level.",
        name:"wrapTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "attr:TreeNode.name":{
        ref:"attr:TreeNode.name",
        flags:"IR",
        description:"The <code>name</code> property of a TreeNode is used for assembling a unique path (see\n ${isc.DocUtils.linkForRef('method:Tree.getPath')}) to the node.  A node's path is the concatenation of all parent names\n with the ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}. The path can then be used to find any node in the tree\n using ${isc.DocUtils.linkForRef('method:Tree.find')}.\n <p>\n If the nameProperty is not set on a given node, ${isc.DocUtils.linkForRef('method:Tree.getName')} and\n ${isc.DocUtils.linkForRef('method:Tree.getPath')} will auto-generate a unique name for you.\n <p>\n This property  is also used as the default title for the node (see ${isc.DocUtils.linkForRef('method:Tree.getTitle')})\n if ${isc.DocUtils.linkForRef('attr:TreeNode.title')} is not specified.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}.",
        name:"name",
        seeAlso:[
            {ref:"attr:Tree.nameProperty", description:null},
            {ref:"attr:Tree.pathDelim", description:null},
            {ref:"method:Tree.getPath", description:null},
            {ref:"method:Tree.getTitle", description:null}
        ],
        valueType:"String",
        defaultValue:"null, but see below",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:ResultSet.fetchMode":{
        ref:"attr:ResultSet.fetchMode",
        flags:"IRA",
        description:"Mode of fetching records from the server. If unset, will default to <code>\"local\"</code>\n if ${isc.DocUtils.linkForRef('attr:ResultSet.allRows')} is specified, otherwise <code>\"paged\"</code>.",
        name:"fetchMode",
        seeAlso:[
            {ref:"type:FetchMode", description:null}
        ],
        valueType:"FetchMode",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching"]
    },
    "type:DSServerType":{
        ref:"type:DSServerType",
        values:[
            {description:"Saves via Hibernate, by automatically generating a Hibernate configuration based on a\n SmartClient DataSource file (<i>dataSourceID</i>.ds.xml).  See\n ${isc.DocUtils.linkForRef('group:hibernateIntegration')} for details.", 
             value:"\"hibernate\""},
            {description:"Uses SmartClient's ${isc.DocUtils.linkForRef('group:sqlDataSource','built-in SQL connectors')} to talk to\n relational databases.  You can use this if your DataSource connects to a relational\n database table.", 
             value:"\"sql\""},
            {description:"Throws an error if dsRequest.execute() is called.  This is appropriate if you intend an\n entirely custom implementation, and you want an error thrown if there is an attempt to\n call an operation you have not implemented.", 
             value:"\"generic\""}
        ],
        description:"Indicates what the ISC server will do with a DataSource request if you call\n dsRequest.execute() in server code.\n <P>\n If you use a Java-based persistence layer not provided by SmartClient, such as\n Hibernate, EJB or your own custom object model, you don't need to set\n <code>dataSource.serverType</code> and should follow the\n ${isc.DocUtils.linkForRef('group:serverDataIntegration','integration instructions')}.\n <P>\n If you want to use the SmartClient SQL engine for persistence, set\n <code>dataSource.serverType</code> to \"sql\", and see the instructions on\n ${isc.DocUtils.linkForRef('group:sqlDataSource')}.",
        name:"DSServerType",
        seeAlso:[],
        type:"type",
        groups:["serverDataIntegration"]
    },
    "classAttr:Validator.mustBeLaterThan":{
        ref:"classAttr:Validator.mustBeLaterThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>dateRange</code> type validator\n  returns false because the value passed in is greater than the specified minimum date.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeLaterThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be later than ${min}\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:CubeGrid.rollupValue":{
        ref:"attr:CubeGrid.rollupValue",
        flags:"IR",
        getter:["getRollupValue"],
        description:"facetValueId of the default rollupValue for each facet.  Can be overriden per facet via\n facet.rollupValue",
        name:"rollupValue",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"sum\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:DateItem.inputFormat":{
        ref:"attr:DateItem.inputFormat",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is <code>true</code> this property can be used to specify\n the input format for date strings. If unset, the input format will be picked up from the\n Date class (see ${isc.DocUtils.linkForRef('classMethod:Date.setInputFormat')}).<br>\n Important: the input format and the ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')} \n for dateItems should always be set such that the format of strings displayed by this\n item matches the expected format of strings the user enters.",
        name:"inputFormat",
        seeAlso:[
            {ref:"attr:DateItem.displayFormat", description:null}
        ],
        valueType:"DateInputFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DateItem"
    },
    "type:FormItemBaseStyle":{
        ref:"type:FormItemBaseStyle",
        description:"This string is the base css class name applied to a FormItem (or some part of a form item).\n The style name will be modified as the 'state' of the form item changes. Specifically:<ul>\n <li>If ${isc.DocUtils.linkForRef('attr:FormItem.showFocused')} is true, when the form item recieves focus, this\n     style will be have the suffix <code>\"Focused\"</code> appended to it.</li>\n <li>If ${isc.DocUtils.linkForRef('attr:FormItem.showErrorStyle')} is true, if the form item has errors, this\n     style will be have the suffix <code>\"Error\"</code> appended to it.</li>\n <li>If ${isc.DocUtils.linkForRef('attr:FormItem.showDisabled')} is true, when the form item is disabled, this\n     style will be have the suffix <code>\"Disabled\"</code> appended to it.</li></ul>\n So for example if the <code>cellStyle</code> for some form item is set to <code>\"formCell\"</code>\n and <code>FormItem.showFocused</code> is true, when the form item recieves focus, the\n form item's cell will have the <code>\"formCellDisabled\"</code> style applied to it.",
        name:"FormItemBaseStyle",
        seeAlso:[],
        type:"type",
        groups:["appearance"]
    },
    "method:Window.flash":{
        ref:"method:Window.flash",
        flags:"A",
        description:"          Makes the window header flash if it's visible; if there's no header, or the header\n          is hidden, makes the window body flash instead.\n          <p>\n			This method is executed when users click outside the bounds of a modal window\n			so they'll notice that they have to do something with the window.\n",
        name:"flash",
        seeAlso:[],
        type:"method",
        definingClass:"class:Window",
        groups:["modal"]
    },
    "method:MenuItem.action":{
        ref:"method:MenuItem.action",
        flags:"",
        description:" Action to fire when this menu is activated.\n",
        name:"action",
        seeAlso:[],
        type:"method",
        definingClass:"object:MenuItem",
        groups:["menuBasic"]
    },
    "classMethod:Page.setAppFilesDir":{
        ref:"classMethod:Page.setAppFilesDir",
        flags:"",
        description:" Specify the directory for miscellaneous app-specific files <b>other than</b> images, such as\n ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL','HTML fragments')}, ${isc.DocUtils.linkForRef('class:ViewLoader','loadable views')}, \n XML or JSON flat data files, videos, etc.\n <P>\n This URL also becomes available via the prefix \"[APPFILES]\" for ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')}.\n <P>\n Defaults to the value of ${isc.DocUtils.linkForRef('classMethod:Page.getAppDir')}, that is, the current directory.\n\n",
        name:"setAppFilesDir",
        seeAlso:[],
        params:[
            {description:"New app files URL.", optional:true, name:"URL", defaultValue:null, 
             type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "attr:DateChooser.alternateWeekStyles":{
        ref:"attr:DateChooser.alternateWeekStyles",
        flags:"IRW",
        description:"Whether alternating weeks should be drawn in alternating styles. If enabled, the cell style\n for alternate rows will have ${isc.DocUtils.linkForRef('attr:DateChooser.alternateStyleSuffix')} appended to it.",
        name:"alternateWeekStyles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "group:emptyMessage":{
        ref:"group:emptyMessage",
        refs:["attr:DetailViewer.showEmptyMessage", "attr:DetailViewer.emptyMessage", 
         "attr:DetailViewer.emptyMessageStyle","attr:DetailViewer.loadingMessage", "attr:DetailViewer.loadingMessageStyle", 
         "attr:GridRenderer.showEmptyMessage","attr:GridRenderer.emptyMessage", "attr:GridRenderer.emptyMessageTableStyle", 
         "attr:GridRenderer.emptyMessageStyle","attr:ListGrid.showEmptyMessage", "attr:ListGrid.emptyMessage", 
         "attr:ListGrid.emptyMessageStyle","attr:ListGrid.loadingMessage"],
        name:"emptyMessage",
        seeAlso:[],
        type:"group"
    },
    "attr:Menu.fields":{
        ref:"attr:Menu.fields",
        flags:"IRWA",
        description:"Array of columns to show for this menu.<br>\n Standard menu fields may be included by specifying ${isc.DocUtils.linkForRef('type:MenuFieldID','MenuFieldIDs')}\n directly. Additional custom fields may be specifed as ${isc.DocUtils.linkForRef('object:ListGridField')} objects.<br>\n If this property is unset, default behavior will show the\n ${isc.DocUtils.linkForRef('type:MenuFieldID','standard set of fields')}, with the exception of any that have\n been suppressed via ${isc.DocUtils.linkForRef('attr:Menu.showIcons')}, ${isc.DocUtils.linkForRef('attr:Menu.showKeys')} and ${isc.DocUtils.linkForRef('attr:Menu.showSubmenus')}",
        name:"fields",
        seeAlso:[],
        valueType:"Array of MenuFieldID | Array of ListGridFields",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('menuColumns')}"],
        definingClass:"class:Menu"
    },
    "attr:PickList.pickListFields":{
        ref:"attr:PickList.pickListFields",
        flags:"IRA",
        description:"This property allows the developer to specify which field[s] will be displayed in the \n drop down list of options.\n <P>\n Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists\n with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.\n <P>\n If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, \n otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}<br>\n \n If there are multiple fields, column headers will be shown for each field, the\n height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute.",
        name:"pickListFields",
        seeAlso:[
            {ref:"attr:PickList.valueField", description:null},
            {ref:"attr:PickList.pickListHeaderHeight", description:null}
        ],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "group:formValuesManager":{
        ref:"group:formValuesManager",
        refs:["attr:DynamicForm.valuesManager"],
        name:"formValuesManager",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeGrid.folderOpenImage":{
        ref:"attr:TreeGrid.folderOpenImage",
        deprecated:"as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}",
        flags:"IRW",
        description:"The filename of the default icon for all open folder nodes in this treeGrid.",
        name:"folderOpenImage",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "method:FormItem.getIconHeight":{
        ref:"method:FormItem.getIconHeight",
        flags:"A",
        description:"	Takes an icon definition object, and returns the height for that icon in px.\n",
        name:"getIconHeight",
        seeAlso:[],
        params:[
            {description:"icon definition object for this item.", optional:false, name:"icon", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"height of the form item icon in px", type:"number"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["sizing"]
    },
    "attr:RPCResponse.data":{
        ref:"attr:RPCResponse.data",
        flags:"R",
        description:"The data sent by the server.\n <P>\n When communicating with the SmartClient server, rpcResponse.data is the data passed to the\n server-side method RPCResponse.setData() by your Java code, as translated into JavaScript\n objects by the rules described under ${isc.DocUtils.linkForRef('attr:RPCRequest.data')}.\n <P>\n When not communicating with the SmartClient server (${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')} or\n another flag that implies it is set), rpcResponse.data contains the raw HTTP response body.\n For an exception, see ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')}.",
        name:"data",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCResponse"
    },
    "attr:TabSet.closeTabIcon":{
        ref:"attr:TabSet.closeTabIcon",
        flags:"IRW",
        description:"Default src for the close icon for tabs to display if ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')} is true.",
        name:"closeTabIcon",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"[SKIN]/TabSet/close.png",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:Canvas.animateRectTime":{
        ref:"attr:Canvas.animateRectTime",
        flags:"IRWA",
        description:"Default time for performing an animated setRect.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateRectTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:ListGrid.groupIconSize":{
        ref:"attr:ListGrid.groupIconSize",
        flags:"IRW",
        description:"Default width and height of group icons for this ListGrid.",
        name:"groupIconSize",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:RichTextEditor.styleControls":{
        ref:"attr:RichTextEditor.styleControls",
        flags:"IRA",
        description:"Default text styling control group. Consists of an array of \n  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,\n  include <code>\"styleControls\"</code> in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array",
        name:"styleControls",
        seeAlso:[],
        valueType:"array",
        defaultValue:"[\"boldSelection\", \"italicSelection\", \"underlineSelection\"]",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "attr:ListGrid.recordEditProperty":{
        ref:"attr:ListGrid.recordEditProperty",
        flags:"IRWA",
        description:"Property name on a record that should be checked to determine whether the record may be\n edited.\n <br>\n This property is configurable to avoid possible collision with data values in record.\n With the default setting of \"_canEdit\", a record can be set non-editable by ensuring\n record._canEdit == false.\n <br>\n For controlling editability for the entire grid or for a field, set grid.canEdit or\n field.canEdit.",
        name:"recordEditProperty",
        seeAlso:[
            {ref:"attr:ListGrid.canEdit", description:null},
            {ref:"attr:ListGridField.canEdit", description:null},
            {ref:"method:ListGrid.canEditCell", description:null}
        ],
        valueType:"string",
        defaultValue:"\"_canEdit\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:ResultTree.dataSource":{
        ref:"attr:ResultTree.dataSource",
        flags:"IR",
        description:"What ${isc.DocUtils.linkForRef('class:DataSource')} is this resultTree associated with?",
        name:"dataSource",
        seeAlso:[],
        valueType:"DataSource or ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultTree"
    },
    "classAttr:RPCResponse.STATUS_SERVER_TIMEOUT":{
        ref:"classAttr:RPCResponse.STATUS_SERVER_TIMEOUT",
        flags:"R",
        description:"Indicates a request timed out with no server response.\n <p>\n This is a client-only error code - never sent by the server (since it's the server\n that times out).\n <p>\n NOTE that if using <code>hiddenFrame</code> as the transport (not the default), a\n malformed response such as a \"500 Server Error\" or 404 errors will be reported as a\n timeout.",
        name:"STATUS_SERVER_TIMEOUT",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"-100",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "attr:Window.showModalMask":{
        ref:"attr:Window.showModalMask",
        flags:"IR",
        description:"If true, displays a translucent mask over the rest of the page when a modal window\n is displayed.",
        name:"showModalMask",
        seeAlso:[
            {ref:"attr:Window.modalMask", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["modal", "appearance"]
    },
    "group:tableLayout":{
        ref:"group:tableLayout",
        refs:["attr:DynamicForm.numCols", "attr:DynamicForm.fixedColWidths", 
         "attr:DynamicForm.colWidths","attr:DynamicForm.minColWidth", "attr:DynamicForm.cellPadding", 
         "attr:DynamicForm.cellBorder","attr:DynamicForm.sectionVisibilityMode"],
        description:"Manipulating the values stored in the form.",
        name:"tableLayout",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItem.titleErrorClassName":{
        ref:"attr:FormItem.titleErrorClassName",
        deprecated:"As of SmartClient Version 5.5, use ${isc.DocUtils.linkForRef('attr:FormItem.titleStyle')} instead",
        flags:"IRW",
        description:"CSS class for a form item's title when a validation error is showing.",
        name:"titleErrorClassName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"formTitleError\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "attr:Window.contentsType":{
        ref:"attr:Window.contentsType",
        flags:"IR",
        description:"If this window has ${isc.DocUtils.linkForRef('attr:Window.src')} specified, this property can be used to indicate\n whether the source is a standalone HTML page or an HTML fragment.\n <P>\n This is similar to the ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType')} property - be sure to read the\n HTMLFlow documentation to understand circumstances where contentsType:\"page\" is\n <b>unsafe and not recommended</b>.",
        name:"contentsType",
        seeAlso:[
            {ref:"attr:Window.src", description:null}
        ],
        valueType:"string",
        defaultValue:"\"page\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "attr:SelectItem.pickListFields":{
        ref:"attr:SelectItem.pickListFields",
        flags:"IRA",
        description:"This property allows the developer to specify which field[s] will be displayed in the \n drop down list of options.\n <P>\n Only applies to databound pickLists (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}, or picklists\n with custom data set up via the advanced ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')} method.\n <P>\n If this property is unset, we display the ${isc.DocUtils.linkForRef('attr:PickList.displayField')}, if specified, \n otherwise the ${isc.DocUtils.linkForRef('attr:PickList.valueField')}<br>\n \n If there are multiple fields, column headers will be shown for each field, the\n height of which can be customized via the ${isc.DocUtils.linkForRef('attr:PickList.pickListHeaderHeight')} attribute.",
        name:"pickListFields",
        seeAlso:[
            {ref:"attr:SelectItem.valueField", description:null},
            {ref:"attr:PickList.pickListHeaderHeight", description:null}
        ],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('relatedRecords')}"],
        definingClass:"class:SelectItem"
    },
    "attr:ResultSet.useClientFiltering":{
        ref:"attr:ResultSet.useClientFiltering",
        flags:"IRWA",
        description:"Whether to filter data locally when all DataSource records have been loaded (that is,\n criteria is blank and cache is complete).\n <P>\n This may need to be disabled if client-side filtering differs from server-side filtering\n in a way that affects functionality or is surprising.\n <P>\n This setting is distinct from <code>fetchMode:\"local\"</code>, which explicitly loads all\n available DataSource records up front.\n <P>\n See ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')} for default filtering behavior.\n <P>\n <b>NOTE:</b> even with useClientFiltering false, client-side filtering will be used\n during cache sync to determine if an updated or added row matches the current criteria.\n To avoid relying on client-side filtering in this case, either:<br>\n - avoid returning update data when the updated row doesn't match the current filter<br>\n - set dropCacheOnUpdate<br>",
        name:"useClientFiltering",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "method:DynamicForm.getValue":{
        ref:"method:DynamicForm.getValue",
        flags:"",
        description:"  Returns the value stored in the form for some field.\n  Shorthand for dynamicForm.getValues()[fieldName];\n",
        name:"getValue",
        seeAlso:[],
        params:[
            {description:"name of the field for which you're retrieving a value", optional:false, 
             name:"fieldName",defaultValue:null, type:"string"}
        ],
        returns:{description:"value of the field", type:"any"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dateItem')}"],
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:ListGridField.iconWidth":{
        ref:"attr:ListGridField.iconWidth",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the \n width of the icon to be displayed in the ListGrid header button. \n (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconWidth')})<br>\n If this field is editable, and ${isc.DocUtils.linkForRef('attr:ListGridField.editorIconWidth')} is unset, this \n property will be passed onto the editors for this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}, \n which will effect the default size for ${isc.DocUtils.linkForRef('attr:ListGridField.icons','icons')} displayed \n in the editor.",
        name:"iconWidth",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null},
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "method:ValuesManager.editRecord":{
        ref:"method:ValuesManager.editRecord",
        flags:"",
        description:"\n Edit an existing record.  Updates this editors values to match the values of the record \n passed in.\n <P>\n Subsequent calls to <code>saveData()</code> will use an <code>update</code> rather than\n an <code>add</code> operation.\n\n",
        name:"editRecord",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"the record to be edited as a map of field names to their corresponding values", 
             optional:false,name:"record", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "classAttr:Time.AMIndicator":{
        ref:"classAttr:Time.AMIndicator",
        flags:"RWA",
        description:"String appended to times to indicate am (when not using 24 hour format).",
        name:"AMIndicator",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\" am\"",
        type:"classAttr",
        definingClass:"class:Time",
        groups:["i18nMessages"]
    },
    "attr:DynamicForm.showTitlesWithErrorMessages":{
        ref:"attr:DynamicForm.showTitlesWithErrorMessages",
        flags:"IRW",
        description:"Indicates whether on validation failure, the error message displayed to the\n          user should be prepended with the title for the item.",
        name:"showTitlesWithErrorMessages",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "classAttr:ValidatorTypes.isFloat":{
        ref:"classAttr:ValidatorTypes.isFloat",
        flags:"IR",
        description:"Tests whether the value for this field is a valid floating point number.",
        name:"isFloat",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "method:DetailViewerField.showIf":{
        ref:"method:DetailViewerField.showIf",
        flags:"",
        description:" \n If specified on a field, this method is evaluated at draw time to determine whether or\n not to show this particular field.\n <p>\n This method can be specified either as a function or a string that will be\n auto-converted to a function.\n\n",
        name:"showIf",
        seeAlso:[],
        params:[
            {description:"The DetailViewer", optional:false, name:"viewer", defaultValue:null, 
             type:"DetailViewer"},
            {description:null, optional:false, name:"valueList", defaultValue:null, 
             type:"List of DetailViewerRecord"}
        ],
        returns:{description:"true to show the field, false to not show it.", type:"boolean"},
        type:"method",
        definingClass:"object:DetailViewerField"
    },
    "attr:CubeGrid.chartConfirmThreshold":{
        ref:"attr:CubeGrid.chartConfirmThreshold",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('method:CubeGrid.makeChart')} is called with a chart specification that will show more than\n <code>chartConfirmThreshold</code> data elements, the user will be presented with a\n ${isc.DocUtils.linkForRef('classMethod:isc.confirm','confirmation dialog')}.\n <P>\n Set to 0 to disable this confirmation.",
        name:"chartConfirmThreshold",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"2000",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "method:List.addListAt":{
        ref:"method:List.addListAt",
        flags:"",
        description:" Add list of items list to this array at item pos.  All items after array[pos] will slide down to\n fit new items.\n\n",
        name:"addListAt",
        seeAlso:[],
        params:[
            {description:"new array of items", optional:false, name:"list", defaultValue:null, 
             type:"array"},
            {description:"position in this list to put the new items", optional:false, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"the list of items that was added", type:"array"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "group:i18n":{
        ref:"group:i18n",
        title:"Internationalization and Localization (i18n,l10n)",
        treeLocation:["Concepts"],
        refs:[],
        description:"<b><u>Internationalizing SmartClient UI Components</u></b>\n <p>\n Internationalizing a SmartClient application involves creating locale-specific\n versions of all strings, images, and possibly colors.  In some cases, component layout may\n be affected as well (for example date field order differs between some locales).\n <p>\n <u><b>Character Encodings</b></u>\n <p>\n In order to deliver content in different languages to the browser and have it be displayed\n correctly, it is important that the browser and server agree on the character encoding being\n used to send the page.  \n <p>\n Generally speaking, you can use whatever character encoding you prefer, so long as\n as you're consistent about serving your files to the browser with exactly the same encoding\n as was used to save the file to disk.  Keep in mind though that the character encoding you\n choose must be supported by all browsers you intend to support.  Isomorphic recommends that,\n where possible, you use the UTF-8 encoding.  Regardless of which character encoding you\n choose, keep in mind that for the browser to correctly display non-ASCII characters, you\n <b>must</b> explicitly set the character encoding of your page to match the encoding you\n used to save the file.  Browsers have built-in heuristics to guess the character encoding,\n but they can't be relied upon to work 100% of the time.\n <p>\n There are two ways to explicitly tell the browser what character\n encoding is being used for a given page.  One is to set the \"Content-Type\" header - e.g. as\n follows in a raw HTTP response to set UTF-8 character encoding and a text/html mime type:\n <pre>\n Content-Type: text/html; charset=UTF-8\n </pre>\n If you're using Java on the back-end, you can set this header out of JSP as follows:\n <pre>\n &lt;%@ page contentType=\"text/html; charset=UTF-8\"%&gt;\n </pre>\n Or using Java Servlet APIs in a Servlet as follows:\n <pre>\n response.setContentType(\"text/html; charset=UTF-8\");\n </pre>\n Note that the latter needs to be done before any content is written to the response output\n stream.\n <p>\n The other approach to setting the content encoding is to use an HTML META tag to embed it\n in the page itself (note that this applies to HTML documents only).  The META tag must go\n inside the &lt;HEAD&gt; HTML element - e.g. as follows:\n <pre>\n &lt;HEAD&gt;\n &lt;META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\"&gt;\n &lt;/HEAD&gt;\n </pre>\n Isomorphic recommends that you use <b>both</b> of these approaches for maximum\n compatibility.  For example, if you omit the META tag approach, documents saved by the user\n using the browser save function may not render correctly when subsequently read from disk\n because HTTP headers are not available in that context.  And conversely not providing the\n HTTP header can result in application servings applying their own default and incorrect\n content encoding.\n <p>\n If you're using a given character encoding pervasively in your pages, you can also configure\n your web server or application server to use that character encoding as the default for all\n pages of a given mime type or some other criteria (depending on the capability of your\n server) - for example on a per-directory basis.\n <p>\n For more information on character encodings, character sets, and working with HTML, please\n see W3C's tutorial here:\n <a href='http://www.w3.org/International/tutorials/tutorial-char-enc/' onclick=\"window.open('http://www.w3.org/International/tutorials/tutorial-char-enc/');return false;\">http://www.w3.org/International/tutorials/tutorial-char-enc/</a>\n <p>\n <u><b>String localization</b></u>\n <p>\n All text appearing in SmartClient UI components is customizeable at the component prototype\n level and at the instance level.  For example, Button component has a default title of\n \"Untitled Button\" that is changed at the instance level when the button is created (using\n JavaScript syntax):\n <pre>\n Button.create({ title: \"Click me!\"});\n </pre>\n Likewise, the default title can be changed like so:\n <pre>\n Button.create({});  // this produces a button with the title \"Untitled Button\"\n Button.changeDefaults({ title: \"Titled Button\"});\n Button.create({});  // this now produces a button with the title \"Titled Button\"\n </pre>\n Using these mechanisms, you can set locale-specific text on any SmartClient component.\n <p>\n We'll use Java-based internationalization examples here because the SDK ships with a Java\n backend - but note that Java is not required to internationalize your SmartClient\n application - see the \"Resources\" section a the end of this overview for links to\n internationalization resources of other popular back-end technologies.  All those\n techonologies provide mechanisms for fetching locale-specific strings that are compatible\n with SmartClient because ultimately internationalizing a SmartClient application is not much\n different from internationalizing an HTML page.\n <p>\n So, to give a Java-based example, let's say we want to create a button on a page in a manner\n that permits future localization.  Let's say we currently have the following code in our JSP\n page: \n <pre>\n &lt;SCRIPT&gt;\n Button.create({ title: \"Click me!\" });\n &lt;/SCRIPT&gt;\n </pre>\n One standards-based approach is to use the i18n component of the JSTL Core package (Java\n Server Pages Standard Tag Library) to replace that static \"Click me!\" text with a localized\n reference.  This can be done as follows:\n <pre>\n &lt;%@ taglib prefix=\"fmt\" uri=\"/WEB-INF/fmt.tld\" %&gt;\n &lt;SCRIPT&gt;\n Button.create({ title: &lt;fmt:message key=\"buttonTitle\"&gt; });\n &lt;/SCRIPT&gt;\n </pre>\n Assuming you've set the current Locale and provided a resource bundle with the relevant\n translated text, the above would create a button with a title that comes from the locale-specific\n bundle you provided.  See Sun's i18n tutorial:\n <a href='http://java.sun.com/docs/books/tutorial/i18n/' onclick=\"window.open('http://java.sun.com/docs/books/tutorial/i18n/');return false;\">http://java.sun.com/docs/books/tutorial/i18n/</a> and the JSTL home page:\n <a href='http://java.sun.com/products/jsp/jstl/' onclick=\"window.open('http://java.sun.com/products/jsp/jstl/');return false;\">http://java.sun.com/products/jsp/jstl/</a> for more information on how to set up\n Resource Bundles.\n <p>\n If you're developing in XML, the mechanism is much the same.  Let's say we have the following\n XML code in our JSP:\n <pre>\n &lt;isomorphic:XML&gt;\n &lt;Button title=\"Click me!\"/&gt;\n &lt;/isomorphic:XML&gt;\n </pre>\n We can localize this button by using JSTL as before by writing it like this:\n <pre>\n &lt;%@ taglib prefix=\"fmt\" uri=\"/WEB-INF/fmt.tld\" %&gt;\n &lt;isomorphic:XML&gt;\n &lt;Button&gt;\n   &lt;title&gt;&lt;fmt:message key=\"buttonTitle\"&gt;&lt;/title&gt;\n &lt;/Button&gt;\n &lt;/isomorphic:XML&gt;\n </pre>\n Note that the XML must be well-formed so we can't just replace \"Click me!\" with the\n <code>fmt</code> tag because we would end up with embedded double quotes.\n <p>\n NOTE: even though you are dynamically adding localized data to your presentation using\n JSTL/JSPs, you can still allow the browser to cache the entire presentation layer (described\n in detail ${isc.DocUtils.linkForRef('group:smartArchitecture','here')}.  Your bootstrap JSP (the application start\n page) can use a &lt;SCRIPT SRC=&gt; tag to load the localized presentation code as\n cacheable JavaScript, for example, &lt;SCRIPT SRC=/mainUI.jsp?locale=[localeName]&gt;.  This\n works with both XML and JS component descriptors since both are ultimately delivered to the\n browser as JavaScript.\n <p>\n <u><b>Framework message localization</b></u>\n <p>\n In addition to titles and other strings displayed on SmartClient widget instances, \n SmarClient displays a number of standard prompts and error messages in various cases, all\n of which are fully customizeable for localization purposes.<br>\n A complete list of these standard messages is visible ${isc.DocUtils.linkForRef('group:i18nMessages','here')}.<br>\n Customizing these standard messages is very similar to customizing any other strings, such\n as the <code>Button.title</code> attribute described above.  To take an example, the \n ${isc.DocUtils.linkForRef('classAttr:RPCManager.timeoutErrorMessage')} is displayed to the user in a warning dialog\n when a SmartClient operation fails to complete. By default this is set to \n <code>\"Operation Timed Out\"</code> but can be modified using the ${isc.DocUtils.linkForRef('classMethod:Class.addClassProperties')} \n method, as follows:\n <pre>\n isc.RPCManager.addClassProperties({timeoutErrorMessage:\"Custom Timeout Message\"});\n </pre>\n <p>\n <u><b>DataSource localization</b></u>\n <p>\n DataSources can be created in ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','several ways')}.  DataSources\n created directly in JavaScript can be internationalized via the techniques described above.\n DataSources which are declared in XML (.ds.xml files) and are read by the ISC server, which\n are normally loaded into a .jsp page via the <code>&lt;isomorphic:loadDS&gt;</code> JSP tag,\n can instead be loaded and interpreted as .jsp files via the technique described below.  This\n allows JSTL and other JSP tags to be used to internationalize the titles and validation\n error messages in XML DataSources.\n <P>\n For example, given the following DataSource located in /shared/ds/supplyItem.ds.xml:\n <pre>\n &lt;DataSource&gt;\n     &lt;fields&gt;\n         &lt;field name=\"itemName\"&gt;\n             &lt;title&gt;Item Name&lt;/title&gt;\n             &lt;validators&gt;\n                 &lt;Validator type=\"lengthRange\" max=\"40\"&gt;\n                     &lt;errorMessage&gt;Must be 40 characters or less.&lt;/errorMessage&gt;\n                 &lt;/Validator&gt;\n             &lt;/validators&gt;\n         &lt;/field&gt;\n     &lt;/fields&gt;\n &lt;/DataSource&gt;\n </pre>\n To localize the title and validator error string of the <code>itemName</code> field \n using the same JSTL strategy we've been using, first add the following to your web.xml to\n allow DataSource files to be interpreted as JSPs:\n <pre>\n &lt;jsp-config&gt;\n     &lt;jsp-property-group&gt;\n       &lt;url-pattern&gt;/shared/ds/*&lt;/url-pattern&gt;\n     &lt;/jsp-property-group&gt;     \n &lt;/jsp-config&gt;\n </pre>\n Next change the DataSource definition as follows:\n <pre>\n &lt;!--\n &lt;%@ taglib prefix=\"fmt\" uri=\"/WEB-INF/fmt.tld\" %&gt;\n --&gt;\n &lt;DataSource xmlns:fmt=\"urn:jsptld:/WEB-INF/fmt.tld\"&gt;\n     &lt;fields&gt;\n         &lt;field name=\"itemName\"&gt;\n             &lt;title&gt;&lt;fmt:message key=\"itemTitle\"&gt;&lt;/title&gt;\n             &lt;validators&gt;\n                 &lt;Validator type=\"lengthRange\" max=\"40\"&gt;\n                     &lt;errorMessage&gt;&lt;fmt:message key=\"itemLengthRangeValidator\"/&gt;&lt;/errorMessage&gt;\n                 &lt;/Validator&gt;\n             &lt;/validators&gt;\n         &lt;/field&gt;\n     &lt;/fields&gt;\n &lt;/DataSource&gt;\n </pre>\n Note that the XML comment around the taglib declaration is intentional.  It is there to make\n sure the JSP parser sees the tag library declaration, while the file remains valid XML.\n If you need to use multiple JSP tag libraries to achieve your goals, simply add additional\n taglib declarations inside the XML comment and be sure to register the tag namespace in the\n DataSource tag via <code>xmlns:tagName</code> as done above for the <code>fmt</code>\n namespace. instead of using the <code>&lt;isomorphic:loadDS&gt;</code> JSP tag to load this\n DataSource, you would load it as follows in your JSP:\n <pre>\n &lt;SCRIPT&gt;\n &lt;isomorphic:XML&gt;\n &lt;jsp:include page=\"/shared/ds/supplyItem.ds.xml\"&gt;&lt;/jsp:include&gt;\n &lt;/isomorphic:XML&gt;\n &lt;/SCRIPT&gt;\n </pre> \n This makes it possible to internationalize field titles as well as validation error messages\n for built-in validators.  To internationalize custom server-side validation errors, simply\n provide internationalized strings when calling <code>DSResponse.setErrorReport()</code> to\n report validation errors (see the JavaDoc for that documentation).\n <p>\n <u><b>Support for Right-to-Left (RTL) languages</b></u>\n <P>\n SmartClient includes beta quality support for RTL langauges, with known issues in certain\n skins and components.  To enable, simple set <code>dir=\"rtl\"</code> on the HTML element:\n <pre>\n    &lt;HTML dir=\"rtl\"&gt;\n </pre>\n ListGrid columns, horizontal layouts, scrolling directions, etc will reverse order\n automatically.\n <P>\n If you need production-quality RTL support for your application, visit the<a\n href=\"http://forums.smartclient.com\">SmartClient forums</a> for details of \n known limitations.\n <P>\n <u><b>Image, CSS localization</b></u>\n <p>\n Most SmartClient components use a mixture of text, CSS and images to render.  If you wish to\n provide locale-specific images or use locale-specific CSS, you can create localized copies\n of a SmartClient skin named after the locale and modify images as you see fit.  A skin is\n specified at load time using either the <code>skin</code> attribute of the\n <code>&lt;isomorphic:loadISC&gt;</code> tag or by loading the skin\n directly using a script tag like so: &lt;SCRIPT SRC=/isomorphic/skins/[skin]/load_skin.js&gt;.\n If you're using the <code>loadISC</code> tag, you can specify a locale-specific skin like so:\n <pre>\n &lt;isomorphic:loadISC skin=\"[localeName]\"/&gt;\n </pre>\n Or you can use a script tag like so:\n <pre>\n &lt;SCRIPT SRC=/isomorphic/skins/[localeName]/load_skin.js&gt;&lt;/SCRIPT&gt;\n </pre>\n Where the <code>[localeName]</code> is the name of the current locale - you'll have this in the\n current page context as you'll need it to use the JSTL &lt;fmt:setLocale&gt; tag.\n\n Resources:\n <p>\n <b><u>Java</u></b>\n <ul>\n <li>Sun's i18n tutorial: <a href='http://java.sun.com/docs/books/tutorial/i18n/' onclick=\"window.open('http://java.sun.com/docs/books/tutorial/i18n/');return false;\">http://java.sun.com/docs/books/tutorial/i18n/</a>\n <li>JSTL home page: <a href='http://java.sun.com/products/jsp/jstl/' onclick=\"window.open('http://java.sun.com/products/jsp/jstl/');return false;\">http://java.sun.com/products/jsp/jstl/</a>\n <li>Apache JSTL \"Getting Started\": \n     <a href='http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html' onclick=\"window.open('http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html');return false;\">http://jakarta.apache.org/taglibs/doc/standard-doc/standard/GettingStarted.html</a>\n <li>Apache taglibs: <a href='http://jakarta.apache.org/taglibs/' onclick=\"window.open('http://jakarta.apache.org/taglibs/');return false;\">http://jakarta.apache.org/taglibs/</a>\n </ul>\n <p>\n\n <b><u>.NET</u></b>\n <ul>\n <li>MSDN Developer Resource: \"Developing World-Ready Applications\":\n <a href='http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp' onclick=\"window.open('http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp');return false;\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondesigningglobalapplications.asp</a>\n </ul>\n\n <b><u>PHP</u></b>\n <ul>\n <li>PHP Gettext manual: <a href='http://us2.php.net/gettext' onclick=\"window.open('http://us2.php.net/gettext');return false;\">http://us2.php.net/gettext</a>\n <li>O'Reilly Gettext tutorial: <a href='http://www.onlamp.com/pub/a/php/2002/06/13/php.html' onclick=\"window.open('http://www.onlamp.com/pub/a/php/2002/06/13/php.html');return false;\">http://www.onlamp.com/pub/a/php/2002/06/13/php.html</a>\n </ul>\n <p>\n\n <b><u>Perl</u></b>\n <ul>\n <li>Perl, Unicode and i18n FAQ: <a href='http://rf.net/~james/perli18n.html' onclick=\"window.open('http://rf.net/~james/perli18n.html');return false;\">http://rf.net/~james/perli18n.html</a>\n </ul>",
        name:"i18n",
        seeAlso:[],
        type:"group"
    },
    "attr:Class.addPropertiesOnCreate":{
        ref:"attr:Class.addPropertiesOnCreate",
        flags:"A",
        description:"Set this instance property to <code>false</code> on your class to prevent\n ${isc.DocUtils.linkForRef('classMethod:Class.create')} from requiring Object arguments and auto-applying all\n properties from those arguments to the newly created class.\n <P>\n\n <p>\n Regardless of the setting for addPropertiesOnCreate property, all arguments passed to\n ${isc.DocUtils.linkForRef('classMethod:Class.create')} are still passed on to ${isc.DocUtils.linkForRef('method:Class.init')}.\n <P>\n Note that it is not valid to set <code>addPropertiesOnCreate</code> to false for any\n subclass of ${isc.DocUtils.linkForRef('class:Canvas')} (Canvas relies on this property).\n <p>\n Note: You must set this property on the class instance as part of the class definition\n via ${isc.DocUtils.linkForRef('method:Class.addProperties')} so that it takes effect before ${isc.DocUtils.linkForRef('classMethod:Class.create')} is\n called.",
        name:"addPropertiesOnCreate",
        seeAlso:[],
        valueType:"Boolean",
        defaultValue:"undefined",
        type:"attr",
        definingClass:"class:Class"
    },
    "classMethod:Page.setEvent":{
        ref:"classMethod:Page.setEvent",
        flags:"",
        description:" Register to be called whenever a given type of event occurs, at the page level.\n <p>\n This includes events that also occur on widgets (like \"click\") and events that only occur at\n the page level (\"resize\" and \"load\").\n <p>\n For events that also occur on widgets, page level event registrations will fire BEFORE the\n event handlers on Canvases.   If your action returns <code>false</code>, this will prevent\n the event from getting to the intended Canvas.\n <p>\n Capturing events on widgets can be done by setting one of the event methods available on Canvas\n (and hence available to all widget classes).  See ${isc.DocUtils.linkForRef('group:widgetEvents')}.\n\n",
        name:"setEvent",
        seeAlso:[
            {ref:"class:EventHandler", description:null},
            {ref:"classMethod:EventHandler.getX", description:null},
            {ref:"classMethod:EventHandler.getY", description:null}
        ],
        params:[
            {description:"event type to register for (\"mouseDown\", \"load\", etc)", optional:false, 
             name:"eventType",defaultValue:null, type:"pageEvent"},
            {description:"string to be eval'd when event fires						(function)			function to be executed when event fires\n                      (object)            an object to call on which a method named \"page\" +\n                                          eventType will be called", 
             optional:false,name:"action", defaultValue:null, type:"string"},
            {description:"Flag to set automatic removal of the event after												it fires one or more times", 
             optional:true,name:"fireStyle", defaultValue:null, type:"FireStyle"},
            {description:"optional - if an object was passed in as the second                                          parameter, this is a name of a method to call on that\n                                          object.", 
             optional:true,name:"functionName", defaultValue:null, type:"string"}
        ],
        returns:{description:"ID number of this event, may be used to remove the event later										via a call to <code>Page.clearEvent()</code>", 
         type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["EventRegistry"]
    },
    "method:Canvas.hideClickMask":{
        ref:"method:Canvas.hideClickMask",
        flags:"",
        description:" Hides the click mask associated with this canvas.\n",
        name:"hideClickMask",
        seeAlso:[
            {ref:"method:Canvas.showClickMask", description:null}
        ],
        params:[
            {description:"optional ID of specific clickMask to hide. If not passed,                       defaults to hiding the click mask associated with this widget only.", 
             optional:true,name:"ID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["clickMask"]
    },
    "method:Log.logIsInfoEnabled":{
        ref:"method:Log.logIsInfoEnabled",
        flags:"",
        description:" Check whether a message logged at \"info\" priority would be visible in the log.\n <P>\n As with logDebug, category is defaulted to the current className.  Use this method to avoid\n putting together expensive log messages if they will never appear in the log.\n\n",
        name:"logIsInfoEnabled",
        seeAlso:[],
        params:[
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:Splitbar.hResizeCursor":{
        ref:"attr:Splitbar.hResizeCursor",
        flags:"IR",
        description:"Cursor to display if this Splitbar is to be used for horizontal resize of widgets.",
        name:"hResizeCursor",
        seeAlso:[],
        valueType:"Cursor",
        defaultValue:"\"col-resize\"",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["cursor"]
    },
    "attr:Button.iconSize":{
        ref:"attr:Button.iconSize",
        flags:"IR",
        description:"Size in pixels of the icon image.\n <P>\n The <code>iconWidth</code> and <code>iconHeight</code> properties can be used to\n configure width and height separately.",
        name:"iconSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:RPCResponse.httpResponseCode":{
        ref:"attr:RPCResponse.httpResponseCode",
        flags:"R",
        description:"This attribute (avialable when using the the <code>xmlHttpRequest</code> transport) contains\n the HTTP response code sent by the server.\n <p>\n Note that this is different from ${isc.DocUtils.linkForRef('attr:RPCResponse.status')} - that attribute is used to\n indicate a status code for the RPC itself whereas httpResponseCode is the raw HTTP response\n code for the HTTP request that contained the RPCRequest.\n <p>\n This feature relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.\n <p>\n If you're using this attribute, you'll typically want to avoid the default error\n handling response of RPCManager.  To do so, set\n ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} to <code>true</code>.",
        name:"httpResponseCode",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCResponse"
    },
    "attr:EdgedCanvas.customEdges":{
        ref:"attr:EdgedCanvas.customEdges",
        flags:"IR",
        description:"Array of side names (\"T\", \"B\", \"L\", \"R\") specifying which sides of the decorated\n component should show edges.  For example: <pre>\n      customEdges : [\"T\", \"B\"]\n </pre>\n .. would show edges only on the top and bottom of a component.\n <P>\n The default of <code>null</code> means edges will be shown on all sides.",
        name:"customEdges",
        seeAlso:[],
        valueType:"Array of String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "method:FormItem.getValueFieldName":{
        ref:"method:FormItem.getValueFieldName",
        flags:"",
        description:" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.\n If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.\n",
        name:"getValueFieldName",
        seeAlso:[],
        returns:{description:"fieldName to use a \"value field\" in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}", 
         type:"string"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "attr:SectionStack.canTabToHeaders":{
        ref:"attr:SectionStack.canTabToHeaders",
        flags:"IRA",
        description:"If true, the headers for the sections (if shown) will be included in the page's tab\n order for accessibility.",
        name:"canTabToHeaders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "attr:ListGrid.editPendingBaseStyle":{
        ref:"attr:ListGrid.editPendingBaseStyle",
        flags:"RA",
        description:"A base name for the CSS class applied to cells containing pending (unsaved) edits<br>\n  As with the default 'baseStyle' property, this style will have \"Dark\", \"Over\", \"Selected\", \n  or \"Disabled\" appended to it according to the state of the cell.\n  If this property is null, cells with pending edits will pick up custom css text to\n  be applied on top of the normal base style from <code>this.editPendingCSSText</code>",
        name:"editPendingBaseStyle",
        seeAlso:[
            {ref:"attr:ListGrid.baseStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:SectionStack.sectionHeaderClass":{
        ref:"attr:SectionStack.sectionHeaderClass",
        flags:"IRA",
        description:"Name of the Canvas subclass to use as a header that labels the section and allows\n showing and hiding.  The default class be skinned, or trivial subclasses created to\n allow different appearances for headers in different SectionStacks.\n <P>\n Very advanced developers can use the following information to create custom header\n classes.\n <P>\n The SectionStack will instantiate this class, giving the following properties on init:\n <ul>\n <li><code>layout</code>: the SectionStack\n <li><code>expanded</code>: true or false\n <li><code>hidden</code>: true or false\n <li><code>title</code>: section title\n </ul>\n From then on, when the sectionHeader is clicked on, it should call\n ${isc.DocUtils.linkForRef('method:SectionStack.sectionHeaderClick')}.\n <br>\n Whenever the section is hidden or shown, sectionHeader.setExpanded(true|false) will be\n called if implemented.",
        name:"sectionHeaderClass",
        seeAlso:[],
        valueType:"Classname",
        defaultValue:"\"SectionHeader\"",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "group:data":{
        ref:"group:data",
        refs:["method:ListGrid.setData", "method:ListGrid.getCellValue", "method:ListGrid.getDragData", 
         "method:Menu.setData","method:Menu.setItems", "attr:ListGrid.data", "attr:ListGridField.name", 
         "attr:TreeGrid.data","attr:Menu.data", "attr:Menu.items"],
        description:null,
        name:"data",
        seeAlso:[],
        type:"group"
    },
    "method:ValuesManager.removeMember":{
        ref:"method:ValuesManager.removeMember",
        flags:"",
        description:"  Remove a member form from this valuesManager, so its values are no longer managed\n  by this instance.\n  This does not clear the values associated with the form from the valuesManager - they\n  will still be available via <code>valuesManager.getValues()</code>, but will not be\n  updated as the form is manipulated.\n",
        name:"removeMember",
        seeAlso:[
            {ref:"method:ValuesManager.removeMembers", description:null}
        ],
        params:[
            {description:"form (or ID of form) to remove from this valuesManager", optional:false, 
             name:"member",defaultValue:null, type:"DynamicForm | string"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "attr:FormItem.valueIconSize":{
        ref:"attr:FormItem.valueIconSize",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, this property may be used to specify both\n the width and height of the icon written out.\n Note that ${isc.DocUtils.linkForRef('attr:FormItem.valueIconWidth')} and ${isc.DocUtils.linkForRef('attr:FormItem.valueIconHeight')} take\n presidence over this value, if specified.",
        name:"valueIconSize",
        seeAlso:[
            {ref:"attr:FormItem.valueIconWidth", description:null},
            {ref:"attr:FormItem.valueIconHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:Layout.placeHolderDefaults":{
        ref:"attr:Layout.placeHolderDefaults",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:Layout.showDragPlaceHolder','this.showDragPlaceHolder')} is true, this \n defaults object determines the default appearance of the placeholder displayed\n when the user drags a widget out of this layout.<br>\n Default value for this property sets the placeholder ${isc.DocUtils.linkForRef('attr:Canvas.styleName','styleName')} to\n <code>\"layoutPlaceHolder\"</code><br>\n To modify this object, use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}",
        name:"placeHolderDefaults",
        seeAlso:[],
        valueType:"canvas properties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Layout",
        groups:["dragdrop"]
    },
    "attr:ListGrid.body":{
        ref:"attr:ListGrid.body",
        flags:"R",
        description:"GridRenderer used to render the dataset.",
        name:"body",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "type:VisibilityMode":{
        ref:"type:VisibilityMode",
        values:[
            {description:"Only one section can be expanded at a time.", value:"\"mutex\""},
            {description:"Multiple sections can be expanded at the same time, and will share space.", 
             value:"\"multiple\""}
        ],
        description:"Settings for whether multiple sections can be in the expanded state simultaneously.",
        name:"VisibilityMode",
        seeAlso:[],
        type:"type"
    },
    "attr:Menu.iconWidth":{
        ref:"attr:Menu.iconWidth",
        flags:"IRW",
        description:"The default width applied to custom icons in this menu. This is used whenever\n          item.iconWidth is not specified.",
        name:"iconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Menu"
    },
    "method:Canvas.contains":{
        ref:"method:Canvas.contains",
        flags:"A",
        description:"      Returns true if element is a descendant of this widget (i.e., exists below this widget in\n      the containment hierarchy); and false otherwise.\n",
        name:"contains",
        seeAlso:[],
        params:[
            {description:"the canvas to be tested", optional:false, name:"canvas", defaultValue:null, 
             type:"canvas"},
            {description:"If passed this method will return true if the the canvas                                parameter is a pointer to this widget.", 
             optional:true,name:"testSelf", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if specified element is a descendant of this canvas; false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:ListGrid.confirmCancelEditing":{
        ref:"attr:ListGrid.confirmCancelEditing",
        flags:"IRW",
        description:"If this is an editable listGrid, when the user attempts to cancel an edit, should we\n display a confirmation prompt before discarding the edited values for the record?",
        name:"confirmCancelEditing",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:xmlTag":{
        ref:"group:xmlTag",
        title:"&lt;isomorphic:XML&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n This tag convers SmartClient UI components declaratively specified in the body of the tag to\n JavaScript for execution in the browser.\n <p>\n The XML->JS translation works just like with ${isc.DocUtils.linkForRef('group:loadUITag')}, except the XML is read\n from the body of the tag instead of an external file.\n <p>\n Note that this JSP tag must be surrounded by &lt;SCRIPT&gt; tags in the JSP because it\n generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be\n used in a JSP that is included from your main page in order to create separate\n cacheability.  For example:<pre>\n     &lt;SCRIPT SRC=\"myUIDefinitions.jsp\"&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n Example of using this tag :\n <pre>\n &lt;isomorphic:XML&gt;\n &lt;Canvas&nbsp;backgroundColor=\"black\"/&gt;\n &lt;/isomorphic:XML&gt;\n </pre>\n Would output the following JavaScript code:\n <pre>\n Canvas.create({\n   backgroundColor: \"black\"\n });\n </pre>",
        name:"xmlTag",
        seeAlso:[
            {ref:"group:loadUITag", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "attr:ListGrid.generateClickOnEnter":{
        ref:"attr:ListGrid.generateClickOnEnter",
        flags:"IRWA",
        description:"If true, when the user navigates to a cell using arrow keys and hits Enter, \n the cell will respond to a click event.",
        name:"generateClickOnEnter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "class:Applet":{
        methods:["method:Applet.getPluginHandle"],
        ref:"class:Applet",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Client Bridges"],
        attrs:["attr:Applet.name", "attr:Applet.code", "attr:Applet.src", "attr:Applet.codeBase", 
         "attr:Applet.archive","attr:Applet.alt", "attr:Applet.altHTML", "attr:Applet.params", "attr:Applet.mayScript", 
         "attr:Applet.scriptable","attr:Applet.classID", "attr:Applet.objectCodeBase", "attr:Applet.extraHTML", 
         "attr:Applet.useTag"],
        description:"SmartClient abstraction for Applets.  This class provides Java&lt;-&gt;SmartClient\n  interoperability.  When embedding Applets into SmartClient-based pages, please use this\n  wrapper class to instantiate the Applet.  Doing so will provide the following benefits:\n  <p>\n  <ul>\n  <li>Drag and drop interactions on the page can target the Applet (can drop on applet).\n  <li>When a drag interaction transits an Applet, SmartClient will ensure that the dragTarget\n  appears above the Applet (prevents burn-through).\n  <li>Allows you to easily embed the Applet into SmartClient containers such as Windows and\n  Layouts, providing automatic masking to ensure the correct z-index order.  But see notes\n  below for limitations.\n  </ul>\n  <p>\n  <u>Known issues</u><br><br>\n  <ul>\n  <li>Resizing Applets can cause Firefox to lock up and require the user to terminate the\n  process manually.  The cause is currently unknown, but likely causes include applets\n  attempting to control their own size, or to attempt to re-render on resize.  More recent\n  JVMs (1.6+) appear to make this problem less frequent.  This may also simply be caused by\n  applet code being unable to deal with certain combination sizes and crashing.\n  <li>In Firefox, when using a JVM older than 1.6, Applets cannot be resized smaller than\n  their originally drawn size.  Doing so causes them to stick at the originally drawn size,\n  and to overflow the boundary of any SmartClient component they are embedded in.\n  <li>In Firefox, Applets do not handle the z-index ordering correctly with respect to\n  IFRAMEs or other Applets.  Therefore, in Firefox you cannot layer Applets on top of each\n  other or on top of SmartClient components containing IFRAMEs and have them render in the\n  correct order.\n  </ul>\n\n  For a general overview of applets and an applet tutorial see: \n  <a href='http://java.sun.com/docs/books/tutorial/applet/' onclick=\"window.open('http://java.sun.com/docs/books/tutorial/applet/');return false;\">http://java.sun.com/docs/books/tutorial/applet/</a>",
        name:"Applet",
        seeAlso:[],
        type:"class",
        requiresModules:["PluginBridges"]
    },
    "attr:Button.iconWidth":{
        ref:"attr:Button.iconWidth",
        flags:"IR",
        description:"Width in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:Window.contentLayout":{
        ref:"attr:Window.contentLayout",
        flags:"IRWA",
        description:"The layout policy that should be used for widgets within the Window body.\n <P>\n Valid values are \"vertical\", \"horizontal\", \"none\".  If the body is a Layout, this\n controls ${isc.DocUtils.linkForRef('attr:Layout.orientation')}.  See ${isc.DocUtils.linkForRef('attr:Window.bodyConstructor')} for details.",
        name:"contentLayout",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"vertical\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance"]
    },
    "method:ListGrid.transferDragData":{
        ref:"method:ListGrid.transferDragData",
        flags:"A",
        description:"\n During a drag-and-drop interaction, this method is called to transfer a set of records that\n were dropped onto some other component.  This method is called once it has already been\n determined that the other component can accept the drop.  What is returned and whether or\n not this ListGrid's data is modified is determined by the value of\n ${isc.DocUtils.linkForRef('attr:ListGrid.dragDataAction')}.\n <P>\n With a <code>dragDragAction</code> of \"move\", a databound ListGrid will issue \"remove\"\n dsRequests against it's DataSource to actually remove the data, via\n ${isc.DocUtils.linkForRef('method:DataSource.removeData')}.\n\n",
        name:"transferDragData",
        seeAlso:[
            {ref:"method:ListGrid.getDragData", description:null},
            {ref:"method:ListGrid.willAcceptDrop", description:null}
        ],
        returns:{description:"Array of objects that were dragged out of this ListGrid.", type:"Array"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:Facet.align":{
        ref:"attr:Facet.align",
        flags:"IR",
        description:"Default alignment for facet label title, and cells for this facet.\n Can be overridden at the facetValue level, or by setting titleAlign or cellAlign\n on the facet.",
        name:"align",
        seeAlso:[
            {ref:"attr:Facet.titleAlign", description:null},
            {ref:"attr:Facet.cellAlign", description:null}
        ],
        valueType:"alignEnum",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "type:Side":{
        ref:"type:Side",
        values:[
            {description:"Left side", value:"Canvas.LEFT"},
            {description:"Right side", value:"Canvas.RIGHT"},
            {description:"Top side", value:"Canvas.TOP"},
            {description:"Bottom side", value:"Canvas.BOTTOM"}
        ],
        description:"Side of a component.",
        name:"Side",
        seeAlso:[],
        type:"type"
    },
    "group:jsfIntegration":{
        ref:"group:jsfIntegration",
        title:"Integration with JSF",
        treeLocation:["Concepts"],
        refs:[],
        description:"SmartClient can be used within JSF applications to add AJAX richness and interactivity.\n <P>\n Because ${isc.DocUtils.linkForRef('group:iscJSF','JSF is a pre-AJAX architecture')}, the recommended approach in adding\n SmartClient to JSF applications is to create pages that use SmartClient components exclusively,\n so that older, server-based JSF components do not introduce full-page refreshes.\n <P>\n JSF pages that render components on the server access data via JSF Expression Language.\n SmartClient-based JSF pages can similarly load initial data by using JSTL, as shown in the\n <a href='/examples/server_integration/#jstlList' onclick=\"window.open('/examples/server_integration/#jstlList');return false;\">this example</a>, where a ListGrid is\n populated by JSTL access to Java Beans stored in the JSP <code>pageContext</code>.  \n <P>\n Once a SmartClient JSF page has loaded, SmartClient components will request data via background\n HTTP requests that load only data, not a complete page.  The \n ${isc.DocUtils.linkForRef('class:DMI','Direct Method Invocation')} system can be used to declaratively map SmartClient's\n background data requests directly to Java Methods. The SmartClient server automatically\n translates inbound request data into Java Objects that are passed to the method you specify,\n and the Java method return value is automatically translated into data for SmartClient\n components.\n <P>\n <h4>Incorporating server-side JSF components into a SmartClient JSF page</h4>\n <P>\n An ${isc.DocUtils.linkForRef('class:HTMLFlow')} or ${isc.DocUtils.linkForRef('class:HTMLPane')} component can be used to incorporate server-generated\n content within a SmartClient-based page.  With ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set to\n \"page\", the HTMLPane/Flow will act like a standalone page-within-a-page (via a\n SmartClient-managed HTML IFRAME element), allowing interactive server-side JSF components to\n participate normally, with limitations as discussed under the documentation for \n ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')}.",
        name:"jsfIntegration",
        seeAlso:[],
        type:"group"
    },
    "class:SimpleType":{
        methods:["method:SimpleType.shortDisplayFormatter", "method:SimpleType.normalDisplayFormatter"],
        ref:"class:SimpleType",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:SimpleType.name", "attr:SimpleType.inheritsFrom", "attr:SimpleType.validators", 
         "attr:SimpleType.valueMap","attr:SimpleType.editorType"],
        description:"An atomic type such as a string or number, that is generally stored, displayed and\n manipulated as a single value.\n <P>\n SimpleTypes can be created at any time, and subsequently referred to as a \n ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field type')} in ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} and\n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.  This allows you to define\n ${isc.DocUtils.linkForRef('attr:SimpleType.validators','validation')}, ${isc.DocUtils.linkForRef('method:SimpleType.normalDisplayFormatter','formatting')}\n and ${isc.DocUtils.linkForRef('attr:SimpleType.editorType','editing')} behaviors for a type to be reused across all\n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.\n <P>\n Note that the term \"simpleType\" is used in the same sense as in\n <a href='XML Schema' onclick=\"window.open('XML Schema');return false;\">http://www.w3.org/TR/xmlschema-0/</a>, and\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')} will create new SimpleType definitions.\n <P>\n An ${isc.DocUtils.linkForExampleId('customSimpleType', 'example')} is here.",
        name:"SimpleType",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('customSimpleType')}"]
    },
    "attr:Window.showHeader":{
        ref:"attr:Window.showHeader",
        flags:"IRWA",
        description:"If true, show a header for this Window, including title, closebox, etc.",
        name:"showHeader",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:ListGrid.headerButtonProperties":{
        ref:"attr:ListGrid.headerButtonProperties",
        flags:"IRA",
        description:"Properties to apply to all header buttons.\n Overrides defaults applied via  ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonDefaults')}.",
        name:"headerButtonProperties",
        seeAlso:[],
        valueType:"Button Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "class:ToolStripSeparator":{
        methods:[],
        ref:"class:ToolStripSeparator",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/ToolStrip"],
        attrs:["attr:ToolStripSeparator.skinImgDir", "attr:ToolStripSeparator.vSrc", 
         "attr:ToolStripSeparator.hSrc"],
        description:"Simple subclass of Img with appearance appropriate for a ToolStrip separator",
        name:"ToolStripSeparator",
        seeAlso:[],
        type:"class"
    },
    "attr:CellRecord.enabled":{
        ref:"attr:CellRecord.enabled",
        flags:"IR",
        description:"Affects the visual style and interactivity of the record.  If set to <code>false</code>\n the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the\n mouse moves over it, nor will it respond to mouse clicks.",
        name:"enabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('disabledRows')}"],
        definingClass:"object:CellRecord"
    },
    "method:StretchImgButton.removeFromRadioGroup":{
        ref:"method:StretchImgButton.removeFromRadioGroup",
        flags:"",
        description:" Remove this widget from the specified mutually exclusive selection group with the ID\n passed in.\n No-op's if this widget is not a member of the groupID passed in.\n If no groupID is passed in, defaults to removing from whatever radioGroup this widget\n is a member of.\n",
        name:"removeFromRadioGroup",
        seeAlso:[],
        params:[
            {description:"- optional radio group ID (to ensure the widget is removed                                        from the appropriate group.", 
             optional:true,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state", "event handling"]
    },
    "method:ListGrid.clearEditValue":{
        ref:"method:ListGrid.clearEditValue",
        flags:"A",
        description:"\n  Clear a field value being tracked as an unsaved user edit.<P>\n  The saved record value will be displayed in the the appropriate cell instead.\n  Will also discard any validation errors for the specified field / row.\n\n",
        name:"clearEditValue",
        seeAlso:[],
        params:[
            {description:"Row number, primary keys object for the record,                                              or editValues object", 
             optional:false,name:"editValuesID", defaultValue:null, type:"number | object"},
            {description:"Column number, or Name of field for which                                       the value is to be cleared", 
             optional:false,name:"colNum", defaultValue:null, type:"number | string"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "classAttr:Dialog.ASK_FOR_VALUE_TITLE":{
        ref:"classAttr:Dialog.ASK_FOR_VALUE_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed by ${isc.DocUtils.linkForRef('classMethod:isc.askForValue')}.\n A custom title can alternatively be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"ASK_FOR_VALUE_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Please enter a value\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:groupNode.groupValue":{
        ref:"attr:groupNode.groupValue",
        flags:"R",
        description:"The value from which groups are computed for a field, \n which results from ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue')}",
        name:"groupValue",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"any",
        defaultValue:"see below",
        type:"attr",
        definingClass:"object:groupNode",
        groups:["grouping"]
    },
    "method:ValuesManager.fetchData":{
        ref:"method:ValuesManager.fetchData",
        flags:"",
        description:" Retrieve data that matches the provided criteria, and edit the first record returned\n \n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "method:Selection.deselectList":{
        ref:"method:Selection.deselectList",
        flags:"",
        description:"			Deselect an array of items (subset of the entire list)\n",
        name:"deselectList",
        seeAlso:[],
        params:[
            {description:"listarray of objects to select", optional:true, name:"", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:ListGrid.recordDrop":{
        ref:"method:ListGrid.recordDrop",
        flags:"",
        description:" Process a drop of one or more records on a ListGrid record.\n <P>\n This method can be overriden to provide custom drop behaviors, and is a more appropriate\n override point than the lower level ${isc.DocUtils.linkForRef('method:Canvas.drop')} handler.\n <P>\n If this is a self-drop, records are simply reordered.\n <P>\n For a drop from another widget, ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} is called, which\n depending on the ${isc.DocUtils.linkForRef('attr:ListGrid.dragDataAction','dragDataAction')} specified on the source\n widget, may either remove the source records from the original list\n (<code>dragDataAction:\"move\"</code>) or just provide a copy to this list\n (<code>dragDataAction:\"copy\"</code>).\n <P>\n If this grid is databound, the new records will be added to the dataset by calling\n ${isc.DocUtils.linkForRef('method:DataSource.addData')}.  Note that reordering records has no effect on a databound\n grid.\n <P>\n The newly dropped data is then selected automatically.\n <P>\n NOTE: for a drop beyond the last visible record of a ListGrid, <code>targetRecord</code>\n will be null and the <code>index</code> will be one higher than the last record.  This\n includes a drop into an empty ListGrid, where <code>index</code> will be 0.\n \n",
        name:"recordDrop",
        seeAlso:[],
        params:[
            {description:"records being dropped", optional:false, name:"dropRecords", defaultValue:null, 
             type:"List of ListGridRecord"},
            {description:"record being dropped on.  May be null", optional:false, name:"targetRecord", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"index of record being dropped on", optional:false, name:"index", 
             defaultValue:null,type:"int"},
            {description:"widget where dragging began", optional:false, name:"sourceWidget", 
             defaultValue:null,type:"Canvas"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:ToolStripResizer.hSrc":{
        ref:"attr:ToolStripResizer.hSrc",
        flags:"IRW",
        description:"Image for horizontal resizer for a vertical Toolstrip",
        name:"hSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]hresizer.png\"",
        type:"attr",
        definingClass:"class:ToolStripResizer"
    },
    "attr:SectionStack.scrollSectionIntoView":{
        ref:"attr:SectionStack.scrollSectionIntoView",
        flags:"IR",
        description:"If an expanded or shown section expands past the current viewport and this property is\n true, then the viewport will auto-scroll to fit as much of the section content into the\n viewport without scrolling the top of the section out of the viewport.",
        name:"scrollSectionIntoView",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "attr:SliderItem.vertical":{
        ref:"attr:SliderItem.vertical",
        flags:"IR",
        description:"Indicates whether this is a vertical or horizontal slider.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:SliderItem"
    },
    "attr:CubeGrid.canMinimizeFacets":{
        ref:"attr:CubeGrid.canMinimizeFacets",
        flags:"IRW",
        description:"If true, when multiple facets are shown on a side, all facetValues in the second level\n of headers or higher will show controls to \"minimize\" the values of the next facet.\n Minimizing means showing only one, or very few, of the next facet's values.\n <P>\n Set ${isc.DocUtils.linkForRef('attr:FacetValue.isMinimizeValue')} to indicate which facetValues should be\n shown when a facet is minimized.",
        name:"canMinimizeFacets",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetExpansion"]
    },
    "attr:Canvas.appImgDir":{
        ref:"attr:Canvas.appImgDir",
        flags:"IRWA",
        description:"Default directory for app-specific images, relative to the Page-wide\n ${isc.DocUtils.linkForRef('classMethod:Page.getAppImgDir','appImgDir')}.",
        name:"appImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "attr:Canvas.snapVDirection":{
        ref:"attr:Canvas.snapVDirection",
        flags:"IRW",
        description:"The vertical snap direction.\n Set this value to Canvas.BEFORE to snap to the nearest gridpoint above;\n set it to Canvas.AFTER to snap to the nearest gridpoint below; and set\n it to Canvas.NEAREST to snap to the nearest gridpoint in either direction.",
        name:"snapVDirection",
        seeAlso:[
            {ref:"attr:Canvas.snapToGrid", description:null},
            {ref:"attr:Canvas.snapResizeToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapToGrid", description:null},
            {ref:"attr:Canvas.childrenSnapResizeToGrid", description:null}
        ],
        valueType:"string",
        defaultValue:"Canvas.AFTER",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:ImgButton.showFocus":{
        ref:"attr:ImgButton.showFocus",
        deprecated:"as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  Note that by default the\n <code>over</code> state is used to indicate focus.",
        name:"showFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "group:display":{
        ref:"group:display",
        refs:["method:ListGrid.getFieldName", "method:ListGrid.getFieldNum"],
        name:"display",
        seeAlso:[],
        type:"group"
    },
    "method:Date.duplicate":{
        ref:"method:Date.duplicate",
        flags:"A",
        description:"      Copy the value of this date into a new Date() object for independant manipulation\n",
        name:"duplicate",
        seeAlso:[],
        type:"method",
        definingClass:"class:Date"
    },
    "attr:SectionStackSection.expanded":{
        ref:"attr:SectionStackSection.expanded",
        flags:"I",
        description:"Sections default to the collapsed state unless ${isc.DocUtils.linkForRef('attr:SectionStackSection.showHeader')} is\n set to <code>false</code> in which case they default to the expanded state.  This\n attribute allows you to explicitly control the expand/collapse state of the\n section by overriding the above default behavior.",
        name:"expanded",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "group:gridLayout":{
        ref:"group:gridLayout",
        refs:["method:CubeGrid.setFacetTitleAlign", "method:CubeGrid.setFacetValueTitleAlign", 
         "attr:CubeGrid.canResizeColumns","attr:CubeGrid.canMinimizeColumns", "attr:CubeGrid.autoSizeHeaders", 
         "attr:CubeGrid.facetTitleAlign","attr:CubeGrid.facetValueAlign", "attr:CubeGrid.cellAlign", 
         "attr:CubeGrid.wrapFacetTitles","attr:CubeGrid.wrapFacetValueTitles", "attr:CubeGrid.padTitles", 
         "attr:CubeGrid.defaultFacetWidth","attr:CubeGrid.bodyMinWidth", "attr:CubeGrid.bodyMinHeight"],
        description:null,
        name:"gridLayout",
        seeAlso:[],
        type:"group"
    },
    "attr:FacetValue.borderBefore":{
        ref:"attr:FacetValue.borderBefore",
        flags:"IR",
        description:"CSS line style to apply as a border before this facetValue",
        name:"borderBefore",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "classMethod:XMLTools.selectNumber":{
        ref:"classMethod:XMLTools.selectNumber",
        flags:"A",
        description:" Retrieve a numeric value from an XML element or document based on an XPath expression.\n <P>\n If more than one node matches, only the first node's value will be returned.\n <P>\n Namespacing works as described under ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}\n <P>\n <b>NOTE:</b> this API cannot be supported on the Safari web browser for versions prior to\n 3.0.3.\n\n",
        name:"selectNumber",
        seeAlso:[],
        params:[
            {description:"Native XMLElement or document to select from", optional:false, 
             name:"element",defaultValue:null, type:"XMLElement or XMLDocument"},
            {description:"XPath expression to use to select nodes", optional:false, name:"expression", 
             defaultValue:null,type:"XPath"},
            {description:"namespace mapping used by the expression", optional:true, name:"namespaces", 
             defaultValue:null,type:"prefix -> URI mapping"}
        ],
        returns:{description:"result of the XPath, in Number form", type:"Number"},
        type:"classMethod",
        definingClass:"class:XMLTools",
        groups:["xmlTransform"]
    },
    "attr:Canvas.styleName":{
        flags:"IRW",
        type:"attr",
        ref:"attr:Canvas.styleName",
        description:"The CSS class applied to this widget as a whole.",
        name:"styleName",
        setter:["setStyleName"],
        valueType:"CSSStyleName",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('styles')}"],
        defaultValue:"\"normal\"",
        groups:["appearance"],
        definingClass:"class:Canvas"
    },
    "attr:ListGridField.headerBaseStyle":{
        ref:"attr:ListGridField.headerBaseStyle",
        flags:"IRW",
        description:"Custom base style to apply to this field's header button instead of \n ${isc.DocUtils.linkForRef('attr:ListGrid.headerBaseStyle')}.<br>\n Note that depending on the header button constructor, you may have to override\n ${isc.DocUtils.linkForRef('attr:ListGridField.headerTitleStyle')} as well.",
        name:"headerBaseStyle",
        seeAlso:[],
        valueType:"cssClass",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:Button.setIconOrientation":{
        ref:"method:Button.setIconOrientation",
        flags:"",
        description:" Changes the orientation of the icon relative to the text of the button.\n\n",
        name:"setIconOrientation",
        seeAlso:[],
        params:[
            {description:"The new orientation of the icon relative to the text of the button.", 
             optional:false,name:"orientation", defaultValue:null, type:"\"left\" or \"right\""}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "method:Tree.getTitle":{
        ref:"method:Tree.getTitle",
        flags:"",
        description:"\n Return the title of a node -- the name as it should be presented to the user.  This method\n works as follows:\n <ul>\n <li> If a ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')} is set on the node, the value of that property is\n returned.\n <li> Otherwise, if the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')} is set on the node, that value is\n returned, minus any trailing ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}.\n <li> Finally, if none of the above yielded a title, the value of\n ${isc.DocUtils.linkForRef('attr:Tree.defaultNodeTitle')} is returned.\n </ul>\n You can override this method to return the title of your choice for a given node.\n <br><br>\n To override the title for an autoconstructed tree (for example, in a databound TreeGrid),\n override ${isc.DocUtils.linkForRef('method:TreeGrid.getNodeTitle')} instead.\n\n",
        name:"getTitle",
        seeAlso:[
            {ref:"method:TreeGrid.getNodeTitle", description:null}
        ],
        params:[
            {description:"node for which the title is being requested", optional:false, name:"node", 
             defaultValue:null,type:"TreeNode"}
        ],
        returns:{description:"title to display", type:"string"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:ListGrid.frozenBaseStyle":{
        ref:"attr:ListGrid.frozenBaseStyle",
        flags:"IRW",
        description:"If this listGrid contains any frozen fields, this property can be used to apply a custom\n baseStyle to all cells in those frozen fields. If unset, the standard base style will be\n used for both frozen and unfrozen cells.",
        name:"frozenBaseStyle",
        seeAlso:[
            {ref:"attr:ListGrid.baseStyle", description:null},
            {ref:"attr:ListGridField.frozen", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance", "frozenFields"]
    },
    "classMethod:isc.askForValue":{
        ref:"classMethod:isc.askForValue",
        flags:"",
        description:" Show a modal dialog with a text entry box, asking the user to enter a value.\n <P>\n As with other convenience methods that show Dialogs, such as ${isc.DocUtils.linkForRef('classMethod:isc.warn')},\n the dialog is shown and the function immediately returns.  When the user responds, the\n provided callback is called.\n <P>\n If the user clicks OK, the value typed in is passed to the callback (including the empty\n string (\"\") if nothing was entered.  If the user clicks cancel, the value passed to the\n callback is null.\n <P>\n A default value for the text field can be passed via <code>properties.defaultValue</code>.\n <P>\n Keyboard focus is automatically placed in the text entry field, and hitting the enter key is\n the equivalent of pressing OK.\n\n",
        name:"askForValue",
        seeAlso:[
            {ref:"method:Dialog.okClick", description:null},
            {ref:"method:Dialog.cancelClick", description:null},
            {ref:"classAttr:Dialog.ASK_FOR_VALUE_TITLE", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"Callback to fire when the                                       user clicks a button to dismiss the dialog.\n                                      This has the single parameter 'value', indicating the \n                                      user entry, or null if cancel was pressed or the window\n                                      closed", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for\n                                      the Dialog, set properties.buttons to an array of buttons\n										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "class:StretchImgButton":{
        methods:["method:StretchImgButton.getTitle", "method:StretchImgButton.setTitle", 
         "method:StretchImgButton.setIconOrientation","method:StretchImgButton.setIcon", "method:StretchImgButton.setAutoFit", 
         "method:StretchImgButton.setBaseStyle","method:StretchImgButton.setTitleStyle", "method:StretchImgButton.select", 
         "method:StretchImgButton.deselect","method:StretchImgButton.isSelected", "method:StretchImgButton.setSelected", 
         "method:StretchImgButton.addToRadioGroup","method:StretchImgButton.removeFromRadioGroup", "method:StretchImgButton.setActionType", 
         "method:StretchImgButton.getActionType","method:StretchImgButton.setState", "method:StretchImgButton.setDisabled", 
         "method:StretchImgButton.getState","method:StretchImgButton.action", "method:StretchImgButton.iconClick"],
        ref:"class:StretchImgButton",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:StretchImgButton.title", "attr:StretchImgButton.wrap", "attr:StretchImgButton.icon", 
         "attr:StretchImgButton.iconSize","attr:StretchImgButton.iconWidth", "attr:StretchImgButton.iconHeight", 
         "attr:StretchImgButton.iconOrientation","attr:StretchImgButton.iconAlign", "attr:StretchImgButton.iconSpacing", 
         "attr:StretchImgButton.showDisabledIcon","attr:StretchImgButton.showRollOverIcon", "attr:StretchImgButton.showFocusedIcon", 
         "attr:StretchImgButton.showDownIcon","attr:StretchImgButton.showSelectedIcon", "attr:StretchImgButton.autoFit", 
         "attr:StretchImgButton.baseStyle","attr:StretchImgButton.titleStyle", "attr:StretchImgButton.selected", 
         "attr:StretchImgButton.radioGroup","attr:StretchImgButton.actionType", "attr:StretchImgButton.state", 
         "attr:StretchImgButton.showDisabled","attr:StretchImgButton.showDown", "attr:StretchImgButton.showFocus", 
         "attr:StretchImgButton.showFocused","attr:StretchImgButton.showRollOver", "attr:StretchImgButton.align", 
         "attr:StretchImgButton.valign","attr:StretchImgButton.showTitle", "attr:StretchImgButton.labelHPad", 
         "attr:StretchImgButton.labelVPad","attr:StretchImgButton.labelLengthPad", "attr:StretchImgButton.labelBreadthPad", 
         "attr:StretchImgButton.hiliteAccessKey","attr:StretchImgButton.src", "attr:StretchImgButton.vertical", 
         "attr:StretchImgButton.capSize"],
        description:"A StretchImg that behaves like a button, going through up/down/over state transitions in response\n to user events.  Supports an optional title, and will auto-size to accomodate the title text if\n <code>overflow</code> is set to \"visible\".\n <P>\n Examples of use include fancy buttons, poplist headers, and tabs.",
        name:"StretchImgButton",
        seeAlso:[],
        type:"class"
    },
    "attr:ListGridField.imageHeight":{
        ref:"attr:ListGridField.imageHeight",
        flags:"IRW",
        description:"Height of image shown for fieldTypes image and imageFile in this field.\n <P>\n If set to a String, assumed to be a property on each record that specifies the image\n height.  For example, if <code>field.imageHeight</code> is \"logoHeight\",\n <code>record.logoHeight</code> will control the heigt of the image.",
        name:"imageHeight",
        seeAlso:[
            {ref:"attr:ListGrid.imageSize", description:null},
            {ref:"attr:ListGridField.imageSize", description:null},
            {ref:"attr:ListGridField.imageWidth", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:DateItem.textAlign":{
        ref:"attr:DateItem.textAlign",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is <code>true</code> this property governs the alignment\n of text within the text field.",
        name:"textAlign",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.RIGHT",
        type:"attr",
        definingClass:"class:DateItem",
        groups:["appearance"]
    },
    "attr:ListGrid.quickDrawAheadRatio":{
        ref:"attr:ListGrid.quickDrawAheadRatio",
        flags:"IRW",
        description:"Alternative to ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio')}, to be used when the user\n is rapidly changing the grids viewport (for example drag scrolling through the grid).\n If unspecified ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio')} will be used in all cases",
        name:"quickDrawAheadRatio",
        seeAlso:[],
        valueType:"float",
        defaultValue:"1.3",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "attr:FormItem.valueMap":{
        ref:"attr:FormItem.valueMap",
        flags:"IRW",
        description:"In a form, valueMaps are used for FormItem types that allow the user to pick from a\n limited set of values, such as a SelectItem.  The valueMap can be either an Array of\n legal values or an Object where each property maps a stored value to a user-displayable\n value.\n <P>\n To set the initial selection for a form item with a valueMap, use\n ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')}.\n <P>\n See also ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}.",
        name:"valueMap",
        setter:["setValueMap"],
        seeAlso:[],
        valueType:"Array or Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueMap"]
    },
    "classMethod:Page.getAppImgDir":{
        ref:"classMethod:Page.getAppImgDir",
        flags:"",
        description:" Return the directory for app-specific images.\n\n",
        name:"getAppImgDir",
        seeAlso:[],
        returns:{description:"URL for page-specific images.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "method:Button.setVAlign":{
        ref:"method:Button.setVAlign",
        flags:"",
        description:" Sets the vertical alignment of this buttons content.\n",
        name:"setVAlign",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["positioning"]
    },
    "method:SectionStack.sectionHeaderClick":{
        ref:"method:SectionStack.sectionHeaderClick",
        flags:"A",
        description:" Method intended to be called by the sectionHeader when it is clicked on.\n\n",
        name:"sectionHeaderClick",
        seeAlso:[],
        params:[
            {description:"the sectionHeader clicked on", optional:false, name:"sectionHeader", 
             defaultValue:null,type:"Canvas"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "method:EBay.setProductionToken":{
        ref:"method:EBay.setProductionToken",
        flags:"",
        description:"\n Sets the token to be used by queries to the eBay production environment.\n \n",
        name:"setProductionToken",
        seeAlso:[],
        params:[
            {description:"Your production authToken, provided to you by eBay.", optional:false, 
             name:"authToken",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:EBay"
    },
    "class:History":{
        methods:[],
        ref:"class:History",
        classAttrs:[],
        classMethods:["classMethod:History.registerCallback", "classMethod:History.getCurrentHistoryId", 
         "classMethod:History.getHistoryData","classMethod:History.setHistoryTitle", "classMethod:History.addHistoryEntry"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"This class provides synthetic history support.  Using this class, you can create history\n entries at any point and be called back when the user next navigates to any of these history\n entires via any of the browser mechanisms that enable navigation: back/forward buttons,\n history dropdown and bookmarks.\n <p>\n The history entries created using this mechanism work just like history entries created\n natively by the browser, except you get a callback whenever a transition occurs.  This\n implementation correctly handles \"deep\" history - i.e. it correctly maintains forward and\n back history when the user navigates forward or back away from the page that uses this\n module.\n <p>\n This module is usable independent of the rest of SmartClient - you can use it on pages that\n don't load any other modules.\n <p>\n This module currently does not work in Safari, but works in all other browsers supported by\n SmartClient.  Also, currently, if you set document.domain on the top-level page, the History\n mechanism will behave sub-obtimally in IE - three clicks one the forward/back buttons will\n be required to transition to the next history entry.",
        name:"History",
        seeAlso:[],
        type:"class"
    },
    "method:List.contains":{
        ref:"method:List.contains",
        flags:"",
        description:" Return if this list contains the specified object.\n <P>\n If pos is specified, starts looking after that position.\n\n",
        name:"contains",
        seeAlso:[],
        params:[
            {description:"item to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"optional position in the list to look after", optional:true, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == item was found, false == not found", type:"boolean"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:StretchImgButton.autoFit":{
        ref:"attr:StretchImgButton.autoFit",
        flags:"IRW",
        description:"If true, ignore the specified size of this widget and always size just large\n enough to accomodate the title.  If <code>setWidth()</code> is explicitly called on an\n autoFit:true button, autoFit will be reset to <code>false</code>.\n <P>\n Note that for StretchImgButton instances, autoFit will occur horizontally only, as \n unpredictable vertical sizing is likely to distort the media. If you do want vertical \n auto-fit, this can be achieved by simply setting a small height, and having \n overflow:\"visible\"",
        name:"autoFit",
        setter:["setAutoFit"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["sizing"]
    },
    "attr:ListGridField.summaryTitle":{
        ref:"attr:ListGridField.summaryTitle",
        flags:"IRWA",
        getter:["getSummaryTitle"],
        description:"Optional long summary title for this field, provided in addition to \n ${isc.DocUtils.linkForRef('attr:ListGridField.title')}. This gives the developer an option to use a very short,\n or empty title for the ListGrid column (where space may be a factor), but have a longer \n value available to be used elsewhere.<br>\n By default this value will be used for the title of the context-menu item\n for showing/hiding the listGrid field when the user right-clicks on the ListGrid header.",
        name:"summaryTitle",
        seeAlso:[
            {ref:"attr:ListGridField.title", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:CubeGrid.addFacet":{
        ref:"method:CubeGrid.addFacet",
        flags:"",
        description:"\n Add a facet to the view, into the row or column facets (intoRows true or false), at index\n \"index\".  Handles the facet already being in the view (does a pivot).<br><br>\n\n The facet being added should currently have a fixed facet value (unless it's already part of the\n view), which will be removed from cubeGrid.fixedFacetValues.\n\n",
        name:"addFacet",
        seeAlso:[
            {ref:"method:CubeGrid.removeFacet", description:null},
            {ref:"attr:CubeGrid.fixedFacetValues", description:null}
        ],
        params:[
            {description:"facetId to add.  Definition must have been provided at init time.", 
             optional:false,name:"facetId", defaultValue:null, type:"id"},
            {description:"whether to add facet as a row facet", optional:true, name:"intoRows", 
             defaultValue:"true",type:"boolean"},
            {description:"index to add the facet at.  0 = outermost (default innermost)", 
             optional:true,name:"index", defaultValue:null, type:"integer"}
        ],
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:Canvas.opacity":{
        ref:"attr:Canvas.opacity",
        flags:"IRWA",
        description:"Renders the widget to be partly transparent. A widget's opacity property may\n      be set to any number between 0 (transparent) to 100 (opaque).\n		Null means don't specify opacity directly, 100 is fully opaque.\n		Note that heavy use of opacity may slow down your browser.\n		See canvas.setOpacity() for details.",
        name:"opacity",
        setter:["setOpacity"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["cues"]
    },
    "attr:MenuItem.submenu":{
        ref:"attr:MenuItem.submenu",
        flags:"IR",
        description:"A reference to another menu, to display as a submenu when the mouse cursor hovers over\n this menu item.",
        name:"submenu",
        seeAlso:[],
        valueType:"Menu",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('subMenus')}"],
        definingClass:"object:MenuItem",
        groups:["menuBasic"]
    },
    "object:ClassFactory":{
        methods:[],
        ref:"object:ClassFactory",
        classAttrs:[],
        classMethods:["classMethod:ClassFactory.defineClass", "classMethod:ClassFactory.getClass", 
         "classMethod:ClassFactory.newInstance"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Sets up a real inheritance structure for Javascript objects.\n	We separate out class objects from prototypes, so each gets its own inheritance chain.  \n	This allows us to set up superclass calls, maintain class vs. instance variables and more!\n\n	The ClassFactory is a singleton object that holds the miscellaneous pieces of our inheritance\n	mechanism.\n\n	Your main interaction with the ClassFactory is to create new classes:\n		<code>ClassFactory.defineClass(\"MyClass\", \"mySuperClass\");</code>",
        name:"ClassFactory",
        seeAlso:[
            {ref:"class:Class", description:null}
        ],
        type:"object"
    },
    "method:Tree.getName":{
        ref:"method:Tree.getName",
        flags:"",
        description:"\n Get the 'name' of a node.  This is node[${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}].  If that value has not\n been set on the node, a unique value (within this parent) will be auto-generated and\n returned.\n	\n",
        name:"getName",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"name of the node", type:"string"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:HeaderItem.endRow":{
        ref:"attr:HeaderItem.endRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "method:Layout.getMemberSizes":{
        ref:"method:Layout.getMemberSizes",
        flags:"",
        description:" \n",
        name:"getMemberSizes",
        seeAlso:[],
        returns:{description:"array of member sizes", type:"Array"},
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:HTMLFlow.dynamicContents":{
        ref:"attr:HTMLFlow.dynamicContents",
        flags:"IRWA",
        description:"Dynamic contents allows the contents string to be treated as a simple, but powerful\n template.  When this attribute is set to true, expressions of the form \\${arbitrary JS\n here} are replaced by the result of the evaluation of the JS code inside the curly\n brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation\n of the expressions in the contents string you can call markForRedraw() on the canvas.\n <p>\n You can use this feature to build some simple custom components. For example, let's say\n you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do\n this by observing the valueChanged() method on the slider and calling setContents() on\n your canvas with the new string or you can set the contents of the canvas to something\n like:\n <p><code>\n \"The slider value is \\${sliderInstance.getValue()}.\"\n </code><p>\n Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider\n and call canvas.markForRedraw() in that observation.  This approach is cleaner than\n setContents() when the Canvas is aggregating several values or dynamic expressions.\n Like so:\n <p>\n <pre>\n Slider.create({\n     ID: \"mySlider\"\n });\n\n Canvas.create({\n     ID: \"myCanvas\",\n     dynamicContents: true,\n     contents: \"The slider value is \\${mySlider.getValue()}.\"\n });\n     \n myCanvas.observe(mySlider, \"valueChanged\", \n                  \"observer.markForRedraw()\");\n </pre>\n You can embed an arbitrary number of dynamic expressions in the contents string.  The\n search and replace is optimized for speed.\n <p>\n If an error occurs during the evaluation of one of the expressions, a warning is logged\n to the ISC Developer Console and the error string is embedded in place of the expected\n value in the Canvas.\n <p>\n The value of a function is its return value.  The value of any variable is the same as\n that returned by its toString() representation.\n <p>\n Inside the evalution contentext, <code>this</code> points to the canvas instance that\n has the dynamicContents string as its contents - in other words the canvas instance on\n which the template is declared.",
        name:"dynamicContents",
        seeAlso:[
            {ref:"attr:HTMLFlow.contents", description:null},
            {ref:"attr:Canvas.dynamicContentsVars", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dynamicContents')}"],
        definingClass:"class:HTMLFlow",
        groups:["contents"]
    },
    "method:StretchImgButton.setTitle":{
        ref:"method:StretchImgButton.setTitle",
        flags:"",
        description:" Set the title.\n",
        name:"setTitle",
        seeAlso:[],
        params:[
            {description:"new title", optional:false, name:"newTitle", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["appearance"]
    },
    "method:Canvas.setBorder":{
        ref:"method:Canvas.setBorder",
        flags:"",
        description:" Set the CSS border of this component, as a CSS string including border-width,\n border-style, and/or color (eg \"2px solid blue\").\n <P>\n This property applies the same border to all four sides of this component.  Different\n per-side borders can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.\n\n",
        name:"setBorder",
        seeAlso:[],
        params:[
            {description:"new border to set to (eg: \"2px solid black\")", optional:false, 
             name:"newBorder",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:SectionStack.expandSection":{
        ref:"method:SectionStack.expandSection",
        flags:"",
        description:" \n Expands a section or sections.  This action shows all the items assigned to the section.\n If the section is currently hidden, it is shown first and then expanded.  Calling this\n method is equivalent to the user clicking on the SectionHeader of a collapsed section.\n\n",
        name:"expandSection",
        seeAlso:[
            {ref:"method:SectionStack.showSection", description:null},
            {ref:"attr:SectionStack.scrollSectionIntoView", description:null}
        ],
        params:[
            {description:"Section(s) to expand.  For this parameter, you can pass the position \n                      of the section in the SectionStack, the ID of the section, or a\n                      List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"},
            {description:"callback to fire when the section has been expanded.", optional:true, 
             name:"callback",defaultValue:null, type:null}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"],
        definingClass:"class:SectionStack"
    },
    "attr:DetailViewer.blockSeparator":{
        ref:"attr:DetailViewer.blockSeparator",
        flags:"IRW",
        description:"A string (HTML acceptable) that will be written to a page to separate blocks.",
        name:"blockSeparator",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"<BR><BR>\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "attr:ListGridField.defaultIconSrc":{
        ref:"attr:ListGridField.defaultIconSrc",
        flags:"IRA",
        description:"If this field is editable, this property will be passed to editors displayed for\n cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.defaultIconSrc')}.",
        name:"defaultIconSrc",
        seeAlso:[
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:TabBar.tabs":{
        ref:"attr:TabBar.tabs",
        flags:"IR",
        description:"Tab for this TabBar.",
        name:"tabs",
        seeAlso:[],
        valueType:"Array of Tab Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabBar"
    },
    "attr:SectionStackSection.hidden":{
        ref:"attr:SectionStackSection.hidden",
        flags:"I",
        description:"Sections default to the visible state.  This\n attribute allows you to explicitly control the visible/hidden state of the\n section by overriding the above default behavior.",
        name:"hidden",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "attr:PickList.optionFilterContext":{
        ref:"attr:PickList.optionFilterContext",
        flags:"IRA",
        description:"If this item has a specified <code>optionDataSource</code>, and this property is\n not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when\n performing the filter operation on the dataSource to obtain the set of options for the\n list.",
        name:"optionFilterContext",
        seeAlso:[],
        valueType:"RPCRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "classMethod:isA.Instance":{
        ref:"classMethod:isA.Instance",
        flags:"",
        description:"\n	Is <code>object</code> an instance of some class?\n\n",
        name:"Instance",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is an instance of some class", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:Slider.labelSpacing":{
        ref:"attr:Slider.labelSpacing",
        flags:"IRW",
        description:"The space around the labels used to display the minimum, maximum and current values of the\n slider.",
        name:"labelSpacing",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"5",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:FormItem.showErrorIcon":{
        ref:"attr:FormItem.showErrorIcon",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["errorIcon", "validation", "appearance"]
    },
    "group:performance":{
        ref:"group:performance",
        refs:["attr:GridRenderer.showAllRows", "attr:GridRenderer.showAllColumns", 
         "attr:GridRenderer.scrollRedrawDelay","attr:GridRenderer.drawAheadRatio", "attr:GridRenderer.quickDrawAheadRatio", 
         "attr:ListGrid.fastCellUpdates","attr:ListGrid.showAllRecords", "attr:ListGrid.drawAheadRatio", 
         "attr:ListGrid.quickDrawAheadRatio","attr:ListGrid.scrollRedrawDelay", "attr:ListGrid.dataPageSize"],
        name:"performance",
        seeAlso:[],
        type:"group"
    },
    "group:loadState":{
        ref:"group:loadState",
        refs:[],
        name:"loadState",
        seeAlso:[],
        type:"group"
    },
    "attr:SelectItem.textBoxStyle":{
        ref:"attr:SelectItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class name for a form item's text box element.\n <P>\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"textBoxStyle",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"selectItemText\", [IRA]",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "attr:Canvas.mouseStillDownInitialDelay":{
        ref:"attr:Canvas.mouseStillDownInitialDelay",
        flags:"IRWA",
        description:"Amount of time (in msec) before mouseStillDown events start to be fired for this object.",
        name:"mouseStillDownInitialDelay",
        seeAlso:[],
        valueType:"number",
        defaultValue:"400",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["events"]
    },
    "method:Log.logFatal":{
        ref:"method:Log.logFatal",
        flags:"",
        description:" Log a message at \"fatal\" priority\n \n",
        name:"logFatal",
        seeAlso:[
            {ref:"method:Log.logDebug", description:"for usage info"}
        ],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:ListGridField.canFilter":{
        ref:"attr:ListGridField.canFilter",
        flags:"IRW",
        description:"If showing a filter row for this ListGrid, should the filter criteria for this \n      field be editable",
        name:"canFilter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('disableFilter')}"],
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "method:ResultSet.compareCriteria":{
        ref:"method:ResultSet.compareCriteria",
        flags:"",
        description:" Default behavior is to call ${isc.DocUtils.linkForRef('method:DataSource.compareCriteria')} to determine whether new\n criteria is guaranteed more restrictive, equivalent to the old criteria, or not guaranteed\n more restrictive, returning 1, 0 or -1 respectively.\n <P>\n Override this method or ${isc.DocUtils.linkForRef('method:DataSource.compareCriteria')} to implement your own client-side\n filtering behavior.\n\n",
        name:"compareCriteria",
        seeAlso:[
            {ref:"type:CriteriaPolicy", description:null}
        ],
        params:[
            {description:"new filter criteria", optional:false, name:"newCriteria", defaultValue:null, 
             type:"Criteria"},
            {description:"old filter criteria", optional:false, name:"oldCriteria", defaultValue:null, 
             type:"Criteria"},
            {description:"dataSource request properties", optional:true, name:"requestProperties", 
             defaultValue:null,type:"DSRequest Properties"},
            {description:"overrides ${isc.DocUtils.linkForRef('type:CriteriaPolicy')}", optional:true, 
             name:"policy",defaultValue:null, type:"string"}
        ],
        returns:{description:"0 if the filters are equivalent, 1 if newFilter is guaranteed more                      restrictive, and -1 if newFilter is not guaranteed more restrictive", 
         type:"Number"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:TreeNode.isFolder":{
        ref:"attr:TreeNode.isFolder",
        flags:"IR",
        description:"Set to <code>true</code> or a string that is not equal to (ignoring case)\n <code>\"false\"</code> to explicitly mark this node as a folder.  See ${isc.DocUtils.linkForRef('method:Tree.isFolder')} for\n a full description of how the ${isc.DocUtils.linkForRef('class:Tree')} determines whether a node is a folder or not.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}.",
        name:"isFolder",
        seeAlso:[
            {ref:"attr:Tree.isFolderProperty", description:null}
        ],
        valueType:"Boolean or String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:RPCResponse.transactionNum":{
        ref:"attr:RPCResponse.transactionNum",
        flags:"R",
        description:"ID of the transaction sent to the server via ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendQueue')} containing the\n ${isc.DocUtils.linkForRef('class:RPCRequest')} associated with this response.",
        name:"transactionNum",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCResponse"
    },
    "attr:Canvas.hoverWrap":{
        ref:"attr:Canvas.hoverWrap",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, this property can be used to customize the\n whether content in the hover canvas is displayed in a single line, or wraps.",
        name:"hoverWrap",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:SelectItem.pickListProperties":{
        ref:"attr:SelectItem.pickListProperties",
        flags:"IRA",
        description:"If specified this properties block will be applied to the pickList created for this\n Form Item.",
        name:"pickListProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "method:Canvas.containsPoint":{
        ref:"method:Canvas.containsPoint",
        flags:"A",
        description:" Return whether or not this object contains the specified global (x,y) coordinates.\n <P>\n Will return false if any parentElement does not contain the specified point, (EG:\n you're hovering over an element's absolute location, but it is scrolled out of \n view in a parent element)\n\n",
        name:"containsPoint",
        seeAlso:[],
        params:[
            {description:"GLOBAL x-coordinate", optional:false, name:"x", defaultValue:null, 
             type:"number"},
            {description:"GLOBAL y-coordinate", optional:false, name:"y", defaultValue:null, 
             type:"number"},
            {description:"point lies specificly within our viewport                                              (drawn area excluding margins and scrollbars if\n                                              present)", 
             optional:true,name:"withinViewport", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if this object contains the specified point; false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:RestDataSource.dataURL":{
        ref:"attr:RestDataSource.dataURL",
        flags:"IR",
        description:"Default URL to contact to fulfill all DSRequests.  \n RestDataSources also allow per-operationType dataURLs to be set via\n <ul>\n <li>${isc.DocUtils.linkForRef('attr:RestDataSource.fetchDataURL')}</li>\n <li>${isc.DocUtils.linkForRef('attr:RestDataSource.addDataURL')}</li> \n <li>${isc.DocUtils.linkForRef('attr:RestDataSource.updateDataURL')}</li>\n <li>${isc.DocUtils.linkForRef('attr:RestDataSource.removeDataURL')}</li>\n </ul>",
        name:"dataURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:Canvas.masterElement":{
        ref:"attr:Canvas.masterElement",
        flags:"RA",
        description:"This Canvas's \"master\" (the Canvas to which it was added as a peer), if any.",
        name:"masterElement",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:SectionStack.overflow":{
        ref:"attr:SectionStack.overflow",
        flags:"IR",
        description:"Normal ${isc.DocUtils.linkForRef('type:Overflow')} settings can be used on layouts, for example, an\n overflow:auto Layout will scroll if sections are resized to exceed the specified size,\n whereas an overflow:visible Layout will grow to accomodate the resized sections.",
        name:"overflow",
        seeAlso:[],
        valueType:"Overflow",
        defaultValue:"\"hidden\"",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "attr:TreeGrid.cantDragIntoChildMessage":{
        ref:"attr:TreeGrid.cantDragIntoChildMessage",
        flags:"IR",
        description:"Message displayed when user attempts to drop a node into a child of itself.",
        name:"cantDragIntoChildMessage",
        seeAlso:[
            {ref:"attr:TreeGrid.canDragRecordsOut", description:null},
            {ref:"attr:TreeGrid.canAcceptDroppedRecords", description:null},
            {ref:"attr:TreeGrid.canReorderRecords", description:null}
        ],
        valueType:"String",
        defaultValue:"\"You can't drag an item into one of it's children.\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["i18nMessages"]
    },
    "attr:ListGridField.cellAlign":{
        ref:"attr:ListGridField.cellAlign",
        flags:"IRW",
        description:"Horizontal alignment for cells in this field's column: \"left\", \"right\"\n or \"center\".<br>\n If null, alignment is derived from ${isc.DocUtils.linkForRef('attr:ListGridField.align')}. If this field is editable, \n the alignment of cells in the body will also be reflected in any editors for the field.",
        name:"cellAlign",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "group:resizing":{
        ref:"group:resizing",
        refs:["attr:Window.canDragResize"],
        name:"resizing",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.showHeaderMenuButton":{
        ref:"attr:ListGrid.showHeaderMenuButton",
        flags:"IR",
        description:"If set to true and ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','showHeaderContextMenu')} is true, the\n ${isc.DocUtils.linkForRef('attr:ListGrid.headerMenuButton')} will be displayed when the user rolls\n over the header buttons in this grid.",
        name:"showHeaderMenuButton",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "attr:FormItem.emptyValueIcon":{
        ref:"attr:FormItem.emptyValueIcon",
        flags:"IRW",
        description:"This property allows the developer to specify an icon to display when this item has\n no value. It is configured in the same way as any other valueIcon \n (see ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')})",
        name:"emptyValueIcon",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "method:Tree.getRoot":{
        ref:"method:Tree.getRoot",
        flags:"",
        description:"\n Returns the root node of the tree.\n\n",
        name:"getRoot",
        seeAlso:[],
        returns:{description:"the root node", type:"TreeNode"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:SelectItem.pickerIconHeight":{
        ref:"attr:SelectItem.pickerIconHeight",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the\n size of the picker icon. If unset picker icon will be sized as a square to fit in the\n avaliable height for the icon.",
        name:"pickerIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["pickerIcon"]
    },
    "group:loadWSDLTag":{
        ref:"group:loadWSDLTag",
        title:"&lt;isomorphic:loadWSDL&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n Load a WSDL file and create an instance of ${isc.DocUtils.linkForRef('class:WebService')} that allows invoking operations\n and binding DataSources to web service operations. This tag works just like\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')}, except it's synchronous and the result is server-cacheable.\n <p>\n Note that this JSP tag must be surrounded by &lt;SCRIPT&gt; tags in the JSP because it\n generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be\n used in a JSP that is included from your main page in order to create separate\n cacheability.  For example:<pre>\n     &lt;SCRIPT SRC=\"myWebServiceDefinition.jsp\"&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>url</b><br>\n <i>value format</i>: URL or URI\n <i>default value</i>: NONE\n <p>\n This attribute specifies the URL or URI of the WSDL file to fetch and translate.  This can\n be either a remote URL - e.g: <code>http://host:port/wsdlFile.wsdl</code> or a relative or\n absolute URI to a file local to this container - e.g: <code>/some/wsdlFile.wsdl</code> or\n <code>../some/wsdlFile.wsdl</code>.  If the url is a remote URL, then an HTTP request will\n be made for the file.  If it is local, it will be fetched from disk using standard Servlet\n APIs (<code>ServletContext.getResourceAsStream()</code>).\n <p>\n <b>cache</b><br>\n <i>value format</i>: Integer (number of seconds to cache result)\n <i>default value</i>: 3600 (1 hour)\n <p>\n This attribute specifies the number of seconds for which the fetched WSDL is cacheable on\n the server.  Fetching a WSDL file from a remote server can cause a significant delay in JSP\n processing, and WSDL files rarely change outside of a development environment.  Set this\n value to zero to disable caching.",
        name:"loadWSDLTag",
        seeAlso:[
            {ref:"group:wsdlBinding", description:null},
            {ref:"classMethod:XMLTools.loadWSDL", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:SectionStack.showSection":{
        ref:"method:SectionStack.showSection",
        flags:"",
        description:" \n Shows a section or sections.  This includes the section header and its items.  If the\n section is collapsed, only the header is shown.  If the section is expanded, the section\n header and all items are shown.\n\n",
        name:"showSection",
        seeAlso:[
            {ref:"method:SectionStack.expandSection", description:null},
            {ref:"attr:SectionStack.scrollSectionIntoView", description:null}
        ],
        params:[
            {description:"Section(s) to show.  For this parameter, you can pass the position \n                      of the section in the SectionStack, the ID of the section, or a\n                      List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"},
            {description:"callback to fire when the sections have been expanded.", optional:true, 
             name:"callback",defaultValue:null, type:null}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsShowAndHide')}"],
        definingClass:"class:SectionStack"
    },
    "attr:DateItem.startDate":{
        ref:"attr:DateItem.startDate",
        flags:"IRW",
        description:"Minimum date the selectors will allow the user to pick.",
        name:"startDate",
        seeAlso:[],
        valueType:"Date",
        defaultValue:"1/1/1995",
        type:"attr",
        definingClass:"class:DateItem",
        groups:["appearance"]
    },
    "attr:FormItem.optionDataSource":{
        flags:"IR",
        getter:["getOptionDataSource"],
        type:"attr",
        ref:"attr:FormItem.optionDataSource",
        description:"If set, this FormItem will map stored values to display values as though a\n ${isc.DocUtils.linkForRef('attr:FormItem.valueMap')} were specified, by fetching records from the \n specified <code>optionDataSource</code> and extracting the\n ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and \n ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in loaded records, to derive one\n valueMap entry per record loaded from the optionDataSource.\n <P>\n Fetches will be initiated against the optionDataSource any time the FormItem has a\n non-null value and no corresponding display value is available.  This includes when the\n form is first initialized, as well as any subsequent calls to\n ${isc.DocUtils.linkForRef('method:FormItem.setValue')}, such as may happen when ${isc.DocUtils.linkForRef('method:DynamicForm.editRecord')} is\n called.  Retrieved values are automatically cached by the FormItem.\n <P>\n Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is <b>also</b> specified for\n the field (either directly in the form item or as part of the field definition in the\n dataSource), it will be preferred to the data derived from the optionDataSource for\n whatever mappings are present.\n <P>\n In a databound form, if ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} is specified for a FormItem and \n <code>optionDataSource</code> is unset, <code>optionDataSource</code> will default to\n the form's current DataSource",
        name:"optionDataSource",
        valueType:"DataSource | String",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('listComboBox')}"],
        defaultValue:"null",
        groups:["display_values"],
        definingClass:"class:FormItem"
    },
    "attr:DetailViewerField.title":{
        ref:"attr:DetailViewerField.title",
        flags:"IR",
        description:"The title of the field as displayed on the left-hand side.  If left unspecified, the\n title of the field is derived by looking up the value of\n ${isc.DocUtils.linkForRef('attr:DetailViewer.fieldIdProperty')} on this field.  So, by default, the title of a field\n is the value of its \"name\" property.",
        name:"title",
        seeAlso:[
            {ref:"attr:DetailViewer.fieldIdProperty", description:null}
        ],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:DetailViewerField"
    },
    "attr:StatefulCanvas.overCanvas":{
        ref:"attr:StatefulCanvas.overCanvas",
        flags:"R",
        description:"Auto generated child widget to be shown when the user rolls over this canvas if \n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showOverCanvas')} is true. See documentation for ${isc.DocUtils.linkForRef('type:AutoChild')}\n for information on how to customize this canvas.",
        name:"overCanvas",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas"
    },
    "attr:ImgButton.showDownIcon":{
        ref:"attr:ImgButton.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "class:UploadItem":{
        methods:["method:UploadItem.setValue"],
        exampleConfig:"UploadItem.xml",
        ref:"class:UploadItem",
        classAttrs:[],
        classMethods:[],
        attrs:[],
        description:"FormItem that creates an HTML &ltinput type=\"upload\"&gt; control, with an interface that\n allows a user to pick a file from his machine to upload to the server.\n <P>\n See the ${isc.DocUtils.linkForRef('group:upload','Uploading Files')} overview for details.\n <P>\n Note: if a form containing an UploadItem is ${isc.DocUtils.linkForRef('method:Canvas.redraw','redrawn')} (which may\n happen if other form items are shown or hidden, the form is\n ${isc.DocUtils.linkForRef('attr:Canvas.redrawOnResize','resized')}, or other items show validation errors) then the value\n in the upload item is lost (because an HTML upload field may not be created with a value).\n For this reason, if you are building a form that combines an UploadItem with other FormItems\n that could trigger redraw()s, recommended practice is to place each UploadItem in a distinct\n DynamicForm instance and create the visual appearance of a single logical form via combining\n the DynamicForms in a ${isc.DocUtils.linkForRef('class:Layout')}.",
        name:"UploadItem",
        seeAlso:[],
        type:"class",
        groups:["upload"]
    },
    "method:DynamicForm.hasErrors":{
        ref:"method:DynamicForm.hasErrors",
        flags:"",
        description:" Return whether this form currently has any validation errors.<br>\n Validation errors are set up automatically by validation, or may be explicitly set via\n ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')}.\n",
        name:"hasErrors",
        seeAlso:[],
        returns:{description:"true == form currently has validation errors.", type:"boolean"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "attr:FormItemIcon.height":{
        ref:"attr:FormItemIcon.height",
        flags:"IRW",
        description:"If set, this property determines the height of this icon in px.\n      If unset the form item's <code>iconHeight</code> property will be used instead.",
        name:"height",
        seeAlso:[
            {ref:"attr:FormItem.iconHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "attr:Canvas.animateHideAcceleration":{
        ref:"attr:Canvas.animateHideAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated hide.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateHideAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "classMethod:Class.create":{
        ref:"classMethod:Class.create",
        flags:"",
        description:"\n Create an instance of this class.  \n <P>\n All arguments passed to this method are passed on to the ${isc.DocUtils.linkForRef('method:Class.init')} instance \n method.  Unless ${isc.DocUtils.linkForRef('attr:Class.addPropertiesOnCreate')} is set to <code>false</code>, all\n arguments passed to this method must be Objects and all properties on those\n objects will be copied to the newly created instance before ${isc.DocUtils.linkForRef('method:Class.init')} is\n called.  If there are overlapping properties in the passed arguments, the last wins.\n <p>\n Any return value from ${isc.DocUtils.linkForRef('method:Class.init')} is thrown away.\n <p>\n Note: Generally, you would not override this method.  If you want to specify a\n constructor for your class, provide an override for ${isc.DocUtils.linkForRef('method:Class.init')} for generic\n classes or ${isc.DocUtils.linkForRef('method:Canvas.initWidget')} for any subclasses of UI components\n (i.e. descendants of ${isc.DocUtils.linkForRef('class:Canvas')}.\n\n",
        name:"create",
        seeAlso:[],
        params:[
            {description:"Any arguments passed will be passed along to the init() routine of the instance.\n      Unless ${isc.DocUtils.linkForRef('attr:Class.addPropertiesOnCreate')} is set to false, any arguments passed to\n      this method must be of type Object.", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"any"}
        ],
        returns:{description:"New instance of this class, whose init() routine has already been called", 
         type:"object"},
        type:"classMethod",
        examples:["<code>var myInstance = MyClass.create()</code>", 
         "${isc.DocUtils.linkForExampleId('create')}"],
        definingClass:"class:Class"
    },
    "attr:DataSource.fields":{
        ref:"attr:DataSource.fields",
        flags:"IR",
        description:"The list of fields that compose records from this DataSource.\n <P>\n Each DataSource field can have type, user-visible title, validators, and other metadata\n attached.",
        name:"fields",
        seeAlso:[
            {ref:"class:DataSourceField", description:null}
        ],
        valueType:"Array of DataSourceField",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["fields"]
    },
    "method:ListGridField.getGroupValue":{
        ref:"method:ListGridField.getGroupValue",
        flags:"",
        description:" Return the value within which records with the same value will be grouped.\n Default is the result of ${isc.DocUtils.linkForRef('method:ListGrid.getCellValue')}.\n <P>\n While any type of value may be returned, avoiding the use of string values may\n result in improved performance. In this case, ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle')}\n may be implemented to map an enumerated group value into a legible string.\n",
        name:"getGroupValue",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null},
            {ref:"method:ListGridField.getGroupTitle", description:null}
        ],
        params:[
            {description:"raw value for the cell, from the record for the row", optional:false, 
             name:"value",defaultValue:null, type:"any"},
            {description:"Record object for the cell. Note: If this is a new row that has not been saved, in an \n   editable grid, it has no associated record object. In this case the edit values will\n   be passed in as this parameter (see ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')})", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"Field object for which to get group value", optional:false, name:"field", 
             defaultValue:null,type:"Object"},
            {description:"The name of the field", optional:false, name:"fieldName", defaultValue:null, 
             type:"String"},
            {description:"the ListGrid displaying the cell", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        returns:{description:"Group value to which this record belongs", type:"any"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customGrouping')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "method:Canvas.removeChild":{
        ref:"method:Canvas.removeChild",
        flags:"",
        description:"	Remove a child from its parent if it has one.\n",
        name:"removeChild",
        seeAlso:[],
        params:[
            {description:"Child canvas to remove from this parent.", optional:false, name:"child", 
             defaultValue:null,type:"Canvas instance"},
            {description:"If the child canvas was assigned a name, it should be passed in here                          to ensure this[name] is cleared", 
             optional:true,name:"name", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "group:errorHandling":{
        ref:"group:errorHandling",
        refs:["method:DataSource.handleError", "attr:DSResponse.status", "attr:DSResponse.errors"],
        name:"errorHandling",
        seeAlso:[],
        type:"group"
    },
    "attr:ToolbarItem.colSpan":{
        ref:"attr:ToolbarItem.colSpan",
        flags:"IRW",
        description:"these items span all columns",
        name:"colSpan",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["appearance"]
    },
    "classAttr:FileLoader.defaultModules":{
        ref:"classAttr:FileLoader.defaultModules",
        flags:"RW",
        description:"Default list of modules for\n ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} to use if none are\n provided by the user.",
        name:"defaultModules",
        seeAlso:[
            {ref:"classMethod:FileLoader.cacheISC", description:null},
            {ref:"classMethod:FileLoader.loadISC", description:null}
        ],
        valueType:"String",
        defaultValue:"\"Core,Foundation,Containers,Grids,Forms,DataBinding\"",
        type:"classAttr",
        definingClass:"class:FileLoader"
    },
    "method:DataSource.transformRequest":{
        ref:"method:DataSource.transformRequest",
        flags:"A",
        description:" For a dataSource using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')},\n return the data that should be sent to the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}.\n <P>\n By default, HTTP requests sent to non-SmartClient servers do not include DSRequest\n metadata such as ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')}, ${isc.DocUtils.linkForRef('attr:DSRequest.endRow','endRow')},\n and ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues','oldValues')}.  Only the core\n ${isc.DocUtils.linkForRef('group:dataSourceOperations','datasource protocol data')} is sent, such as the criteria\n passed to ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} or the updated values submitted by\n ${isc.DocUtils.linkForRef('method:DynamicForm.saveData','form.saveData()')}.  \n <P>\n transformRequest() allows you to transform dsRequest metadata into a\n format understood by your server and include it in the HTTP request, so that you can\n integrate DataSource features such as data paging with servers that support such\n features.\n <P>\n How the data is actually sent to the URL is controlled by \n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}.  If using the \"getParams\" or\n \"postParams\" protocol, data is expected to be a JavaScript Object where each property\n will become a GET or POST'd parameter.  If using dataProtocol:\"soap\" or \"postXML\", data\n will be serialized as an XML message by ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.\n <P>\n As an example, if you have a dataURL that can return paged data given URL parameters\n \"start\" and \"end\", you could implement transformRequest like so:\n <pre>\n   isc.DataSource.create({\n      ... \n      transformRequest : function (dsRequest) {\n         if (dsRequest.operationType == \"fetch\") {\n             var params = {\n                start : dsRequest.startRow,\n                end : dsRequest.endRow\n             };\n             // combine paging parameters with criteria\n             return isc.addProperties({}, dsRequest.data, params);\n         }\n      }\n   });\n </pre>\n Other reasons to implement transformRequest():\n <ul>\n <li> transform a ${isc.DocUtils.linkForRef('type:Criteria')} object into the custom query language of a web\n      service\n <li> add a session id to requests that require authentication\n <li> detect colliding updates by sending both updated values and the values the user\n      originally retrieved before editing began (available as ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')})\n </ul>\n\n",
        name:"transformRequest",
        seeAlso:[],
        params:[
            {description:"the DSRequest being processed", optional:false, name:"dsRequest", 
             defaultValue:null,type:"DSRequest"}
        ],
        returns:{description:"data to be sent to the dataURL", type:"any"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "attr:FormItem.showErrorText":{
        ref:"attr:FormItem.showErrorText",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorText",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["validation", "appearance"]
    },
    "attr:DataSourceField.editorType":{
        ref:"attr:DataSourceField.editorType",
        flags:"IR",
        description:"Sets the default FormItem to be used whenever this field is edited (whether in a grid, form,\n or other component).\n <P>\n If unset, a FormItem will be automatically chosen based on the type of the field, by the\n rules explained ${isc.DocUtils.linkForRef('type:FormItemType','here')}.",
        name:"editorType",
        seeAlso:[],
        valueType:"FormItem className",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentBinding"]
    },
    "attr:Snapbar.showRollOver":{
        ref:"attr:Snapbar.showRollOver",
        flags:"IRW",
        description:"Snapbars show rollover styling.",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar"
    },
    "attr:ImgProperties.src":{
        ref:"attr:ImgProperties.src",
        flags:"IRW",
        description:"Specifies the URL of the image local to the skin or application directory.",
        name:"src",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "group:fileAssembly":{
        ref:"group:fileAssembly",
        title:"File Assembly",
        treeLocation:["Optional Modules/Network Performance"],
        refs:[],
        description:"File assembly concatenates multiple files into a single response, reducing the number\n of HTTP fetches required to load a page. This concatenation also improves the\n compressability of responses, since the compression algorithm may reduce redundancy across a\n larger data set.\n <p>\n The ISC FileAssembly service provides configuration-driven file assembly, with integrated\n compression and JavaScript stripping services.  Assemblies are specified in an xml format\n and map a URI to a set of files to concatenate together.  There also additional flags to\n enable stripping and compression.  \n <p>\n You can use the FileAssembler to create assemblies of javascript and css.  Since it's\n basically a file concatenator with some specialized services for javascript files, you could\n use it to assembly anything else, but javascript and css are probably the main things to\n consider.\n <p>\n The FileAssembler has a development mode and a production\n packaging mode.  In the development mode, there is a servlet that you can register at\n virtual URLs that are assembled on the fly by the FileAssembler based on its configuration.\n For production packaging, you can use the same configuration file to generate static,\n pre-compressed versions of these files.  The format of the file is as follows:\n <pre>\n &lt;FileAssembly&gt;\n     &lt;assemblies&gt;\n         &lt;FileAssemblyEntry uri=\"/myAssembly.js\"&gt;\n             &lt;compress&gt;true&lt;/compress&gt;\n             &lt;components&gt;\n                 &lt;component&gt;\n                     &lt;type&gt;file&lt;/type&gt;\n                     &lt;fileName&gt;copyright.txt&lt;/fileName&gt;\n                 &lt;/component&gt;\n                 &lt;component&gt;\n                     &lt;type&gt;datasource&lt;/type&gt;\n                     &lt;name&gt;myDatasource1&lt;/name&gt;\n                 &lt;/component&gt;\n                 &lt;component&gt;\n                     &lt;type&gt;ds&lt;/type&gt;\n                     &lt;name&gt;myDatasource2&lt;/name&gt;\n                 &lt;/component&gt;\n                 &lt;component&gt;\n                     &lt;type&gt;file&lt;/type&gt;\n                     &lt;fileName&gt;myPublicCode.js&lt;/fileName&gt;\n                 &lt;/component&gt;\n                 &lt;component&gt;\n                     &lt;type&gt;file&lt;/type&gt;\n                     &lt;fileName&gt;myPrivateCode.js&lt;/fileName&gt;\n                     &lt;jsStripping&gt;full&lt;/jsStripping&gt;\n                     &lt;jsObfuscation&gt;1&lt;/jsObfuscation&gt;\n                 &lt;/component&gt;\n             &lt;/components&gt;\n         &lt;/FileAssemblyEntry&gt;\n     &lt;/assemblies&gt;\n &lt;/FileAssembly&gt;\n </pre>\n You can specify as many FileAssemblyEntry blocks as you want, simply place them alongside\n each other under the &lt;assemblies&gt; element.  The above example states that the\n /myAssembly.js file should be assembled from the various components listed above. Component\n blocks support the following attributes:\n <p>\n <table border='1' class='normal'>\n <tr><td><b>Name</b></td><td><b>Values</b></td><td><b>Description</b></td></tr>\n <tr><td>type</td><td>file<br>xmlFile<br>ds|datasource<br>ui</td>\n     <td>any file<br>XML file<br>ISC DataSource file<br>ISC UI file<br></td></tr>\n <tr><td>name</td><td>file identifier</td>\n     <td>identifier for a ds or ui file</td></tr>\n <tr><td>fileName</td><td>file path</td><td>path to a file or xmlFile (relative to webRoot)</td></tr>\n <tr><td>jsStripping</td><td>none<br>partial<br>full</td>\n     <td>level of stripping (whitespace, comment, and delimiter removal) applied to file</td></tr>\n </table>\n <p>\n All component types except file are converted from valid ISC XML format to JavaScript format\n by the FileAssembler.  The <code>jsStripping</code> attribute only applies to assembled\n javascript files.\n <p>\n Once you've created the configuration file, you'll probably want to place it somewhere in\n webRoot.  Generally, it can be placed anywhere you like, but the development-time\n FileAssembly servlet requires the file be placed under webRoot. The default location is\n /isomorphicConfig/fileAssembly.xml and can be changed via the <code>configFile</code>\n init-param of the FileAssembly servlet.  To enable development mode support for\n FileAssembly, you'll need to register the FileAssembly servlet in your web.xml as follows:\n <pre>\n     &lt;servlet&gt;\n       &lt;servlet-name&gt;FileAssembly&lt;/servlet-name&gt;\n       &lt;servlet-class&gt;com.isomorphic.servlet.FileAssembly&lt;/servlet-class&gt;\n     &lt;/servlet&gt;\n </pre>\n Now, for every FileAssemblyEntry URI you specified in your fileAssembly.xml, you'll need\n corresponding mappings in web.xml, to tell the servlet container to send requests for that\n file to the FileAssembler.  For example, assuming your fileAssembly.xml contained the\n contents shown above, you'd register /myAssembly.js in your web.xml with the FileAssembler as\n follows:\n <pre>\n     &lt;servlet-mapping&gt;\n       &lt;servlet-name&gt;FileAssembly&lt;/servlet-name&gt;\n       &lt;url-pattern&gt;/myAssembly.js&lt;/url-pattern&gt;\n     &lt;/servlet-mapping&gt;\n </pre>\n You'll need a similar entry for any other entry in your fileAssembly.xml.  Note that this is\n for development only - we'll pregenerate static files for production.  Once you've done the\n above, you can load /myAssembly.js into your page via a standard SCRIPT block, like so:\n <pre>\n &lt;script src=\"/myAssembly.js\"&gt;&lt;/script&gt;\n </pre>\n Now, whenever requests are made for this file, the FileAssembler will check the timestamps\n of all the components of this assembly, rebuild the assembled file if required, and serve it\n to the browser as if it was a static file on disk.\n <p>\n To create static assembled files for production, you can use the fileAssembler command line\n tool provided as part of the SDK.  This is a Java-based command line tool located in\n smartclientSDK/WEB-INF/bin.  There are three versions of the tool in that directory -\n fileAssembler.bat is for Windows platforms, fileAssembler.command is for MacOS platforms, and\n fileAssembler.sh is for *nix platforms.  Running this tool with the --help argument will show\n you the command line switches available.  Typicaly, you'll need to specify:\n <ul>\n <li>--config &lt;file&gt; - location of the fileAssembly.xml configuration file\n <li>--webRoot &lt;dir&gt; - location of the webRoot that the fileAssembler uses to access the\n component files.\n <li>--outputDir &lt;dir&gt; - location of directory where you want output files to go - typically\n this is the webRoot of your production build.  These are the files you'll deploy to\n production.\n </ul>\n Finally, since the generated files are likely to be compressed and they're static, you'll\n probably want to map the FileDownload servlet to serve them in your production web.xml",
        name:"fileAssembly",
        seeAlso:[],
        type:"group",
        requiresModules:["NetworkPerformance"]
    },
    "attr:TabSet.pickerButtonVSrc":{
        ref:"attr:TabSet.pickerButtonVSrc",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is \n set to true, this property governs the base URL for the picker\n button image, when displayed in a verricaL tab-bar [IE ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is\n set to <code>\"LEFT\"</code> or <code>\"right\"</code>].\n <P>\n Note that if <code>symmetricPickerButton</code> is false, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}\n property will be used instead.\n <P>\n This base URL will have a suffix of <code>\"Down\"</code> appended when the user holds the\n mouse down over the button, and <code>\"Disabled\"</code> if the tabset as a whole is \n disabled.",
        name:"pickerButtonVSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricPickerButton", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]vpicker.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "attr:ImgButton.showDown":{
        ref:"attr:ImgButton.showDown",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes down in this object?",
        name:"showDown",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:TabSet.symmetricScroller":{
        ref:"attr:TabSet.symmetricScroller",
        flags:"IR",
        description:"If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, this property \n determines whether the ${isc.DocUtils.linkForRef('attr:TabSet.scrollerHSrc')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerVSrc')} media\n will be used for vertical and horizontal tab-bar scroller buttons, or whether separate\n media should be used for each possible ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} based\n on the ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} property for this tabSet.",
        name:"symmetricScroller",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "group:concat":{
        ref:"group:concat",
        refs:[],
        name:"concat",
        seeAlso:[],
        type:"group"
    },
    "attr:Flashlet.src":{
        ref:"attr:Flashlet.src",
        flags:"IR",
        description:"Location from which to load the Flashlet.",
        name:"src",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "attr:ImgSplitbar.src":{
        ref:"attr:ImgSplitbar.src",
        flags:"IR",
        description:"The base filename for the image.\n <P>\n If <code>img.state</code> is set, it's value will be appended to the URL before the\n file extension.  \n <P>\n For example, given an <code>src</code> of \"findIcon.gif\" and a state of\n \"Disabled\", the resulting image name would be \"findIcon_Disabled.gif\".  Compound states\n such as \"Selected\", \"Focused\" and \"Over\" or \"Down\" will have an intervening underscore,\n resulting in, for example, <code>\"findIcon_Selected_Down.gif\"</code>.",
        name:"src",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgSplitbar",
        groups:["appearance"]
    },
    "method:Canvas.showClickMask":{
        ref:"method:Canvas.showClickMask",
        flags:"",
        description:" Show a clickMask over the entire screen that intercepts mouse clicks and fires some action.\n The mask created will be associated with this canvas - calling this method multiple times\n will not show multiple (stacked) clickMasks if the mask associated with this canvas is \n already up.<br><br>\n\n The clickMask useful for modal dialogs, menus and similar uses, where any click outside of\n some Canvas should either be suppressed (as in a modal dialog) or just cause something (like\n dismissing a menu). \n \n",
        name:"showClickMask",
        seeAlso:[
            {ref:"method:Canvas.hideClickMask", description:null}
        ],
        params:[
            {description:"action to fire when the user clicks on the mask", optional:false, 
             name:"clickAction",defaultValue:null, type:"callback"},
            {description:"whether to automatically hide the clickMask on mouseDown                                      and suppress the mouseDown event from reaching\n                                      the target under the mouse", 
             optional:false,name:"mode", defaultValue:null, type:"clickMaskMode"},
            {description:"initially unmasked targets for this clickMask. Note that if this is a\n  <code>\"hard\"</code> mask, unmasked children of masked parents are not supported\n  so any non-top-level widgets passed in will have their parents unmasked.\n  Children of masked parents can never be masked.", 
             optional:false,name:"unmaskedTargets", defaultValue:null, 
             type:"widget | array of widgets"}
        ],
        returns:{description:"clickMask ID", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["clickMask"]
    },
    "attr:FormItem.showHint":{
        ref:"attr:FormItem.showHint",
        flags:"IRWA",
        description:"If a hint is defined for this form item, should it be shown?",
        name:"showHint",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:Canvas.mouseDown":{
        ref:"method:Canvas.mouseDown",
        flags:"A",
        description:"\n Executed when the left mouse down is pressed on this widget.  No default implementation.\n\n",
        name:"mouseDown",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        platformNotes:"If the end user system has only one mouse button, then it is considered the \"left\"                mouse button (and this method would execute when it is pressed on this widget).",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:Canvas.setDisabled":{
        ref:"method:Canvas.setDisabled",
        flags:"A",
        description:" set the disabled state of this object\n",
        name:"setDisabled",
        seeAlso:[],
        params:[
            {description:"new disabled state of this object - pass <code>true</code> to disable the widget", 
             optional:false,name:"disabled", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "method:Tree.closeFolders":{
        ref:"method:Tree.closeFolders",
        flags:"",
        description:"\n Close a set of folders, specified by path or as pointers to nodes.\n\n",
        name:"closeFolders",
        seeAlso:[],
        params:[
            {description:"List of nodes or node paths.", optional:false, name:"nodeList", 
             defaultValue:null,type:"List of TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "method:ListGrid.rowOut":{
        ref:"method:ListGrid.rowOut",
        flags:"",
        description:" Called when the mouse pointer leaves a row\n\n",
        name:"rowOut",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:ListGridField.editorImageURLPrefix":{
        ref:"attr:ListGridField.editorImageURLPrefix",
        flags:"IRWA",
        description:"When some cell in this field is being edited, this property can be used to apply \n an explicit ${isc.DocUtils.linkForRef('attr:FormItem.imageURLPrefix')} to the editor in question. \n This can be used to modify the valueIcons within the editor.<br>\n If unset, but ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} is specified, that will be used\n instead.",
        name:"editorImageURLPrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:ListGrid.updateData":{
        ref:"method:ListGrid.updateData",
        flags:"",
        description:" Perform a DataSource \"update\" operation to update existing records in this component's\n DataSource.\n\n",
        name:"updateData",
        seeAlso:[],
        params:[
            {description:"updated record", optional:false, name:"updatedRecord", defaultValue:null, 
             type:"Object"},
            {description:"method to call on operation completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundUpdate')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "type:Positioning":{
        ref:"type:Positioning",
        values:[
            {description:"The canvas is absolutely positioned with respect to its parentElement.", 
             value:"Canvas.ABSOLUTE"},
            {description:"The canvas is relatively positioned according to the document flow.", 
             value:"Canvas.RELATIVE"}
        ],
        description:null,
        name:"Positioning",
        seeAlso:[],
        type:"type",
        groups:["positioning"]
    },
    "attr:Splitbar.vertical":{
        ref:"attr:Splitbar.vertical",
        flags:"R",
        description:"Is this split bar vertically orientated?<br>\n When a <code>Splitbar</code> is created by a layout to be the resizeBar for some\n member of the layout, the <code>vertical</code> property will be set to <code>true</code>\n if the layout is horizontal, meaning this resizeBar will be taller than it is wide, \n and will allow horizontal resizing of the member.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar"
    },
    "type:CriteriaPolicy":{
        ref:"type:CriteriaPolicy",
        values:[
            {description:"Cache is dropped whenever criteria changes.", value:"\"dropOnChange\""},
            {description:"Cache is retained as along as the only changes to criteria                              are lengthening of criteria values for known, String-valued\n                              DataSource fields, or the addition of fields that weren't\n                              present before.", 
             value:"\"dropOnShortening\""}
        ],
        description:null,
        name:"CriteriaPolicy",
        seeAlso:[],
        type:"type"
    },
    "method:CubeGrid.setEditValues":{
        ref:"method:CubeGrid.setEditValues",
        flags:"",
        description:" Set the temporary edit values for some cell in the cubeGrid.<br>\n Note that only the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty','this.valueProperty')} of the object passed in\n will be displayed in the cell.\n",
        name:"setEditValues",
        seeAlso:[],
        params:[
            {description:"2 element array of the form                   <code>[rowNum,colNum]</code> indicating the record being edited", 
             optional:false,name:"cell", defaultValue:null, type:"Array of numbers"},
            {description:"New values for the record", optional:false, name:"values", defaultValue:null, 
             type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "method:ListGrid.cellMouseUp":{
        ref:"method:ListGrid.cellMouseUp",
        flags:"",
        description:" Called when a cell receives a mouseup event.\n\n",
        name:"cellMouseUp",
        seeAlso:[],
        params:[
            {description:"Record object (retrieved from getCellRecord(rowNum, colNum))", 
             optional:false,name:"record", defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:ResultSet.useClientSorting":{
        ref:"attr:ResultSet.useClientSorting",
        flags:"IRWA",
        description:"Whether to sort data locally when all records matching the current criteria have been\n cached.\n <P>\n This may need to be disabled if client-side sort order differs from server-side sort\n order in a way that affects functionality or is surprising.",
        name:"useClientSorting",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "group:error handling":{
        ref:"group:error handling",
        refs:[],
        name:"error handling",
        seeAlso:[],
        type:"group"
    },
    "classMethod:Class.getSuperClass":{
        ref:"classMethod:Class.getSuperClass",
        flags:"",
        description:"	\n	Gets a pointer to the superClass' Class object.\n\n",
        name:"getSuperClass",
        seeAlso:[],
        returns:{description:"Class object for superclass.", type:"Class"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "method:Button.removeFromRadioGroup":{
        ref:"method:Button.removeFromRadioGroup",
        flags:"",
        description:" Remove this widget from the specified mutually exclusive selection group with the ID\n passed in.\n No-op's if this widget is not a member of the groupID passed in.\n If no groupID is passed in, defaults to removing from whatever radioGroup this widget\n is a member of.\n",
        name:"removeFromRadioGroup",
        seeAlso:[],
        params:[
            {description:"- optional radio group ID (to ensure the widget is removed                                        from the appropriate group.", 
             optional:true,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["state", "event handling"]
    },
    "group:loadUITag":{
        ref:"group:loadUITag",
        title:"&lt;isomorphic:loadUI&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n This tag converts SmartClient UI components declaratively specified in an XML \"UI\" file to\n JavaScript for execution in the browser.\n <p>\n The XML->JS translation works just like with ${isc.DocUtils.linkForRef('group:xmlTag')}, except the XML is read\n from an external file instead of from the body of the tag.\n <p>\n Note that this JSP tag must be surrounded by &lt;SCRIPT&gt; tags in the JSP because it\n generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be\n used in a JSP that is included from your main page in order to create separate\n cacheability.  For example:<pre>\n     &lt;SCRIPT SRC=\"myUIDefinitions.jsp\"&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>name</b><br>\n <i>value format</i>: String - name of UI file to load (minus extension)<br>\n <i>default value</i>: NONE\n <p>\n This attribute specifies the name of the file that contains the UI components to translate.\n UI files are located in <code>[webroot]/shared/ui</code> by default.  This location is\n changeable in <code>[webroot]/WEB-INF/classes/server.properties</code> by setting the config\n parameter <code>project.ui</code> to the directory where your UI files are located.   \n We recommend that for prototying, at least, you use the default directory.\n <p>\n For example:\n <pre>\n &lt;isomorphic:loadUI name=\"test\"/&gt;\n </pre>\n Would translate declarative XML in the file <code>[webroot]/shared/ui/test.ui.xml</code> to\n JavaScript and output the results into the JSP output stream at the location of the tag.",
        name:"loadUITag",
        seeAlso:[
            {ref:"group:xmlTag", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "attr:Toolbar.canReorderItems":{
        ref:"attr:Toolbar.canReorderItems",
        flags:"IRWA",
        description:"If true, items can be reordered by dragging on them.",
        name:"canReorderItems",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["dragndrop"]
    },
    "group:hovers":{
        ref:"group:hovers",
        refs:["method:ListGridField.hoverHTML", "method:Canvas.handleHover", "method:Canvas.updateHover", 
         "method:Canvas.hoverHidden","method:Canvas.hover", "method:Canvas.getHoverHTML", "attr:ListGrid.canHover", 
         "attr:ListGrid.showHover","attr:ListGrid.hoverStyle", "attr:Canvas.prompt", "attr:Canvas.canHover", 
         "attr:Canvas.hoverDelay","attr:Canvas.showHover", "attr:Canvas.hoverWidth", "attr:Canvas.hoverHeight", 
         "attr:Canvas.hoverAlign","attr:Canvas.hoverVAlign", "attr:Canvas.hoverWrap", "attr:Canvas.hoverStyle", 
         "attr:Canvas.hoverOpacity","attr:Canvas.hoverMoveWithMouse"],
        name:"hovers",
        seeAlso:[],
        type:"group"
    },
    "attr:SelectItem.controlStyle":{
        ref:"attr:SelectItem.controlStyle",
        flags:"IRW",
        description:"Base CSS class name for a form item's control box (surrounds text box and picker).\n <P>\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"controlStyle",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"selectItemControl\", [IRA]",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "attr:FormItem.showValueIconOnly":{
        ref:"attr:FormItem.showValueIconOnly",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is set, this property may be set to show the valueIcon\n only and prevent the standard form item element or text from displaying",
        name:"showValueIconOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "method:Array.containsAll":{
        ref:"method:Array.containsAll",
        flags:"",
        description:" Return whether this list contains all the item in the specified list.\n\n",
        name:"containsAll",
        seeAlso:[],
        params:[
            {description:"items to look for", optional:false, name:"list", defaultValue:null, 
             type:"List"}
        ],
        returns:{description:"whether all items were found", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "method:CubeGrid.facetMoved":{
        ref:"method:CubeGrid.facetMoved",
        flags:"",
        description:" Notification fired when a facet is moved.\n \n",
        name:"facetMoved",
        seeAlso:[
            {ref:"method:CubeGrid.facetRemoved", description:null},
            {ref:"method:CubeGrid.facetAdded", description:"<br><i>methodType</i>  handler"}
        ],
        params:[
            {description:"facetId which moved", optional:false, name:"facetId", defaultValue:null, 
             type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:TabSet.scrollerSrc":{
        ref:"attr:TabSet.scrollerSrc",
        flags:"IR",
        description:"If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and \n ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, this property governs the base\n URL for the tab bar back and forward scroller button images.\n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, \n ${isc.DocUtils.linkForRef('attr:TabSet.scrollerHSrc')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerVSrc')} will be used instead.\n <P>\n To get the path to the image to display, this base URL will be modified as follows:\n <ul>\n <li>If appropriate a state suffix of <code>\"Down\"</code> or <code>\"Disabled\"</code> will be\n     appended.</li>\n <li>The ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} for this tabSet will be appended.</li>\n <li>A suffix of <code>\"forward\"</code> or <code>\"back\"</code> will be appended for the\n     forward or backward scrolling button.</li>\n </ul>\n For example - if the scrollerSrc is set to <code>\"[SKIN]scroll.gif\"</code>, the image\n displayed for the back-scroller button on a tabSet with <code>tabBarPosition</code> set to\n \"top\" and <code>symmetricScroller</code> set to false would be one of \n <code>\"[SKIN]scroll_top_back.gif\"</code>, <code>\"[SKIN]scroll_Down_top_back.gif\"</code>,\n and <code>\"[SKIN]scroll_Disabled_top_back.gif\"</code>.\n <P>\n Note that for best results the media should be sized to match the scroller button sizes, \n determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}.",
        name:"scrollerSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricScroller", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/scroll.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "attr:Scrollbar.trackEndHeight":{
        ref:"attr:Scrollbar.trackEndHeight",
        flags:"IRWA",
        description:"The minimum pixel height of the track end segments (if enabled with showTrackEnds).",
        name:"trackEndHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"12",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "method:SelectItem.dataArrived":{
        ref:"method:SelectItem.dataArrived",
        flags:"",
        description:" If this item is showing a dataBound pickList, this notification method will be fired \n when new data arrives from the server.\n",
        name:"dataArrived",
        seeAlso:[],
        params:[
            {description:"index of first row returned by the server", optional:false, name:"startRow", 
             defaultValue:null,type:"number"},
            {description:"index of last row returned by the server", optional:false, name:"endRow", 
             defaultValue:null,type:"number"},
            {description:"pointer this pickList's data", optional:false, name:"data", defaultValue:null, 
             type:"ResultSet"}
        ],
        type:"method",
        definingClass:"class:SelectItem"
    },
    "classMethod:WebService.get":{
        ref:"classMethod:WebService.get",
        flags:"",
        description:" Retrieve a WebService object by the targetNamespace declared on the &lt;wsdl:definitions&gt;\n element in the WSDL file from which the WebService was derived.\n\n",
        name:"get",
        seeAlso:[],
        params:[
            {description:"uri from the \"targetNamespace\" attribute of the &lt;wsdl:definitions&gt; element in the WSDL file", 
             optional:false,name:"serviceNamespace", defaultValue:null, type:"String"}
        ],
        returns:{description:"the requested WebService, or null if not loaded", type:"WebService"},
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('wsdlBinding')}"],
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:ListGrid.setBodyOverflow":{
        ref:"method:ListGrid.setBodyOverflow",
        flags:"A",
        description:" Update the ${isc.DocUtils.linkForRef('attr:ListGrid.bodyOverflow','bodyOverflow')} for this listGrid.\n",
        name:"setBodyOverflow",
        seeAlso:[],
        params:[
            {description:"new overflow setting for the body", optional:false, name:"overflow", 
             defaultValue:null,type:"Overflow"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "classMethod:EventHandler.shiftKeyDown":{
        ref:"classMethod:EventHandler.shiftKeyDown",
        flags:"",
        description:"			Return true if the shift key is being held down.\n			Note that this is only set reliably for keyboard events.\n\n",
        name:"shiftKeyDown",
        seeAlso:[],
        returns:{description:"true == shift key is down", type:"boolean"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["keyboardEvents"]
    },
    "attr:Canvas.autoDraw":{
        ref:"attr:Canvas.autoDraw",
        flags:"IR",
        description:"If true, this canvas will draw itself immediately after it is created.\n <P>\n <b>Note</b> that you should turn this OFF for any canvases that are provided as children\n of other canvases, or they will draw initially, then be clear()ed and drawn again when\n added as children, causing a large performance penalty.  \n <P>\n For example, the following code is incorrect and will cause extra draw()s:\n <P>\n <pre>\n     isc.Layout.create({\n         members : [\n             isc.ListGrid.create()\n         ]\n     });\n </pre>\n It should instead be:\n <pre>\n     isc.Layout.create({\n         members : [\n             isc.ListGrid.create(<b>{ autoDraw: false }</b>)\n         ]\n     });\n </pre>\n In order to avoid unwanted autoDrawing systematically, it is recommend that you call\n ${isc.DocUtils.linkForRef('classMethod:isc.setAutoDraw','isc.setAutoDraw(false)')} immediately after SmartClient is loaded\n and before any components are created, then set <code>autoDraw:true</code> or call\n draw() explicitly to draw components.  \n <P>\n Otherwise, if the global setting for autoDraw remains <code>true</code>, you must set\n autoDraw:false, as shown above, on every component in your application that \n should not immediately draw: all Canvas children, Layout members, Window items, Tab\n panes, etc, however deeply nested.  Forgetting to set autoDraw:false will result in one\n more clear()s - these are reported on the Results tab of the \n ${isc.DocUtils.linkForRef('group:debugging','Developer Console')}, and can be tracked to individual components by\n using the \"clears\" log category in the Developer Console.",
        name:"autoDraw",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('autodraw')}"],
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "method:WebService.getFetchDS":{
        ref:"method:WebService.getFetchDS",
        flags:"",
        description:" Retrieve a DataSource that provides read-only access to records returned by a web\n service operation.\n <P>\n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBound Components')} can be bound to the returned\n DataSource, and the ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} method can be invoked\n to retrieve data from the web service.\n <P>\n The returned DataSource is only capable of the \"fetch\" \n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')}, not \"update\", \"add\" or\n \"remove\".  To create a DataSource capable of full read-write access, use\n ${isc.DocUtils.linkForRef('attr:DataSource.operationBindings')} with the\n ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} property set to associate each\n DataSource operation with a web service operation. \n\n",
        name:"getFetchDS",
        seeAlso:[],
        params:[
            {description:"name of the web service operation to invoke to fetch                               records", 
             optional:false,name:"operationName", defaultValue:null, type:"String"},
            {description:"tag or type name of the XML element to be returned as                               DataSource records", 
             optional:false,name:"resultType", defaultValue:null, type:"String"},
            {description:"Optional additional properties for the operationType:\"fetch\" \n ${isc.DocUtils.linkForRef('class:OperationBinding','operationBinding')} which this method automatically creates.  This\n can be used to set properties such as ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} or\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')}", 
             optional:true,name:"operationBindingProperties", defaultValue:null, 
             type:"OperationBinding Properties"}
        ],
        type:"method",
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:TabSet.tabSelected":{
        ref:"method:TabSet.tabSelected",
        flags:"",
        description:"  Notification fired when a tab is selected. Note that this will only fire if \n this tabSet is drawn. If a tab is selected before <code>TabSet.draw()</code> \n is called, the <code>tabSelected()</code> notificaiton will fire on \n <code>draw()</code>\n",
        name:"tabSelected",
        seeAlso:[],
        params:[
            {description:"number of the tab", optional:false, name:"tabNum", defaultValue:null, 
             type:"number"},
            {description:"pane for this tab", optional:false, name:"tabPane", defaultValue:null, 
             type:"Canvas"},
            {description:"id of the tab", optional:false, name:"ID", defaultValue:null, type:"id"},
            {description:"the tab object (not tab button instance)", optional:false, name:"tab", 
             defaultValue:null,type:"tab"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "group:Items":{
        ref:"group:Items",
        refs:[],
        name:"Items",
        seeAlso:[],
        type:"group"
    },
    "attr:Snapbar.showDown":{
        ref:"attr:Snapbar.showDown",
        flags:"IRW",
        description:"Snapbars show mouse-down styling.",
        name:"showDown",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar"
    },
    "method:FormItem.setValue":{
        ref:"method:FormItem.setValue",
        flags:"",
        description:" Set the value of the form item to the value passed in\n <p>\n NOTE: for valueMap'd items, newValue should be data value not displayed value\n",
        name:"setValue",
        seeAlso:[],
        params:[
            {description:"value to set the element to", optional:false, name:"newValue", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"class:FormItem"
    },
    "classMethod:isc.echo":{
        ref:"classMethod:isc.echo",
        flags:"",
        description:" Same as ${isc.DocUtils.linkForRef('method:Log.echo')}.\n\n",
        name:"echo",
        seeAlso:[],
        params:[
            {description:"object to echo", optional:false, name:"value", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "method:StatefulCanvas.getTitle":{
        ref:"method:StatefulCanvas.getTitle",
        flags:"A",
        description:" Return the title - text/HTML drawn inside the component.\n <p>\n Default is to simply return this.title.\n",
        name:"getTitle",
        seeAlso:[],
        returns:{description:"HTML for the title", type:"string"},
        type:"method",
        definingClass:"class:StatefulCanvas"
    },
    "method:ListGridField.hoverHTML":{
        ref:"method:ListGridField.hoverHTML",
        flags:"",
        description:" StringMethod override point for returning HTML to be shown in hovers over cells in the\n column described by this field.\n <P>\n Called only when ${isc.DocUtils.linkForRef('attr:ListGrid.canHover','canHover')} and ${isc.DocUtils.linkForRef('attr:ListGrid.showHover','showHover')}\n are both true.\n <P>\n The value of \"this\" within the method will by the ${isc.DocUtils.linkForRef('object:ListGridField','field definition')}.\n\n",
        name:"hoverHTML",
        seeAlso:[],
        params:[
            {description:"record being hovered over", optional:false, name:"record", defaultValue:null, 
             type:"ListGridRecord"},
            {description:"value of the cell being hovered over", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"row number where hover occurred", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column number where hover occurred", optional:false, name:"colNum", 
             defaultValue:null,type:"number"},
            {description:"ListGrid this field is a part of", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        returns:{description:"HTML to show in the hover", type:"HTML"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('valueHoverTips')}"],
        definingClass:"object:ListGridField",
        groups:["hovers"]
    },
    "attr:Button.iconOrientation":{
        flags:"IR",
        type:"attr",
        ref:"attr:Button.iconOrientation",
        description:"If this button is showing an icon should it appear to the left or right of the title?\n valid options are <code>\"left\"</code> and <code>\"right\"</code>.",
        name:"iconOrientation",
        setter:["setIconOrientation"],
        valueType:"string",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonIcons')}"],
        defaultValue:"\"left\"",
        groups:["buttonIcon"],
        definingClass:"class:Button"
    },
    "attr:FacetValue.cellAlign":{
        ref:"attr:FacetValue.cellAlign",
        flags:"IR",
        description:"default alignment of cells (in the body) for this facetValue",
        name:"cellAlign",
        seeAlso:[],
        valueType:"alignEnum",
        defaultValue:"facet.cellAlign",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "group:images":{
        ref:"group:images",
        refs:["method:Canvas.getImgURL", "method:Canvas.imgHTML", "method:Canvas.getImage", 
         "method:Canvas.setImage","classMethod:Page.setAppImgDir", "classMethod:Page.getAppImgDir", 
         "classMethod:Page.setAppFilesDir","classMethod:Page.getAppFilesDir", "classMethod:Page.setSkinDir", 
         "classMethod:Page.getSkinDir","classMethod:Page.getSkinImgDir", "classMethod:Page.getImgURL", "classMethod:Page.getURL", 
         "classMethod:Page.loadStyleSheet","attr:ListGrid.skinImgDir", "attr:Splitbar.skinImgDir", "attr:ImgSplitbar.skinImgDir", 
         "attr:Canvas.appImgDir","attr:Canvas.skinImgDir", "attr:TabSet.skinImgDir"],
        description:"Refering to and loading images.\n <P>\n The two main URL settings relevent to loading images are:<br>\n * imgDir (where application-specific images live)<br>\n * skinImgDir (where system supplied images live)<br>",
        name:"images",
        seeAlso:[],
        type:"group"
    },
    "attr:StatefulCanvas.overCanvasDefaults":{
        ref:"attr:StatefulCanvas.overCanvasDefaults",
        flags:"IRWA",
        description:"Default properties for this widgets ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas','overCanvas')}. To modify\n these defaults, use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}",
        name:"overCanvasDefaults",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"{ ... }",
        type:"attr",
        definingClass:"class:StatefulCanvas"
    },
    "method:ComboBoxItem.filterClientPickListData":{
        ref:"method:ComboBoxItem.filterClientPickListData",
        flags:"",
        description:" Returns the data to display in the pick list.\n <P>\n The default implementation applies the criteria returned by \n ${isc.DocUtils.linkForRef('method:PickList.getPickListFilterCriteria')} to the data returned by\n ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.  A record passes the filter if it has a\n matching value for all fields in the criteria object.  Matching is performed according\n to ${isc.DocUtils.linkForRef('attr:ComboBoxItem.textMatchStyle')}.\n <P>\n If ${isc.DocUtils.linkForRef('attr:PickList.showAllOptions')} is set, all values are shown, with matching values\n shown below a ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator')}.\n\n",
        name:"filterClientPickListData",
        seeAlso:[],
        returns:{description:"array of record objects to display in the pickList", 
         type:"Array of ListGridRecord"},
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "attr:Tree.data":{
        ref:"attr:Tree.data",
        flags:"IR",
        description:"Optional initial data for the tree. How this data is interpreted depends on this tree's\n ${isc.DocUtils.linkForRef('attr:Tree.modelType')}.\n <P>\n If <code>modelType</code> is <code>\"parent\"</code>, the list that you provide will be passed \n to ${isc.DocUtils.linkForRef('method:Tree.linkNodes')}, integrating the nodes into the tree.\n <p>\n In this case the root node must be supplied separately via ${isc.DocUtils.linkForRef('attr:Tree.root')}, or you may instead provide\n the <code>id</code> of the root node via ${isc.DocUtils.linkForRef('attr:Tree.rootValue')}.  So for example, to create\n this tree:\n <pre>\n foo\n   bar\n zoo\n </pre>\n with modelType:\"parent\", you can do this:\n <pre>\n Tree.create({\n   root: {id: \"root\"},\n   data: [\n     {name: \"foo\", id: \"foo\", parentId: \"root\"},\n     {name: \"bar\", id: \"bar\", parentId: \"foo\"},\n     {name: \"zoo\", id: \"zoo\", parentId: \"root\"}\n });\n </pre>\n Or this:\n <pre>\n Tree.create({\n   rootValue: \"root\",\n   data: [\n     {name: \"foo\", id: \"foo\", parentId: \"root\"},\n     {name: \"bar\", id: \"bar\", parentId: \"foo\"},\n     {name: \"zoo\", id: \"zoo\", parentId: \"root\"}\n });\n </pre>\n Specifying the root node explicitly allows you to give it a name, changing the way path\n derivation works (see ${isc.DocUtils.linkForRef('attr:Tree.root')} for more on naming the root node).\n <P>\n For <code>modelType:\"children\"</code> trees, the data passed in will be assumed to be an \n array of children the tree's root node.",
        name:"data",
        seeAlso:[
            {ref:"attr:Tree.modelType", description:null},
            {ref:"object:TreeNode", description:null}
        ],
        valueType:"List of TreeNode",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "method:DynamicForm.getItems":{
        ref:"method:DynamicForm.getItems",
        flags:"",
        description:" Method to retrieve the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. \n\n",
        name:"getItems",
        seeAlso:[],
        params:[
            {description:"list of new items to show in the form", optional:false, name:"itemList", 
             defaultValue:null,type:"Array of objects"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["elements"]
    },
    "classAttr:RPCManager.showPrompt":{
        ref:"classAttr:RPCManager.showPrompt",
        flags:"RW",
        description:"If set to <code>true</code>, the RPCManager will block the UI with a modal dialog containing\n the text from RPCManager.defaultPrompt (or the per-RPCRequest override) until the RPC to the\n server completes.\n <br><br>\n If set to <code>false</code>, the RPC happens transparently, allowing the user to continue\n interacting with the UI",
        name:"showPrompt",
        seeAlso:[
            {ref:"classAttr:RPCManager.defaultPrompt", description:null},
            {ref:"attr:RPCRequest.showPrompt", description:null}
        ],
        valueType:"boolean",
        defaultValue:"RPCManager.showPrompt",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["rpcPrompt"]
    },
    "attr:Canvas.extraSpace":{
        ref:"attr:Canvas.extraSpace",
        flags:"IR",
        description:"When this Canvas is included as a member in a Layout, extra blank space that should be left\n after this member in a Layout.",
        name:"extraSpace",
        seeAlso:[
            {ref:"class:LayoutSpacer", description:"for more control"}
        ],
        valueType:"positiveInteger",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["layoutMember"]
    },
    "classMethod:isc.propertyDefined":{
        ref:"classMethod:isc.propertyDefined",
        flags:"",
        description:"\n	Is some property specified on the object passed in?  This will return true if \n  <code>object[propertyName]</code> has ever been set to any value, and not deleted.<br>\n  May return true even if <code>object[propertyName] === undefined</code> if the property \n  is present on the object and has been explicitly set to undefined.\n\n",
        name:"propertyDefined",
        seeAlso:[],
        params:[
            {description:"object to get properties from", optional:false, name:"object", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"values of all properties", type:"object[]"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:TreeGrid.parentAlreadyContainsChildMessage":{
        ref:"attr:TreeGrid.parentAlreadyContainsChildMessage",
        flags:"IR",
        description:"Message displayed when user attempts to drag a node into a parent that already contains\n a child of the same name.",
        name:"parentAlreadyContainsChildMessage",
        seeAlso:[
            {ref:"attr:TreeGrid.canDragRecordsOut", description:null},
            {ref:"attr:TreeGrid.canAcceptDroppedRecords", description:null},
            {ref:"attr:TreeGrid.canReorderRecords", description:null}
        ],
        valueType:"String",
        defaultValue:"\"This item already contains a child item with that name.\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["i18nMessages"]
    },
    "method:TabSet.removeTabs":{
        ref:"method:TabSet.removeTabs",
        flags:"A",
        description:" Remove one or more tabs.  The pane(s) associated with the removed tab(s) is automatically\n destroyed when you call this method.\n\n",
        name:"removeTabs",
        seeAlso:[
            {ref:"method:TabSet.removeTab", description:null}
        ],
        params:[
            {description:"list of tabs, tabIDs, or tab numbers", optional:false, name:"tabs", 
             defaultValue:null,type:"Tab | ID | number"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:StretchImgButton.showFocused":{
        ref:"attr:StretchImgButton.showFocused",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  If\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is <code>true</code>, the <b><code>\"over\"</code></b>\n will be used to indicate focus. Otherwise a separate <b><code>\"focused\"</code></b> state\n will be used.",
        name:"showFocused",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "attr:RPCResponse.clientContext":{
        ref:"attr:RPCResponse.clientContext",
        flags:"R",
        description:"The ${isc.DocUtils.linkForRef('attr:RPCRequest.clientContext')} object as set on the ${isc.DocUtils.linkForRef('class:RPCRequest')}.",
        name:"clientContext",
        seeAlso:[
            {ref:"attr:RPCRequest.clientContext", description:null}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCResponse"
    },
    "method:TreeGrid.getIcon":{
        ref:"method:TreeGrid.getIcon",
        flags:"",
        description:" Get the appropriate icon for a node.\n <P>\n By default icons are derived from ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} and ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')}.\n Custom icons for for individual nodes can be overriden by setting the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}\n on a node.\n <p>\n If you want to suppress icons altogether, provide an override of this method that simply\n returns null.\n <p> \n Note that the full icon URL will be derived by applying ${isc.DocUtils.linkForRef('method:Canvas.getImgURL')} to the\n value returned from this method.\n\n",
        name:"getIcon",
        seeAlso:[],
        params:[
            {description:"tree node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"URL for icon to show for this node", type:"URL"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "classMethod:isc.getIconPageRect":{
        ref:"classMethod:isc.getIconPageRect",
        flags:"A",
        description:"  Returns the size / position of an icon on the page as an array of coordinates.\n",
        name:"getIconPageRect",
        seeAlso:[],
        params:[
            {description:"icon definition for the icon you want to determine the                               position of (defaults to first icon in this.icons).", 
             optional:false,name:"icon", defaultValue:null, type:"object"}
        ],
        returns:{description:"four element array representing the Left, Top, Width, and Height of                      the icon in px.", 
         type:"array"},
        type:"method",
        definingClass:"class:isc"
    },
    "classAttr:Date.shortMonthNames":{
        ref:"classAttr:Date.shortMonthNames",
        flags:"IRWA",
        description:"This property may be set to an array of names of months.<br>\n For example:\n <pre>\n [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n </pre>\n The appropriate month name will then be returned from ${isc.DocUtils.linkForRef('method:Date.getShortMonthName')}, \n and may be used whenever  SmartClient components display month-names (for example in the \n ${isc.DocUtils.linkForRef('class:DateItem','DateItem class')}).",
        name:"shortMonthNames",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"null",
        type:"classAttr",
        definingClass:"class:Date",
        groups:["i18nMessages"]
    },
    "method:DynamicForm.rememberValues":{
        ref:"method:DynamicForm.rememberValues",
        flags:"",
        description:"			Make a snapshot of the current set of values, so we can reset to them later.\n			Creates a new object, then adds all non-method properties of values\n			to the new object.  Use <code>resetValues()</code> to revert to these values.\n          Note that this method is automatically called when the values for this form are\n          set programmatically via a call to ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.\n\n",
        name:"rememberValues",
        seeAlso:[],
        returns:{description:"copy of current form values", type:"object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:SelectItem.pickButtonHeight":{
        ref:"attr:SelectItem.pickButtonHeight",
        deprecated:"As of SmartClient version 5.5, pickButtonHeight has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconHeight')}.",
        flags:"IRWA",
        description:"How large should the pick button be rendered?",
        name:"pickButtonHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:RPCRequest.clientContext":{
        ref:"attr:RPCRequest.clientContext",
        flags:"IRW",
        description:"An object to be held onto for the duration of the RPC turnaround to track\n application-specific context.\n <br>\n When an RPC turnaround completes, the <code>clientContext</code> is available in the\n ${isc.DocUtils.linkForRef('type:RPCCallback')} as <code>rpcResponse.clientContext</code>.  The\n <code>clientContext</code> is never sent to the server.\n <br>\n The <code>clientContext</code> is useful for holding onto state that will be used when the\n ${isc.DocUtils.linkForRef('type:RPCCallback')} fires, such as the name of a component that will receive the\n returned data.",
        name:"clientContext",
        seeAlso:[
            {ref:"attr:RPCResponse.clientContext", description:null}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:Applet.alt":{
        ref:"attr:Applet.alt",
        flags:"IR",
        description:"This text is displayed if the browser understands the tag used for the applet html element,\n  but can't run the applet for some reason.",
        name:"alt",
        seeAlso:[
            {ref:"attr:Applet.altHTML", description:null},
            {ref:"attr:Applet.useTag", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:Tree.autoOpenRoot":{
        ref:"attr:Tree.autoOpenRoot",
        flags:"IRW",
        description:"If true, the root node is automatically opened when the tree is created or\n ${isc.DocUtils.linkForRef('method:Tree.setRoot')} is called.",
        name:"autoOpenRoot",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Tree"
    },
    "class:NativeCheckboxItem":{
        methods:[],
        ref:"class:NativeCheckboxItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:NativeCheckboxItem.showLabel"],
        description:"A checkbox for manipulating 2-valued fields based on the native checkbox element.",
        name:"NativeCheckboxItem",
        seeAlso:[],
        type:"class"
    },
    "attr:CubeGrid.canSelectHeaders":{
        ref:"attr:CubeGrid.canSelectHeaders",
        flags:"IRW",
        description:"Determines whether row or column facetValue headers can be selected.",
        name:"canSelectHeaders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "method:GridRenderer.rowClick":{
        ref:"method:GridRenderer.rowClick",
        flags:"A",
        description:" Called when a row receives a click event.\n\n",
        name:"rowClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:DateChooser.prevMonthIconWidth":{
        ref:"attr:DateChooser.prevMonthIconWidth",
        flags:"IRW",
        description:"Width of the icon for the previous month button",
        name:"prevMonthIconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:StretchImgButton.setIconOrientation":{
        ref:"method:StretchImgButton.setIconOrientation",
        flags:"",
        description:" Changes the orientation of the icon relative to the text of the button.\n\n",
        name:"setIconOrientation",
        seeAlso:[],
        params:[
            {description:"The new orientation of the icon relative to the text of the button.", 
             optional:false,name:"orientation", defaultValue:null, type:"\"left\" or \"right\""}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "method:Canvas.getSnapEdge":{
        ref:"method:Canvas.getSnapEdge",
        flags:"",
        description:" Return the snapEdge value of this object\n",
        name:"getSnapEdge",
        seeAlso:[],
        returns:{description:"snapEdge", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "group:draw":{
        ref:"group:draw",
        refs:[],
        name:"draw",
        seeAlso:[],
        type:"group"
    },
    "method:Layout.getMembers":{
        ref:"method:Layout.getMembers",
        flags:"",
        description:" Get the Array of members.<br><br>\n \n NOTE: the returned array should not be modified.\n",
        name:"getMembers",
        seeAlso:[],
        returns:{description:"the Array of members", type:"Array"},
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:DataSource.pluralTitle":{
        ref:"attr:DataSource.pluralTitle",
        flags:"IRW",
        description:"User-visible plural name for this DataSource.\n <P>\n For example, for the supplyItem DataSource, \"Supply Items\".\n <P>\n Defaults to (<code>dataSource.title</code> or <code>dataSource.ID</code>) + \"s\".",
        name:"pluralTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"dataSource.ID",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["titles"]
    },
    "attr:RowSpacerItem.showTitle":{
        ref:"attr:RowSpacerItem.showTitle",
        flags:"IRW",
        description:"we never show a separate title cell for separators",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RowSpacerItem",
        groups:["appearance"]
    },
    "classMethod:History.setHistoryTitle":{
        ref:"classMethod:History.setHistoryTitle",
        flags:"",
        description:"\n Sets the title associated with all history entries.  This is the string that appears in the\n history drop-down.  If left unset, this default to the history id that is passed into\n ${isc.DocUtils.linkForRef('classMethod:History.addHistoryEntry')}.\n <p>\n Note: Currently, this works in IE only.  You may call this method in all other browsers,\n but it will not change what's displayed in the history drop-down.\n\n",
        name:"setHistoryTitle",
        seeAlso:[],
        params:[
            {description:"The title to show in the history drop-down.", optional:false, name:"title", 
             defaultValue:null,type:"String"}
        ],
        type:"classMethod",
        definingClass:"class:History"
    },
    "method:FormItem.keyPress":{
        ref:"method:FormItem.keyPress",
        flags:"",
        description:" StringMethod fired when the user presses a key while focused in this form item.\n",
        name:"keyPress",
        seeAlso:[],
        params:[
            {description:"Item over which the keypress occurred", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"},
            {description:"Pointer to the item's form", optional:false, name:"form", defaultValue:null, 
             type:"DynamicForm"},
            {description:"Name of the key pressed (Example: <code>\"A\"</code>, <code>\"Enter\"</code>)", 
             optional:false,name:"keyName", defaultValue:null, type:"KeyName"},
            {description:"If this was a character key, this is the numeric value for the character", 
             optional:false,name:"characterValue", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "attr:ListGridField.canGroupBy":{
        ref:"attr:ListGridField.canGroupBy",
        flags:"IRW",
        description:"Determines whether this field will be groupable in the header context menu.",
        name:"canGroupBy",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "attr:RPCRequest.prompt":{
        ref:"attr:RPCRequest.prompt",
        flags:"IRW",
        description:"Overrides RPCManager.defaultPrompt for this request only.  If you're using queuing, note that the\n prompt string from the first request in the queue is the one that is shown to the user.",
        name:"prompt",
        seeAlso:[
            {ref:"classAttr:RPCManager.defaultPrompt", description:null},
            {ref:"classAttr:RPCManager.showPrompt", description:null},
            {ref:"classAttr:RPCManager.promptStyle", description:null},
            {ref:"classAttr:RPCManager.promptCursor", description:null},
            {ref:"attr:RPCRequest.showPrompt", description:null},
            {ref:"attr:RPCRequest.promptStyle", description:null},
            {ref:"attr:RPCRequest.promptCursor", description:null}
        ],
        valueType:"string",
        defaultValue:"RPCManager.defaultPrompt",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["rpcPrompt"]
    },
    "group:drag":{
        ref:"group:drag",
        refs:["type:DragDataAction"],
        name:"drag",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgButton.showDisabled":{
        ref:"attr:ImgButton.showDisabled",
        flags:"IRW",
        description:"Should we visibly change state when disabled?",
        name:"showDisabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "classAttr:Dialog.PASSWORD_TITLE":{
        ref:"classAttr:Dialog.PASSWORD_TITLE",
        flags:"IRW",
        description:"Default title for the \"password\" field in the dialog displayed by \n ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.",
        name:"PASSWORD_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Password\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:ComboBoxItem.pickerIconWidth":{
        ref:"attr:ComboBoxItem.pickerIconWidth",
        flags:"IRW",
        description:"Default the picker icon to a fixed with (15px).",
        name:"pickerIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"15",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:Snapbar.showClosedGrip":{
        ref:"attr:Snapbar.showClosedGrip",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether the grip image\n displayed should show the <code>\"Closed\"</code> state when the ${isc.DocUtils.linkForRef('attr:Splitbar.target')} \n is hidden.",
        name:"showClosedGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar",
        groups:["grip"]
    },
    "attr:Canvas.canDragReposition":{
        ref:"attr:Canvas.canDragReposition",
        flags:"IRWA",
        description:"Indicates whether this widget can be moved by a user of your application by simply\n      dragging with the mouse.",
        name:"canDragReposition",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragEffects')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:ImgButton.showFocused":{
        ref:"attr:ImgButton.showFocused",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  If\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is <code>true</code>, the <b><code>\"over\"</code></b>\n will be used to indicate focus. Otherwise a separate <b><code>\"focused\"</code></b> state\n will be used.",
        name:"showFocused",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "method:ImgButton.removeFromRadioGroup":{
        ref:"method:ImgButton.removeFromRadioGroup",
        flags:"",
        description:" Remove this widget from the specified mutually exclusive selection group with the ID\n passed in.\n No-op's if this widget is not a member of the groupID passed in.\n If no groupID is passed in, defaults to removing from whatever radioGroup this widget\n is a member of.\n",
        name:"removeFromRadioGroup",
        seeAlso:[],
        params:[
            {description:"- optional radio group ID (to ensure the widget is removed                                        from the appropriate group.", 
             optional:true,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state", "event handling"]
    },
    "method:Layout.getDropPosition":{
        ref:"method:Layout.getDropPosition",
        flags:"A",
        description:"\n Get the position a new member would be dropped.  This drop position switches in the\n middle of each member, and both edges (before beginning, after end) are legal drop positions\n <p>\n Use this method to obtain the drop position for e.g. a custom drop handler.\n\n",
        name:"getDropPosition",
        seeAlso:[],
        returns:{description:"the position a new member would be dropped", type:"integer"},
        type:"method",
        definingClass:"class:Layout"
    },
    "method:GridRenderer.cellHoverHTML":{
        ref:"method:GridRenderer.cellHoverHTML",
        flags:"A",
        description:" StringMethod to dynamically assemble an HTML string to show in a hover window over the\n appropriate cell/record when this.canHover and this.showHover are both true.\n Called when the mouse hovers over a cell.\n\n",
        name:"cellHoverHTML",
        seeAlso:[
            {ref:"attr:GridRenderer.canHover", description:null},
            {ref:"attr:GridRenderer.showHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"the html to be shown inside the hover for this cell", type:"html"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:String.endsWith":{
        ref:"method:String.endsWith",
        flags:"",
        description:"			Returns true if this string ends with another string.\n",
        name:"endsWith",
        seeAlso:[],
        params:[
            {description:"other string to check", optional:false, name:"substring", defaultValue:null, 
             type:"String"}
        ],
        returns:{description:"true == this string ends with substring", type:"boolean"},
        type:"method",
        definingClass:"class:String",
        groups:["stringProcessing"]
    },
    "group:positioning":{
        ref:"group:positioning",
        refs:["method:Button.setAlign", "method:Button.setVAlign", "method:Canvas.setSnapTo", 
         "method:Canvas.getSnapTo","method:Canvas.setSnapEdge", "method:Canvas.getSnapEdge", "method:Canvas.setRect", 
         "method:Canvas.getLeft","method:Canvas.setLeft", "method:Canvas.getTop", "method:Canvas.setTop", 
         "method:Canvas.getRight","method:Canvas.getBottom", "method:Canvas.getScrollLeft", "method:Canvas.getScrollTop", 
         "method:Canvas.setPageLeft","method:Canvas.setPageTop", "method:Canvas.getPageLeft", "method:Canvas.getPageTop", 
         "method:Canvas.getPageRight","method:Canvas.getPageBottom", "method:Canvas.containsPoint", 
         "method:Canvas.visibleAtPoint","method:Canvas.intersects", "method:Canvas.intersectsRect", "method:Canvas.containsEvent", 
         "method:Canvas.getOffsetX","method:Canvas.getOffsetY", "method:Canvas.moveBy", "method:Canvas.moveTo", 
         "method:Canvas.getVSnapOrigin","method:Canvas.getHSnapOrigin", "method:Canvas.setOverflow", "attr:Label.align", 
         "attr:Label.valign","attr:Canvas.htmlElement", "attr:Canvas.htmlPosition", "attr:Canvas.position", 
         "attr:Canvas.left","attr:Canvas.top", "attr:ImgTab.align", "type:Positioning"],
        description:"Horizontal and vertical location on the page",
        name:"positioning",
        seeAlso:[],
        type:"group"
    },
    "attr:Layout.showDragPlaceHolder":{
        ref:"attr:Layout.showDragPlaceHolder",
        flags:"IRW",
        description:"If set to true, when a member is dragged out of layout, a visible placeholder canvas \n will be displayed in place of the dragged widget for the duration of the drag and drop\n interaction.",
        name:"showDragPlaceHolder",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragMove')}"],
        definingClass:"class:Layout",
        groups:["dragdrop"]
    },
    "method:CubeGrid.selectAllCells":{
        ref:"method:CubeGrid.selectAllCells",
        flags:"",
        description:"\n  select all cells\n\n      <br><i>methodType</i> action\n",
        name:"selectAllCells",
        seeAlso:[],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:DataSource.ID":{
        ref:"attr:DataSource.ID",
        flags:"IR",
        description:"Unique identifier for this DataSource.  Required for all DataSources.\n\n DataSources will make themselves available as JavaScript globals under the same name\n as their ID only if <code>addGlobalId</code> is set.",
        name:"ID",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["identity"]
    },
    "attr:TabSet.tabBar":{
        ref:"attr:TabSet.tabBar",
        flags:"R",
        description:"TabBar for this TabSet, an instance of ${isc.DocUtils.linkForRef('class:TabBar')}.",
        name:"tabBar",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:Canvas.getScrollHeight":{
        ref:"method:Canvas.getScrollHeight",
        flags:"A",
        description:"			Returns the scrollable height of the widget's contents, including children, ignoring\n          clipping.\n",
        name:"getScrollHeight",
        seeAlso:[],
        returns:{description:"height of the element that can scroll", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Canvas.addChild":{
        ref:"method:Canvas.addChild",
        flags:"",
        description:" Adds newChild as a child of this widget, set up a named object reference (i.e., this[name])\n to the new widget if name argument is provided, and draw the child if this widget has been\n drawn already.\n <P>\n If newChild has a parent it will be removed from it. If it has a master, it will be detached\n from it if the master is a child of a different parent. If newChild has peers, they'll be\n added to this widget as children as well.\n\n",
        name:"addChild",
        seeAlso:[],
        params:[
            {description:"new child canvas to add", optional:false, name:"newChild", defaultValue:null, 
             type:"canvas"},
            {description:"name to assign to child (eg: this[name] == child)", optional:true, 
             name:"name",defaultValue:null, type:"string"},
            {description:"if false, child will not automatically be drawn (only                                          for advanced use)", 
             optional:true,name:"autoDraw", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"the new child, or null if it couldn't be added", type:"canvas"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:Applet.objectCodeBase":{
        ref:"attr:Applet.objectCodeBase",
        flags:"IR",
        description:"This attribute is used only with useTag: \"object\".  In combination with \n  ${isc.DocUtils.linkForRef('attr:Applet.classID')} this tag specifies the minimum JVM version required to view\n  this applet and the URL from which the JVM can be downloaded.\n  <p>\n  The default settings match the default behavior of the &lt;applet&gt; tag which requires JVM\n  1.3 or higher.\n  <p>\n  The default objectCodeBase is: \"http://java.sun.com/products/plugin/1.3/jinstall-13-win32.cab#Version=1,3,0,0\"\n  <p>\n  For notes on this feature see: <a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie' onclick=\"window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie');return false;\">http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie</a>",
        name:"objectCodeBase",
        seeAlso:[
            {ref:"attr:Applet.classID", description:null}
        ],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:ListGridField.iconOrientation":{
        ref:"attr:ListGridField.iconOrientation",
        flags:"IR",
        description:"If this field is showing an icon, should it appear to the left or right of the title?<br>\n Valid options are <code>\"left\"</code> or <code>\"right\"</code>",
        name:"iconOrientation",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"string",
        defaultValue:"\"left\"",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "attr:TabSet.showTabScroller":{
        ref:"attr:TabSet.showTabScroller",
        flags:"IR",
        description:"If there is not enough space to display all the tab-buttons in this tabSet, should \n scroller buttons be displayed to allow access to tabs that are clipped?",
        name:"showTabScroller",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "attr:OperationBinding.dataTransport":{
        ref:"attr:OperationBinding.dataTransport",
        flags:"IR",
        description:"Transport to use for this operation.  Defaults to ${isc.DocUtils.linkForRef('attr:DataSource.dataTransport')}, which in\n turn defaults to ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  This would typically only be set to\n enable \"scriptInclude\" transport for contacting ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} web\n services hosted on servers other than the origin server.\n <p>\n When using the \"scriptInclude\" transport, be sure to set ${isc.DocUtils.linkForRef('attr:DataSource.callbackParam')} or\n ${isc.DocUtils.linkForRef('attr:OperationBinding.callbackParam')} to match the name of the query parameter name expected\n by your JSON service provider.",
        name:"dataTransport",
        seeAlso:[
            {ref:"type:RPCTransport", description:null},
            {ref:"attr:DataSource.callbackParam", description:null}
        ],
        valueType:"RPCTransport",
        defaultValue:"RPCManager.defaultTransport",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:FormItem.imageURLPrefix":{
        ref:"attr:FormItem.imageURLPrefix",
        flags:"IRWA",
        description:"Prefix to apply to the beginning of any ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} when determining the\n URL for the image.\n Will not be applied if the <code>valueIcon</code> URL is absolute.",
        name:"imageURLPrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:SelectItem.pickButtonWidth":{
        ref:"attr:SelectItem.pickButtonWidth",
        deprecated:"As of SmartClient version 5.5, pickButtonWidth has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconWidth')}.",
        flags:"IRWA",
        description:"How large should the pick button be rendered?",
        name:"pickButtonWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:DataBoundComponent.dataSource":{
        flags:"IRW",
        type:"attr",
        ref:"attr:DataBoundComponent.dataSource",
        description:"The DataSource that this component should bind to for default fields and for performing\n ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.\n <P>\n Can be specified as either a DataSource instance or the String ID of a DataSource.",
        name:"dataSource",
        setter:["setDataSource"],
        valueType:"DataSource or ID",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('dataSourceFields')}"],
        defaultValue:"null",
        groups:["databinding"],
        definingClass:"interface:DataBoundComponent"
    },
    "attr:ToolStrip.resizeBarClass":{
        ref:"attr:ToolStrip.resizeBarClass",
        flags:"IRW",
        description:"Customized resizeBar with typical appearance for a ToolStrip",
        name:"resizeBarClass",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"ToolStripResizer\"",
        type:"attr",
        definingClass:"class:ToolStrip"
    },
    "method:CubeGrid.getFacetsHavingSelection":{
        ref:"method:CubeGrid.getFacetsHavingSelection",
        flags:"",
        description:"\n  return the list of facets that have any selection in their headers\n\n  <br><i>methodType</i> getter\n",
        name:"getFacetsHavingSelection",
        seeAlso:[],
        returns:{description:"list of facets that have any selection in their headers", type:"Array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:Canvas.getParentElements":{
        ref:"method:Canvas.getParentElements",
        flags:"A",
        description:"      Returns an array of object references to all ancestors of this widget in the containment\n      hierarchy, starting with the direct parent and ending with the top element.\n",
        name:"getParentElements",
        seeAlso:[],
        returns:{description:"array of parentElements, closest first; empty array if no parentElements", 
         type:"array"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "method:Canvas.sendToBack":{
        ref:"method:Canvas.sendToBack",
        flags:"",
        description:" Puts this widget at the bottom of the stacking order, so it appears behind all other\n widgets in the same parent.\n",
        name:"sendToBack",
        seeAlso:[],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('layer')}"],
        definingClass:"class:Canvas",
        groups:["zIndex"]
    },
    "group:flags":{
        ref:"group:flags",
        title:"Flag Abbreviations",
        refs:[],
        description:"<ul>\n <li> <b>I</b>: property can be initialized (provided in constructor block)\n <li> <b>R</b>: property can be read.  If a getter method exists, it must be called.\n <li> <b>W</b>: property can be written to after initialization.  If a setter method\n exists, it must be called.  If no setter method exists,\n ${isc.DocUtils.linkForRef('method:Class.setProperty','setProperty()')} must be called.\n </ul>",
        name:"flags",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.hiliteFacetValue":{
        ref:"method:CubeGrid.hiliteFacetValue",
        flags:"",
        description:"\n      apply a hilite to all cells corresponding to a facetValue.\n\n      <br><i>methodType</i> action\n",
        name:"hiliteFacetValue",
        seeAlso:[],
        params:[
            {description:"facet ID", optional:false, name:"facetID", defaultValue:null, type:"string"},
            {description:"facet value ID", optional:false, name:"facetValueID", defaultValue:null, 
             type:"string"},
            {description:"hilite ID", optional:false, name:"hiliteID", defaultValue:null, type:"string"}
        ],
        returns:{description:"true if the cells were successfully hilited.", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "group:docViewerHelp":{
        ref:"group:docViewerHelp",
        title:"SmartClient Reference Overview",
        refs:[],
        description:"Welcome to the SmartClient Reference.  Click on a topic in the tree on the left to show\n documentation in this pane or type some search terms into the search box in the upper left\n and hit Enter.\n <p>\n To bring back this help page, click the blue question mark in the upper right corner.",
        name:"docViewerHelp",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setMargin":{
        ref:"method:Canvas.setMargin",
        flags:"",
        description:" Set the CSS Margin, in pixels, for this component.  Margin provides blank space outside of\n the border.\n <P>\n This property sets the same thickness of margin on every side.  Differing per-side\n margins can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.\n <P>\n Note that the specified size of the widget will be the size <b>including</b> the margin\n thickness on each side.\n \n",
        name:"setMargin",
        seeAlso:[],
        params:[
            {description:"new margin in pixels", optional:false, name:"margin", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "method:ListGrid.getToggleFreezeText":{
        ref:"method:ListGrid.getToggleFreezeText",
        flags:"",
        description:" If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and\n ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the\n title for the menu item to toggle whether a field is frozen or unfrozen.<br>\n Default implementation returns <code>\"Freeze \"</code> or <code>\"Unfreeze \"</code> + the field's\n title.\n",
        name:"getToggleFreezeText",
        seeAlso:[],
        params:[
            {description:"field to get the menu item title for", optional:false, name:"field", 
             defaultValue:null,type:"ListGridField"}
        ],
        returns:{description:"Title to show in the menu item", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "classAttr:Dialog.LOGIN_ERROR_MESSAGE":{
        ref:"classAttr:Dialog.LOGIN_ERROR_MESSAGE",
        flags:"IRW",
        description:"Default error message displayed on failed login in the dialog shown by \n ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.",
        name:"LOGIN_ERROR_MESSAGE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Invalid username or password\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "method:Canvas.containsEvent":{
        ref:"method:Canvas.containsEvent",
        flags:"",
        description:"			Return true if the last event's mouse coordinates are within the bounds of this component.\n		NOTE: Z-ordering is not considered for the purposes of this test.  If the coordinate you're\n		testing is occluded by other component, but the X,Y coordiates are still within the bounds\n		of that component, this method will return true.\n\n",
        name:"containsEvent",
        seeAlso:[],
        returns:{description:"true if the event occurred within the bounds of this component", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["events", "positioning"]
    },
    "attr:ListGridField.showDisabledIcon":{
        ref:"attr:ListGridField.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "type:SendMethod":{
        ref:"type:SendMethod",
        values:[
            {description:"GET method (regular URL encoding)", value:"\"GET\""},
            {description:"POST method (form field encoding)", value:"\"POST\""}
        ],
        description:null,
        name:"SendMethod",
        seeAlso:[],
        type:"type",
        groups:["communication"]
    },
    "method:ResultSet.getCriteria":{
        ref:"method:ResultSet.getCriteria",
        flags:"",
        description:" Get the current criteria for this ResultSet.\n",
        name:"getCriteria",
        seeAlso:[],
        returns:{description:"current criteria", type:"Criteria"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:Chart.getValue":{
        ref:"method:Chart.getValue",
        flags:"",
        description:" Lookup a data value by the set of matching facetValues expressed as a\n ${isc.DocUtils.linkForRef('type:FacetValueMap')}.  Automatically handles the ${isc.DocUtils.linkForRef('attr:Chart.data','inlinedFacet')}, if any.\n <P>\n This method is designed to be called by a concrete Chart implementation.\n <P>\n As a special case, if ${isc.DocUtils.linkForRef('attr:Chart.data')} is a single Object and the only facet is\n ${isc.DocUtils.linkForRef('attr:Chart.data','inlined')}, any value can be used as the single facetId required.  For example, a\n legal FacetValueMap in this case would be {inlined:\"west\"}.\n\n",
        name:"getValue",
        seeAlso:[],
        params:[
            {description:"set of facetValues describing the data value to retrieve", optional:false, 
             name:"criteria",defaultValue:null, type:"FacetValueMap"}
        ],
        returns:{description:"matching value from the dataset, or null if no value exists", type:"any"},
        type:"method",
        definingClass:"interface:Chart"
    },
    "group:strutsIntegration":{
        ref:"group:strutsIntegration",
        title:"Integration with Struts",
        treeLocation:["Concepts"],
        refs:[],
        description:"<b>Overview of SmartClient integration with Struts and other popular server-side\n frameworks.</b>\n <p>\n Current and upcoming server-side frameworks solve a lot of problems endemic to the past\n generation of web applications.  Piles of JSPs and Servlets have been replaced by MVC and\n other paradigms that enhance developer productivity.  Unfortunately the end-user\n presentation remains vanilla HTML.  SmartClient solves this problem by providing rich\n databindable components. SmartClient was designed to integrate cleanly with existing\n server-side frameworks.  Because SmartClient components only require an HTML context to\n render, they can be used with any server-side frameworks that use HTML for presentation.\n <p>\n SmartClient provides a rich UI by doing more work on the client (browser) rather than\n sending every user action to the server for re-rendering.  Instead of doing page transitions\n to redraw the whole page, SmartClient sends RPC (Remote Procedure Call) requests (or AJAX\n requests) to the server while the UI allows the user to continue interacting with the\n system.  Current server-side frameworks, on the other hand are typically designed around\n page transitions - for example in Struts user actions are typically mapped to URLs that\n dispatch through a central servlet and ultimately return new HTML to be rendered by the\n browser.  The problem with page transitions is that they destroy client-side state and\n introduce client-server latency (and generally use more bandwidth since HTML is sent over\n the wire rather than just data) - essentially destroying a large part of the Rich\n Internet Application (RIA) experience.\n <p>\n Fortunately, there's a way to get the best of both worlds - to leverage the power of your\n favorite server-side framework and combine it with the SmartClient UI.  There are several\n approaches to integrating SmartClient into an existing framework:\n <p>\n <u><b>Plug-replacing HTML components with SmartClient components</b></u>\n <p>\n SmartClient components can be instructed to draw at page load time using by specifying\n <code>position: \"relative\"</code> at construction time.  This enables you to replace any\n chunk of HTML with a SmartClient component - the new component simply inserts its HTML in\n the page flow during page load.  This is the easiest integration option - you get a better\n UI with minimal work.  The downside is that you don't get the full power of a rich client\n because most user actions will still trigger a page transition.\n <p>\n <u><b>Eliminating page transitions</b></u>\n <p>\n Most SmartClient components can accept new data (or even dynamically pre-fetch and expire\n data) without needing to be recreated.  For example - let's say you want to draw a grid on a\n page.  In a traditional server-side-rendered application the server would generate all of\n the html with a \"next 20 records\" and \"previous 20 records\" buttons. When the user wants to\n see the next set of data, he clicks one of the buttons and the server replaces the entire\n page with a new grid that contains the next/previous 20 records.  In a SmartClient\n application, you would create a databound ListGrid.  Based on its configuration this grid\n will fetch the first N (say 20) records and display a scrollbar for the user to scroll\n through the data.  When the user scrolls off the last cached record the ListGrid\n automatically sends an RPC to the server asking for the next 20 records.  This RPC (fetch)\n is performed without destroying the page the user is currently looking at - it just happens\n seamlessly in the background.  If the user now scrolls back to the first 20 records -\n they're already cached in the grid, so no fetch is performed.  Of course, in a real world\n application, it's typical that a page has hundreds of components and in a server-side-only\n rendering all of them need to be rebuilt by the server and resent to the client when a piece\n of data in just one needs to be updated.  SmartClient components can intelligently update\n just their data without the need to redraw the whole page.\n <p>\n The plug-replacement strategy listed above gives us a SmartClient component in place of a\n raw HTML rendering.  Now we need to databind that component so that actions like scrolling a\n grid or validating a form don't cause a page transition.  The SmartClient RPC mechanism has\n a default actionURL that's configurable by the end user.  This allows you to funnel all RPC\n requests through a central dispatcher like the Struts Action servlet.\n SmartClient RPCs are just HTTP requests with XML payloads that can be accessed using the\n provided Java APIs (RPCManager Java class and associated classes).  On the other hand you\n can decide to have the SmartClient RPCs work out of band of something like the Action\n servlet - the choice is up to you.  Usually funnelling through the Action servlet makes\n sense if you have a need to centrally capture all requests - for example for later playback\n during load or QA testing.\n <p>\n Here's what the code would look like to accomplish the funneling (for example with the\n Struts Action servlet):\n <pre>\n On the client - the following line of code forces all SmartClient RPC requests to make\n requests to the /smartClientRPC.do URL that would then be intercepted by the Action servlet -\n assuming you have the standard *.do mapping for it in your web.xml.\n\n RPCManager.addProperties({ actionURL: \"/smartClientRPC.do\"});\n\n On the server, you would then create an action mapping for the \"/smartClientRPC\" path\n that you would forward to a custom Action handler.  For example you could have this in your\n struts config.xml:\n\n &lt;action path=\"/smartClientRPC\" type=\"com.your.company.name.SmartClientRPCAction\"/&gt;\n \n In your Action execute() method you have access to the HttpServletRequest and\n HttpServletResponse objects - which is all you need to instantiate the RPCManager class\n that's part of the SmartClient server-side SDK that you can then use to obtain the RPC\n payload.  Like this:\n\n RPCManager rpc = new RPCManager(request, response);\n Object data = rpc.getData();\n rpc.send(\"here's a response\");\n </pre> \n Given this configuration, all databound components will send their requests through this\n pipeline and you need only write the code to respond to e.g. a given ListGrid's request to\n get the next 25 rows.  For custom RPCs, you can specify actionURLs in the RPCRequest itself\n that override the RPCManager default that you can then use to target different actions - in\n other words you need not dispatch all SmartClient RPCs through a single Struts Action.\n <p>\n <u><b>Struts examples in the SDK</b></u>\n <p>\n The SDK contains a simple example of doing form validation without incurring a page\n transition. These examples also show how to populate e.g. field names using the struts-bean\n taglib and how to set validation errors using the standard Struts Validation plugin.\n Point your browser to <a href='/examples/struts/forms' onclick=\"window.open('/examples/struts/forms');return false;\">/examples/struts/forms</a> in the SmartClient SDK to take a\n look.",
        name:"strutsIntegration",
        seeAlso:[],
        type:"group"
    },
    "attr:StatefulCanvas.valign":{
        ref:"attr:StatefulCanvas.valign",
        flags:"IRW",
        description:"Vertical alignment of this component's title.",
        name:"valign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["appearance"]
    },
    "class:SelectOtherItem":{
        methods:[],
        exampleConfig:"SelectOtherItem.xml",
        ref:"class:SelectOtherItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:SelectOtherItem.separatorTitle", "attr:SelectOtherItem.otherTitle", 
         "attr:SelectOtherItem.selectOtherPrompt"],
        description:"FormItem that shows a list of options, plus an \"Other...\" option that allows them to enter\n another value.",
        name:"SelectOtherItem",
        seeAlso:[],
        type:"class"
    },
    "method:Button.isSelected":{
        ref:"method:Button.isSelected",
        flags:"",
        description:" Find out if this object is selected\n",
        name:"isSelected",
        seeAlso:[],
        returns:{description:null, type:"boolean"},
        type:"method",
        definingClass:"class:Button",
        groups:["state"]
    },
    "attr:Canvas.hoverOpacity":{
        ref:"attr:Canvas.hoverOpacity",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, should the hover canvas be shown with opacity\n other than 100?",
        name:"hoverOpacity",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customHovers')}"],
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:ListGrid.fetchRelatedData":{
        ref:"method:ListGrid.fetchRelatedData",
        flags:"",
        description:" Based on the relationship between the DataSource this component is bound to and the\n DataSource specified as the \"schema\" argument, call fetchData() to retrieve records in this\n grid that are related to the passed-in record.\n <P>\n Relationships between DataSources are declared via ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')}.\n <P>\n For example, given a DataSource \"orders\" and another DataSource \"orderItems\", where\n \"orderItems\" declared a field \"orderId\" pointing to the primary key field of the \"orders\"\n DataSource\", there is a set of records from the \"orderItems\" DataSource related to any given\n record from the \"order\" DataSource.  If  this component were bound to \"orderItems\" and a\n record from the \"orders\"\n\n",
        name:"fetchRelatedData",
        seeAlso:[],
        params:[
            {description:"DataSource record", optional:false, name:"record", defaultValue:null, 
             type:"ListGridRecord"},
            {description:"schema of the DataSource record, or                            DataBoundComponent already bound to that schema", 
             optional:false,name:"schema", defaultValue:null, type:"Canvas or DataSource or ID"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:Button.actionType":{
        flags:"IRW",
        getter:["getActionType"],
        type:"attr",
        ref:"attr:Button.actionType",
        description:"Behavior on state changes -- BUTTON, RADIO or CHECKBOX",
        name:"actionType",
        setter:["setActionType"],
        valueType:"SelectionType",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonRadioToggle')}"],
        defaultValue:"\"button\"",
        groups:["state", "event handling"],
        definingClass:"class:Button"
    },
    "attr:ListGridField.headerTitleStyle":{
        ref:"attr:ListGridField.headerTitleStyle",
        flags:"IRW",
        description:"Custom titleStyle to apply to this field's header button instead of \n ${isc.DocUtils.linkForRef('attr:ListGrid.headerTitleStyle')}.<br>\n Note that this will typically only have an effect if \n ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')} is set to ${isc.DocUtils.linkForRef('class:StretchImgButton')} or a subclass \n thereof.",
        name:"headerTitleStyle",
        seeAlso:[],
        valueType:"cssClass",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "attr:ToolbarItem.endRow":{
        ref:"attr:ToolbarItem.endRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["appearance"]
    },
    "attr:TreeGrid.fileImage":{
        ref:"attr:TreeGrid.fileImage",
        deprecated:"as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.nodeIcon')}",
        flags:"IRW",
        description:"The filename of the default icon for all leaf nodes in this treeGrid. Use the\n node.icon property (null by default) to specify a custom image for an individual\n node.",
        name:"fileImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]file.gif\"",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "method:Canvas.setStyleName":{
        ref:"method:Canvas.setStyleName",
        flags:"A",
        description:" Sets the CSS class for this widget\n",
        name:"setStyleName",
        seeAlso:[],
        params:[
            {description:"new CSS class name (must be defined previously)", optional:false, 
             name:"newStyle",defaultValue:null, type:"string"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('styles')}"],
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "attr:DSRequest.endRow":{
        ref:"attr:DSRequest.endRow",
        flags:"IR",
        description:"End row of requested results, used only with fetch operations.\n <p>\n Note that startRow and endRow are zero-based, so startRow: 0, endRow: 1 is a request\n for the first two records.",
        name:"endRow",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest",
        groups:["paging"]
    },
    "method:ViewLoader.handleError":{
        ref:"method:ViewLoader.handleError",
        flags:"",
        description:"\n This method is called when a transport error occurs.  Typically, this is the result of the\n server returning an HTTP error code such as 404 - document not found.  You can inspect the\n RPCResponse object for the reasons for the error and take appropriate action.  Typical\n properties to look at are rpcResponse.status, and rpcResponse.httpResponseCode.\n <p>\n This method is called from the response processing pipeline.  If you want to provide your\n own HTML response as the result of the error, you can do\n so by setting rpcResponse.data to your HTML string.  Returning false from this method\n suppresses any further response handling.  The default implementation of this method causes\n an error message to be logged to the Developer Console and sets the HTML to the error\n string.\n\n",
        name:"handleError",
        seeAlso:[],
        params:[
            {description:"The RPCRequest that was made to the server", optional:false, 
             name:"rpcRequest",defaultValue:null, type:"RPCRequest"},
            {description:"The RPCResponse that was received", optional:false, name:"rpcResponse", 
             defaultValue:null,type:"RPCResponse"}
        ],
        returns:{description:"false to suppress further response processing", type:"boolean"},
        type:"method",
        definingClass:"class:ViewLoader",
        groups:["contentLoading"]
    },
    "method:ValuesManager.setValues":{
        ref:"method:ValuesManager.setValues",
        flags:"",
        description:"  Set the values for this values manager.  Member forms will be updated as required by\n  this change.\n  Note that pre-existant values in other fields are cleared out by this.\n \n",
        name:"setValues",
        seeAlso:[],
        params:[
            {description:"new set of values for this values manager.", optional:false, name:"values", 
             defaultValue:null,type:"object"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:DataSource.useParentFieldOrder":{
        ref:"attr:DataSource.useParentFieldOrder",
        flags:"IR",
        description:"For a DataSource that inherits ${isc.DocUtils.linkForRef('attr:DataSource.fields')} from another DataSource \n (via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}), indicates that the parent's field order should be used\n instead of the order of the fields as declared in this DataSource.  New fields, if any,\n are placed at the end.",
        name:"useParentFieldOrder",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('schemaChaining')}"],
        definingClass:"class:DataSource",
        groups:["fields"]
    },
    "classMethod:FileLoader.cacheModules":{
        ref:"classMethod:FileLoader.cacheModules",
        flags:"",
        description:"\n Caches the specified SmartClient modules.\n\n",
        name:"cacheModules",
        seeAlso:[],
        params:[
            {description:"List of SmartClient modules to cache.  This can either be a                                  string with comma separated module names or an Array of module\n                                  names.", 
             optional:false,name:"modules", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified                                      modules has been cached.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:MenuItem.checked":{
        ref:"attr:MenuItem.checked",
        flags:"IR",
        description:"If true, this item displays a standard checkmark image to the left of its title.  You\n can set the checkmark image URL by setting ${isc.DocUtils.linkForRef('attr:Menu.checkmarkImage')}.\n <p>\n If you need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.checkIf')} instead.",
        name:"checked",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"],
        definingClass:"object:MenuItem",
        groups:["menuIcons"]
    },
    "group:minimize":{
        ref:"group:minimize",
        refs:["attr:Window.minimizeHeight"],
        name:"minimize",
        seeAlso:[],
        type:"group"
    },
    "attr:StretchImgButton.iconSpacing":{
        ref:"attr:StretchImgButton.iconSpacing",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"iconSpacing",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:Chart.subTitle":{
        ref:"attr:Chart.subTitle",
        flags:"IR",
        description:"Subtitle for the chart as a whole, typically used to describe fixed facet values (such as\n \"for Q1, 1999\").\n <P>\n The subTitle should appear under the title in less emphasized text.",
        name:"subTitle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "attr:ListGrid.confirmDiscardEdits":{
        ref:"attr:ListGrid.confirmDiscardEdits",
        flags:"IRW",
        description:"For editable listGrids, outstanding unsaved edits when the user performs a new filter\n or sort will be discarded. This flag determines whether we should display a confirmation\n dialog with options to save or discard the edits, or cancel the action in this case.",
        name:"confirmDiscardEdits",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:ListGrid.styleName":{
        ref:"attr:ListGrid.styleName",
        flags:"IRW",
        description:"Default CSS class",
        name:"styleName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"listGrid\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "method:ListGrid.validateRow":{
        ref:"method:ListGrid.validateRow",
        flags:"",
        description:" Validate the current set of edit values for the row in question.\n Called when the user moves to a new edit row, or when an edited record is to be saved if\n client side validation is enabled for this grid.<br>\n This method may also be called directly to perform row level validation at any time.\n",
        name:"validateRow",
        seeAlso:[],
        params:[
            {description:"index of row to be validated.", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"index of row to be validated.", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"returns true if validation was successful (no errors encountered), false                    otherwise.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:ListGrid.showAllRecords":{
        ref:"attr:ListGrid.showAllRecords",
        flags:"IRW",
        description:"Whether all rows should be drawn all at once, or only rows visible in the viewport.<br><br>\n\n Drawing all rows causes longer initial rendering time, but allows smoother vertical scrolling.\n With a very large number of rows, showAllRows will become too slow.",
        name:"showAllRecords",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('autofitRows')}"],
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "attr:ListGridField.filterOnKeypress":{
        ref:"attr:ListGridField.filterOnKeypress",
        flags:"IRWA",
        description:"If we're showing the filterEditor (listGrid.showFilterEditor is true), this property \n determines whether this list should be filtered every time the user edits the value of\n the filter editor for this field.",
        name:"filterOnKeypress",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "attr:RichTextItem.showTitle":{
        ref:"attr:RichTextItem.showTitle",
        flags:"IR",
        description:"Don't show the title for rich text items by default",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RichTextItem"
    },
    "method:Canvas.setRight":{
        ref:"method:Canvas.setRight",
        flags:"",
        description:" Resizes the widget horizontally to position its right side at the specified coordinate.\n <P>\n NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()\n instead\n",
        name:"setRight",
        seeAlso:[],
        params:[
            {description:"new right coordinate", optional:false, name:"right", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:ListGrid.getEditorType":{
        ref:"method:ListGrid.getEditorType",
        flags:"A",
        description:"\n  Returns the form item type (Class Name) to display for a field when it is displayed in the \n  editor while editing some record.<br>\n  Default implementation will return field.editorType if specified.\n  If not specified, the default form item for the appropriate data type will be displayed\n  - can be overriden to provide a different specific form item type for some field based on \n  the record/field data.\n\n",
        name:"getEditorType",
        seeAlso:[],
        params:[
            {description:"field definition field for which we need a valueMap", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"current edit values for the record (may be null, if editing a                               new record)", 
             optional:false,name:"values", defaultValue:null, type:"object"}
        ],
        returns:{description:"form item type for the edit field", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:ToolStrip.styleName":{
        flags:"IRW",
        type:"attr",
        ref:"attr:ToolStrip.styleName",
        description:"The CSS class applied to this widget as a whole.",
        name:"styleName",
        setter:["canvas.setStyleName"],
        valueType:"CSSClassName",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('styles')}"],
        defaultValue:"\"toolStrip\"",
        groups:["appearance"],
        definingClass:"class:ToolStrip"
    },
    "attr:DateChooser.prevYearIconWidth":{
        ref:"attr:DateChooser.prevYearIconWidth",
        flags:"IRW",
        description:"Width of the icon for the previous year button",
        name:"prevYearIconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"14",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:ListGrid.validateCell":{
        ref:"method:ListGrid.validateCell",
        flags:"",
        description:" Validate the current edit value for the cell in question.  Called when the user moves to a\n new edit cell if ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell')} is true.<br>\n This method may also be called directly to perform cell level validation at any time.\n",
        name:"validateCell",
        seeAlso:[],
        params:[
            {description:"index of row to be validated.", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"field name (or column index) of field to be validated", optional:false, 
             name:"fieldName",defaultValue:null, type:"string | number"}
        ],
        returns:{description:"returns true if validation was successful (no errors encountered), false                    otherwise.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "class:GridRenderer":{
        methods:["method:GridRenderer.getTotalRows", "method:GridRenderer.setColumnWidth", 
         "method:GridRenderer.setColumnWidths","method:GridRenderer.getCellStyle", "method:GridRenderer.cellIsEnabled", 
         "method:GridRenderer.refreshCellStyle","method:GridRenderer.refreshCell", "method:GridRenderer.refreshRow", 
         "method:GridRenderer.getEventRow","method:GridRenderer.getEventColumn", "method:GridRenderer.getNearestRowToEvent", 
         "method:GridRenderer.getNearestColToEvent","method:GridRenderer.getVisibleRows", "method:GridRenderer.getDrawnRows", 
         "method:GridRenderer.getCellRecord","method:GridRenderer.getCellValue", "method:GridRenderer.getBaseStyle", 
         "method:GridRenderer.getCellCSSText","method:GridRenderer.getRowHeight", "method:GridRenderer.getRowSpan", 
         "method:GridRenderer.cellOut","method:GridRenderer.cellOver", "method:GridRenderer.rowOut", 
         "method:GridRenderer.rowOver","method:GridRenderer.cellContextClick", "method:GridRenderer.rowContextClick", 
         "method:GridRenderer.cellMouseDown","method:GridRenderer.rowMouseDown", "method:GridRenderer.cellMouseUp", 
         "method:GridRenderer.rowMouseUp","method:GridRenderer.cellClick", "method:GridRenderer.cellDoubleClick", 
         "method:GridRenderer.rowClick","method:GridRenderer.rowDoubleClick", "method:GridRenderer.cellHover", 
         "method:GridRenderer.rowHover","method:GridRenderer.cellHoverHTML", "method:GridRenderer.selectionChanged", 
         "method:GridRenderer.cellSelectionChanged"],
        ref:"class:GridRenderer",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:GridRenderer.totalRows", "attr:GridRenderer.showAllRows", 
         "attr:GridRenderer.showAllColumns","attr:GridRenderer.scrollRedrawDelay", "attr:GridRenderer.drawAheadRatio", 
         "attr:GridRenderer.quickDrawAheadRatio","attr:GridRenderer.cellHeight", "attr:GridRenderer.fixedRowHeights", 
         "attr:GridRenderer.fixedColumnWidths","attr:GridRenderer.autoFit", "attr:GridRenderer.wrapCells", 
         "attr:GridRenderer.cellPadding","attr:GridRenderer.canSelectOnRightMouse", "attr:GridRenderer.canHover", 
         "attr:GridRenderer.showHover","attr:GridRenderer.baseStyle", "attr:GridRenderer.alternateRowStyles", 
         "attr:GridRenderer.alternateRowFrequency","attr:GridRenderer.emptyCellValue", "attr:GridRenderer.showEmptyMessage", 
         "attr:GridRenderer.emptyMessage","attr:GridRenderer.emptyMessageTableStyle", "attr:GridRenderer.emptyMessageStyle", 
         "attr:GridRenderer.fastCellUpdates","attr:GridRenderer.snapToCells", "attr:GridRenderer.snapInsideBorder", 
         "attr:GridRenderer.recordCustomStyleProperty"],
        description:"A flexible, high-speed table that offers consistent cross-platform sizing, clipping, and events.",
        name:"GridRenderer",
        seeAlso:[],
        type:"class"
    },
    "classMethod:isc.echoLeaf":{
        ref:"classMethod:isc.echoLeaf",
        flags:"",
        description:" Same as ${isc.DocUtils.linkForRef('method:Log.echoLeaf')}.\n\n",
        name:"echoLeaf",
        seeAlso:[],
        params:[
            {description:"object to echo", optional:false, name:"value", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "classMethod:isc.echoAll":{
        ref:"classMethod:isc.echoAll",
        flags:"",
        description:" Same as ${isc.DocUtils.linkForRef('method:Log.echoAll')}.\n\n",
        name:"echoAll",
        seeAlso:[],
        params:[
            {description:"object to echo", optional:false, name:"value", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:RichTextEditor.formatControls":{
        ref:"attr:RichTextEditor.formatControls",
        flags:"IRA",
        description:"Default text formatting control group. Consists of an array of \n  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,\n  include <code>\"formatControls\"</code> in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array",
        name:"formatControls",
        seeAlso:[],
        valueType:"array",
        defaultValue:"[\"alignLeft\", \"alignRight\", \"alignCenter\", \"justify\"]",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "group:contents":{
        ref:"group:contents",
        refs:["attr:HTMLFlow.contents", "attr:HTMLFlow.dynamicContents", "attr:Label.contents", 
         "attr:Label.dynamicContents","attr:Canvas.contents", "attr:Canvas.dynamicContents"],
        name:"contents",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.escapeKeyEditAction":{
        ref:"attr:ListGrid.escapeKeyEditAction",
        flags:"IRWA",
        description:"What to do when a user hits escape while editing a cell:<ul>\n <li>\"cancel\": close the editor and discard the current set of edit values\n <li>\"done\": just close the editor (the edit is complete, but the edited values are retained).\n </ul>\n Note that if this.autoSaveEdits is true, this may cause a save of the current edit values",
        name:"escapeKeyEditAction",
        seeAlso:[],
        valueType:"EscapeKeyEditAction",
        defaultValue:"\"cancel\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "classAttr:ValidatorTypes.isInteger":{
        ref:"classAttr:ValidatorTypes.isInteger",
        flags:"IR",
        description:"Tests whether the value for this field is a whole number.  If \n  <code>validator.convertToInteger</code> is true, float values will be converted \n  into integers and validation will succeed.",
        name:"isInteger",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:StretchImg.src":{
        ref:"attr:StretchImg.src",
        flags:"IRW",
        description:"The base URL for the image. \n <P>\n As with ${isc.DocUtils.linkForRef('attr:Img.src')}, the ${isc.DocUtils.linkForRef('type:State')} of the component is added to this URL.  Then,\n the image segment name as specified by ${isc.DocUtils.linkForRef('attr:StretchImg.items')} is added.\n <P>\n For example, for a stretchImg in \"Over\" state with a <code>src</code> of \"button.png\"\n and a segment name of \"stretch\", the resulting URL would be \"button_Over_stretch.png\".",
        name:"src",
        seeAlso:[
            {ref:"attr:StretchImg.hSrc", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "method:Label.setIcon":{
        ref:"method:Label.setIcon",
        flags:"",
        description:" Change the icon being shown next to the title text.\n",
        name:"setIcon",
        seeAlso:[],
        params:[
            {description:"URL of new icon", optional:false, name:"icon", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "method:ValuesManager.setMemberValues":{
        ref:"method:ValuesManager.setMemberValues",
        flags:"",
        description:"  Set the values for some member form\n",
        name:"setMemberValues",
        seeAlso:[],
        params:[
            {description:"ID of the member form to update", optional:false, name:"ID", 
             defaultValue:null,type:"string"},
            {description:"new values for the form", optional:false, name:"values", defaultValue:null, 
             type:"object"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:HeaderItem.showTitle":{
        ref:"attr:HeaderItem.showTitle",
        flags:"IRW",
        description:"Don't show a separate title cell for headers",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "attr:DataSource.tableName":{
        ref:"attr:DataSource.tableName",
        flags:"IR",
        description:"For DataSources using the ${isc.DocUtils.linkForRef('group:sqlDataSource','SmartClient SQL engine')} for\n persistence, what database table name to use.  The default is to use the DataSource ID\n as the table name.",
        name:"tableName",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["serverDataIntegration"],
        requiresModules:["SCServer"]
    },
    "attr:Canvas.canSelectText":{
        ref:"attr:Canvas.canSelectText",
        flags:"IRWA",
        description:"Whether native drag selection of contained text is allowed within this Canvas.\n <P>\n Note that setting this property to <code>false</code> will not avoid text selection\n which is initiated outside this Canvas from continuing into this Canvas, even if text\n selection began in another Canvas.",
        name:"canSelectText",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["events"]
    },
    "attr:Canvas.disabled":{
        flags:"IRWA",
        getter:["isDisabled"],
        type:"attr",
        ref:"attr:Canvas.disabled",
        description:"If set to true, the widget will be disabled. A widget is only considered enabled \n      if it is individually enabled and all parents above it in the containment hierarchy \n      are enabled. This allows you to enable or disable all components of a complex \n      nested widget by enabling or disabling the top-level parent only.",
        name:"disabled",
        setter:["setDisabled"],
        valueType:"boolean",
        seeAlso:[],
        defaultValue:"false",
        groups:["enable"],
        definingClass:"class:Canvas"
    },
    "method:GridRenderer.cellHover":{
        ref:"method:GridRenderer.cellHover",
        flags:"A",
        description:" Called when the mouse hovers over a cell if this.canHover is true. \n  Returning false will suppress the hover text from being shown if this.showHover is true.\n\n",
        name:"cellHover",
        seeAlso:[
            {ref:"attr:GridRenderer.canHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "classMethod:Time.setShortDisplayFormat":{
        ref:"classMethod:Time.setShortDisplayFormat",
        flags:"",
        description:" Sets the default format for strings returned by ${isc.DocUtils.linkForRef('classMethod:Time.toShortTime')}.\n",
        name:"setShortDisplayFormat",
        seeAlso:[],
        params:[
            {description:"Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the date to perform the conversion), or\n  a string designating a standard formatter", 
             optional:false,name:"formatter", defaultValue:null, type:"timeFormatter|function"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "method:Selection.getSelection":{
        ref:"method:Selection.getSelection",
        flags:"",
        description:"			Return an ordered array of all of the selected items\n",
        name:"getSelection",
        seeAlso:[],
        returns:{description:"list of selected items", type:"array"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:ListGrid.setHeaderHeight":{
        ref:"method:ListGrid.setHeaderHeight",
        flags:"",
        description:" Modify the height of a listGrid. To hide the header set height to zero.\n",
        name:"setHeaderHeight",
        seeAlso:[],
        params:[
            {description:"new height for the header", optional:false, name:"height", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["sizing", "gridHeader"]
    },
    "attr:Canvas.canDragResize":{
        ref:"attr:Canvas.canDragResize",
        flags:"IRWA",
        description:"Indicates whether this widget can be resized by dragging on the edges and/or corners of\n      the widget with the mouse.",
        name:"canDragResize",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragResize')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "class:WSDataSource":{
        methods:[],
        ref:"class:WSDataSource",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:[],
        description:"A WSDataSource is a DataSource that is preconfigured to contact the WSDL-described web\n service built into the SDK.  WSDataSource is a subclass of DataSource used exactly like a\n normal DataSource.\n <P>\n The WSDL service that WSDataSource contacts can be easily implemented on Java and non-Java\n backends.  See ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Integration')} for details.",
        name:"WSDataSource",
        seeAlso:[],
        type:"class"
    },
    "method:ResultSet.getValueMap":{
        ref:"method:ResultSet.getValueMap",
        flags:"",
        description:" Get a map of the form <code>{ item[idField] -&gt; item[displayField] }</code>, for all \n items in the list.  If more than one item has the same <code>idProperty</code>, \n the value for the later item in the list will clobber the value for the earlier item.\n <P>\n If this method is called when the ${isc.DocUtils.linkForRef('method:ResultSet.allMatchingRowsCached','cache is incomplete')}, it\n will trigger fetches, and will return a valueMap reflecting only the currently loaded rows.\n\n",
        name:"getValueMap",
        seeAlso:[
            {ref:"method:ResultSet.allMatchingRowsCached", description:null}
        ],
        params:[
            {description:"Property to use as ID (data value) in the valueMap", optional:false, 
             name:"idField",defaultValue:null, type:"string"},
            {description:"Property to use a display value in the valueMap", optional:false, 
             name:"displayField",defaultValue:null, type:"string"}
        ],
        returns:{description:"valueMap object", type:"object"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:Canvas.intersectsRect":{
        ref:"method:Canvas.intersectsRect",
        flags:"",
        description:"			Returns true if the rectangle of this widget intersects with the rectangle coordinates\n          passed in, and false otherwise.\n",
        name:"intersectsRect",
        seeAlso:[],
        params:[
            {description:"left coord of rect (or rect array)", optional:false, name:"left", 
             defaultValue:null,type:"number, array"},
            {description:"top coord of rect", optional:false, name:"top", defaultValue:null, 
             type:"number"},
            {description:"width of rect", optional:false, name:"width", defaultValue:null, type:"number"},
            {description:"height of rect", optional:false, name:"height", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"true if this canvas intersects the rectangle passed in; false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:FormItem.titleClassName":{
        ref:"attr:FormItem.titleClassName",
        deprecated:"As of SmartClient Version 5.5, use ${isc.DocUtils.linkForRef('attr:FormItem.titleStyle')} instead",
        flags:"IRW",
        description:"CSS class for the form item's title.",
        name:"titleClassName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"formTitle\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "attr:FormItem.hoverWidth":{
        ref:"attr:FormItem.hoverWidth",
        flags:"IRW",
        description:"Option to specify a width for any hover shown for this item.",
        name:"hoverWidth",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverWidth", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:Window.showStatusBar":{
        ref:"attr:Window.showStatusBar",
        flags:"IRW",
        description:"If true, show a statusBar for this Window, including resizer.",
        name:"showStatusBar",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "footer"]
    },
    "attr:Window.minimizeHeight":{
        ref:"attr:Window.minimizeHeight",
        flags:"IRWA",
        description:"Height for the window when minimized.\n If unset the window will shrink to the height of the header, if present, otherwise\n ${isc.DocUtils.linkForRef('attr:Window.defaultMinimizeHeight','this.defaultMinimizeHeight')}",
        name:"minimizeHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "minimize"]
    },
    "attr:ImgTab.showRollOver":{
        ref:"attr:ImgTab.showRollOver",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes over this tab",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "method:Date.getShortDayName":{
        ref:"method:Date.getShortDayName",
        flags:"",
        description:" Return the abbreviated (up to 3 chars) day of week name for this date (Mon, Tue, etc).\n To modify the value returned by this method, set ${isc.DocUtils.linkForRef('classAttr:Date.shortDayNames')}\n\n",
        name:"getShortDayName",
        seeAlso:[],
        params:[
            {description:"Number of characters to return (Defaults to 3, can't be                                   longer than 3)", 
             optional:false,name:"length", defaultValue:null, type:"number"}
        ],
        returns:{description:"Abbreviated day name", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:Tree.titleProperty":{
        ref:"attr:Tree.titleProperty",
        flags:"IRW",
        description:"Name of the property that holds the title of the node as it should be shown to the user. \n By default this is set to ${isc.DocUtils.linkForRef('attr:TreeNode.title')}.",
        name:"titleProperty",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"title\"",
        type:"attr",
        definingClass:"class:Tree"
    },
    "group:tabBarScrolling":{
        ref:"group:tabBarScrolling",
        refs:["attr:TabSet.symmetricScroller", "attr:TabSet.scrollerSrc", "attr:TabSet.scrollerHSrc", 
         "attr:TabSet.scrollerVSrc","attr:TabSet.symmetricPickerButton", "attr:TabSet.pickerButtonSrc", 
         "attr:TabSet.pickerButtonHSrc","attr:TabSet.pickerButtonVSrc"],
        name:"tabBarScrolling",
        seeAlso:[],
        type:"group"
    },
    "attr:Window.defaultMinimizeHeight":{
        ref:"attr:Window.defaultMinimizeHeight",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:Window.minimizeHeight')} is unset, by the window will shrink to the height of the\n header when minimized.\n <BR>\n If there is no header, the <code>defaultMinimizeHeight</code> will be used instead.",
        name:"defaultMinimizeHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "classMethod:DMI.call":{
        ref:"classMethod:DMI.call",
        flags:"",
        description:"\n Calls a server-side DMI method.  At a minimum, you need to specify the appID (.app.xml\n file), ${isc.DocUtils.linkForRef('attr:ServerObject.className')} or ${isc.DocUtils.linkForRef('attr:ServerObject.ID')} and methodName to call.\n Arguments and callback are optional.  There are two ways to invoke this method:\n <pre>\n DMI.call(appID, className, methodName, \n          arg1, arg2 ...argN, callback);\n </pre>\n or:\n <pre>\n DMI.call({\n     appID: appID,\n     className: className,\n     methodName: methodName,\n     arguments: [arg1, arg2, ...argN], //optional\n     callback: callback, //optional\n     requestParams: requestProps // optional\n });\n </pre>\n If you use the first signature, you must either specify a callback or if you don't want a\n callback, pass a <code>null</code> as the last argument.  The second signature allows you to\n specify requestParams that are applied to the ${isc.DocUtils.linkForRef('class:RPCRequest')} generated by this DMI call.\n This allows you to override some defaults - for example to suppress the \"Contacting Server\"\n prompt, change it's text; change the timeout or set any other property settable on\n ${isc.DocUtils.linkForRef('class:RPCRequest')}.\n <p>\n Note that you can use the ${isc.DocUtils.linkForRef('group:loadDMIStubsTag')} tag to bind all methods of\n <code>ServerObjects</code> defined in a given .app.xml file and call methods on them\n directly.\n\n",
        name:"call",
        seeAlso:[],
        params:[
            {description:"the appID (.app.xml file to look in) or comprehensive request                          object as documented above.", 
             optional:false,name:"appID", defaultValue:null, type:"string or Object"},
            {description:"${isc.DocUtils.linkForRef('attr:ServerObject.className')} or ${isc.DocUtils.linkForRef('attr:ServerObject.ID')}", 
             optional:false,name:"className", defaultValue:null, type:"string"},
            {description:"the name of the method to call on the serverObject", optional:false, 
             name:"methodName",defaultValue:null, type:"string"},
            {description:"The next N-1 params specify arguments to the server-side method.", 
             optional:true,name:"args", defaultValue:null, type:"any"},
            {description:"The callback of the response.  If you do not want a callback, you                          must specify a <code>null</code> value for this parameter when\n                          using the first signature (documented above).", 
             optional:false,name:"callback", defaultValue:null, type:"RPCCallback"}
        ],
        type:"classMethod",
        definingClass:"class:DMI"
    },
    "method:CubeGrid.addRowFacet":{
        ref:"method:CubeGrid.addRowFacet",
        flags:"",
        description:" Add a row facet to the view at index \"index\".  Handles the facet already being in the view\n (does a pivot).<br><br>\n\n The facet being added should currently have a fixed facet value (unless it's already part of the\n view), which will be removed from cubeGrid.fixedFacetValues.\n\n <br><i>methodType</i>  action\n",
        name:"addRowFacet",
        seeAlso:[
            {ref:"method:CubeGrid.removeFacet", description:null},
            {ref:"attr:CubeGrid.fixedFacetValues", description:null}
        ],
        params:[
            {description:"facetId to add.  Definition must have been provided at init time.", 
             optional:false,name:"facetId", defaultValue:null, type:"id"},
            {description:"index to add the facet at.  0 = outermost (default innermost)", 
             optional:true,name:"index", defaultValue:null, type:"integer"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "method:PickList.filterClientPickListData":{
        ref:"method:PickList.filterClientPickListData",
        flags:"",
        description:" Returns the data to display in the pick list.\n <P>\n The default implementation applies the criteria returned by \n ${isc.DocUtils.linkForRef('method:PickList.getPickListFilterCriteria')} to the data returned by\n ${isc.DocUtils.linkForRef('method:PickList.getClientPickListData')}.  A record passes the filter if it has a\n matching value for all fields in the criteria object.  Matching is performed according\n to ${isc.DocUtils.linkForRef('attr:PickList.textMatchStyle')}.\n <P>\n If ${isc.DocUtils.linkForRef('attr:PickList.showAllOptions')} is set, all values are shown, with matching values\n shown below a ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator')}.\n\n",
        name:"filterClientPickListData",
        seeAlso:[],
        returns:{description:"array of record objects to display in the pickList", 
         type:"Array of ListGridRecord"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "method:Canvas.getHSnapPosition":{
        ref:"method:Canvas.getHSnapPosition",
        flags:"A",
        description:"\n Override this method to provide a custom snap-to grid.  Note that you do not need to do\n this if your grid is regular (ie, grid points are every x pixels); regular grids should be \n defined using ${isc.DocUtils.linkForRef('attr:Canvas.snapHGap')} and ${isc.DocUtils.linkForRef('attr:Canvas.snapVGap')}.\n You should only override this method if you want to provide support for a grid of \n irregularly-placed points\n\n",
        name:"getHSnapPosition",
        seeAlso:[],
        params:[
            {description:"x-coordinate of the drag event (note: using page-level coordinates)", 
             optional:false,name:"coordinate", defaultValue:null, type:"integer"},
            {description:"\"before\" or \"after\" denoting whether the returned coordinate should   match the left or right edge of the current square. If unset ${isc.DocUtils.linkForRef('attr:Canvas.snapHDirection')} will\n   be used by default", 
             optional:true,name:"direction", defaultValue:null, type:"string"}
        ],
        returns:{description:"The horizontal coordinate to snap to", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:Layout.hideMember":{
        ref:"method:Layout.hideMember",
        flags:"",
        description:" Hide the specified member, firing the specified callback when the hide is complete.\n <P>\n Members can always be directly hidden via <code>member.hide()</code>, but if\n ${isc.DocUtils.linkForRef('attr:Layout.animateMembers','animation')} is enabled, animation will only occur if hideMember() is\n called to hide the member.\n\n",
        name:"hideMember",
        seeAlso:[],
        params:[
            {description:"Member to hide", optional:false, name:"member", defaultValue:null, 
             type:"Canvas"},
            {description:"callback to fire when the member is hidden.", optional:false, 
             name:"callback",defaultValue:null, type:"Callback"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:Facet.cellAlign":{
        ref:"attr:Facet.cellAlign",
        flags:"IR",
        description:"Default alignment of cells (in the body) for this facet",
        name:"cellAlign",
        seeAlso:[
            {ref:"attr:CubeGrid.cellAlign", description:null}
        ],
        valueType:"alignEnum",
        defaultValue:"cubeGrid.cellAlign",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:Canvas.hoverHeight":{
        ref:"attr:Canvas.hoverHeight",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, this property can be used to customize the\n height of the hover canvas shown.",
        name:"hoverHeight",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:Canvas.dragStart":{
        ref:"method:Canvas.dragStart",
        flags:"A",
        description:" Executed when dragging first starts. Your widget can use this opportunity to set\n things up for the drag, such as setting the drag tracker. Returning false from this\n event handler will cancel the drag action entirely.\n <p>\n A drag action is considered to be begin when the mouse has moved\n ${isc.DocUtils.linkForRef('attr:Canvas.dragStartDistance')} with the left mouse down.\n\n",
        name:"dragStart",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to cancel drag action.", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragPan')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:ListGrid.headerMenuButtonWidth":{
        ref:"attr:ListGrid.headerMenuButtonWidth",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the width of the \n auto-generated <code>headerMenuButton</code>",
        name:"headerMenuButtonWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "attr:ListGrid.headerHeight":{
        ref:"attr:ListGrid.headerHeight",
        flags:"IRW",
        description:"The height of this listGrid's header, in pixels.",
        name:"headerHeight",
        setter:["setHeaderHeight"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"22",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "sizing"]
    },
    "method:Canvas.linkHTML":{
        ref:"method:Canvas.linkHTML",
        flags:"A",
        description:" Generates the HTML for a standard link element\n\n",
        name:"linkHTML",
        seeAlso:[],
        params:[
            {description:"URL for the link to point to", optional:false, name:"href", defaultValue:null, 
             type:"string"},
            {description:"Text to for the link (defaults to the href)", optional:true, name:"text", 
             defaultValue:null,type:"string"},
            {description:"Target window for the link (defaults to opening in a new, unnamed window)", 
             optional:true,name:"target", defaultValue:null, type:"string"},
            {description:"optional ID for the link element to be written out", optional:true, 
             name:"ID",defaultValue:null, type:"string"},
            {description:"optional tabIndex for the link", optional:true, name:"tabIndex", 
             defaultValue:null,type:"number"},
            {description:"optional accessKey for the link", optional:true, name:"accessKey", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"HTML for the link", type:"string"},
        type:"method",
        definingClass:"class:Canvas"
    },
    "attr:OperationBinding.useFlatFields":{
        ref:"attr:OperationBinding.useFlatFields",
        flags:"IR",
        description:"Setting <code>useFlatFields</code> on an operationBinding is equivalent to setting\n ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')} on all DataSource requests with the same ${isc.DocUtils.linkForRef('attr:OperationBinding.operationType')}\n as this <code>operationBinding</code>.\n <P>\n Typical usage is to combine operationBinding.useFlatFields with \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','searchForm.useFlatFields')}, with the ${isc.DocUtils.linkForRef('class:SearchForm')}\n bound to the ${isc.DocUtils.linkForRef('method:WebService.getInputDS','input message')} of the web service operation set\n as ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')}.  This allows gratuitous nesting to be consistently\n bypassed in both the user presentation and in the actual XML messaging.\n <P>\n Not that <code>useFlatFields</code> is not generally recommended for use with input messages\n where multiple simple type fields exist with the same name, however if used in this way,\n the first field to use a given name wins.  \"first\" means the first field encountered in a\n depth first search.  \"wins\" means only the first field will be available in data binding,\n and only the first field will be populated in the generated XML message.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "method:Menu.setItemIcon":{
        ref:"method:Menu.setItemIcon",
        flags:"",
        description:"			Sets the icon and disabled icon (if specified) for a particular menu item and redraws\n          the menu if necessary. Returns true if the icon changed.\n\n",
        name:"setItemIcon",
        seeAlso:[],
        params:[
            {description:"pointer to (or number of) the item in question", optional:false, name:"item", 
             defaultValue:null,type:"item | number"},
            {description:"new icon URL", optional:false, name:"newIcon", defaultValue:null, 
             type:"string"},
            {description:"new icon URL for disabled image", optional:true, name:"newDisabledIcon", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true == something changed, redraw is called for", type:"boolean"},
        type:"method",
        definingClass:"class:Menu"
    },
    "classMethod:Log.clear":{
        ref:"classMethod:Log.clear",
        flags:"",
        description:" Clear all currently displayed Log messages\n",
        name:"clear",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "method:ListGridField.changed":{
        ref:"method:ListGridField.changed",
        flags:"",
        description:" If this field is editable, any ${isc.DocUtils.linkForRef('method:FormItem.changed','changed')} handler specified\n on the ListGridField will be passed onto the editors for this field.\n",
        name:"changed",
        seeAlso:[
            {ref:"method:ListGridField.change", description:null},
            {ref:"method:ListGrid.cellChanged", description:null}
        ],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the editor (form item) itself (also available as \"this\").                              Note that in addition to the standard FormItem APIs available\n                              on the editor, it also has:<br>\n                              - a pointer back to the containing listGrid \n                              [<code>item.grid</code>]<br>\n                              - the colNum being edited [<code>item.colNum</code>]<br>\n                              - the rowNum being edited [<code>item.rowNum</code>]", 
             optional:false,name:"item", defaultValue:null, type:"FormItem"},
            {description:"The current value (after the change).", optional:false, name:"value", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "type:DSProtocol":{
        ref:"type:DSProtocol",
        values:[
            {description:"Data is added to the dataURL, with each property in the data becoming an HTTP parameter,\n   eg http://service.com/search?keyword=foo", 
             value:"\"getParams\""},
            {description:"Data is POST'd to the dataURL, with each property becoming an HTTP parameter, \n   exactly as an HTML form would submit them if it had one input field per property in the\n   data.", 
             value:"\"postParams\""},
            {description:"Data is serialized as XML via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} and POST'd as the\n   HTTP request body with contentType \"text/xml\"", 
             value:"\"postXML\""},
            {description:"Data is serialized as XML via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}, wrapped in a SOAP\n   envelope, and POST'd as the HTTP request body with contentType \"text/xml\".  Generally\n   only used in connection with a ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL web service')}.", 
             value:"\"soap\""},
            {description:"dsRequest.data is assumed to be a String set up by ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}\n   and is POST'd as the HTTP request body.", 
             value:"\"postMessage\""}
        ],
        description:"dataProtocol affects how the data in the DSRequest (${isc.DocUtils.linkForRef('attr:DSRequest.data')}) is\n sent to the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')}.  Note that, when using the SmartClient server, data\n is automatically translated from JavaScript to Java according to the rules described\n ${isc.DocUtils.linkForRef('attr:RPCRequest.data','here')}; dataProtocol does not apply.",
        name:"DSProtocol",
        seeAlso:[
            {ref:"attr:OperationBinding.dataProtocol", description:null}
        ],
        type:"type",
        groups:["clientDataIntegration"]
    },
    "attr:RPCRequest.promptStyle":{
        ref:"attr:RPCRequest.promptStyle",
        flags:"IRW",
        description:"Controls the prompt style for this request only.  Defaults to\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')}.",
        name:"promptStyle",
        seeAlso:[
            {ref:"classAttr:RPCManager.promptStyle", description:null}
        ],
        valueType:"PromptStyle",
        defaultValue:"RPCManager.promptStyle",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["rpcPrompt"]
    },
    "attr:Canvas.hoverAlign":{
        ref:"attr:Canvas.hoverAlign",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, this property can be used to customize the\n alignment of content in the hover canvas.",
        name:"hoverAlign",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:EdgedCanvas.skinImgDir":{
        ref:"attr:EdgedCanvas.skinImgDir",
        flags:"IR",
        description:"Standard skin directory for edge images (sides and corners).",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"images/edges/\"",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:Window.maximizeButton":{
        ref:"attr:Window.maximizeButton",
        flags:"R",
        description:"Button that will make this Window fill the browser via ${isc.DocUtils.linkForRef('method:Window.maximize')}.",
        name:"maximizeButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:SliderItem.maxValue":{
        ref:"attr:SliderItem.maxValue",
        flags:"IRW",
        description:"The maximum slider value. The slider value is equal to maxValue when the thumb is at the\n top or right of the slider (unless flipValues is true, in which case the maximum value\n is at the bottom/left of the slider)",
        name:"maxValue",
        seeAlso:[
            {ref:"attr:Slider.flipValues", description:null}
        ],
        valueType:"float",
        defaultValue:"100",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sliderItem')}"],
        definingClass:"class:SliderItem"
    },
    "attr:ListGrid.resizeFieldsInRealTime":{
        ref:"attr:ListGrid.resizeFieldsInRealTime",
        flags:"IRWA",
        description:"True == we redraw the list viewer in real time as fields are being resized.\n		This can be slow with a large list and/or on some platforms.",
        name:"resizeFieldsInRealTime",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"Browser.isIE && isc.Browser.isWin",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "method:ListGridField.recordClick":{
        ref:"method:ListGridField.recordClick",
        flags:"",
        description:"\n Executed when this field is clicked on.  Note that if ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} is\n also defined, it will not fire for fields that define a recordClick handler.\n\n",
        name:"recordClick",
        seeAlso:[
            {ref:"method:ListGrid.recordClick", description:null}
        ],
        params:[
            {description:"the listGrid that contains the click event", optional:false, name:"viewer", 
             defaultValue:null,type:"ListGrid"},
            {description:"the record that was clicked on", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"number of the record clicked on in the current set of                                  displayed records (starts with 0)", 
             optional:false,name:"recordNum", defaultValue:null, type:"number"},
            {description:"the field that was clicked on (field definition)", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"number of the field clicked on in the listGrid.fields                                  array", 
             optional:false,name:"fieldNum", defaultValue:null, type:"number"},
            {description:"value of the cell (after valueMap, etc. applied)", optional:false, 
             name:"value",defaultValue:null, type:"object"},
            {description:"raw value of the cell (before valueMap, etc applied)", optional:false, 
             name:"rawValue",defaultValue:null, type:"object"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('recordClicks')}"],
        definingClass:"object:ListGridField",
        groups:["events"]
    },
    "attr:TreeGrid.iconSize":{
        ref:"attr:TreeGrid.iconSize",
        flags:"IRW",
        description:"The standard size (same height and width, in pixels) of node icons in this\n          treeGrid.",
        name:"iconSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:HTMLFlow.httpMethod":{
        ref:"attr:HTMLFlow.httpMethod",
        flags:"IRW",
        description:"Selects the HTTP method that will be used when fetching content.  Valid values are \"POST\"\n and \"GET\".",
        name:"httpMethod",
        seeAlso:[],
        valueType:"SendMethod",
        defaultValue:"\"GET\"",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "method:FormItem.showIf":{
        ref:"method:FormItem.showIf",
        flags:"A",
        description:" Expression that's evaluated to see if an item should be dynamically hidden.\n <p>\n <code>showIf()</code> is evaluated whenever the form draws or redraws.\n\n",
        name:"showIf",
        seeAlso:[],
        params:[
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"current value of the form item", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the current set of values for the form as a whole", optional:false, 
             name:"values",defaultValue:null, type:"Object"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('formShowAndHide')}"],
        definingClass:"class:FormItem"
    },
    "attr:DataSourceField.primaryKey":{
        ref:"attr:DataSourceField.primaryKey",
        flags:"IR",
        description:"Whether this field holds a value unique across all records in this DataSource.\n <p>\n Exactly one field must be marked as the primary key for any DataSource that allows\n modification of DataSource records through add, update and remove DataSource operations.\n <P>\n SmartClient requires a primary key value to uniquely identify records when communicating\n updates or deletions to the server.  There is no requirement that the primaryKey field be\n mapped to an actual \"primary key\" in your object model, web service, or database.  The only\n requirement is that values of the primaryKey field be unique for a given browser instance\n for the lifetime of the page.  If it's inconvenient to use existing unique values within\n your underlying dataset, you can generate primary key values that are only unique\n per-session.\n <P>\n If using ISC's ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')} and generating SQL tables using the\n \"DataBases\" tab of the Developer Console, the table column generated from a primaryKey field\n will have a unique constraint applied in the database table.",
        name:"primaryKey",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["dataSourceRelations"]
    },
    "classMethod:Class.Super":{
        ref:"classMethod:Class.Super",
        flags:"",
        description:"\n	Call the SuperClass implementation of a class method.\n\n",
        name:"Super",
        seeAlso:[],
        params:[
            {description:"name of the superclass method to call", optional:false, name:"methodName", 
             defaultValue:null,type:"string"},
            {description:"native \"arguments\" object, or array of                                           arguments to pass to the Super call", 
             optional:false,name:"args", defaultValue:null, type:"arguments or Array"},
            {description:"native \"arguments\" object, required if an Array is                                  passed for the \"args\" parameter in lieue of the native\n                                  arguments object", 
             optional:true,name:"nativeArgs", defaultValue:null, type:"arguments"}
        ],
        returns:{description:"return value of the superclass call", type:"any"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:Window.headerIconDefaults":{
        ref:"attr:Window.headerIconDefaults",
        flags:"IRWA",
        description:"This is an object literal property block specifying the various properties of the\n headerIcon - the icon that appears at the top left of the window and is by default the\n Isomorphic logo.  Overrideable defaults are as follows:\n <ul>\n <li>width - default to <code>16</code> and specifies the width of the headerIcon.\n <li>height - default to <code>14</code> and specifies the height of the headerIcon.\n <li>src - defaults to <code>\"[SKIN]/Window/minimize.gif\"</code> and specifies the image\n for the headerIcon.\n </ul>\n You can override the the above propertites by calling ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}.",
        name:"headerIconDefaults",
        seeAlso:[],
        valueType:"object",
        defaultValue:"...",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "method:MenuBar.removeMenus":{
        ref:"method:MenuBar.removeMenus",
        flags:"",
        description:" Dynamically remove menus from the menuBar. Will update the visible set of buttons as \n appropriate.\n",
        name:"removeMenus",
        seeAlso:[],
        params:[
            {description:"Array of menus to remove (will accept actual Menu components,                       or numbers representing the index of the menus in the current menus array)", 
             optional:false,name:"menus", defaultValue:null, type:"array"}
        ],
        type:"method",
        definingClass:"class:MenuBar"
    },
    "attr:DetailViewer.loadingMessage":{
        ref:"attr:DetailViewer.loadingMessage",
        flags:"IRW",
        description:"The string to display in the body of a detailViewer which is loading records.",
        name:"loadingMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["emptyMessage"]
    },
    "attr:DataSource.globalNamespaces":{
        ref:"attr:DataSource.globalNamespaces",
        flags:"IRW",
        description:"Namespaces definitions to add to the root element of outbound XML messages sent to a web\n service, as a mapping from namespace prefix to namespace URI.\n <P>\n The default value is:\n <pre>\n   globalNamespaces : {\n      xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\n      xsd: \"http://www.w3.org/2001/XMLSchema\"\n   },\n </pre>\n This default value allows the use of the xsi:type and xsi:nil attributes without further\n declarations.\n <P>\n Note that some web services will only accept specific revisions of the XML Schema URI.\n If xsi-namespaced attributes seem to be ignored by an older webservice, try the URI\n \"http://www.w3.org/1999/XMLSchema-instance\" instead.",
        name:"globalNamespaces",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"...",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "group:xmlTransform":{
        ref:"group:xmlTransform",
        refs:["classMethod:XMLTools.selectNodes", "classMethod:XMLTools.selectString", 
         "classMethod:XMLTools.selectNumber","classMethod:XMLTools.transformNodes", "classMethod:XMLTools.serializeToString"],
        name:"xmlTransform",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.getCellStyle":{
        ref:"method:ListGrid.getCellStyle",
        flags:"",
        description:" Return the CSS class for a cell. By default this method has the following implementation:<br>\n - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) \n   if defined.<br>\n - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the \n   state of the record.<br>\n The state of the record is indicated by adding a suffix to the base style.\n There are four independant boolean states, which are combined in the order given:\n <ol>\n <li>\"Disabled\" : whether the cell is disabled; enable by setting the \"enabled\" flag on record\n     returned by getCellRecord\n <li>\"Selected\" : whether cell is selected; enable by passing a Selection object as \"selection\"\n <li>\"Over\" : mouse is over this cell; enable with showRollovers\n <li>\"Dark\" : alternating color bands; enable with alternateRowStyles\n </ol>\n For example, with a baseStyle of \"myCell\", a cell which is selected, which the mouse is over,\n and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.\n <p>\n Cell Styles customizable by:\n <ul>\n <li>attaching a custom style to a record by setting \n    <code>record[this.recordCustomStyleProperty]</code> to some valid CSS style name.  \n <li>modifying the base style returned by getBaseStyle() [see that method for further \n     documentation on this]\n <li>overriding this function\n </ul>\n\n",
        name:"getCellStyle",
        seeAlso:[
            {ref:"method:ListGrid.getBaseStyle", description:null}
        ],
        params:[
            {description:"record object for this row and column", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"number of the row", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"number of the column", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS style for this cell", type:"CSSStyleName"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:ListGrid.enterKeyEditAction":{
        ref:"attr:ListGrid.enterKeyEditAction",
        flags:"IRWA",
        description:"What to do when a user hits enter while editing a cell:\n <ul>\n <li>\"nextCell\": start editing the next editable cell in this record (or the first\n     editable cell in the next record if focus is in the last editable cell in the row)\n <li>\"nextRow\": start editing the same field in the next row (skipping any rows where\n      that would be a non-editable cell.\n <li>\"nextRowStart\": start editing the first editable cell in the next row.\n <li>\"done\": hide the editor (editing is complete)\n </ul>\n Note that if this.autoSaveEdits is true, this may cause a save of the current edit values",
        name:"enterKeyEditAction",
        seeAlso:[],
        valueType:"EnterKeyEditAction",
        defaultValue:"\"done\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:StretchImgButton.icon":{
        ref:"attr:StretchImgButton.icon",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"icon",
        setter:["setIcon"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:DateItem.displayFormat":{
        ref:"attr:DateItem.displayFormat",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:DateItem.useTextField')} is <code>true</code> this property can be used to \n customize the format in which dates are displayed.<br>\n Default setting is <code>\"toShortDate\"</code> which ensures that if the standard\n shortDate format is modified via ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')} this format\n will be picked up.<br>\n Important: the display format and the ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} \n for dateItems should always be set such that the format of strings displayed by this\n item matches the expected format of strings the user enters.",
        name:"displayFormat",
        seeAlso:[
            {ref:"attr:DateItem.inputFormat", description:null}
        ],
        valueType:"DateDisplayFormat",
        defaultValue:"\"toShortDate\"",
        type:"attr",
        definingClass:"class:DateItem"
    },
    "attr:TextItem.textBoxStyle":{
        ref:"attr:TextItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class name for this item's input element.\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"textItem\"",
        type:"attr",
        definingClass:"class:TextItem",
        groups:["appearance"]
    },
    "class:PickTreeItem":{
        methods:[],
        ref:"class:PickTreeItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:PickTreeItem.dataSource", "attr:PickTreeItem.valueTree", 
         "attr:PickTreeItem.loadDataOnDemand","attr:PickTreeItem.displayField", "attr:PickTreeItem.valueField", 
         "attr:PickTreeItem.emptyMenuMessage","attr:PickTreeItem.canSelectParentItems"],
        description:"FormItem that allows picking a value from a hierarchical data model.",
        name:"PickTreeItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('pickTree')}"]
    },
    "group:menuItemEvents":{
        ref:"group:menuItemEvents",
        refs:["method:MenuItem.click"],
        name:"menuItemEvents",
        seeAlso:[],
        type:"group"
    },
    "method:ListGridField.defaultDynamicValue":{
        ref:"method:ListGridField.defaultDynamicValue",
        flags:"",
        description:" If this field ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','can be edited')}, this property can be used to\n set a dynamic default value which will show up in editors for this field. \n Will be applied to the editor for the field as ${isc.DocUtils.linkForRef('method:FormItem.defaultDynamicValue')}\n\n",
        name:"defaultDynamicValue",
        seeAlso:[],
        params:[
            {description:"The editor for the cell itself (also available as \"this\").                              Note that in addition to the standard FormItem APIs available\n                              on the editor, it also has:<br>\n                              - a pointer back to the containing listGrid \n                              [<code>item.grid</code>]<br>\n                              - the colNum being edited [<code>item.colNum</code>]<br>\n                              - the rowNum being edited [<code>item.rowNum</code>]", 
             optional:false,name:"item", defaultValue:null, type:"FormItem"},
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the current set of values for the form as a whole", optional:false, 
             name:"values",defaultValue:null, type:"Object"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:GridRenderer.wrapCells":{
        ref:"attr:GridRenderer.wrapCells",
        flags:"IRWA",
        description:"Should content within cells be allowed to wrap?",
        name:"wrapCells",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "attr:StretchImgButton.vertical":{
        ref:"attr:StretchImgButton.vertical",
        flags:"IRW",
        description:"Default is a horizontal button.  Vertical StretchImgButtons are allowed, but title text,\n if any, will not be automatically rotated.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["appearance"]
    },
    "classAttr:RPCManager.useXmlHttpRequest":{
        ref:"classAttr:RPCManager.useXmlHttpRequest",
        deprecated:"As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')}.  If you specify a value for this property, it will take precedence over\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} for requests that do not specify a\n ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')} or ${isc.DocUtils.linkForRef('attr:RPCRequest.useXmlHttpRequest')}.",
        flags:"RW",
        description:"Selects the default http transport for all RPC requests.  If set to true, RPCManager\n will use XMLHttp for requests to the server.  If set to false, it will use hidden\n frames.  Overrideable on a per-request basis via ${isc.DocUtils.linkForRef('attr:RPCRequest.useXmlHttpRequest')}.\n <p>\n Note that if the end user disables ActiveX controls in Internet Explorer, the XMLHttpRequest\n object will not be available and SmartClient will automatically fall back on frames\n communication.",
        name:"useXmlHttpRequest",
        seeAlso:[
            {ref:"attr:RPCRequest.useXmlHttpRequest", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true if XMLHttpRequest is supported, false otherwise",
        type:"classAttr",
        definingClass:"class:RPCManager"
    },
    "method:List.setLength":{
        ref:"method:List.setLength",
        flags:"",
        description:" Set the length of this list.\n <P>\n If the length of the list is shortened, any elements past the new length of the list are removed.\n If the length is increased, all positions past the old length have the value\n <code>undefined</code>.\n\n",
        name:"setLength",
        seeAlso:[],
        params:[
            {description:"new length", optional:false, name:"length", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "class:DateChooser":{
        methods:["method:DateChooser.setData", "method:DateChooser.getData", 
         "method:DateChooser.dataChanged"],
        ref:"class:DateChooser",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms"],
        attrs:["attr:DateChooser.showTodayButton", "attr:DateChooser.showCancelButton", 
         "attr:DateChooser.todayButtonTitle","attr:DateChooser.cancelButtonTitle", "attr:DateChooser.prevYearIcon", 
         "attr:DateChooser.prevYearIconWidth","attr:DateChooser.prevYearIconHeight", "attr:DateChooser.prevMonthIcon", 
         "attr:DateChooser.prevMonthIconWidth","attr:DateChooser.prevMonthIconHeight", "attr:DateChooser.nextYearIcon", 
         "attr:DateChooser.nextYearIconWidth","attr:DateChooser.nextYearIconHeight", "attr:DateChooser.nextMonthIcon", 
         "attr:DateChooser.nextMonthIconWidth","attr:DateChooser.nextMonthIconHeight", "attr:DateChooser.showDoubleYearIcon", 
         "attr:DateChooser.firstDayOfWeek","attr:DateChooser.skinImgDir", "attr:DateChooser.baseButtonStyle", 
         "attr:DateChooser.baseWeekdayStyle","attr:DateChooser.baseWeekendStyle", "attr:DateChooser.alternateWeekStyles", 
         "attr:DateChooser.alternateStyleSuffix","attr:DateChooser.headerStyle", "attr:DateChooser.baseNavButtonStyle"],
        description:"Simple interactive calendar interface used to pick a date.\n Used by the ${isc.DocUtils.linkForRef('class:DateItem')} class.",
        name:"DateChooser",
        seeAlso:[],
        type:"class"
    },
    "classMethod:Class.registerStringMethods":{
        ref:"classMethod:Class.registerStringMethods",
        flags:"",
        description:"\n	Register a method, or set of methods, that can be provided to instances of this class as\n	Strings (containing a JavaScript expression) and will be automatically converted into\n	functions.\n  <p>\n  For example:\n  <pre>\n  isc.MyClass.registerStringMethods({\n      myStringMethod: \"arg1, arg2\"\n  });\n  </pre>\n\n",
        name:"registerStringMethods",
        seeAlso:[],
        params:[
            {description:"If this is a string, name of the property to register                                  If this is an object, assume passing in a set of name/value\n                                  pairs to register", 
             optional:false,name:"methodName", defaultValue:null, type:"object"},
            {description:"named arguments for the property in a comma separated string                                  (not used if methodName is an object)", 
             optional:false,name:"argumentString", defaultValue:null, type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "group:display_values":{
        ref:"group:display_values",
        refs:["method:ListGridField.getGroupValue", "method:ListGridField.getGroupTitle", 
         "method:ListGridField.getCellValue","method:ListGridField.formatCellValue", "method:ListGrid.formatCellValue", 
         "method:FormItem.getValueFieldName","method:FormItem.getOptionDataSource", "method:PickList.getValueFieldName", 
         "method:SelectItem.getValueFieldName","method:ComboBoxItem.getValueFieldName", "attr:ListGridRecord.linkText", 
         "attr:ListGridField.linkText","attr:ListGridField.valueMap", "attr:ListGridField.emptyCellValue", 
         "attr:ListGridField.optionDataSource","attr:ListGridField.valueField", "attr:ListGridField.displayField", 
         "attr:FormItem.emptyDisplayValue","attr:FormItem.optionDataSource", "attr:FormItem.valueField", "attr:FormItem.displayField", 
         "attr:FormItem.fetchMissingValues","attr:FormItem.filterLocally", "attr:PickList.valueField", "attr:PickList.displayField", 
         "attr:SelectItem.displayField","attr:SelectItem.valueField", "attr:ComboBoxItem.displayField", 
         "attr:ComboBoxItem.valueField"],
        name:"display_values",
        seeAlso:[],
        type:"group"
    },
    "method:ListGridField.getSummaryTitle":{
        ref:"method:ListGridField.getSummaryTitle",
        flags:"A",
        description:" Optional string method to return a long summary title for this field, if a dynamic\n summary title is required for this field.  \n\n",
        name:"getSummaryTitle",
        seeAlso:[
            {ref:"attr:ListGridField.summaryTitle", description:null},
            {ref:"attr:ListGridField.title", description:null}
        ],
        params:[
            {description:"pointer back to the ListGrid", optional:false, name:"viewer", 
             defaultValue:null,type:"listGrid"},
            {description:"pointer to the field object", optional:false, name:"field", defaultValue:null, 
             type:"listGridField"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "method:DynamicForm.getEditorType":{
        ref:"method:DynamicForm.getEditorType",
        flags:"A",
        description:"\n Returns the form item type (Class Name) to be created for some field.<br>\n By default <code>field.editorType</code> will be used if present - otherwise backs off to\n deriving the appropriate form item type from the data type of the field (see\n ${isc.DocUtils.linkForRef('type:FormItemType')} for details.\n\n",
        name:"getEditorType",
        seeAlso:[],
        params:[
            {description:"field definition for which we are deriving form item type.", optional:false, 
             name:"field",defaultValue:null, type:"object"}
        ],
        returns:{description:"form item type for the field", type:"string"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["editing"]
    },
    "object:DetailViewerField":{
        methods:["method:DetailViewerField.showIf"],
        ref:"object:DetailViewerField",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/DetailViewer"],
        attrs:["attr:DetailViewerField.type", "attr:DetailViewerField.title", 
         "attr:DetailViewerField.valueMap","attr:DetailViewerField.value", "attr:DetailViewerField.height"],
        description:"An object literal with a particular set of properties used to configure the display of\n and interaction with the rows of a ${isc.DocUtils.linkForRef('class:DetailViewer')}.",
        name:"DetailViewerField",
        seeAlso:[],
        type:"object"
    },
    "method:DataSource.transformResponse":{
        ref:"method:DataSource.transformResponse",
        flags:"A",
        description:" Modify the DSResponse object derived from the response returned from the \n ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')}.\n <P>\n This is an override point that makes it possible to use DataSource features such as\n paging with web services that support such features, by allowing you to fill in metadata\n fields in the DSResponse object (such as ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}) based on\n service-specific metadata fields contained in the service's response.\n <P>\n The DSResponse passed to this method already has ${isc.DocUtils.linkForRef('attr:DSResponse.data')}, which is\n derived differently depending on the ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat')} setting:\n <ul>\n <li> <code>dataFormat:\"xml\"</code> : either the\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')} or \n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordName','recordName')} is used to select the XML elements\n that represent DataSource records.  The selected XML elements are passed to\n ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}, which transforms the XML elements to typed\n JavaScript data using the DataSource as a schema.\n <li> <code>dataFormat:\"json\"</code> : the\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}, if specified, is used to select\n records from the returned JSON data via ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')}.  \n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} is used to derive correctly typed field values.\n <li> <code>dataFormat:\"custom\"</code> : <code>dsResponse.data</code> is the raw response\n in String form.  It must be parsed into an Array of Objects for subsequent processing to\n work.\n </ul> \n <P>\n In addition to <code>dsResponse.data</code>, ${isc.DocUtils.linkForRef('attr:DSResponse.status')} is defaulted\n to 0 (indicating no error), and ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')} is assumed to be zero,\n with ${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')} and ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows','totalRows')}\n both set to <code>dsResponse.data.length - 1</code>, that is, the returned data is\n assumed to be all records that matched the filter criteria.\n <P>\n Examples of using this API include:\n <ul>\n <li> setting ${isc.DocUtils.linkForRef('attr:DSResponse.startRow','startRow')}, \n      ${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')} and ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows','totalRows')}\n      to allow paging for a service that supports it.  For example, if an XML service\n      returns a \"resultRow\" tag that contained the row number of the first row of the\n      returned results:<pre>\n    dsResponse.startRow = \n        isc.XMLTools.selectNumber(xmlData, \"//resultRow\");\n </pre>\n <li> setting ${isc.DocUtils.linkForRef('attr:DSResponse.status')} to recognized ISC error values based on\n      service-specific errors, in order to trigger standard ISC error handling.  For\n      example, setting <code>dsResponse.status</code> to\n      ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} and filling in\n      ${isc.DocUtils.linkForRef('attr:DSResponse.errors')} in order to cause validation errors to be shown in\n      forms and grids.\n <li> for services that either do not return cache update data, or return partial data,\n      using ${isc.DocUtils.linkForRef('attr:DSRequest.oldValues')} to create cache update data (whether this is\n      appropriate is application-specific), or setting\n      ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')}.\n </ul>\n <P>\n <span STYLE=\"color:red\">NOTE:</span> this method is NOT an appropriate time to call\n methods on visual components such as grids, initiate new DSRequests or RPCRequests, or\n in general do anything other than fill in fields on the DSResponse based on data that is\n already available.  Any actions that need to be taken as a result of the web\n service response should be implemented exactly as for a DataSource where\n <code>transformResponse()</code> has not been overriden, that is, use the callback\n passed to high-level methods such as \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','<code>grid.fetchData()</code>')}, and do error\n handling via either ${isc.DocUtils.linkForRef('method:DataSource.handleError')} or by setting\n ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError','willHandleError')}.\n\n",
        name:"transformResponse",
        seeAlso:[],
        params:[
            {description:"default DSResponse derived from the response data", optional:false, 
             name:"dsResponse",defaultValue:null, type:"DSResponse"},
            {description:"DSRequest object that initiated this request", optional:false, 
             name:"dsRequest",defaultValue:null, type:"DSRequest"},
            {description:"XML document or JSON objects returned by the web                                   service", 
             optional:false,name:"data", defaultValue:null, type:"XMLDocument or JSON"}
        ],
        returns:{description:"response derived", type:"DSResponse"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}"],
        definingClass:"class:DataSource"
    },
    "group:autoDraw":{
        ref:"group:autoDraw",
        refs:["classMethod:isc.setAutoDraw"],
        name:"autoDraw",
        seeAlso:[],
        type:"group"
    },
    "attr:DSRequest.data":{
        ref:"attr:DSRequest.data",
        flags:"IR",
        description:"Data, such as search criteria or an updated record, to be acted upon.  Contents differ by\n <code>operationType</code>, see ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Operations')} for\n details.\n <P>\n This field is generally filled in by passing the \"data\" argument to methods such as\n ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}.",
        name:"data",
        seeAlso:[],
        valueType:"Object or Array of Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "attr:StretchImgButton.labelHPad":{
        ref:"attr:StretchImgButton.labelHPad",
        flags:"IRW",
        description:"The padding for a StretchImgButton's label is determined as follows.\n <P>\n If <code>labelHPad</code> is set it will specify the horizontal padding applied to the\n label. Similarly if <code>labelVPad</code> is set it will specify the vertical padding\n for the label, regardless of the button's ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical','vertical')} setting.\n <P>\n Otherwise <code>labelLengthPad</code> can be set to specify the label padding along the\n length axis (ie: horizontal padding if ${isc.DocUtils.linkForRef('attr:StretchImgButton.vertical')} is false,\n otherwise vertical padding), and \n <code>labelBreadthPad</code> can be set to specify the label padding along the other axis.\n <P>\n Otherwise the padding on the length axis will match the ${isc.DocUtils.linkForRef('attr:StretchImgButton.capSize')} and\n will be set to zero on the breadth axis.\n <P>\n So by default the label will be sized to match the center image of the StretchImgButton, but\n these settings allow the label to partially or wholly overlap the caps.",
        name:"labelHPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "attr:SelectItem.allowEmptyValue":{
        ref:"attr:SelectItem.allowEmptyValue",
        flags:"IRW",
        description:"If set to true, always show an empty option in this item's pickList, allowing the user\n to clear the value (even if there is no empty entry in the valueMap for the item).\n <P>\n The empty value will be displayed with the\n ${isc.DocUtils.linkForRef('attr:FormItem.emptyDisplayValue','emptyDisplayValue')}.\n <P>\n With a ${isc.DocUtils.linkForRef('attr:SelectItem.optionDataSource','databound selectItem')}, enabling\n <code>allowEmptyValue</code> disables data paging - all data matching the\n ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria','current criteria')} will be requested.",
        name:"allowEmptyValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "type:DialogButtons":{
        ref:"type:DialogButtons",
        values:[
            {description:"Button object to fire dialog's \"okClick()\" method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.OK_BUTTON_TITLE')}.", 
             value:"OK"},
            {description:"Button object to fire dialog's \"applyClick()\" method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.APPLY_BUTTON_TITLE')}.", 
             value:"APPLY"},
            {description:"Button object to fire dialog's \"yesClick()\" method on click                  Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.YES_BUTTON_TITLE')}.", 
             value:"YES"},
            {description:"Button object to fire dialog's \"noClick()\" method on click.              Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.NO_BUTTON_TITLE')}.", 
             value:"NO"},
            {description:"Button object to fire dialog's \"cancelClick()\" method on click.                  Title derived from ${isc.DocUtils.linkForRef('classAttr:Dialog.CANCEL_BUTTON_TITLE')}.", 
             value:"CANCEL"}
        ],
        description:"Default buttons that you can use in your Dialogs.\n <P>\n On click these call canonical methods that you can override in your Dialog.\n <P>\n Refer to these buttons via the syntax <code>isc.Dialog.OK</code> when passing them into\n ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons')} or into the <code>properties</code> argument of helper\n methods such as ${isc.DocUtils.linkForRef('classMethod:isc.say')}.",
        name:"DialogButtons",
        seeAlso:[],
        type:"type"
    },
    "method:Canvas.destroy":{
        ref:"method:Canvas.destroy",
        flags:"A",
        description:"  Permanently destroy a Canvas.<br><br>\n  \n  This does everything that clear() does, but unlike clear(), the Canvas cannot be draw()'n again,\n  cannot be referenced by it's global ID, and is eligible for garbage collection (assuming that\n  application code is not holding a reference to the Canvas).<br><br>\n\n  Any attempt to call a method on a destroyed Canvas will generally result in an error.  If your\n  application is forced to hold onto Canvas's that might be destroy()d without warning, you can\n  avoid errors by checking for the ${isc.DocUtils.linkForRef('attr:Canvas.destroyed')} property.  If you override certain Canvas\n  methods, your code may be called while a Canvas is being destroy()d; in this case you can avoid\n  extra work (and possibly errors) by checking for the ${isc.DocUtils.linkForRef('attr:Canvas.destroying')} property.\n\n",
        name:"destroy",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas"
    },
    "method:TreeGrid.leafClick":{
        ref:"method:TreeGrid.leafClick",
        flags:"",
        description:"\n This method is called when a leaf record is clicked on.\n\n",
        name:"leafClick",
        seeAlso:[
            {ref:"method:TreeGrid.nodeClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which leafClick() occurred.", optional:false, name:"viewer", 
             defaultValue:null,type:"TreeGrid"},
            {description:"The leaf (record) that was clicked", optional:false, name:"leaf", 
             defaultValue:null,type:"TreeNode"},
            {description:"Index of the row where the click occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:SectionItem.sectionHeaderClass":{
        ref:"attr:SectionItem.sectionHeaderClass",
        flags:"IRA",
        description:"Canvas subclass to use as the SectionHeader.  See\n ${isc.DocUtils.linkForRef('attr:SectionStack.sectionHeaderClass')} for a description of how to use this\n property.",
        name:"sectionHeaderClass",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"SectionHeader\"",
        type:"attr",
        definingClass:"class:SectionItem"
    },
    "method:Tree.isDescendantOf":{
        ref:"method:Tree.isDescendantOf",
        flags:"",
        description:"			Is one node a descendant of the other?\n\n",
        name:"isDescendantOf",
        seeAlso:[],
        params:[
            {description:"child node", optional:false, name:"child", defaultValue:null, type:"TreeNode"},
            {description:"parent node", optional:false, name:"parent", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true == parent is an ancestor of child", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Slider.length":{
        ref:"attr:Slider.length",
        flags:"IRW",
        description:"Used to set slider height if vertical, slider width if horizontal.\n Applied to the slider track, not necessarily the entire widget.\n Overridden by an explicit width/height specification for the widget.",
        name:"length",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"200",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:Button.iconAlign":{
        ref:"attr:Button.iconAlign",
        flags:"IR",
        description:"If this button is showing an icon should it be right or left aligned?",
        name:"iconAlign",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "classAttr:RPCManager.removeDataPrompt":{
        ref:"classAttr:RPCManager.removeDataPrompt",
        flags:"IRW",
        description:"Default prompt displayed to user while an opration is running to remove data from\n the server.<br>\n Displayed as a result of the ${isc.DocUtils.linkForRef('method:ListGrid.removeSelectedData')} code path.",
        name:"removeDataPrompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Deleting Record(s)...\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["i18nMessages"]
    },
    "classAttr:Log.stackTracePriority":{
        ref:"classAttr:Log.stackTracePriority",
        flags:"IRWA",
        description:"At this priority and above, a stack trace will be included automatically along with the log\n message itself.",
        name:"stackTracePriority",
        seeAlso:[],
        valueType:"LogPriority",
        defaultValue:"Log.ERROR",
        type:"classAttr",
        definingClass:"class:Log"
    },
    "class:RichTextEditor":{
        methods:["method:RichTextEditor.getValue", "method:RichTextEditor.setValue"],
        ref:"class:RichTextEditor",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:RichTextEditor.value", "attr:RichTextEditor.controlGroups", 
         "attr:RichTextEditor.styleControls","attr:RichTextEditor.fontControls", "attr:RichTextEditor.fontNames", 
         "attr:RichTextEditor.fontSizes","attr:RichTextEditor.formatControls", "attr:RichTextEditor.colorControls"],
        description:"RichTextEditing component.  Provides a rich-text editing area along with UI for executing\n rich-text commands on the text.<br>\n The HTML generated from this component may vary by browser, and, as with any HTML \n value created on the client, we recommend values be sanitized on the server before \n storing and displaying to other users.<br>\n Note: This component has limited support on the Safari browser.",
        name:"RichTextEditor",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('RichTextEditor')}"]
    },
    "attr:Splitbar.showClosedGrip":{
        ref:"attr:Splitbar.showClosedGrip",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether the grip image\n displayed should show the <code>\"Closed\"</code> state when the ${isc.DocUtils.linkForRef('attr:Splitbar.target')} \n is hidden.",
        name:"showClosedGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["grip"]
    },
    "attr:Menu.checkmarkDisabledImage":{
        ref:"attr:Menu.checkmarkDisabledImage",
        flags:"IRWA",
        description:"Default image to display for disabled checkmarked items. See ${isc.DocUtils.linkForRef('object:ImgProperties')}\n for format. Valid src, width and height must be specified.",
        name:"checkmarkDisabledImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Menu"
    },
    "attr:Canvas.enabled":{
        deprecated:"As of SmartClient version 5.5 this property has been deprecated. The   ${isc.DocUtils.linkForRef('attr:Canvas.disabled')} property will be used to govern enabled/disabled state instead \n  if <code>this.enabled</code> has not been changed from its default value.",
        flags:"IRWA",
        type:"attr",
        ref:"attr:Canvas.enabled",
        description:"If set to true, this widget will be enabled, if set to false, or null, this \n widget will be disabled.",
        name:"enabled",
        setter:["setEnabled"],
        valueType:"boolean",
        seeAlso:[],
        defaultValue:"\"unset\"",
        groups:["enable"],
        definingClass:"class:Canvas"
    },
    "attr:ListGrid.canGroupBy":{
        ref:"attr:ListGrid.canGroupBy",
        flags:"IRW",
        description:"If false, grouping via context menu will be disabled.",
        name:"canGroupBy",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "method:Log.logError":{
        ref:"method:Log.logError",
        flags:"",
        description:" Log a message at \"error\" priority\n \n",
        name:"logError",
        seeAlso:[
            {ref:"method:Log.logDebug", description:"for usage info"}
        ],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:OperationBinding.responseDataSchema":{
        ref:"attr:OperationBinding.responseDataSchema",
        flags:"IRA",
        description:"Optional schema describing how to extract DataSource records from the XML elements selected.\n <P>\n Once a set of XML elements have been selected via <code>recordXPath</code> or\n <code>recordName</code>, those elements are normally transformed to JavaScript objects\n using the <code>fields</code> of the DataSource that owns the operationBinding.  An\n <code>responseDataSchema</code> can be specified instead if the XML differs in some way between\n different DataSource operations, such that different values for\n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','field.valueXPath')} may be necessary to extract the same\n DataSource record from slightly different XML structures.",
        name:"responseDataSchema",
        seeAlso:[],
        valueType:"DataSource",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:Canvas.showResizeBar":{
        flags:"IR",
        type:"attr",
        ref:"attr:Canvas.showResizeBar",
        description:"When this Canvas is included as a member in a Layout, whether a resizeBar should be shown\n after this member in the layout, to allow it to be resized.\n <p>\n By default the resize bar acts on the Canvas that it is declared on.  If you want the resize\n bar to instead act on the next member of the Layout (e.g. to collapse down or to the right),\n set ${isc.DocUtils.linkForRef('attr:Canvas.resizeBarTarget')} as well.",
        name:"showResizeBar",
        setter:["setShowResizeBar"],
        valueType:"boolean",
        seeAlso:[
            {ref:"attr:Canvas.resizeBarTarget", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('layoutNesting')}"],
        defaultValue:"false",
        groups:["layoutMember"],
        definingClass:"class:Canvas"
    },
    "method:TreeGrid.setSelectedPaths":{
        ref:"method:TreeGrid.setSelectedPaths",
        flags:"",
        description:" Reset this grid's selection to match the ${isc.DocUtils.linkForRef('type:listGridSelectedState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to \n ${isc.DocUtils.linkForRef('method:TreeGrid.getSelectedPaths')}.\n\n",
        name:"setSelectedPaths",
        seeAlso:[
            {ref:"method:TreeGrid.getSelectedPaths", description:null}
        ],
        params:[
            {description:"Object describing the desired selection state of                                              the grid", 
             optional:false,name:"selectedPaths", defaultValue:null, type:"listGridSelectedState"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "method:Tree.isLeaf":{
        ref:"method:Tree.isLeaf",
        flags:"",
        description:"\n Returns true if the passed in node is a leaf.\n\n",
        name:"isLeaf",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the node is a leaf", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:RPCRequest.bypassCache":{
        ref:"attr:RPCRequest.bypassCache",
        flags:"IRWA",
        description:"For xmlHttp transport + httpMethod: \"GET\"  only, set to true to force IE to send a conditional\n GET request even if the browser thinks it has a current cached response.",
        name:"bypassCache",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:Progressbar.percentDone":{
        ref:"attr:Progressbar.percentDone",
        flags:"IRW",
        description:"Number from 0 to 100, inclusive, for the percentage to be displayed graphically in\n this progressbar.",
        name:"percentDone",
        setter:["setPercentDone"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:Progressbar",
        groups:["appearance"]
    },
    "method:MenuBar.showMenu":{
        ref:"method:MenuBar.showMenu",
        flags:"",
        description:" Shows (opens) a menu.\n",
        name:"showMenu",
        seeAlso:[],
        params:[
            {description:"menu to show (may be specified as a menu object, or index of                                   the menu from ${isc.DocUtils.linkForRef('attr:MenuBar.menus','this.menus')}).", 
             optional:false,name:"menu", defaultValue:null, type:"Menu | integer"}
        ],
        type:"method",
        definingClass:"class:MenuBar"
    },
    "class:DSRequest":{
        methods:[],
        ref:"class:DSRequest",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:DSRequest.data", "attr:DSRequest.startRow", "attr:DSRequest.endRow", 
         "attr:DSRequest.dataSource","attr:DSRequest.operationType", "attr:DSRequest.sortBy", "attr:DSRequest.oldValues", 
         "attr:DSRequest.operationId","attr:DSRequest.textMatchStyle", "attr:DSRequest.clientContext", 
         "attr:DSRequest.parentNode","attr:DSRequest.resultTree", "attr:DSRequest.resultSet", "attr:DSRequest.useFlatFields", 
         "attr:DSRequest.useFlatHeaderFields","attr:DSRequest.headerData"],
        description:"Request sent to the server to initiate a \n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')}.  All properties which are legal on\n ${isc.DocUtils.linkForRef('class:RPCRequest')} are legal, in addition to the properties listed here.",
        name:"DSRequest",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        type:"class",
        inheritsFrom:"RPCRequest"
    },
    "attr:DetailViewer.fields":{
        ref:"attr:DetailViewer.fields",
        flags:"IRW",
        description:"An array of field objects, specifying the order and type of fields to display in this\n DetailViewer.  In DetailViewers, the fields specify rows.",
        name:"fields",
        seeAlso:[],
        valueType:"List of DetailViewerField",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DetailViewer"
    },
    "attr:ListGrid.recordCustomStyleProperty":{
        ref:"attr:ListGrid.recordCustomStyleProperty",
        flags:"IRW",
        description:"Denotes the name of a property that can be set on records to display a custom style.\n For example if this property is set to <code>\"customStyle\"</code>, setting \n <code>record.customStyle</code> to a css styleName will cause the record in question to\n render out with that styling applied to it.  Note that this will be a static \n style - it will not be modified as the state of the record (selected / over etc) changes.",
        name:"recordCustomStyleProperty",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null},
            {ref:"attr:ListGrid.recordBaseStyleProperty", description:null}
        ],
        valueType:"\"customStyle\"",
        defaultValue:"string",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "method:CubeGrid.facetValueReordered":{
        ref:"method:CubeGrid.facetValueReordered",
        flags:"",
        description:" \n      Notification fired when a facet or facetValueGroup is reordered\n\n      <br><i>methodType</i> handler\n",
        name:"facetValueReordered",
        seeAlso:[],
        params:[
            {description:"facetValueGroupId or facetId", optional:false, name:"groupId", 
             defaultValue:null,type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "classAttr:ValidatorTypes.doesntContain":{
        ref:"classAttr:ValidatorTypes.doesntContain",
        flags:"IR",
        description:"Determine whether a string value does not contain some substring specified via \n <code>validator.substring</code>.",
        name:"doesntContain",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:TabSet.paneContainerOverflow":{
        ref:"attr:TabSet.paneContainerOverflow",
        flags:"IRWA",
        description:"Specifies the overflow of the pane container (the component that holds the pane contents\n for all tabs).  By default this is set to \"auto\", meaning the pane container will\n automatically introduce scrolling when the pane contents exceed the TabSet's specified\n size.\n <p>\n For other values and their meaning, see ${isc.DocUtils.linkForRef('type:Overflow')}",
        name:"paneContainerOverflow",
        seeAlso:[],
        valueType:"Overflow",
        defaultValue:"Canvas.AUTO",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:Tree.isFolder":{
        ref:"method:Tree.isFolder",
        flags:"",
        description:"\n Determines whether a particular node is a folder.  The logic works as follows:<br><br>\n <ul>\n <li> If the ${isc.DocUtils.linkForRef('object:TreeNode')} has a value for the ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}\n (${isc.DocUtils.linkForRef('attr:TreeNode.isFolder')} by default) that value is returned.\n <li> Next, the existence of the ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')} (by default\n ${isc.DocUtils.linkForRef('attr:TreeNode.children')} is checked on the ${isc.DocUtils.linkForRef('object:TreeNode')}.  If the node has the children\n property defined (regardless of whether it actually has any children), then isFolder()\n returns true for that node.\n </ul>\n <P>\n You can override this method to provide your own intepretation of what constitutes a folder.\n\n",
        name:"isFolder",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the node is a folder", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:Log.echoLeaf":{
        ref:"method:Log.echoLeaf",
        flags:"",
        description:" Return a very short (generally less than 40 characters) string representation of any object,\n suitable for viewing by a developer for debugging purposes.\n\n",
        name:"echoLeaf",
        seeAlso:[
            {ref:"method:Log.echo", description:null}
        ],
        params:[
            {description:"object to echo", optional:false, name:"obj", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"method",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "attr:SectionStack.visibilityMode":{
        ref:"attr:SectionStack.visibilityMode",
        flags:"IRW",
        description:"Whether multiple sections can be visible at once",
        name:"visibilityMode",
        seeAlso:[
            {ref:"type:VisibilityMode", description:null}
        ],
        valueType:"VisibilityMode",
        defaultValue:"\"mutex\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"],
        definingClass:"class:SectionStack"
    },
    "classAttr:RPCManager.credentialsURL":{
        ref:"classAttr:RPCManager.credentialsURL",
        flags:"RWA",
        description:"Specifies URL where credentials should be submitted to attempt relogin when session\n timeout is encountered during a background RPC.  See ${isc.DocUtils.linkForRef('group:relogin','Relogin')}",
        name:"credentialsURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"RPCManager.credentialsURL",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["relogin"]
    },
    "attr:LinkItem.target":{
        ref:"attr:LinkItem.target",
        flags:"IRW",
        description:"By default, clicking a link rendered by this item opens it in a new browser window.  You can\n alter this behavior by setting this property.  The value of this property will be passed as the\n value to the <code>target</code> attribute of the anchor tag used to render the link.",
        name:"target",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"_blank\"",
        type:"attr",
        definingClass:"class:LinkItem"
    },
    "attr:ListGrid.canAcceptDroppedRecords":{
        ref:"attr:ListGrid.canAcceptDroppedRecords",
        flags:"IRW",
        description:"Indicates whether records can be dropped into this listGrid.",
        name:"canAcceptDroppedRecords",
        seeAlso:[
            {ref:"attr:ListGridRecord.canDrag", description:null},
            {ref:"attr:ListGridRecord.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragListMove')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "attr:ComboBoxItem.showPickListOnKeypress":{
        ref:"attr:ComboBoxItem.showPickListOnKeypress",
        flags:"IRW",
        description:"Should the list of options be displayed whenever the user types into the \n the combo-box textArea, or only when the user clicks on the pick button or uses the \n explicit <code>Alt+Arrow Down</code> key combo?",
        name:"showPickListOnKeypress",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:TabSet.pickerButtonHSrc":{
        ref:"attr:TabSet.pickerButtonHSrc",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is \n set to true, this property governs the base URL for the picker\n button image, when displayed in a horizontal tab-bar [IE ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')} is\n set to <code>\"top\"</code> or <code>\"bottom\"</code>].\n <P>\n Note that if <code>symmetricPickerButton</code> is false, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}\n property will be used instead.\n <P>\n This base URL will have a suffix of <code>\"Down\"</code> appended when the user holds the\n mouse down over the button, and <code>\"Disabled\"</code> if the tabset as a whole is \n disabled.",
        name:"pickerButtonHSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricPickerButton", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]hpicker.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "method:Array.contains":{
        ref:"method:Array.contains",
        flags:"",
        description:" Return if this list contains the specified object.\n <P>\n If pos is specified, starts looking after that position.\n\n",
        name:"contains",
        seeAlso:[],
        params:[
            {description:"item to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"optional position in the list to look after", optional:true, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == item was found, false == not found", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:ListGrid.confirmDiscardEditsMessage":{
        ref:"attr:ListGrid.confirmDiscardEditsMessage",
        flags:"IRW",
        description:"If <code>this.confirmDiscardEdits</code> is true, this property can be used to customize the\n error message string displayed to the user in a dialog with options to \n cancel the action, or save or discard pending edits in response to sort/filter actions\n that would otherwise drop unsaved edit values.",
        name:"confirmDiscardEditsMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"This action will discard all unsaved edited values for this list.\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing", "i18nMessages"]
    },
    "attr:ComboBoxItem.pickerIconSrc":{
        ref:"attr:ComboBoxItem.pickerIconSrc",
        flags:"IRWA",
        description:"Src for the picker icon",
        name:"pickerIconSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/ComboBoxItem_PickButton_icon.gif\"",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:TreeGrid.dropIconSuffix":{
        ref:"attr:TreeGrid.dropIconSuffix",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')} is true, this suffix will be appended to the\n ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} when the user drop-hovers over some folder.",
        name:"dropIconSuffix",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"drop\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:FormItem.fetchMissingValues":{
        ref:"attr:FormItem.fetchMissingValues",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} is specified for this item, should the item \n perform a fetch on the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} to retrieve the display value\n for the item when ${isc.DocUtils.linkForRef('method:FormItem.setValue')} is called with a value for which we\n do not already have a mapped display value?",
        name:"fetchMissingValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "method:Layout.addMember":{
        ref:"method:Layout.addMember",
        flags:"",
        description:"\n  Add a canvas to the layout, optionally at a specific position.\n\n",
        name:"addMember",
        seeAlso:[
            {ref:"method:Layout.addMembers", description:null}
        ],
        params:[
            {description:"the canvas object to be added to the layout", optional:false, 
             name:"newMember",defaultValue:null, type:"canvas"},
            {description:"the position in the layout to place newMember (starts with 0);                                  if omitted, it will be added at the last position", 
             optional:true,name:"position", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:CubeGrid.facetLabelHoverHeight":{
        ref:"attr:CubeGrid.facetLabelHoverHeight",
        flags:"IRWA",
        description:"If specified and <code>this.showHover</code> is true, this is the default height to apply\n to hover tips shown for facetLabels. If unset, hover canvas will be sized to \n <code>this.hoverHeight</code> if specified instead.",
        name:"facetLabelHoverHeight",
        seeAlso:[
            {ref:"attr:Canvas.hoverHeight", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "attr:ButtonItem.showTitle":{
        ref:"attr:ButtonItem.showTitle",
        flags:"IRW",
        description:"Buttons do not show a title by default.",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ButtonItem",
        groups:["appearance"]
    },
    "type:FireStyle":{
        ref:"type:FireStyle",
        values:[
            {description:"Call the registered handler any time the event occurs", value:"null"},
            {description:"Call the registered handler the first time the event                               occurs, then unregister the handler as though\n                               ${isc.DocUtils.linkForRef('classMethod:Page.clearEvent')} had been called", 
             value:"Page.FIRE_ONCE"}
        ],
        description:"Flags to set automatic removal of events from the page event registry.",
        name:"FireStyle",
        seeAlso:[
            {ref:"classMethod:Page.setEvent", description:null}
        ],
        type:"type",
        groups:["EventRegistry"]
    },
    "attr:GridRenderer.alternateRowStyles":{
        ref:"attr:GridRenderer.alternateRowStyles",
        flags:"IRW",
        description:"Whether alternating rows should be drawn in alternating styles, in order to create a \"ledger\"\n effect for easier reading.  If enabled, the cell style for alternate rows will have \"Dark\"\n appended to it.",
        name:"alternateRowStyles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "attr:Facet.showParentsLast":{
        ref:"attr:Facet.showParentsLast",
        flags:"IR",
        description:"Indicates internal hierarchy should be displayed in reverse of normal tree order (so\n that parents follow children)",
        name:"showParentsLast",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:Tree.defaultIsFolder":{
        ref:"attr:Tree.defaultIsFolder",
        flags:"IR",
        description:"Controls whether nodes are assumed to be folders or leaves by default.\n <P>\n Nodes that have children or have the ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')} set to true will be considered\n folders by default.  Other nodes will be considered folders or leaves by default according\n to this setting.",
        name:"defaultIsFolder",
        seeAlso:[
            {ref:"attr:TreeGrid.loadDataOnDemand", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Tree"
    },
    "group:paging":{
        ref:"group:paging",
        refs:["attr:DSResponse.startRow", "attr:DSResponse.endRow", "attr:DSResponse.totalRows", 
         "attr:DSRequest.startRow","attr:DSRequest.endRow"],
        name:"paging",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeGrid.initialData":{
        ref:"attr:TreeGrid.initialData",
        flags:"IRA",
        description:"You can specify the initial set of data for a databound TreeGrid using this property.\n The value of this attribute should be a list of <code>parentId</code> linked\n ${isc.DocUtils.linkForRef('object:TreeNode')}s in a format equivalent to that documented on ${isc.DocUtils.linkForRef('attr:Tree.data')}.",
        name:"initialData",
        seeAlso:[
            {ref:"object:TreeNode", description:null},
            {ref:"attr:Tree.data", description:null}
        ],
        valueType:"List of TreeNode",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('initialData')}"],
        definingClass:"class:TreeGrid"
    },
    "attr:ServerObject.bean":{
        ref:"attr:ServerObject.bean",
        flags:"IR",
        description:"For use when ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is <code>\"spring\"</code>, id of the bean to ask\n Spring to create.",
        name:"bean",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "attr:TabSet.animateTabScrolling":{
        ref:"attr:TabSet.animateTabScrolling",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} is true, should tabs be scrolled into view via an \n animation when the user interacts with the scroller buttons?",
        name:"animateTabScrolling",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "attr:ServerObject.className":{
        ref:"attr:ServerObject.className",
        flags:"IR",
        description:"Specifies the fully-qualified class name that provides the server-side endpoint of the DMI\n (${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:\"new\") or the class name of the factory that produces the\n DMI instance (${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:\"factory\").\n <p>\n This is one of the values that you need to pass to ${isc.DocUtils.linkForRef('classMethod:DMI.call')} to invoke the DMI from\n the client.\n <p>\n The value of this attribute is used only for <code>\"new\"</code> and <code>\"factory\"</code>\n values of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}.",
        name:"className",
        seeAlso:[
            {ref:"attr:ServerObject.lookupStyle", description:null},
            {ref:"attr:ServerObject.ID", description:null},
            {ref:"classMethod:DMI.call", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "method:CubeGrid.setFacetTitleAlign":{
        ref:"method:CubeGrid.setFacetTitleAlign",
        flags:"",
        description:"\n      set the align of a facet title (appears in facet label)\n\n      <br><i>methodType</i> setter\n",
        name:"setFacetTitleAlign",
        seeAlso:[],
        params:[
            {description:"facet to update", optional:false, name:"facetId", defaultValue:null, type:"id"},
            {description:"new alignment for facet title", optional:false, name:"align", 
             defaultValue:null,type:"alignEnum"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:Facet.borderBefore":{
        ref:"attr:Facet.borderBefore",
        flags:"IR",
        description:"CSS line style to apply as a border before this facet, eg \"1px dashed blue\"",
        name:"borderBefore",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:ListGrid.headerTitleStyle":{
        ref:"attr:ListGrid.headerTitleStyle",
        flags:"IR",
        description:"${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')} to apply to the buttons in the header, and the sorter,\n for this ListGrid.\n Note that this will typically only have an effect if \n ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')} is set to ${isc.DocUtils.linkForRef('class:StretchImgButton')} or a subclass \n thereof.",
        name:"headerTitleStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:DataSourceField.length":{
        ref:"attr:DataSourceField.length",
        flags:"IR",
        description:"Maximum number of characters allowed.  Applicable only to fields of text type.",
        name:"length",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('longText')}"],
        definingClass:"class:DataSourceField",
        groups:["dataType"]
    },
    "attr:Facet.values":{
        ref:"attr:Facet.values",
        flags:"IRW",
        description:"Array of facetValue definitions.",
        name:"values",
        seeAlso:[
            {ref:"class:FacetValue", description:null}
        ],
        valueType:"Array of FacetValue",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:Window.minimizeAcceleration":{
        ref:"attr:Window.minimizeAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated minimize / maximize.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"minimizeAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header", "animation"]
    },
    "attr:ImgSectionHeader.background":{
        ref:"attr:ImgSectionHeader.background",
        flags:"R",
        description:"Background of the section header, based on a StretchImg.",
        name:"background",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgSectionHeader"
    },
    "method:Class.getSuperClass":{
        ref:"method:Class.getSuperClass",
        flags:"",
        description:"	\n	Gets a pointer to the class object for this instance's superclass.\n\n",
        name:"getSuperClass",
        seeAlso:[],
        returns:{description:"Class object for superclass.", type:"Class"},
        type:"method",
        definingClass:"class:Class"
    },
    "method:Canvas.getImgURL":{
        ref:"method:Canvas.getImgURL",
        flags:"A",
        description:" Return the full URL for an image to be drawn in this canvas.\n <P>\n If the passed URL begins with the special prefix \"[SKIN]\", it will have the\n widget.skinImgDir and Page.skinImgDir prepended.  Otherwise the image is assumed to be\n application-specific, and will have the widget.appImgDir and Page.appImgDir automatically\n prepended.\n <P>\n Note that if passed an absolute path (starting with \"/\" or \"http://\" for example), no extra\n image directory information will be prepended to the generated URL.// \n		\n",
        name:"getImgURL",
        seeAlso:[],
        params:[
            {description:"URL local to skin or application image directory", optional:false, 
             name:"URL",defaultValue:null, type:"string"},
            {description:"optional image directory to override the default for this Canvas", 
             optional:true,name:"imgDir", defaultValue:null, type:"string"}
        ],
        returns:{description:"URL to use", type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "method:ImgButton.action":{
        ref:"method:ImgButton.action",
        flags:"",
        description:" This property contains the default 'action' for the Button to fire when activated.\n",
        name:"action",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton"
    },
    "classMethod:isc.setAutoDraw":{
        ref:"classMethod:isc.setAutoDraw",
        flags:"",
        description:" Set the global default setting for ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw')}.\n <p>\n After calling <code>isc.setAutoDraw()</code>, any newly created Canvas which is not given an\n explicit setting for ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw','autoDraw')} will follow the new default setting.\n <P>\n autoDraw:false is the recommended default setting for most applications since it ensures\n that extra draws will not occur when developers inadvertently omit the autoDraw:false\n setting on child components.\n\n",
        name:"setAutoDraw",
        seeAlso:[
            {ref:"attr:Canvas.autoDraw", description:null}
        ],
        params:[
            {description:"whether autoDraw should be enabled or disabled.  Defaults to true.", 
             optional:true,name:"enable", defaultValue:null, type:null}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["autoDraw"]
    },
    "attr:DataSourceField.hidden":{
        ref:"attr:DataSourceField.hidden",
        flags:"IR",
        description:"Whether this field should be hidden from users by default within a DataBound component.\n This is generally used for internal ids and other values not meaningful to users.",
        name:"hidden",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentBinding"]
    },
    "attr:FormItem.hoverVAlign":{
        ref:"attr:FormItem.hoverVAlign",
        flags:"IRW",
        description:"Vertical text alignment  for text displayed in this item's hover canvas, if shown.",
        name:"hoverVAlign",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverVAlign", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:DataSource.jsonPrefix":{
        ref:"attr:DataSource.jsonPrefix",
        flags:"IRA",
        description:"Allows you to specify an arbitrary prefix string to apply to all json format responses \n sent from the server to this application.<br>\n The inclusion of such a prefix ensures your code is not directly executable outside of\n your application, as a preventitive measure against\n <a href='http://www.google.com/search?q=javascript+hijacking' onclick=\"window.open('http://www.google.com/search?q=javascript+hijacking');return false;\">javascript hijacking</a>.\n <br>\n Only applies to responses formatted as json objects. Does not apply to responses returned\n via scriptInclude type transport.<br>\n Note: If the prefix / suffix served by your backend is not a constant, you can use \n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataFormat','dataFormat:\"custom\"')} instead and explicitly parse\n the prefix out as part of ${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse()')}.",
        name:"jsonPrefix",
        seeAlso:[
            {ref:"attr:OperationBinding.dataFormat", description:null},
            {ref:"attr:OperationBinding.dataTransport", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "method:ComboBoxItem.defaultDynamicValue":{
        ref:"method:ComboBoxItem.defaultDynamicValue",
        flags:"A",
        description:" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultValue')} when no value is \n provided for this item. To default to the first option use\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} instead.\n",
        name:"defaultDynamicValue",
        seeAlso:[],
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "classMethod:Log.applyLogPriorities":{
        ref:"classMethod:Log.applyLogPriorities",
        flags:"",
        description:" Apply a batch a batch of priority settings, as a object mapping category names to priority\n levels.\n\n",
        name:"applyLogPriorities",
        seeAlso:[],
        params:[
            {description:"priority settings for multiple categories", optional:false, name:"settings", 
             defaultValue:null,type:"Object"}
        ],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "group:elements":{
        ref:"group:elements",
        refs:["method:DynamicForm.setItems", "method:DynamicForm.setFields", 
         "method:DynamicForm.getFields","method:DynamicForm.getItems"],
        description:"Manipulating native form elements",
        name:"elements",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.filterData":{
        ref:"method:ListGrid.filterData",
        flags:"",
        description:" Retrieves data that matches the provided criteria and displays the matching data in this\n component.\n <P>\n This method behaves exactly like ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} except that\n ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is automatically set to \"substring\" so that String-valued\n fields are matched by case-insensitive substring comparison.\n\n",
        name:"filterData",
        seeAlso:[],
        params:[
            {description:"Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument\n                      instead of a raw criteria object, will be derived by calling\n                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}", 
             optional:true,name:"criteria", defaultValue:null, type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"for databound components only - optional                            additional properties to set on the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundFilter')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "method:Canvas.dragRepositionMove":{
        ref:"method:Canvas.dragRepositionMove",
        flags:"A",
        description:"\n Executed every time the mouse moves while drag-repositioning. If this method\n does not return false, the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline if\n ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to \"outline\" will automatically be moved as appropriate\n whenever the mouse moves.\n\n",
        name:"dragRepositionMove",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to suppress auto-move of the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} or outline.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:StretchImgButton.align":{
        ref:"attr:StretchImgButton.align",
        flags:"IRW",
        description:"Horizontal alignment of this component's title.",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["appearance"]
    },
    "attr:ListGridField.showFocusedIcon":{
        ref:"attr:ListGridField.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "attr:ListGrid.generateClickOnSpace":{
        ref:"attr:ListGrid.generateClickOnSpace",
        flags:"IRWA",
        description:"If true, when the user navigates to a cell using arrow keys and hits space, \n the cell will respond to a click event.",
        name:"generateClickOnSpace",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "attr:ImgButton.labelHPad":{
        ref:"attr:ImgButton.labelHPad",
        flags:"IRW",
        description:"Horizontal padding to be applied to this widget's label. If this value is null, \n the label will be given a horizontal padding of zero.\n <p>\n The specified amount of padding is applied to the left and right edges of the button, so\n the total amount of padding is 2x the specified value.",
        name:"labelHPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton"
    },
    "classMethod:Page.resizeTo":{
        ref:"classMethod:Page.resizeTo",
        flags:"",
        description:"		Resize the outer portion of the window to a specific width and height.\n",
        name:"resizeTo",
        seeAlso:[],
        params:[
            {description:"new width for the window", optional:false, name:"width", defaultValue:null, 
             type:"number"},
            {description:"new height for the window", optional:false, name:"height", defaultValue:null, 
             type:"number"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "attr:Canvas.showHover":{
        ref:"attr:Canvas.showHover",
        flags:"IRW",
        description:"If <code>this.canHover</code> is true, should we show the global hover canvas by default\n when the user hovers over this canvas?",
        name:"showHover",
        seeAlso:[
            {ref:"method:Canvas.getHoverHTML", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:Canvas.dragAppearance":{
        ref:"attr:Canvas.dragAppearance",
        flags:"IRWA",
        description:"Visual appearance to show when the object is being dragged.",
        name:"dragAppearance",
        seeAlso:[],
        valueType:"DragAppearance",
        defaultValue:"EventHandler.OUTLINE",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:Canvas.getLeft":{
        ref:"method:Canvas.getLeft",
        flags:"",
        description:"			Return the left coordinate of this object, relative to its enclosing context, in pixels.\n",
        name:"getLeft",
        seeAlso:[],
        returns:{description:"left coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:TreeGrid.leafContextClick":{
        ref:"method:TreeGrid.leafContextClick",
        flags:"",
        description:"\n This method is called when a context click occurs on a leaf record.\n\n",
        name:"leafContextClick",
        seeAlso:[
            {ref:"method:TreeGrid.nodeContextClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which the contexclick occurred.", optional:false, 
             name:"viewer",defaultValue:null, type:"TreeGrid"},
            {description:"The leaf (record) on which the contextclick occurred.", optional:false, 
             name:"leaf",defaultValue:null, type:"TreeNode"},
            {description:"Index of the row where the contextclick occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:ListGrid.modalEditing":{
        ref:"attr:ListGrid.modalEditing",
        flags:"IRWA",
        description:"If this property is true, any mouse click outside of the open cell editors\n      will end editing mode, hiding the cell editors and saving any changes to those\n      cell values.",
        name:"modalEditing",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('modalEditing')}"],
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Window.maximize":{
        ref:"method:Window.maximize",
        flags:"",
        description:" Maximize the window. Fired when the user clicks the maximize button if \n ${isc.DocUtils.linkForRef('attr:Window.showMaximizeButton','this.showMaximizeButton')} is true.<br>\n Default implementation moves the window to <code>0, 0</code> and resizes the window to \n <code>\"100%\"</code> on both axes, so it will fill the browser window (or the parentElement\n of the Window instance, if appropriate).<br>\n If ${isc.DocUtils.linkForRef('attr:Window.animateMinimize','animateMinimize')} is true, the maximize will be animated.\n A restore button will be displayed in place of the maximize button when the window is \n maximized.\n \n",
        name:"maximize",
        seeAlso:[],
        type:"method",
        definingClass:"class:Window"
    },
    "attr:ListGridField.iconVAlign":{
        ref:"attr:ListGridField.iconVAlign",
        flags:"IRA",
        description:"If this field is editable, this property will be passed to editors displayed for\n cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconVAlign')}.",
        name:"iconVAlign",
        seeAlso:[
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:TabBar.defaultTabSize":{
        ref:"attr:TabBar.defaultTabSize",
        flags:"IR",
        description:"Default size (length) in pixels for tabs within this tabBar",
        name:"defaultTabSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"80",
        type:"attr",
        definingClass:"class:TabBar"
    },
    "method:Canvas.getWidth":{
        ref:"method:Canvas.getWidth",
        flags:"",
        description:" Return the width of this object, in pixels.\n",
        name:"getWidth",
        seeAlso:[],
        returns:{description:"width", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:SelectItem.showPicker":{
        ref:"method:SelectItem.showPicker",
        flags:"",
        description:" Method to show a picker for this item. By default this method is called if the user\n clicks on a pickerIcon, shown by setting <code>this.showPickerIcon</code> to true. May\n also be called programatically.<br>\n Default implementation lazily creates a 'picker' from the set of defaults defined on\n this FormItem.\n",
        name:"showPicker",
        seeAlso:[],
        params:[
            {description:"Is this a modal picker", optional:true, name:"modal", defaultValue:null, 
             type:"boolean"},
            {description:"Pointer to the icon that launched this picker (if applicable)", 
             optional:true,name:"icon", defaultValue:null, type:"icon"},
            {description:"properties to apply to the picker", optional:true, name:"pickerProperties", 
             defaultValue:null,type:"object"},
            {description:"Object with <code>left, top, width, height</code> properties for                        positioning the picker.", 
             optional:true,name:"rect", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:SelectItem"
    },
    "method:ListGrid.cellHover":{
        ref:"method:ListGrid.cellHover",
        flags:"",
        description:" Called when the mouse hovers over a cell if this.canHover is true. \n  Returning false will suppress the hover text from being shown if this.showHover is true.\n\n",
        name:"cellHover",
        seeAlso:[
            {ref:"attr:ListGrid.canHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:Menu.setData":{
        ref:"method:Menu.setData",
        flags:"",
        description:" Change the set of items to display in this menu\n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"new items for this menu", optional:false, name:"items", defaultValue:null, 
             type:"array of MenuItems"}
        ],
        type:"method",
        definingClass:"class:Menu",
        groups:["data"]
    },
    "attr:Canvas.layoutAlign":{
        ref:"attr:Canvas.layoutAlign",
        flags:"IR",
        description:"When this Canvas is included as a member in a Layout, layoutAlign controls alignment on the\n breadth axis of the layout.  Default is \"left\" for a VLayout, \"top\" for an HLayout.",
        name:"layoutAlign",
        seeAlso:[],
        valueType:"Alignment or VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["layoutMember"]
    },
    "attr:Layout.paddingAsLayoutMargin":{
        ref:"attr:Layout.paddingAsLayoutMargin",
        flags:"IRWA",
        description:"If this widget has padding specified (as ${isc.DocUtils.linkForRef('attr:Canvas.padding','this.padding')} or in the\n CSS style applied to this layout), should it show up as space outside the members,\n similar to layoutMargin?\n <P>\n If this setting is false, padding will not affect member positioning (as CSS padding\n normally does not affect absolutely positioned children).  Leaving this setting true\n allows a designer to more effectively control layout purely from CSS.\n <P>\n Note that ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')} if specified, takes precidence over this value.",
        name:"paddingAsLayoutMargin",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "classMethod:Page.setTitle":{
        ref:"classMethod:Page.setTitle",
        flags:"",
        description:"		Set the title of the page, which is typically shown as part of the browser window title\n",
        name:"setTitle",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "attr:ComboBoxItem.defaultToFirstOption":{
        ref:"attr:ComboBoxItem.defaultToFirstOption",
        flags:"IRW",
        description:"Select the first option as the default value for this ComboBoxItem. If options are derived\n from a dataSource, the first value returned by the server will be used, otherwise the first\n value in the valueMap. If enabled, this setting overrides ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultValue')}\n and ${isc.DocUtils.linkForRef('method:ComboBoxItem.defaultDynamicValue')}|.",
        name:"defaultToFirstOption",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:MenuButton.setShowMenuButtonImage":{
        ref:"method:MenuButton.setShowMenuButtonImage",
        flags:"",
        description:" Setter for the 'showMenuButtonImage' property - shows/hides the menu button image\n at runtime\n",
        name:"setShowMenuButtonImage",
        seeAlso:[],
        params:[
            {description:"Should the image be shown", optional:false, name:"show", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:MenuButton"
    },
    "method:CubeGrid.discardAllEdits":{
        ref:"method:CubeGrid.discardAllEdits",
        flags:"A",
        description:"\n",
        name:"discardAllEdits",
        seeAlso:[],
        params:[
            {description:"allows you to specify which cell(s) to drop                   edits for. Each record should be identified as an array containing \n                  <code>[rowNum,colNum]</code>", 
             optional:true,name:"records", defaultValue:null, type:"array of 2-element arrays"},
            {description:"By default this method will hide the editor if                              it is currently showing for any row in the grid. Passing in\n                              this parameter will leave the editor visible (and just reset\n                              the edit values underneath the editor).", 
             optional:true,name:"dontHideEditor", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "attr:ListGrid.selection":{
        ref:"attr:ListGrid.selection",
        flags:"RA",
        getter:["getSelection"],
        description:"The Selection object associated with the listGrid.",
        name:"selection",
        seeAlso:[],
        valueType:"Selection",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "attr:Canvas.edgeOffset":{
        ref:"attr:Canvas.edgeOffset",
        flags:"IR",
        description:"Amount the contained Canvas should be offset.  Defaults to edgeSize; set to less than\n edgeSize to allow the contained Canvas to overlap the edge and corner media.",
        name:"edgeOffset",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('corners')}"],
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "class:Facet":{
        methods:[],
        ref:"class:Facet",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Analytics/CubeGrid"],
        attrs:["attr:Facet.id", "attr:Facet.title", "attr:Facet.values", "attr:Facet.rollupValue", 
         "attr:Facet.isTree","attr:Facet.showParentsLast", "attr:Facet.collapsed", "attr:Facet.canCollapse", 
         "attr:Facet.canMinimize","attr:Facet.width", "attr:Facet.align", "attr:Facet.titleAlign", "attr:Facet.cellAlign", 
         "attr:Facet.borderBefore","attr:Facet.borderAfter", "attr:Facet.selectionBoundary", "attr:Facet.summaryValue", 
         "attr:Facet.summaryTitle","attr:Facet.synchColumnLayout"],
        description:"Facet definition object made use of by the CubeGrid class.",
        name:"Facet",
        seeAlso:[],
        type:"class",
        requiresModules:["Analytics"]
    },
    "attr:Canvas.maxHeight":{
        ref:"attr:Canvas.maxHeight",
        flags:"IRWA",
        description:"Maximum height that this Canvas can be resized to.",
        name:"maxHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"10000",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:StretchImg.imageType":{
        ref:"attr:StretchImg.imageType",
        flags:"IRW",
        description:"Indicates whether the image should be tiled/cropped, stretched, or centered when the\n          size of this widget does not match the size of the image. See ImageStyle for\n          details.",
        name:"imageType",
        seeAlso:[],
        valueType:"ImageStyle",
        defaultValue:"Img.STRETCH",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "classMethod:Class.delayCall":{
        ref:"classMethod:Class.delayCall",
        flags:"",
        description:"  This is a helper to delay a call to a method on some target by a specified\n  amount of time.  Can be used to delay a call to a static method on this class by \n  ommiting the <code>target</code> parameter.\n",
        name:"delayCall",
        seeAlso:[],
        params:[
            {description:"name of the method to call", optional:false, name:"methodName", 
             defaultValue:null,type:"string"},
            {description:"array of arguments to pass to the method in question", optional:true, 
             name:"arrayArgs",defaultValue:null, type:"array"},
            {description:"Number of ms to delay the call by - defaults to zero (so just pulls                        execution of the method out of the current execution thread.", 
             optional:true,name:"time", defaultValue:null, type:"number"},
            {description:"Target to fire the method on - if unspecified assume this is                          a call to a classMethod on this Class.", 
             optional:true,name:"target", defaultValue:null, type:"object"}
        ],
        returns:{description:"Timer ID for the delayed call - can be passed to                       ${isc.DocUtils.linkForRef('classMethod:Timer.clear')} to cancel the call before it executes", 
         type:"string"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "method:ListGrid.getCellErrors":{
        ref:"method:ListGrid.getCellErrors",
        flags:"",
        description:"  Returns the current set of errors for this cell. \n",
        name:"getCellErrors",
        seeAlso:[],
        params:[
            {description:"index of row to check for validation errors.", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"field to check for validation errors - can be fieldName                                           or index of the column.", 
             optional:false,name:"fieldName", defaultValue:null, type:"string | number"}
        ],
        returns:{description:"array of error messages (strings) for the specified cell. If no validation                   errors are present, returns null.", 
         type:"array"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:Button.iconSpacing":{
        ref:"attr:Button.iconSpacing",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"iconSpacing",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "group:nonJavaBackend":{
        ref:"group:nonJavaBackend",
        title:".NET, PHP, Serverless Integration",
        treeLocation:["Concepts"],
        refs:[],
        description:"SmartClient is fully functional without installation of the Java server included in the SDK,\n and can be integrated with any server technology.  This topic providing pointers to\n documentation that is most relevant for this type of integration.\n <P>\n <h4>Installation</h4>\n <P>\n As described in ${isc.DocUtils.linkForRef('group:iscInstall','<i>Deploying SmartClient</i>')}, for a client-only\n integration, installation consists of just copying a directory of JavaScript and media files\n to your webserver.\n <P>\n <h4>Creating Components</h4>\n <P>\n SmartClient components can be included in any .html page, including dynamically generated pages\n produced by .php or .asp files.  The SmartClient libraries can be included in the page as\n follows:\n <pre>\n &lt;HTML&gt;&lt;HEAD&gt;\n &lt;SCRIPT&gt;var isomorphicDir=\"../isomorphic/\";&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Core.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Foundation.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Containers.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Grids.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_Forms.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/system/modules/ISC_DataBinding.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=../isomorphic/skins/SmartClient/load_skin.js&gt;&lt;/SCRIPT&gt;\n &lt;/HEAD&gt;&lt;BODY&gt;\n ...</pre>\n SmartClient components can then be created via normal JavaScript:\n <pre>\n &lt;SCRIPT&gt;\n isc.Button.create({\n     title:\"Button\",\n     click:\"isc.say('Hello World')\"\n });\n &lt;/SCRIPT&gt;</pre>\n This approach is discussed in more detail in the \n <a href='/docs/SmartClient_Quick_Start_Guide.pdf' onclick=\"window.open('/docs/SmartClient_Quick_Start_Guide.pdf');return false;\">QuickStart Guide</a>, Chapter 4, <i>Coding</i>.\n Note that JavaScript-based component instantiation is currently the recommended approach, and\n most examples are provided in the JavaScript format.\n <P>\n <h4>Data Loading / Data Binding</h4>\n <P>\n The primary focus of SmartClient integration is connecting DataSource operations to your\n server.  The ${isc.DocUtils.linkForRef('group:clientDataIntegration','Client-side Data Integration')} chapter covers\n the key approaches, including cookbook approaches for REST-based integration with any server\n that can return XML or JSON over HTTP.\n <P>\n <h4>Simple RPCs (non-DataSource requests)</h4>\n <P>\n You can implement simple RPCs as web service operations: use\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} to load the service definition, and then use\n ${isc.DocUtils.linkForRef('method:WebService.callOperation')} to call the operations.  Note that some server frameworks\n allow the generation of WSDL from server method signatures.\n <P>\n Alternatively, if your backend is capable of outputting \n <a href='http://www.json.org/' onclick=\"window.open('http://www.json.org/');return false;\">JSON</a> (JavaScript Object Notation), you can use \n ${isc.DocUtils.linkForRef('attr:RPCRequest.evalResult')} to directly turn JSON results into live JavaScript objects.\n ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} lets you load arbitrary server results, including\n JSON results that need to be processed before they can be eval()'d.\n <P>\n <h4>HTTPProxy: Cross-site or cross-port data loading</h4>\n <P>\n If you develop a prototype using the SmartClient SDK and SmartClient Java Server, and then\n you migrate the prototype to another server technology, you need to be aware that the\n SmartClient Java Server includes an HTTPProxy servlet that allows SmartClient interfaces to\n contact servers other than the origin server (bypassing what is called the\n <a href='http://www.google.com/search?q=same+origin+policy' onclick=\"window.open('http://www.google.com/search?q=same+origin+policy');return false;\">\"same origin policy\"</a>).\n <P>\n SmartClient uses the HttpProxy automatically when needed, so it may not be obvious that the\n HTTPProxy is in use.  Then, your migrated application will encounter errors attempting to\n contact the HTTPProxy servlet.\n <P>\n To avoid these errors, ensure that all services that your application uses are accessed\n using the same hostname and port as the page was loaded from.  In particular, watch for WSDL\n files, which contain the service URL - you may need to use ${isc.DocUtils.linkForRef('method:WebService.setLocation')}\n to ensure that the web service URL and page URL match.\n <P>\n If your production application really does need to access services or content hosted on\n other servers, typical practice is to persue normal SmartClient integration with your\n server, then write server-side code that contacts other hosts on behalf of your SmartClient\n interface.",
        name:"nonJavaBackend",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGridField.valueField":{
        ref:"attr:ListGridField.valueField",
        flags:"IRWA",
        description:"Specifies the ${isc.DocUtils.linkForRef('attr:ListGridField.optionDataSource')} field used to retrieve the stored\n values that are to be mapped to the display values (specified by\n ${isc.DocUtils.linkForRef('attr:ListGridField.displayField')}). Note that if this field is editable this will also\n be applied to this field's editors.",
        name:"valueField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "group:adminConsole":{
        ref:"group:adminConsole",
        title:"Admin Console",
        treeLocation:["Client Reference/Data Binding/DataSource"],
        refs:[],
        description:"The Admin Console allows you to configure database access for DataSources that use\n SmartClient's built-in ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')}.\n <P>\n NOTE: You must have the Isomorphic SmartClient package installed and your servlet engine\n started. \n <p>\n Direct your browser to the following URL to access the Admin Console: \n <p>\n &nbsp;&nbsp;<a href='http://localhost:8080/tools/adminConsole.jsp' onclick=\"window.open('http://localhost:8080/tools/adminConsole.jsp');return false;\">http://localhost:8080/tools/adminConsole.jsp</a>\n <p>\n The common default servlet engine port 8080 is used in the URL given above. Adjust your URL\n as necessary if you are using a different port and replace localhost with the machine name\n running the servlet engine if you are accessing it from a remote machine.\n <p>\n Note that the Admin Console interface is also available in the Developer Console as the\n \"DataBases\" tab.\n <P>\n <b>Test Data</b>\n <p>\n You can create a test file that contains a sample dataset which can be imported into your\n database table with the Admin Console.\n <p>\n The test file to use with your DataSource is specified in the <code>testFileName</code>\n DataSource configuration property. The test file uses the extension .data.xml.\n <p>\n The test data file should consist of a top-level &lt;List&gt; element containing a series of XML\n elements named after your DataSource's ID, each of which creates one DataSource\n record. Values for each field are given within tags named after the field name. \n <p>\n For example, the following XML is from the supplyItem.data.xml test data file supplied with\n the Isomorphic SmartClient package. This file is located in\n [webroot]/examples/shared/ds/test_data/.\n <p>\n <pre>\n &lt;List&gt;\n  &lt;supplyItem&gt;\n      &lt;description&gt;A revolutionary cushion-grip ballpoint pen that reduces \n          required gripping power, relieving stress and alleviating writing \n          fatigue. Excellent for people who suffer from arthritis or carpal \n          tunnel syndrome. Medium point, black ink. Refillable.&lt;/description&gt;\n      &lt;category&gt;1&lt;/category&gt;\n      &lt;itemRef&gt;ODC 204-502-153&lt;/itemRef&gt;\n      &lt;maxQuantity&gt;5&lt;/maxQuantity&gt;\n      &lt;requiresJustification&gt;0&lt;/requiresJustification&gt;\n      &lt;itemName&gt;Dr. Grip Pens -- Blue Barrel&lt;/itemName&gt;\n      &lt;itemID&gt;1&lt;/itemID&gt;\n      &lt;unitCost&gt;4.99&lt;/unitCost&gt;\n  &lt;/supplyItem&gt;\n  &lt;supplyItem&gt;\n      &lt;description&gt;A revolutionary cushion-grip ballpoint pen that reduces \n          required gripping power, relieving stress and alleviating writing \n          fatigue. Excellent for people who suffer from arthritis or carpal \n          tunnel syndrome. Medium point, black ink. Refillable.&lt;/description&gt;\n      &lt;category&gt;1&lt;/category&gt;\n      &lt;itemRef&gt;ODC 204-708-834&lt;/itemRef&gt;\n      &lt;maxQuantity&gt;5&lt;/maxQuantity&gt;\n      &lt;requiresJustification&gt;0&lt;/requiresJustification&gt;\n      &lt;itemName&gt;Dr. Grip Pens -- Black Barrel&lt;/itemName&gt;\n      &lt;itemID&gt;2&lt;/itemID&gt;\n      &lt;unitCost&gt;4.99&lt;/unitCost&gt;\n  &lt;/supplyItem&gt;\n  &lt;supplyItem&gt;\n      &lt;description&gt;Personalized business cards for all your networking \n          needs.&lt;/description&gt;\n      &lt;category&gt;2&lt;/category&gt;\n      &lt;itemRef&gt;&lt;/itemRef&gt;\n      &lt;maxQuantity&gt;500&lt;/maxQuantity&gt;\n      &lt;requiresJustification&gt;1&lt;/requiresJustification&gt;\n      &lt;itemName&gt;Personalized business cards -- 500 count&lt;/itemName&gt;\n      &lt;itemID&gt;3&lt;/itemID&gt;\n      &lt;unitCost&gt;25.00&lt;/unitCost&gt;\n  &lt;/supplyItem&gt;\n  ...\n &lt;List/&gt;\n </pre>\n \n Data for a tree-like DataSource can be specified with the same format.\n The following code example is from the supplyCategory.data.xml test data file. This file\n is also located in [webroot]/examples/shares/ds/test_data/. \n\n <pre>\n &lt;List&gt;\n     &lt;supplyCategory&gt;\n     	&lt;itemName&gt;Office Paper Products&lt;/itemName&gt;\n     	&lt;parentID&gt;root&lt;/parentID&gt;\n     &lt;/supplyCategory&gt;\n     &lt;supplyCategory&gt;\n     	&lt;itemName&gt;Calculator Rolls&lt;/itemName&gt;\n     	&lt;parentID&gt;Office Paper Products&lt;/parentID&gt;\n     &lt;/supplyCategory&gt;\n     &lt;supplyCategory&gt;\n     	&lt;itemName&gt;Adding Machine/calculator Roll&lt;/itemName&gt;\n     	&lt;parentID&gt;Calculator Rolls&lt;/parentID&gt;\n     &lt;/supplyCategory&gt;\n     . . .\n &lt;/List&gt;\n </pre>\n \n Notice that all records must define values for the itemName primary key field and for the\n parentID field that establishes the tree relationship.",
        name:"adminConsole",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:CubeGrid.facetValueHover":{
        ref:"method:CubeGrid.facetValueHover",
        flags:"",
        description:"    StringMethod handler fired when mouse hovers over a facetValue button in a header.\n  <br><i>methodType</i> handler\n",
        name:"facetValueHover",
        seeAlso:[],
        params:[
            {description:"facetValuesObject for the appropriate header button", optional:false, 
             name:"facetValues",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "classMethod:isc.logEchoAll":{
        ref:"classMethod:isc.logEchoAll",
        flags:"",
        description:" Logs the echoed object (using ${isc.DocUtils.linkForRef('classMethod:isc.echoAll')}) as a warning, prefixed with an\n optional message.\n\n",
        name:"logEchoAll",
        seeAlso:[
            {ref:"method:Log.logWarn", description:"for logging info"}
        ],
        params:[
            {description:"object to echo", optional:false, name:"value", defaultValue:null, type:"any"},
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"}
        ],
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:DynamicForm.errorOrientation":{
        ref:"attr:DynamicForm.errorOrientation",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, where should the error icon and text appear\n relative to form items?  Valid options are <code>\"top\"</code>, \n <code>\"bottom\"</code>, <code>\"left\"</code> or <code>\"right\"</code>.<br>\n May be overridden at the item level via ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}.",
        name:"errorOrientation",
        seeAlso:[],
        valueType:"align",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation", "appearance"]
    },
    "attr:DataSource.operationBindings":{
        ref:"attr:DataSource.operationBindings",
        flags:"IR",
        description:"Optional array of OperationBindings, which provide instructions to the DataSource about how each\n DSOperation is to be performed.\n <P>\n For DataSources bound to WSDL-described web services using\n ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')}, OperationBindings are used to bind each DataSource\n ${isc.DocUtils.linkForRef('attr:OperationBinding.operationType','operationType')} to an\n ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','operation')} of a WSDL-described \n ${isc.DocUtils.linkForRef('class:WebService','web service')}, so that a DataSource can both fetch and save data to a web\n service.\n <P>\n For example, this code accomplishes part of the binding to the \n <a href='http://www.google.com/search?q=sforce+partner+wsdl' onclick=\"window.open('http://www.google.com/search?q=sforce+partner+wsdl');return false;\">SalesForce partner web services</a>\n <pre>\n isc.DataSource.create({\n    serviceNamespace : \"urn:partner.soap.sforce.com\",\n    operationBindings : [\n        { operationType:\"fetch\", wsOperation:\"query\", recordName: \"sObject\" },\n        { operationType:\"update\", wsOperation:\"update\", recordName: \"SaveResult\" },\n        { operationType:\"add\", wsOperation:\"create\", recordName: \"SaveResult\" },\n        { operationType:\"remove\", wsOperation:\"delete\", recordName: \"DeleteResult\" }\n    ],\n    ...\n }); \n </pre>\n NOTE: additional code is required to handle authentication and other details, see the\n complete code in isomorphicSDK/examples/databinding/SalesForce.\n <P>\n For DataSources that contact non-WSDL-described XML or JSON services, OperationBindings can\n be used to separately configure the URL, HTTP method, input and output processing for each\n operationType.  This makes it possible to fetch JSON data from one URL for the \"fetch\"\n operationType and save to a web service for the \"update\" operationType, while appearing as a\n single integrated DataSource to a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} such as an\n ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit','editable ListGrid')}.\n <P>\n If no operationBinding is defined for a given DataSource operation, all of the properties\n which are valid on the operationBinding are checked for on the DataSource itself.  \n <P>\n This also means that a read-only DataSource, that is, a DataSource only capable of fetch\n operations, operationBindings need not be specified, and instead all operationBinding\n properties can be set on the DataSource itself.  An example of using OperationBinding\n properties directly on the DataSource in order to read an RSS feed can be found here:\n <P>\n ${isc.DocUtils.linkForStandaloneExample('/examples/databinding/rss_databinding.html', '/examples/databinding/rss_databinding.html')}",
        name:"operationBindings",
        seeAlso:[
            {ref:"class:OperationBinding", description:null}
        ],
        valueType:"Array of OperationBinding",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "attr:Canvas.hoverMoveWithMouse":{
        ref:"attr:Canvas.hoverMoveWithMouse",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, should this widget's hover canvas be moved with\n the mouse while visible?",
        name:"hoverMoveWithMouse",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:ListGridField.editorExit":{
        ref:"method:ListGridField.editorExit",
        flags:"A",
        description:" Callback fired when the user attempts to navigate away from the current edit cell, \n or complete the current edit.<br>\n Return false from this method to cancel the default behavior (Saving / cancelling the\n current edit / moving to the next edit cell)\n\n",
        name:"editorExit",
        seeAlso:[
            {ref:"method:ListGrid.editorExit", description:null}
        ],
        params:[
            {description:"What interaction triggered this                                                          edit cell exit", 
             optional:false,name:"editCompletionEvent", defaultValue:null, type:"EditCompletionEvent"},
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"new value for the cell being edited", optional:false, name:"newValue", 
             defaultValue:null,type:"any"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"},
            {description:"ListGrid to which this field belongs", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        returns:{description:"Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus\n                      in this edit cell.", 
         type:"boolean"},
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:TextItem.getHint":{
        ref:"method:TextItem.getHint",
        flags:"A",
        description:"	Returns the hint text for this item. Default implementation returns ${isc.DocUtils.linkForRef('attr:FormItem.hint')}, or\n  null if there is no hint to show.\n\n",
        name:"getHint",
        seeAlso:[],
        returns:{description:"HTML to show as the hint for the item", type:"HTML"},
        type:"method",
        definingClass:"class:TextItem",
        groups:["appearance"]
    },
    "attr:Applet.archive":{
        ref:"attr:Applet.archive",
        flags:"IR",
        description:"URL to the applet JAR or ZIP archive.",
        name:"archive",
        seeAlso:[
            {ref:"attr:Applet.code", description:null},
            {ref:"attr:Applet.codeBase", description:null}
        ],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:ResultSet.criteria":{
        ref:"attr:ResultSet.criteria",
        flags:"IRW",
        getter:["getCriteria"],
        description:"Filter criteria used whenever records are retrieved.\n <P>\n Changing the filter criteria via <code>setCriteria</code> will cause the current cached\n records to be dropped.",
        name:"criteria",
        setter:["setCriteria"],
        seeAlso:[
            {ref:"method:ResultSet.setCriteria", description:null}
        ],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "method:DynamicForm.getValues":{
        ref:"method:DynamicForm.getValues",
        flags:"",
        description:" An Object containing the values of the form as properties, where each propertyName is\n the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and each property value is the value\n held by that form item.\n\n",
        name:"getValues",
        seeAlso:[],
        returns:{description:"values in the form", type:"Object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:ToolStrip.separatorSize":{
        ref:"attr:ToolStrip.separatorSize",
        flags:"IR",
        description:"Separator thickness in pixels",
        name:"separatorSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"8",
        type:"attr",
        definingClass:"class:ToolStrip"
    },
    "method:Window.setAutoSize":{
        ref:"method:Window.setAutoSize",
        flags:"",
        description:" Setter for ${isc.DocUtils.linkForRef('attr:Window.autoSize')}\n",
        name:"setAutoSize",
        seeAlso:[],
        params:[
            {description:"true if the window should auto-size to its content", optional:false, 
             name:"autoSize",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Window"
    },
    "object:Tab":{
        methods:[],
        ref:"object:Tab",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/TabSet"],
        attrs:["attr:Tab.title", "attr:Tab.pickerTitle", "attr:Tab.pane", "attr:Tab.ID", "attr:Tab.width", 
         "attr:Tab.disabled","attr:Tab.icon", "attr:Tab.canClose", "attr:Tab.closeIcon"],
        description:"Tabs are specified as objects, not class instances.  For example, when\n developing in JavaScript, a typical initialization block for a TabSet would look like\n this:\n <pre>\n TabSet.create({\n     tabs: [\n         {title: \"tab1\", pane: \"pane1\"},\n         {title: \"tab2\"}\n     ]\n });\n </pre>\n And in XML:\n <pre>\n &lt;TabSet&gt;\n    &lt;tabs&gt;\n        &lt;Tab title=\"tab1\" pane=\"pane1\"/&gt;\n        &lt;Tab title=\"tab2\"/&gt;\n    &lt;/tabs&gt;\n &lt;/TabSet&gt;\n </pre>",
        name:"Tab",
        seeAlso:[],
        type:"object"
    },
    "attr:Canvas.edgeBackgroundColor":{
        ref:"attr:Canvas.edgeBackgroundColor",
        flags:"IR",
        description:"Background color for the EdgedCanvas created to decorate this component.  This can be used\n to provide an underlying \"tint\" color for translucent edge media",
        name:"edgeBackgroundColor",
        seeAlso:[],
        valueType:"Color",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "method:Toolbar.itemClick":{
        ref:"method:Toolbar.itemClick",
        flags:"A",
        description:"	Called when one of the buttons recieved a click event\n",
        name:"itemClick",
        seeAlso:[],
        params:[
            {description:"pointer to the button in question", optional:false, name:"item", 
             defaultValue:null,type:"button"},
            {description:"number of the button in question", optional:false, name:"itemNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Toolbar",
        groups:["event handling"]
    },
    "classMethod:EventHandler.altKeyDown":{
        ref:"classMethod:EventHandler.altKeyDown",
        flags:"",
        description:"			Return true if the alt (option) key is being held down.\n			Note that this is only set reliably for keyboard events.\n\n",
        name:"altKeyDown",
        seeAlso:[],
        returns:{description:"true == alt key is down", type:"boolean"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["keyboardEvents"]
    },
    "method:GridRenderer.getDrawnRows":{
        ref:"method:GridRenderer.getDrawnRows",
        flags:"",
        description:" Get the rows that are currently drawn (exist in the DOM), as an array of [firstRowNum,\n lastRowNum].  \n <P>\n The drawn rows differ from the ${isc.DocUtils.linkForRef('method:GridRenderer.getVisibleRows','visibleRows')} because of\n ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio','drawAhead')}.  The drawn rows are the apppropriate range to consider if\n you need to, eg, using ${isc.DocUtils.linkForRef('method:GridRenderer.refreshCell')} to update all the cells in a column.\n <P>\n If the grid is undrawn or the ${isc.DocUtils.linkForRef('attr:GridRenderer.emptyMessage')} is currently shown, returns\n [null,null];\n\n",
        name:"getDrawnRows",
        seeAlso:[],
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "group:valueMap":{
        ref:"group:valueMap",
        refs:["method:FormItem.getDisplayValue", "method:FormItem.setValueMap", 
         "method:CheckboxItem.setValueMap","attr:FormItem.valueMap", "attr:CheckboxItem.valueMap"],
        description:"Mapping from stored values to user-visible values",
        name:"valueMap",
        seeAlso:[],
        type:"group"
    },
    "attr:TextAreaItem.textBoxStyle":{
        ref:"attr:TextAreaItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class to apply to this item's input element.\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"textItem\"",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["appearance"]
    },
    "attr:Facet.id":{
        ref:"attr:Facet.id",
        flags:"IR",
        description:"id of this facet.  Any string or number.",
        name:"id",
        seeAlso:[],
        valueType:"String | Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "class:DMI":{
        methods:[],
        ref:"class:DMI",
        classAttrs:[],
        classMethods:["classMethod:DMI.call"],
        treeLocation:["Client Reference/RPC"],
        attrs:[],
        description:"Direct Method Invocation (DMI) allows background HTTP requests to directly\n invoke methods on server-side objects via XML configuration.\n <P>\n DMI is an alternative to the ${isc.DocUtils.linkForRef('classAttr:RPCManager.actionURL')} approach where your server code\n receives a generalized ${isc.DocUtils.linkForRef('class:RPCRequest','request object')} which you route to appropriate\n methods yourself.  Which interface (DMI or RPCManager) you choose is largely a matter of\n preference - they provide equivalent functionality.  Note that there are also several\n approaches for ${isc.DocUtils.linkForRef('group:nonJavaBackend','non-Java backends')} and/or Java backends not\n running the ISC server.\n <p>\n When using DMI, inbound request data is translated to Java objects and passed as method\n parameters to the designated method, with available request data matched to each declared\n parameter by Java type.  The return value of your method is automatically wrapped as a valid\n response and delivered to the browser.\n <P>\n <u><b>DataSource DMI</b></u>\n <br>\n To enable DMI for a given DataSource, simply include a <code>&lt;serverObject&gt;</code>\n configuration block in that DataSource's configuration either at\n ${isc.DocUtils.linkForRef('attr:DataSource.serverObject')} or on a particular operationBinding via\n ${isc.DocUtils.linkForRef('attr:OperationBinding.serverObject')}.  The ServerObject specifies the target of the method\n invocation and ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} specifies the method that will be\n called.\n <P>\n For example, the following Datasource DMI declaration would route \"fetch\" operations for\n this DataSource to the method \"fetch\" on an object stored in the servlet session under the\n name \"beanFetcher\":\n <pre>\n &lt;DataSource&gt;\n   &lt;operationBindings&gt;\n       &lt;binding operationType=\"fetch\" serverMethod=\"fetch\"&gt;\n           &lt;serverObject  \n                lookupStyle=\"attribute\" \n                attributeScope=\"session\" \n                attributeName=\"beanFetcher\"/&gt;\n       &lt;/binding&gt;\n   &lt;/operationBindings&gt;\n   ...\n &lt;/DataSource&gt;\n </pre>\n Method overloading is not supported - there must be exactly one method on the target class\n with the name specified in ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')}.  The method must be public,\n but can be either an instance or static method.  If no operationBinding is specified or the\n operationBinding does not specify a <code>serverMethod</code> then it defaults to the name of\n the operation (eg \"fetch\").\n <p>\n By default, the DSResponse data sent back by DataSource DMIs is filtered to just the set of\n fields specified on the DataSource.  This allows you to simply return beans that potentially\n have getter methods for fields other than are defined in the DataSource without that\n (potentially private) data being sent to the client.  If you want to disable this\n functionality, you can do so by on a per-operation basis by setting\n ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')}, on a per-DataSource level by setting\n ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')}, or globally by setting the config parameter\n <code>DMI.dropExtraFields</code> to <code>false</code> in\n <code>[webroot]/WEB-INF/classes/server.properties</code>.  Non-DMI DSResponse data is, by\n default, not filtered in this matter for backwards compatibility reasons.  If you want to\n enable this type of filtering for non-DMI DSResponse data, you can do so by setting the\n config parameter <code>DSResponse.dropExtraFields</code> to <code>true</code> in\n <code>[webroot]/WEB-INF/classes/server.properties</code>.  <code>DMI.dropExtraFields</code>\n and <code>DSResponse.dropExtraFields</code> can be enabled/disabled independently of each\n other - that is, setting one does not side-effect the other.  <code>server.properties</code>\n settings can be overridden by an explicit setting in ${isc.DocUtils.linkForRef('attr:DataSource.dropExtraFields')} which\n in turn can be overridden by an explicit setting in ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')} (this\n last one for DMI only since non-DMI operations don't have a serverObject context).\n <p>\n <u><b>RPC DMI</b></u>\n <br>\n RPC DMI makes a set of methods from a server-side class available as client-side methods for\n direct invocation.  RPC DMI also uses a ${isc.DocUtils.linkForRef('class:ServerObject')} configuration block to specify\n the server-side DMI end-point, but in the case of RPCs, the ${isc.DocUtils.linkForRef('class:ServerObject')} definition\n goes into an <code>rpcBindings</code> section of an <code>Application</code> definition in a\n .app.xml file.  For an example, see the <code>example.app.xml</code> file in the /shared/app\n directory of the SmartClient SDK.  The only difference between the RPC DMI\n ServerObject definition and the DataSource DMI version is the addition of the\n ${isc.DocUtils.linkForRef('attr:ServerObject.visibleMethods')} block that specifies which methods are callable on this\n ServerObject.  This section is not consulted for DataSource DMIs because the\n ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} is used to specify the callable method in that case.\n <p>\n <u><b>Method Invocation</b></u>\n <br>\n SmartClient can pass a set of stock context variables to your DMI method and also performs\n some type adaptation logic to make this interface more flexible.  For DataSource DMI, you\n can declare your method to take any number of the following types of arguments and they will\n be passed to you:\n <ul>\n <li>HttpServletRequest\n <li>HttpServletResponse\n <li>ServletContext\n <li>HttpSession\n <li>RPCManager\n <li>DSRequest\n <li>RequestContext (from com.isomorphic.servlet)\n <li>DataSource (same as DSRequest.getDataSource())\n <li>Map (same as DSRequest.getValues())\n <li>Bean (auto-populated from DSRequest.getValues())\n </ul>\n DataSource DMI methods can return any of the following types of values:\n <ul>\n <li>DSResponse (used as the DSResponse verbatim)\n <li>List (valid response to a fetch operation - gets auto-popuplated into a DSResponse for\n you via setData())\n <li>Map or Bean (valid response to add, update, remove operations - gets auto-populated\n into a DSResponse for you via setData()).\n </ul>\n Note that to take advantage of some SmartClient features like paging and custom validation,\n you need to return a DSResponse and provide the required metadata (like\n startRow/endRow/totalRows for paging).  You can simply return a <code>List</code> instead,\n but this won't work for large datasets.\n <p>\n So, for example, all of the following DataSource DMI method signatures are valid:\n <pre>\n public List myFetch(Map criteria)\n public List myFetch(SupplyItem criteria)\n public DSResponse myAdd(HttpSession session, \n                         DataSource ds, \n                         DSRequest dsRequest)\n </pre>\n <p>\n See\n <a href='/examples/server_integration/#customDataSourceIntegrationDMI' onclick=\"window.open('/examples/server_integration/#customDataSourceIntegrationDMI');return false;\">the supplyItemDMI example</a>\n for an example of DataSource DMI.\n <p>\n <p>\n RPC DMIs work slighly differently.  Unlike DataSource DMIs, RPC DMIs can have an arbitrary\n number of required arguments, and also some optional context arguments.  For example, let's\n say you call a method from the client like so (note that there's a cleaner way to invoke\n DMIs if you use the ${isc.DocUtils.linkForRef('group:loadDMIStubsTag')} JSP tag):\n <pre>\n DMI.call(\"myApp\", \"com.foo.MyClass\", \"doSomething\",\n          1, \"zoo\", [1, 2, 3], \"clientCallback()\");\n </pre>\n The server-side implementation of method <code>doSomething</code> must take a least three\n arguments of the type used above - specifically a Number, String, and List.  SmartClient\n will try to adapt arguments where possible - so for example the first argument can be a Long\n or an Integer instead and the invocation will still work.  Also, an object literal passed\n from the client becomes a Map on the server and will be automatically applied to a bean if\n the method argument takes a Bean in that position.  See ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} for a table\n of type conversions.  You can use native types in the server-side signature for things like\n Integer, Long, etc - so e.g. you can specify your method taking an int or long. In addition\n to the required arguments, you can pass the following optional arguments:\n <ul>\n <li>HttpServletRequest\n <li>HttpServletResponse\n <li>HttpSession\n <li>RPCManager\n <li>RPCRequest\n </ul>\n See\n <a href='/examples/server_integration/#genericRPCIntegrationDMI' onclick=\"window.open('/examples/server_integration/#genericRPCIntegrationDMI');return false;\">the getTimeStampDMI example</a>\n for an example of RPC DMI.",
        name:"DMI",
        seeAlso:[
            {ref:"group:loadDMIStubsTag", description:null},
            {ref:"class:ServerObject", description:null},
            {ref:"attr:DataSource.serverObject", description:null},
            {ref:"attr:OperationBinding.serverObject", description:null},
            {ref:"group:clientServerIntegration", description:null}
        ],
        type:"class",
        requiresModules:["SCServer"]
    },
    "attr:ComboBoxItem.textMatchStyle":{
        ref:"attr:ComboBoxItem.textMatchStyle",
        flags:"IR",
        description:"When applying filter criteria to pickList data, what type of matching to use.  Legal\n values are \"substring\" (value contains user input) or \"startsWith\" (value starts with\n user input.  Both matches are case insensitive.\n <P>\n For a databound pickList (${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource')} set), <code>textMatchStyle</code> is\n sent to the server as ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')}.\n <P>\n For a non-databound pickList, <code>textMatchStyle</code> is applied by \n ${isc.DocUtils.linkForRef('method:ComboBoxItem.filterClientPickListData')}.",
        name:"textMatchStyle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"startsWith\"",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:Canvas.setPageTop":{
        ref:"method:Canvas.setPageTop",
        flags:"",
        description:" Set the page-relative top coordinate of this widget.\n \n",
        name:"setPageTop",
        seeAlso:[],
        params:[
            {description:"new top coordinate in pixels", optional:false, name:"top", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:Dialog.okClick":{
        ref:"method:Dialog.okClick",
        flags:"",
        description:" Handle a click on the 'ok' button of this Dialog.\n Default implementation is to call <code>saveData()</code>, hide the Dialog, then return\n <code>true</code>.  \n Override to do something else.\n",
        name:"okClick",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "method:ListGrid.rowOver":{
        ref:"method:ListGrid.rowOver",
        flags:"",
        description:" Called when the mouse pointer enters a row\n\n",
        name:"rowOver",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:DSRequest.sortBy":{
        ref:"attr:DSRequest.sortBy",
        flags:"IR",
        description:"Fieldname to sortBy, prefixed with optional \"-\" indicating descending sort.  For example, to\n sort by the field \"userName\" in ascending order, set <code>sortBy</code> to just\n \"userName\".  For descending sort on \"userName\", set <code>sortBy</code> to \"-userName\".",
        name:"sortBy",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "method:CubeGrid.getFacetValue":{
        ref:"method:CubeGrid.getFacetValue",
        flags:"",
        description:" Get facet value definition by facetId and facetValueId.  Constant time.\n\n",
        name:"getFacetValue",
        seeAlso:[
            {ref:"class:FacetValue", description:null}
        ],
        params:[
            {description:"the id of the facet to retrieve", optional:false, name:"facetId", 
             defaultValue:null,type:"String"},
            {description:"the id of the facet value to retrieve", optional:false, name:"facetValueId", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"the FacetValue if found, or null", type:"FacetValue"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "method:ListGrid.unfreezeField":{
        ref:"method:ListGrid.unfreezeField",
        flags:"",
        description:" Unfreeze a frozen field, so that it will now scroll along with other fields when horizontal\n scrolling occurs.\n\n",
        name:"unfreezeField",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"field", defaultValue:null, 
             type:"ListGridField or colNum or ListGridField.name"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["frozenFields"]
    },
    "attr:Slider.labelHeight":{
        ref:"attr:Slider.labelHeight",
        flags:"IRW",
        description:"The height of the labels used to display the minimum, maximum and current values of the\n slider.",
        name:"labelHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:Slider"
    },
    "group:modal":{
        ref:"group:modal",
        refs:["method:Window.flash", "attr:Window.isModal", "attr:Window.modalMask", 
         "attr:Window.showModalMask","attr:Window.modalMaskOpacity", "attr:Window.modalMaskStyle", 
         "attr:Window.dismissOnOutsideClick"],
        name:"modal",
        seeAlso:[],
        type:"group"
    },
    "attr:RPCResponse.status":{
        ref:"attr:RPCResponse.status",
        flags:"R",
        description:"Status code for this response.  Status codes less than zero are considered errors by the\n RPCManager, those greater than or equal to zero are considered successes.  Please see the\n error handling section the ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager docs')} for more information on\n what the RPCManager does with the status code and how you can override this behavior.\n <P>\n When using the SmartClient server you can set the rpcResponse.status by calling the\n server-side method RPCResponse.setStatus().  \n <P>\n When not using the SmartClient server, the RPCManager makes no assumptions about the\n structure of the response, so the status code just reflects the\n ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}: status will be \n ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_TRANSPORT_ERROR','STATUS_TRANSPORT_ERROR')} if an HTTP-level error\n occurred such as \"500 server error\".  If you have a status code you need to transmit you can\n simply embed it in the response (as part of ${isc.DocUtils.linkForRef('attr:RPCResponse.data')}) and interpret it from\n the callback.\n <P>\n With or without the SmartClient server, the ${isc.DocUtils.linkForRef('group:relogin')} status codes (such as \n ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_LOGIN_REQUIRED')}) are triggered whenever special markers, such as the\n loginRequiredMarker, appear in the body of the response.  See the ${isc.DocUtils.linkForRef('group:relogin','Relogin\n Overview')} for details.",
        name:"status",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCResponse"
    },
    "attr:Canvas.minHeight":{
        ref:"attr:Canvas.minHeight",
        flags:"IRWA",
        description:"Minimum height that this Canvas can be resized to.\n <P>\n Note that a Canvas with overflow:\"visible\" has an implicit minimize size based on it's\n contents.",
        name:"minHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"10",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "group:xmlSerialize":{
        ref:"group:xmlSerialize",
        refs:["attr:DataSourceField.xmlAttribute", "attr:DataSourceField.multiple"],
        name:"xmlSerialize",
        seeAlso:[],
        type:"group"
    },
    "classMethod:Class.map":{
        ref:"classMethod:Class.map",
        flags:"",
        description:"\n Call <code>method</code> on each item in <code>argsList</code> and return the Array of results.\n\n",
        name:"map",
        seeAlso:[],
        params:[
            {description:"Name of the method on this instance which should be called on each element of the Array", 
             optional:false,name:"methodName", defaultValue:null, type:"string"},
            {description:"Array of items to call the method on", optional:false, name:"items", 
             defaultValue:null,type:"Array"}
        ],
        returns:{description:"Array of results, one per element in the passed \"items\" Array", type:"Array"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:Canvas.border":{
        ref:"attr:Canvas.border",
        flags:"IRW",
        description:"Set the CSS border of this component, as a CSS string including border-width,\n border-style, and/or color (eg \"2px solid blue\").\n <P>\n This property applies the same border to all four sides of this component.  Different\n per-side borders can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.",
        name:"border",
        setter:["setBorder"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "classMethod:isc.logEcho":{
        ref:"classMethod:isc.logEcho",
        flags:"",
        description:" Logs the echoed object (using ${isc.DocUtils.linkForRef('classMethod:isc.echo')}) as a warning, prefixed with an\n optional message.\n\n",
        name:"logEcho",
        seeAlso:[
            {ref:"method:Log.logWarn", description:"for logging info"}
        ],
        params:[
            {description:"object to echo", optional:false, name:"value", defaultValue:null, type:"any"},
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"}
        ],
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:DateChooser.showTodayButton":{
        ref:"attr:DateChooser.showTodayButton",
        flags:"IRW",
        description:"Determines whether the \"Today\" button will be displayed, allowing the user to select \n the current date.",
        name:"showTodayButton",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:StatefulCanvas.redrawOnStateChange":{
        ref:"attr:StatefulCanvas.redrawOnStateChange",
        flags:"IRWA",
        description:"Whether this widget needs to redraw to reflect state change",
        name:"redrawOnStateChange",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "classMethod:Page.getHeight":{
        ref:"classMethod:Page.getHeight",
        flags:"",
        description:" Get the height of the visible portion of the window, not including browser chrome or the\n scrollbar area.\n",
        name:"getHeight",
        seeAlso:[],
        params:[
            {description:"the window object", optional:true, name:"wd", defaultValue:null, type:"object"}
        ],
        returns:{description:"height of the page", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "method:Log.getStackTrace":{
        ref:"method:Log.getStackTrace",
        flags:"",
        description:" Returns a \"stack trace\" - one line per method in the current call stack, showing the method\n name and any parameters passed.\n <P>\n This API can currently only be supported in Internet Explorer.  See\n ${isc.DocUtils.linkForRef('group:debugging')} for information on how to get equivalent information from other\n browsers.\n\n",
        name:"getStackTrace",
        seeAlso:[],
        returns:{description:"stack trace.  Use eg ${isc.DocUtils.linkForRef('method:Log.logWarn')} to log to the Developer Console.", 
         type:"String"},
        type:"method",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "attr:GridRenderer.baseStyle":{
        ref:"attr:GridRenderer.baseStyle",
        flags:"IR",
        getter:["getBaseStyle"],
        description:"The base name for the CSS class applied to cells. This style will have \"Dark\", \n \"Over\", \"Selected\", or \"Disabled\" appended to it according to the state of the cell.",
        name:"baseStyle",
        seeAlso:[
            {ref:"method:GridRenderer.getCellStyle", description:null},
            {ref:"method:GridRenderer.getBaseStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"cell\"",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "attr:DataSourceField.propertiesOnly":{
        ref:"attr:DataSourceField.propertiesOnly",
        flags:"IR",
        description:"For use in ${isc.DocUtils.linkForRef('group:componentSchema')} for fields that contain other components, this flag\n suppresses auto-construction for subcomponents that appear under this field.\n <P>\n For example, the ${isc.DocUtils.linkForRef('class:VLayout')} schema sets this for its ${isc.DocUtils.linkForRef('attr:Layout.members','members')}\n property, so that when a VLayout is constructed via XML as follows:\n <pre>\n &lt;VLayout&gt;\n     &lt;members&gt;\n         &lt;ListGrid ID=\"myGrid\" .../&gt;\n         &lt;Toolstrip ID=\"myToolStrip\" ... /&gt;\n     &lt;/members&gt;\n &lt;/VLayout&gt;\n </pre>\n The ListGrid and ToolStrip do not construct themselves automatically.  Instead, the VLayout\n receives the properties of the ListGrid and ToolStrip as ordinary JavaScript Objects, with\n the special property <code>_constructor</code> set to the name of the class that should be\n constructed.",
        name:"propertiesOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentSchema"]
    },
    "attr:DynamicForm.items":{
        flags:"IRW",
        getter:["getItems"],
        type:"attr",
        ref:"attr:DynamicForm.items",
        description:"Synonym for ${isc.DocUtils.linkForRef('attr:DynamicForm.fields')}",
        name:"items",
        setter:["setItems"],
        valueType:"Array of FormItem Properties",
        seeAlso:[
            {ref:"attr:DynamicForm.fields", description:null}
        ],
        defaultValue:"null",
        groups:["items"],
        definingClass:"class:DynamicForm"
    },
    "class:AutoFitButton":{
        methods:[],
        ref:"class:AutoFitButton",
        deprecated:"As of Isomorphic SmartClient version 5.5, autoFit behavior can be achieved using the Button class instead by setting the property ${isc.DocUtils.linkForRef('attr:Button.autoFit')} to true.",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control/Button"],
        attrs:[],
        description:"A button that automatically sizes to the length of its title.  Implemented via the \n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property.",
        name:"AutoFitButton",
        seeAlso:[
            {ref:"class:Button", description:null}
        ],
        type:"class"
    },
    "type:timeFormatter":{
        ref:"type:timeFormatter",
        values:[
            {description:"String will display with seconds and am/pm indicator:<code>[H]H:MM:SS am|pm</code>. <br>\n  Example: <code>3:25:15 pm</code>", 
             value:"toTime"},
            {description:"String will display with seconds in 24 hour time: <code>[H]H:MM:SS</code>. <br>\n  Example: <code>15:25:15</code>", 
             value:"to24HourTime"},
            {description:"String will display with seconds, with a 2 digit hour and am/pm indicator: \n  <code>HH:MM:SS am|pm</code> <br>\n  Example: <code>03:25:15 pm</code>", 
             value:"toPaddedTime"},
            {description:"String will display with seconds, with a 2 digit hour in 24 hour format: \n  <code>HH:MM:SS</code> <br>\n  Examples: <code>15:25:15</code>, <code>03:16:45</code>", 
             value:"toPadded24HourTime"},
            {description:"String will have no seconds and be in 12 hour format:<code>[H]H:MM am|pm</code><br>\n  Example: <code>3:25 pm</code>", 
             value:"toShortTime"},
            {description:"String will have no seconds and be in 24 hour format: <code>[H]H:MM</code><br>\n  Example:<code>15:25</code>", 
             value:"toShort24HourTime"},
            {description:"String will have no seconds and will display a 2 digit hour, in 12 hour clock format:\n  <code>HH:MM am|pm</code><br>\n  Exmaple: <code>03:25 pm</code>", 
             value:"toShortPaddedTime"},
            {description:"String will have no seconds and will display with a 2 digit hour in 24 hour clock format:\n <code>HH:MM</code><br>\n Examples: <code>15:25</code>, <code>03:16</code>", 
             value:"toShortPadded24HourTime"}
        ],
        description:"String designating a standard time formatter for displaying the times associated with \n dates strings.",
        name:"timeFormatter",
        seeAlso:[],
        type:"type"
    },
    "attr:DynamicForm.autoFetchData":{
        ref:"attr:DynamicForm.autoFetchData",
        flags:"IR",
        description:"If true, when this component is first drawn, automatically call <code>this.fetchData()</code>",
        name:"autoFetchData",
        seeAlso:[
            {ref:"method:DynamicForm.fetchData", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["databinding"]
    },
    "attr:ListGridField.sortDirection":{
        ref:"attr:ListGridField.sortDirection",
        flags:"IRW",
        description:"Specifies the default sorting direction for this column. If set to\n  \"ascending\", the lowest value in the column is at the top of the listGrid. If set to\n  \"descending\", the highest value in the column is at the top of the listGrid. If not\n  specified, the current value of listGrid.sortDirection is used instead.",
        name:"sortDirection",
        seeAlso:[
            {ref:"attr:ListGrid.sortDirection", description:null}
        ],
        valueType:"SortDirection",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["sorting"]
    },
    "attr:Window.title":{
        ref:"attr:Window.title",
        flags:"IRW",
        description:"title for this Window, shown in the header (if drawn)",
        name:"title",
        setter:["setTitle"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Untitled Window\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "headerLabel", "i18nMessages"]
    },
    "method:Canvas.setBackgroundColor":{
        ref:"method:Canvas.setBackgroundColor",
        flags:"",
        description:"			Sets the background color of this widget to newColor.\n",
        name:"setBackgroundColor",
        seeAlso:[],
        params:[
            {description:"new color to set the widget's background to", optional:false, 
             name:"newColor",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "attr:TabSet.tabBarAlign":{
        ref:"attr:TabSet.tabBarAlign",
        flags:"IR",
        description:"Alignment of the tabBar.\n <P>\n If the position of the tabBar is \"top\" or \"bottom\", then alignment must be \"left\" or\n \"right\" and defaults to \"left\".\n <P>\n If the position of the tabBar is \"left\" or \"right\", then the alignment must be \"top\" or\n \"bottom\" and defaults to \"top\".",
        name:"tabBarAlign",
        seeAlso:[],
        valueType:"Side",
        defaultValue:"see below",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('tabsAlign')}"],
        definingClass:"class:TabSet",
        groups:["tabBar"]
    },
    "method:DynamicForm.getItemErrorHTML":{
        ref:"method:DynamicForm.getItemErrorHTML",
        flags:"",
        description:" If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, this method is called for each item in the form\n and returns the error HTML to be written out next to the item.<br>\n Default implementation falls through to ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')} on the item in question.\n",
        name:"getItemErrorHTML",
        seeAlso:[],
        params:[
            {description:"Form item for which the HTML should be retrieved", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"Error message to display for the item, or array of error message                              strings.", 
             optional:false,name:"error", defaultValue:null, type:"string | array"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "method:ListGrid.getEditValue":{
        ref:"method:ListGrid.getEditValue",
        flags:"",
        description:"\n Returns the current temporary locally stored edit value for some field within a record \n being edited.\n\n",
        name:"getEditValue",
        seeAlso:[],
        params:[
            {description:"index of the row for which the editValue should be returned", 
             optional:false,name:"rowNum", defaultValue:null, type:"number"},
            {description:"index of the field, or fieldName, for which value should be                               returned", 
             optional:false,name:"colNum", defaultValue:null, type:"number | string"}
        ],
        returns:{description:"edit value for the field in question", type:"any"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:ListGridField.showHover":{
        ref:"attr:ListGridField.showHover",
        flags:"IRW",
        description:"Whether to show hovers for this field.  The default hover will be the contents of the\n cell the user is hovering over, and can be customized via\n ${isc.DocUtils.linkForRef('method:ListGridField.hoverHTML','field.hoverHTML()')}.\n <P>\n ${isc.DocUtils.linkForRef('attr:ListGrid.canHover')} can be set to true to cause hovers to be shown for all fields\n by default.  In this case, <code>field.showHover</code> can be set to false to suppress\n hovers for an individual field.\n <P>\n All hovers can be disabled, regardless of other settings, by setting\n ${isc.DocUtils.linkForRef('attr:ListGrid.showHover')} to false.",
        name:"showHover",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('valueHoverTips')}"],
        definingClass:"object:ListGridField"
    },
    "group:autoComplete":{
        ref:"group:autoComplete",
        refs:[],
        name:"autoComplete",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.showHover":{
        ref:"attr:ListGrid.showHover",
        flags:"IRW",
        description:"If true, and canHover is also true, when the user hovers over a cell, hover text will pop up\n next to the mouse.  The contents of the hover is determined by ${isc.DocUtils.linkForRef('method:ListGrid.cellHoverHTML')}.",
        name:"showHover",
        seeAlso:[
            {ref:"attr:ListGrid.canHover", description:null},
            {ref:"method:ListGrid.cellHoverHTML", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["hovers"]
    },
    "method:CubeGrid.deselectCells":{
        ref:"method:CubeGrid.deselectCells",
        flags:"",
        description:"\n  Deselect cells that match a list of facetValues.  \n  Also supports an explicit list of cells or cellIds\n\n      <br><i>methodType</i> action\n",
        name:"deselectCells",
        seeAlso:[],
        params:[
            {description:"cells to deselect", optional:false, name:"cellList", defaultValue:null, 
             type:"Array of cells | facetValues object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:ListGrid.ungroup":{
        ref:"method:ListGrid.ungroup",
        flags:"",
        description:" Removes the grouping from the listgrid, restoring its original data\n\n",
        name:"ungroup",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:MultiFileItem.removeButton":{
        ref:"attr:MultiFileItem.removeButton",
        flags:"IR",
        description:"Button for removing files.  Supports the properties of a ${isc.DocUtils.linkForRef('object:FormItemIcon')}.",
        name:"removeButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MultiFileItem"
    },
    "attr:StatefulCanvas.iconSpacing":{
        ref:"attr:StatefulCanvas.iconSpacing",
        flags:"IR",
        description:"Pixels between icon and title text.",
        name:"iconSpacing",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"6",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:FormItem.titleHover":{
        ref:"method:FormItem.titleHover",
        flags:"A",
        description:"  Optional stringMethod to fire when the user hovers over this item's title.\n  Return false to suppress default behavior of showing a hover canvas containing the\n  HTML returned by <code>formItem.titleHoverHTML()</code> / \n  <code>form.titleHoverHTML()</code>.\n\n",
        name:"titleHover",
        seeAlso:[
            {ref:"method:FormItem.itemHover", description:null},
            {ref:"method:FormItem.titleHoverHTML", description:null}
        ],
        params:[
            {description:"This items form", optional:false, name:"form", defaultValue:null, 
             type:"DynamicForm"},
            {description:"Pointer to this item", optional:false, name:"item", defaultValue:null, 
             type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:GridRenderer.emptyMessage":{
        ref:"attr:GridRenderer.emptyMessage",
        flags:"IRW",
        description:"The string to display in the body of a listGrid with an empty data array, if\n showEmptyMessage is true.",
        name:"emptyMessage",
        seeAlso:[
            {ref:"attr:GridRenderer.showEmptyMessage", description:null},
            {ref:"attr:GridRenderer.emptyMessageStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["emptyMessage", "i18nMessages"]
    },
    "classAttr:Validator.notAnInteger":{
        ref:"classAttr:Validator.notAnInteger",
        flags:"IRA",
        description:"Default error message to display when standard <code>isInteger</code> type validator\n  returns false.",
        name:"notAnInteger",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be a whole number.\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:Log.logIsErrorEnabled":{
        ref:"method:Log.logIsErrorEnabled",
        flags:"",
        description:" Check whether a message logged at \"error\" priority would be visible in the log.\n <P>\n As with logDebug, category is defaulted to the current className.  Use this method to avoid\n putting together expensive log messages if they will never appear in the log.\n\n",
        name:"logIsErrorEnabled",
        seeAlso:[],
        params:[
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:ToolbarItem.buttonConstructor":{
        ref:"attr:ToolbarItem.buttonConstructor",
        flags:"IRWA",
        description:"Use AutoFitButtons rather than simple Buttons for this toolbar's buttons by default.",
        name:"buttonConstructor",
        seeAlso:[],
        valueType:"Class",
        defaultValue:"AutoFitButton",
        type:"attr",
        definingClass:"class:ToolbarItem"
    },
    "method:DynamicForm.getFieldErrors":{
        ref:"method:DynamicForm.getFieldErrors",
        flags:"",
        description:" Returns the current set of validation errors for some field in this form.\n",
        name:"getFieldErrors",
        seeAlso:[],
        returns:{description:"Error message string, or if there is more than one error      associated with this field, array of error message strings.", 
         type:"string | array of strings"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "class:PropertySheet":{
        methods:[],
        ref:"class:PropertySheet",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms"],
        attrs:[],
        description:"Editor with a minimalist appearance, tuned for editing large numbers of properties in a\n constrained space.",
        name:"PropertySheet",
        seeAlso:[],
        type:"class"
    },
    "classMethod:Page.getImgURL":{
        ref:"classMethod:Page.getImgURL",
        flags:"",
        description:" Return the full URL for app-specific or skin image.\n <P>\n To use a skin image, start the URL with \"[SKIN]\".  Any other relative URL is assumed\n relative to the ${isc.DocUtils.linkForRef('classMethod:Page.getAppImgDir','appImgDir')}.\n\n",
        name:"getImgURL",
        seeAlso:[],
        params:[
            {description:"Local file name for the image.", optional:false, name:"src", 
             defaultValue:null,type:"SCImgURL"},
            {description:"User-specified image directory,										local to", optional:true, 
             name:"imgDir",defaultValue:null, type:"string"}
        ],
        returns:{description:"URL for the image.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "group:relogin":{
        ref:"group:relogin",
        title:"Relogin",
        treeLocation:["Client Reference/RPC"],
        refs:["classAttr:RPCManager.credentialsURL", "classMethod:RPCManager.loginRequired", 
         "attr:RPCRequest.containsCredentials"],
        description:"For applications that require authentication and use session timeout, a background RPC may\n occur with an expired session.  The ideal handling of this scenario is that, with the attempted\n transaction still suspended, a modal dialog is used to re-authenticate the user, and then the\n original transaction is resumed without loss of data or context.  SmartClient makes it easy to\n implement this ideal handling <i>without</i> having to implement session timeout handling in\n every codepath that contacts the server, by providing central notification of session timeout,\n and the ability to re-send a transaction that encountered session timeout.\n <P>\n When session timeout occurs, typical authentication systems intercept requests to protected\n resources and return a page that tells the user that login is required.  With a background RPC\n this page won't be shown to the user.\n <P>\n To enable SmartClient to detect that session timeout has occurred, a snippet of HTML called the\n loginRequiredMarker must be added to the session timeout response sent by the authentication\n system.  The loginRequiredMarker is standardized and does not need to be customized for your\n deployment.  It can be added to an HTML page without visual effect, or if the response sent on\n session timeout is not an HTML page, simply embedded in any other type of response, or sent\n as the entirety of the response.  The loginRequiredMarker is in\n isomorphic/login/loginRequiredMarker.html.\n <P>\n When SmartClient detects the loginRequired marker, the transaction that encountered session\n timeout is put on hold, and ${isc.DocUtils.linkForRef('classMethod:RPCManager.loginRequired')} is called.  At this point you\n have a few options:\n <ol>\n \n <li> Leave the SmartClient application and take the user to the login page, by simply doing a\n <code>window.location.replace(<i>myLoginURL</i>)</code>, the simplest but least user friendly\n option.\n \n <li> Open a new browser window that goes to your plain HTML login form (or offer a link that\n opens such a browser window), using a modal dialog in the application page that prompts the\n user to login before continuing, then re-send the intercepted transaction\n (${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction')} when the user indicates he has logged in.\n This is simple, does not drop context, but is not seamless.\n \n <li> Use a SmartClient interface, typically a DynamicForm in a Window, to collect credentials,\n perform login as a background RPC, and on success re-send the intercepted transaction\n (${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction')}.  A complete example of this, which assumes\n an authentication system that can take credentials as HTTP POST params, is included in the SDK\n as isomorphic/login/reloginFlow.js.\n \n </ol>\n <B>Authentication via background RPC form POST</B>\n <P>\n The approach shown in reloginFlow.js posts the credentials gathered from the user to\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.credentialsURL')}.  To make this work with an authentication system that can\n accept credentials via HTTP POST:\n <ol>\n <li> set the RPCManager.credentialsURL to the URL where credentials should be POST'd\n <li> include reloginFlow.js in your page, modified, if necessary, so that the names of the\n USERNAME and PASSWORD params match what your authentication system uses\n <li> configure your authentication system to send back the loginSuccessMarker as part of a\n successful login response, and the loginRequiredMarker as part of a failed login response\n </ol>\n If your authentication system can accept POST'd credentials at any URL it protects, the last\n step may be as simple as configuring the loginSuccessMarker file itself as a protected\n resource (isomorphic/login/loginSuccess.html).\n <P>\n <B>Authentication via background SmartClient server RPC/DMI</B>\n <P>\n If you are using the SmartClient Java server and your authentication system allows you to mark\n a user as authenticated from Java, you can perform a normal RPC or DMI with the credentials\n gathered from the user and send back success or failure indications as normal RPC or DMI\n responses.  This can be useful if, in addition to logging in, you want to send back additional\n data.\n <P>\n <B>Advanced: concurrency</B>\n <P>\n If, after loginRequired() has fired and before the user has re-authenticated, you send\n additional RPCs to protected URLs, you will get additional loginRequired() notifications.  This\n may happen to applications that poll for data or periodically save without user action.  You\n may wish to avoid this by setting an application-specific flag to avoid firing requests during\n the relogin process.  However, you must ultimately either\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.resendTransaction','resend')} or ${isc.DocUtils.linkForRef('classMethod:RPCManager.clearTransaction','discard')}\n every transaction for which loginRequired() fires, or you will have a memory leak due to\n suspended transactions.\n <P>\n Note also that there is no requirement that the relogin process blocks user interaction.\n Applications that access multiple services may choose to simply show an unobtrusive error\n indication such that the user can log back in at his liesure, or even log the user back in\n automatically.",
        name:"relogin",
        seeAlso:[],
        type:"group"
    },
    "attr:StatefulCanvas.selected":{
        ref:"attr:StatefulCanvas.selected",
        flags:"IRW",
        description:"Whether this component is selected.  For some components, selection affects appearance.",
        name:"selected",
        setter:["setSelected"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "method:String.startsWith":{
        ref:"method:String.startsWith",
        flags:"",
        description:"			Returns true if this string starts with another string.\n",
        name:"startsWith",
        seeAlso:[],
        params:[
            {description:"other string to check", optional:false, name:"substring", defaultValue:null, 
             type:"String"}
        ],
        returns:{description:"true == this string starts with substring", type:"boolean"},
        type:"method",
        definingClass:"class:String",
        groups:["stringProcessing"]
    },
    "method:TreeGrid.fetchData":{
        ref:"method:TreeGrid.fetchData",
        flags:"",
        description:" Uses a \"fetch\" operation on the current ${isc.DocUtils.linkForRef('class:DataSource','grid.dataSource')} to retrieve data\n that matches the provided criteria, and displays the matching data in this component as a\n tree.\n <P>\n This method will create a ${isc.DocUtils.linkForRef('class:ResultTree')} to manage tree data, which will\n subsequently be available as <code>treeGrid.data</code>.  DataSource records\n returned by the \"fetch\" operation are linked into a tree structure according to\n ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} and\n ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} declarations on DataSource fields.  See the\n ${isc.DocUtils.linkForRef('group:treeDataBinding')} topic for complete details.\n <P>\n By default, the created ResultTree will use folder-by-folder load on demand, asking the\n server for the children of each folder as the user opens it.\n <P>\n The ${isc.DocUtils.linkForRef('class:ResultTree')} created by <code>fetchData()</code> can be customized by setting\n ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')} to an Object containing properties and methods to apply to\n the created ResultTree.  For example, the property that determines whether a node is a\n folder (${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty','isFolderProperty')}) can be customized, or\n level-by-level loading can be disabled via\n ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','loadDataOnDemand:false')}.\n <P>\n The callback passed to <code>fetchData</code> will fire once, the first time that data is\n loaded from the server.  If using folder-by-folder load on demand, use the\n ${isc.DocUtils.linkForRef('method:ResultTree.dataArrived')} notification to be notified each time new nodes are loaded.\n <P>\n Note that, if criteria are passed to <code>fetchData()</code>, they will be passed every\n time a new \"fetch\" operation is sent to the server.  This allows you to retrieve multiple\n different tree structures from the same DataSource.  However note that the server is expected\n to always respond with an intact tree - returned nodes which do not have parents are dropped\n from the dataset and not displayed.\n\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument\n                      instead of a raw criteria object, will be derived by calling\n                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}", 
             optional:true,name:"criteria", defaultValue:null, type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:FacetValue.selectionBoundary":{
        ref:"attr:FacetValue.selectionBoundary",
        flags:"IR",
        description:"Selection boundary determining what facets / facetValues can be selected together by\n drag selection / shift+click selection",
        name:"selectionBoundary",
        seeAlso:[],
        valueType:"enum",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "attr:FormItemIcon.showFocused":{
        ref:"attr:FormItemIcon.showFocused",
        flags:"IRWA",
        description:"Should this icon's image switch to the appropriate \"focused\" source when the user puts\n focus on the form item or icon?",
        name:"showFocused",
        seeAlso:[
            {ref:"attr:FormItem.showFocusedIcons", description:null},
            "formItemIcon.showFocusedWithItem"
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "method:Selection.selectAll":{
        ref:"method:Selection.selectAll",
        flags:"",
        description:"			Select ALL records of the list\n",
        name:"selectAll",
        seeAlso:[],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:ListGridField.optionDataSource":{
        ref:"attr:ListGridField.optionDataSource",
        flags:"IRWA",
        description:"Derive a ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap')} by fetching records from another DataSource and extracting\n the ${isc.DocUtils.linkForRef('attr:ListGridField.valueField','valueField')} and \n ${isc.DocUtils.linkForRef('attr:ListGridField.displayField','displayField')} in the loaded records, to derive one\n valueMap entry per record loaded from the optionDataSource.\n <P>\n Unlike the similar use of ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} for ${isc.DocUtils.linkForRef('interface:PickList','pickLists')}\n used during editing or filtering, <code>listGridField.optionDataSource</code> causes the\n entire set of records from the optionDataSource to be fetched, without paging.   Hence\n listGridField.optionDataSource is appropriate only for smaller valueMaps.  For very\n large valueMap situations, such as an accountId field that should be displayed as an\n accountName where there are thousands of accounts, the recommended approach is:\n <ul>\n <li> do not set listGridField.optionDataSource\n <li> declare two fields in the DataSource, eg \"accountId\" and \"accountName\".\n <li> Set the ${isc.DocUtils.linkForRef('attr:ListGridField.displayField')} attribute on the data field to the\n      name of the display field.\n <li> When fetching records for display in a grid, have your server send back values for \n      both fields, but show only the data field (\"accountId\") in the grid.\n </ul>\n In this case the cells in the accountId field will show the record value from the \n accountName field.  This approach means the valueMap will never be loaded in its\n entirety, instead, each loaded record contains the valueMapping for that one record, as\n a pair of fields within the record.\n <P>\n Note that it is key that the server return <b>both</b> the underlying stored value\n <b>and</b> the display value, as suggested above, because this approach allows the\n ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} property to be used to provide paged valueMaps during\n inline editing and ${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','inline filtering')}.  Note that\n pickList.optionDataSource is a distinct setting from listGridField.optionDataSource,\n settable via ${isc.DocUtils.linkForRef('attr:ListGridField.editorProperties')} (for editing) and \n ${isc.DocUtils.linkForRef('attr:ListGridField.filterEditorProperties','field.filterEditorProperties')} (for\n filtering).",
        name:"optionDataSource",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "attr:ListGrid.scrollRedrawDelay":{
        ref:"attr:ListGrid.scrollRedrawDelay",
        flags:"IRW",
        description:"While drag scrolling in an incrementally rendered grid, time in milliseconds to wait\n before redrawing, after the last mouse movement by the user.",
        name:"scrollRedrawDelay",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"75",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "method:ListGrid.getVisibleRows":{
        ref:"method:ListGrid.getVisibleRows",
        flags:"",
        description:" Get the rows that are currently visible in the viewport, as an array of \n [firstRowNum, lastRowNum]. If the grid contains no records, will return [-1,-1];\n",
        name:"getVisibleRows",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:FormItem.width":{
        ref:"attr:FormItem.width",
        flags:"IRW",
        description:"By default, items take up the entire width of their cell",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"\"*\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('columnSpanning')}"],
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "attr:ListGrid.showFilterEditor":{
        flags:"IRW",
        type:"attr",
        ref:"attr:ListGrid.showFilterEditor",
        description:"Should this listGrid display a filter row.  If true, this ListGrid\n    will be drawn with a single editable row, (separate from the body).  Values entered\n    into this row are used as filter criteria to filter this List's data.",
        name:"showFilterEditor",
        setter:["setShowFilterEditor"],
        valueType:"boolean",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('filter')}"],
        defaultValue:"null",
        groups:["filterEditor"],
        definingClass:"class:ListGrid"
    },
    "attr:TreeGrid.displayNodeType":{
        ref:"attr:TreeGrid.displayNodeType",
        flags:"IRW",
        description:"Specifies the type of nodes displayed in the treeGrid.",
        name:"displayNodeType",
        seeAlso:[
            {ref:"type:DisplayNodeType", description:"for options"}
        ],
        valueType:"DisplayNodeType",
        defaultValue:"Tree.FOLDERS_AND_LEAVES",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeField"]
    },
    "classMethod:History.addHistoryEntry":{
        ref:"classMethod:History.addHistoryEntry",
        flags:"",
        description:"\n Call this method to add a synthetic history entry.  The new history entry is added in the\n history stack after the currently visible page - in exactly the same way as the browser\n would treat a new page transition at this point.  In other words, if the user has navigated\n ten pages using, say, a mixture of synthetic and real history entries, then presses back\n five times and then triggers a call to this method, the history entry will be created at the\n 6th position in the history stack and any history entries forward of that will be destroyed.\n <p>\n This method must be called with an id.  This id can be any string - it will be URL-encoded\n and added to the current page URL as an anchor (e.g. #foo).  This URL change allows the user\n to bookmark this particular application state.  When the user next navigates to this history\n entry, the id you supplied here will be passed back to the callback you supplied via\n ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')}.\n <p>\n You may also optionally supply some arbitrary data to associate with this history entry.\n If you do this, the data you passed in will be passed back to you as part of the callback\n you specified via ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')}.  This data object can be anything you\n want, but there are some caveats:\n <ul>\n <li>As long as the user has not navigated away from the top-level page (i.e. the user is\n navigating within synthetic history entries only), whatever data you pass in will be handed\n back to you.\n <li>When the user navigates away from the current page, SmartClient will attempt to\n serialize the data into a string so that when/if the user comes back to this history entry,\n it can be deserialized and passed back to your logic.  To take advantage of this, you need\n to make sure that your data is serializeable.  As long as your data is a native datatype\n (String, Number, Boolean) or a collection of such datatypes (collections meaning object\n literals and arrays), then it will serialize correctly.  Things like pointers to the\n document object and functions cannot be serialized.\n <li>In order for the serialization to occur on a page transition, you must have the\n SmartClient Core module loaded on the page at the time of the transition.  If it's not\n available, the data will be lost, but you will still get a callback with the id you specify\n if the user navigates back to this history entry later.\n <li>The data associated with this history entry will persist as long as at least one\n instance of the browser remains open on the user's machine.  Once the user closes all\n browser instances, the data will be lost. \n <li>Also, the user can trigger a history callback at any time by navigating to a bookmarked\n history entry that may have been created in a past session, such that no data is associated\n with that id in the current session.  How you choose to handle that situation is up to you.\n </ul>\n <p>\n You're always guaranteed to receive the id you associate with a history entry in the\n callback that you specify, but the data you associated may or may not be available, so be\n careful about how you use it.\n\n",
        name:"addHistoryEntry",
        seeAlso:[],
        params:[
            {description:"The id you want to associate with this history entry.  This value will appear as an anchor reference at the end of the URL string.  For example, if you pass in\n \"foo\" as the id, the URL will then have a #foo tacked on the end of it.  This id will be\n passed back to the callback you specified in ${isc.DocUtils.linkForRef('classMethod:History.registerCallback')} when the user\n navigates to this history entry in the future.", 
             optional:false,name:"id", defaultValue:null, type:"string"},
            {description:"The title to show in the history drop-down for this history entry.  If not specified, the <code>id</code> is used, unless you've set an explicit history title via\n ${isc.DocUtils.linkForRef('classMethod:History.setHistoryTitle')}.  Note: this currently works in IE only.  You may pass a\n title in any other browser, but it will not change what's displayed in the history\n drop-down.", 
             optional:true,name:"title", defaultValue:null, type:"string"},
            {description:"Arbitrary data to associate with this history entry.  When the user next navigates to this history entry, this data will be provided as an argument to your callback\n function.  Note that the SmartClient Core module is also required to be loaded on the page\n for this particular feature to work.", 
             optional:true,name:"data", defaultValue:null, type:"any"}
        ],
        type:"classMethod",
        definingClass:"class:History"
    },
    "attr:ListGridField.showSelectedIcon":{
        ref:"attr:ListGridField.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["buttonIcon"]
    },
    "attr:RPCRequest.willHandleError":{
        ref:"attr:RPCRequest.willHandleError",
        flags:"IRW",
        description:"With willHandleError:false, rpcResponses that indicate an error go through centralized\n handling in the RPCManager and rpcRequest.callback is never invoked.\n <P>\n Setting willHandleError:true means that your rpcRequest.callback will receive rpcResponses\n that have an error status and must handle them.\n <P>\n See also the error handling section in the ${isc.DocUtils.linkForRef('class:RPCManager')} docs.",
        name:"willHandleError",
        seeAlso:[
            {ref:"class:RPCManager", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "group:hoverTips":{
        ref:"group:hoverTips",
        refs:["method:CubeGrid.facetLabelHoverHTML", "method:CubeGrid.facetValueHoverHTML", 
         "attr:CubeGrid.facetValueHoverWidth","attr:CubeGrid.facetLabelHoverWidth", "attr:CubeGrid.facetValueHoverHeight", 
         "attr:CubeGrid.facetLabelHoverHeight","attr:CubeGrid.facetValueHoverAlign", "attr:CubeGrid.facetLabelHoverAlign", 
         "attr:CubeGrid.facetValueHoverVAlign","attr:CubeGrid.facetLabelHoverVAlign", "attr:CubeGrid.facetValueHoverStyle", 
         "attr:CubeGrid.facetLabelHoverStyle"],
        description:null,
        name:"hoverTips",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.alternateRecordFrequency":{
        ref:"attr:ListGrid.alternateRecordFrequency",
        flags:"IRW",
        description:"The number of consecutive rows to draw in the same style before alternating, when\n alternateRowStyles is true.",
        name:"alternateRecordFrequency",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "attr:EdgedCanvas.edgeOffsetRight":{
        ref:"attr:EdgedCanvas.edgeOffsetRight",
        flags:"IRA",
        description:"Amount the contained Canvas should be offset from the right.  Defaults to the size for\n the right edge.  Set smaller to allow the contained Canvas to overlap the edge and\n corner media.",
        name:"edgeOffsetRight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "method:ResultSet.allMatchingRowsCached":{
        ref:"method:ResultSet.allMatchingRowsCached",
        flags:"A",
        description:" Do we have a complete client-side cache of records for the current filter criteria?\n Returns false if this is a paged data set, and the entire set of records that match\n the current criteria has not been retrieved from the server.\n",
        name:"allMatchingRowsCached",
        seeAlso:[],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:CubeGrid.getCellColumn":{
        ref:"method:CubeGrid.getCellColumn",
        flags:"",
        description:" Given a record in this grid, this method returns the colNum in which the record is displayed.\n",
        name:"getCellColumn",
        seeAlso:[],
        params:[
            {description:"record to find coordinates for", optional:false, name:"cellRecord", 
             defaultValue:null,type:"record"}
        ],
        returns:{description:"Column number for the record. Returns -1 if the record is not found.", 
         type:"integer"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "method:Canvas.getPageTop":{
        ref:"method:Canvas.getPageTop",
        flags:"A",
        description:" Returns the page-relative top coordinate of the widget on the page, in pixels \n",
        name:"getPageTop",
        seeAlso:[],
        returns:{description:"GLOBAL top coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:GridRenderer.getTotalRows":{
        ref:"method:GridRenderer.getTotalRows",
        flags:"",
        description:" Return the total number of rows in the grid.<br><br>\n\n NOTE: in order to create a valid grid, you must either provide a totalRows value or implement\n getTotalRows()\n\n",
        name:"getTotalRows",
        seeAlso:[
            {ref:"attr:GridRenderer.totalRows", description:null}
        ],
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "method:Canvas.mouseOver":{
        ref:"method:Canvas.mouseOver",
        flags:"A",
        description:"\n Executed when mouse enters this widget.  No default implementation.\n\n",
        name:"mouseOver",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "group:pickerIcon":{
        ref:"group:pickerIcon",
        refs:["attr:SelectItem.pickerIconWidth", "attr:SelectItem.pickerIconHeight", 
         "attr:SelectItem.pickerIconSrc","attr:SelectItem.pickerIconProperties"],
        name:"pickerIcon",
        seeAlso:[],
        type:"group"
    },
    "method:TreeGrid.folderOpened":{
        ref:"method:TreeGrid.folderOpened",
        flags:"",
        description:"\n This method is called when a folder is opened either via the user manipulating the\n expand/collapse control in the UI or via ${isc.DocUtils.linkForRef('method:TreeGrid.openFolder')}.  You can return\n <code>false</code> to cancel the open.\n\n",
        name:"folderOpened",
        seeAlso:[],
        params:[
            {description:"the folder (record) that is being opened", optional:false, name:"node", 
             defaultValue:null,type:"TreeNode"}
        ],
        returns:{description:"false to cancel the open, true to all it to proceed", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:ComboBoxItem.showPickerIcon":{
        ref:"attr:ComboBoxItem.showPickerIcon",
        flags:"IRWA",
        description:"Show the picker icon for the combo box",
        name:"showPickerIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:Tree.dataChanged":{
        ref:"method:Tree.dataChanged",
        flags:"A",
        description:"\n Called when the structure of this tree is changed in any way.  Intended to be observed.\n <br><br>\n Note that on a big change (many items being added or deleted) this may be called multiple times\n\n",
        name:"dataChanged",
        seeAlso:[],
        type:"method",
        definingClass:"class:Tree"
    },
    "type:listGridViewState":{
        ref:"type:listGridViewState",
        description:"An object containing the \"view state\" information for a listGrid.<br>\n This object contains state information reflecting<br>\n - ${isc.DocUtils.linkForRef('type:listGridFieldState')}<br>\n - ${isc.DocUtils.linkForRef('type:listGridSortState')}<br>\n - ${isc.DocUtils.linkForRef('type:listGridSelectedState')}<br>\n for the grid.<br>\n Note that this object is not intended to be interrogated directly, but may be stored \n (for example) as a blob on the server for view state persistence across sessions.",
        name:"listGridViewState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "attr:DataBoundComponent.removeOperation":{
        ref:"attr:DataBoundComponent.removeOperation",
        flags:"IRW",
        description:"Operation ID this component should use when performing remove operations.",
        name:"removeOperation",
        seeAlso:[
            {ref:"attr:DSRequest.operationId", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["operations"]
    },
    "attr:DSResponse.invalidateCache":{
        ref:"attr:DSResponse.invalidateCache",
        flags:"R",
        description:"Optional flag that can be set by the server to force ResultSets to drop any caches of\n records from the DataSource that was the target of the operation.",
        name:"invalidateCache",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["cacheSync"]
    },
    "classMethod:Page.getScrollTop":{
        ref:"classMethod:Page.getScrollTop",
        flags:"",
        description:"		Get the amount that the browser window has been scrolled vertically.\n",
        name:"getScrollTop",
        seeAlso:[],
        returns:{description:"vertical scroll amount", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "method:FormItem.blur":{
        ref:"method:FormItem.blur",
        flags:"",
        description:" Called when this FormItem loses focus.\n \n",
        name:"blur",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "attr:StatefulCanvas.state":{
        flags:"IRWA",
        getter:["getState"],
        type:"attr",
        ref:"attr:StatefulCanvas.state",
        description:"Current \"state\" of this widget. StatefulCanvases will have a different appearance based\n on their current state. By default this is handled by changing the css className applied to\n the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is\n done.<P>\n For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the \n appearance may also be updated by changing the src of the rendered image. See\n ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL \n is modified to reflect the state of the widget in this case.",
        name:"state",
        setter:["setState"],
        valueType:"State",
        seeAlso:[
            {ref:"type:State", description:null},
            {ref:"group:state", description:null}
        ],
        defaultValue:"\"\"",
        groups:["state"],
        definingClass:"class:StatefulCanvas"
    },
    "attr:RPCRequest.transport":{
        ref:"attr:RPCRequest.transport",
        flags:"IRWA",
        description:"Selects the transport used for this RPCRequest.  If unset, the value of\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} will be used.\n <p>\n If you're using queueing, note that all requests in the queue must use the same transport.\n If you attempt to send a request via a different transport than those that are currently on\n the queue, it will be sent to the server separately, ahead of the queue, and a warning will\n be logged to the Developer Console.\n <p>\n If you specify an unknown transport, an error will be logged to the DeveloperConsole and\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.defaultTransport')} will be used instead.\n <p>\n If you specify the <code>xmlHttpRequest</code> transport and it is not available, a warning will be\n logged to the Developer Console and the RPCManager will attempt to use the\n <code>hiddenFrame</code> transport instead for this request.  Note that some features like\n ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} requre the <code>xmlHttpRequest</code> transport and will not\n work if the <code>xmlHttpRequest</code> transport is unavailable (this can happen if the end user is\n using Internet Explorer and has disabled ActiveX).  You can check whether or not the\n <code>xmlHttpRequest</code> transport is currently available by calling\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.xmlHttpRequestAvailable')}.",
        name:"transport",
        seeAlso:[
            {ref:"classAttr:RPCManager.defaultTransport", description:null}
        ],
        valueType:"RPCTransport",
        defaultValue:"RPCManager.defaultTransport",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:SelectItem.filterLocally":{
        ref:"attr:SelectItem.filterLocally",
        flags:"IRA",
        description:"If <code>filterLocally</code> is set for this item, and this item is showing options \n from a dataSource, fetch the entire set of options from the server, and use these values\n to map the item value to the appropriate display value. Also use <code>\"local\"</code>\n type filtering on drop down list of options.<br>\n This means data will only be fetched once from the server, and then filtered on the\n client.",
        name:"filterLocally",
        seeAlso:[
            {ref:"attr:FormItem.filterLocally", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "type:State":{
        ref:"type:State",
        values:[
            {description:"state when mouse is not acting on this StatefulCanvas", 
             value:"StatefulCanvas.STATE_UP"},
            {description:"state when mouse is down", value:"StatefulCanvas.STATE_DOWN"},
            {description:"state when mouse is over", value:"StatefulCanvas.STATE_OVER"},
            {description:"disabled", value:"StatefulCanvas.STATE_DISABLED"}
        ],
        description:"Constants for the standard states for a StatefulCanvas.",
        name:"State",
        seeAlso:[],
        type:"type",
        groups:["state"]
    },
    "attr:Canvas.contents":{
        flags:"IRWA",
        getter:["getContents"],
        type:"attr",
        ref:"attr:Canvas.contents",
        description:"The contents of a canvas or label widget. Any HTML string is acceptable.",
        name:"contents",
        setter:["setContents"],
        valueType:"string",
        seeAlso:[
            {ref:"attr:Canvas.dynamicContents", description:null}
        ],
        defaultValue:"\"&nbsp;\"",
        groups:["contents"],
        definingClass:"class:Canvas"
    },
    "attr:TabBar.baseLineSrc":{
        ref:"attr:TabBar.baseLineSrc",
        flags:"IR",
        description:"Sets ${isc.DocUtils.linkForRef('attr:StretchImg.src')} for the ${isc.DocUtils.linkForRef('group:baseLine')} StretchImg.",
        name:"baseLineSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]baseline.gif\"",
        type:"attr",
        definingClass:"class:TabBar",
        groups:["baseLine"]
    },
    "classMethod:Date.parseInput":{
        ref:"classMethod:Date.parseInput",
        flags:"",
        description:" Parse a date passed in as a string, returning the approprate date object.\n",
        name:"parseInput",
        seeAlso:[],
        params:[
            {description:"date value as a string", optional:false, name:"dateString", defaultValue:null, 
             type:"string"},
            {description:"Format of the date string being passed.                                      If not passed, the default date input format as set up\n                                      via setInputFormat() will be used.", 
             optional:true,name:"format", defaultValue:null, type:"DateInputFormat"},
            {description:"For date formats that support a 2 digit                                  year, if parsed year is 2 digits and less than this\n                                  number, assume year to be 20xx rather than 19xx", 
             optional:true,name:"centuryThreshold", defaultValue:null, type:"number"},
            {description:"If the string passed in was not a valid date, in some cases we can convert to a\n          valid date (for example incrementing the year if the month is greater than 12).\n          This optional parameter will suppress such conversions - anything that doesn't\n          parse directly to a valid date will simply return null.", 
             optional:true,name:"suppressConversion", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"date value, or null if the string could not be parsed to a valid date.", 
         type:"Date"},
        type:"classMethod",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:TabSet.canCloseTabs":{
        ref:"attr:TabSet.canCloseTabs",
        flags:"IRW",
        description:"Should tabs in this tabSet show an icon allowing the user to dismiss the tab by\n clicking on it directly. May be overridden for individual tabs by setting \n ${isc.DocUtils.linkForRef('attr:Tab.canClose')}.<br>\n The URL for this icon's image will be derived from  ${isc.DocUtils.linkForRef('attr:TabSet.closeTabIcon')} by \n default, but may be overridden by explicitly specifying ${isc.DocUtils.linkForRef('attr:Tab.closeIcon')}.",
        name:"canCloseTabs",
        seeAlso:[
            {ref:"method:TabSet.closeClick", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:ToolStripSeparator.skinImgDir":{
        ref:"attr:ToolStripSeparator.skinImgDir",
        flags:"IR",
        description:"Path to separator image.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"images/ToolStrip/\"",
        type:"attr",
        definingClass:"class:ToolStripSeparator"
    },
    "attr:Slider.title":{
        ref:"attr:Slider.title",
        flags:"IRW",
        description:"Optional display title for the slider.",
        name:"title",
        seeAlso:[
            {ref:"attr:Slider.showTitle", description:null}
        ],
        valueType:"String",
        defaultValue:"\"Set Value\"",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:SelectItem.pickerIconWidth":{
        ref:"attr:SelectItem.pickerIconWidth",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the\n size of the picker icon. If unset picker icon will be sized as a square to fit in the\n avaliable height for the icon.",
        name:"pickerIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["pickerIcon"]
    },
    "method:List.set":{
        ref:"method:List.set",
        flags:"",
        description:" Change the array element at a particular position.\n <P>\n set() can be used to expand the length of the list.\n\n",
        name:"set",
        seeAlso:[],
        params:[
            {description:"position in the list to change", optional:false, name:"pos", 
             defaultValue:null,type:"number"},
            {description:"new value for that position", optional:false, name:"obj", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"whatever's at that position, null if not found", type:"object"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "attr:Window.dismissOnEscape":{
        ref:"attr:Window.dismissOnEscape",
        flags:"IRW",
        description:"Should this window be dismissed (same effect as pressing the \"Cancel\" button) when the \n user presses the \"Escape\" key?<br>\n If unset default behavior depends on whether a close / cancel button is visible for\n this item.",
        name:"dismissOnEscape",
        seeAlso:[
            {ref:"method:Window.shouldDismissOnEscape", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:Canvas.shadowOffset":{
        ref:"attr:Canvas.shadowOffset",
        flags:"IRA",
        description:"Offset of the shadow.  Defaults to half of <code>shadowDepth</code> if unset.\n <P>\n Because of the blurred edges, a shadow is larger than the originating component by\n 2xsoftness.  An <code>shadowOffset</code> of 0 means that the shadow will extend around the\n originating component equally in all directions.",
        name:"shadowOffset",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('shadows')}"],
        definingClass:"class:Canvas",
        groups:["shadow"]
    },
    "method:CubeGrid.facetValueOut":{
        ref:"method:CubeGrid.facetValueOut",
        flags:"",
        description:"    StringMethod handler fired when mouseout occurs for a facetValues header button\n  <br><i>methodType</i> handler\n",
        name:"facetValueOut",
        seeAlso:[],
        params:[
            {description:"facetValuesObject for the appropriate header button", optional:false, 
             name:"facetValues",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "method:Tree.find":{
        ref:"method:Tree.find",
        flags:"",
        description:"\n Find a node within this tree using a string path or by attribute value.  This method can be\n called with 1 or 2 arguments. If a single\n argument is supplied, the value of the argument is treated as the path to the node.\n <br>\n If 2 arguments are supplied, this method will treat the first argument as a fieldName, and\n return the first node encountered where <code>node[fieldName]</code>matches the second \n argument.  So for example, given this tree:\n <pre>\n foo\n   zoo\n     bar\n   moo\n     bar\n </pre>\n Assuming your ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} is the default <code>/</code> and <code>foo</code>\n is the name of the root node, then\n <code>tree.find(\"foo/moo/bar\")</code> would return the <code>bar</code> node under the\n <code>moo</code> node.\n <br><br>\n <code>tree.find(\"name\", \"bar\")</code> would return the first <code>bar</code> node because\n it is the first one in the list whose <code>name</code> (default value of\n ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}) property matches the value\n <code>bar</code>.  The two argument usage is generally more interesting when your tree nodes\n have some custom unique property that you wish to search on.  For example if your tree nodes\n had a unique field called \"UID\", their serialized form would look something like this:\n <pre>\n { name: \"foo\", children: [...], UID:\"someUniqueId\"}\n </pre> \n You could then call <code>tree.find(\"UID\", \"someUniqueId\")</code> to find that node.  Note\n that the value doesn't have to be a string - it can be any valid JS value, but since this\n data generally comes from the server, the typical types are string, number, and boolean.\n <br><br>\n When searching by path, trailing path delimiters are ignored.  So for example\n <code>tree.find(\"foo/zoo/bar\")</code> is equivalent to\n <code>tree.find(\"foo/zoo/bar/\")</code>\n \n",
        name:"find",
        seeAlso:[
            {ref:"attr:Tree.root", description:null},
            {ref:"attr:Tree.pathDelim", description:null},
            {ref:"attr:Tree.nameProperty", description:null}
        ],
        params:[
            {description:"Either the path to the node to be found, or the", optional:false, 
             name:"fieldName|path",defaultValue:null, type:"string"},
            {description:"If specified, this is the desired value for the                                   appropriate field", 
             optional:true,name:"value", defaultValue:null, type:"any"}
        ],
        returns:{description:"the node matching the supplied criteria or null if not found", type:"object"},
        type:"method",
        definingClass:"class:Tree",
        groups:["location"]
    },
    "group:operations":{
        ref:"group:operations",
        title:"Operations Overview",
        treeLocation:["Client Reference/Data Binding"],
        refs:["method:DataSource.fetchData", "method:DataSource.filterData", "method:DataSource.addData", 
         "method:DataSource.updateData","method:DataSource.removeData", "classMethod:RPCManager.handleError", 
         "attr:DSRequest.operationId","attr:DataBoundComponent.fetchOperation", "attr:DataBoundComponent.updateOperation", 
         "attr:DataBoundComponent.addOperation","attr:DataBoundComponent.removeOperation"],
        description:"SmartClient Operations are dynamic, transparent communications made from the client-side\n SmartClient system running in the browser, to the server-side SmartClient system running in\n a servlet engine, or to other non-SmartClient servers available via HTTP. Operations are\n used to load new data or new behavior into a running SmartClient application. Operations are\n also used to save data entered by users, and in general, to get the result of any process\n which must be run on the server for security reasons.\n <br><br>\n\n <b>RPC Operations</b>\n <br><br>\n RPC Operations are low-level communications that send and retrieve arbitrary data.  RPC\n Operations are supported by the ${isc.DocUtils.linkForRef('class:RPCManager')} class, which when used with the\n SmartClient server, provides Java to JavaScript ${isc.DocUtils.linkForRef('attr:RPCRequest.data','2-way translation')} of\n basic data structures.  The RPCManager also provides a mechanism for client-side code to be\n invoked when an operation completes (called a \"callback\").  RPC Operations are intended for\n unstructured data; data that is ultimately destined for display in SmartClient components\n will generally come from DataSource operations.\n <br><br>\n\n <b>DataSource Operations and DataBound Components</b>\n <br><br>\n A ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Operation')} is an operation that acts on a\n DataSource, performing one of the basic actions that makes sense on a set of similar\n records: \"fetch\", \"add\", \"update\" or \"remove\".  Unlike RPC operations, DataSource operations\n have specific request data and response data, for example, in the \"fetch\" DataSource\n operation, the request data is expected to be search criteria, and the response data is\n expected to be a list of matching DataSource records.  Although DataSource operations can be\n invoked manually from the client, they are generally automatically invoked by DataBound\n components.\n <br><br>\n DataBound Components are components that understand DataSources.  Databound components\n configured with a DataSource are able to offer complete user interactions without further\n configuration (extensive customization is also supported).\n <br><br>\n For example, given a DataSource, the ListGrid component supports a sophisticated inline\n editing interaction, complete with automatically chosen editors like date pickers for dates,\n type-aware validation, saving, and error reporting. \n <br><br>\n A DataBound component supporting an interaction such as inline editing will automatically\n submit DataSource operations to the server at appropriate times.\n <br><br>\n\n <b>DataSource Operation Integration</b>\n <br><br>\n Integrating DataSource operations with an existing system is best approached by implementing\n the the 4 basic DataSource operations in terms of your existing object model or data store.\n With these 4 operations implemented, the entire range of user interactions supported by\n SmartClient ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable components')} becomes applicable to\n your server.  At that point authentication, authorization and other business rules can be\n layered on top.\n <br><br>\n\n <b>Built-in SQL Connectivity</b>\n <br><br>\n The SmartClient server comes with built-in SQL connectivity, so that SQL-based DataSources\n can be created and used without any server-side code needing to be written.  In contrast,\n any operation which uses custom server-side code is called a \"Custom Operation\".\n <br><br>\n Generally it makes sense to prototype an application using Built-in DataSource Operations,\n then on the backend, create Custom DataSource Operations to retrieve data from the data\n store you will use in production.  As you switch from using Built-in DataSources to Custom\n Operations, no client-side code changes will be required, because the client cares only\n about the DataSource definition, not the data store which the data is ultimately retrieved\n from.\n <br><br>\n\n <b>Data Managers: ResultSet and ResultTree</b>\n <br><br>\n Data Managers manage datasets retrieved from DataSources.  Data Managers are automatically\n created by DataBound components, but can be created directly when more control is needed.\n <br><br>\n Data Managers provide load-on-demand for datasets too large to be loaded on the client,\n automatically invoking DataSource operations as necessary to retrieve data as it is\n requested, and optionally fetching ahead to anticipate further requests.   Data Managers\n will automatically perform actions locally when it is possible, for example, a sort\n action can be performed locally with a complete cache.  Data Managers also automatically\n manage the consistency of the client-side cache, observing update operations performed\n against DataSources and integrating updated rows automatically.\n <br><br>",
        name:"operations",
        seeAlso:[
            {ref:"class:RPCManager", description:"for RPC Operations"},
            {ref:"interface:DataBoundComponent", 
             description:"for information on DataBound Components"},
            {ref:"group:dataSourceOperations", 
             description:"for more information on DataSource Operations"},
            {ref:"group:clientServerIntegration", 
             description:"for information on integrating DataSource Operations with existing servers"},
            {ref:"method:DataSource.fetchData", 
             description:"for manually invoked DataSource operations"},
            {ref:"class:ResultSet", description:"for managing lists of records"},
            {ref:"class:ResultTree", description:"for managing trees of records"}
        ],
        type:"group"
    },
    "method:ValuesManager.handleHiddenValidationErrors":{
        ref:"method:ValuesManager.handleHiddenValidationErrors",
        flags:"A",
        description:" Method to display validation error messages for a valuesManager when there is not\n currently visible form item displaying the errors.\n This will be called when validation fails for<br>\n - a field in a hidden or undrawn member form<br>\n - a hidden field in a visible member form<br>\n - for databound ValuesManagers, a datasource field with specified validators, but not\n   associated item in any member.<br>\n Implement this to provide custom validation error handling for these fields.<br>\n By default hidden validation errors will be logged as warnings in the developerConsole.\n Return false from this method to suppress that behavior.\n",
        name:"handleHiddenValidationErrors",
        seeAlso:[],
        params:[
            {description:"The set of errors returned - this is an object of the form<br>                      &nbsp;&nbsp;<code>{fieldName:errors}</code><br>\n                      Where the 'errors' object is either a single string or an array\n                      of strings containing the error messages for the field.", 
             optional:false,name:"errors", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ValuesManager"
    },
    "group:menuItems":{
        ref:"group:menuItems",
        refs:[],
        name:"menuItems",
        seeAlso:[],
        type:"group"
    },
    "classMethod:FileLoader.cacheImgStates":{
        ref:"classMethod:FileLoader.cacheImgStates",
        flags:"",
        description:"\n Caches a set of state images derived from a base image.  This is useful for caching a set of\n images for a single component.  For example this code:\n <pre>\n isc.FileLoader.cacheImgStates(\"/isomorphic/skins/SmartClient/images/TreeGrid/opener.png\",\n                               \"closed,opening,opened\");\n </pre>\n Will cause the following images to be cached:\n <pre>\n /isomorphic/skins/SmartClient/images/TreeGrid/opener_closed.png\n /isomorphic/skins/SmartClient/images/TreeGrid/opener_opening.png\n /isomorphic/skins/SmartClient/images/TreeGrid/opener_opened.png\n </pre>\n\n",
        name:"cacheImgStates",
        seeAlso:[
            {ref:"classMethod:FileLoader.cacheStretchImgStates", description:null}
        ],
        params:[
            {description:"List of base image URLs from which stateful names are to be                                    derived.  This can either be a\n                                    string with comma separated baseURLs or an Array of baseURLs.", 
             optional:false,name:"baseURLs", defaultValue:null, type:"String or Array"},
            {description:"List of states to load.  If none specified, The following                                    default list will be used:\n                                    \"Down,Over,Selected,Selected_Down,Selected_Over\".  This can\n                                    either be a string with comma separated states or an Array\n                                    of states.", 
             optional:true,name:"states", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified URLs                                      has completed caching.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:TabSet.bottomEdgeOffsets":{
        ref:"attr:TabSet.bottomEdgeOffsets",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeOffsets</code>, \n <code>rightEdgeOffsets</code>, <code>topEdgeOffsets</code> and <code>bottomEdgeOffsets</code> \n propertes allow the offsets of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"bottomEdgeOffsets",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:StretchImg.showTitle":{
        ref:"attr:StretchImg.showTitle",
        flags:"IRWA",
        description:"Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be \n displayed for this component.<br>\n Applies to Image-based components only, where the title will be rendered out in a label\n floating over the component",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImg"
    },
    "attr:DataSource.dbName":{
        ref:"attr:DataSource.dbName",
        flags:"IR",
        description:"For DataSources using the ${isc.DocUtils.linkForRef('group:sqlDataSource','SmartClient SQL engine')} for\n persistence, which database configuration to use.  Database configurations can be\n created using the \"Databases\" tab in the Developer Console.  If unset, the default\n database configuration is used (which also settable using the \"Databases\" tab).",
        name:"dbName",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["serverDataIntegration"],
        requiresModules:["SCServer"]
    },
    "attr:ListGrid.loadingDataMessageStyle":{
        ref:"attr:ListGrid.loadingDataMessageStyle",
        flags:"IRW",
        description:"The CSS style name applied to the loadingDataMessage string if displayed.",
        name:"loadingDataMessageStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"loadingDataMessage\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["loadingDataMessage"]
    },
    "method:Array.and":{
        ref:"method:Array.and",
        flags:"",
        description:" Returns true if all values between the start and end indices are true.\n\n",
        name:"and",
        seeAlso:[],
        params:[
            {description:"optional start index (default is 0)", optional:true, name:"start", 
             defaultValue:null,type:"number"},
            {description:"optional end index (default is list.length)", optional:true, name:"end", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"all of the items in the array are true", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "attr:ImgButton.labelVPad":{
        ref:"attr:ImgButton.labelVPad",
        flags:"IRW",
        description:"Vertical padding to be applied to this widget's label. If this value is null, \n the label will be given a vertial padding of zero.\n <p>\n The specified amount of padding is applied to the top and bottom edges of the button, so\n the total amount of padding is 2x the specified value.",
        name:"labelVPad",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton"
    },
    "attr:Canvas.animateHideTime":{
        ref:"attr:Canvas.animateHideTime",
        flags:"IRWA",
        description:"Default time for performing an animated hide.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateHideTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:FormItem.setValueIcons":{
        ref:"method:FormItem.setValueIcons",
        flags:"",
        description:" Set the valueIcons for this item\n",
        name:"setValueIcons",
        seeAlso:[],
        params:[
            {description:"mapping of logical values for this item to icon src URLs", optional:false, 
             name:"map",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "group:dataSourceDeclaration":{
        ref:"group:dataSourceDeclaration",
        title:"Creating DataSources",
        treeLocation:["Client Reference/Data Binding/DataSource"],
        refs:[],
        description:"DataSources can be specified in XML format, in which case the ISC server is used to load the\n DataSource in a JSP file, or DataSources can be directly created on the client via\n JavaScript.\n <P>\n Whether a DataSource is specified in XML or JS, identical requests will ultimately be\n submitted to the server, so the server integration pattern is the same.  However,\n DataSources created in XML are understood by the ISC server, allowing shared validation\n rules declared in the DataSource to be executed automatically on both the client and\n server. Further, for prototyping purposes, the ISC server supports SQL connectivity for\n DataSources specified in XML. This SQL connectivity allows complete database-driven\n applications to be created without writing any server integration code.\n <P>\n DataSources created on the client use the same style of creation as DataBound components:\n <pre>\n    DataSource.create({\n        ID:\"supplyItem\",\n        fields:[\n            {name:\"itemName\", ... }\n            ...\n        ]\n    });\n </pre>\n Reference for all properties that can be set for DataSources, their fields and validators is\n given in the ${isc.DocUtils.linkForRef('class:DataSource')} class reference.\n <P>\n XML DataSources use a direct analogue of this format:\n <pre>\n     &lt;DataSource ID=\"supplyItem\"&gt;\n         &lt;fields&gt;\n             &lt;field name=\"itemName\" type=\"text\" title=\"Item\"/&gt;\n             &lt;field name=\"SKU\"      type=\"text\" title=\"SKU\"&gt;\n                 &lt;validators&gt;\n                     &lt;validator type=\"integerRange\" ... /&gt;\n                 &lt;/validators&gt;\n             &lt;/field&gt;\n         &lt;/fields&gt;\n     &lt;/DataSource&gt;\n </pre>\n XML DataSources are loaded via a special JSP tag supported by the ISC Server:\n <pre>\n     &lt;%&#64; taglib uri=\"/WEB-INF/iscTaglib.xml\" prefix=\"isomorphic\" %&gt;\n     ...\n     &lt;SCRIPT&gt;\n     &lt;isomorphic:loadDS ID=\"supplyItem\"/&gt;\n     &lt;/SCRIPT&gt;\n </pre>\n When loading an XML DataSource, by default, the ISC Server will look for a file named\n <code>&lt;dataSourceId&gt;.ds.xml</code> in the <code>/shared/ds</code> subdirectory under\n webroot.  The location of this directory can be changed, or individual DataSources can be\n placed in arbitrary locations.  For more information, see\n <code>[webroot]/WEB-INF/classes/server.properties</code>.\n <p>",
        name:"dataSourceDeclaration",
        seeAlso:[
            {ref:"class:DataSource", description:null},
            {ref:"group:loadDSTag", description:null}
        ],
        type:"group"
    },
    "attr:RPCRequest.actionURL":{
        ref:"attr:RPCRequest.actionURL",
        flags:"IRW",
        description:"Overrides RPCManager.actionURL for this request only.  If you're using queuing, note that queues\n as per-URL - in other words all RPCRequests in a queue must go to a single URL.  If you attempt\n to send a request with an actionURL that is different from those already in the queue, it\n will be sent to the server separately, ahead of the queue,  and a warning will be logged to\n the Developer Console.",
        name:"actionURL",
        seeAlso:[
            {ref:"classAttr:RPCManager.actionURL", description:null}
        ],
        valueType:"URL",
        defaultValue:"RPCManager.actionURL",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:TabSet.paneContainer":{
        ref:"attr:TabSet.paneContainer",
        flags:"R",
        description:"Container where the component specified by ${isc.DocUtils.linkForRef('attr:Tab.pane')} is shown.\n <P>\n Note: paneContainer and showEdges:true for rounded tabsets: you can enable decorative\n image-based edges on the paneContainer by setting ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','showEdges:true')}\n via paneContainerDefaults (to skin all tabsets) or paneContainerProperties (to use\n edges on one instance).  In this structure, the ${isc.DocUtils.linkForRef('group:baseLine')} should use media\n that matches the appearance of the decorative edges and fully overlaps the edge of the\n paneContainer that it is adjacent to.  In the most typical appearance (symmetric edges\n on all 4 sides), both ${isc.DocUtils.linkForRef('attr:TabBar.baseLineCapSize')} and ${isc.DocUtils.linkForRef('attr:TabBar.baseLineThickness')}\n match the ${isc.DocUtils.linkForRef('attr:Canvas.edgeSize','edgeSize')} set on the paneContainer.  See the\n load_skin.js file for the \"SmartClient\" skin for an example of setting all relevant\n properties.\n <P>\n To disable edges for a particular TabSet, which you may want to do for a TabSet that\n is already within a clearly defined container, configure the paneContainer to show only\n it's top edge:\n <pre>\n      paneContainerProperties : { customEdges:[\"T\"] },\n </pre>\n To completely flatten even the top edge of the TabSet:\n <pre>\n      paneContainerProperties : { customEdges:[\"T\"] },\n      tabBarProperties :{ baseLineCapSize:0 },\n </pre>\n This \"flattens\" the baseLine so that only the center image is used.",
        name:"paneContainer",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "classMethod:Log.setDefaultPriority":{
        ref:"classMethod:Log.setDefaultPriority",
        flags:"",
        description:" Set the default priority of messages that will be visible.\n\n",
        name:"setDefaultPriority",
        seeAlso:[],
        params:[
            {description:"priority level to set", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"},
            {description:"Optional ISC class or instance - if passed the default priority will be set for logging \n      occurring on the class or instance only.", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"}
        ],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "method:Canvas.dragStop":{
        ref:"method:Canvas.dragStop",
        flags:"A",
        description:" Executed when the mouse button is released at the end of the drag. Your widget can\n use this opportunity to fire code based on the last location of the drag or reset any\n visual state that was sent.\n\n",
        name:"dragStop",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to cancel drag interaction.", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:TreeGrid.rowClick":{
        ref:"method:TreeGrid.rowClick",
        flags:"",
        description:"\n This override to ${isc.DocUtils.linkForRef('method:ListGrid.rowClick')}.  This implementation calls through to the\n ${isc.DocUtils.linkForRef('method:TreeGrid.nodeClick')}, ${isc.DocUtils.linkForRef('method:TreeGrid.folderClick')}, ${isc.DocUtils.linkForRef('method:TreeGrid.leafClick')} methods, as\n appropriate unless the click was on the expand/collapse control of a folder - in which case\n those callbacks are not fired.\n <p>\n Do not override this method unless you need a rowClick callback that fires even when the\n user clicks on the expand/collapse control.  If you do override this method, be sure to call\n <code>return this.Super(\"rowClick\", arguments);</code> at the end of your override to\n preserver other handler that are called from the superclass (for example,\n ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')}.\n <p>\n\n",
        name:"rowClick",
        seeAlso:[
            {ref:"method:TreeGrid.nodeClick", description:null},
            {ref:"method:TreeGrid.folderClick", description:null},
            {ref:"method:TreeGrid.leafClick", description:null},
            {ref:"method:ListGrid.recordClick", description:null}
        ],
        params:[
            {description:"record that was clicked on", optional:false, name:"record", defaultValue:null, 
             type:"TreeNode"},
            {description:"index of the row where the click occurred", optional:false, name:"recordNum", 
             defaultValue:null,type:"number"},
            {description:"index of the col where the click occurred", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:FormItem.valueIconLeftPadding":{
        ref:"attr:FormItem.valueIconLeftPadding",
        flags:"IRW",
        description:"If we're showing a value icon, this attribute governs the amount of space between the \n icon and the left edge of the form item cell",
        name:"valueIconLeftPadding",
        seeAlso:[
            {ref:"attr:FormItem.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:ListGrid.fields":{
        flags:"IRW",
        type:"attr",
        ref:"attr:ListGrid.fields",
        description:"An array of field objects, specifying the order, layout, formatting, and\n sorting behavior of each field in the listGrid object.  In ListGrids, the fields\n array specifies columns.  Each field in the fields array is a ListGridField object.\n <p>\n If ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')} is also set, this value acts as a set of overrides as\n explained in ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}.",
        name:"fields",
        setter:["setFields"],
        valueType:"Array of ListGridField",
        seeAlso:[
            {ref:"object:ListGridField", description:null},
            {ref:"method:ListGrid.setFields", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('listGridFields')}", 
         "${isc.DocUtils.linkForExampleId('mergedFields')}"],
        defaultValue:"null",
        groups:["databinding"],
        definingClass:"class:ListGrid"
    },
    "attr:Button.align":{
        ref:"attr:Button.align",
        flags:"IRW",
        description:"Horizontal alignment of this component's title.",
        name:"align",
        setter:["setAlign"],
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:Button",
        groups:["appearance"]
    },
    "method:DynamicForm.validateData":{
        ref:"method:DynamicForm.validateData",
        flags:"",
        description:"\n Perform validation on the client and the server.\n\n",
        name:"validateData",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "attr:ViewLoader.httpMethod":{
        ref:"attr:ViewLoader.httpMethod",
        flags:"IRW",
        description:"Selects the HTTP method that will be used when fetching content.  Valid values are \"POST\"\n and \"GET\".",
        name:"httpMethod",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"GET\"",
        type:"attr",
        definingClass:"class:ViewLoader",
        groups:["contentLoading"]
    },
    "attr:SelectItem.hiliteColor":{
        ref:"attr:SelectItem.hiliteColor",
        deprecated:"As of SmartClient version 5.5, if ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} is true,  styling will be updated for this form item on focus. The hiliting effect can therefore\n  be achieved via ${isc.DocUtils.linkForRef('attr:SelectItem.textBoxStyle')} and ${isc.DocUtils.linkForRef('attr:SelectItem.controlStyle')} \n  instead.",
        flags:"IRWA",
        description:"Background color to apply to the select item's selected value when the SelectItem \n recieves focus, if <code>hiliteOnFocus</code> is true.",
        name:"hiliteColor",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"#316AC5\"",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:Facet.summaryTitle":{
        ref:"attr:Facet.summaryTitle",
        flags:"IR",
        description:"title for facet summary.",
        name:"summaryTitle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"cubeGrid.summaryTitle",
        type:"attr",
        definingClass:"class:Facet"
    },
    "classMethod:isc.getIconLeft":{
        ref:"classMethod:isc.getIconLeft",
        flags:"A",
        description:"  Returns the (offset) left-coordinate of an icon within its containing widget.\n",
        name:"getIconLeft",
        seeAlso:[],
        params:[
            {description:"icon definition", optional:false, name:"icon", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"icon left position in px", type:"number"},
        type:"method",
        definingClass:"class:isc"
    },
    "method:ListGrid.cancelEditing":{
        ref:"method:ListGrid.cancelEditing",
        flags:"",
        description:"\n  Cancel the current edit without saving.\n\n",
        name:"cancelEditing",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:gridHeader":{
        ref:"group:gridHeader",
        refs:["method:ListGrid.setHeaderHeight", "method:ListGrid.setShowHeader", 
         "method:ListGrid.displayHeaderContextMenu","method:ListGrid.getHeaderContextMenuItems", "attr:ListGrid.header", 
         "attr:ListGrid.headerHeight","attr:ListGrid.showHeader", "attr:ListGrid.headerBarStyle", 
         "attr:ListGrid.headerBackgroundColor","attr:ListGrid.headerButtonConstructor", "attr:ListGrid.headerBaseStyle", 
         "attr:ListGrid.headerTitleStyle","attr:ListGrid.headerButtonDefaults", "attr:ListGrid.headerButtonProperties", 
         "attr:ListGrid.sorterConstructor","attr:ListGrid.sorterDefaults", "attr:ListGrid.sorterProperties", 
         "attr:ListGrid.showHeaderContextMenu"],
        description:"Properties and methods related to the ListGrid header. ListGrid headers are implemented\n as a ${isc.DocUtils.linkForRef('class:Toolbar')} of buttons shown at the top of the ListGrid \n (one button per column).<br>\n The toolbar header provides UI for interacting with the ListGrid fields directly (sorting,\n resizing, reordering columns, etc).",
        name:"gridHeader",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.getDrawnRows":{
        ref:"method:ListGrid.getDrawnRows",
        flags:"",
        description:" Get the rows that are currently drawn (exist in the DOM), as an array of [firstRowNum,\n lastRowNum].  \n <P>\n The drawn rows differ from the ${isc.DocUtils.linkForRef('method:ListGrid.getVisibleRows','visibleRows')} because of\n ${isc.DocUtils.linkForRef('attr:ListGrid.drawAheadRatio','drawAhead')}.  The drawn rows are the apppropriate range to consider if\n you need to, eg, using ${isc.DocUtils.linkForRef('method:ListGrid.refreshCell')} to update all the cells in a column.\n <P>\n If the grid is undrawn or the ${isc.DocUtils.linkForRef('attr:ListGrid.emptyMessage')} is currently shown, returns\n [null,null];\n\n",
        name:"getDrawnRows",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:Tree.findById":{
        ref:"method:Tree.findById",
        flags:"A",
        description:"\n Find the node with the specified ID.  Specifically, it returns the node whose idField\n matches the id passed to this method. If the tree is using the \"parent\" modelType, this\n lookup will be constant-time.  For all other modelTypes, the tree will be searched\n recursively.\n\n",
        name:"findById",
        seeAlso:[
            {ref:"attr:Tree.idField", description:null},
            {ref:"method:Tree.find", description:null}
        ],
        params:[
            {description:"ID of the node to return.", optional:false, name:"id", defaultValue:null, 
             type:"string"}
        ],
        returns:{description:"node with appropriate ID, or null if not found.", type:"object"},
        type:"method",
        definingClass:"class:Tree",
        groups:["location"]
    },
    "method:SelectItem.getValueFieldName":{
        ref:"method:SelectItem.getValueFieldName",
        flags:"A",
        description:" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.\n If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.\n",
        name:"getValueFieldName",
        seeAlso:[],
        returns:{description:"fieldName to use a \"value field\" in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}", 
         type:"string"},
        type:"method",
        definingClass:"class:SelectItem",
        groups:["display_values"]
    },
    "classMethod:isc.confirm":{
        ref:"classMethod:isc.confirm",
        flags:"",
        description:" Show a modal dialog with a message, icon, and \"OK\" and \"Cancel\" buttons.\n <P>\n The callback will receive boolean true for an OK button click, or null for a Cancel click or\n if the Dialog is dismissed via the close button.\n <P>\n Note: this does not override the native window.confirm() method.\n\n",
        name:"confirm",
        seeAlso:[
            {ref:"classAttr:Dialog.Warn", description:null},
            {ref:"classMethod:isc.warn", description:null},
            {ref:"method:Dialog.okClick", description:null},
            {ref:"method:Dialog.cancelClick", description:null},
            {ref:"classAttr:Dialog.CONFIRM_TITLE", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"Callback to fire when the                                       user clicks a button to dismiss the dialog.\n                                      This has the single parameter 'value', indicating the \n                                      value returned by the Warn dialog from 'okClick()' etc.", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for\n                                      the Dialog, set properties.buttons to an array of buttons\n										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('dialogs')}"],
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "method:Canvas.setOverflow":{
        ref:"method:Canvas.setOverflow",
        flags:"A",
        description:" Update the ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} of a Canvas after it has been created.\n",
        name:"setOverflow",
        seeAlso:[],
        params:[
            {description:"New overflow value.", optional:false, name:"newOverflow", defaultValue:null, 
             type:"Overflow"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "sizing"]
    },
    "method:Button.addToRadioGroup":{
        ref:"method:Button.addToRadioGroup",
        flags:"",
        description:" Add this widget to the specified mutually exclusive selection group with the ID\n passed in.\n Selecting this widget will then deselect any other StatefulCanvases with the same\n radioGroup ID.\n StatefulCanvases can belong to only one radioGroup, so this method will remove from \n any other radiogroup of which this button is already a member.\n",
        name:"addToRadioGroup",
        seeAlso:[],
        params:[
            {description:"- ID of the radiogroup to which this widget should be added", 
             optional:false,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["state", "event handling"]
    },
    "attr:ListGrid.valueIconRightPadding":{
        ref:"attr:ListGrid.valueIconRightPadding",
        flags:"IRW",
        description:"How much padding should there be on the right of valueIcons by default",
        name:"valueIconRightPadding",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "method:Log.echo":{
        ref:"method:Log.echo",
        flags:"",
        description:" Return a short string representation of any object, suitable for viewing by a developer for\n debugging purposes.\n <P>\n If passed an object containing other objects, echo will not recurse into subobjects,\n summarizing them instead via echoLeaf().\n <P>\n NOTE: echo() is used to generate the output shown in the Log window when evaluating an\n expression.\n \n",
        name:"echo",
        seeAlso:[
            {ref:"method:Log.echoAll", description:null},
            {ref:"method:Log.echoLeaf", description:null}
        ],
        params:[
            {description:"object to echo", optional:false, name:"obj", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"method",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "attr:Canvas.autoShowParent":{
        ref:"attr:Canvas.autoShowParent",
        flags:"IRWA",
        description:"If set to true, the widget's parent (if any) will automatically be shown whenever the\n      widget is shown.",
        name:"autoShowParent",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "class:ResultSet":{
        methods:["method:ResultSet.allMatchingRowsCached", "method:ResultSet.allRowsCached", 
         "method:ResultSet.getValueMap","method:ResultSet.getLength", "method:ResultSet.indexOf", "method:ResultSet.get", 
         "method:ResultSet.getRange","method:ResultSet.lengthIsKnown", "method:ResultSet.rowIsLoaded", 
         "method:ResultSet.rangeIsLoaded","method:ResultSet.setCriteria", "method:ResultSet.getCriteria", 
         "method:ResultSet.compareCriteria","method:ResultSet.willFetchData", "method:ResultSet.sortByProperty", 
         "method:ResultSet.filterLocalData","method:ResultSet.applyFilter", "method:ResultSet.invalidateCache", 
         "method:ResultSet.transformData","method:ResultSet.dataArrived", "method:ResultSet.findAll", "method:ResultSet.find", 
         "method:ResultSet.findIndex","method:ResultSet.findNextIndex"],
        ref:"class:ResultSet",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:ResultSet.fetchMode", "attr:ResultSet.initialData", "attr:ResultSet.initialLength", 
         "attr:ResultSet.allRows","attr:ResultSet.resultSize", "attr:ResultSet.fetchDelay", "attr:ResultSet.dataSource", 
         "attr:ResultSet.fetchOperation","attr:ResultSet.criteria", "attr:ResultSet.criteriaPolicy", 
         "attr:ResultSet.useClientSorting","attr:ResultSet.useClientFiltering", "attr:ResultSet.updateCacheFromRequest", 
         "attr:ResultSet.dropCacheOnUpdate","attr:ResultSet.disableCacheSync", "attr:ResultSet.neverDropUpdatedRows", 
         "attr:ResultSet.updatePartialCache"],
        description:"ResultSets are an implementation of the ${isc.DocUtils.linkForRef('interface:List')} interface that automatically fetches \n DataSource records when items are requested from the List.  ResultSets provide robust,\n customizable, high-performance cache management for ListGrids and other built-in SmartClient\n components, and can be used as cache managers by custom components.\n <P>\n ResultSets manage data paging, that is, loading records in batches as the user navigates\n the data set.  A ResultSet will switch to using client-side sorting and filtering when\n possible to improve responsiveness and reduce server load.  ResultSets also participate in\n automatic cache synchronization, observing operations on DataSources and automatically\n updating their caches.\n <P>\n <b>Creation</b>\n <P>\n A ResultSet can be passed to any component that expects a List, and the List APIs can be\n called directly on the ResultSet as long as the caller is able to deal with asynchronous\n loading; see ${isc.DocUtils.linkForRef('method:ResultSet.getRange')}.\n <P>\n Generally ResultSets do not need to be created directly, but are created by DataBound\n components as an automatic consequence of calling \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.  \n For example, the ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} causes ${isc.DocUtils.linkForRef('attr:ListGrid.data')} to become an\n automatically created <code>ResultSet</code> object.  Automatically created ResultSets\n can be customized via properties on ListGrids such as ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize')} and\n ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')}.  All ResultSets for a given DataSource may also be \n customized via setting ${isc.DocUtils.linkForRef('attr:DataSource.resultSetClass')} to the name of a ResultSet \n ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','subclass')} in which \n ${isc.DocUtils.linkForRef('classMethod:Class.addProperties','defaults have been changed')}.\n <P>\n A ResultSet defaults to using data paging, setting ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')} and\n ${isc.DocUtils.linkForRef('attr:DSRequest.endRow')} in issued dsRequests.  Server code may always return more rows than\n the ResultSet requests and the ResultSet will correctly integrate those rows based on\n ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}/${isc.DocUtils.linkForRef('attr:DSResponse.endRow','endRow')}.  \n Hence the server can always avoid paging mode by simply returning all matching rows.\n <P>\n A ResultSet can be created directly with just the ID of a ${isc.DocUtils.linkForRef('class:DataSource')}:\n <pre>\n     isc.ResultSet.create({\n         dataSource : \"<i>dataSourceID</i>\"\n     })\n </pre>\n <P>\n Directly created ResultSets are typically used by custom components, or as a means of\n managing datasets that will be used by several components.\n <P>\n When created directly rather than via a dataBoundComponent, a newly created ResultSet will\n not issue it's first \"fetch\" ${isc.DocUtils.linkForRef('class:DSRequest')} until data is accessed (for example, via\n ${isc.DocUtils.linkForRef('method:ResultSet.get','get()')}).  \n <P>\n <b>Paging and total dataset length</b>\n <P>\n When using data paging, the server communicates the total number of records that match the\n current search criteria by setting ${isc.DocUtils.linkForRef('attr:DSResponse.totalRows')}.  The ResultSet will then\n return this number from ${isc.DocUtils.linkForRef('method:ResultSet.getLength','getLength()')}, and ListGrids and other\n components will show a scrollbar that allows the user to jump to the end of the dataset\n directly.\n <P>\n However, the ResultSet does not require that the server calculate the true length of the\n dataset, which can be costly for an extremely large, searchable dataset.  Instead, the\n server <i>may</i> simply advertise a <code>totalRows</code> value that is one page larger\n than the last row loaded.  This results in a UI sometimes called \"progressive loading\",\n where the user may load more rows by scrolling past the end of the currently loaded rows,\n but is not allowed to skip to the end of the dataset.\n <P>\n No client-side settings are required to enable this mode - it is entirely server-driven.\n However, it is usually coupled with ${isc.DocUtils.linkForRef('attr:ListGrid.canSort','disabling sorting')}, since\n server-side sorting would also force the server to traverse the entire dataset.\n <P>\n <b>Client-side Sorting and Filtering</b>\n <P>\n If a ResultSet obtains a full cache for the current set of filter criteria, it will \n automatically switch to client-side sorting, and will also use client-side filtering \n if the filter criteria are later changed but appear to be <i>more restrictive</i> than the\n criteria in use when the ResultSet obtained a full cache.\n <P>\n The ${isc.DocUtils.linkForRef('attr:ResultSet.useClientSorting','useClientSorting')} and \n ${isc.DocUtils.linkForRef('attr:ResultSet.useClientFiltering','useClientFiltering')} flags can be used to disable\n client-side sorting and filtering respectively if these behaviors don't match server-based\n sorting and filtering.  However, because client-side sorting and filtering radically improve\n responsiveness and reduce server load, it is better to customize the ResultSet so that it\n can match server-side sorting and filtering behaviors.\n <P>\n Sorting behavior is primarily customized via the \"sort normalizer\" passed to\n ${isc.DocUtils.linkForRef('method:ResultSet.sortByProperty')}, either via direct calls on a standalone ResultSet, or via\n ${isc.DocUtils.linkForRef('method:ListGridField.sortNormalizer')} for a ListGrid-managed ResultSet.\n <P>\n By default, client-side filtering interprets the ${isc.DocUtils.linkForRef('type:Criteria','criteria')} passed to\n ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')} as a set of field values that records must match\n (similarly to the built-in SQL/Hibernate connectors built into the SmartClient Server).\n Custom client-side filtering logic can be implemented by overriding\n ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter','applyFilter()')}.  Overriding\n ${isc.DocUtils.linkForRef('method:ResultSet.compareCriteria','compareCriteria()')} allows you to control when the ResultSet\n uses client-side vs server-side filtering, and the ResultSet has two default \n ${isc.DocUtils.linkForRef('attr:ResultSet.criteriaPolicy','criteria policies')} built-in.\n <P>\n <b>Updates and Automatic Cache Synchronization</b>\n <P>\n ResultSets observe any successful \"update\", \"add\" or \"remove\" dsRequests against their\n DataSource, regardless of the component that initiated them.  A ResultSet with a full cache\n for the current filter criteria will integrate updates into the cache automatically.\n <P>\n Updated rows that no longer match the current filter criteria will be removed\n automatically.  To prevent this, you can set ${isc.DocUtils.linkForRef('attr:ResultSet.neverDropUpdatedRows')}.\n Added rows will similarly be added to the cache only if they match current filter criteria.\n <P>\n Note that the client-side filtering described above is also used to determine whether \n updated or added rows should be in the cache.  If any aspect of automated cache update is\n ever incorrect, ${isc.DocUtils.linkForRef('attr:ResultSet.dropCacheOnUpdate','dropCacheOnUpdate')} can be set for the\n ResultSet or ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')} can be set for an individual dsResponse.\n <P>\n <b>Data Paging with partial cache</b>\n <P>\n When in paging mode with a partial cache, a ResultSet relies on server side sorting, setting \n ${isc.DocUtils.linkForRef('attr:DSRequest.sortBy')} to the current sort field and direction.  In order for the cache to \n remain coherant, row numbering must continue to agree between server and client as new\n fetches are issued, otherwise, duplicate rows or missing rows may occur.  \n <P>\n If concurrent modifications by other users are allowed, generally the server should set\n ${isc.DocUtils.linkForRef('attr:DSResponse.invalidateCache')} to clear the cache when concurrent modification is\n detected.\n <P>\n In paging mode with a partial cache, any successful \"update\" or \"add\" operation may cause\n client and server row numbering to become out of sync.  This happens because the update\n may affect the sort order, and client and server cannot be guaranteed to match for sets of\n records that have equivalent values for the sort field.\n <P>\n For this reason, after an \"add\" or \"update\" operation with a partial cache, the ResultSet\n will automatically mark cache for invalidation the next time a fetch operation is performed.\n Alternatively, if ${isc.DocUtils.linkForRef('attr:ResultSet.updatePartialCache')} is set to false, the ResultSet will\n simply invalidate cache immediately in this circumstance.",
        name:"ResultSet",
        implementsInterfaces:["List"],
        seeAlso:[
            {ref:"interface:DataBoundComponent", description:null},
            {ref:"group:dataBoundComponentMethods", description:null},
            {ref:"attr:DataSource.resultSetClass", 
             description:"to customize all ResultSets for a given DataSource"},
            {ref:"method:ResultSet.getRange", 
             description:"for information on handling asynchronous loading"}
        ],
        type:"class"
    },
    "attr:DataSource.serverType":{
        ref:"attr:DataSource.serverType",
        flags:"IR",
        description:"For a DataSource stored in .xml format on the ISC server, indicates what server-side\n connector to use to execute requests, that is, what happens if you call\n dsRequest.execute() in server code.",
        name:"serverType",
        seeAlso:[],
        valueType:"DSServerType",
        defaultValue:"\"generic\"",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["serverDataIntegration"],
        requiresModules:["SCServer"]
    },
    "group:drawing":{
        ref:"group:drawing",
        refs:["method:FormItem.getFieldName", "method:FormItem.getTitle", "method:FormItem.isDrawn", 
         "method:Canvas.isDrawn","method:Canvas.getInnerHTML", "method:Canvas.draw", "method:Canvas.markForRedraw", 
         "method:Canvas.redraw","attr:Canvas.autoDraw", "attr:Canvas.redrawOnResize"],
        description:"Rendering an object on the page",
        name:"drawing",
        seeAlso:[],
        type:"group"
    },
    "attr:MenuItem.iconHeight":{
        ref:"attr:MenuItem.iconHeight",
        flags:"IR",
        description:"The height applied to this item's icon.  The default of <code>16</code> can be changed\n for all MenuItems by overriding ${isc.DocUtils.linkForRef('attr:Menu.iconHeight')}.",
        name:"iconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"object:MenuItem",
        groups:["menuIcons"]
    },
    "attr:FormItem.hoverDelay":{
        ref:"attr:FormItem.hoverDelay",
        flags:"IRWA",
        description:"If specified, this is the number of miliseconds to wait between the user rolling over \n this form item, and triggering any hover action for it.<br>\n If not specified <code>this.form.itemHoverDelay</code> will be used instead.",
        name:"hoverDelay",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "method:List.add":{
        ref:"method:List.add",
        flags:"",
        description:" Add an object to this list, at the end\n\n",
        name:"add",
        seeAlso:[],
        params:[
            {description:"object to add", optional:false, name:"object", defaultValue:null, type:"any"}
        ],
        returns:{description:"pointer to the object passed in", type:"any"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "attr:DSRequest.headerData":{
        ref:"attr:DSRequest.headerData",
        flags:"IRW",
        description:"For DataSources using SOAP messaging with a WSDL web service, data to be serialized to form\n SOAP headers, as a map from the header part name to the data.  See\n ${isc.DocUtils.linkForRef('attr:WSRequest.headerData')} for more information.\n <P>\n SOAP headers typically contain request metadata such as a session id for authentication, and\n so <code>dsRequest.headerData</code> is typically populated by\n ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}, or, for data that applies to every request sent to the\n server, by ${isc.DocUtils.linkForRef('method:WebService.getHeaderData')}.",
        name:"headerData",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "method:Canvas.setPageLeft":{
        ref:"method:Canvas.setPageLeft",
        flags:"",
        description:" Set the page-relative left coordinate of this widget.\n \n",
        name:"setPageLeft",
        seeAlso:[],
        params:[
            {description:"new left coordinate in pixels", optional:false, name:"left", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "method:ListGrid.setFields":{
        ref:"method:ListGrid.setFields",
        flags:"A",
        description:" Sets the fields array and/or field widths to newFields and sizes, respectively.<br><br>\n\n If newFields is specified, it is assumed that the new fields may have nothing in common with\n the old fields, and the component is substantially rebuilt.  Consider the following methods\n for more efficient, more incremental changes: resizeField, reorderField, showField,\n hideField, setFieldProperty.\n\n",
        name:"setFields",
        seeAlso:[],
        params:[
            {description:"array of fields to draw", optional:true, name:"newFields", defaultValue:null, 
             type:"List of ListGridField"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:PickList.getOptionDataSource":{
        ref:"method:PickList.getOptionDataSource",
        flags:"",
        description:" Pick-lists can derive their data directly from a valueMap, or retrieve data from a \n dataSource to display as options.\n \n This method will return the dataSource used to populate the pickList, or null if \n none specified (implies this list will derive its data from the valueMap for the item).\n Default implementation  will return ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} if specified,\n otherwise if this is a field with a specified <code>foreignKey</code> in a databound\n form, returns the dataSource for the <code>foreignKey</code>.\n Otherwise picks up <code>this.form.dataSource</code> if set.\n\n",
        name:"getOptionDataSource",
        seeAlso:[],
        returns:{description:"DataSource to use for fetching options", type:"DataSource"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "type:Callback":{
        ref:"type:Callback",
        description:"A <code>Callback</code> is an arbitrary action to be fired - usually passed into a \n method to be fired asynchronously as a notificaction of some event.<br>\n The <code>callback</code> can be defined in the following formats:<ul>\n <li>a function</li>\n <li>A string containing an expression to evaluate</li>\n <li>An object with the following properties:<br>\n     - target: fire in the scope of this target - when the action fires,\n       the target will be available as <code>this</code>.<br>\n     - methodName: if specified we'll check for a method on the target object with this \n       name.<br>\n  </li></ul>\n <code>Callbacks</code> are fired via the ${isc.DocUtils.linkForRef('classMethod:Class.fireCallback')} method, which allows\n named parameters to be passed into the callback at runtime. If the Callback was specified\n as a string of script, these parameters are available as local variables at eval time.<br>\n For specific SmartClient methods that make use of <code>Callback</code> objects, see\n local documentation for information on parameters and scope.",
        name:"Callback",
        seeAlso:[],
        type:"type"
    },
    "method:ListGridField.formatCellValue":{
        ref:"method:ListGridField.formatCellValue",
        flags:"",
        description:" Return the HTML to display in cells of this field.\n <P>\n Given the raw value for this field as taken from the record Formatter to apply to the\n static values displayed in cells for this field.\n <P>\n <i>Example usage</i>: formatting a currency value stored in cents (so \"100\" to \"$1.00\")<br>\n The value passed to this method is the raw value for the cell.<br>\n Takes precedence over <code>formatCellValue</code> defined at the grid level for cells\n in this field.\n <P>\n Note: this formatter will not be applied to the values displayed in cells being edited.\n The ${isc.DocUtils.linkForRef('method:ListGridField.formatEditorValue','formatEditorValue()')} is provided for that purpose.\n\n",
        name:"formatCellValue",
        seeAlso:[
            {ref:"method:ListGrid.formatCellValue", description:null},
            {ref:"method:ListGridField.formatEditorValue", description:null}
        ],
        params:[
            {description:"raw value for the cell, from the record for the row", optional:false, 
             name:"value",defaultValue:null, type:"any"},
            {description:"Record object for the cell. Note: If this is a new row that has not been saved, in an \n   editable grid, it has no associated record object. In this case the edit values will\n   be passed in as this parameter (see ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')})", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"},
            {description:"the ListGrid displaying the cell", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        returns:{description:"HTML to display in the cell", type:"String"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('formatValues')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "attr:ListGrid.dataSource":{
        ref:"attr:ListGrid.dataSource",
        flags:"IRW",
        description:"The DataSource that this component should bind to for default fields and for performing\n ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.\n <P>\n Can be specified as either a DataSource instance or the String ID of a DataSource.",
        name:"dataSource",
        seeAlso:[],
        valueType:"DataSource or ID",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dataSourceFields')}"],
        definingClass:"class:ListGrid",
        groups:["databinding"]
    },
    "method:PickList.getClientPickListData":{
        ref:"method:PickList.getClientPickListData",
        flags:"A",
        description:" Returns the set of data to be displayed in this item's PickList.\n <P>\n This method will be called for non-databound form items implementing the PickList\n interface.  The default implementation will derive data from the item's valueMap - \n can be overridden to allow a custom set of options to be displayed.\n <P>\n Note that for PickLists that filter data based on user input\n (${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')}), this method should return the data <b>before\n filtering</b>.  To customize the data returned after filtering, override\n ${isc.DocUtils.linkForRef('method:PickList.filterClientPickListData')} instead.\n <P>\n As an example, for a formItem with ${isc.DocUtils.linkForRef('attr:PickList.valueField')} set to \"valueFieldName\", the\n default implementation would take a valueMap like the following:\n <pre>\n     valueMap: { value1: \"display 1\", value2: \"display 2\" }\n </pre>\n .. and returning the following set of records: \n <pre>\n     [\n          { valueFieldName : \"value1\" },\n          { valueFieldName : \"value2\" }\n     ]\n </pre>\n Due to the valueMap, these records will appear as a two row pickList displayed as\n \"display 1\" and \"display 2\".\n\n",
        name:"getClientPickListData",
        seeAlso:[],
        returns:{description:"Array of record objects to be displayed in the           pickList. Note that when a user picks a record from the list, the value of the\n           field matching <code>item.valueField</code> will be picked. Also note that the\n           fields to be displayed can be customized via <code>item.pickListFields</code>", 
         type:"Array of ListGridRecord"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "type:listGridFieldState":{
        ref:"type:listGridFieldState",
        description:"An object containing the stored presentation information for the fields of a listGrid.\n Information contained in a <code>listGridFieldState</code> object includes the \n visibility and widths of the listGrid's fields.<br>\n Note that this object is a JavaScript string, and may be stored (for example) as a blob \n on the server for state persistence across sessions.",
        name:"listGridFieldState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "method:ValuesManager.hasFieldErrors":{
        ref:"method:ValuesManager.hasFieldErrors",
        flags:"",
        description:" Are there any errors associated with a field in this valuesManager?\n",
        name:"hasFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to check for errors", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"returns true if there are any oustanding validation errors, false                   otherwise.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:CubeGrid.autoSizeHeaders":{
        ref:"attr:CubeGrid.autoSizeHeaders",
        flags:"IRW",
        description:"Automatically size row headers to fit wrapped text",
        name:"autoSizeHeaders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "group:loadDMIStubsTag":{
        ref:"group:loadDMIStubsTag",
        title:"&lt;isomorphic:loadDMIStubs&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n Creates global bindings for all serverObjects defined in the <code>rpcBindings</code>\n section .app.xml file specified by the <code>ID</code> or <code>name</code> attribute of\n this tag.  Once you've loaded your <code>rpcBindings</code> using this tag, you can call\n methods on the <code>ServerObjects</code> defined there directly.  For example, you can load\n the example.app.xml (located in /shared/app directory of the webRoot of the SDK) like this:\n <pre>\n &lt;isomorphic:loadDMIStubs ID=\"example\"/&gt;\n </pre>\n Whereas using ${isc.DocUtils.linkForRef('classMethod:DMI.call')} you would have had to invoke the <code>getTimeStamp</code>\n method like this:\n <pre>\n DMI.call(\"example\", \"GetTimeStampDMI\", \"getTimeStamp\", new Date(), \"alert(data)\";\n </pre>\n Having loaded the stubs of the <code>example</code> .app.xml, you can then call\n <code>getTimeStamp</code> like this:\n <pre>\n GetTimeStampDMI.getTimeStamp(new Date(), \"alert(data)\");\n </pre>\n or this:\n <pre>\n GetTimeStamp.getTimeStamp({\n     arguments: [new Date()],\n     callback: \"alert(data)\"\n });\n </pre>\n or this:\n <pre>\n GetTimeStamp.call({\n     methodName: \"getTimeStamp\",\n     arguments: [new Date()],\n     callback: \"alert(data)\"\n });\n </pre>\n As with ${isc.DocUtils.linkForRef('classMethod:DMI.call')}, the last argument must be the callback - if you don't want a\n callback, simply specify <code>null</code> as the callback.  The name of the global binding\n created will be the same as the ${isc.DocUtils.linkForRef('attr:ServerObject.ID')} or the non-qualified name of the\n ${isc.DocUtils.linkForRef('attr:ServerObject.className')} (java namespace, if any, will be stripped).\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>ID or name</b><br>\n <i>value format</i>: String - name of .app.xml file to load (minus the .app.xml extension)<br>\n <i>default value</i>: NONE\n <p>\n This attribute specifies the name of the file that contains the rpcBindings to load.\n UI files are located in <code>[webroot]/shared/app</code> by default.  This location is\n changeable in <code>[webroot]/WEB-INF/classes/server.properties</code> by setting the config\n parameter <code>project.apps</code> to the directory where your .app.xml files are located.   \n We recommend that for prototying, at least, you use the default directory.",
        name:"loadDMIStubsTag",
        seeAlso:[
            {ref:"class:DMI", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "attr:ListGridField.valueIconWidth":{
        ref:"attr:ListGridField.valueIconWidth",
        flags:"IRW",
        description:"Width for value icons for this listGrid field.\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}, ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconWidth')}, and\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')}.",
        name:"valueIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:FormItem.left":{
        ref:"attr:FormItem.left",
        flags:"IRWA",
        description:"Left coordinate of this item in pixels.  Applies only when the containing DynamicForm\n sets <code>itemLayout:\"absolute\"</code>.",
        name:"left",
        setter:["setLeft"],
        seeAlso:[],
        valueType:"integer",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:FormItem"
    },
    "group:wsdlBinding":{
        ref:"group:wsdlBinding",
        title:"WSDL Binding",
        treeLocation:["Client Reference/Data Binding"],
        refs:["attr:DataSource.serviceNamespace", "attr:DataSource.schemaNamespace"],
        description:"SmartClient supports automated integration with WSDL-described web services.  This support\n consists of:\n <ul>\n <li> creation of SOAP XML messages from JavaScript application data, with automatic\n namespacing, and support for both \"literal\" and \"encoded\" SOAP messaging, and \"document\" and\n \"rpc\" WSDL-SOAP bindings\n <li> automatic decode of SOAP XML messages to JavaScript objects, with strong typing (eg an\n XML schema \"date\" type becomes a JavaScript Date object)\n <li> ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema','import of XML Schema')} (contained in WSDL, or external),\n including translating XML Schema \"restrictions\" to ISC ${isc.DocUtils.linkForRef('class:Validator','Validators')}\n </ul>\n <P>\n WSDL services can be contacted by using ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} or the\n ${isc.DocUtils.linkForRef('group:loadWSDLTag','&lt;isc:loadWSDL&gt; JSP tag')} to load the service definition, then\n invoking methods on the resulting ${isc.DocUtils.linkForRef('class:WebService')} object.\n <P>\n ${isc.DocUtils.linkForRef('method:WebService.callOperation')} can be used to manually invoke operations for\n custom processing (example using ${isc.DocUtils.linkForExampleId('wsdlOperation', 'public zipcode service')},\n examples using .NET at\n <a href='/examples/databinding/dotNET/temperatureConvert.jsp' onclick=\"window.open('/examples/databinding/dotNET/temperatureConvert.jsp');return false;\">/examples/databinding/dotNET/temperatureConvert.jsp</a>).\n <P>\n <b>Fetch-only DataSource binding</b>\n <P>\n To bind a component to a web service operation, call\n <P>\n &nbsp;&nbsp;${isc.DocUtils.linkForRef('method:WebService.getFetchDS','WebService.getFetchDS(<i>operationName,elementName</i>)')}\n <P>\n to obtain a DataSource which describes the structure of an XML element or XML Schema type\n named <i>elementName</i>, which appears in the response message for the operation named\n <i>operationName</i>.  A component bound to this DataSource will show fields corresponding\n to the structure of the chosen XML element or type, that is, one field per subelement or\n attribute.  ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} called on this DataSource (or on a\n component bound to it) will invoke the specified web service operation, using the\n ${isc.DocUtils.linkForRef('type:Criteria')} passed to fetchData() to fill out the input message via\n ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}, and using the specified XML element from the response\n message as data.\n <P>\n Similarly, ${isc.DocUtils.linkForRef('method:WebService.getInputDS','WebService.getInputDS(<i>operationName</i>)')} returns\n a DataSource suitable for binding to a form that a user will fill out to provide inputs to\n the specified web service operation.  Typical use is to let the user fill in the form, then\n pass the results of ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')} to\n ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')} as criteria.\n <P>\n If the input message to the web service has extra nesting, consider using\n the ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields','useFlatFields')} property to simplify the inputs\n required for <code>fetchData()</code>, and/or to simplify form databinding via\n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields','component.useFlatFields')}.\n <P>\n Note that the WSDL tab in the Developer Console can provide a clean, simplified view of any \n WSDL file, making it easier to pick out the appropriate <code>operationName</code> and\n <code>elementName</code> parameters to pass to <code>getFetchDS()</code> and other\n ${isc.DocUtils.linkForRef('class:WebService')} methods.\n <P>\n Take a look at the ${isc.DocUtils.linkForExampleId('wsdlBinding', 'Google SOAP Search example')} and the\n <a href='/examples/databinding/dotNET/customerSearch.jsp' onclick=\"window.open('/examples/databinding/dotNET/customerSearch.jsp');return false;\">.NET example</a>\n (/examples/databinding/dotNET/customerSearch.jsp).\n <P>\n <b>Binding with Customized Presentation</b>\n <P>\n Because XML Schema lacks key presentation metadata such as user-viewable titles, typically\n you cannot directly use the DataSources derived from XML Schema embedded in a WSDL file to\n drive visual component DataBinding in your final application.\n <P>\n You can create a DataSource that has custom fields <b>and</b> invokes a web\n service operation by setting ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} to match the targetNamespace\n of the ${isc.DocUtils.linkForRef('class:WebService')} (found on the <code>&lt;definitions&gt;</code> element from the\n WSDL file), and setting ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} to the name of the\n web service operation to invoke.  <code>fetchData()</code> called on such a DataSource will\n invoke the web service operation named by ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')},\n just like a DataSource returned by ${isc.DocUtils.linkForRef('method:WebService.getFetchDS')}.\n <P>\n In contrast to <code>getFetchDS()</code>, creating a DataSource in this way gives you the\n opportunity to:\n <ul>\n <li> declare arbitrary fields, with SmartClient presentation attributes such as titles and\n formatters\n <li> extract any data from the response message, via\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','operationBinding.recordXPath')} and \n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','field.valueXPath')}, and transform it with\n ${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse()')}\n <li> transform the inbound data, if necessary, in order to add metadata such as\n ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')} for paging, or a sessionId for a service requiring authentication\n </ul>\n These techniques are shown in the ${isc.DocUtils.linkForExampleId('wsdlBinding', 'Google SOAP Search example')}.\n <P>\n <b>XML Schema Reuse</b>\n <P>\n Having loaded a WSDL file, all of the XML Schema definitions within the service definition\n get translated to SmartClient ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} and\n ${isc.DocUtils.linkForRef('class:SimpleType','SimpleTypes')} via the rules described by ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')},\n and are available to you via ${isc.DocUtils.linkForRef('method:WebService.getSchema')} and ${isc.DocUtils.linkForRef('attr:DataSourceField.type')}. \n <P>\n You can use the ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')} property to create DataSources that extend\n from XML schema definitions, then add presentation metadata not found in XML schema.\n <P>\n Even if you choose to declare all fields manually, you can leverage XML Schema\n &lt;simpleType&gt; definitions by setting ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} to the name\n of an XML Schema simple type embedded in the WSDL file.\n <P>\n <b>Round Trip Binding [fetch -> edit -> save]</b>\n <P>\n For full read-write integration with a service that supports the basic\n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operations')} on persistent data, \n ${isc.DocUtils.linkForRef('class:OperationBinding','OperationBindings')} can be declared for each DataSource operation, and\n the ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation','wsOperation')} property can be used to to bind each\n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource operation')} (fetch, update, add, remove) to a\n corresponding web service operation.\n <P>\n For example, this code accomplishes part of the binding to the \n <a href='http://www.google.com/search?q=sforce+partner+wsdl' onclick=\"window.open('http://www.google.com/search?q=sforce+partner+wsdl');return false;\">SalesForce partner web services</a>\n (additional code is required to handle authentication and other details):\n <pre>\n isc.DataSource.create({\n    serviceNamespace : \"urn:partner.soap.sforce.com\",\n    operationBindings : [\n        { operationType:\"fetch\", wsOperation:\"query\", recordName: \"sObject\" },\n        { operationType:\"update\", wsOperation:\"update\", recordName: \"SaveResult\" },\n        { operationType:\"add\", wsOperation:\"create\", recordName: \"SaveResult\" },\n        { operationType:\"remove\", wsOperation:\"delete\", recordName: \"DeleteResult\" }\n    ],\n    ...\n }); \n </pre>\n NOTE: additional code is required to handle authentication and other details, see the\n complete code in isomorphicSDK/examples/databinding/SalesForce.\n <P>\n In this usage, any DSRequest performed on this DataSource invokes the web service operation\n named by the <code>wsOperation</code> property on the corresponding operationBinding, and\n ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is serialized via ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} to form the input\n message to send to the web service.  For example, if a ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} is\n invoked and triggers a DSRequest with operationType:\"add\", the DataSource above will invoke\n the \"create\" operation, and ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.values')} will become\n ${isc.DocUtils.linkForRef('attr:DSRequest.data')} and be serialized to form the input message of the \"create\" web\n service operation.\n <P>\n Typical usage is:\n <ol>\n <li> declare a DataSource that represents the fields of the object as you want them\n represented in the UI.  This DataSource is considered the \"entity DataSource\".  It may\n extend from an XML Schema complex type via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.\n <li> use ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')} to configure the entity DataSource to\n call the appropriate web service operations for each DataSource operation, and extract\n results via\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}/${isc.DocUtils.linkForRef('attr:OperationBinding.recordName','recordName')}\n <li> bind components as follows:\n <ul>\n <li> bind ${isc.DocUtils.linkForRef('class:ListGrid','grids')} to the entity DataSource\n <li> bind ${isc.DocUtils.linkForRef('class:SearchForm','SearchForms')} to the input message of the fetch operation\n (obtained via ${isc.DocUtils.linkForRef('method:WebService.getInputDS','webService.getInputDS(\"operationName\")')}.  This is\n done because search inputs are frequently unrelated to the structure of the objects being\n searched for\n <li> bind forms use for editing (\"add\" and \"update\" operations) to the entity DataSource\n </ul>\n <li> use\n ${isc.DocUtils.linkForRef('method:DataSource.transformRequest','transformRequest')}/${isc.DocUtils.linkForRef('method:DataSource.transformResponse','transformResponse')}, \n ${isc.DocUtils.linkForRef('attr:OperationBinding.useFlatFields')} and ${isc.DocUtils.linkForRef('attr:OperationBinding.responseDataSchema')} to\n handle inconsistencies between the WSDL operations and the data you want in the presentation\n layer.\n </ol>\n A complete example of binding to the SalesForce \"partner\" web service, including\n authentication via SOAP headers, saving data and cache sync, inline editing, validation\n error handling and data paging, can be found in [webroot]/examples/databinding/SalesForce.\n <P>\n This requires a SalesForce account.  SalesForce currently offers \n <a href='http://www.google.com/search?hl=en&q=salesforce+developer+account' onclick=\"window.open('http://www.google.com/search?hl=en&q=salesforce+developer+account');return false;\">free developer accounts</a>.\n Please note: this application deals with <b>live data</b> and if you using inline editing\n <b>it will save to SalesForce</b>.\n <P>\n <b>Deployment</b>\n <P>\n For best performance, using the ${isc.DocUtils.linkForRef('group:loadWSDLTag','&lt;isc:loadWSDL&gt; JSP tag')}\n is recommended, as it automatically caches a translated form of the WSDL file.  If you are\n not using the SmartClient server, the WSDL tab in the Developer Console allows you\n to save a .js file representing a WebService object, which can then be loaded and cached\n like a normal JavaScript file.\n <P>\n <B>Creating New WSDL Services</B>\n <P>\n If you have no existing WSDL web service but would like to use web services for integration,\n you can implement the \"SmartClientOperations\" web service described by the\n ${isc.DocUtils.externalLink(isc.Page.getIsomorphicDir()+\"system/schema/SmartClientOperations.wsdl\",\"WSDL file\")} \n included in the SDK.  This simple, 4 operation web service can support any number of\n DataSources.  In this case, you create your DataSources as client-side instances of\n ${isc.DocUtils.linkForRef('class:WSDataSource')} (general client-side DataSource creation is described under\n ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','Creating DataSources')}).  To change the URL where ISC\n expects to find the SmartClientOperations web service, use ${isc.DocUtils.linkForRef('method:WebService.setLocation')}\n like so:<pre>\n      var service = isc.WebService.get(\"urn:operations.smartclient.com\");\n      service.setLocation(\"myURL\");\n </pre>\n <P>\n To implement a web service <b>starting from a WSDL file</b>:\n <ul>\n <li>In the .NET framework, you will use the Web Services Description Language Tool \n <a href='http://www.google.com/search?q=wsdl.exe' onclick=\"window.open('http://www.google.com/search?q=wsdl.exe');return false;\">(wsdl.exe)</a> to generate C# stubs that\n you will add business logic to\n <li>In Java, <a href='http://ws.apache.org/axis/' onclick=\"window.open('http://ws.apache.org/axis/');return false;\">Apache Axis</a> can be used to generate\n Java stubs for implementing a web service\n <li>In Perl, the <a href='http://soaplite.com' onclick=\"window.open('http://soaplite.com');return false;\">SOAP:Lite</a> module can be used to\n implement web services without code generation\n <li>for PHP, the NuSoap module can likewise be used to implement web services without code\n generation\n </ul>",
        name:"wsdlBinding",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.getRowFacetValues":{
        ref:"method:CubeGrid.getRowFacetValues",
        flags:"",
        description:" Return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')} indicating the facet values for a specific \n row in the grid\n",
        name:"getRowFacetValues",
        seeAlso:[],
        params:[
            {description:"index of the row", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"facet values for the specified row. Returns null if the specified row    is not present in the grid.", 
         type:"FacetValueMap"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:SimpleType.inheritsFrom":{
        ref:"attr:SimpleType.inheritsFrom",
        flags:"IR",
        description:"Name of another SimpleType from which this type should inherit.\n <P>\n Validators, if any, will be combined.  All other SimpleType properties default to the\n inherited type's value.",
        name:"inheritsFrom",
        seeAlso:[],
        valueType:"identifier",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customSimpleType')}"],
        definingClass:"class:SimpleType"
    },
    "method:ListGrid.discardEdits":{
        ref:"method:ListGrid.discardEdits",
        flags:"A",
        description:"\n Cancel outstanding edits for the specified rows, discarding edit values, and hiding editors \n if appropriate.<br>\n Note that if this method is called on a new edit row (created via \n ${isc.DocUtils.linkForRef('method:ListGrid.startEditingNew')} for example), which has not yet been saved, this method\n will remove the row entirely.\n \n",
        name:"discardEdits",
        seeAlso:[],
        params:[
            {description:"Row to cancel", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"Column to cancel. Note that this parameter is ignored in ListGrids but                        may be required in subclasses of ListGrid where each cell represents\n                        one record in the data set (EG CubeGrid)", 
             optional:false,name:"colNum", defaultValue:null, type:"number"},
            {description:"By default this method will hide the editor if                              it is currently showing for the row in question. Passing in\n                              this parameter will leave the editor visible (and just reset\n                              the edit values underneath the editor).", 
             optional:true,name:"dontHideEditor", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:ValuesManager.clearErrors":{
        ref:"method:ValuesManager.clearErrors",
        flags:"",
        description:"			Clears all errors from member forms.\n",
        name:"clearErrors",
        seeAlso:[],
        params:[
            {description:"If true, clear any visible error messages.", optional:false, 
             name:"showErrors",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "method:SimpleType.normalDisplayFormatter":{
        ref:"method:SimpleType.normalDisplayFormatter",
        flags:"",
        description:" Normal formatter for values of this type used in a ${isc.DocUtils.linkForRef('class:StaticTextItem')} or\n ${isc.DocUtils.linkForRef('class:DetailViewer')}.\n <P>\n When this formatter is called, the SimpleType object is available as \"this\".  \n <P>\n A formatter can make itself configurable on a per-component or per-field basis by\n checking properties on the component or field.  For example, a formatter for account IDs\n may want to omit a prefix in views where it is redundant, and could check a flag\n detailViewer.omitAccountIdPrefix for this purpose.\n\n",
        name:"normalDisplayFormatter",
        seeAlso:[],
        params:[
            {description:"value to be formatted", optional:false, name:"value", defaultValue:null, 
             type:"any"},
            {description:"field descriptor from the component calling the formatter, if                      applicable.  Depending on the calling component, this could be a\n                      ${isc.DocUtils.linkForRef('class:FormItem')}, ${isc.DocUtils.linkForRef('object:DetailViewerField')}, etc", 
             optional:true,name:"field", defaultValue:null, type:"Field"},
            {description:"component calling this formatter, if applicable", optional:true, 
             name:"component",defaultValue:null, type:"DataBoundComponent"},
            {description:"Full record, if applicable", optional:true, name:"record", defaultValue:null, 
             type:"Object"}
        ],
        type:"method",
        definingClass:"class:SimpleType"
    },
    "method:FormItem.getValue":{
        ref:"method:FormItem.getValue",
        flags:"",
        description:" Return this form items value.\n <p>\n For valueMap'd items, or items with 'mapValueToDisplay()' / 'mapDisplayToValue()'\n defined, the data value rather than the display value is returned.\n",
        name:"getValue",
        seeAlso:[],
        returns:{description:"value of this element", type:"any"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["formValues"]
    },
    "class:MultiFileItem":{
        methods:[],
        ref:"class:MultiFileItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:MultiFileItem.dataSource", "attr:MultiFileItem.removeButton", 
         "attr:MultiFileItem.editButton"],
        description:"The MultiFileItem provides an interface for a user to save one or more files that are\n related to a DataSource record, where each file is represented by a record in a\n related DataSource.\n <P>\n Use MultiFileItem when a record may have one or more files associated with it (such as\n attachments to an email message) where no information about the files needs to be stored other\n than the files themselves.  If you have several fields associated with each file (such as an\n uploaded document with a version, comments and processes associated with it), consider\n instead an ordinary DataSource with on field of type \"binary\", and using the ${isc.DocUtils.linkForRef('class:FileItem')}\n for upload.\n <P>\n See the ${isc.DocUtils.linkForRef('group:upload','Uploading Files')} overview for more information on upload.\n <P>\n <b>DataSource Setup</B>\n <P>\n In a relationship sometimes called a \"master-detail\" relationship, the MultiFileItem stores\n files in a \"detail\" DataSource which are related to a \"master\" DataSource record being\n edited by the form which contains the MultiFileItem.\n <P>\n To use a MultiFileItem:\n <ul>\n <li> declare a \"detail\" DataSource to store the related files.  At a minimum, this\n DataSource must have:\n <ul>\n <li> a ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} field\n <li> a field declaring a ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey','foreignKey')} relationship to the\n primaryKey of the \"master\" DataSource\n <li> a field of type \"binary\"\n </ul>\n <li> ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','bind')} a DynamicForm to the \"master\" DataSource \n <li> in the DynamicForm bound to the \"master\" DataSource, declare a field with\n ${isc.DocUtils.linkForRef('attr:FormItem.editorType','editorType')}:\"MultiFieldItem\" and a <code>dataSource</code>\n property set to the ID of the \"detail\" DataSource\n </ul>\n An example \"detail\" DataSource for storing files is shown below.  This \"detail\" DataSource\n assumes a \"master\" DataSource with ${isc.DocUtils.linkForRef('attr:DataSource.ID')} \"masterRecord\" and with a primaryKey\n field \"id\".\n <code>\n   &lt;DataSource ID=\"uploadedFiles\" serverType=\"sql\"&gt;\n     &lt;fields&gt;\n        &lt;field name=\"fileId\" type=\"sequence\" primaryKey=\"true\" hidden=\"true\"/&gt;\n        &lt;field name=\"masterRecordId\" type=\"number\" foreignKey=\"masterRecord.id\" hidden=\"true\"/&gt;\n        &lt;field name=\"file\" type=\"binary\" title=\"File\"/&gt;\n     &lt;/fields&gt;\n   &lt;/DataSource&gt;\n </code>\n <P>\n Aside from a single \"binary\" field, the \"detail\" DataSource should generally have only\n hidden fields, as shown above.  Additional internal fields (such as a \"lastUpdated\" field)\n may be added, but will not be editable via MultiFileItem. \n <P>\n <b>Display</b>\n <P>\n The MultiFileItem appears as a list of files related to the current record.  An optional\n button, the ${isc.DocUtils.linkForRef('attr:MultiFileItem.removeButton','removeButton')} allows removing files.  A\n second optional button, the ${isc.DocUtils.linkForRef('attr:MultiFileItem.editButton','editButton')}, launches a\n picker for uploading further files.\n <P>\n <b>Saving</b>\n <P>\n In all cases, uploading a new file is an \"add\" DSRequest against the\n ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}.\n <P>\n The MultiFileItem has two modes, according to whether the \"master\" record is being newly created\n via an \"add\" operation or whether the master record is pre-existing (\"update\" operation).\n <P>\n If the master record is pre-existing, each file added by the user is uploaded as soon as the\n user exits the picker launched from the edit button, and the list of files shown in the main\n form reflects the actual list of stored files.  \n <P>\n If the master record is being newly created, files are not actually uploaded until\n <b>after</b> the master record is confirmed saved, and the list of fields shown in the main\n form reflects files which will be uploaded after the master record is saved.\n <P>\n In both cases, if there are multiple files to upload, they are uploaded one at a time, as a\n series of separate \"add\" DSRequests against the ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}.\n <P>\n Also in both cases, deletion of any file is immediate.  In the case of a pre-existing master\n record, all files shown actually exist as DataSource records, and deletion is performed as a\n \"remove\" DSRequest against the ${isc.DocUtils.linkForRef('attr:MultiFileItem.dataSource')}.",
        name:"MultiFileItem",
        seeAlso:[],
        type:"class",
        groups:["upload"]
    },
    "attr:Button.icon":{
        flags:"IR",
        type:"attr",
        ref:"attr:Button.icon",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"icon",
        setter:["setIcon"],
        valueType:"SCImgURL",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonIcons')}"],
        defaultValue:"null",
        groups:["buttonIcon"],
        definingClass:"class:Button"
    },
    "method:StretchImgButton.setSelected":{
        ref:"method:StretchImgButton.setSelected",
        flags:"",
        description:" Select this object.\n",
        name:"setSelected",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "method:CubeGrid.cellIsSelected":{
        ref:"method:CubeGrid.cellIsSelected",
        flags:"",
        description:"\n Determine whether the cell passed in is seselected in this cubeGrid\n\n  <br><i>methodType</i> tester\n",
        name:"cellIsSelected",
        seeAlso:[],
        params:[
            {description:"cell to test", optional:false, name:"cell", defaultValue:null, 
             type:"cell record object"}
        ],
        returns:{description:"true if any cells are selected", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:CubeGrid.deselectAllCells":{
        ref:"method:CubeGrid.deselectAllCells",
        flags:"",
        description:"\n  deselect all cells\n\n      <br><i>methodType</i> action\n",
        name:"deselectAllCells",
        seeAlso:[],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:ListGrid.recordBaseStyleProperty":{
        ref:"attr:ListGrid.recordBaseStyleProperty",
        flags:"IRWA",
        description:"This attribute allows custom base styles to be displayed on a per-record basis.\n To specify a custom base-style for some record set \n <code>record[listGrid.recordBaseStyleProperty]</code> to the desired base style name - \n for example if <code>recordBaseStyleProperty</code> is <code>\"_baseStyle\"</code>, set\n <code>record._baseStyle</code> to the custom base style name.",
        name:"recordBaseStyleProperty",
        seeAlso:[
            {ref:"attr:ListGrid.baseStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"\"_baseStyle\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:FormItem.displayField":{
        ref:"attr:FormItem.displayField",
        flags:"IR",
        getter:["FormItem.getDisplayFieldName"],
        description:"Specifies an alternative field from which display values should be retrieved for this\n item.<br>\n If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound \n to the same dataSource as the form as a whole, this is implemented by picking up the\n value of the specified field from the Form's values object.<br>\n Otherwise this item will attempt to map its underlying value to a display value\n by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the \n ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the \n <code>displayField</code> value from that record.<br>\n This essentially enables the specified <code>optionDataSource</code> to be used as\n a server based ${isc.DocUtils.linkForRef('group:valueMap')}.",
        name:"displayField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "attr:StatefulCanvas.showFocusedAsOver":{
        ref:"attr:StatefulCanvas.showFocusedAsOver",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused','showFocused')} is true for this widget, should the \n <code>\"over\"</code> state be used to indicate the widget as focused. If set to false,\n a separate <code>\"focused\"</code> state will be used.",
        name:"showFocusedAsOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "attr:Canvas.showCustomScrollbars":{
        ref:"attr:Canvas.showCustomScrollbars",
        flags:"IRWA",
        description:"Whether to use the browser's native scrollbars or SmartClient-based scrollbars.\n <P>\n SmartClient-based scrollbars are skinnable, giving you complete control over look and\n feel.  SmartClient-based scrollbars also enable some interactions not possible with\n native scrollbars, such as ${isc.DocUtils.linkForRef('attr:ListGrid.fixedRecordHeights','variable height records')}\n in grids in combination with ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize','data paging')}.\n <P>\n Native browser scrollbars are slightly faster simply because there are less SmartClient\n components that need to be created, drawn and updated.  Each visible SmartClient-based\n scrollbar on the screen has roughly the impact of two StretchImgButtons.\n <P>\n SmartClient is always aware of the size of the scrollbar, regardless of whether native\n or custom scrollbars are used, and regardless of what operating system and/or operating\n system \"theme\" or \"skin\" is in use.  This means SmartClient will correctly report the\n ${isc.DocUtils.linkForRef('method:Canvas.getViewportHeight','viewport size')}, that is, the interior area of the\n widget excluding space taken by scrollbars, which is key for exactly filling a component\n with content without creating unnecessary scrolling.\n <P>\n The <code>showCustomScrollbars</code> setting is typically overridden in load_skin.js in\n order to change the default for all SmartClient components at once, like so:\n <pre>\n     isc.Canvas.addProperties({ showCustomScrollbars:false });\n </pre>",
        name:"showCustomScrollbars",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:ListGrid.startEditingNew":{
        ref:"method:ListGrid.startEditingNew",
        flags:"A",
        description:"\n Start editing a new row, after the last pre-existing record in the current set of data.\n <P>\n This new row will be saved via the \"add\" ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource\n operation')}.\n <P>\n If editing is already underway elsewhere in the grid, startEditingNew() behaves just like\n ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}.\n\n",
        name:"startEditingNew",
        seeAlso:[
            {ref:"method:ListGrid.startEditing", description:null}
        ],
        params:[
            {description:"Optional initial set of properties for the new record", optional:true, 
             name:"newValues",defaultValue:null, type:"object"},
            {description:"Whether to suppress the default behavior of moving focus                                   to the newly shown editor.", 
             optional:true,name:"suppressFocus", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:WebService.getOperationNames":{
        ref:"method:WebService.getOperationNames",
        flags:"",
        description:null,
        name:"getOperationNames",
        seeAlso:[],
        returns:{description:"names of the available operations supported by this service (array of strings)", 
         type:"Array"},
        type:"method",
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:Date.toEuropeanShortDateTime":{
        ref:"method:Date.toEuropeanShortDateTime",
        flags:"",
        description:" Return this date in the format: <code>DD/MM/YYYY HH:MM</code>.\n",
        name:"toEuropeanShortDateTime",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:Tree.root":{
        flags:"IRW",
        getter:["getRoot"],
        type:"attr",
        ref:"attr:Tree.root",
        description:"If you're using the \"parent\" modelType, you can provide the root node configuration via this\n property.  If you don't provide it, one will be auto-created for you with an empty name.\n Read on for a description of what omitting the name property on the root node means for path\n derivation.\n <p>\n If you're using the \"children\" modelType, you can provide the initial tree data via this\n property.  So, for example, to construct the following tree:\n <pre>\n foo\n   bar\n zoo\n </pre>\n You would initialize the tree as follows: \n <pre>\n Tree.create({\n     root: { name:\"root\", children: [\n         { name:\"foo\", children: [\n             { name: \"bar\" }\n         ]},\n         { name: \"zoo\" }\n     ]}\n });\n </pre>\n Note that if you provide a <code>name</code> property for the root node, then the path to\n any node underneath it will start with that name.  So in the example above, the path to the\n <code>bar</code> node would be <code>root/foo/bar</code> (assuming you're using the default\n ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')}.  If you omit the name attribute on the root node, then it's name\n is automatically set to the ${isc.DocUtils.linkForRef('attr:Tree.pathDelim')} value.  So in the example above, if\n you omitted <code>name:\"root\"</code>, then the path to the <code>bar</code> node would be\n <code>/foo/bar</code>.\n <br><br>\n Note: if you initialize a Tree with no <code>root</code> value, a root node will be\n auto-created for you.  You can then call ${isc.DocUtils.linkForRef('method:Tree.add')} to construct the tree.",
        name:"root",
        setter:["setRoot"],
        valueType:"TreeNode",
        seeAlso:[
            {ref:"attr:Tree.modelType", description:null},
            {ref:"method:Tree.setRoot", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('childrenArrays')}"],
        defaultValue:"null",
        definingClass:"class:Tree"
    },
    "classAttr:ValidatorTypes.mask":{
        ref:"classAttr:ValidatorTypes.mask",
        flags:"IR",
        description:"Validate against a regular expression mask, specified as <code>validator.mask</code>.\n  If validation is successful a transformation can also be specified via the\n  <code>validator.transformTo</code> property. This should be set to a string in the\n  standard format for string replacement via the native JavaScript <code>replace()</code>\n  method.",
        name:"mask",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        examples:["${isc.DocUtils.linkForExampleId('valueTransform')}"],
        definingClass:"class:ValidatorTypes"
    },
    "method:Canvas.animateRect":{
        ref:"method:Canvas.animateRect",
        flags:"",
        description:" Animate a reposition / resize of this canvas from its current size and postion.\n",
        name:"animateRect",
        seeAlso:[],
        params:[
            {description:"new left position (or null for unchanged)", optional:false, name:"left", 
             defaultValue:null,type:"number"},
            {description:"new top position (or null for unchanged)", optional:false, name:"top", 
             defaultValue:null,type:"number"},
            {description:"new width (or null for unchanged)", optional:false, name:"width", 
             defaultValue:null,type:"number"},
            {description:"new height (or null for unchanged)", optional:false, name:"height", 
             defaultValue:null,type:"number"},
            {description:"When the setRect completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated setRect", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration effect to apply to the animation", optional:true, 
             name:"acceleration",defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateZoom')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:GridRenderer.rowMouseUp":{
        ref:"method:GridRenderer.rowMouseUp",
        flags:"A",
        description:" Called when a row receives a mouseup event.\n\n",
        name:"rowMouseUp",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "group:access":{
        ref:"group:access",
        refs:["method:List.get", "method:List.getLength", "method:List.isEmpty", "method:List.first", 
         "method:List.last","method:List.indexOf", "method:List.lastIndexOf", "method:List.findIndex", 
         "method:List.findNextIndex","method:List.find", "method:List.findAll", "method:List.contains", 
         "method:List.containsAll","method:List.equals", "method:List.getItems", "method:List.getRange", 
         "method:List.duplicate","method:Tree.indexOf", "method:Tree.lastIndexOf", "method:ResultSet.getLength", 
         "method:ResultSet.indexOf","method:ResultSet.get", "method:ResultSet.getRange", "method:ResultSet.findAll", 
         "method:ResultSet.find","method:ResultSet.findIndex", "method:ResultSet.findNextIndex", "method:Array.get", 
         "method:Array.getLength","method:Array.isEmpty", "method:Array.first", "method:Array.last", "method:Array.indexOf", 
         "method:Array.lastIndexOf","method:Array.contains", "method:Array.containsAll", "method:Array.equals", 
         "method:Array.getItems","method:Array.getRange", "method:Array.duplicate", "method:Array.findIndex", 
         "method:Array.findNextIndex","method:Array.find", "method:Array.findAll"],
        name:"access",
        seeAlso:[],
        type:"group"
    },
    "attr:PickTreeItem.loadDataOnDemand":{
        ref:"attr:PickTreeItem.loadDataOnDemand",
        flags:"IRA",
        description:"If this is a databound item, should the load our set of possible options be loaded\n on demand (as submenus are displayed), or upfront?",
        name:"loadDataOnDemand",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:PickTreeItem"
    },
    "attr:Button.baseStyle":{
        ref:"attr:Button.baseStyle",
        flags:"IRW",
        description:"Base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n <P>\n When the component changes state (eg becomes disabled), a suffix will be appended to this\n style name, reflecting the following states: \"Over\", \"Down\", or \"Disabled\".\n <P>\n If the widget is selected, the suffixes will be \"Selected\", \"SelectedOver\", etc.\n <P>\n If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be \"Focused\",\n \"FocusedOver\", etc, or if the widget is both selected and focused, \"SelectedFocused\",\n \"SelectedFocusedOver\", etc.\n <P>\n For example, if <code>baseStyle</code> is set to \"button\", this component is\n ${isc.DocUtils.linkForRef('method:Button.isSelected','selected')} and the mouse cursor is over this component, the style\n \"buttonSelectedOver\" will be used.",
        name:"baseStyle",
        setter:["setBaseStyle"],
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"button\"",
        type:"attr",
        definingClass:"class:Button"
    },
    "attr:ImgTab.baseStyle":{
        ref:"attr:ImgTab.baseStyle",
        flags:"IR",
        description:null,
        name:"baseStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"tab\"",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "attr:CheckboxItem.showLabel":{
        ref:"attr:CheckboxItem.showLabel",
        flags:"IRW",
        description:"Should we should the label text next to the checkbox item.",
        name:"showLabel",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CheckboxItem"
    },
    "type:ImageStyle":{
        ref:"type:ImageStyle",
        values:[
            {description:"Center (and don't stretch at all) the image if smaller than its enclosing frame.CENTER:\"center\",", 
             value:"Canvas.CENTER"},
            {description:"Tile (repeat) the image if smaller than its enclosing frame.", 
             value:"Canvas.TILE"},
            {description:"Stretch the image to the size of its enclosing frame.", 
             value:"Canvas.STRETCH"},
            {description:"Allow the image to have natural size", value:"Canvas.NORMAL"}
        ],
        description:null,
        name:"ImageStyle",
        seeAlso:[],
        type:"type",
        groups:["appearance"]
    },
    "method:ValuesManager.setErrors":{
        ref:"method:ValuesManager.setErrors",
        flags:"A",
        description:" Sets validation errors for this valuesManager to the specified set of errors.\n Errors should be of the format:<br>\n <code>{field1:errors, field2:errors}</code><br>\n where each <code>errors</code> object is either a single error message string or an\n array of error messages.<br>\n If <code>showErrors</code> is passed in, error messages will be displayed in the \n appropriate member form items. For fields with no visible form item, \n ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be fired instead.<br>\n Note that if <code>showErrors</code> is false, errors may be shown at any time via\n a call to ${isc.DocUtils.linkForRef('method:ValuesManager.showErrors')}.\n\n",
        name:"setErrors",
        seeAlso:[],
        params:[
            {description:"list of errors as an object with the field namesas keys", optional:false, 
             name:"errors",defaultValue:null, type:"object"},
            {description:"If true display errors now.", optional:false, name:"showErrors", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:FormItem.valueField":{
        ref:"attr:FormItem.valueField",
        flags:"IR",
        getter:["FormItem.getValueFieldName"],
        description:"If this form item maps data values to display values by retrieving the \n ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an \n ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property \n denotes the the field to use as the underlying data value in records from the \n optionDataSource.<br>\n If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item.",
        name:"valueField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "type:ChartType":{
        ref:"type:ChartType",
        values:[
            {description:"Values represented by vertical columns.  Typically supports stacking to                  represent two facets.  May support simultaneous stacking and clustering for\n                  3 facets.", 
             value:"Column"},
            {description:"Values represented by horizontal bars.  Typically supports stacking to                  represent two facets.  May support simultaneous stacking and clustering for\n                  3 facets.", 
             value:"Bar"},
            {description:"Values represented by a line between data points.", value:"Line"},
            {description:"Circular chart with wedges representing values.  Single facet only", 
             value:"Pie"},
            {description:"Like a pie chart with a central hole.  Single facet only", value:"Doughnut"}
        ],
        description:"Known chart types.  These are visual representations of data, not separate data models,\n although some chart types are only capable of showing a single facet of data.\n <P>\n Concrete charting implementations may use any value for <code>chartType</code> but should\n support the provided <code>chartType</code> values for charts that correspond to the visual\n presentation described below, to enable easy switching between charting engines.",
        name:"ChartType",
        seeAlso:[],
        type:"type"
    },
    "attr:PickList.separatorRows":{
        ref:"attr:PickList.separatorRows",
        flags:"IR",
        description:"Array of records to show between matching and non-matching rows in the PickList.\n <P>\n Not valid for ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','databound pickLists')}.",
        name:"separatorRows",
        seeAlso:[],
        valueType:"Array of ListGridRecord",
        defaultValue:"[{isSeparator:true}]",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "method:StretchImgButton.addToRadioGroup":{
        ref:"method:StretchImgButton.addToRadioGroup",
        flags:"",
        description:" Add this widget to the specified mutually exclusive selection group with the ID\n passed in.\n Selecting this widget will then deselect any other StatefulCanvases with the same\n radioGroup ID.\n StatefulCanvases can belong to only one radioGroup, so this method will remove from \n any other radiogroup of which this button is already a member.\n",
        name:"addToRadioGroup",
        seeAlso:[],
        params:[
            {description:"- ID of the radiogroup to which this widget should be added", 
             optional:false,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state", "event handling"]
    },
    "attr:StaticTextItem.clipValue":{
        ref:"attr:StaticTextItem.clipValue",
        flags:"IRW",
        description:"If true, text that exceeds the specified size of the form item will be clipped",
        name:"clipValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StaticTextItem",
        groups:["appearance"]
    },
    "attr:DynamicForm.autoFocus":{
        ref:"attr:DynamicForm.autoFocus",
        flags:"IRW",
        description:"If true, when the form is drawn, focus will automatically be put into the first focusable\n element in the form.<br>\n Note that to put focus in a different item you can explicitly call \n <code>dynamicForm.focusInItem(<i>itemName</i>)</code>",
        name:"autoFocus",
        seeAlso:[
            {ref:"method:DynamicForm.focusInItem", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["focus"]
    },
    "method:ListGrid.fetchData":{
        ref:"method:ListGrid.fetchData",
        flags:"",
        description:" Uses a \"fetch\" operation on the current ${isc.DocUtils.linkForRef('class:DataSource','grid.dataSource')} to retrieve data\n that matches the provided criteria, and displays the matching data in this component.\n <P>\n If there are a large number of matching records, paging will automatically be enabled, so\n that initially a smaller number of records will be retrieved and further records will\n be fetched as the user navigates the dataset.\n <P>\n When first called, this method will create a ${isc.DocUtils.linkForRef('class:ResultSet')}, which will be\n configured based on component settings such as ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fetchOperation')}\n and ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataPageSize')}, as well as the general purpose\n ${isc.DocUtils.linkForRef('attr:ListGrid.dataProperties')}.  The ResultSet is then available as\n <code>component.data</code>.\n <P>\n Subsequent calls to fetchData() will simply call ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','setCriteria()')}\n on the created ResultSet with the passed criteria.<br>\n In some cases fetchData() will not need to context the server as the new criteria can be\n satisfied by performing a client-side filter against the currently cached set of data.\n You can determine whether criteria will cause a fetch by calling \n ${isc.DocUtils.linkForRef('method:ResultSet.willFetchData')}.<br>\n If you need to force a server fetch, you can call ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')} via\n <code>component.data.invalidateCache()</code> to do so.  \n If for any reason you need to rebuild the ResultSet, you can call\n <P>\n This method takes an optional callback parameter (set to a ${isc.DocUtils.linkForRef('type:DSCallback')}) to fire when\n the fetch completes. Note that this callback will not fire if no server fetch is performed.\n In this case the data is updated synchronously, so as soon as this method completes you\n can interact with the new data. If necessary we recomment using \n ${isc.DocUtils.linkForRef('method:ResultSet.willFetchData')} before calling this method to determine whether or not\n a server fetch will occur.<br>\n In addition to the callback parameter for this method, developers can use \n ${isc.DocUtils.linkForRef('method:ResultSet.dataArrived')} to be notified every time ResultSet data is loaded.\n\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument\n                      instead of a raw criteria object, will be derived by calling\n                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}", 
             optional:true,name:"criteria", defaultValue:null, type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundFetch')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:CubeGrid.autoSelectHeaders":{
        ref:"attr:CubeGrid.autoSelectHeaders",
        flags:"IRW",
        description:"If true, when multiple facets appear on one side in a nested headers presentation, the\n selection state of parent/child headers are automatically kept in sync.",
        name:"autoSelectHeaders",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "method:TabSet.getSelectedTab":{
        ref:"method:TabSet.getSelectedTab",
        flags:"A",
        description:" Returns the currently selected tab object.  This is the object literal used to configure the\n tab, rather than the tab button widget.\n",
        name:"getSelectedTab",
        seeAlso:[],
        returns:{description:"the currently selected Tab object", type:"Tab"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "group:featureExplorerOverview":{
        ref:"group:featureExplorerOverview",
        title:"Feature Explorer Overview",
        refs:[],
        description:"The ${isc.DocUtils.linkForDocNode('FeatureExplorer', 'Feature Explorer')} is an example shell designed to help you\n explore the capabilities of SmartClient.  Read on for a brief overview, including specific\n instructions for using the example code in your own standalone application.\n <p>\n The tree on the left of the Feature Explorer contains examples grouped by logical\n categories.  Selecting an example brings it up on the right side of the screen, inside a\n tabbed view.  The default \"View\" tab shows the interactive example itself, while other\n tabs show the underlying source.  The \"JS\" tab shows the source for the example.  There is\n sometimes also an \"XML\" tab that shows the corresponding version in \n ${isc.DocUtils.linkForRef('group:componentXML','Component XML')} format.  For databound examples, there are also\n frequently additional tabs that show the ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} associated with the\n example.\n <p>\n <b><u>How to create a standalone application using code from the Feature Explorer</u></b>\n <p>\n The Feature Explorer shell is designed to show many examples in one place and to enable\n experimentation by providing a way for you to modify example code and try out your changes.\n As a result, the Feature Explorer requires some basic server support and its examples omit\n the usual SmartClient module includes that have to be in place for using SmartClient\n components standalone.\n <p>\n If you'd like to use example code in your application to get started quickly, create a page\n with SmartClient includes and then take the code from the \"JS\" tab and place it between\n &lt;SCRIPT&gt; blocks as described ${isc.DocUtils.linkForRef('group:nonJavaBackend','here')}.  If the example also\n includes a datasource, place the datasource definitions in the same file before the\n component code.  Note that DataSources (and components) written in XML require the optional\n SmartClient server.  If you're using the server, you can include them on your page using the \n ${isc.DocUtils.linkForRef('group:loadDSTag')} tag.\n <p>\n <b><u>Feature Explorer difference in the LGPL package</u></b>\n <p>\n The LGPL edition of SmartClient does not include the SmartClient Java Server as part of the\n licensed software, but a trimmed down server is included in the package to support the\n Feature Explorer shell.  There are some examples that use DataSources that would normally\n use the SmartClient server for persistence.  In the LGPL package, these DataSources are\n automatically turned into ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','Client Only DataSources')} and\n the Feature Explorer loads the data for these one-time from the dataURL or testFileName\n attributes specified on the DataSource.  Subsequent DataSource operations work against this\n client-side dataset, which is why changes to the data aren't permanent in these examples.\n <p>\n Check out the ${isc.DocUtils.linkForRef('group:clientServerIntegration','Client-Server Integration')} overview topic for\n an overview of your DataBinding options.",
        name:"featureExplorerOverview",
        seeAlso:[],
        type:"group"
    },
    "group:identity":{
        ref:"group:identity",
        refs:["attr:DataSource.ID", "attr:DataSource.addGlobalId"],
        name:"identity",
        seeAlso:[],
        type:"group"
    },
    "method:CheckboxItem.setValueMap":{
        ref:"method:CheckboxItem.setValueMap",
        flags:"",
        description:" Setter method to apply a valueMap to a checkbox item.<br>\n Note that if this method is overridden, the override must call\n <code>this.Super(\"setValueMap\", arguments);</code> to maintain functionality in this\n class.\n",
        name:"setValueMap",
        seeAlso:[
            {ref:"attr:CheckboxItem.valueMap", description:null}
        ],
        type:"method",
        definingClass:"class:CheckboxItem",
        groups:["valueMap"]
    },
    "method:ListGrid.getFieldWidth":{
        ref:"method:ListGrid.getFieldWidth",
        flags:"",
        description:" Returns a numeric value for the width of some field within this listGrid.\n",
        name:"getFieldWidth",
        seeAlso:[],
        params:[
            {description:"Index or fieldName of field for which width is to be determined.", 
             optional:false,name:"fieldNum", defaultValue:null, type:"Number | String"}
        ],
        returns:{description:"width of the field in px, or null if the width can't be determined", 
         type:"Number"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:DataSource.requestProperties":{
        ref:"attr:DataSource.requestProperties",
        flags:"IR",
        description:"Additional properties to pass through to the ${isc.DocUtils.linkForRef('class:DSRequest')}s made by this\n DataSource.\n <p>\n These properties are applied before ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} is called.",
        name:"requestProperties",
        seeAlso:[
            {ref:"class:DSRequest", description:null},
            {ref:"attr:OperationBinding.requestProperties", description:null}
        ],
        valueType:"DSRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["clientDataIntegration", "serverDataIntegration"]
    },
    "group:modification":{
        ref:"group:modification",
        refs:["method:List.set", "method:List.addAt", "method:List.removeAt", "method:List.add", 
         "method:List.addList","method:List.setLength", "method:List.addListAt", "method:List.remove", 
         "method:List.removeList","method:List.dataChanged", "method:Array.set", "method:Array.addAt", 
         "method:Array.removeAt","method:Array.add", "method:Array.addList", "method:Array.setLength", 
         "method:Array.addListAt","method:Array.remove", "method:Array.removeList", "method:Array.dataChanged"],
        name:"modification",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.animateRectAcceleration":{
        ref:"attr:Canvas.animateRectAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated move and resize.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateRectAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:RestDataSource.operationBindings":{
        ref:"attr:RestDataSource.operationBindings",
        flags:"IR",
        description:"RestDataSource OperationBindings set to specify default dataProtocol per operationType.\n Default databindings are:\n <pre>\n [ {operationType:\"fetch\", dataProtocol:\"getParams\"},\n   {operationType:\"add\", dataProtocol:\"postParams\"},\n   {operationType:\"remove\", dataProtocol:\"postParams\"},\n   {operationType:\"update\", dataProtocol:\"postParams\"} ];\n </pre>",
        name:"operationBindings",
        seeAlso:[],
        valueType:"Array of OperationBinding",
        defaultValue:"[...]",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "classAttr:Time.PMIndicator":{
        ref:"classAttr:Time.PMIndicator",
        flags:"RWA",
        description:"String appended to times to indicate am (when not using 24 hour format).",
        name:"PMIndicator",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\" pm\"",
        type:"classAttr",
        definingClass:"class:Time",
        groups:["i18nMessages"]
    },
    "attr:HTMLFlow.contentsURLParams":{
        ref:"attr:HTMLFlow.contentsURLParams",
        flags:"IRW",
        description:"Parameters to be sent to the contentsURL when fetching content.",
        name:"contentsURLParams",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "classMethod:EventHandler.ctrlKeyDown":{
        ref:"classMethod:EventHandler.ctrlKeyDown",
        flags:"",
        description:"			Return true if the control key is being held down.\n			Note that this is only set reliably for keyboard events.\n\n",
        name:"ctrlKeyDown",
        seeAlso:[],
        returns:{description:"true == control key is down", type:"boolean"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["keyboardEvents"]
    },
    "attr:FacetValue.canEdit":{
        ref:"attr:FacetValue.canEdit",
        flags:"IRW",
        description:"Whether cells for this facetValue can be edited.  Defaults to cubeGrid.canEdit",
        name:"canEdit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"cubeGrid.canEdit",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "group:layoutPolicy":{
        ref:"group:layoutPolicy",
        refs:["attr:Layout.overflow", "attr:Layout.orientation", "attr:Layout.vPolicy", 
         "attr:Layout.hPolicy","attr:Layout.enforcePolicy", "attr:Layout.defaultLayoutAlign", "attr:Layout.align", 
         "attr:Layout.reverseOrder"],
        name:"layoutPolicy",
        seeAlso:[],
        type:"group"
    },
    "group:files":{
        ref:"group:files",
        refs:["classAttr:Page.defaultUnsupportedBrowserURL", "classMethod:Page.getAppDir", 
         "classMethod:Page.setAppImgDir","classMethod:Page.getAppImgDir", "classMethod:Page.setAppFilesDir", 
         "classMethod:Page.getAppFilesDir","classMethod:Page.setIsomorphicDir", "classMethod:Page.getIsomorphicDir", 
         "classMethod:Page.setSkinDir","classMethod:Page.getSkinDir", "classMethod:Page.getSkinImgDir", 
         "classMethod:Page.getImgURL","classMethod:Page.getURL", "classMethod:Page.loadStyleSheet"],
        description:"Refering to and loading other files.\n <P>\n The two main URL settings relevant to file loading are:<br>\n * appDir  (where application-specific files live)<br>\n * isomorphicDir (where system supplied files live)<br>",
        name:"files",
        seeAlso:[],
        type:"group"
    },
    "attr:DetailViewer.labelSuffix":{
        ref:"attr:DetailViewer.labelSuffix",
        flags:"IRW",
        description:"text to put after a label",
        name:"labelSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\":\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["labels"]
    },
    "classMethod:Class.getClassName":{
        ref:"classMethod:Class.getClassName",
        flags:"",
        description:"\n	Gets the name of this class as a string.\n\n",
        name:"getClassName",
        seeAlso:[],
        returns:{description:"name of the class", type:"string"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:DataSource.callbackParam":{
        ref:"attr:DataSource.callbackParam",
        flags:"IR",
        description:"Applies only to dataFormat: \"json\".  Specifies the name of the query parameter that\n tells your JSON service what function to call as part of the response.",
        name:"callbackParam",
        seeAlso:[
            {ref:"attr:DataSource.dataFormat", description:null},
            {ref:"attr:DataSource.operationBindings", description:null},
            {ref:"attr:OperationBinding.callbackParam", description:null}
        ],
        valueType:"String",
        defaultValue:"\"callback\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('xmlEditSave')}"],
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "method:GridRenderer.getVisibleRows":{
        ref:"method:GridRenderer.getVisibleRows",
        flags:"",
        description:" Get the rows that are currently visible in the viewport, as an array of \n [firstRowNum, lastRowNum]. If the grid contains no records, will return [-1,-1];\n",
        name:"getVisibleRows",
        seeAlso:[],
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "classMethod:Timer.clear":{
        ref:"classMethod:Timer.clear",
        flags:"",
        description:"\n Cancels the processing of a timerEvent if it has not already fired.\n\n",
        name:"clear",
        seeAlso:[],
        params:[
            {description:"timerEvent object previously returned from Timer.setTimeout()", 
             optional:false,name:"timerEvent", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:Timer"
    },
    "method:Canvas.animateHide":{
        ref:"method:Canvas.animateHide",
        flags:"",
        description:" Hide a canvas by shrinking it vertically to zero height over a period of time.\n This method will not fire if the widget is already drawn and visible, or has overflow\n other than <code>\"visible\"</code> or <code>\"hidden\"</code>.\n",
        name:"animateHide",
        seeAlso:[],
        params:[
            {description:"How should the content of the window be hidden during                         the hide? Supported options are <ul>\n                      <li><code>\"slide\"</code> (content slides out of view as the window \n                                                  shrinks)\n                      <li><code>\"wipe\"</code> (default: content is clipped as the window \n                                                  shrinks)\n                      <li><code>\"fade\"</code> (widget fades out of view, from current \n                                              opacity to transparent)\n                      <li><code>\"fly\"</code> (widget moves offscreen to the left of its \n                                              drawn position)\n                      </ul>\n      If passed an object, the <code>effect</code> attribute of the object should be\n      one of the above effect strings - other attributes may be used to modify the effect\n      Currently this is only supported for <code>\"slide\"</code> and <code>\"wipe\"</code>\n      type animations where <code>\"endAt\"</code> may be specified as <code>\"T\"</code>\n      [the animation will hide the widget vertically towards the top edge] or \n      <code>\"L\"</code> [the animation will shrink the widget toward the left side].", 
             optional:false,name:"effect", defaultValue:null, type:"string | object"},
            {description:"When the hide completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation.", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated hide", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration effect function to bias the animation ratios", 
             optional:true,name:"acceleration", defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateWipe')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:Label.autoFit":{
        ref:"attr:Label.autoFit",
        flags:"IRW",
        description:"If true, ignore the specified size of this widget and always size just large\n enough to accomodate the title.  If <code>setWidth()</code> is explicitly called on an\n autoFit:true button, autoFit will be reset to <code>false</code>.\n <P>\n Note that for StretchImgButton instances, autoFit will occur horizontally only, as \n unpredictable vertical sizing is likely to distort the media. If you do want vertical \n auto-fit, this can be achieved by simply setting a small height, and having \n overflow:\"visible\"",
        name:"autoFit",
        setter:["StatefulCanvas.setAutoFit"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Label",
        groups:["sizing"]
    },
    "object:GridHilite":{
        methods:[],
        ref:"object:GridHilite",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Analytics/CubeGrid"],
        attrs:["attr:GridHilite.id", "attr:GridHilite.style", "attr:GridHilite.htmlBefore", 
         "attr:GridHilite.htmlAfter","attr:GridHilite.disabled"],
        description:"Definition of a hilite style.\n <P>\n Hilites are styling that can declaratively attached to data via setting the\n ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on a record to the id of a hilite declaration.",
        name:"GridHilite",
        seeAlso:[],
        type:"object",
        requiresModules:["Analytics"]
    },
    "method:Log.clearLogPriority":{
        ref:"method:Log.clearLogPriority",
        flags:"",
        description:" Clear this object's priority setting for a particular category, so that the category's \n effective priority returns to the specified priority for this category at the Log level\n (or <code>Log.defaultPriority</code> if not set).<br>\n To clear the Page-level priority setting for this log category use \n <code>isc.Log.clearPriority()</code> instead.\n\n",
        name:"clearLogPriority",
        seeAlso:[
            {ref:"classMethod:Log.clearPriority", description:null}
        ],
        params:[
            {description:"Category name. If not specified, all logging on this object                              will revert to default priority settings.", 
             optional:false,name:"category", defaultValue:null, type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:Menu.showAnimationEffect":{
        ref:"attr:Menu.showAnimationEffect",
        flags:"IRWA",
        description:"When this menu is shown how should it animate into view? By default the menu will just\n show at the specified size/position. Options for animated show effects are <code>\"fade\"</code>\n to fade from transparent to visible, <code>\"slide\"</code> to slide the menu into view,\n or <code>\"wipe\"</code> to have the menu grow into view, revealing its content as it\n grows. Can be overridden by passing the 'animationEffect' parameter to 'menu.show()'",
        name:"showAnimationEffect",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Menu"
    },
    "method:StatefulCanvas.addToRadioGroup":{
        ref:"method:StatefulCanvas.addToRadioGroup",
        flags:"A",
        description:" Add this widget to the specified mutually exclusive selection group with the ID\n passed in.\n Selecting this widget will then deselect any other StatefulCanvases with the same\n radioGroup ID.\n StatefulCanvases can belong to only one radioGroup, so this method will remove from \n any other radiogroup of which this button is already a member.\n",
        name:"addToRadioGroup",
        seeAlso:[],
        params:[
            {description:"- ID of the radiogroup to which this widget should be added", 
             optional:false,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state", "event handling"]
    },
    "attr:TreeGrid.canAcceptDroppedRecords":{
        ref:"attr:TreeGrid.canAcceptDroppedRecords",
        flags:"IRW",
        description:"Indicates whether records can be dropped into this listGrid.",
        name:"canAcceptDroppedRecords",
        seeAlso:[
            {ref:"attr:TreeNode.canDrag", description:null},
            {ref:"attr:TreeNode.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragReparent')}"],
        definingClass:"class:TreeGrid",
        groups:["dragdrop"]
    },
    "method:ListGrid.selectRecords":{
        ref:"method:ListGrid.selectRecords",
        flags:"",
        description:"\n  Select/deselect a list of records passed in explicitly, or by index.\n\n      <br><i>methodType</i> action\n",
        name:"selectRecords",
        seeAlso:[],
        params:[
            {description:"records (or row numbers) to select", optional:false, name:"records", 
             defaultValue:null,type:"List of ListGridRecord | numbers"},
            {description:"new selection state (if null, defaults to true)", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "group:clientDataIntegration":{
        ref:"group:clientDataIntegration",
        title:"Client-side Data Integration",
        treeLocation:["Concepts/Client-Server Integration", "Client Reference/Data Binding"],
        refs:["method:DataSourceField.getFieldValue", "attr:DataSource.dataFormat", 
         "attr:DataSource.callbackParam","attr:DataSource.requestProperties", "attr:DataSource.dataTransport", 
         "attr:DataSource.dropExtraFields","attr:DataSource.serviceNamespace", "attr:DataSource.schemaNamespace", 
         "attr:DataSource.recordXPath","attr:DataSource.dataURL", "attr:DataSource.tagName", "attr:DataSourceField.valueXPath", 
         "attr:OperationBinding.operationType","attr:OperationBinding.operationId", "attr:OperationBinding.wsOperation", 
         "attr:OperationBinding.dataURL","attr:OperationBinding.dataProtocol", "attr:OperationBinding.dataFormat", 
         "attr:OperationBinding.dataTransport","attr:OperationBinding.callbackParam", "attr:OperationBinding.requestProperties", 
         "attr:OperationBinding.defaultParams","attr:OperationBinding.recordXPath", "attr:OperationBinding.recordName", 
         "attr:OperationBinding.responseDataSchema","attr:OperationBinding.useFlatFields", "attr:OperationBinding.xmlNamespaces", 
         "type:DSDataFormat","type:DSProtocol"],
        description:"SmartClient supports declarative, XPath-based binding of visual components to any server\n capable of returning XML or JSON responses over HTTP, without the need for the\n ${isc.DocUtils.linkForRef('group:serverDataIntegration','SmartClient server')}.\n <P>\n This approach is called Client-Side Data Integration, which means:\n <ul>\n <li> You ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create DataSources')} in JavaScript \n which describe the data to be loaded and manipulated in the user interface. The\n JavaScript that creates these DataSources may be dynamically generated and/or existing\n metadata may be ${isc.DocUtils.linkForRef('group:metadataImport','imported')}.\n <li> You configure DataSources, via property and method overrides, to send appropriate\n HTTP requests to your server, and to parse HTTP responses from your server, in order to\n fulfill the 4 core operations of the ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource Protocol')}.\n <li> These DataSources are then bound to \n ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databinding-capable UI components')}, which can provide a variety of\n complete user interactions (form-based editing, grid-based editing, load on demand, ..)\n based on these 4 core operations\n </ul>\n <P>\n <h4>Approaches and platforms</h4>\n <P>\n <B>WSDL integration (.NET and others)</B>\n <P>\n If you have pre-existing WSDL services or would like to generate web services for\n SmartClient to consume, the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Binding Overview')} covers possible\n approaches.\n <P>\n WSDL binding is the most popular approach for integration with the .NET platform.\n You can \n <a href='http://www.google.com/search?q=create+web+service+visual+studio' onclick=\"window.open('http://www.google.com/search?q=create+web+service+visual+studio');return false;\">use Visual Studio to create web services</a>\n from existing server-side methods, and then use SmartClient's \n ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL Binding')} system to connect to those web services.  \n <P>\n Here are a couple of examples of integration with .NET web services:\n <a href='/examples/databinding/dotNET/temperatureConvert.jsp' onclick=\"window.open('/examples/databinding/dotNET/temperatureConvert.jsp');return false;\">temperature conversion service</a>,\n and <a href='/examples/databinding/dotNET/customerSearch.jsp' onclick=\"window.open('/examples/databinding/dotNET/customerSearch.jsp');return false;\">customer search service</a>.\n Both use the ${isc.DocUtils.linkForRef('method:WebService.callOperation')} method to query the web service. <b>Note:</b>\n These examples will only work if there's a web service running at the WSDL URLs used in the examples.\n <P>\n <B>REST integration (PHP and others)</B>\n <P>\n For PHP and other server technologies (Cold Fusion, Ruby, Python, Perl..), integration\n is based on simple XML or JSON delivered over HTTP, sometimes called the\n <a href='http://www.google.com/search?hl=en&q=REST+HTTP' onclick=\"window.open('http://www.google.com/search?hl=en&q=REST+HTTP');return false;\">REST</a> (REpresentational State\n Transfer) pattern.\n <P> \n When using this, you create a dynamic web page that generates XML or JSON data for\n SmartClient to consume.\n <P>\n SmartClient DataSources can be configured to work with any pre-existing XML or JSON formats\n your application is already using; see below.\n <P>\n For new applications, the ${isc.DocUtils.linkForRef('class:RestDataSource')} provides a complete XML or JSON-based\n protocol that supports all of the features of SmartClient's databinding layer (data paging,\n server-side validation errors, automatic cache synchronization, etc).  To use the\n RestDataSource, simply write server code that can parse RestDataSource requests and produce\n the required responses; example requests and responses are ${isc.DocUtils.linkForRef('class:RestDataSource','provided')}.\n <P>\n <h4>Consuming Existing XML and JSON formats</h4>\n <p>\n For WSDL web services, see the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL binding topic')} first.\n <P>\n To display XML or JSON data in a visual component such as a ListGrid, you bind the component\n to a ${isc.DocUtils.linkForRef('class:DataSource')} which provides the ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','URL')} of the service, as\n well as a declaration of how to form inputs to the service and how to interpret service\n responses as DataSource records.\n <P>\n An XPath expression, the ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}, is applied to\n the service response to select the XML elements or JSON objects that should be interpreted\n as DataSource records.  Then, for each field of the DataSource, an optional\n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} can be declared which selects the value for the field\n from within each of the XML elements or JSON objects selected by the recordXPath.  If no\n valueXPath is specified, the field name itself is taken as an XPath, which will select the\n same-named subelement or property from the record element or object.\n <P>\n For example, the following code defines a DataSource that a ListGrid could bind to in order\n to display an RSS 2.0 feed.\n <PRE>\n    isc.DataSource.create({\n        dataURL:feedURL,\n        recordXPath:\"//item\",\n        fields:[\n            { name:\"title\" },\n            { name:\"link\" },\n            { name:\"description\" }\n        ]\n    });\n </PRE>\n A representative slice of an RSS 2.0 feed follows:\n <pre>\n     &lt;?xml version=\"1.0\" encoding=\"iso-8859-1\" ?&gt; \n     &lt;rss version=\"2.0\"&gt;\n     &lt;channel&gt;\n       &lt;title&gt;feed title&lt;/title&gt; \n       ...\n       &lt;item&gt;\n         &lt;title&gt;article title&lt;/title&gt; \n         &lt;link&gt;url of article&lt;/link&gt; \n         &lt;description&gt;\n            article description\n         &lt;/description&gt; \n       &lt;/item&gt;\n       &lt;item&gt;\n          ...\n </pre>\n Here, the recordXPath selects a list of &lt;item&gt; elements.  Since the intended values\n for each DataSource field appear as a simple subelements of each &lt;item&gt; element (eg\n &lt;description&gt;), the field name is sufficient to select the correct values, and no\n explicit valueXPath needs to be specified.\n <P>\n A running version of this example is available here: ${isc.DocUtils.linkForExampleId('rssFeed')}.  Further\n examples of simple XML or JSON data loading using files stored on disk as the\n \"service\" to contact: the ${isc.DocUtils.linkForExampleId('simpleJSON', 'Simple JSON')} example shows loading\n data from a JSON file into a databound grid, and the\n ${isc.DocUtils.linkForExampleId('xpathBinding', 'XPath Binding example')} shows loading XML and processing it with\n XPaths.\n <P>\n <H4>Round Tripping: Loading, Editing and Saving</H4>\n <P>\n For WSDL web services, see the ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL binding topic')} first.\n <P>\n When a user triggers a DSRequest (eg, completes an inline edit in a grid), the request\n data will be sent to the dataURL.  The ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource protocol')}\n describes request and response data expected for each operation type.  \n <P>\n By using settings such as ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}, you can control how\n DSRequests are sent to your backend so that you can handle them most easily.  By using the\n same properties used to initially load data (eg\n ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')}), you can control how SmartClient forms the\n DSResponses that are then interpreted by ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound components')}.\n <P>\n <b>Controlling how DSRequests are sent</b>\n <P>\n According to the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')} being used, the\n ${isc.DocUtils.linkForRef('group:dataSourceOperations','DataSource request data')}, if any, either becomes HTTP\n params (sent by GET or POST), or an XML message as put together by\n ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')}.  For a DataSource invoking a WSDL-described web\n service, XML serialization automatically handles namespacing and SOAP encoding.\n <P>\n Note that, by default, just ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is sent, not any of the metadata such\n as ${isc.DocUtils.linkForRef('attr:DSRequest.startRow')}.  This can be customized via\n ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}.\n <P>\n The URL to contact is set via the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL','dataURL')}\n property.  If using a Web Service, the <code>dataURL</code> defaults to the service location\n URL embedded in the WSDL file.\n <P>\n For example, in the default configuration for non-WSDL binding, since\n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','dataProtocol')} is \"getParams\", ${isc.DocUtils.linkForRef('attr:DSRequest.data')} is\n sent as HTTP params in an HTTP \"GET\" operation.  Given:\n <ul>\n <li> changes to an existing record, hence an \"update\" request\n <li> a ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey','primaryKey')} field of \"id\" with value \"5\" on the\n record to be updated\n <li> a field \"age\" being changed to \"32\"\n <li> \"dataURL\" of \"save.php\"\n </ul>\n You will see an HTTP GET to the URL <code>save.php?id=5&age=32</code>.\n <P>\n <b>Forming a DSResponse from the response data</b>\n <P>\n A ${isc.DocUtils.linkForRef('class:DSResponse')} is created from the response data by using XPath\n expressions declared in the schema (${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath','recordXPath')} and \n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath','valueXPath')}) to extract DataSource record and field\n values.\n <P>\n See the ${isc.DocUtils.linkForExampleId('xmlEditSave', '\"Edit and Save\"')} example for sample XML responses for\n all four operationTypes.  \n <P>\n Similar to input processing, by default DataSource layer metadata, such as\n ${isc.DocUtils.linkForRef('attr:DSResponse.startRow')}, is not extracted from the response data.  You can\n implement ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} to fill out the metadata fields of\n the ${isc.DocUtils.linkForRef('class:DSResponse')}, in order to allow more DataSource features, such as paging and\n validation errors, to be used with a web service that supports such features.  \n <P>\n See the ${isc.DocUtils.linkForExampleId('xmlServerValidationErrors', 'XML')} and \n ${isc.DocUtils.linkForExampleId('jsonServerValidationErrors', 'JSON')} versions of the transformResponse()\n example for an example of providing validation errors in XML or JSON responses.",
        name:"clientDataIntegration",
        seeAlso:[],
        type:"group"
    },
    "class:TreeGrid":{
        exampleConfig:"TreeGrid.xml",
        methods:["method:TreeGrid.toggleFolder", "method:TreeGrid.openFolder", 
         "method:TreeGrid.closeFolder","method:TreeGrid.getOpenState", "method:TreeGrid.setOpenState", 
         "method:TreeGrid.getSelectedPaths","method:TreeGrid.setSelectedPaths", "method:TreeGrid.getViewState", 
         "method:TreeGrid.setViewState","method:TreeGrid.setData", "method:TreeGrid.canEditCell", "method:TreeGrid.rowClick", 
         "method:TreeGrid.recordDoubleClick","method:TreeGrid.openLeaf", "method:TreeGrid.getDragTrackerIcon", 
         "method:TreeGrid.willAcceptDrop","method:TreeGrid.getEventRow", "method:TreeGrid.getDropFolder", 
         "method:TreeGrid.transferSelectedData","method:TreeGrid.folderDrop", "method:TreeGrid.getNodeTitle", 
         "method:TreeGrid.getOpenIcon","method:TreeGrid.getExtraIcon", "method:TreeGrid.getIcon", "method:TreeGrid.setNodeIcon", 
         "method:TreeGrid.folderOpened","method:TreeGrid.folderClosed", "method:TreeGrid.folderClick", "method:TreeGrid.leafClick", 
         "method:TreeGrid.nodeClick","method:TreeGrid.folderContextClick", "method:TreeGrid.leafContextClick", 
         "method:TreeGrid.nodeContextClick","method:TreeGrid.fetchData", "method:TreeGrid.filterData"],
        type:"class",
        ref:"class:TreeGrid",
        classAttrs:[],
        treeLocation:["Client Reference/Grids"],
        classMethods:[],
        description:"The Isomorphic SmartClient system supports hierarchical data (also referred to as tree data\n due to its \"branching\" organization) with:\n <ul>\n   <li> the ${isc.DocUtils.linkForRef('class:Tree')} class, which manipulates hierarchical data sets\n   <li> the TreeGrid widget class, which extends the ListGrid class to visually\n        present tree data in an expandable/collapsible format.\n </ul>\n For information on DataBinding Trees, see ${isc.DocUtils.linkForRef('group:treeDataBinding')}.\n <p>\n A TreeGrid works just like a ${isc.DocUtils.linkForRef('class:ListGrid')}, except one column (specified by\n ${isc.DocUtils.linkForRef('attr:TreeGridField.treeField')} shows a heirarchical ${isc.DocUtils.linkForRef('class:Tree')}.  A TreeGrid is not limited\n to displaying just the ${isc.DocUtils.linkForRef('class:Tree')} column - you can define additional columns (via\n ${isc.DocUtils.linkForRef('attr:TreeGrid.fields')}) which will render just like the columns of a ${isc.DocUtils.linkForRef('class:ListGrid')}, and\n support all of the functionality of ListGrid columns, such as\n ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue','formatters')}.\n <p>\n Except where explicitly overridden, ${isc.DocUtils.linkForRef('class:ListGrid')} methods, callbacks, and properties\n apply to TreeGrids as well.  The ${isc.DocUtils.linkForRef('class:ListGrid')} defines some methods as taking/returning\n ${isc.DocUtils.linkForRef('object:ListGridField')} and ${isc.DocUtils.linkForRef('object:ListGridRecord')}.  When using those methods in a TreeGrid,\n those types will be ${isc.DocUtils.linkForRef('object:TreeGridField')} and ${isc.DocUtils.linkForRef('object:TreeNode')}, respectively.",
        attrs:["attr:TreeGrid.animateFolders", "attr:TreeGrid.animateFolderTime", 
         "attr:TreeGrid.animateFolderSpeed","attr:TreeGrid.animateFolderEffect", "attr:TreeGrid.dataSource", "attr:TreeGrid.data", 
         "attr:TreeGrid.initialData","attr:TreeGrid.loadDataOnDemand", "attr:TreeGrid.fields", "attr:TreeGrid.treeFieldTitle", 
         "attr:TreeGrid.showRoot","attr:TreeGrid.separateFolders", "attr:TreeGrid.displayNodeType", 
         "attr:TreeGrid.canDragRecordsOut","attr:TreeGrid.canAcceptDroppedRecords", "attr:TreeGrid.canReorderRecords", 
         "attr:TreeGrid.canDropOnLeaves","attr:TreeGrid.canReparentNodes", "attr:TreeGrid.dragDataAction", 
         "attr:TreeGrid.parentAlreadyContainsChildMessage","attr:TreeGrid.cantDragIntoSelfMessage", "attr:TreeGrid.cantDragIntoChildMessage", 
         "attr:TreeGrid.indentSize","attr:TreeGrid.iconSize", "attr:TreeGrid.folderIcon", "attr:TreeGrid.dropIconSuffix", 
         "attr:TreeGrid.openIconSuffix","attr:TreeGrid.closedIconSuffix", "attr:TreeGrid.nodeIcon", "attr:TreeGrid.showOpenIcons", 
         "attr:TreeGrid.showDropIcons","attr:TreeGrid.customIconProperty", "attr:TreeGrid.showCustomIconOpen", 
         "attr:TreeGrid.showCustomIconDrop","attr:TreeGrid.customIconOpenProperty", "attr:TreeGrid.customIconDropProperty", 
         "attr:TreeGrid.folderOpenImage","attr:TreeGrid.folderClosedImage", "attr:TreeGrid.folderDropImage", 
         "attr:TreeGrid.fileImage","attr:TreeGrid.manyItemsImage", "attr:TreeGrid.showConnectors", 
         "attr:TreeGrid.openerImage","attr:TreeGrid.connectorImage"],
        implementsInterfaces:["DataBoundComponent"],
        name:"TreeGrid",
        seeAlso:[]
    },
    "attr:ListGridField.icon":{
        ref:"attr:ListGridField.icon",
        flags:"IR",
        description:"Optional icon to show next to the title for this field. \n Should be set to a URL to an image. Relative paths will be evaluated starting at\n the imgDir of this component. This URL is partial - it may be updated to indicate\n the current disabled (etc) state of the field.",
        name:"icon",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "attr:FusionChart.fusionVersion":{
        ref:"attr:FusionChart.fusionVersion",
        flags:"IR",
        description:"Version of FusionCharts to assume.  If version is \"2.3\", different names are used for\n the .swf files for each chart (to match the default names in FusionCharts 2.3), and a\n lower version of Flash is required (6.0).",
        name:"fusionVersion",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"3.0\"",
        type:"attr",
        definingClass:"class:FusionChart"
    },
    "attr:Window.showMinimizeButton":{
        ref:"attr:Window.showMinimizeButton",
        flags:"IRW",
        description:"If true, show a minimize button in the header--clicking it minimizes the Window.",
        name:"showMinimizeButton",
        setter:["setShowMinimizeButton"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:SliderItem.numValues":{
        ref:"attr:SliderItem.numValues",
        flags:"IRW",
        description:"The number of discrete values represented by slider. If specified, the range of valid\n values (between <code>minValue</code> and <code>maxValue</code>) will be divided into\n this many steps. As the thumb is moved along the track it will only select these values\n and appear to jump between the steps.",
        name:"numValues",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sliderItem')}"],
        definingClass:"class:SliderItem"
    },
    "attr:CubeGrid.wrapFacetValueTitles":{
        ref:"attr:CubeGrid.wrapFacetValueTitles",
        flags:"IRW",
        description:"Whether to allow text wrapping on facet value titles",
        name:"wrapFacetValueTitles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:ButtonItem.endRow":{
        ref:"attr:ButtonItem.endRow",
        flags:"IRW",
        description:"These items are in a row by themselves by default",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ButtonItem",
        groups:["formLayout"]
    },
    "method:ListGrid.stopHover":{
        ref:"method:ListGrid.stopHover",
        flags:"",
        description:" Notification that the user is no longer hovering over some cell. Hides the current hover canvas\n if one is showing. \n",
        name:"stopHover",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:GridHilite.htmlAfter":{
        ref:"attr:GridHilite.htmlAfter",
        flags:"IR",
        description:"HTML to append to the end of cell values where this hilite is applied.",
        name:"htmlAfter",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:GridHilite"
    },
    "group:data_and_metadata":{
        ref:"group:data_and_metadata",
        refs:["method:CubeGrid.setFacetTitle", "method:CubeGrid.setFacetValueTitle"],
        description:null,
        name:"data_and_metadata",
        seeAlso:[],
        type:"group"
    },
    "attr:ToolbarItem.startRow":{
        ref:"attr:ToolbarItem.startRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["appearance"]
    },
    "class:TabSet":{
        methods:["method:TabSet.getPaneContainerEdges", "method:TabSet.setTabTitle", 
         "method:TabSet.enableTab","method:TabSet.disableTab", "method:TabSet.addTab", "method:TabSet.addTabs", 
         "method:TabSet.removeTab","method:TabSet.removeTabs", "method:TabSet.closeClick", "method:TabSet.tabIconClick", 
         "method:TabSet.getTabObject","method:TabSet.getTab", "method:TabSet.getTabPane", "method:TabSet.getTabNumber", 
         "method:TabSet.updateTab","method:TabSet.scrollForward", "method:TabSet.scrollBack", "method:TabSet.getSelectedTab", 
         "method:TabSet.getSelectedTabNumber","method:TabSet.selectTab", "method:TabSet.tabSelected", "method:TabSet.tabDeselected"],
        ref:"class:TabSet",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:TabSet.tabs", "attr:TabSet.tabBar", "attr:TabSet.tabProperties", 
         "attr:TabSet.tabBarPosition","attr:TabSet.tabBarAlign", "attr:TabSet.tabBarThickness", "attr:TabSet.selectedTab", 
         "attr:TabSet.canCloseTabs","attr:TabSet.closeTabIcon", "attr:TabSet.tabBarControls", "attr:TabSet.showTabScroller", 
         "attr:TabSet.showTabPicker","attr:TabSet.animateTabScrolling", "attr:TabSet.scrollerButtonSize", 
         "attr:TabSet.pickerButtonSize","attr:TabSet.skinImgDir", "attr:TabSet.symmetricScroller", "attr:TabSet.scrollerSrc", 
         "attr:TabSet.scrollerHSrc","attr:TabSet.scrollerVSrc", "attr:TabSet.symmetricPickerButton", 
         "attr:TabSet.pickerButtonSrc","attr:TabSet.pickerButtonHSrc", "attr:TabSet.pickerButtonVSrc", 
         "attr:TabSet.paneContainer","attr:TabSet.paneContainerClassName", "attr:TabSet.paneContainerOverflow", 
         "attr:TabSet.symmetricEdges","attr:TabSet.leftEdgeSizes", "attr:TabSet.topEdgeSizes", "attr:TabSet.bottomEdgeSizes", 
         "attr:TabSet.rightEdgeSizes","attr:TabSet.leftEdgeOffsets", "attr:TabSet.rightEdgeOffsets", 
         "attr:TabSet.topEdgeOffsets","attr:TabSet.bottomEdgeOffsets", "attr:TabSet.showPaneContainerEdges", 
         "attr:TabSet.showPartialEdges"],
        description:"The TabSet class allows components on several panes to share the same space. The tabs at \n the top can be selected by the user to show each pane. \n <P>\n Tabs are configured via the <code>tabs</code> property, each of which has a\n <code>pane</code> property which will be displayed in the main pane when that tab is\n selected.",
        name:"TabSet",
        seeAlso:[],
        type:"class"
    },
    "attr:DSResponse.errors":{
        ref:"attr:DSResponse.errors",
        flags:"R",
        description:"Server-side validation errors for an attempted \"update\" or \"add\" operation, as a JS Object\n where each property name is a field name from the record and each property value is an error\n message to be shown to the user.  For example:<pre>\n     dsResponse.errors = {\n         userId : \"A user with this userId already exists\",\n         orderId : \"No Order with ID '6A18294' exists\"\n     }\n </pre>\n The Java API DSResponse.addError(fieldName, errorMessage) is used to send server-side errors\n to the client.  See the Java Server Reference for details.",
        name:"errors",
        seeAlso:[
            {ref:"method:DataSource.handleError", description:null}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["errorHandling"]
    },
    "attr:DynamicForm.showErrorStyle":{
        ref:"attr:DynamicForm.showErrorStyle",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorStyle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "attr:ImgButton.showRollOver":{
        ref:"attr:ImgButton.showRollOver",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes over this object?",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:FormItem.defaultValue":{
        ref:"attr:FormItem.defaultValue",
        flags:"IRW",
        description:"Value used when no value is provided for this item. Note that whenever this item's value\n is cleared by the user or set to <code>null</code> programatically, it will be reverted\n to the <code>defaultValue</code>. Developers should use the ${isc.DocUtils.linkForRef('attr:DynamicForm.values')} \n object if their intention is to provide an initial value for a field in a form rather \n than a value to use in place of <code>null</code>.",
        name:"defaultValue",
        seeAlso:[
            {ref:"method:FormItem.defaultDynamicValue", description:null}
        ],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fieldEnableDisable')}"],
        definingClass:"class:FormItem",
        groups:["basics"]
    },
    "class:ImgButton":{
        methods:["method:ImgButton.getTitle", "method:ImgButton.setTitle", 
         "method:ImgButton.setIconOrientation","method:ImgButton.setIcon", "method:ImgButton.setAutoFit", "method:ImgButton.setBaseStyle", 
         "method:ImgButton.select","method:ImgButton.deselect", "method:ImgButton.isSelected", "method:ImgButton.setSelected", 
         "method:ImgButton.addToRadioGroup","method:ImgButton.removeFromRadioGroup", "method:ImgButton.setActionType", 
         "method:ImgButton.getActionType","method:ImgButton.setState", "method:ImgButton.setDisabled", "method:ImgButton.getState", 
         "method:ImgButton.action"],
        ref:"class:ImgButton",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:ImgButton.title", "attr:ImgButton.hiliteAccessKey", "attr:ImgButton.icon", 
         "attr:ImgButton.iconSize","attr:ImgButton.iconWidth", "attr:ImgButton.iconHeight", "attr:ImgButton.iconOrientation", 
         "attr:ImgButton.iconAlign","attr:ImgButton.iconSpacing", "attr:ImgButton.showDisabledIcon", 
         "attr:ImgButton.showRollOverIcon","attr:ImgButton.showFocusedIcon", "attr:ImgButton.showDownIcon", 
         "attr:ImgButton.showSelectedIcon","attr:ImgButton.autoFit", "attr:ImgButton.baseStyle", "attr:ImgButton.selected", 
         "attr:ImgButton.radioGroup","attr:ImgButton.actionType", "attr:ImgButton.state", "attr:ImgButton.showDisabled", 
         "attr:ImgButton.showDown","attr:ImgButton.showFocus", "attr:ImgButton.showFocused", "attr:ImgButton.showRollOver", 
         "attr:ImgButton.align","attr:ImgButton.valign", "attr:ImgButton.showTitle", "attr:ImgButton.labelHPad", 
         "attr:ImgButton.labelVPad","attr:ImgButton.src"],
        description:"A Img that behaves like a button, going through up/down/over state transitions in response to\n user events.  Supports an optional title, and will auto-size to accomodate the title text if\n <code>overflow</code> is set to \"visible\".\n <P>\n An examples of use is Window minimize/close buttons.",
        name:"ImgButton",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.editorExit":{
        ref:"method:ListGrid.editorExit",
        flags:"A",
        description:" Callback fired when the user attempts to navigate away from the current edit cell, \n or complete the current edit.\n <P>\n Return false from this method to cancel the default behavior (Saving / cancelling the\n current edit / moving to the next edit cell).\n <P>\n This callback is typically used to dynamically update values or value maps for related\n fields (via ${isc.DocUtils.linkForRef('method:ListGrid.setEditValue')} and ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap')} respectively, or to\n implement custom navigation (via ${isc.DocUtils.linkForRef('method:ListGrid.startEditing','startEditing(rowNum,colNum)')}.\n <P>\n Can be overriden at the field level as field.editorExit.\n\n",
        name:"editorExit",
        seeAlso:[
            {ref:"method:ListGridField.editorExit", description:null}
        ],
        params:[
            {description:"How was the edit completion fired?", optional:false, 
             name:"editCompletionEvent",defaultValue:null, type:"EditCompletionEvent"},
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"new value for the cell being edited", optional:false, name:"newValue", 
             defaultValue:null,type:"any"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"Returning false from this method will cancel the default behavior                      (for example saving the row) and leave the editor visible and focus\n                      in this edit cell.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:dragndrop":{
        ref:"group:dragndrop",
        refs:["attr:Toolbar.canReorderItems", "attr:Toolbar.canResizeItems", 
         "attr:Toolbar.canAcceptDrop"],
        name:"dragndrop",
        seeAlso:[],
        type:"group"
    },
    "class:DateItem":{
        methods:[],
        exampleConfig:"DateItem.xml",
        ref:"class:DateItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:DateItem.useTextField", "attr:DateItem.textAlign", 
         "attr:DateItem.invalidDateStringMessage","attr:DateItem.startDate", "attr:DateItem.endDate", "attr:DateItem.centuryThreshold", 
         "attr:DateItem.displayFormat","attr:DateItem.inputFormat"],
        description:"Item for manipulating Dates.\n <p>\n Can be rendered as a text field, or as 3 selects for day, month, year.  Includes optional\n pop-up picker.",
        name:"DateItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('dateItem')}"]
    },
    "attr:CubeGrid.chartConstructor":{
        ref:"attr:CubeGrid.chartConstructor",
        flags:"IR",
        description:"Name of the SmartClient Class to be used when creating charts.  Must support the\n ${isc.DocUtils.linkForRef('interface:Chart')} interface.",
        name:"chartConstructor",
        seeAlso:[],
        valueType:"Classname",
        defaultValue:"\"FusionChart\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "method:ListGrid.reorderField":{
        ref:"method:ListGrid.reorderField",
        flags:"A",
        description:" Reorder a particular field \n\n",
        name:"reorderField",
        seeAlso:[],
        params:[
            {description:"Number of the field to reorder", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"},
            {description:"New position for that field", optional:false, name:"moveToPosition", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:ListGrid.setShowFilterEditor":{
        ref:"method:ListGrid.setShowFilterEditor",
        flags:"",
        description:" Setter for the ${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor')} property. Allows the filter editor to be\n shown or hidden at runtime.\n",
        name:"setShowFilterEditor",
        seeAlso:[],
        params:[
            {description:"true if the filter editor should be shown, false if it should be hidden", 
             optional:false,name:"value", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "attr:Canvas.minWidth":{
        ref:"attr:Canvas.minWidth",
        flags:"IRWA",
        description:"Minimum width that this Canvas can be resized to.\n <P>\n Note that a Canvas with overflow:\"visible\" has an implicit minimize size based on it's\n contents.",
        name:"minWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"10",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Class.isA":{
        ref:"method:Class.isA",
        flags:"",
        description:"\n	Returns whether this object is of a particular class by class name, either as a direct\n	instance of that class or as subclass of that class, or by implementing an interface\n  that has been mixed into the class.<br><br>\n\n	NOTE: this only applies to ISC's class system, eg:  <code>myInstance.isA(\"Object\")</code> will be\n	false.\n\n",
        name:"isA",
        seeAlso:[],
        params:[
            {description:"Class name to test against", optional:false, name:"className", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"whether this object is of that Class                                   or a subClass of that Class", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:CubeGrid.baseStyle":{
        ref:"attr:CubeGrid.baseStyle",
        flags:"IR",
        getter:["getBaseStyle"],
        description:"The base name for the CSS class applied to cells. This style will have \"Dark\", \n \"Over\", \"Selected\", or \"Disabled\" appended to it according to the state of the cell.",
        name:"baseStyle",
        seeAlso:[
            {ref:"method:CubeGrid.getCellStyle", description:null},
            {ref:"method:CubeGrid.getBaseStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"cubeCell\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["cellStyling"]
    },
    "attr:Canvas.resizeBarTarget":{
        ref:"attr:Canvas.resizeBarTarget",
        flags:"IR",
        description:"When this Canvas is included as a member in a Layout, and ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar')} is set to\n <code>true</code> so that a resizeBar is created, <code>resizeBarTarget:\"next\"</code> can be\n set to indicate that the resizeBar should resize the next member of the layout rather than\n this one.  For resizeBars that support hiding their target member when clicked on, \n <code>resizeBarTarget:\"next\"</code> also means that the next member will be the one hidden.\n <P>\n This is typically used to create a 3-way split pane, where left and right-hand sections can\n be resized or hidden to allow a center section to expand.\n <P>\n <b>NOTE:</b> as with any Layout, to ensure all available space is used, one or more members\n must maintain a flexible size (eg 75%, or *).  In a two pane Layout with a normal resize\n bar, to fill all space after a user resizes, the member on the <b>right</b> should have\n flexible size.  With resizeBarTarget:\"next\", the member on the <b>left</b> should have\n flexible size.",
        name:"resizeBarTarget",
        seeAlso:[
            {ref:"attr:Canvas.showResizeBar", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["layoutMember"]
    },
    "method:CubeGrid.enableHilite":{
        ref:"method:CubeGrid.enableHilite",
        flags:"",
        description:" Enable / disable a ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites','hilite')}\n\n",
        name:"enableHilite",
        seeAlso:[],
        params:[
            {description:"ID of hilite to enable", optional:false, name:"hiliteID", defaultValue:null, 
             type:"string"},
            {description:"new enabled state to apply - if null, defaults to true", optional:true, 
             name:"enable",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "class:Time":{
        methods:[],
        ref:"class:Time",
        classAttrs:["classAttr:Time.UTCHoursOffset", "classAttr:Time.displayFormat", 
         "classAttr:Time.shortDisplayFormat","classAttr:Time.AMIndicator", "classAttr:Time.PMIndicator"],
        classMethods:["classMethod:Time.toTime", "classMethod:Time.toShortTime", "classMethod:Time.parseInput", 
         "classMethod:Time.createDate","classMethod:Time.setShortDisplayFormat", "classMethod:Time.setNormalDisplayFormat", 
         "classMethod:Time.compareTimes"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Class with helper methods for converting dates to and from formatted time strings.",
        name:"Time",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.rowClick":{
        ref:"method:ListGrid.rowClick",
        flags:"A",
        description:"\n Event handler for when rows in the body are clicked upon. The default implementation handles\n firing ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')} if appropriate, and fires\n ${isc.DocUtils.linkForRef('method:ListGridField.recordClick')} and/or ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} if set. Developers\n should typically implement recordClick rather than overriding this method.\n\n",
        name:"rowClick",
        seeAlso:[
            {ref:"method:ListGrid.recordClick", description:null}
        ],
        params:[
            {description:"record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"index of the row where the click occurred", optional:false, name:"recordNum", 
             defaultValue:null,type:"number"},
            {description:"index of the col where the click occurred", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"},
            {description:"indicates whether this was a synthesized record                                              click in response to a keyboard event", 
             optional:true,name:"keyboardGenerated", defaultValue:null, type:"boolean"}
        ],
        returns:{description:null, type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events", "events"]
    },
    "attr:ResultSet.disableCacheSync":{
        ref:"attr:ResultSet.disableCacheSync",
        flags:"IRA",
        description:"By default when the data of this ResultSet's dataSource is modified, the ResultSet will\n be updated to display these changes.\n Set this flag to true to disable this behavior.",
        name:"disableCacheSync",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["cacheSync"]
    },
    "classAttr:Validator.mustBeExactLength":{
        ref:"classAttr:Validator.mustBeExactLength",
        flags:"IRA",
        description:"Default error message to display when standard <code>lengthRange</code> type validator\n has <code>validator.max</code> and <code>validator.min</code> set to the same value,\n and returns false because the value passed is not the same length as these limits.<br>\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeExactLength",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be exactly ${max} characters\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:DynamicForm.validate":{
        ref:"method:DynamicForm.validate",
        flags:"",
        description:" Validates the form without submitting it, and redraws the form to display error messages\n if there are any validation errors. Returns true if validation succeeds, or false if\n validation fails.<br>\n For databound forms, any Datasource field validators will be run even if there is no \n associated item in the form.<br>\n Validators will also be run on hidden form items<br>\n In both these cases, validation failure can be handled via \n ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors')}\n\n",
        name:"validate",
        seeAlso:[],
        params:[
            {description:"Should validators be processed for non-visible fields         such as dataSource fields with no associated item or fields with visibility set to\n         <code>\"hidden\"</code>?", 
             optional:false,name:"validateHiddenFields", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if validation succeeds, or false if validation fails.", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('validationType')}"],
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "class:Toolbar":{
        methods:["method:Toolbar.getButton", "method:Toolbar.getButtonNumber", 
         "method:Toolbar.selectButton","method:Toolbar.deselectButton", "method:Toolbar.itemClick", 
         "method:Toolbar.itemDragResized"],
        ref:"class:Toolbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:Toolbar.buttons", "attr:Toolbar.vertical", "attr:Toolbar.buttonConstructor", 
         "attr:Toolbar.canReorderItems","attr:Toolbar.canResizeItems", "attr:Toolbar.canAcceptDrop", "attr:Toolbar.buttonDefaults"],
        description:"A Toolbar creates a vertical or horizontal strip of similar components (typically Buttons)\n and provides managed resizing and reordering behavior over those components.\n <p>\n If you are creating a bar with a mixture of different elements (eg some MenuButtons, some\n Labels, some Buttons, some custom components), you want to use a ${isc.DocUtils.linkForRef('class:ToolStrip')}.  A\n Toolbar is better suited for managing a set of highly similar, interchangeable components,\n such as ListGrid headers.",
        name:"Toolbar",
        seeAlso:[],
        type:"class"
    },
    "interface:DataBoundComponent":{
        methods:["method:DataBoundComponent.setDataSource"],
        ref:"interface:DataBoundComponent",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:DataBoundComponent.dataSource", "attr:DataBoundComponent.dataPageSize", 
         "attr:DataBoundComponent.fields","attr:DataBoundComponent.useAllDataSourceFields", 
         "attr:DataBoundComponent.showHiddenFields","attr:DataBoundComponent.showDetailFields", "attr:DataBoundComponent.showComplexFields", 
         "attr:DataBoundComponent.fetchOperation","attr:DataBoundComponent.updateOperation", "attr:DataBoundComponent.addOperation", 
         "attr:DataBoundComponent.removeOperation","attr:DataBoundComponent.useFlatFields"],
        description:"A DataBoundComponent is a widget that can configure itself for viewing or editing objects which\n share a certain schema by \"binding\" to the schema for that object (called a \"DataSource\").\n <P>\n A schema (or DataSource) describes an object as consisting of a set of properties (or\n \"fields\").\n <P>\n DataBoundComponents have a ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','common set of APIs')} for\n dealing with binding to DataSources, \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','overriding or augmenting')} the schema information\n provided by a DataSource, and manipulating objects or sets of object from the DataSource.\n <P>\n The following visual components currently support databinding:<pre>\n   ${isc.DocUtils.linkForRef('class:DynamicForm')}\n   ${isc.DocUtils.linkForRef('class:DetailViewer')}\n   ${isc.DocUtils.linkForRef('class:ListGrid')}\n   ${isc.DocUtils.linkForRef('class:TreeGrid')}\n   ${isc.DocUtils.linkForRef('class:CubeGrid')}\n </pre>\n The following non-visual components also support databinding:<pre>\n   ${isc.DocUtils.linkForRef('class:ValuesManager')}\n   ${isc.DocUtils.linkForRef('class:ResultSet')}\n   ${isc.DocUtils.linkForRef('class:ResultTree')}\n </pre>",
        name:"DataBoundComponent",
        seeAlso:[],
        type:"interface"
    },
    "classMethod:RPCManager.handleError":{
        ref:"classMethod:RPCManager.handleError",
        flags:"",
        description:" <code>handleError</code> will be called if ${isc.DocUtils.linkForRef('attr:RPCResponse.status')} is negative and\n ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} was not set.\n <p>\n This method is called for both ${isc.DocUtils.linkForRef('class:DSResponse')}s and ${isc.DocUtils.linkForRef('class:RPCResponse')}s that have a\n non-success status.  You can check whether the response is a DSResponse by checking\n <code>response.isDSResponse</code>.\n <p>\n By default <code>handleError()</code> always logs a warning.  In addition, if\n ${isc.DocUtils.linkForRef('attr:RPCResponse.data','response.data')} was set to a String, a warning dialog will be\n shown to the user with response.data as the message, which allows the server to send\n user error messages back without writing custom client-side error handling.\n <p>\n To do custom error handling that is specific to a particular component or type of\n request, set ${isc.DocUtils.linkForRef('attr:RPCRequest.willHandleError')} and deal with errors in the\n rpcRequest.callback.  To change the default system-wide error handling, override this\n method.  Note that since <code>handleError()</code> is a class method, to override it\n you will call ${isc.DocUtils.linkForRef('classMethod:Class.addClassProperties','addClassProperties()')} rather than\n addProperties(), like so:\n <pre>\n     isc.RPCManager.addClassProperties({\n         handleError : function (response, request) { .. custom handling .. }\n     })\n </pre>\n <p>\n If you're using the xmlHttpRequest ${isc.DocUtils.linkForRef('attr:RPCRequest.transport')}, you can access the \n <a href='http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html' onclick=\"window.open('http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html');return false;\">HTTP status code</a>\n of the response (eg 404 Not Found or 500 Server Error) as ${isc.DocUtils.linkForRef('attr:RPCResponse.httpResponseCode')}.\n <P>\n For very advanced usage, the response.xmlHttpRequest contains the native XMLHttpRequest\n object used to make the request.  Accessing this object is subject to possible\n cross-platform bugs and inconsistencies, and Isomorphic recommends that you wrap any\n access to the XMLHttpRequest object in a try/catch block because some browsers may throw\n exceptions when certain attributes of this object are accessed.  For example, if you try\n to access XMLHttpRequest.status (for the HTTP status code) when the network cable \n is unpluged in Windows, you'll get an Exception in Firefox.\n\n",
        name:"handleError",
        seeAlso:[
            {ref:"method:DataSource.handleError", description:null}
        ],
        params:[
            {description:"the RPCResponse or DSResponse object returned from the server", 
             optional:false,name:"response", defaultValue:null, type:"Response"},
            {description:"the RPCRequest or DSRequest that was sent to the server", optional:false, 
             name:"request",defaultValue:null, type:"Request"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager",
        groups:["operations"]
    },
    "attr:SerializationContext.useFlatFields":{
        ref:"attr:SerializationContext.useFlatFields",
        flags:"IR",
        description:"Enables flat serialization mode, as described for ${isc.DocUtils.linkForRef('attr:DSRequest.useFlatFields')}.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:SerializationContext"
    },
    "attr:CubeGrid.columnFacets":{
        ref:"attr:CubeGrid.columnFacets",
        flags:"IRW",
        description:"The list of facets that will appear on top of the body",
        name:"columnFacets",
        seeAlso:[],
        valueType:"array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:ImgButton.valign":{
        ref:"attr:ImgButton.valign",
        flags:"IRW",
        description:"Vertical alignment of this component's title.",
        name:"valign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["appearance"]
    },
    "attr:CubeGrid.facetValueHoverVAlign":{
        ref:"attr:CubeGrid.facetValueHoverVAlign",
        flags:"IRWA",
        description:"Allows the developer to override the vertical text alignment of hover tips shown for\n facet values.  If unspecified the hover canvas content alignment will be set by\n <code>this.hoverVAlign</code> if specified.",
        name:"facetValueHoverVAlign",
        seeAlso:[
            {ref:"attr:Canvas.hoverVAlign", description:null}
        ],
        valueType:"VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "attr:ListGrid.generateDoubleClickOnEnter":{
        ref:"attr:ListGrid.generateDoubleClickOnEnter",
        flags:"IRWA",
        description:"If true, when the user navigates to a cell using arrow keys and hits Enter, \n the cell will respond to a double click event.",
        name:"generateDoubleClickOnEnter",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "method:FormItem.getTitle":{
        ref:"method:FormItem.getTitle",
        flags:"A",
        description:"	Return the title of this formItem\n",
        name:"getTitle",
        seeAlso:[],
        returns:{description:"title for the formItem", type:"HTML"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["drawing"]
    },
    "method:List.intersect":{
        ref:"method:List.intersect",
        flags:"",
        description:" Return the list of items that are in both this list and the passed-in list(s).\n\n",
        name:"intersect",
        seeAlso:[],
        params:[
            {description:"lists to intersect with", optional:false, name:"lists", defaultValue:null, 
             type:"all List arguments"}
        ],
        returns:{description:"intersection", type:"List"},
        type:"method",
        definingClass:"interface:List",
        groups:["arrayMath"]
    },
    "method:Array.add":{
        ref:"method:Array.add",
        flags:"",
        description:" Add an object to this list, at the end\n\n",
        name:"add",
        seeAlso:[],
        params:[
            {description:"object to add", optional:false, name:"object", defaultValue:null, type:"any"}
        ],
        returns:{description:"pointer to the object passed in", type:"any"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "method:ListGrid.rowMouseUp":{
        ref:"method:ListGrid.rowMouseUp",
        flags:"",
        description:" Called when a row receives a mouseup event.\n\n",
        name:"rowMouseUp",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:CubeGrid.getColumnFacetLayout":{
        ref:"method:CubeGrid.getColumnFacetLayout",
        flags:"",
        description:" Get the current heights of the column facets, as:<br> \n [ {facetId:facetId, height:currentHeight}, ... ]\n\n      <br><i>methodType</i> getter\n",
        name:"getColumnFacetLayout",
        seeAlso:[],
        returns:{description:"array of {facetId:facetId, height:height} objects", type:"array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:EdgedCanvas.edgeBottom":{
        ref:"attr:EdgedCanvas.edgeBottom",
        flags:"IR",
        description:"Height in pixels for bottom corners and edges.  Defaults to edgeSize when unset.",
        name:"edgeBottom",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:ComboBoxItem.separatorRows":{
        ref:"attr:ComboBoxItem.separatorRows",
        flags:"IR",
        description:"Array of records to show between matching and non-matching rows in the PickList.\n <P>\n Not valid for ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionDataSource','databound pickLists')}.",
        name:"separatorRows",
        seeAlso:[],
        valueType:"Array of ListGridRecord",
        defaultValue:"[{isSeparator:true}]",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:StretchImgButton.radioGroup":{
        ref:"attr:StretchImgButton.radioGroup",
        flags:"IRWA",
        description:"String identifier for this canvas's mutually exclusive selection group.",
        name:"radioGroup",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state", "event handling"]
    },
    "attr:RestDataSource.updateDataURL":{
        ref:"attr:RestDataSource.updateDataURL",
        flags:"IR",
        description:"Custom dataURL for update type operations",
        name:"updateDataURL",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "group:componentXML":{
        ref:"group:componentXML",
        title:"Component XML",
        treeLocation:["Concepts"],
        refs:[],
        description:"As covered in the <i>QuickStart Guide</i> Chapter 4, <i>Coding</i>, SmartClient \n components can be created in either XML or JavaScript format.  This section covers some of\n the details of using the XML format, called \"SmartClient component XML\".\n <P>\n <b>Referring to previously created components</b>\n <P>\n To refer to another component by ID in XML, use &lt;Canvas ref=/&gt;.  For example:\n <pre>\n &lt;Canvas ID=\"myCanvas\"/&gt;\n &lt;Canvas ID=\"myCanvas2\"/&gt;\n &lt;VLayout&gt;\n     &lt;members&gt;\n         &lt;Canvas ref=\"myCanvas\"/&gt;\n         &lt;Canvas ref=\"myCanvas2\"/&gt;\n     &lt;/members&gt;\n &lt;/VLayout&gt;\n </pre>\n <P>\n <b>JavaScript expressions</b>\n <P>\n To embed a JavaScript expression into component XML, use the &lt;JS&gt; tag.  For example:\n <pre>\n &lt;VLayout&gt;\n     &lt;width&gt;&lt;JS&gt;isc.Page.getWidth() - 20&lt;/JS&gt;&lt;/width&gt;\n &lt;/VLayout&gt;\n </pre>\n Note that, like all component XML properties, the <code>width</code> property can be\n specified either as an XML attribute or as a subelement.  Expressing it as a subelement, as\n shown above, allows the &lt;JS&gt; tag to be used.\n <P>\n <b>Embedding Methods</b>\n <P>\n For ${isc.DocUtils.linkForRef('group:stringMethods','StringMethods')} such as ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')},\n JavaScript code can be used as an ordinary element value:\n <pre>\n &lt;ListGrid&gt;\n     &lt;recordClick&gt;if (record.age > 65) doSomething()&lt;/recordClick&gt;\n &lt;/ListGrid&gt;\n </pre>\n To embed an actual function definition, use the &lt;JS&gt; tag described above.  For\n example:\n <pre>\n &lt;ListGrid&gt;\n     &lt;recordClick&gt;&lt;JS&gt;function (viewer, record, recordNum, field) {\n          if (record.age > 65) doSomething();\n     }&lt;/JS&gt;&lt;/recordClick&gt;\n &lt;/ListGrid&gt;\n </pre>\n Unfortunately, characters commonly used in JavaScript code, such as ampersand (&amp;), are\n not legal inside XML element or attribute values.  For example, the expression \"record !=\n null && record.age > 65\" must be written as shown below, or it is not considered valid XML:\n <P>\n <pre>\n &lt;ListGrid&gt;\n     &lt;recordClick&gt;\n         if (record.status != null &amp;amp;&amp;amp; record.age > 65) doSomething()\n     &lt;/recordClick&gt;\n &lt;/ListGrid&gt;\n </pre>\n An alternative, for larger blocks of code, is to use the XML standard \"CDATA\" (character\n data) processing directive, which allows ampersand and other characters to be used without\n special notation:\n <pre>\n &lt;ListGrid&gt;\n     &lt;recordClick&gt;&lt;![CDATA[\n         if (record.status != null && record.age > 65) doSomething()\n     ]]&gt;&lt;/recordClick&gt;\n &lt;/ListGrid&gt;\n </pre>\n <P>\n Overall, embedding code in XML can be awkward.  Isomorphic generally recommends that\n signficant chunks of JavaScript code, such as non-trivial custom components, be moved to\n separate, purely JavaScript files, while code embedded in component XML is limited to simple\n expressions and short functions.\n <P>\n <b>Troubleshooting</b>\n <P>\n XML parsing errors, which happen when XML is not well-formed and would be rejected by any\n standard XML parser, are reported in the server-side log, and, when possible, also in the\n client-side log within the \"Results\" tab of the Developer Console.\n <P>\n Other issues with component XML can result from incorrect use of SmartClient component XML\n tags.  For example, you may specify a property and it may appear to have no effect even\n though it clearly works in other, JavaScript-based examples.  If you get this symptom, you\n can troubleshoot by looking at the JavaScript code SmartClient generates from component XML.\n <P>\n SmartClient always translates SmartClient component XML to JavaScript format before\n execution.  This is done automatically by the &lt;isomorphic:XML&gt; tag for XML embedded in\n a .jsp file, and you can \"View Source\" with your browser to see the generated XML.  You can\n also use the \"Eval XML\" section in the \"Results\" tab of the Developer Console to see\n the generated JavaScript (\"Show JS\" button) and to dynamically execute component XML (\"Eval\n XML\" button).  These facilities will help you troubleshoot issues with incorrectly specified\n XML.\n <P>\n <b>Custom Properties</b>\n <P>\n If you specify a custom property on a component in XML, for example:\n <pre>\n &lt;Canvas myProperty=\"false\"/&gt;\n </pre>\n The value of the property will be a JavaScript String.  In the above example, it would be\n the string \"false\", which is considered a boolean true value in the JavaScript language.\n If you want a different JavaScript type, you can force a property to be interpreted as a\n given type by using the \"xsi:type\" attribute:\n <pre>\n &lt;Canvas&gt;\n     &lt;myProperty xsi:type=\"xsd:boolean\"&gt;false&lt;/myProperty&gt;\n &lt;/Canvas&gt;\n </pre>\n The same notation works when you want to declare that an entire subobject has a given type.\n For example, this would cause the custom property \"myListGrid\" to have a live\n ${isc.DocUtils.linkForRef('class:ListGrid')} instance as it's value.  All of the properties on the &lt;myListGrid&gt; tag\n will be correctly interpreted as ListGrid properties and have the correct types.\n <pre>\n &lt;Canvas&gt;\n     &lt;myListGrid xsi:type=\"ListGrid\" width=\"500\" height=\"600\"/&gt;\n &lt;/Canvas&gt;\n </pre>\n If you do not want an actual live ListGrid, but rather a JavaScript Object containing\n properties for later construction of a ListGrid, use the <code>propertiesOnly</code>\n attribute.  For example, this code would cause the property \"listGridProperties\" to be a\n JavaScript Object with properties \"width\" and \"height\", whose values would be JavaScript\n Numbers.\n <pre>\n &lt;Canvas&gt;\n     &lt;listGridProperties xsi:type=\"ListGrid\" propertiesOnly=\"true\" \n                          width=\"500\" height=\"600\"/&gt;\n &lt;/Canvas&gt;\n </pre>\n For your reference: \"xsi\" stands for \"XML Schema Instance\"; this notation derives from XML\n Schema standards for explicitly specifying type inline.\n <P>\n <B>Custom Components</B>\n <P>\n If you use ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','defineClass()')} to define a new component class\n \"MyListGrid\" which is a subclass of the built-in component ListGrid, you can create it in\n XML as shown below:\n <pre>\n &lt;ListGrid constructor=\"MyListGrid\" width=\"500\"/&gt;\n </pre>\n By using the &lt;ListGrid&gt; tag you advertise that properties should be interpreted \n as <code>ListGrid</code> properties.  By specifying <code>constructor</code>\n you tell SmartClient what class to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}.\n <P>\n <b>Component Schema</b>\n <P>\n Instead of using the <code>constructor</code> and <code>xsi:type</code> attributes for\n custom components and custom properties, you can create a ${isc.DocUtils.linkForRef('group:componentSchema')} that\n describes the custom component.  Declaring a component schema allows you to use your\n component just like the built-in SmartClient components, and also allows your component to\n be used within ${isc.DocUtils.linkForRef('group:visualBuilder')}.",
        name:"componentXML",
        seeAlso:[],
        type:"group"
    },
    "method:DataSource.handleError":{
        ref:"method:DataSource.handleError",
        flags:"A",
        description:" If you define this method on a DataSource, it will be called whenever the server returns\n a DSResponse with a status other than ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_SUCCESS')}.  You can use\n this hook to do DataSource-specific error handling.  Unless you return\n <code>false</code> from this method, ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')} will be called by\n SmartClient right after this method completes.\n \n",
        name:"handleError",
        seeAlso:[
            {ref:"classMethod:RPCManager.handleError", description:null}
        ],
        params:[
            {description:"the DSResponse or DSResponse object returned from the server", 
             optional:false,name:"response", defaultValue:null, type:"DSResponse"},
            {description:"the DSRequest or DSRequest that was sent to the server", optional:false, 
             name:"request",defaultValue:null, type:"DSRequest"}
        ],
        returns:{description:"false to suppress ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')}", 
         type:"boolean"},
        type:"method",
        definingClass:"class:DataSource",
        groups:["errorHandling"]
    },
    "group:devTools":{
        ref:"group:devTools",
        refs:[],
        name:"devTools",
        seeAlso:[],
        type:"group"
    },
    "attr:StatefulCanvas.showFocused":{
        ref:"attr:StatefulCanvas.showFocused",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  If\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is <code>true</code>, the <b><code>\"over\"</code></b>\n will be used to indicate focus. Otherwise a separate <b><code>\"focused\"</code></b> state\n will be used.",
        name:"showFocused",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "method:StretchImgButton.getActionType":{
        ref:"method:StretchImgButton.getActionType",
        flags:"",
        description:" Return the 'actionType' for this canvas (radio / checkbox / button)\n",
        name:"getActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state", "event handling"]
    },
    "method:Tree.isOpen":{
        ref:"method:Tree.isOpen",
        flags:"",
        description:"\n Is a particular node open or closed (works for leaves and folders).\n\n",
        name:"isOpen",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the node is open", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "class:VLayout":{
        methods:[],
        exampleConfig:"VLayout.xml",
        ref:"class:VLayout",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:[],
        description:"A subclass of Layout that applies a sizing policy along the vertical axis, interpreting\n  percent and \"*\" sizes as proportions of the height of the layout. VLayouts will set any\n  members that do not have explict widths to match the layout.",
        name:"VLayout",
        seeAlso:[
            {ref:"attr:Layout.vPolicy", description:null}
        ],
        type:"class"
    },
    "method:Button.getActionType":{
        ref:"method:Button.getActionType",
        flags:"",
        description:" Return the 'actionType' for this canvas (radio / checkbox / button)\n",
        name:"getActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["state", "event handling"]
    },
    "attr:RichTextItem.colSpan":{
        ref:"attr:RichTextItem.colSpan",
        flags:"IRW",
        description:"By default RichTextItems take up an entire row",
        name:"colSpan",
        seeAlso:[],
        valueType:"number | string",
        defaultValue:"\"*\"",
        type:"attr",
        definingClass:"class:RichTextItem"
    },
    "method:Array.getRange":{
        ref:"method:Array.getRange",
        flags:"",
        description:" Return the items between position start and end, non-inclusive at the end.\n\n",
        name:"getRange",
        seeAlso:[],
        params:[
            {description:"start position", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end position", optional:false, name:"end", defaultValue:null, type:"number"}
        ],
        returns:{description:"subset of the array from start -> end-1", type:"Array"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "classMethod:isc.ask":{
        ref:"classMethod:isc.ask",
        flags:"",
        description:" Show a modal dialog with a message, icon, and \"Yes\" and \"No\" buttons.\n <P>\n The callback will receive boolean true for an OK button click, boolean false for a No button\n click, or null if the Dialog is dismissed via the close button.\n\n",
        name:"ask",
        seeAlso:[
            {ref:"classAttr:Dialog.Warn", description:null},
            {ref:"classMethod:isc.warn", description:null},
            {ref:"method:Dialog.yesClick", description:null},
            {ref:"method:Dialog.noClick", description:null},
            {ref:"classAttr:Dialog.ASK_TITLE", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"Callback to fire when the                                       user clicks a button to dismiss the dialog.\n                                      This has the single parameter 'value', indicating the \n                                      value returned by the Warn dialog from 'okClick()' etc.", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for\n                                      the Dialog, set properties.buttons to an array of buttons\n										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('dialogs')}"],
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "method:ListGrid.getSelectedRecord":{
        ref:"method:ListGrid.getSelectedRecord",
        flags:"",
        description:" Return the first selected record in this component.<br><br>\n This method is appropriate if <code>${isc.DocUtils.linkForRef('attr:ListGrid.selectionType')}</code> is\n <code>\"single\"</code>, or if you only care about the first selected record in\n a multiple-record selection. To access all selected records, use\n <code>${isc.DocUtils.linkForRef('method:ListGrid.getSelection')}</code> instead.\n",
        name:"getSelectedRecord",
        seeAlso:[],
        returns:{description:"first selected record, or null if nothing selected", type:"ListGridRecord"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundRemove')}"],
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "method:Canvas.init":{
        ref:"method:Canvas.init",
        flags:"A",
        description:"\n This method performs some basic initialization common to all UI components.  To do custom UI\n component initialization, you should generally override ${isc.DocUtils.linkForRef('method:Canvas.initWidget')}.  This\n method does the following, in order:\n <ul>\n <li>Sets up a global reference to this instance as described in ${isc.DocUtils.linkForRef('attr:Canvas.ID')}.\n <li>Ensures certain numeric properties have numeric values (e.g. width, height, padding,\n margin)\n <li>Ensures ${isc.DocUtils.linkForRef('attr:Canvas.children')} and ${isc.DocUtils.linkForRef('attr:Canvas.peers')} are Arrays.\n <li>Calls ${isc.DocUtils.linkForRef('method:Canvas.initWidget')}\n <li>Creates ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')} and ${isc.DocUtils.linkForRef('attr:Canvas.showShadow','shadow')}, if so configured.\n <li>Calls ${isc.DocUtils.linkForRef('method:Canvas.draw')} if ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw')} is set on instance or globally.\n </ul>\n Unless you're in an advanced scenario where you need to inject code before the above\n logic executes, place your initialization logic in initWidget() rather than init().  If you\n do decided to override this method, you must call the superclass implementation like so:\n <pre>\n    this.Super(\"init\", arguments);\n </pre>\n\n",
        name:"init",
        seeAlso:[],
        params:[
            {description:"All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"any"}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "classMethod:Log.timeMethod":{
        ref:"classMethod:Log.timeMethod",
        flags:"",
        description:" \n  Observe a method on an object, logging execution time whenever the method is called.\n <P>\n  Call a second time with identical arguments to disable tracing.\n\n",
        name:"timeMethod",
        seeAlso:[],
        params:[
            {description:"object to observe", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"name of the method to observe", optional:false, name:"methodName", 
             defaultValue:null,type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "type:LayoutPolicy":{
        ref:"type:LayoutPolicy",
        values:[
            {description:"Layout does not try to size members on the axis at all, merely stacking them (length\n  axis) and leaving them at default breadth.", 
             value:"Layout.NONE"},
            {description:"Layout sizes members so that they fill the specified size of the layout.  The rules\n  are:\n  <ul>\n  <li> Any component given an initial pixel size, programmatically resized to a specific\n  pixel size, or drag resized by user action is left at that exact size\n  <li> Any component that ${isc.DocUtils.linkForRef('attr:Button.autoFit','autofits')} is given exactly the space it\n  needs, never forced to take up more.\n  <li> All other components split the remaining space equally, or according to their\n  relative percentages.\n  </ul>", 
             value:"Layout.FILL"}
        ],
        description:"Policy controlling how the Layout will manage member sizes on this axis.\n  <P>\n  See also ${isc.DocUtils.linkForRef('attr:Layout.overflow')}.",
        name:"LayoutPolicy",
        seeAlso:[],
        type:"type"
    },
    "method:Canvas.animateMove":{
        ref:"method:Canvas.animateMove",
        flags:"",
        description:" Animate a reposition of this canvas from its current position to the specified position\n",
        name:"animateMove",
        seeAlso:[],
        params:[
            {description:"new left position (or null for unchanged)", optional:false, name:"left", 
             defaultValue:null,type:"number"},
            {description:"new top position (or null for unchanged)", optional:false, name:"top", 
             defaultValue:null,type:"number"},
            {description:"When the move completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated move", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration effect to bias the ratios", optional:true, 
             name:"acceleration",defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateMove')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:Canvas.getInnerHeight":{
        ref:"method:Canvas.getInnerHeight",
        flags:"A",
        description:"  Returns the amount of space available for (an) absolutely positioned child widget(s) or \n  HTML content, without introducing clipping, scrolling or overflow.<br>\n  This is the space within the viewport of the widget (including padding, but excluding \n  margins, borders or scrollbars) rendered at its specified size.\n\n",
        name:"getInnerHeight",
        seeAlso:[
            {ref:"method:Canvas.getInnerWidth", description:null},
            {ref:"method:Canvas.getInnerContentHeight", description:null},
            {ref:"method:Canvas.getInnerContentWidth", description:null}
        ],
        returns:{description:"inner height of the widget in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:ResultSet.updatePartialCache":{
        ref:"attr:ResultSet.updatePartialCache",
        flags:"IRA",
        description:"If set to true, updated and added rows will be integrated into the client-side cache\n even if paging is enabled and cache is partial.  If <code>updatePartialCache</code> is\n false, the cache will be invalidated and new data fetched.\n <P>\n If updatePartialCache is enabled and an \"add\" or \"update\" operation succeeds with a partial\n cache:\n <ul>\n <li> updated rows will remain in their current position.  No attempt will be made to sort\n them into a new position even if the sort field was updated.\n <li> newly added rows will be added at either the end (first preference) or beginning of\n the dataset if that part of the dataset is cached and was most recently requested.\n If not, the new row is added at the end of the most recently requested contiguously\n cached range\n </ul>\n The cache will then be dropped the next time rows are fetched, to prevent problems with\n inconsistent row numbering between the server and client, which could otherwise lead to\n duplicate rows or rows being skipped entirely.",
        name:"updatePartialCache",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["cacheSync"]
    },
    "method:TreeGrid.getDragTrackerIcon":{
        ref:"method:TreeGrid.getDragTrackerIcon",
        flags:"",
        description:" Return an icon to display as a drag tracker when the user drags some node(s).<br>\n Default implementation:<br>\n If multiple nodes are selected and ${isc.DocUtils.linkForRef('attr:TreeGrid.manyItemsImage')} is defined, this\n image wlll be returned<br>\n Otherwise returns the result of ${isc.DocUtils.linkForRef('method:TreeGrid.getIcon')} for the first node being \n dragged.\n <p>\n Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to <code>\"icon\"</code>. \n",
        name:"getDragTrackerIcon",
        seeAlso:[],
        params:[
            {description:"Records being dragged", optional:false, name:"records", defaultValue:null, 
             type:"Array of ListGridRecord"}
        ],
        returns:{description:"Image URL of icon to display", type:"string"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["dragTracker"]
    },
    "attr:WebService.serviceNamespace":{
        ref:"attr:WebService.serviceNamespace",
        flags:"R",
        description:"Namespace of this WebService, derived from the <code>targetNamespace</code>\n attribute of the <code>&lt;wsdl:definitions&gt;</code> element.",
        name:"serviceNamespace",
        seeAlso:[],
        valueType:"URI",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:Canvas.getPageLeft":{
        ref:"method:Canvas.getPageLeft",
        flags:"A",
        description:" Returns the page-relative left coordinate of the widget on the page, in pixels.\n",
        name:"getPageLeft",
        seeAlso:[],
        returns:{description:"global left coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:Canvas.dragTarget":{
        ref:"attr:Canvas.dragTarget",
        flags:"IRWA",
        description:"A different widget that should be actually dragged when dragging initiates on this\n      widget. One example of this is to have a child widget that drags its parent, as with a\n      drag box. Because the parent automatically repositions its children, setting the drag\n      target of the child to the parent and then dragging the child will result in both\n      widgets being moved.<br>\n      Valid dragTarget values are:<br>\n      - <code>null</code> (default) [this widget is its own drag target]<br>\n      - Pointer to another widget, or widget ID<br>\n      - <code>\"parent\"</code> drag target is this widget's \n         ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}<br>\n      - <code>\"top\"</code> drag target is this widget's \n         ${isc.DocUtils.linkForRef('attr:Canvas.topElement','topElement')}<br>",
        name:"dragTarget",
        seeAlso:[
            {ref:"classMethod:EventHandler.getDragTarget", description:null}
        ],
        valueType:"Canvas | String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Button.showRollOver":{
        ref:"attr:Button.showRollOver",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes over this object?",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonStates')}"],
        definingClass:"class:Button",
        groups:["state"]
    },
    "method:Button.setAlign":{
        ref:"method:Button.setAlign",
        flags:"",
        description:" Sets the (horizontal) alignment of this buttons content.\n",
        name:"setAlign",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["positioning"]
    },
    "classMethod:isA.Object":{
        ref:"classMethod:isA.Object",
        flags:"",
        description:"\n	Is <code>object</code> a non-null object<br><br>\n\n  NOTE: This will return false for objects of type number, string, boolean, function, \n  undefined.  It will also return false for the null value.\n  For other objects, including arrays, regular expressions, date objects, and JS object \n  literals it will return true.\n\n",
        name:"Object",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is an object", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:groupNode.groupTitle":{
        ref:"attr:groupNode.groupTitle",
        flags:"R",
        description:"The computed title for the group, which results from ${isc.DocUtils.linkForRef('method:ListGridField.getGroupTitle')}",
        name:"groupTitle",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"HTML",
        defaultValue:"see below",
        type:"attr",
        definingClass:"object:groupNode",
        groups:["grouping"]
    },
    "classMethod:RPCManager.sendQueue":{
        ref:"classMethod:RPCManager.sendQueue",
        flags:"",
        description:"\n Send all currently queued requests to the server.  You need only call this method if you are\n using queuing otherwise your requests are synchronously submitted to the server.\n <br><br>\n NOTE: if you aren't the caller who first enables queuing (startQueue() returns\n true), you should in general avoid calling sendQueue(), because whoever was\n first to enable queuing may have more requests to add to the same queue.\n\n",
        name:"sendQueue",
        seeAlso:[
            {ref:"classMethod:RPCManager.send", description:null},
            {ref:"classMethod:RPCManager.sendRequest", description:null},
            {ref:"classMethod:RPCManager.startQueue", description:null}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager",
        requiresModules:["SCServer"]
    },
    "attr:PickList.pickListHeaderHeight":{
        ref:"attr:PickList.pickListHeaderHeight",
        flags:"IRW",
        description:"If this pick list is showing multiple fields, this property determines the height of\n the column headers for those fields. Set to zero to suppress the headers entirely.",
        name:"pickListHeaderHeight",
        seeAlso:[
            {ref:"attr:PickList.pickListFields", description:null}
        ],
        valueType:"number",
        defaultValue:"22",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "type:DragAppearance":{
        ref:"type:DragAppearance",
        values:[
            {description:"No default drag appearance is indicated. Your custom dragging routines should\n      implement some behavior that indicates that the user is in a dragging situation,\n      and where the mouse is.", 
             value:"\"none\""},
            {description:"A \"drag tracker\" object is automatically shown and moved around with the\n      mouse. This is generally set to an icon that represents what is being dragged. The\n      default tracker is a 10 pixel black square, but you can customize this icon. This\n      dragAppearance is not recommended for use with drag resizing or drag moving.", 
             value:"\"tracker\""},
            {description:"The target object is actually moved, resized, etc. in real time. This is\n      recommended for drag repositioning, but not for drag resizing of complex objects.", 
             value:"\"target\""},
            {description:"An outline the size of the target object is moved, resized, etc. with the\n      mouse. This is recommended for drag resizing, especially for objects that take a\n      significant amount of time to draw.", 
             value:"\"outline\""}
        ],
        description:"Different types of effects for showing dragging behavior.",
        name:"DragAppearance",
        seeAlso:[],
        type:"type",
        groups:["dragdrop"]
    },
    "classMethod:Log.isEnabledFor":{
        ref:"classMethod:Log.isEnabledFor",
        flags:"",
        description:" Would a message logged to the given category at the given priority appear in the Log?\n <P>\n NOTE: if there is no specific priority setting for a given category, the\n <code>Log.defaultPriority</code> is used.\n\n",
        name:"isEnabledFor",
        seeAlso:[],
        params:[
            {description:"category name", optional:false, name:"category", defaultValue:null, 
             type:"String"},
            {description:"priority level to check", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"}
        ],
        type:"classMethod",
        definingClass:"class:Log"
    },
    "attr:ImgProperties.extraStuff":{
        ref:"attr:ImgProperties.extraStuff",
        flags:"IRW",
        description:"Specifies the additional attributes to write in the tag.",
        name:"extraStuff",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "attr:ActiveXControl.classID":{
        ref:"attr:ActiveXControl.classID",
        flags:"IR",
        description:"This sets the value of the classID property on the object.  This is meant to give you\n  complete control over the generated HTML.  In practice it may be more handy to set the uuid\n  property on this object and let the classID be generated from that.",
        name:"classID",
        seeAlso:[
            {ref:"attr:ActiveXControl.uuid", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ActiveXControl"
    },
    "attr:StatefulCanvas.title":{
        flags:"IRW",
        getter:["getTitle"],
        type:"attr",
        ref:"attr:StatefulCanvas.title",
        description:"The text title to display in this button.",
        name:"title",
        setter:["setTitle"],
        valueType:"string",
        seeAlso:[],
        defaultValue:"varies",
        groups:["basics"],
        definingClass:"class:StatefulCanvas"
    },
    "attr:GridHilite.id":{
        ref:"attr:GridHilite.id",
        flags:"IR",
        description:"Unique id for this hilite definition.  To apply this hilite to a record, set\n ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on the record to this id.  \n <P>\n For example, in a CubeGrid containing \"region\" and \"metric\" facets and with a \n <code>hiliteProperty</code> of \"_hilite\", the following cell record would have the\n \"redBG\" hilite applied to it:\n <pre>\n     { region:\"West\", metric:\"Profit\", _value:\"$50k\", _hilite:\"redBG\" }\n </pre>",
        name:"id",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:GridHilite"
    },
    "type:EnterKeyEditAction":{
        ref:"type:EnterKeyEditAction",
        values:[
            {description:"end editing", value:"\"done\""},
            {description:"edit the next editable cell in the record", value:"\"nextCell\""},
            {description:"edit the same field in the next editable record", value:"\"nextRow\""},
            {description:"edit the first editable cell in next editable record", 
             value:"\"nextRowStart\""}
        ],
        description:"What to do when a user hits enter while editing a cell",
        name:"EnterKeyEditAction",
        seeAlso:[],
        type:"type",
        groups:["editing"]
    },
    "attr:ToolStrip.separatorClass":{
        ref:"attr:ToolStrip.separatorClass",
        flags:"IRW",
        description:"Class to create when the string \"separator\" appears in ${isc.DocUtils.linkForRef('attr:ToolStrip.members')}.",
        name:"separatorClass",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"ToolStripSeparator\"",
        type:"attr",
        definingClass:"class:ToolStrip"
    },
    "method:Array.getProperty":{
        ref:"method:Array.getProperty",
        flags:"",
        description:" Return a new array where the value of item i is the value of \"property\" of item i in this\n array.  If an item doesn't have that property or is null, return item will be null.\n\n",
        name:"getProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to look for", optional:false, name:"property", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"array of the values of property in each item of this list", type:"array"},
        type:"method",
        definingClass:"object:Array",
        groups:["iteration"]
    },
    "type:FormItemType":{
        ref:"type:FormItemType",
        values:[
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:TextItem')}, unless the lenght of the field (as specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} attribute) is larger than the value\n specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.longTextEditorThreshold')}, a\n ${isc.DocUtils.linkForRef('class:TextAreaItem')} is shown.", 
             value:"\"text\""},
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:CheckboxItem')}", 
             value:"\"boolean\""},
            {description:"Same as <code>text</code> by default.                     Consider setting editorType:${isc.DocUtils.linkForRef('class:SpinnerItem')}.", 
             value:"\"integer\""},
            {description:"Same as <code>text</code> by default.                     Consider setting editorType:${isc.DocUtils.linkForRef('class:SpinnerItem')}.", 
             value:"\"float\""},
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:DateItem')}", 
             value:"\"date\""},
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:TimeItem')}", 
             value:"\"time\""},
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:SelectItem')}.  Also true for any field that                   specifies a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap')}.  \n                   Consider setting editorType:${isc.DocUtils.linkForRef('class:ComboBoxItem')}.", 
             value:"\"enum\""},
            {description:"Same as <code>text</code>", value:"\"sequence\""},
            {description:"If ${isc.DocUtils.linkForRef('attr:DataSourceField.canEdit')}<code>:false</code> is set on the field, the value is rendered as a ${isc.DocUtils.linkForRef('class:LinkItem')}.  Otherwise the field is rendered as a\n ${isc.DocUtils.linkForRef('class:TextItem')}.", 
             value:"\"link\""},
            {description:null, value:"\"image\""},
            {description:null, value:"\"imageFile\""},
            {description:"Rendered as a ${isc.DocUtils.linkForRef('class:UploadItem')}", 
             value:"\"binary\""}
        ],
        description:"DynamicForms automatically choose the FormItem type for a field based on the\n <code>type</code> property of the field.  The table below describes the default FormItem\n chosen for various values of the <code>type</code> property.\n <P>\n You can also set ${isc.DocUtils.linkForRef('attr:FormItem.editorType','field.editorType')} to the classname of a\n ${isc.DocUtils.linkForRef('class:FormItem')} to override this default mapping.",
        name:"FormItemType",
        seeAlso:[
            {ref:"attr:FormItem.type", description:null},
            {ref:"type:FieldType", description:null}
        ],
        type:"type"
    },
    "attr:ImgTab.capSize":{
        ref:"attr:ImgTab.capSize",
        flags:"IRW",
        description:"How big are the end pieces by default",
        name:"capSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:ImgTab",
        groups:["appearance"]
    },
    "method:TreeGrid.getEventRow":{
        ref:"method:TreeGrid.getEventRow",
        flags:"",
        description:" Returns the row number of the most recent mouse event.\n",
        name:"getEventRow",
        seeAlso:[],
        params:[
            {description:"optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event", 
             optional:false,name:"y", defaultValue:null, type:"number"}
        ],
        returns:{description:"row number, or -2 if beyond last drawn row", type:"number"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["events"]
    },
    "attr:Canvas.canDropBefore":{
        ref:"attr:Canvas.canDropBefore",
        flags:"IRWA",
        description:"When explicitly set to false, disallows drop before this member in the Layout.",
        name:"canDropBefore",
        seeAlso:[
            {ref:"class:Layout", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["layoutMember"]
    },
    "attr:BlurbItem.colSpan":{
        ref:"attr:BlurbItem.colSpan",
        flags:"IRW",
        description:"By default, texts span all remaining columns",
        name:"colSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"\"*\"",
        type:"attr",
        definingClass:"class:BlurbItem",
        groups:["appearance"]
    },
    "classMethod:XMLTools.serializeToString":{
        ref:"classMethod:XMLTools.serializeToString",
        flags:"",
        description:" Takes an XMLDocument and returns it as a String.\n <P>\n This method is not supported on the Safari web browser versions prior to 3.0.3.\n\n",
        name:"serializeToString",
        seeAlso:[],
        params:[
            {description:"XML document to apply the transform to", optional:false, 
             name:"inputDocument",defaultValue:null, type:"XMLDocument"}
        ],
        returns:{description:"XML document as a String", type:"String"},
        type:"classMethod",
        definingClass:"class:XMLTools",
        groups:["xmlTransform"]
    },
    "attr:DynamicForm.errorItemCellStyle":{
        ref:"attr:DynamicForm.errorItemCellStyle",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in \n a single item rendered at the top of the form.<br>\n This attribute specifies the cellStyle to apply to this item.",
        name:"errorItemCellStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"formCellError\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "attr:ServerObject.attributeName":{
        ref:"attr:ServerObject.attributeName",
        flags:"IR",
        description:"Specifies the name of the attribute by which to look up the DMI instance.  This attribute is\n consulted only when the value of ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')} is <code>\"attribute\"</code>.",
        name:"attributeName",
        seeAlso:[
            {ref:"attr:ServerObject.attributeScope", description:null},
            {ref:"attr:ServerObject.lookupStyle", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "group:networkPerformance":{
        ref:"group:networkPerformance",
        title:"Network Performance",
        treeLocation:["Optional Modules"],
        refs:[],
        description:"This section describes various methods for optimizing delivery of your SmartClient-based\n application to the browser.  The various techniques discussed here should enable you to\n drastically reduce the time to load your SmartClient based application and to cut down on\n bandwidth costs and server-side CPU usage.\n\n There are three main ways of improving the performance of your application:\n <p>\n <u><b>Compression</b></u>\n <p>\n You'll want to deliver as much of your application assets compressed as possible.  For a start, the\n SmartClient modules come pre-compressed.  The ${isc.DocUtils.linkForRef('group:compression')} section describes how\n to make sure that SmartClient modules and your application logic are delivered compressed\n and how to enable dynamic compression of your dynamic content.\n <p>\n Compression drastically reduces transfer times to the browser.  Compression ratios for css\n and javascript files can be as high as 8:1.\n\n <p>\n <u><b>Caching</b></u>\n <p>\n The ${isc.DocUtils.linkForRef('group:caching')} section deals with delivering as much content as possible with\n caching headers.  Setting these headers allows the end-user's browser and any intermediary\n proxies to keep a local copy of the file across browser reloads, ensuring the subsequent\n visits require almost no fetches from the server.  Eliminating these fetches is also\n important for the reasons explained under File Assembly below.\n \n <p>\n <u><b>File Assembly</b></u>\n <p>\n Modern browsers limit the number of HTTP connections they use to fetch the assets required\n to render your pages - typically to just 2 connections.  As a result, connection latency can\n play a much higher role than available bandwidth and the two connection limit effectively\n drastically limits the user's usable bandwidth.  For this reason, it's important to minimize\n the number of HTTP requests made to the server.  The File Assembly services make it easy to\n deliver multiple css and javascript file via one HTTP response.  Assembling files together\n also helps to increase the compression ratio because the commpression engine has more\n redundant data to work with.\n\n <p>\n <u><b>FileLoader</b></u>\n <p>\n The FileLoader is a standalone client-side module that allows you to performing caching or\n loading of various resources in the background on any page.  The typical usage pattern is to\n use this module to pre-cache SmartClient modules, skin images, and application logic while\n the user is, for example filling in a login form.  See the ${isc.DocUtils.linkForRef('class:FileLoader')} documentation\n on usage.\n\n <p>\n <u><b>SSL Considerations</b></u>\n <p>\n Some quirks to be aware of when optimizing for pages servied via HTTPS:\n <ul>\n <li>If your top-level https page loads an image via http, IE will pop a warning to the user\n asking if it's ok to serve the \"unsecure\" content.  Firefox does not pop an alert, bug shows\n a different lock icon to indicate that not all content is served from a secure server.\n <li>Firefox will not write images fetched via SSL to disk, even if expires headers are set.\n But it will cache them in memory for the duration of the browser session.  This makes the\n use of the ${isc.DocUtils.linkForRef('class:FileLoader')} even more important for SSL applications.  IE will cache SSL\n content across browser restarts.\n <li>If your only concern is with actual security and not with perception, it makes a lot of\n sense to serve the top-level page via plain HTTP and then use the SmartClient RPC mechanism\n to fetch sensitive data with no-cache headers via HTTPS.  Unfortunately this almost never\n practical because most users look for the secure lock icon on the top-level page and may\n become worried that the application is not secure if they don't see it.\n </ul>\n\n <p>\n <u><b>Other Tips</b></u>\n <p>\n 1.  Modern applications often use a number of cookies to keep track of session state,\n application state, etc.  If you don't limit the paths these cookies are served for, you can\n easily end up with these cookies being sent to the server with every HTTP request as\n part of the HTTP headers.  This can severely limit bandwidth where a large number of\n requests are made - typically for skin images.  Also note that most technologies used by\n end-users to connect to the internet such as DSL and Cable are half-duplex, meaning that\n downstream must pause for upstream traffic to be sent and these connections also are\n asymmetric, allowing much faster download speeds than upload speeds.  As a result, the\n limited upstream capability of most connections ends up limiting the download bandwidth by\n delayng the download of other assets required to render the page.\n <p>\n 2.  Whenever possible, don't sent the \"Cache-Control\" header to \"private\" - this tells\n intermediary proxies to not allow caching of the specified content, eliminating that cache\n as a useful intermediary for other users behind it.\n <p>\n 3.  For a good overview of performance considerations, see this post:\n <a href='http://www.die.net/musings/page_load_time/' onclick=\"window.open('http://www.die.net/musings/page_load_time/');return false;\">http://www.die.net/musings/page_load_time/</a>",
        name:"networkPerformance",
        seeAlso:[],
        type:"group"
    },
    "classMethod:XMLTools.transformNodes":{
        ref:"classMethod:XMLTools.transformNodes",
        flags:"",
        description:" Apply an XSLT Stylesheet to an XML Document.\n <P>\n This method cannot currently be supported on the Safari web browser versions prior to\n 3.0.3.\n\n",
        name:"transformNodes",
        seeAlso:[],
        params:[
            {description:"XML document to apply the transform to", optional:false, 
             name:"inputDocument",defaultValue:null, type:"XMLDocument"},
            {description:"XSLT stylesheet to use for transform", optional:false, name:"styleSheet", 
             defaultValue:null,type:"XMLDocument"}
        ],
        returns:{description:"stylesheet output", type:"String"},
        type:"classMethod",
        definingClass:"class:XMLTools",
        groups:["xmlTransform"]
    },
    "classAttr:RPCResponse.STATUS_LOGIN_INCORRECT":{
        ref:"classAttr:RPCResponse.STATUS_LOGIN_INCORRECT",
        flags:"R",
        description:"Indicates that the RPC has been intercepted by an authenticator that requires the user\n to log in.",
        name:"STATUS_LOGIN_INCORRECT",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-5",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "method:CubeGrid.setEditValue":{
        ref:"method:CubeGrid.setEditValue",
        flags:"A",
        description:"\n Set the edit value for some cell in the cube grid.<p>\n Note that cubeGrids display one record per cell - the value passed in should be the \n desired edit value for the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty')} of the record.\n\n",
        name:"setEditValue",
        seeAlso:[],
        params:[
            {description:"Row number", optional:false, name:"rowNum", defaultValue:null, type:"number"},
            {description:"Column number", optional:false, name:"colNum", defaultValue:null, 
             type:"number"},
            {description:"New value for the record", optional:false, name:"value", defaultValue:null, 
             type:"any"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "attr:ListGrid.dateInputFormat":{
        ref:"attr:ListGrid.dateInputFormat",
        flags:"IRWA",
        description:"If this is an editable listGrid, this property will specify the \n ${isc.DocUtils.linkForRef('attr:DateItem.inputFormat','inputFormat')} applied to editors for fields of type \n <code>\"date\"</code>",
        name:"dateInputFormat",
        seeAlso:[
            {ref:"attr:ListGrid.dateFormatter", description:null}
        ],
        valueType:"DateInputFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "method:DataSource.getXMLRequestBody":{
        ref:"method:DataSource.getXMLRequestBody",
        flags:"A",
        description:" Get the XML to be posted to the dataURL based on the passed DSRequest.\n <P>\n This API is intended to be overriden in order to integrate with web services that\n expect XML messages rather than simple HTTP parameters, but lack a\n WSDL description.  For WSDL-described web services, having loaded the service\n description, SmartClient knows the correct XML message structure, so customization is\n best done by modifying the JavaScript data that is used to form the message.\n\n",
        name:"getXMLRequestBody",
        seeAlso:[
            {ref:"classMethod:XMLTools.loadWSDL", 
             description:"for integration with WSDL-described web services"}
        ],
        params:[
            {description:"the request to encode as an XML message.", optional:false, name:"dsRequest", 
             defaultValue:null,type:"DSRequest"}
        ],
        returns:{description:"the entire XML request as a String, including SOAP envelope if SOAP is used", 
         type:"String"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "attr:Canvas.hoverStyle":{
        ref:"attr:Canvas.hoverStyle",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, this property can be used to specify the\n css style to apply to the hover canvas.",
        name:"hoverStyle",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customHovers')}"],
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:FormItem.disabled":{
        flags:"IRW",
        type:"attr",
        ref:"attr:FormItem.disabled",
        description:"Whether this item is disabled.  Can be updated at runtime via the <code>setDisabled()</code>\n method.  Note that if the widget containing this formItem is disabled, the formItem will\n behave in a disabled manner regardless of the setting of the item.disabled property.\n <p>\n Note that not all items can be disabled, and not all browsers show an obvious disabled style\n for native form elements.",
        name:"disabled",
        setter:["setDisabled"],
        valueType:"boolean",
        seeAlso:[
            {ref:"method:FormItem.setDisabled", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('fieldEnableDisable')}"],
        defaultValue:"false",
        groups:["appearance"],
        definingClass:"class:FormItem"
    },
    "group:metadataImport":{
        ref:"group:metadataImport",
        title:"Metadata Import",
        treeLocation:["Client Reference/Data Binding"],
        refs:[],
        description:"In SmartClient, metadata is expressed through ${isc.DocUtils.linkForRef('class:DataSource','DataSources')}, which in turn\n drive ${isc.DocUtils.linkForRef('interface:DataBoundComponent','DataBoundComponents')}.  If you have existing metadata, there\n are several possible approaches to transforming it to SmartClient DataSources, either one\n time or on the fly.\n <P>\n There are two possible targets for metadata import: XML format or JavaScript format.\n The XML format is more general purpose, since the ISC server can transform it to JavaScript\n via the ${isc.DocUtils.linkForRef('group:loadDSTag','loadDS tag')}, and DataSources in XML format can be used by the\n ISC server for server-side validation (this split is covered in more detail under\n ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','Data Source Declaration')}).\n <P>\n You may also transform your metadata dynamically (while the application is running in\n production) or staticly (one time ever or at packaging time).  Generally for a static\n or dynamic transform targetting JavaScript format you will want to produce one .js file\n containing all your DataSource definitions, to be loaded by your application via a normal\n &lt;SCRIPT SRC&gt; tag.  For a static transform targetting XML format, you will want to\n produce a series of .ds.xml files and place them in the directories expected by the ISC\n server (see ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','DataSource Declaration')}).  Staticly generated\n XML DataSources can be delivered to the browser as a single .js file via a .jsp containing\n several ${isc.DocUtils.linkForRef('group:loadDSTag','<code>loadDS</code> tags')}.\n <P>\n If you want to do dynamic transform targetting XML format and use ISC server-side\n validation, the server-side API DataSource.fromXML() can be used to create a DataSource\n dynamically from XML, so that you can then call DataSource.validate().  Either the XML\n DataSource definition or the live DataSource itself can be passed to the server-side API\n XML.toJS() to produce JavaScript.\n <P>\n How to actually produce JavaScript or XML DataSource definitions from your existing metadata\n depends on the format of your metadata.\n <P>\n <b>XML Schema</b>\n <P>\n The method ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')} and the \n ${isc.DocUtils.linkForRef('group:loadXMLSchemaTag','loadXMLSchema JSP tag')} provide dynamic transform of XML Schema\n to JavaScript.  This is essentially accomplished by running\n <code>isomorphic/system/schema/schemaTranslator.xsl</code> on the XML schema file to produce\n XML DataSource definitions, and then translating those to JavaScript.  You can run the\n <code>schemaTranslator</code> stylesheet using any standard XSLT processor and capture the\n XML output.\n <P>\n <b>Java Beans</b>\n <P>\n Metadata available via Java's \"reflection\" APIs allows a basic DataSource to be generated\n from Java beans.  Sample Java code can be found in\n <code>examples/server_integraton/DataSourceGenerator.java</code>.\n <P>\n <b>Other XML formats</b>\n <P>\n If you are familiar with XSLT or other XML transform languages, you\n could use it to do an XML to XML transform, and then use XML.toJS() to get to JavaScript.\n <P>\n <b>Schema represented as Java Objects</b>\n <P>\n If you are targetting XML, hand-coded generation of DataSource XML is straightforward, and\n from XML you can use XML.toJS() to get to JavaScript.",
        name:"metadataImport",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItem.titleStyle":{
        ref:"attr:FormItem.titleStyle",
        flags:"IRW",
        description:"Base CSS class name for a form item's title.",
        name:"titleStyle",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"formTitle\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "attr:SelectItem.showPickerIcon":{
        ref:"attr:SelectItem.showPickerIcon",
        flags:"IRW",
        description:"Should we show a special 'picker' icon for this form item. Picker icons are customizeable\n via ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconProperties')}. By default they will be rendered inside the \n Form Item's \"control box\" area, and will call ${isc.DocUtils.linkForRef('method:SelectItem.showPicker')} when clicked.",
        name:"showPickerIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "classMethod:EventHandler.getDragRect":{
        ref:"classMethod:EventHandler.getDragRect",
        flags:"",
        description:" During a drag with ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance','dragAppearance')} of either \"target\" or\n \"outline\", returns the page-relative coordinates of whatever element is being dragged.\n <P>\n Calling this method allows you to write drag and drop logic that works identically even if\n <code>dragAppearance</code> is subsequently changed.\n\n",
        name:"getDragRect",
        seeAlso:[],
        returns:{description:"global (page-relative) coordinates and size of the dragged element, as a                       4-element array [left,top,width,height], or null if not dragging", 
         type:"Rect"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["dragdrop"]
    },
    "attr:DataSource.dataURL":{
        ref:"attr:DataSource.dataURL",
        flags:"IR",
        description:"Default URL to contact to fulfill all DSRequests.  Can also be set on a\n per-operationType basis via ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL')}.\n <P>\n NOTE: Best practice is to use the same <code>dataURL</code> for all DataSources which\n fulfill DSRequests via the server-side RPCManager API.  Otherwise, cross-DataSource\n ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','operation queueing')} will not be possible.",
        name:"dataURL",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('jsonDataSource')}"],
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "classAttr:Hover.leftOffset":{
        ref:"classAttr:Hover.leftOffset",
        flags:"RW",
        description:"When positioining the hover canvas, this will be the default left offset from the \n mousepointer, if no explicit position was passed to the ${isc.DocUtils.linkForRef('classMethod:Hover.show')} method",
        name:"leftOffset",
        seeAlso:[],
        valueType:"number",
        defaultValue:"15",
        type:"classAttr",
        definingClass:"class:Hover"
    },
    "group:databinding":{
        ref:"group:databinding",
        title:"DataBinding",
        refs:["attr:ListGrid.fields", "attr:ListGrid.dataSource", "attr:ListGrid.useAllDataSourceFields", 
         "attr:ListGrid.showDetailFields","attr:ListGrid.dataProperties", "attr:TreeGrid.dataSource", 
         "attr:TreeGrid.loadDataOnDemand","attr:TreeGrid.fields", "attr:PickList.showOptionsFromDataSource", 
         "attr:SelectItem.showOptionsFromDataSource","attr:ComboBoxItem.showOptionsFromDataSource", "attr:DataBoundComponent.dataSource", 
         "attr:DataBoundComponent.dataPageSize","attr:DataBoundComponent.fields", "attr:DataBoundComponent.useAllDataSourceFields", 
         "attr:DataBoundComponent.showHiddenFields","attr:DataBoundComponent.showDetailFields", "attr:DataBoundComponent.showComplexFields", 
         "attr:ListGrid.autoFetchData","attr:DynamicForm.autoFetchData"],
        description:"DataBinding means the automatic, highly customizable process of 'binding' a UI component\n to a DataSource, so that a UI component displays, edits and saves DataSource records\n using appropriate formatters, editors, validation rules, and persistance logic.",
        name:"databinding",
        seeAlso:[
            {ref:"interface:DataBoundComponent", description:null}
        ],
        type:"group"
    },
    "method:ResultSet.willFetchData":{
        ref:"method:ResultSet.willFetchData",
        flags:"",
        description:" Will changing the criteria for this resultSet require fetching new data from the server, \n or can the new criteria be satisfied from data already cached on the client?<br>\n Second <code>textMatchStyle</code> parameter determines whether a change of text-match style\n will require a server fetch - for example if filter is being changed between\n an exact match (from e.g: ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}) and a substring match \n (from e.g: ${isc.DocUtils.linkForRef('method:ListGrid.filterData')}).<br>\n This method can be used to determine whether ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} or \n ${isc.DocUtils.linkForRef('method:ListGrid.filterData')} would cause a server side fetch when passed a certain set of \n criteria.\n",
        name:"willFetchData",
        seeAlso:[],
        params:[
            {description:"new criteria to test.", optional:false, name:"newCriteria", defaultValue:null, 
             type:"Criteria"},
            {description:"New text match style. If not passed assumes       textMatchStyle will not be modified.", 
             optional:true,name:"textMatchStyle", defaultValue:null, type:"String"}
        ],
        returns:{description:"true if server fetch would be required to satisfy new criteria.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:DetailViewer.headerStyle":{
        ref:"attr:DetailViewer.headerStyle",
        flags:"IRW",
        description:"CSS style for a header",
        name:"headerStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"detailHeader\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "method:Slider.valueIsChanging":{
        ref:"method:Slider.valueIsChanging",
        flags:"A",
        description:" Call this method in your ${isc.DocUtils.linkForRef('method:Slider.valueChanged')} handler to determine whether the\n value change is due to an ongoing drag interaction (true) or due to a thumb-release,\n mouse click, keypress, or programmatic event (false). You may choose to execute temporary or\n partial updates while the slider thumb is dragged, and final updates or persistence of the value\n in response to the other events.\n\n",
        name:"valueIsChanging",
        seeAlso:[],
        returns:{description:"true if user is still dragging the slider thumb, false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Slider"
    },
    "classAttr:RPCManager.promptCursor":{
        ref:"classAttr:RPCManager.promptCursor",
        flags:"IRW",
        description:"Controls the default cursor shown when ${isc.DocUtils.linkForRef('classAttr:RPCManager.promptStyle')} is set to\n <code>\"cursor\"</code>.  Overrideable by ${isc.DocUtils.linkForRef('attr:RPCRequest.promptCursor')}.\n <p>\n In Safari, IE 5.5 and Firefox 1.0 the default value is \"wait\", on all other platforms it is\n \"progress\".  The reason for this split is that the above-mentioned browsers do not support\n CSS2.1 - which is required for the \"progress\" cursor type.",
        name:"promptCursor",
        seeAlso:[
            {ref:"attr:RPCRequest.promptCursor", description:null}
        ],
        valueType:"String",
        defaultValue:"browser-dependent",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["rpcPrompt"]
    },
    "classMethod:FileLoader.cacheShadows":{
        ref:"classMethod:FileLoader.cacheShadows",
        flags:"",
        description:"\n Caches a set of shadow images at various depths.  For example this code:\n <pre>\n isc.FileLoader.cacheShadows(\"/isomorphic/skins/SmartClient/images/shared/shadows\", \"5\");\n </pre>\n Will cause the following images to be cached:\n <pre>\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TL.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_T.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TR.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_L.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_R.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BL.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_B.png\n /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BR.png\n </pre>\n\n",
        name:"cacheShadows",
        seeAlso:[],
        params:[
            {description:"Base directory containing the shadow images.", optional:false, 
             name:"baseDir",defaultValue:null, type:"String"},
            {description:"List of depths to load. These values corresponds to the Canvas                                    attribute ${isc.DocUtils.linkForRef('attr:Canvas.shadowDepth')}.   This can either be\n                                    a string with comma separated depths or an Array of depths.", 
             optional:false,name:"depths", defaultValue:null, type:"String or Array"},
            {description:"Name of the base shadow image from which list of URLs is                                    generated.  If not specified, this defaults to \"ds.png\".", 
             optional:true,name:"baseShadowImage", defaultValue:null, type:"String"},
            {description:"Optional code to execute when the last of the specified URLs                                      has completed caching.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "classMethod:RPCManager.send":{
        ref:"classMethod:RPCManager.send",
        flags:"",
        description:"\n This method is a convenience wrapper on <code>RPCManager.sendRequest()</code> - it calls\n through to sendRequest().\n\n",
        name:"send",
        seeAlso:[
            {ref:"classMethod:RPCManager.sendRequest", description:null},
            {ref:"class:RPCRequest", description:null}
        ],
        params:[
            {description:"data to be passed to the server", optional:false, name:"data", 
             defaultValue:null,type:"any"},
            {description:"method to call on RPC completion", optional:true, name:"callback", 
             defaultValue:null,type:"RPCCallback"},
            {description:"object literal containing any additional properties                                        you want to set - these will be applied to the\n                                        RPCRequest object that will be auto-created for you.", 
             optional:true,name:"requestParams", defaultValue:null, type:"Object"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "method:Class.init":{
        ref:"method:Class.init",
        flags:"A",
        description:"	\n Initialize a new instance of this Class.  This method is called automatically by\n ${isc.DocUtils.linkForRef('classMethod:Class.create')}.  \n <p>\n Override this method to provide initialization logic for your class.  If your class is\n a subclass of a UI component (i.e. descendant of ${isc.DocUtils.linkForRef('class:Canvas')}), override\n ${isc.DocUtils.linkForRef('method:Canvas.initWidget')} instead. \n\n",
        name:"init",
        seeAlso:[],
        params:[
            {description:"All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"any"}
        ],
        type:"method",
        definingClass:"class:Class"
    },
    "attr:DynamicForm.encoding":{
        ref:"attr:DynamicForm.encoding",
        flags:"IRWA",
        description:"encoding for the form, use MULTIPART_ENCODING for file upload forms",
        name:"encoding",
        seeAlso:[],
        valueType:"Encoding",
        defaultValue:"DynamicForm.NORMAL",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "method:WebService.getSchema":{
        ref:"method:WebService.getSchema",
        flags:"",
        description:" Get the schema definition of any complexType or element of complexType defined in any\n &lt;schema&gt; blocks in the WSDL file this WebService represents.\n \n",
        name:"getSchema",
        seeAlso:[],
        params:[
            {description:"name of type or element", optional:false, name:"schemaName", 
             defaultValue:null,type:"String"},
            {description:"optional type of schema to return, either \"element\" for                              xs:element definitions only or \"type\" for xs:complexType\n                              definitions.  If unspecified, either will be returned,\n                              with types preferred if names collide", 
             optional:true,name:"schemaType", defaultValue:null, type:"String"}
        ],
        returns:{description:"requested schema", type:"DataSource"},
        type:"method",
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:ValuesManager.getMemberValues":{
        ref:"method:ValuesManager.getMemberValues",
        flags:"",
        description:"  Returns the subset of this valuesManager's values associated with some member form.\n  \n",
        name:"getMemberValues",
        seeAlso:[],
        params:[
            {description:"ID of the member form for which we want to retrieve the values.", 
             optional:false,name:"ID", defaultValue:null, type:"string"}
        ],
        returns:{description:"a map of the values for the appropriate member form.", type:"object"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:PickList.showAllOptions":{
        ref:"attr:PickList.showAllOptions",
        flags:"IR",
        description:"If true, even non-matching options will be shown, with configurable \n ${isc.DocUtils.linkForRef('attr:PickList.separatorRows','separator rows')} in between.  Not valid for\n ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource','databound pickLists')}.",
        name:"showAllOptions",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:DynamicForm.validationURL":{
        ref:"attr:DynamicForm.validationURL",
        flags:"IRW",
        description:"validationURL can be set to do server-side validation against a different URL from where\n the form will ultimately save, as part of an incremental upgrade strategy for Struts and\n Struts-like applications.  \n <P>\n If set, calling ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} causes an RPC to be sent to this URL to\n perform server-side validation of the form values.  If the validation fails, the\n validation errors returned by the server are rendered in the form.  If the validation\n succeeds, the form is submitted to the URL specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.action')}.\n <p>\n The form values are available on the server as request parameters (just like a normal form\n submit) and also as the values of a DSRequest sent as an RPC alongside the normal\n submit.\n <p>\n The expected response to this request is a DSResponse sent via the RPC mechanism.  If\n validation is successful, an empty response with the STATUS_SUCCESS status code is\n sufficient.  If there are validation errors, the DSResponse should have the status set to \n STATUS_VALIDATION_ERROR and the errors should be set on the response via the\n addError()/setErrorReport() API on DSResponse.  See the javadoc for DSResponse for\n details.\n <P>\n See the Struts examples in <code>[webroot]/examples/struts</code> for usage examples.",
        name:"validationURL",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null},
            {ref:"method:DynamicForm.submit", description:null}
        ],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "attr:Canvas.width":{
        flags:"IRW",
        getter:["getWidth"],
        type:"attr",
        ref:"attr:Canvas.width",
        description:"Size for this component's horizontal dimension.\n <P>\n Can be a number of pixels, or a percentage like \"50%\". Percentage sizes are resolved to\n pixel values as follows:\n <UL>\n <LI>If a canvas has a specified ${isc.DocUtils.linkForRef('attr:Canvas.percentSource','percentSource')}, sizing will be\n     a percentage of the size of that widget (see also ${isc.DocUtils.linkForRef('attr:Canvas.percentBox')}).</LI>\n <LI>Otherwise, if a canvas has a ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')}, and\n     ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is set for the widget, sizing will be a percentage of\n     the size of that widget (see also ${isc.DocUtils.linkForRef('attr:Canvas.percentBox')}).</LI>\n <LI>Otherwise if this is a child of some other canvas, percentages will be based on the \n     inner size of the ${isc.DocUtils.linkForRef('attr:Canvas.parentElement','parentElement')}'s viewport.</LI>\n <LI>Otherwise, for top level widgets, sizing is calculated as a percentage of page size.</LI>\n </UL>\n <P>\n ${isc.DocUtils.linkForRef('class:Layout','Layouts')} may specially interpret percentage sizes on their children,\n and also allow \"*\" as a size.\n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} is set to \"visible\", this size is a\n minimum, and the component may overflow to show all content and/or children.\n <P>\n If trying to establish a default width for a custom component, set\n ${isc.DocUtils.linkForRef('attr:Canvas.defaultWidth','defaultWidth')} instead.",
        name:"width",
        setter:["setWidth"],
        valueType:"Number or String",
        seeAlso:[],
        defaultValue:"null",
        groups:["sizing"],
        definingClass:"class:Canvas"
    },
    "method:ListGridField.editorEnter":{
        ref:"method:ListGridField.editorEnter",
        flags:"A",
        description:" Callback fired when the user first starts editing a cell.<br>\n\n",
        name:"editorEnter",
        seeAlso:[
            {ref:"method:ListGrid.editorEnter", description:null}
        ],
        params:[
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"value for the cell being edited", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"},
            {description:"ListGrid to which this field belongs", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:ListGrid.groupIndentSize":{
        ref:"attr:ListGrid.groupIndentSize",
        flags:"IRW",
        description:"Default number of pixels by which to indent subgroups relative to parent group.",
        name:"groupIndentSize",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null},
            {ref:"method:ListGrid.getGroupNodeHTML", description:null}
        ],
        valueType:"Number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "classMethod:isc.makeReverseMap":{
        ref:"classMethod:isc.makeReverseMap",
        flags:"",
        description:" Given a key:value map, return a new map as value:key.\n <P>\n If the same value appears more than once, the key will correspond to the last instance of that\n value.\n\n",
        name:"makeReverseMap",
        seeAlso:[],
        params:[
            {description:"object of key:value pairs", optional:false, name:"valueMap", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"reversed value map", type:"object"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "type:SCImgURL":{
        ref:"type:SCImgURL",
        description:"Properties that refer to images by URL, such as ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.icon')}, are\n specially interpreted in SmartClient to allow for simpler and more uniform image URLs,\n and to allow applications to be restructured more easily.\n <P>\n <b>the application image directory</b>\n <P>\n When specifying URLs to image files via SmartClient component properties such as\n ${isc.DocUtils.linkForRef('attr:StretchImg.src')}, any relative path is assumed to be relative to the \"application image\n directory\" (<code>appImgDir</code>).  The application image directory can be set via\n ${isc.DocUtils.linkForRef('classMethod:Page.setAppImgDir')}, and defaults to \"images/\", representing the typical practice of\n placing images in a subdirectory relative to the URL at which the application is accessed.\n <P>\n For applications that may be launched from multiple URLs, the <code>appImgDir</code> can be \n set to the correct relative path to the image directory by calling\n ${isc.DocUtils.linkForRef('classMethod:Page.setAppImgDir')} before any SmartClient components are created.  This enables\n applications or components of an application to be launched from multiple locations, or to\n be relocated, without changing any image URLs supplied to SmartClient components.\n <P>\n <b>the \"[SKIN]\" URL prefix</b>\n <P>\n The special prefix \"[SKIN]\" can be used to refer to images within the skin folder\n whenever image URLs are supplied to SmartClient components.\n <P>\n The value of \"[SKIN]\" is the combination of: \n <ul>\n <li> the \"skin directory\", established in <code>load_skin.js</code> via ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')},\n plus..\n <li> the setting for ${isc.DocUtils.linkForRef('attr:Canvas.skinImgDir','skinImgDir')} on the component where you set an\n image URL property\n </ul>\n <code>skinImgDir</code> defaults to \"images/\", so creating an ${isc.DocUtils.linkForRef('class:Img')} component with\n ${isc.DocUtils.linkForRef('attr:Img.src')} set to \"[SKIN]myButton/button.gif\" will expand to <code>Page.getSkinDir() +\n \"/images/myButton/button.gif\"</code>.\n <P>\n Some components that use a large number of images use <code>skinImgDir</code> to group them\n together and make it possible to relocate all the media for the component with a single setting.\n For example, the ${isc.DocUtils.linkForRef('class:TreeGrid')} class sets <code>skinImgDir</code> to \"images/TreeGrid/\".\n This allows ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} to be set to just \"[SKIN]folder.gif\" but refer to\n <code>Page.getSkinDir() + \"/images/TreeGrid/folder.gif\"</code>.\n <P>\n A custom subclass of TreeGrid can set <code>skinImgDir</code> to a different path, such as \n \"/images/MyTreeGrid\", to source all media from a different location.\n <P>\n TIPS:\n <ul>\n <li> subcomponents may not share the parent component's setting for skinImgDir.  For\n example, the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')} has the default setting for \"skinImgDir\"\n (\"images/\"), so the ${isc.DocUtils.linkForRef('attr:Img.src','src')} property used with this component is set to\n \"[SKIN]/Window/minimize.png\" (in the \"SmartClient\" sample skin).\n <li> for a particular image, the skinImgDir setting on the component may not be\n convenient.  The prefix \"[SKINIMG]\" can be used to refer to <code>Page.getSkinDir() +\n \"/images\"</code> regardless of the setting for <code>skinImgDir</code>\n </ul>\n <B>Stateful image URLs</B>\n <P>\n Many image URLs in SmartClient are \"stateful\", meaning that the actual URL used to fetch an\n image will vary according to the component's state (eg, \"Disabled\"), generally, by adding a\n suffix to the image URL.  See the ${isc.DocUtils.linkForRef('group:skinning','Skinning Overview')} for more\n information on statefulness and the ${isc.DocUtils.linkForRef('attr:Img.src')} documentation for information on how\n stateful image URLs are formed.",
        name:"SCImgURL",
        seeAlso:[],
        type:"type"
    },
    "attr:RPCRequest.containsCredentials":{
        ref:"attr:RPCRequest.containsCredentials",
        flags:"IRWA",
        description:"For use during ${isc.DocUtils.linkForRef('group:relogin','Relogin')}, this property marks this request an attempt to\n login, therefore a response containing the <code>loginRequiredMarker</code> is a normal\n condition and should result in the status code ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_LOGIN_INCORRECT')}\n rather than a call to ${isc.DocUtils.linkForRef('classMethod:RPCManager.loginRequired','loginRequired()')}.\n <P>\n It is not required to set <code>containsCredentials</code>, however, it does typically\n simplify relogin logic by separating the handling of RPCs that are login attempts from RPCs\n that are not.",
        name:"containsCredentials",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["relogin"]
    },
    "attr:Menu.checkmarkImage":{
        ref:"attr:Menu.checkmarkImage",
        flags:"IRWA",
        description:"Default image to display for checkmarked items. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.\n Valid src, width and height must be specified.",
        name:"checkmarkImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:Menu"
    },
    "classMethod:FileLoader.cacheEdgeImages":{
        ref:"classMethod:FileLoader.cacheEdgeImages",
        flags:"",
        description:"\n Caches a set of edge images derived from a base image.\n For example this code:\n <pre>\n isc.FileLoader.cacheEdgeImages(\"/isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6.png\");\n </pre>\n Will cause the following images to be cached:\n <pre>\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TL.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_T.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TR.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_L.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_R.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BL.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_B.png\n /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BR.png\n </pre>\n\n",
        name:"cacheEdgeImages",
        seeAlso:[],
        params:[
            {description:"List of base image URLs from which position-specific edge                                    names are to be derived.  This can either be a\n                                    string with comma separated baseURLs or an Array of baseURLs.", 
             optional:false,name:"baseURLs", defaultValue:null, type:"String or Array"},
            {description:"If true, also causes the center image to be cached.  Default                                    is false.", 
             optional:true,name:"showCenter", defaultValue:null, type:"Boolean"},
            {description:"List of edges to load.  If none specified, The following                                    default list will be used:\n                                    \"TL,T,TR,L,R,BL,B,BR\".  The list of valid values is the\n                                    set of extensions specified by\n                                    ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeImage')}. This can\n                                    either be a string with comma separated edge extension or an\n                                    Array of edge extensions.", 
             optional:true,name:"edges", defaultValue:null, type:"String or Array"},
            {description:"List of colors to cache.  If not specified, no color is                                     specified.  The list of valid colors are those that you have\n                                     specified as ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeColor')}.\n                                    This can either be a string with comma separated colors or an Array\n                                    of colors.", 
             optional:true,name:"colors", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified URLs                                      has completed caching.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "group:layoutMember":{
        ref:"group:layoutMember",
        refs:["method:Canvas.setShowResizeBar", "method:Layout.getMemberOffset", 
         "method:Layout.getMemberDefaultBreadth","attr:Layout.defaultLayoutAlign", "attr:Layout.memberOverlap", "attr:Canvas.layoutAlign", 
         "attr:Canvas.showResizeBar","attr:Canvas.resizeBarTarget", "attr:Canvas.extraSpace", "classAttr:isc.itemIndent", 
         "classAttr:isc.itemStartIndent","classAttr:isc.itemEndIndent", "attr:Canvas.canDropBefore"],
        description:"Properties that can be set on members of a layout to control how the layout is done",
        name:"layoutMember",
        seeAlso:[],
        type:"group"
    },
    "attr:StretchImg.items":{
        ref:"attr:StretchImg.items",
        flags:"IRW",
        description:"The list of images to display as an array of objects specifying the image names and\n sizes.\n <P>\n The \"name\" is appended as a suffix to the ${isc.DocUtils.linkForRef('attr:StretchImg.src')} URL in order to fetch separate\n media files for each image.\n <P>\n The height and width can be set to a number, \"*\" (remaining space, divided amongst all\n images that specify \"*\") or to the name of a property on the StretchImg component, such\n as ${isc.DocUtils.linkForRef('attr:StretchImg.capSize')}.  \n <P>\n Height or width is only used on the axis on which images are stacked.  For example, if\n ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is true, images stack vertically and heights are used to size images on\n the vertical axis, but all images will have width matching the overall component size.\n <P>\n For example, the default setting for <code>items</code>, which is used to produce\n stretchable buttons and headers with fixed-size endcaps, is as follows:\n <pre>\n   items:[\n        {height:\"capSize\", name:\"start\", width:\"capSize\"},\n        {height:\"*\", name:\"stretch\", width:\"*\"},\n        {height:\"capSize\", name:\"end\", width:\"capSize\"}\n   ]\n </pre>",
        name:"items",
        seeAlso:[],
        valueType:"Array of Object",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "attr:FormItem.showErrorStyle":{
        ref:"attr:FormItem.showErrorStyle",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorStyle",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["validation", "appearance"]
    },
    "attr:PickList.optionDataSource":{
        ref:"attr:PickList.optionDataSource",
        flags:"IRA",
        getter:["getOptionDataSource"],
        description:"If set, this FormItem will derive data to show in the PickList by fetching records from\n the specified <code>optionDataSource</code>.  The fetched data will be used as a\n ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the\n ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in\n the loaded records, to derive one valueMap entry per record loaded from the\n optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by\n setting ${isc.DocUtils.linkForRef('attr:PickList.pickListFields')}.\n <P>\n The data will be retrieved via a \"fetch\" operation on the DataSource, passing the \n ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing\n ${isc.DocUtils.linkForRef('attr:PickList.optionFilterContext')} (if set) as DSRequest properties.\n <P>\n The fetch will be triggered when the pickList is first shown, or, you can set\n ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is\n first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually \n trigger a fetch.\n <P>\n Data paging is automatically enabled if the optionDataSource supports it.  As the\n pickList is scrolled by the user, requests for additional data will be automatically\n issued.\n <P>\n For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,\n with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.\n If your dataSource is not capable of filtering results by search criteria (eg the\n dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:PickList.filterLocally')} to have the\n entire dataset loaded up front and filtering performed in the browser.  This disables\n data paging.\n <P>\n Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}\n behaviors, eg, fetching individual display values before the pickList is shown.\n <P>\n Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is <b>also</b> specified\n for the field (either directly in the form item or as part of the field definition in\n the dataSource), it will be preferred to the data derived from the optionDataSource for\n whatever mappings are present.",
        name:"optionDataSource",
        seeAlso:[],
        valueType:"DataSource | String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:ToolStrip.vertical":{
        ref:"attr:ToolStrip.vertical",
        flags:"IRW",
        description:"Indicates whether the components are drawn horizontally from left to right (false), or\n vertically from top to bottom (true).",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ToolStrip",
        groups:["appearance"]
    },
    "method:DynamicForm.addFieldErrors":{
        ref:"method:DynamicForm.addFieldErrors",
        flags:"",
        description:" Adds field validation error[s] to the specified field. Errors passed in will be added\n to any existing errors on the field caused by validation or a previous call to this method.\n <br>\n The errors parameter may be passed in as a string (a single error message), or an array of\n strings.<br>\n The showErrors parameter allows the errors to be displayed immediately. Alternatively, call\n ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')} to display the errors for this field.\n",
        name:"addFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to apply the new errors to", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"errors to apply to the field in question", optional:false, name:"errors", 
             defaultValue:null,type:"string | array of strings"},
            {description:"If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display", 
             optional:false,name:"show", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "attr:DataBoundComponent.updateOperation":{
        ref:"attr:DataBoundComponent.updateOperation",
        flags:"IRW",
        description:"Operation ID this component should use when performing update operations.",
        name:"updateOperation",
        seeAlso:[
            {ref:"attr:DSRequest.operationId", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["operations"]
    },
    "attr:ComboBoxItem.defaultValue":{
        ref:"attr:ComboBoxItem.defaultValue",
        flags:"IRW",
        description:"Static default value for this ComboBoxItem. To default to the first option use\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.defaultToFirstOption')} instead.",
        name:"defaultValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:CubeGrid.hiliteCellList":{
        ref:"method:CubeGrid.hiliteCellList",
        flags:"",
        description:"\n      apply a hilite to an array of cells.\n\n      <br><i>methodType</i> action\n",
        name:"hiliteCellList",
        seeAlso:[],
        params:[
            {description:"cells to hilite", optional:false, name:"cellObjList", defaultValue:null, 
             type:"Array of cell objects"},
            {description:"ID of hilite to apply to cells", optional:false, name:"hiliteID", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true if the cells were successfully hilited.", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hiliting"]
    },
    "attr:MenuItem.checkIf":{
        ref:"attr:MenuItem.checkIf",
        flags:"IR",
        description:"A string of script that is evaluated to a boolean value for the item's checked property\n whenever the menu is shown or a shortcut key is pressed.\n <p>\n If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.checked')} instead.",
        name:"checkIf",
        seeAlso:[],
        valueType:"expression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('menuDynamicItems')}"],
        definingClass:"object:MenuItem",
        groups:["dynamicMenuItem"]
    },
    "method:Canvas.getVisibleHeight":{
        ref:"method:Canvas.getVisibleHeight",
        flags:"A",
        description:"      Return the visible height of the Canvas.\n\n",
        name:"getVisibleHeight",
        seeAlso:[],
        returns:{description:"visible height in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:RestDataSource.transformResponse":{
        ref:"method:RestDataSource.transformResponse",
        flags:"",
        description:" RestDataSource.transformResponse() implemented to extract data and meta-data properties\n from the XML Response provided by the server.<br>\n See ${isc.DocUtils.linkForRef('class:RestDataSource','RestDataSource overview')} for a description of the \n standard data format expected to returned from the server.\n",
        name:"transformResponse",
        seeAlso:[],
        type:"method",
        definingClass:"class:RestDataSource"
    },
    "attr:CubeGrid.canEdit":{
        ref:"attr:CubeGrid.canEdit",
        flags:"IRW",
        description:"Whether cells can be edited in this grid.  Can be override on a per-facetValue basis.",
        name:"canEdit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["cellEditing"]
    },
    "attr:DateChooser.headerStyle":{
        ref:"attr:DateChooser.headerStyle",
        flags:"IRW",
        description:"CSS style applied to the day-of-week headers.",
        name:"headerStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"dateChooserButtonDisabled\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:DateChooser.nextMonthIconHeight":{
        ref:"attr:DateChooser.nextMonthIconHeight",
        flags:"IRW",
        description:"Height of the icon for the next month button",
        name:"nextMonthIconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "group:appearance":{
        ref:"group:appearance",
        refs:["method:GridRenderer.getCellStyle", "method:GridRenderer.cellIsEnabled", 
         "method:GridRenderer.refreshCellStyle","method:GridRenderer.refreshCell", "method:GridRenderer.refreshRow", 
         "method:ListGrid.getCellStyle","method:ListGrid.refreshCellStyle", "method:ListGridField.getFieldTitle", 
         "method:ListGridField.getSummaryTitle","method:ListGrid.refreshCell", "method:ListGrid.refreshRow", "method:TextItem.getHint", 
         "method:CubeGrid.getCellStyle","method:StatefulCanvas.setState", "method:StatefulCanvas.setTitle", 
         "method:Button.setTitle","method:Button.setState", "method:Img.setSrc", "method:Img.resetSrc", 
         "method:StretchImg.setState","method:ImgButton.setTitle", "method:ImgButton.setState", 
         "method:StretchImgButton.setTitle","method:StretchImgButton.setState", "method:Canvas.setPadding", 
         "method:Canvas.setBackgroundColor","method:Canvas.setBackgroundImage", "method:Canvas.setBorder", 
         "method:Canvas.setClassName","method:Canvas.setStyleName", "method:Window.setStatus", "method:Window.setSrc", 
         "method:Window.centerInPage","attr:DetailViewer.recordsPerBlock", "attr:DetailViewer.blockSeparator", 
         "attr:DetailViewer.showEmptyField","attr:DetailViewer.emptyCellValue", "attr:DetailViewer.labelStyle", 
         "attr:DetailViewer.cellStyle","attr:DetailViewer.headerStyle", "attr:DetailViewer.separatorStyle", 
         "attr:ListGrid.styleName","attr:ListGridField.type", "attr:ListGridField.title", "attr:ListGridField.showIf", 
         "attr:ListGridField.summaryTitle","attr:ListGridField.width", "attr:ListGridField.align", 
         "attr:ListGridField.headerBaseStyle","attr:ListGridField.headerTitleStyle", "attr:ListGridField.cellAlign", 
         "attr:ListGridField.baseStyle","attr:ListGrid.bodyBackgroundColor", "attr:ListGrid.bodyStyleName", 
         "attr:ListGrid.leaveScrollbarGap","attr:ListGrid.dateFormatter", "attr:ListGrid.timeFormatter", 
         "attr:ListGrid.editFailedBaseStyle","attr:ListGrid.editFailedCSSText", "attr:ListGrid.editPendingBaseStyle", 
         "attr:ListGrid.editPendingCSSText","attr:ListGrid.recordBaseStyleProperty", "attr:ListGrid.frozenBaseStyle", 
         "attr:ListGrid.showRollOver","attr:ListGrid.selectionType", "attr:ListGrid.showHeader", "attr:ListGrid.headerBarStyle", 
         "attr:ListGrid.headerBackgroundColor","attr:ListGrid.headerButtonConstructor", "attr:ListGrid.headerBaseStyle", 
         "attr:ListGrid.headerTitleStyle","attr:ListGrid.frozenHeaderBaseStyle", "attr:ListGrid.frozenHeaderTitleStyle", 
         "attr:ListGrid.headerButtonDefaults","attr:ListGrid.headerButtonProperties", "attr:ListGrid.sorterConstructor", 
         "attr:ListGrid.sorterDefaults","attr:ListGrid.sorterProperties", "attr:ListGrid.showSortArrow", 
         "attr:ListGrid.skinImgDir","attr:ListGrid.sortAscendingImage", "attr:ListGrid.sortDescendingImage", 
         "attr:TreeGrid.indentSize","attr:DateChooser.firstDayOfWeek", "attr:DynamicForm.longTextEditorThreshold", 
         "attr:DynamicForm.longTextEditorType","attr:DynamicForm.errorOrientation", "attr:FormItem.type", "attr:FormItem.editorType", 
         "attr:FormItem.dateFormatter","attr:FormItem.timeFormatter", "attr:FormItem.visible", "attr:FormItem.disabled", 
         "attr:FormItem.align","attr:FormItem.textAlign", "attr:FormItem.showErrorIcon", "attr:FormItem.showErrorText", 
         "attr:FormItem.showErrorStyle","attr:FormItem.errorOrientation", "attr:FormItem.hint", "attr:FormItem.showHint", 
         "attr:FormItem.showFocused","attr:FormItem.showDisabled", "attr:FormItem.cellStyle", "attr:FormItem.hintStyle", 
         "attr:FormItem.textBoxStyle","attr:FormItem.cellClassName", "attr:FormItem.errorCellClassName", 
         "attr:FormItem.hintClassName","attr:TextItem.width", "attr:TextItem.height", "attr:TextItem.textBoxStyle", 
         "attr:BlurbItem.showTitle","attr:BlurbItem.colSpan", "attr:BlurbItem.textBoxStyle", "attr:BlurbItem.wrap", 
         "attr:BlurbItem.clipValue","attr:ButtonItem.baseStyle", "attr:ButtonItem.showTitle", "attr:SelectItem.height", 
         "attr:SelectOtherItem.separatorTitle","attr:SelectOtherItem.otherTitle", "attr:SelectItem.textBoxStyle", 
         "attr:SelectItem.controlStyle","attr:SelectItem.pickerIconStyle", "attr:SelectItem.showFocused", 
         "attr:SelectItem.multiple","attr:CheckboxItem.titleStyle", "attr:CheckboxItem.textBoxStyle", 
         "attr:CheckboxItem.checkedImage","attr:CheckboxItem.uncheckedImage", "attr:CheckboxItem.unsetImage", 
         "attr:HeaderItem.defaultValue","attr:HeaderItem.showTitle", "attr:HeaderItem.textBoxStyle", "attr:HeaderItem.colSpan", 
         "attr:HeaderItem.startRow","attr:HeaderItem.endRow", "attr:HiddenItem.showTitle", "attr:HiddenItem.colSpan", 
         "attr:HiddenItem.rowSpan","attr:StaticTextItem.wrap", "attr:StaticTextItem.clipValue", 
         "attr:StaticTextItem.textBoxStyle","attr:RadioGroupItem.vertical", "attr:DateItem.textAlign", "attr:DateItem.startDate", 
         "attr:DateItem.endDate","attr:DateItem.centuryThreshold", "attr:SpacerItem.showTitle", "attr:SpacerItem.width", 
         "attr:SpacerItem.height","attr:RowSpacerItem.showTitle", "attr:RowSpacerItem.colSpan", 
         "attr:RowSpacerItem.startRow","attr:RowSpacerItem.endRow", "attr:TextAreaItem.wrap", "attr:TextAreaItem.width", 
         "attr:TextAreaItem.height","attr:TextAreaItem.textBoxStyle", "attr:ToolbarItem.showTitle", 
         "attr:ToolbarItem.startRow","attr:ToolbarItem.endRow", "attr:ToolbarItem.colSpan", "attr:ToolbarItem.buttonBaseStyle", 
         "attr:CubeGrid.styleName","attr:CubeGrid.bodyStyleName", "attr:CubeGrid.alternateRecordStyles", 
         "attr:StatefulCanvas.align","attr:StatefulCanvas.valign", "attr:Button.align", "attr:Button.valign", "attr:Img.src", 
         "attr:Img.activeAreaHTML","attr:Img.imageType", "attr:StretchImg.vertical", "attr:StretchImg.capSize", 
         "attr:StretchImg.src","attr:StretchImg.hSrc", "attr:StretchImg.vSrc", "attr:StretchImg.imageType", 
         "attr:StretchImg.items","attr:Progressbar.percentDone", "attr:Progressbar.length", "attr:Progressbar.breadth", 
         "attr:Progressbar.vertical","attr:Progressbar.src", "attr:Toolbar.vertical", "attr:Toolbar.buttonConstructor", 
         "attr:Toolbar.buttonDefaults","attr:ToolStrip.styleName", "attr:ToolStrip.vertical", "attr:ImgButton.align", 
         "attr:ImgButton.valign","attr:ImgButton.src", "attr:StretchImgButton.align", "attr:StretchImgButton.valign", 
         "attr:StretchImgButton.vertical","attr:StretchImgButton.capSize", "attr:Scrollbar.btnSize", "attr:Scrollbar.showCorner", 
         "attr:Scrollbar.allowThumbDownState","attr:Scrollbar.showTrackEnds", "attr:Splitbar.src", "attr:Splitbar.hSrc", 
         "attr:Splitbar.vSrc","attr:Splitbar.capSize", "attr:ImgSplitbar.src", "attr:Canvas.autoShowParent", 
         "attr:Canvas.visibility","attr:Canvas.className", "attr:Canvas.styleName", "attr:Canvas.margin", 
         "attr:Canvas.padding","attr:Canvas.border", "attr:Canvas.backgroundColor", "attr:Canvas.backgroundImage", 
         "attr:Canvas.backgroundRepeat","attr:ImgTab.capSize", "attr:Window.modalMask", "attr:Window.showModalMask", 
         "attr:Window.modalMaskOpacity","attr:Window.modalMaskStyle", "attr:Window.autoCenter", "attr:Window.showBody", 
         "attr:Window.bodyStyle","attr:Window.bodyColor", "attr:Window.hiliteBodyColor", "attr:Window.items", 
         "attr:Window.src","attr:Window.contentsType", "attr:Window.bodyConstructor", "attr:Window.bodyDefaults", 
         "attr:Window.contentLayout","attr:Window.autoSize", "attr:Window.showHeader", "attr:Window.showHeaderBackground", 
         "attr:Window.headerStyle","attr:Window.headerSrc", "attr:Window.hiliteHeaderStyle", "attr:Window.hiliteHeaderSrc", 
         "attr:Window.showTitle","attr:Window.title", "attr:Window.headerLabelDefaults", "attr:Window.showHeaderIcon", 
         "attr:Window.headerIconDefaults","attr:Window.showCloseButton", "attr:Window.showMinimizeButton", "attr:Window.minimized", 
         "attr:Window.defaultMinimizeHeight","attr:Window.minimizeHeight", "attr:Window.animateMinimize", "attr:Window.minimizeTime", 
         "attr:Window.minimizeAcceleration","attr:Window.maximized", "attr:Window.showMaximizeButton", "attr:Window.showFooter", 
         "attr:Window.footerHeight","attr:Window.showStatusBar", "attr:Window.showResizer", "attr:Dialog.styleName", 
         "attr:Dialog.showToolbar","type:SortArrow", "type:FormItemBaseStyle", "type:Alignment", "type:VerticalAlignment", 
         "type:Direction","type:ImageStyle", "type:CSSStyleName"],
        description:"Properties defining an object's apperance",
        name:"appearance",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.transferSelectedData":{
        ref:"method:ListGrid.transferSelectedData",
        flags:"",
        description:" Simulates a drag / drop type transfer of the selected records in some other grid to this\n listGrid, without requiring any user interaction.<br>\n See the ${isc.DocUtils.linkForRef('group:dragging')} documentation for an overview of list grid drag/drop data\n transfer.\n",
        name:"transferSelectedData",
        seeAlso:[],
        params:[
            {description:"source grid from which the records will be tranferred", optional:false, 
             name:"sourceGrid",defaultValue:null, type:"ListGrid"},
            {description:"target index (drop position) of the rows within this grid.", optional:true, 
             name:"index",defaultValue:null, type:"integer"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragListMove')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "method:SelectItem.getSelectedRecord":{
        ref:"method:SelectItem.getSelectedRecord",
        flags:"",
        description:" Returns the entire record object associated with the current value for this item\n (or null if no matching record exists in the PickList data).<br>\n Most commonly used for databound pickListItems to retrieve the values of other fields\n in the record\n\n",
        name:"getSelectedRecord",
        seeAlso:[],
        returns:{description:"record object", type:"object"},
        type:"method",
        definingClass:"class:SelectItem"
    },
    "attr:TabBar.baseLineThickness":{
        ref:"attr:TabBar.baseLineThickness",
        flags:"IR",
        description:"Thickness of the baseLine, in pixels.  This should be set to match the media specified\n by ${isc.DocUtils.linkForRef('attr:TabBar.baseLineSrc')}.  The baseLineThickness also determines the degree of overlap with\n the TabSet's paneContainer when using decorative edges - see ${isc.DocUtils.linkForRef('attr:TabSet.paneContainer')}\n for details.",
        name:"baseLineThickness",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:TabBar",
        groups:["baseLine"]
    },
    "classMethod:isA.nonemptyString":{
        ref:"classMethod:isA.nonemptyString",
        flags:"",
        description:"\n	Is <code>object</code> a non-empty String?<br><br>\n	\n",
        name:"nonemptyString",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a non-empty string", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "method:FormItem.getValueIcon":{
        ref:"method:FormItem.getValueIcon",
        flags:"",
        description:" If specified this stringMethod allows the developer to specify the image source for an \n icon to be displayed for the current form item value. \n Takes presidence over ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')}\n",
        name:"getValueIcon",
        seeAlso:[],
        params:[
            {description:"value of the item for which an item should be returned.", optional:false, 
             name:"value",defaultValue:null, type:"any"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:ResultSet.criteriaPolicy":{
        ref:"attr:ResultSet.criteriaPolicy",
        flags:"IRWA",
        description:"Decides under what conditions the cache should be dropped when the ${isc.DocUtils.linkForRef('type:Criteria')}\n changes",
        name:"criteriaPolicy",
        seeAlso:[
            {ref:"type:Criteria", description:null},
            {ref:"attr:DataSource.criteriaPolicy", description:null}
        ],
        valueType:"CriteriaPolicy",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "attr:TreeGrid.indentSize":{
        ref:"attr:TreeGrid.indentSize",
        flags:"IRW",
        description:"The amount of indentation (in pixels) to add to a node's icon/title for each level\n          down in this tree's hierarchy.",
        name:"indentSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["appearance"]
    },
    "method:GridRenderer.cellIsEnabled":{
        ref:"method:GridRenderer.cellIsEnabled",
        flags:"A",
        description:" Whether this cell should be considered enabled.  Affects whether events will fire for the\n cell, and the default styling behavior in getCellStyle. \n\n",
        name:"cellIsEnabled",
        seeAlso:[],
        params:[
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether this record is enabled or not", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["selection", "appearance"]
    },
    "attr:GridRenderer.recordCustomStyleProperty":{
        ref:"attr:GridRenderer.recordCustomStyleProperty",
        flags:"IRW",
        description:"Denotes the name of a property that can be set on records to display a custom style.\n For example if this property is set to <code>\"customStyle\"</code>, setting \n <code>record.customStyle</code> to a css styleName will cause the record in question to\n render out with that styling applied to it.  Note that this will be a static \n style - it will not be modified as the state of the record (selected / over etc) changes.",
        name:"recordCustomStyleProperty",
        seeAlso:[
            {ref:"method:GridRenderer.getCellStyle", description:null}
        ],
        valueType:"\"customStyle\"",
        defaultValue:"string",
        type:"attr",
        definingClass:"class:GridRenderer"
    },
    "attr:Layout.align":{
        ref:"attr:Layout.align",
        flags:"IRW",
        description:"Alignment of all members in this Layout on the length axis.  Defaults to \"top\" for\n vertical Layouts, and \"left\" for horizontal Layouts.",
        name:"align",
        seeAlso:[],
        valueType:"Alignment or VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "method:StatefulCanvas.getActionType":{
        ref:"method:StatefulCanvas.getActionType",
        flags:"A",
        description:" Return the 'actionType' for this canvas (radio / checkbox / button)\n",
        name:"getActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state", "event handling"]
    },
    "method:CubeGrid.getEventRow":{
        ref:"method:CubeGrid.getEventRow",
        flags:"",
        description:" Returns the row number of the most recent mouse event.\n",
        name:"getEventRow",
        seeAlso:[],
        params:[
            {description:"optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event", 
             optional:false,name:"y", defaultValue:null, type:"number"}
        ],
        returns:{description:"row number, or -2 if beyond last drawn row", type:"number"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events", "selection"]
    },
    "attr:TreeGrid.cantDragIntoSelfMessage":{
        ref:"attr:TreeGrid.cantDragIntoSelfMessage",
        flags:"IR",
        description:"Message displayed when user attempts to drop a dragged node onto itself.",
        name:"cantDragIntoSelfMessage",
        seeAlso:[
            {ref:"attr:TreeGrid.canDragRecordsOut", description:null},
            {ref:"attr:TreeGrid.canAcceptDroppedRecords", description:null},
            {ref:"attr:TreeGrid.canReorderRecords", description:null}
        ],
        valueType:"String",
        defaultValue:"\"You can't drag an item into itself.\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["i18nMessages"]
    },
    "attr:DynamicForm.fixedColWidths":{
        ref:"attr:DynamicForm.fixedColWidths",
        flags:"IRW",
        description:"If true, we ensure that column widths are at least as large as you specify them.  This\n means that if any single column overflows (due to, eg, a long unbreakable title),\n the form as a whole overflows.\n <P>\n If false, columns will have their specified sizes as long as no column overflows.  If\n any column overflows, space will be taken from any other columns that aren't filling the\n available room, until there is no more free space, in which case the form as a whole\n overflows.",
        name:"fixedColWidths",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "attr:ListGrid.valueIconSize":{
        ref:"attr:ListGrid.valueIconSize",
        flags:"IRW",
        description:"Default width and height of value icons for this ListGrid.\n Can be overridden at the listGrid level via explicit ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconHeight')}, or at the field level via ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconSize')},\n ${isc.DocUtils.linkForRef('attr:ListGridField.valueIconWidth')} and {ListGridField.valueIconHeight}",
        name:"valueIconSize",
        seeAlso:[
            {ref:"attr:ListGrid.valueIconWidth", description:null},
            {ref:"attr:ListGrid.valueIconHeight", description:null},
            {ref:"attr:ListGridField.valueIconSize", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:CubeGrid.facetValueHoverHeight":{
        ref:"attr:CubeGrid.facetValueHoverHeight",
        flags:"IRWA",
        description:"If specified and <code>this.showHover</code> is true, this is the default height to apply\n to hover tips shown for facetValues. If unset, hover canvas will be sized to \n <code>this.hoverHeight</code> if specified instead.",
        name:"facetValueHoverHeight",
        seeAlso:[
            {ref:"attr:Canvas.hoverHeight", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:Tree.openFolder":{
        ref:"method:Tree.openFolder",
        flags:"",
        description:"\n Open a particular node\n\n",
        name:"openFolder",
        seeAlso:[
            {ref:"method:ResultTree.dataArrived", description:null}
        ],
        params:[
            {description:"node to open", optional:false, name:"node", defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Window.header":{
        ref:"attr:Window.header",
        flags:"R",
        description:"Header for the Window, based on an HLayout",
        name:"header",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:Canvas.showShadow":{
        flags:"IR",
        type:"attr",
        ref:"attr:Canvas.showShadow",
        description:"Whether to show a drop shadow for this Canvas",
        name:"showShadow",
        setter:["setShowShadow"],
        valueType:"boolean",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('shadows')}"],
        defaultValue:"false",
        groups:["shadow"],
        definingClass:"class:Canvas"
    },
    "class:SpinnerItem":{
        methods:[],
        ref:"class:SpinnerItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:SpinnerItem.step", "attr:SpinnerItem.max", "attr:SpinnerItem.min"],
        description:"Item for picking a number. Includes arrow buttons to increase / decrease the value",
        name:"SpinnerItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('spinnerItem')}"]
    },
    "classMethod:isc.warn":{
        ref:"classMethod:isc.warn",
        flags:"",
        description:" Show a modal dialog with a message, icon, and \"OK\" button.\n <P>\n The callback will receive boolean true for an OK button click, or null if the Dialog is\n dismissed via the close button.\n\n",
        name:"warn",
        seeAlso:[
            {ref:"classAttr:Dialog.Warn", description:null},
            {ref:"classMethod:isc.say", description:null},
            {ref:"classMethod:isc.ask", description:null},
            {ref:"method:Dialog.okClick", description:null},
            {ref:"classAttr:Dialog.WARN_TITLE", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"Optional Callback to fire when the user                                       dismisses the dialog. This has the single parameter\n                                      'value', indicating the value returned by the Warn\n                                      dialog from 'okClick()' etc.", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for\n                                      the Dialog, set properties.buttons to an array of buttons\n										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "method:FacetValue.getCellValue":{
        ref:"method:FacetValue.getCellValue",
        flags:"",
        description:" Callout to determine custom value to display for cells displayed for this facetValue\n <P>\n Can only be set on the ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId','metric facet')}, or if no metric facet\n is specified, on the innermost column facet.\n\n",
        name:"getCellValue",
        seeAlso:[],
        params:[
            {description:"this facetValue's CubeGrid", optional:false, name:"viewer", defaultValue:null, 
             type:"CubeGrid"},
            {description:"cell record", optional:false, name:"record", defaultValue:null, type:"object"},
            {description:"row value for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column value for the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"HTML to display", type:"string"},
        type:"method",
        definingClass:"class:FacetValue"
    },
    "group:dragdrop":{
        ref:"group:dragdrop",
        refs:["method:Canvas.setDragTracker", "method:Canvas.willAcceptDrop", 
         "method:Canvas.getHSnapPosition","method:Canvas.getVSnapPosition", "method:Canvas.shouldSnapOnDrop", 
         "classMethod:EventHandler.getDragRect","classMethod:Canvas.getEventEdge", "attr:GridRenderer.snapToCells", 
         "attr:GridRenderer.snapInsideBorder","attr:TreeGrid.canDragRecordsOut", "attr:TreeGrid.canAcceptDroppedRecords", 
         "attr:TreeGrid.canReorderRecords","attr:TreeGrid.canReparentNodes", "attr:TreeGrid.manyItemsImage", 
         "attr:Layout.canDropComponents","attr:Layout.dropLineThickness", "attr:Layout.showDragPlaceHolder", 
         "attr:Layout.placeHolderProperties","attr:Layout.placeHolderDefaults", "attr:Canvas.canDrag", "attr:Canvas.dragStartDistance", 
         "attr:Canvas.dragIntersectStyle","attr:Canvas.canDragReposition", "attr:Canvas.dragRepositionCursor", 
         "attr:Canvas.canDragResize","attr:Canvas.resizeFrom", "attr:Canvas.edgeCursorMap", "attr:Canvas.keepInParentRect", 
         "attr:Canvas.dragAppearance","attr:Canvas.dragType", "attr:Canvas.dragTarget", "attr:Canvas.showDragShadow", 
         "attr:Canvas.dragOpacity","attr:Canvas.canDrop", "attr:Canvas.canAcceptDrop", "attr:Canvas.dropTypes", 
         "attr:Canvas.snapToGrid","attr:Canvas.snapResizeToGrid", "attr:Canvas.childrenSnapToGrid", 
         "attr:Canvas.childrenSnapResizeToGrid","attr:Canvas.snapHGap", "attr:Canvas.snapVGap", "attr:Canvas.snapHDirection", 
         "attr:Canvas.snapVDirection","attr:Canvas.snapAxis", "attr:Canvas.snapOnDrop", "attr:Window.keepInParentRect", 
         "type:DragAppearance"],
        description:"Dragging objects and dropping them onto other objects",
        name:"dragdrop",
        seeAlso:[],
        type:"group"
    },
    "method:ValuesManager.getFieldErrors":{
        ref:"method:ValuesManager.getFieldErrors",
        flags:"",
        description:" Returns any validation errors for some field in this valuesManager.\n Errors will be returned as either a string (a single error message), or an array \n of strings. If no errors are present, will return null.\n",
        name:"getFieldErrors",
        seeAlso:[],
        params:[
            {description:"fieldName to check for errors", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"error messages for the field passed in", type:"string | array of strings"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:ListGridField.canToggle":{
        ref:"attr:ListGridField.canToggle",
        flags:"IRWA",
        description:"Allows a boolean or ${isc.DocUtils.linkForRef('attr:ListGridField.valueMap','valueMapped')} field to be edited by simply clicking on\n it to cycle values.\n <P>\n To enable this feature, ${isc.DocUtils.linkForRef('attr:ListGrid.canEdit')} must be set to true.\n <P>\n If ${isc.DocUtils.linkForRef('attr:ListGrid.editEvent')} is set to \"click\", when the user clicks on the field, \n the value will be toggled, and inline editing will be triggered as usual.<br>\n Otherwise the toggled value will be saved immediately to the server, or if \n ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')} has been set to false, will be stored as an edit value\n for the record.",
        name:"canToggle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:Window.addItem":{
        ref:"method:Window.addItem",
        flags:"A",
        description:"			Adds a widget to the window. \n",
        name:"addItem",
        seeAlso:[],
        params:[
            {description:"the widget to be added", optional:false, name:"item", defaultValue:null, 
             type:"Canvas"}
        ],
        returns:{description:"array of widgets added", type:"array"},
        type:"method",
        definingClass:"class:Window",
        groups:["windowItems"]
    },
    "attr:FormItem.defaultIconSrc":{
        ref:"attr:FormItem.defaultIconSrc",
        flags:"IRWA",
        description:"Default icon image source.     \n Specify as the partial URL to an image, relative to the imgDir of this component.\n To specify image source for a specific icon use the <code>icon.src</code> property.<br>\n If this item is drawn in the disabled state, the url will be modified by adding \n \"_Disabled\" to get a disabled state image for the icon.\n If <code>icon.showOver</code> is true, this url will be modified by adding \"_Over\" to get\n an over state image for the icon.",
        name:"defaultIconSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/default_formItem_icon.gif\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "method:SelectItem.fetchData":{
        ref:"method:SelectItem.fetchData",
        flags:"",
        description:" Only applies to databound items (see ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')}).<br>\n Performs a fetch type operation on this item's DataSource to retrieve the set of valid\n options for the item, based on the current ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')}.\n",
        name:"fetchData",
        seeAlso:[],
        params:[
            {description:"Callback to fire when the fetch completes. Callback will               fire with 2 parameters: <code>item</code> a pointer to the form item and\n              <code>dsResponse</code> the ${isc.DocUtils.linkForRef('class:DSResponse')} returned by the server.", 
             optional:false,name:"callback", defaultValue:null, type:"callback"},
            {description:"properties to apply to the              dsRequest for this fetch.", 
             optional:false,name:"requestProperties", defaultValue:null, type:"dsRequest properties"}
        ],
        type:"method",
        definingClass:"class:SelectItem"
    },
    "class:FileItem":{
        methods:[],
        ref:"class:FileItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:[],
        description:"Binary data interface for use in DynamicForms. Allows users to select a single file for upload",
        name:"FileItem",
        seeAlso:[],
        type:"class",
        groups:["upload"]
    },
    "attr:Button.showFocused":{
        ref:"attr:Button.showFocused",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  If\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is <code>true</code>, the <b><code>\"over\"</code></b>\n will be used to indicate focus. Otherwise a separate <b><code>\"focused\"</code></b> state\n will be used.",
        name:"showFocused",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["state"]
    },
    "attr:ListGridField.showValueIconOnly":{
        ref:"attr:ListGridField.showValueIconOnly",
        flags:"IRW",
        description:"If this field has a valueIcons property specified, setting this property causes \n the valueIcon for each value to be displayed in the cell without also showing the\n record's value for the field.\n If unset the default behavior is to show the icon only if an explicit valueMap is\n specified as well in addition to a valueIcons map, otherwise show both the valueIcon and\n value for the cell.<br>\n Note that if this field is editable ${isc.DocUtils.linkForRef('attr:FormItem.showValueIconOnly')} will be passed\n through to editors displayed in this field.",
        name:"showValueIconOnly",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null},
            {ref:"attr:ListGridField.suppressValueIcon", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "method:GridRenderer.rowContextClick":{
        ref:"method:GridRenderer.rowContextClick",
        flags:"A",
        description:" Called when a row receives a contextclick event.\n",
        name:"rowContextClick",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:ListGrid.getEditedRecord":{
        ref:"method:ListGrid.getEditedRecord",
        flags:"",
        description:" Returns the combination of unsaved edits (if any) and original values (if any) for a given\n row being edited.\n <P>\n The returned value is never null, and can be freely modified.\n\n",
        name:"getEditedRecord",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"valuesID", defaultValue:null, type:"number | Object"}
        ],
        returns:{description:"A copy of the record with unsaved edits included", type:"Object"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Tree.lastIndexOf":{
        ref:"method:Tree.lastIndexOf",
        flags:"",
        description:" Return the position in the list of the last instance of the specified object.\n <p>\n If pos is specified, starts looking before that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"lastIndexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"earliest index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"class:Tree",
        groups:["access"]
    },
    "method:FormItem.show":{
        ref:"method:FormItem.show",
        flags:"I",
        description:" Show this form item.\n <BR><BR>\n This will cause the form to redraw.  If this item had an item.showIf expression, it will\n be destroyed.\n",
        name:"show",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem"
    },
    "attr:ListGridField.escapeKeyEditAction":{
        ref:"attr:ListGridField.escapeKeyEditAction",
        flags:"IRW",
        description:"What to do when a user hits escape while editing this field?<br>\n Overrides the <code>escapeKeyEditAction</code> as specified at the listGrid level while \n focus is in this field.",
        name:"escapeKeyEditAction",
        seeAlso:[],
        valueType:"EscapeKeyEditAction",
        defaultValue:"\"cancel\"",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "group:basics":{
        ref:"group:basics",
        refs:["attr:DetailViewer.data", "attr:FormItem.name", "attr:FormItem.title", 
         "attr:FormItem.defaultValue","attr:FormItem.ID", "attr:FormItem.prompt", "attr:DateItem.useTextField", 
         "attr:DataSourceField.name","attr:DataSourceField.type", "attr:StatefulCanvas.title", "attr:Button.title", 
         "attr:Button.wrap","attr:ImgButton.title", "attr:StretchImgButton.title", "attr:Canvas.ID"],
        description:"Basic definition of a DataSource field",
        name:"basics",
        seeAlso:[],
        type:"group"
    },
    "method:List.last":{
        ref:"method:List.last",
        flags:"",
        description:" Return the last item in this list\n\n",
        name:"last",
        seeAlso:[],
        returns:{description:"last item in the list", type:"any"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "group:viewState":{
        ref:"group:viewState",
        refs:["method:ListGrid.getFieldState", "method:ListGrid.setFieldState", 
         "method:ListGrid.getSelectedState","method:ListGrid.setSelectedState", "method:ListGrid.getSortState", 
         "method:ListGrid.setSortState","method:ListGrid.getViewState", "method:ListGrid.setViewState", 
         "method:TreeGrid.getOpenState","method:TreeGrid.setOpenState", "method:TreeGrid.getSelectedPaths", 
         "method:TreeGrid.setSelectedPaths","method:TreeGrid.getViewState", "method:TreeGrid.setViewState", "type:listGridFieldState", 
         "type:listGridSelectedState","type:listGridSortState", "type:listGridViewState", "type:treeGridOpenState", 
         "type:treeGridViewState"],
        name:"viewState",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.groupByField":{
        ref:"attr:ListGrid.groupByField",
        flags:"IR",
        description:"List of fields to group grid records. If only a single field is used, that field\n may be specified as a string. After initialization, use ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')} \n to update the grouping field list, instead of modifying groupByField directly.",
        name:"groupByField",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"String or Array of String",
        defaultValue:"see below",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dynamicGrouping')}"],
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "method:ListGrid.refreshRow":{
        ref:"method:ListGrid.refreshRow",
        flags:"",
        description:" Refresh an entire row of cells without redrawing the grid.\n <P>\n The cells' values, CSS classes, and CSS text will be refreshed, to the current values\n returned by getCellValue(), getCellStyle() and getCellCSSText() respectively.\n\n",
        name:"refreshRow",
        seeAlso:[
            {ref:"method:ListGrid.refreshCellStyle", description:"to update just styling"},
            {ref:"method:ListGrid.refreshCell", description:null}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:StretchImgButton.showDisabledIcon":{
        ref:"attr:StretchImgButton.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "method:Array.findNextIndex":{
        ref:"method:Array.findNextIndex",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:Array.findIndex')}, but inspects a range from startIndex to endIndex.\n\n",
        name:"findNextIndex",
        seeAlso:[],
        params:[
            {description:"first index to consider", optional:false, name:"startIndex", 
             defaultValue:null,type:"int"},
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"endIndex", defaultValue:null, 
             type:"int"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"object:Array",
        groups:["access", "find"]
    },
    "classMethod:Class.isA":{
        ref:"classMethod:Class.isA",
        flags:"",
        description:"\n Returns whether this class object is the provided class or is a subclass of the provided\n class, or implements the provided interface.\n\n",
        name:"isA",
        seeAlso:[],
        params:[
            {description:"Class name to test against", optional:false, name:"className", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true == this Class is a subclass of the provided classname", type:"boolean"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "method:Slider.getValue":{
        ref:"method:Slider.getValue",
        flags:"",
        description:" Returns the current slider value.\n\n",
        name:"getValue",
        seeAlso:[],
        returns:{description:"current slider value", type:"float"},
        type:"method",
        definingClass:"class:Slider"
    },
    "attr:StretchImgButton.iconOrientation":{
        ref:"attr:StretchImgButton.iconOrientation",
        flags:"IR",
        description:"If this button is showing an icon should it appear to the left or right of the title?\n valid options are <code>\"left\"</code> and <code>\"right\"</code>.",
        name:"iconOrientation",
        setter:["setIconOrientation"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"left\"",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "group:textDirection":{
        ref:"group:textDirection",
        refs:[],
        name:"textDirection",
        seeAlso:[],
        type:"group"
    },
    "attr:DataSourceField.name":{
        ref:"attr:DataSourceField.name",
        flags:"IR",
        description:"Name for this field.  \n <p>\n The field name is also the property in each DataSource record which holds the value for this\n field.\n <P>\n Must be unique across all fields within the DataSource.",
        name:"name",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["basics"]
    },
    "attr:RestDataSource.jsonRecordXPath":{
        ref:"attr:RestDataSource.jsonRecordXPath",
        flags:"IR",
        description:"<code>recordXPath</code> mapping to the data node of json returned by the server.\n Applies if this.dataFormat is set to <code>\"json\"</code><br>\n The default value will pick up data from a response structured as follows:<br>\n <pre>\n {response:\n  {status:0,\n   data:[\n      {field1:\"value\", field2:\"value\"},\n      {field1:\"value\", field2:\"value\"}\n   ]\n }\n </pre>",
        name:"jsonRecordXPath",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"/response/data\"",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "attr:Canvas.animateResizeTime":{
        ref:"attr:Canvas.animateResizeTime",
        flags:"IRWA",
        description:"Default time for performing an animated resize.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateResizeTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "class:RPCResponse":{
        methods:[],
        ref:"class:RPCResponse",
        classAttrs:["classAttr:RPCResponse.STATUS_SUCCESS", "classAttr:RPCResponse.STATUS_FAILURE", 
         "classAttr:RPCResponse.STATUS_VALIDATION_ERROR","classAttr:RPCResponse.STATUS_LOGIN_INCORRECT", 
         "classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED","classAttr:RPCResponse.STATUS_LOGIN_REQUIRED", 
         "classAttr:RPCResponse.STATUS_LOGIN_SUCCESS","classAttr:RPCResponse.STATUS_TRANSPORT_ERROR", 
         "classAttr:RPCResponse.STATUS_SERVER_TIMEOUT"],
        classMethods:[],
        treeLocation:["Client Reference/RPC"],
        attrs:["attr:RPCResponse.data", "attr:RPCResponse.status", "attr:RPCResponse.httpResponseCode", 
         "attr:RPCResponse.clientContext","attr:RPCResponse.transactionNum"],
        description:"Encapsulates an RPC response from the server.  Instances of this class are automatically created\n and optionally passed to you in the callback you specify as part of your RPCRequest.",
        name:"RPCResponse",
        seeAlso:[
            {ref:"class:RPCRequest", description:null},
            {ref:"type:RPCCallback", description:null}
        ],
        type:"class"
    },
    "method:Canvas.getTop":{
        ref:"method:Canvas.getTop",
        flags:"",
        description:"			Return the top coordinate of this object, relative to its enclosing context, in pixels.\n",
        name:"getTop",
        seeAlso:[],
        returns:{description:"top coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:DetailViewer.showEmptyMessage":{
        ref:"attr:DetailViewer.showEmptyMessage",
        flags:"IRWA",
        description:"Show ${isc.DocUtils.linkForRef('attr:DetailViewer.emptyMessage')} when there is no data to display?",
        name:"showEmptyMessage",
        seeAlso:[
            {ref:"attr:DetailViewer.emptyMessage", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["emptyMessage"]
    },
    "attr:CubeGrid.facetLabelHoverStyle":{
        ref:"attr:CubeGrid.facetLabelHoverStyle",
        flags:"IRWA",
        description:"Allows the developer to override the css class applied to  hover tips shown for\n facet labels.  If unspecified, and <code>this.hoverStyle</code> is not null, that \n css class will be applied to facet label hovers instead.",
        name:"facetLabelHoverStyle",
        seeAlso:[
            {ref:"attr:Canvas.hoverStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "attr:Canvas.padding":{
        ref:"attr:Canvas.padding",
        flags:"IRW",
        description:"Set the CSS padding of this component, in pixels.  Padding provides space between the\n border and the component's contents.\n <P>\n This property sets the same thickness of padding on every side.  Differing per-side\n padding can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.\n <P>\n Note that CSS padding does not affect the placement of ${isc.DocUtils.linkForRef('attr:Canvas.children')}.  To\n provide a blank area around children, either use ${isc.DocUtils.linkForRef('attr:Canvas.margin','CSS margins')} or use\n a ${isc.DocUtils.linkForRef('class:Layout')} as the parent instead, and use properties such as\n ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')} to create blank space.",
        name:"padding",
        setter:["setPadding"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:Canvas.dropMove":{
        ref:"method:Canvas.dropMove",
        flags:"A",
        description:"\n Executed whenever the compatible dragged object is moved over this drop target. You\n can use this to show a custom visual indication of where the drop would occur within the\n widget.\n\n",
        name:"dropMove",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customDrag')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "classAttr:Dialog.Warn":{
        ref:"classAttr:Dialog.Warn",
        flags:"A",
        description:"A singleton Dialog instance that will show text to the user and provide buttons for their\n response.  The Dialog will expand to show all the text that you put into it.<br>\n This can be used in cases where a developer would alternatively make use of the native\n JavaScript <code>alert()</code> and <code>confirm()</code> methods.  The main differences\n between those methods and using the Warn object are:<br>\n - The Warn object can be customized by modifying which buttons are visible, the style \n   applied to it, etc.<br>\n - The <code>isc.ask()</code> and <code>isc.warn()</code> methods are asynchronous - rather \n   than returning a value indicating the user's response, a callback method will be fired\n   when the user interacts with the dialog.<br><br>\n\n Notes:<br>\n  Because this is a singleton object, properties set on the Warn object directly will persist \n  each time it is shown.<br>\n  Developers should use the <code>warn()</code> or <code>ask()</code> methods to show and\n  hide this object rather than manipulating the Dialog directly.",
        name:"Warn",
        seeAlso:[
            {ref:"classMethod:isc.warn", description:null},
            {ref:"classMethod:isc.ask", description:null}
        ],
        valueType:"object",
        defaultValue:"dialog instance properties",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["Prompting"]
    },
    "method:ListGrid.setFieldError":{
        ref:"method:ListGrid.setFieldError",
        flags:"",
        description:" Set a validation error for some cell.\n",
        name:"setFieldError",
        seeAlso:[
            {ref:"method:ListGrid.getCellErrors", description:null},
            {ref:"method:ListGrid.setRowErrors", description:null}
        ],
        params:[
            {description:"row index of cell to add validation error for", optional:false, 
             name:"rowNum",defaultValue:null, type:"number"},
            {description:"col index or field name of cell to add validation error for", 
             optional:false,name:"fieldName", defaultValue:null, type:"number | string"},
            {description:"validation error/errors for the cell.", optional:false, name:"errorMessage", 
             defaultValue:null,type:"string | array of strings"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:ComboBoxItem.displayField":{
        ref:"attr:ComboBoxItem.displayField",
        flags:"IRWA",
        getter:["FormItem.getDisplayFieldName"],
        description:"Specifies an alternative field from which display values should be retrieved for this\n item.<br>\n If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound \n to the same dataSource as the form as a whole, this is implemented by picking up the\n value of the specified field from the Form's values object.<br>\n Otherwise this item will attempt to map its underlying value to a display value\n by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the \n ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the \n <code>displayField</code> value from that record.<br>\n This essentially enables the specified <code>optionDataSource</code> to be used as\n a server based ${isc.DocUtils.linkForRef('group:valueMap')}.",
        name:"displayField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem",
        groups:["display_values"]
    },
    "method:StatefulCanvas.setTitle":{
        ref:"method:StatefulCanvas.setTitle",
        flags:"",
        description:" Set the title.\n",
        name:"setTitle",
        seeAlso:[],
        params:[
            {description:"new title", optional:false, name:"newTitle", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["appearance"]
    },
    "attr:HeaderItem.startRow":{
        ref:"attr:HeaderItem.startRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "attr:FormItem.errorIconSrc":{
        ref:"attr:FormItem.errorIconSrc",
        flags:"IRW",
        description:"URL of the image to show as an error icon, if we're showing icons when validation\n errors occur.",
        name:"errorIconSrc",
        seeAlso:[
            {ref:"attr:FormItem.showErrorIcon", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/validation_error_icon.png\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["errorIcon"]
    },
    "classMethod:ClassFactory.newInstance":{
        ref:"classMethod:ClassFactory.newInstance",
        flags:"",
        description:"\n Given the name of a class, create an instance of that class.\n	\n",
        name:"newInstance",
        seeAlso:[],
        params:[
            {description:"Name of a class.							(ClassObject)	Actual class object to use.", 
             optional:false,name:"className", defaultValue:null, type:"string"},
            {description:"Properties to apply to the instance.", optional:true, name:"props", 
             defaultValue:null,type:"object"},
            {description:"More properties to apply to the instance.", optional:true, name:"props2", 
             defaultValue:null,type:"object"},
            {description:"Yet more properties to apply to the instance.", optional:true, name:"props3", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"Pointer to the new class.", type:"class"},
        type:"classMethod",
        definingClass:"object:ClassFactory"
    },
    "group:i18nMessages":{
        ref:"group:i18nMessages",
        refs:["method:ListGrid.getRequiredFieldMessage", "method:ListGrid.getToggleFreezeText", 
         "method:ListGrid.getGroupByText","classAttr:Validator.notABoolean", "classAttr:Validator.notAString", 
         "classAttr:Validator.notAnInteger","classAttr:Validator.notADecimal", "classAttr:Validator.notADate", 
         "classAttr:Validator.mustBeLessThan","classAttr:Validator.mustBeGreaterThan", "classAttr:Validator.mustBeLaterThan", 
         "classAttr:Validator.mustBeEarlierThan","classAttr:Validator.mustBeShorterThan", "classAttr:Validator.mustBeLongerThan", 
         "classAttr:Validator.mustBeExactLength","classAttr:Validator.requiredField", "classAttr:Validator.notOneOf", 
         "classAttr:RPCManager.defaultPrompt","classAttr:RPCManager.timeoutErrorMessage", "classAttr:RPCManager.removeDataPrompt", 
         "classAttr:RPCManager.saveDataPrompt","classAttr:RPCManager.fetchDataPrompt", "classAttr:Date.shortDayNames", 
         "classAttr:Date.shortMonthNames","classAttr:Time.AMIndicator", "classAttr:Time.PMIndicator", 
         "classAttr:Dialog.OK_BUTTON_TITLE","classAttr:Dialog.APPLY_BUTTON_TITLE", "classAttr:Dialog.YES_BUTTON_TITLE", 
         "classAttr:Dialog.NO_BUTTON_TITLE","classAttr:Dialog.CANCEL_BUTTON_TITLE", "classAttr:Dialog.CONFIRM_TITLE", 
         "classAttr:Dialog.SAY_TITLE","classAttr:Dialog.WARN_TITLE", "classAttr:Dialog.ASK_TITLE", 
         "classAttr:Dialog.ASK_FOR_VALUE_TITLE","classAttr:Dialog.LOGIN_TITLE", "classAttr:Dialog.USERNAME_TITLE", 
         "classAttr:Dialog.PASSWORD_TITLE","classAttr:Dialog.LOGIN_BUTTON_TITLE", "classAttr:Dialog.LOGIN_ERROR_MESSAGE", 
         "attr:GridRenderer.emptyMessage","attr:ListGrid.emptyMessage", "attr:ListGrid.loadingDataMessage", 
         "attr:ListGrid.loadingMessage","attr:ListGrid.cancelEditingConfirmationMessage", 
         "attr:ListGrid.confirmDiscardEditsMessage","attr:ListGrid.discardEditsSaveButtonTitle", "attr:ListGrid.freezeOnRightText", 
         "attr:ListGrid.freezeOnLeftText","attr:ListGrid.sortFieldAscendingText", "attr:ListGrid.sortFieldDescendingText", 
         "attr:ListGrid.fieldVisibilitySubmenuTitle","attr:ListGrid.ungroupText", "attr:TreeGrid.parentAlreadyContainsChildMessage", 
         "attr:TreeGrid.cantDragIntoSelfMessage","attr:TreeGrid.cantDragIntoChildMessage", "attr:MenuButton.title", 
         "attr:DateChooser.todayButtonTitle","attr:DateChooser.cancelButtonTitle", "attr:DynamicForm.errorsPreamble", 
         "attr:DynamicForm.unknownErrorMessage","attr:SelectOtherItem.otherTitle", "attr:SelectOtherItem.selectOtherPrompt", 
         "attr:ValuesManager.unknownErrorMessage","attr:Button.title", "attr:Window.title"],
        description:"The properties in this group are default system messages that a localized \n application will want to override on a per-locale basis",
        name:"i18nMessages",
        seeAlso:[
            {ref:"group:i18n", description:null}
        ],
        type:"group"
    },
    "attr:StatefulCanvas.iconSize":{
        ref:"attr:StatefulCanvas.iconSize",
        flags:"IR",
        description:"Size in pixels of the icon image.\n <P>\n The <code>iconWidth</code> and <code>iconHeight</code> properties can be used to\n configure width and height separately.",
        name:"iconSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:ListGrid.cellChanged":{
        ref:"method:ListGrid.cellChanged",
        flags:"",
        description:" Fires after user edits have been successfully saved to the server, when the new value\n doesn't match the value before editing.\n <p>\n If you want immediate notification of a changes <b>before</b> changes has been saved to the\n server, implement ${isc.DocUtils.linkForRef('method:ListGridField.change','field.change()')} or\n ${isc.DocUtils.linkForRef('method:ListGridField.changed','field.changed()')} instead.\n <P>\n You can supply this method on the listGrid instance or on the listGridField(s) that you\n want to receive cellChanged events for.  If both a field and the listGrid define a\n cellChanged method and that field receives an edit save, only the one defined on the\n field is called.\n\n",
        name:"cellChanged",
        seeAlso:[
            {ref:"method:ListGridField.cellChanged", description:null}
        ],
        params:[
            {description:"record for the cell being changed", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"new value for the cell", optional:false, name:"newValue", defaultValue:null, 
             type:"any"},
            {description:"old value for the cell", optional:false, name:"oldValue", defaultValue:null, 
             type:"any"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"},
            {description:"grid where cell was changed.  Also available as \"this\"", optional:false, 
             name:"grid",defaultValue:null, type:"ListGrid"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:TabSet.selectedTab":{
        ref:"attr:TabSet.selectedTab",
        flags:"IRW",
        getter:["getSelectedTab"],
        description:"Specifies the index of the initially selected tab.",
        name:"selectedTab",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBar"]
    },
    "method:ListGrid.getEditedCell":{
        ref:"method:ListGrid.getEditedCell",
        flags:"",
        description:" Returns the current value of a cell. If the cell has an outstanding edit value, this will\n be returned, otherwise the underlying value of the record will be returned.\n\n",
        name:"getEditedCell",
        seeAlso:[],
        params:[
            {description:"rowNum of the record being edited, or an Object                                      containing values for all the record's primary keys", 
             optional:false,name:"record", defaultValue:null, type:"number | Object"},
            {description:"colNum or fieldName of the cell", optional:false, name:"field", 
             defaultValue:null,type:"number | string"}
        ],
        returns:{description:"Current edit value, or underlying value for the cell", type:"any"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:visibility":{
        ref:"group:visibility",
        refs:["method:Menu.showContextMenu", "method:Menu.hideContextMenu", "method:Menu.showSubmenu", 
         "method:Canvas.show","method:Canvas.hide", "method:Canvas.isVisible", "type:Visibility"],
        description:"Whether an object can be seen",
        name:"visibility",
        seeAlso:[],
        type:"group"
    },
    "attr:SectionStackSection.items":{
        ref:"attr:SectionStackSection.items",
        flags:"I",
        description:"List of Canvases that constitute the section.  These Canvases will be shown and hidden\n together.",
        name:"items",
        seeAlso:[],
        valueType:"Array of Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "class:DynamicForm":{
        exampleConfig:"DynamicForm.xml",
        methods:["method:DynamicForm.getEditorType", "method:DynamicForm.setItems", 
         "method:DynamicForm.setFields","method:DynamicForm.getFields", "method:DynamicForm.getItems", 
         "method:DynamicForm.setValues","method:DynamicForm.rememberValues", "method:DynamicForm.resetValues", 
         "method:DynamicForm.clearValues","method:DynamicForm.valuesHaveChanged", "method:DynamicForm.getValues", 
         "method:DynamicForm.getValuesAsCriteria","method:DynamicForm.getItem", "method:DynamicForm.getField", "method:DynamicForm.getValue", 
         "method:DynamicForm.setValue","method:DynamicForm.showItem", "method:DynamicForm.hideItem", 
         "method:DynamicForm.setValueMap","method:DynamicForm.getErrors", "method:DynamicForm.getFieldErrors", 
         "method:DynamicForm.setErrors","method:DynamicForm.setError", "method:DynamicForm.addFieldErrors", 
         "method:DynamicForm.setFieldErrors","method:DynamicForm.clearFieldErrors", "method:DynamicForm.clearErrors", 
         "method:DynamicForm.hasErrors","method:DynamicForm.hasFieldErrors", "method:DynamicForm.getItemErrorHTML", 
         "method:DynamicForm.submitForm","method:DynamicForm.setAction", "method:DynamicForm.validate", 
         "method:DynamicForm.getValidatedValues","method:DynamicForm.showErrors", "method:DynamicForm.showFieldErrors", 
         "method:DynamicForm.focusInItem","method:DynamicForm.itemHoverHTML", "method:DynamicForm.titleHoverHTML", 
         "method:DynamicForm.itemChange","method:DynamicForm.itemKeyPress", "method:DynamicForm.submitValues", 
         "method:DynamicForm.handleHiddenValidationErrors","method:DynamicForm.editNewRecord", "method:DynamicForm.editRecord", 
         "method:DynamicForm.editSelectedData","method:DynamicForm.validateData", "method:DynamicForm.reset", "method:DynamicForm.cancel", 
         "method:DynamicForm.submit","method:DynamicForm.saveData", "method:DynamicForm.fetchData", 
         "method:DynamicForm.filterData"],
        type:"class",
        ref:"class:DynamicForm",
        classAttrs:[],
        treeLocation:["Client Reference/Forms"],
        classMethods:[],
        description:"The DynamicForm manages a collection of FormItems which represent user input controls.  The\n DynamicForm provides layout, value management, validation and databinding for the controls\n it manages.\n <P>\n To create a DynamicForm, set ${isc.DocUtils.linkForRef('attr:DynamicForm.fields')} to an Array of Objects describing the\n FormItems you want to use.  For example:\n <pre>\n    isc.DynamicForm.create({\n        fields:[\n            {name:\"userName\", type:\"text\"},  // creates a TextItem\n            {name:\"usState\", type:\"select\"}  // creates a SelectItem\n        ]\n    })\n </pre>\n The item <code>name</code> is an identifier for the item that must be unique just within\n this form.  It is used:\n <ul>\n <li> as the property name under which the item's value is stored in the form (the form's\n      current values are accessible as ${isc.DocUtils.linkForRef('method:DynamicForm.getValues','form.getValues()')}\n <li> when retrieving the FormItem's current value (via\n      ${isc.DocUtils.linkForRef('method:DynamicForm.getValue','form.getValue()')}) \n <li> to retrieve the item itself via ${isc.DocUtils.linkForRef('method:DynamicForm.getItem','form.getItem()')}\n </ul>\n The item <code>type</code> controls what kind of FormItem is created.  See\n ${isc.DocUtils.linkForRef('type:FormItemType')}.\n <P>\n The ${isc.DocUtils.linkForRef('attr:FormItem.title','title')} and ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue','defaultValue')} are also\n commonly specified.  All FormItems share a common set of properties for controlling\n ${isc.DocUtils.linkForRef('group:formLayout','form layout')}.  Other properties common to all FormItems are\n documented on the ${isc.DocUtils.linkForRef('class:FormItem')} class, and properties specific to particular FormItems are\n documented on the respective FormItems.  \n <P>\n NOTE: For very simple forms consisting of exactly one item, you still use a DynamicForm.\n See the \"fontSelector\" form in the ${isc.DocUtils.linkForExampleId('toolstrip', 'Toolstrip example')}.",
        attrs:["attr:DynamicForm.items", "attr:DynamicForm.fields", "attr:DynamicForm.values", 
         "attr:DynamicForm.itemLayout","attr:DynamicForm.numCols", "attr:DynamicForm.fixedColWidths", 
         "attr:DynamicForm.colWidths","attr:DynamicForm.minColWidth", "attr:DynamicForm.cellPadding", 
         "attr:DynamicForm.cellBorder","attr:DynamicForm.sectionVisibilityMode", "attr:DynamicForm.longTextEditorThreshold", 
         "attr:DynamicForm.longTextEditorType","attr:DynamicForm.valuesManager", "attr:DynamicForm.titleOrientation", 
         "attr:DynamicForm.titlePrefix","attr:DynamicForm.rightTitlePrefix", "attr:DynamicForm.titleSuffix", 
         "attr:DynamicForm.rightTitleSuffix","attr:DynamicForm.titleWidth", "attr:DynamicForm.wrapItemTitles", 
         "attr:DynamicForm.showInlineErrors","attr:DynamicForm.showErrorIcons", "attr:DynamicForm.showErrorText", 
         "attr:DynamicForm.showErrorStyle","attr:DynamicForm.errorOrientation", "attr:DynamicForm.errorItemProperties", 
         "attr:DynamicForm.errorItemCellStyle","attr:DynamicForm.errorsPreamble", "attr:DynamicForm.showTitlesWithErrorMessages", 
         "attr:DynamicForm.hiliteRequiredFields","attr:DynamicForm.requiredTitlePrefix", "attr:DynamicForm.requiredRightTitlePrefix", 
         "attr:DynamicForm.requiredTitleSuffix","attr:DynamicForm.requiredRightTitleSuffix", "attr:DynamicForm.itemHoverDelay", 
         "attr:DynamicForm.itemHoverWidth","attr:DynamicForm.itemHoverHeight", "attr:DynamicForm.itemHoverAlign", 
         "attr:DynamicForm.itemHoverVAlign","attr:DynamicForm.itemHoverStyle", "attr:DynamicForm.itemHoverOpacity", 
         "attr:DynamicForm.errors","attr:DynamicForm.validateOnChange", "attr:DynamicForm.unknownErrorMessage", 
         "attr:DynamicForm.autoFocus","attr:DynamicForm.selectOnFocus", "attr:DynamicForm.canFocus", 
         "attr:DynamicForm.validationURL","attr:DynamicForm.disableValidation", "attr:DynamicForm.cancelParamName", 
         "attr:DynamicForm.cancelParamValue","attr:DynamicForm.action", "attr:DynamicForm.target", "attr:DynamicForm.method", 
         "attr:DynamicForm.encoding","attr:DynamicForm.canSubmit", "attr:DynamicForm.saveOnEnter", 
         "attr:DynamicForm.autoFetchData","attr:DynamicForm.initialCriteria"],
        implementsInterfaces:["DataBoundComponent"],
        name:"DynamicForm",
        seeAlso:[]
    },
    "class:ButtonItem":{
        methods:["method:ButtonItem.click"],
        exampleConfig:"ButtonItem.xml",
        ref:"class:ButtonItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:ButtonItem.baseStyle", "attr:ButtonItem.showTitle", "attr:ButtonItem.startRow", 
         "attr:ButtonItem.endRow","attr:ButtonItem.buttonConstructor", "attr:ButtonItem.buttonProperties"],
        description:"FormItem for adding a Button to a form.",
        name:"ButtonItem",
        seeAlso:[],
        type:"class"
    },
    "class:Menu":{
        methods:["method:Menu.itemClick", "method:Menu.showContextMenu", "method:Menu.setData", 
         "method:Menu.setItems","method:Menu.hideContextMenu", "method:Menu.showSubmenu", "method:Menu.getSubmenu", 
         "method:Menu.setItemEnabled","method:Menu.setItemChecked", "method:Menu.setItemTitle", "method:Menu.setItemIcon"],
        ref:"class:Menu",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:Menu.data", "attr:Menu.items", "attr:Menu.fields", "attr:Menu.defaultWidth", 
         "attr:Menu.cellHeight","attr:Menu.autoDraw", "attr:Menu.useKeys", "attr:Menu.showKeys", "attr:Menu.showIcons", 
         "attr:Menu.showSubmenus","attr:Menu.submenuDirection", "attr:Menu.emptyMessage", "attr:Menu.iconWidth", 
         "attr:Menu.iconHeight","attr:Menu.showAnimationEffect", "attr:Menu.submenuImage", 
         "attr:Menu.submenuDisabledImage","attr:Menu.checkmarkImage", "attr:Menu.checkmarkDisabledImage", 
         "attr:Menu.canSelectParentItems","attr:Menu.autoDismiss"],
        description:"The Menu widget class implements interactive menu widgets, with optional icons, submenus,\n and shortcut keys.\n <p>\n A Menu is initialized with an Array of items, specified as menu.data, each of which represents\n one row in the menu's display and specifies the action to take when that menu item is selected.\n <p>\n Generally to create a context menu for a component, provide a Menu instance for the \n <code>contextMenu</code> property.  Note that some components have special context menu support\n because they have distinct regions or because they have a default set of context menu actions\n available.\n <p>\n If you want a button that pops up a menu when clicked, or a bar of such buttons, see the\n MenuButton and MenuBar classes.",
        name:"Menu",
        seeAlso:[
            {ref:"attr:Menu.data", description:null},
            {ref:"attr:Canvas.contextMenu", description:null},
            {ref:"class:MenuButton", description:null},
            {ref:"class:MenuBar", description:null}
        ],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"]
    },
    "attr:ListGrid.canHover":{
        ref:"attr:ListGrid.canHover",
        flags:"IRW",
        description:"If true, cellHover and rowHover events will fire when the user leaves the mouse over a \n row / cell.",
        name:"canHover",
        seeAlso:[
            {ref:"attr:ListGrid.showHover", description:null},
            {ref:"attr:ListGridField.showHover", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('valueHoverTips')}"],
        definingClass:"class:ListGrid",
        groups:["hovers"]
    },
    "attr:SelectOtherItem.otherTitle":{
        ref:"attr:SelectOtherItem.otherTitle",
        flags:"IRW",
        description:"title for the Other... item",
        name:"otherTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Other...\"",
        type:"attr",
        definingClass:"class:SelectOtherItem",
        groups:["appearance", "i18nMessages"]
    },
    "method:Canvas.keyUp":{
        ref:"method:Canvas.keyUp",
        flags:"A",
        description:"\n Executed when a key is released on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}: true). \n <P>\n Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that\n was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine\n whether modifier keys were down.\n\n",
        name:"keyUp",
        seeAlso:[
            {ref:"attr:Canvas.canFocus", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:Chart.getFacetValue":{
        ref:"method:Chart.getFacetValue",
        flags:"",
        description:" Get facet value definition by facetId and facetValueId.\n",
        name:"getFacetValue",
        seeAlso:[
            {ref:"class:FacetValue", description:null}
        ],
        params:[
            {description:"the id of the facet to retrieve", optional:false, name:"facetId", 
             defaultValue:null,type:"String"},
            {description:"the id of the facet value to retrieve", optional:false, name:"facetValueId", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"the FacetValue if found, or null", type:"FacetValue"},
        type:"method",
        definingClass:"interface:Chart"
    },
    "attr:SectionStack.canResizeSections":{
        ref:"attr:SectionStack.canResizeSections",
        flags:"IRA",
        description:"Whether sections can be drag resized by the user dragging the section header.\n <P>\n Note that, with <code>canResizeSections:true</code>, not all sections can be resized:\n sections that contain only ${isc.DocUtils.linkForRef('attr:Button.autoFit','autofitting')} components or that are\n marked with ${isc.DocUtils.linkForRef('attr:SectionStackSection.resizeable','section.resizeable:false')} will not be\n resizeable.",
        name:"canResizeSections",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SectionStack"
    },
    "attr:SectionStackSection.title":{
        ref:"attr:SectionStackSection.title",
        flags:"IR",
        description:"Title to show for the section",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "attr:ImgProperties.imgDir":{
        ref:"attr:ImgProperties.imgDir",
        flags:"IRW",
        description:"Specifies the image-specific image directory to override the default.",
        name:"imgDir",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "method:ListGrid.rowHover":{
        ref:"method:ListGrid.rowHover",
        flags:"",
        description:" Called when the mouse hovers over a row if this.canHover is true. \n  Returning false will suppress the hover text from being shown if this.showHover is true.\n\n",
        name:"rowHover",
        seeAlso:[
            {ref:"attr:ListGrid.canHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event (default behavior of showing the hover)", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:CubeGrid.wrapFacetTitles":{
        ref:"attr:CubeGrid.wrapFacetTitles",
        flags:"IRW",
        description:"Whether to allow text wrapping on facet titles",
        name:"wrapFacetTitles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "group:drawContext":{
        ref:"group:drawContext",
        refs:["type:DrawPosition"],
        name:"drawContext",
        seeAlso:[],
        type:"group"
    },
    "group:componentSchema":{
        ref:"group:componentSchema",
        title:"Component Schema",
        treeLocation:["Concepts/Component XML"],
        refs:["attr:DataSourceField.xmlAttribute", "attr:DataSourceField.multiple", 
         "attr:DataSourceField.propertiesOnly","attr:DataSourceField.inapplicable", "attr:DataSourceField.group"],
        description:"A component schema is a special type of DataSource that describes a custom component.  \n <P>\n Declaring a component schema for your custom component allows you to:\n <ul>\n <li> use simpler XML when creating your custom component: avoid having to specify the\n <code>constructor</code> and <code>xsi:type</code> attributes as described under\n ${isc.DocUtils.linkForRef('group:componentXML')}\n <li> use your custom component within ${isc.DocUtils.linkForRef('group:visualBuilder')}\n </ul>\n <P>\n <b>Example of a Component Schema</b>\n <P>\n It's most basic form, a component schema for a custom subclass of ListGrid called\n \"MyListGrid\" looks like this:\n <pre>\n &lt;DataSource serverType=\"component\" ID=\"MyListGrid\" \n             inheritsFrom=\"ListGrid\" instanceConstructor=\"MyListGrid\"/&gt;\n </pre>\n With this definition saved as \"MyListGrid.ds.xml\" in the project dataSources directory\n ([webroot]/shared/ds/ by default), you can now create an instance of MyListGrid with just:\n <pre>\n &lt;MyListGrid width=\"500\"/&gt;\n </pre>\n Note: you may need to restart your servlet engine/J2EE container before this example will\n work.\n <P>\n The attributes set directly on the DataSource tag have special meaning for a component\n schema definition:\n <ul>\n <li>${isc.DocUtils.linkForRef('attr:DataSource.serverType','serverType')}=\"component\" indicates this DataSource describes\n a component, as opposed to a SQL table or other data provider\n <li>${isc.DocUtils.linkForRef('attr:DataSource.ID','ID')} means the tagName that will be used to create your custom\n component.  This must match the first component of the filename (ID=\"MyListGrid\" means the\n filename must be MyListGrid.ds.xml) and typically also matches the name of the class.\n <li>${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}=\"ListGrid\" inherits the ListGrid property definitions via\n ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')}.  \n <li>instanceConstructor=\"MyListGrid\" indicates the SmartClient class that\n ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} should be called on to construct an instance.\n <li>showLocalFieldsOnly is a boolean that, when set to true, tells the ${isc.DocUtils.linkForRef('group:visualBuilder')}\n to show only the fields declared in this schema in the component editor.  Otherwise fields\n inherited via ${isc.DocUtils.linkForRef('attr:DataSource.inheritsFrom')} (all the way up the chain) are also included.\n <li>showSuperClassEvents is a boolean that, like showLocalFieldsOnly, optionally restricts\n the list of events shown in the Events tab of the ${isc.DocUtils.linkForRef('group:visualBuilder')} to those defined in\n this schema only.\n <li>showSuperClassActions is a boolean that optionally restricts the list of actions shown\n in the menu when you map a component Event to a component Action within ${isc.DocUtils.linkForRef('group:visualBuilder')}\n to those defined in this schema only.\n </ul>\n <P>\n <b>Declaring custom properties</b>\n <P>\n Custom properties are declared via ${isc.DocUtils.linkForRef('attr:DataSource.fields','fields')} as for an ordinary\n ${isc.DocUtils.linkForRef('class:DataSource')}.  As with ordinary DataSources, it is legal to redeclare inherited fields\n in order to modify properties such as ${isc.DocUtils.linkForRef('attr:DataSourceField.editorType','field.editorType')}.\n <P>\n The following DataSourceField properties have special significance when a component schema\n is used to process ${isc.DocUtils.linkForRef('group:componentXML','component XML')}:\n <ul>\n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} declares the type of the field, and hence the\n type of the JavaScript value your custom class will be initialized with.  In order to\n declare subcomponents, can be set to the name of another component (built-in or custom).  \n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','field.multiple')} declares that the field should always be\n array-valued even when only a single value is provided.  Also indicates that the field name\n should be used as a \"wrapper tag\" in the XML format for the component.\n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.propertiesOnly','field.propertiesOnly')}.  For fields that hold\n subcomponents, suppresses auto-construction to avoid ${isc.DocUtils.linkForRef('attr:Canvas.autoDraw','double drawing')}\n and to allow subcomponents to be modified by their parent component before they are created\n and drawn\n </ul>\n When a component is edited within Visual Builder, the DataSource properties that normally\n influence databound forms will influence the Component Editor (for example, field.title,\n field.editorType).  In addition, the following properties have special signficance in\n component editing and component drag and drop:\n <ul>\n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.inapplicable','field.inapplicable')} indicates that an inherited\n field is inapplicable in this component.\n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.group','field.group')} indicates what group the property should be\n placed in when editing in Visual Builder.\n <li> ${isc.DocUtils.linkForRef('attr:DataSourceField.xmlAttribute','field.xmlAttribute')}: indicates this field should\n serialize as an XML attribute.  Note that when constructing the component from XML, either\n an attribute or a subelement will continue to be accepted as means of specifying the field\n value, so this property is primarily set in order to make code generated by Visual Builder\n maximally compact or to make it conform to externally set standards.\n </ul>\n <P>\n <b>Declaring Events and Actions</b>\n <P>\n Events and Actions are declared via a methods array.  In order for a method to be considered\n an event, it needs to have a method definition in the methods array (or be publicly\n documented in the SmartClient reference) and have been added to\n the class as a ${isc.DocUtils.linkForRef('group:stringMethods','StringMethod')} via ${isc.DocUtils.linkForRef('classMethod:Class.registerStringMethods')}.\n <p>\n In order for a method to be considered an action, it needs to have a method definition in\n the methods array and have the <code>action</code> property set to <code>true</code>.  For\n example, the following is a definition of the 'hide' action available on any Canvas, as\n copied from Canvas.ds.xml:\n <pre>\n     &lt;methods&gt;\n         &lt;method name=\"hide\" title=\"Hide\" action=\"true\"/&gt;\n     &lt;/methods&gt;\n </pre>",
        name:"componentSchema",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgSplitbar.hSrc":{
        ref:"attr:ImgSplitbar.hSrc",
        flags:"IR",
        description:"Default src to display when ${isc.DocUtils.linkForRef('attr:ImgSplitbar.vertical')} is false, \n and ${isc.DocUtils.linkForRef('attr:ImgSplitbar.src')} is unset.",
        name:"hSrc",
        seeAlso:[
            {ref:"attr:ImgSplitbar.src", description:null}
        ],
        valueType:"string",
        defaultValue:"[SKIN]hgrip.png",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "attr:Window.restoreButton":{
        ref:"attr:Window.restoreButton",
        flags:"R",
        description:"ImgButton that restores the Window via ${isc.DocUtils.linkForRef('method:Window.restore')}.",
        name:"restoreButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:ToolStripSeparator.vSrc":{
        ref:"attr:ToolStripSeparator.vSrc",
        flags:"IRW",
        description:"Image for vertically oriented separator (for horizontal toolstrips).",
        name:"vSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]separator.png\"",
        type:"attr",
        definingClass:"class:ToolStripSeparator"
    },
    "group:headerMenuButton":{
        ref:"group:headerMenuButton",
        refs:["attr:ListGrid.showHeaderMenuButton", "attr:ListGrid.headerMenuButtonConstructor", 
         "attr:ListGrid.headerMenuButton","attr:ListGrid.headerMenuButtonIcon", "attr:ListGrid.headerMenuButtonIconWidth", 
         "attr:ListGrid.headerMenuButtonIconHeight","attr:ListGrid.headerMenuButtonWidth", "attr:ListGrid.headerMenuButtonHeight"],
        name:"headerMenuButton",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.editByCell":{
        ref:"attr:ListGrid.editByCell",
        flags:"IRW",
        description:"Determines whether when the user edits a cell in this listGrid the entire row becomes\n      editable, or just the cell that recieved the edit event.<br><br>\n      No effect if this.canEdit is false or null.",
        name:"editByCell",
        seeAlso:[
            {ref:"attr:ListGrid.canEdit", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('editByCell')}"],
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Facet.title":{
        ref:"attr:Facet.title",
        flags:"IRW",
        description:"User-visible title of this facet.  Shown on the facet label in the CubeGrid.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "method:CubeGrid.getRowFacetLayout":{
        ref:"method:CubeGrid.getRowFacetLayout",
        flags:"",
        description:" Get the current widths of the row facets, as:<br> \n [ {facetId:facetId, width:currentWidth }, ... ]\n\n      <br><i>methodType</i> getter\n",
        name:"getRowFacetLayout",
        seeAlso:[],
        returns:{description:"array of {facetId:facetId, width:width} objects", type:"array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:DynamicForm.titlePrefix":{
        ref:"attr:DynamicForm.titlePrefix",
        flags:"IRW",
        description:"The string prepended to the title of every item in this form.",
        name:"titlePrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "classMethod:ClassFactory.defineClass":{
        ref:"classMethod:ClassFactory.defineClass",
        flags:"",
        description:"\n Create a new class, which can then be used to create instances of this object type.\n <P>\n The new Class is returned by <code>defineClass</code>, is available as\n <code>isc.<i>ClassName</i></code> and is also available in global scope if not in\n ${isc.DocUtils.linkForRef('class:isc','portal mode')}.\n <P>\n Also creates a new function <code>${isc.DocUtils.linkForRef('object:isA','class:isA')}.<i>ClassName()</i></code> object\n for identifying instances of this Class.\n\n",
        name:"defineClass",
        seeAlso:[],
        params:[
            {description:"Name for the new class.", optional:false, name:"className", defaultValue:null, 
             type:"string"},
            {description:"Optional SuperClass Class object or name", optional:true, name:"superClass", 
             defaultValue:null,type:"Class"}
        ],
        returns:{description:"Returns the new Class object.", type:"Class"},
        type:"classMethod",
        definingClass:"object:ClassFactory"
    },
    "attr:DynamicForm.showErrorText":{
        ref:"attr:DynamicForm.showErrorText",
        flags:"IRW",
        description:"${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorIcons','showErrorIcons')}, \n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText','showErrorText')}, and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorStyle','showErrorStyle')} control how validation errors are\n displayed next to form items when ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true.\n These properties are boolean values, and can be set on a DynamicForm to control the \n behavior form-wide, or set on individual FormItems.\n <P>\n The HTML displayed next to a form item with errors is generated by \n ${isc.DocUtils.linkForRef('method:FormItem.getErrorHTML')}.\n The default implemenation of that method respects <code>showErrorIcons</code> and\n <code>showErrorText</code> as follows:\n <P>\n <code>showErrorIcons</code>, or <code>showErrorIcon</code> at the FormItem level controls\n whether an error icon should appear next to fields which have validation errors.  The icon's\n appearance is governed by ${isc.DocUtils.linkForRef('attr:FormItem.errorIconSrc')}, ${isc.DocUtils.linkForRef('attr:FormItem.errorIconWidth')} and\n ${isc.DocUtils.linkForRef('attr:FormItem.errorIconHeight')}\n <P>\n <code>showErrorText</code> determines whether the text of the validation error should be\n displayed next to fields which have validation errors. The attribute\n ${isc.DocUtils.linkForRef('attr:DynamicForm.showTitlesWithErrorMessages')} may be set to prefix error messages with the \n form item's title + <code>\":\"</code> (may be desired if the item has \n ${isc.DocUtils.linkForRef('attr:FormItem.showTitle')} set to false).\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')} controls where the error HTML should appear relative \n to form items. Therefore the combination of ${isc.DocUtils.linkForRef('attr:DynamicForm.showErrorText')}<code>:false</code> and\n ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}<code>:\"left\"</code> creates a compact validation error display\n consisting of just an icon, to the left of the item with the error message\n available via a hover (similar appearance to ListGrid validation error display).  \n <P>\n In addition to this, <code>showErrorStyle</code> determines whether fields  with validation\n errors should have special styling applied to them. See ${isc.DocUtils.linkForRef('type:FormItemBaseStyle')} for a \n discussion for how error styling is calculated.",
        name:"showErrorText",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "type:EdgeSizes":{
        ref:"type:EdgeSizes",
        description:"Object used to specify custom edge sizes or offsets.\n Specified as an object where <code>defaultSize</code> will map to the default edge size or \n offset for the canvsa (${isc.DocUtils.linkForRef('attr:Canvas.edgeSize')}, or ${isc.DocUtils.linkForRef('attr:Canvas.edgeOffset')} and\n <code>top</code>, <code>left</code>, <code>right</code> and\n <code>bottom</code> will map to the\n ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeTop','edgeTop')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetTop','edgeOffsetTop')}, \n ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeLeft','edgeLeft')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetLeft','edgeOffsetLeft')},\n ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeRight','edgeRight')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetRight','edgeOffsetRight')},\n and ${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeBottom','edgeBottom')}/${isc.DocUtils.linkForRef('attr:EdgedCanvas.edgeOffsetBottom','edgeOffsetBottom')}\n attributes on the paneContainer respectively. Note that not all these properties have to be\n set - if unset standard edge sizing rules will apply.",
        name:"EdgeSizes",
        seeAlso:[],
        type:"type"
    },
    "method:PickList.getDisplayFieldName":{
        ref:"method:PickList.getDisplayFieldName",
        flags:"",
        description:" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.\n If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method\n will return the title field for the <code>optionDataSource</code>\n",
        name:"getDisplayFieldName",
        seeAlso:[],
        returns:{description:"display field name, or null", type:"String"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "classMethod:Page.getIsomorphicDir":{
        ref:"classMethod:Page.getIsomorphicDir",
        flags:"",
        description:"		Return the root directory for Isomorphic-specific files.\n\n",
        name:"getIsomorphicDir",
        seeAlso:[],
        returns:{description:"IsomorphicDir URL.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files"]
    },
    "classMethod:isc.sortObject":{
        ref:"classMethod:isc.sortObject",
        flags:"",
        description:" Given a simple javascript object, return that object sorted by keys, such that when iterating\n through the properties of the object, they will show up in sorted order.<br>\n Usage example - may be used to sort a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','formItem valueMap')} defined\n as an object.\n",
        name:"sortObject",
        seeAlso:[],
        params:[
            {description:"Object to sort", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"Comparitor function to use when sorting the objects keys", optional:true, 
             name:"comparitor",defaultValue:null, type:"function"}
        ],
        returns:{description:"sorted version of the object passed in.", type:"object"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:ListGrid.dataProperties":{
        ref:"attr:ListGrid.dataProperties",
        flags:"IRWA",
        description:"For databound ListGrids, this attribute can be used to customize the ${isc.DocUtils.linkForRef('class:ResultSet')}\n object created for this grid when data is fetched",
        name:"dataProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["databinding"]
    },
    "attr:DSRequest.clientContext":{
        ref:"attr:DSRequest.clientContext",
        flags:"IRW",
        description:"The context object used to send the DSRequest, or the <code>context</code> argument to any\n higher-level API that ultimately performs an RPC.",
        name:"clientContext",
        seeAlso:[
            {ref:"attr:DSResponse.clientContext", description:null},
            {ref:"attr:RPCRequest.clientContext", description:null}
        ],
        valueType:"Object",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "group:find":{
        ref:"group:find",
        refs:["method:List.findIndex", "method:List.findNextIndex", "method:List.find", 
         "method:List.findAll","method:ResultSet.findAll", "method:ResultSet.find", "method:ResultSet.findIndex", 
         "method:ResultSet.findNextIndex","method:Array.findIndex", "method:Array.findNextIndex", "method:Array.find", 
         "method:Array.containsProperty","method:Array.findAll"],
        name:"find",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.setDragTracker":{
        ref:"method:ListGrid.setDragTracker",
        flags:"",
        description:" Sets the custom tracker HTML to display next to the mouse when the user initiates a drag\n operation on this grid. Default implementation will examine ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')}\n and set the custom drag tracker to display the appropriate HTML based on the selected record.\n <br>\n To display custom drag tracker HTML, this method may be overridden - call \n ${isc.DocUtils.linkForRef('classMethod:EventHandler.setDragTracker')} to actually update the drag tracker HTML.\n",
        name:"setDragTracker",
        seeAlso:[],
        returns:{description:"returns false by default to suppress 'setDragTracker' on any ancestors                   of this listGrid.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["dragTracker"]
    },
    "classMethod:Page.getWidth":{
        ref:"classMethod:Page.getWidth",
        flags:"",
        description:" Get the width of the visible portion of the window, not including browser chrome or the\n scrollbar area.\n",
        name:"getWidth",
        seeAlso:[],
        params:[
            {description:"the window object", optional:true, name:"wd", defaultValue:null, type:"object"}
        ],
        returns:{description:"width of the page", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "method:CubeGrid.setFacetValueTitle":{
        ref:"method:CubeGrid.setFacetValueTitle",
        flags:"",
        description:"\n      set the title for a facet value\n\n      <br><i>methodType</i> setter\n",
        name:"setFacetValueTitle",
        seeAlso:[],
        params:[
            {description:"facet to update", optional:false, name:"facetId", defaultValue:null, type:"id"},
            {description:"facetValue to update", optional:false, name:"facetValueId", defaultValue:null, 
             type:"id"},
            {description:"title for the facet", optional:false, name:"newTitle", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["data_and_metadata"]
    },
    "group:imageEdges":{
        ref:"group:imageEdges",
        refs:["class:EdgedCanvas", "attr:Canvas.showEdges", "attr:Canvas.edgeSize", 
         "attr:Canvas.edgeOffset","attr:Canvas.edgeImage", "attr:Canvas.customEdges", "attr:Canvas.edgeBackgroundColor", 
         "attr:Canvas.edgeShowCenter","attr:Canvas.edgeCenterBackgroundColor", "attr:EdgedCanvas.skinImgDir", 
         "attr:EdgedCanvas.edgeImage","attr:EdgedCanvas.edgeColor", "attr:EdgedCanvas.customEdges", 
         "attr:EdgedCanvas.showCenter","attr:EdgedCanvas.edgeSize", "attr:EdgedCanvas.edgeLeft", "attr:EdgedCanvas.edgeRight", 
         "attr:EdgedCanvas.edgeTop","attr:EdgedCanvas.edgeBottom", "attr:EdgedCanvas.edgeOffset", 
         "attr:EdgedCanvas.edgeOffsetTop","attr:EdgedCanvas.edgeOffsetBottom", "attr:EdgedCanvas.edgeOffsetLeft", 
         "attr:EdgedCanvas.edgeOffsetRight","attr:EdgedCanvas.centerBackgroundColor"],
        name:"imageEdges",
        seeAlso:[],
        type:"group"
    },
    "attr:Splitbar.showRollOverGrip":{
        ref:"attr:Splitbar.showRollOverGrip",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the\n 'Over' state on the grip image when the user rolls over on this widget. \n Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showRollOver')} is false",
        name:"showRollOverGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["grip"]
    },
    "attr:ListGrid.selectionType":{
        ref:"attr:ListGrid.selectionType",
        flags:"IRW",
        description:"Defines a listGrid's clickable-selection behavior.",
        name:"selectionType",
        seeAlso:[
            {ref:"type:SelectionStyle", description:null}
        ],
        valueType:"SelectionStyle",
        defaultValue:"Selection.MULTIPLE",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('multipleSelect')}"],
        definingClass:"class:ListGrid",
        groups:["selection", "appearance"]
    },
    "attr:Applet.name":{
        ref:"attr:Applet.name",
        flags:"IR",
        description:"Sets the 'name' attribute on the applet object.  If a name is not provided it will be\n  auto-generated.  Note that in general you don't need to set this.  If you have a handle to\n  your ISC Applet object you can simply call ${isc.DocUtils.linkForRef('method:Applet.getPluginHandle')} to get a\n  handle to the element.",
        name:"name",
        seeAlso:[
            {ref:"method:Applet.getPluginHandle", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:ResultTree.loadDataOnDemand":{
        ref:"attr:ResultTree.loadDataOnDemand",
        flags:"IR",
        description:"Does this resultTree load data incrementally as folders within the tree are opened, or\n is it all loaded in a single request?",
        name:"loadDataOnDemand",
        seeAlso:[
            {ref:"attr:TreeGrid.loadDataOnDemand", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultTree"
    },
    "attr:FormItem.prompt":{
        ref:"attr:FormItem.prompt",
        flags:"IRW",
        description:"This text is shown as a tooltip prompt when the cursor hovers over this item.",
        name:"prompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["basics"]
    },
    "attr:ListGrid.dateFormatter":{
        ref:"attr:ListGrid.dateFormatter",
        flags:"IRW",
        description:"Display format to use for fields specified as type 'date'.  Default is to use the\n system-wide default short date format, configured via\n ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to \n change the format used by this grid.  May also be specified at the field level via\n ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')}.<br>\n If this field is editable the dateFormatter will also be passed to the editor created\n to edit this field as ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat','displayFormat')}.\n In this case you may also need to set ${isc.DocUtils.linkForRef('attr:ListGrid.dateInputFormat')}.",
        name:"dateFormatter",
        seeAlso:[
            {ref:"attr:ListGridField.displayFormat", description:null}
        ],
        valueType:"DateDisplayFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "group:KeyRegistry":{
        ref:"group:KeyRegistry",
        refs:["classMethod:Page.registerKey", "classMethod:Page.unregisterKey"],
        name:"KeyRegistry",
        seeAlso:[],
        type:"group"
    },
    "attr:Flashlet.name":{
        ref:"attr:Flashlet.name",
        flags:"IR",
        description:"Sets the 'name' attribute on the flashlet object.  If a name is not provided it will be\n  auto-generated.  Note that in general you don't need to set this.  If you have a handle to\n  your ISC Flashlet object you can simply call ${isc.DocUtils.linkForRef('method:Flashlet.getPluginHandle')} to get a\n  handle to the element.",
        name:"name",
        seeAlso:[
            {ref:"method:Flashlet.getPluginHandle", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "attr:SectionStackSection.canCollapse":{
        ref:"attr:SectionStackSection.canCollapse",
        flags:"I",
        description:"This attribute controls whether or not the expand/collapse UI control is shown on the\n header of this section.  Any section can still be expanded/collapsed programmatically,\n regardless of this setting.",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"],
        definingClass:"object:SectionStackSection"
    },
    "group:xmlClientVsServer":{
        ref:"group:xmlClientVsServer",
        refs:[],
        description:"Server benefits\n - faster client-side processing\n Server neutral\n - heavy customization of XML transform, if any, written in Java\n\n Client benefits\n - faster server-side processing\n Client neutral\n - heavy customization of XML transform, if any, written in JavaScript",
        name:"xmlClientVsServer",
        seeAlso:[],
        type:"group"
    },
    "attr:RichTextEditor.fontControls":{
        ref:"attr:RichTextEditor.fontControls",
        flags:"IRA",
        description:"Default font control group. Consists of an array of \n  ${isc.DocUtils.linkForRef('type:ControlName')}s. To display this group of controls for some RichTextEditor,\n  include <code>\"fontControls\"</code> in the ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} array",
        name:"fontControls",
        seeAlso:[],
        valueType:"array",
        defaultValue:"[\"fontSelector\", \"fontSizeSelector\"]",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "group:clickMask":{
        ref:"group:clickMask",
        refs:["method:Canvas.showClickMask", "method:Canvas.hideClickMask", "method:Canvas.clickMaskUp", 
         "type:clickMaskMode"],
        name:"clickMask",
        seeAlso:[],
        type:"group"
    },
    "method:PickList.getSelectedRecord":{
        ref:"method:PickList.getSelectedRecord",
        flags:"",
        description:" Returns the entire record object associated with the current value for this item\n (or null if no matching record exists in the PickList data).<br>\n Most commonly used for databound pickListItems to retrieve the values of other fields\n in the record\n\n",
        name:"getSelectedRecord",
        seeAlso:[],
        returns:{description:"record object", type:"object"},
        type:"method",
        definingClass:"interface:PickList"
    },
    "classMethod:isA.List":{
        ref:"classMethod:isA.List",
        flags:"",
        description:" Does <code>object</code> implement the  <code>List</code> interface?\n",
        name:"List",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"<code>true</code> if the object is an Array or belongs to another class that                   implements the <code>List</code> API.", 
         type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "method:DynamicForm.clearErrors":{
        ref:"method:DynamicForm.clearErrors",
        flags:"",
        description:"	Clears all errors for this DynamicForm.\n",
        name:"clearErrors",
        seeAlso:[],
        params:[
            {description:"If true, redraw the form to clear any visible error messages.", 
             optional:false,name:"show", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "group:fill":{
        ref:"group:fill",
        refs:[],
        name:"fill",
        seeAlso:[],
        type:"group"
    },
    "method:CellSelection.getSelectedCells":{
        ref:"method:CellSelection.getSelectedCells",
        flags:"",
        description:"  Returns an array of the currently selected cells.  Each cell is returned as a 2 element\n  array in the form <code>[rowNum, colNum]</code>.\n",
        name:"getSelectedCells",
        seeAlso:[],
        returns:{description:"an array of the selected cells, as 2 element arrays", type:"array"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection", "selection"]
    },
    "attr:Canvas.edgeSize":{
        ref:"attr:Canvas.edgeSize",
        flags:"IR",
        description:"Size in pixels for corners and edges",
        name:"edgeSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"10",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('edges')}"],
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "attr:Progressbar.length":{
        flags:"IR",
        getter:["getLength"],
        type:"attr",
        ref:"attr:Progressbar.length",
        description:"Length of the progressbar in pixels. This is effectively height for a vertical\n progressbar, or width for a horizontal progressbar.\n <P>\n This property must be set instead of setting <code>width</code> or <code>height</code>.",
        name:"length",
        setter:["setLength"],
        valueType:"number",
        seeAlso:[],
        defaultValue:"100",
        groups:["appearance"],
        definingClass:"class:Progressbar"
    },
    "attr:PickList.animationTime":{
        ref:"attr:PickList.animationTime",
        flags:"IRWA",
        description:"If this.animatePickList is true - this specifies the duration of the animation effect\n applied when showing the pickList",
        name:"animationTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"200",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "type:DSDataFormat":{
        ref:"type:DSDataFormat",
        values:[
            {description:"Make an HTTP request in a format recognized by the ISC server and expect ISC server\n response format.  ${isc.DocUtils.linkForRef('group:serverDataIntegration','Server-side integration')} can then be\n used to connect to any kind of data store or web service.", 
             value:"\"iscServer\""},
            {description:"Expect XML responses.  Request format depends on the setting for\n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.  This is the correct setting when\n consuming RSS feeds, XML web services (whether SOAP, REST, XML-RPC or custom format),\n and XML flat files directly from the browser.\n <P>\n A DSResponse will be derived from the returned XML via the process described under\n ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')}.", 
             value:"\"xml\""},
            {description:"Expect response in JSON <a href='http://json.org' onclick=\"window.open('http://json.org');return false;\">(Java Script Object Notation)</a>\n format, ready to be eval()'d. Response should either be a naked object literal:<br>\n <code>&nbsp;&nbsp;&nbsp;&nbsp;{status:0, startRow:0, endRow:50, data:[ ...]}</code><br>\n or a string that evals to return a valid response object:<br>\n <code>&nbsp;&nbsp;&nbsp;&nbsp;var response = {status:0, startRow:0, endRow:50, data:[ ...]};\n <br>&nbsp;&nbsp;&nbsp;&nbsp;response;</code><br>\n Request format depends on the setting for ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.  \n See also ${isc.DocUtils.linkForRef('class:XJSONDataSource')}.", 
             value:"\"json\""},
            {description:"SmartClient will not attempt to parse the response, instead,\n ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} must be implemented.\n <code>transformResponse</code> will receive the \"data\" parameter as a String, and must\n parse this String into an Array of Objects, which should be set as\n ${isc.DocUtils.linkForRef('attr:DSResponse.data')}.  Request format depends on the setting for\n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','protocol')}.\n <P>\n Note that, unlike either the \"json\" or \"xml\" settings of <code>dataFormat</code>, you\n are responsible for ensuring that parsed values are the correct type, for example, using\n the JavaScript built-ins <code>parseInt</code> and <code>parseFloat</code> on integer\n and decimal values respectively, and using <code>new Date()</code> to construct valid\n Dates.", 
             value:"\"custom\""}
        ],
        description:"Indicates the format to be used for HTTP requests and responses when\n fulfilling DSRequests (eg ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} is called).\n <P>\n Note that ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} is only available for\n \"iscServer\" requests.",
        name:"DSDataFormat",
        seeAlso:[],
        type:"type",
        examples:["${isc.DocUtils.linkForExampleId('simpleJSON')}"],
        groups:["clientDataIntegration", "serverDataIntegration"]
    },
    "attr:Chart.threeD":{
        ref:"attr:Chart.threeD",
        flags:"IR",
        description:"Whether to show chart in a 3D appearance, for charts that support this.",
        name:"threeD",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"interface:Chart",
        groups:["chartAppearance"]
    },
    "classMethod:FileLoader.cacheISC":{
        ref:"classMethod:FileLoader.cacheISC",
        flags:"",
        description:"\n Caches the specified SmartClient modules and skin.  Calling this method is equivalent to using\n the <code>loadISC</code> JSP tag with <code>cacheOnly=\"true\"</code>.\n\n",
        name:"cacheISC",
        seeAlso:[],
        params:[
            {description:"Name of the skin to load.  If not specified, the skin specified by the                        default ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultSkin')} will be used.\n                        Instead of a skin name, you can specify a skinDir - this works just\n                        like ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - the skin assumed to be a skinDir if\n                        there's at least one forward slash (/) in the name.", 
             optional:true,name:"skin", defaultValue:null, type:"String"},
            {description:"List of modules to load.  If not specified, the list of modules                                   specified by the default\n                                   ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultModules')} will be used.  You\n                                   can specify modules as \"Core,Foundation\" or as [\"Core\",\n                                   \"Foundation\"]", 
             optional:true,name:"modules", defaultValue:null, type:"String or List"},
            {description:"Optional code to execute when all specified modules and                                      skin have been cached.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:ListGrid.rowEndEditAction":{
        ref:"attr:ListGrid.rowEndEditAction",
        flags:"IRWA",
        description:"If the user is editing a record in this listGrid, and attempts to navigate to a field\n beyond the end of the row, via tab (or shift-tab off the first editable field), this \n property determines what action to take:<ul>\n <li>\"next\": start editing the next (or previous) record in the list\n <li>\"same\": put focus back into the first editable field of the same record.\n <li>\"done\": hide the editor\n <li>\"stop\": leave focus in the cell being edited\n </ul>",
        name:"rowEndEditAction",
        seeAlso:[],
        valueType:"RowEndEditAction",
        defaultValue:"\"next\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "class:CellSelection":{
        methods:["method:CellSelection.cellIsSelected", "method:CellSelection.anySelected", 
         "method:CellSelection.getSelectedCells","method:CellSelection.selectCell", "method:CellSelection.deselectCell", 
         "method:CellSelection.selectCellList","method:CellSelection.deselectCellList", "method:CellSelection.selectSingleCell"],
        ref:"class:CellSelection",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System/Selection"],
        attrs:[],
        description:"Maintains a representation of selection over a 2-dimensional grid of objects.<br>\n  Automtatically created to manage cell-selection on ${isc.DocUtils.linkForRef('class:CubeGrid')} widgets.",
        name:"CellSelection",
        seeAlso:[],
        type:"class"
    },
    "method:Class.delayCall":{
        ref:"method:Class.delayCall",
        flags:"",
        description:"  This is a helper to delay a call to some method on this object by some specified\n  amount of time.\n",
        name:"delayCall",
        seeAlso:[],
        params:[
            {description:"name of the method to call", optional:false, name:"methodName", 
             defaultValue:null,type:"string"},
            {description:"array of arguments to pass to the method in question", optional:true, 
             name:"arrayArgs",defaultValue:null, type:"array"},
            {description:"Number of ms to delay the call by - defaults to zero (so just pulls                        execution of the method out of the current execution thread.", 
             optional:true,name:"time", defaultValue:null, type:"number"}
        ],
        returns:{description:"Timer ID for the delayed call - can be passed to                       ${isc.DocUtils.linkForRef('classMethod:Timer.clear')} to cancel the call before it executes", 
         type:"string"},
        type:"method",
        definingClass:"class:Class"
    },
    "method:Class.addProperties":{
        ref:"method:Class.addProperties",
        flags:"",
        description:"	\n 	Add properties or methods to this specific instance.  \n	Properties with the same name as existing properties will override.\n\n",
        name:"addProperties",
        seeAlso:[],
        params:[
            {description:"Object containing name:value pairs to be added to this object", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"object"}
        ],
        returns:{description:"the object after properties have been added to it", type:"object"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:StretchImgButton.iconWidth":{
        ref:"attr:StretchImgButton.iconWidth",
        flags:"IR",
        description:"Width in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:OperationBinding.methodArguments":{
        ref:"attr:OperationBinding.methodArguments",
        flags:"IR",
        description:"You can explicitly declare the arguments to be passed to\n ${isc.DocUtils.linkForRef('attr:OperationBinding.serverMethod')} using this attribute.  This isn't required - in the\n absense of <code>methodArguments</code>, the DMI implementation will still automagically\n pass a stock set of arguments to your method (see the overview in ${isc.DocUtils.linkForRef('class:ServerObject')}), but\n specifying arguments explicitly gives you more flexibility in what can be passed.\n <p>\n The format for specifying <code>methodArguments</code> is as a comma separated list of VTL\n (Velocity Template Language) expressions.  See the\n <a href='http://jakarta.apache.org/velocity/docs/vtl-reference-guide.html' onclick=\"window.open('http://jakarta.apache.org/velocity/docs/vtl-reference-guide.html');return false;\">VTL Reference</a>\n and <a href='http://jakarta.apache.org/velocity/docs/user-guide.html' onclick=\"window.open('http://jakarta.apache.org/velocity/docs/user-guide.html');return false;\">Velocity User Guide</a> \n for an overview of how to use VTL.\n <p>\n The Velocity context is pre-populated with the following variables - you can pass these\n verbatim as arguments, or call methods on these objects and pass the resulting values:\n <ul>\n <li>dsRequest: instance of the current DSRequest\n <li>request: the current HttpServletRequest\n <li>response: the current HttpServletResponse\n <li>rpcManager: the instance of RPCManager for this request\n <li>dataSource: a DataSource instance for this request\n </ul>\n So, for example, if you had a method signature like the following:\n <p><code>\n public DSResponse fetch(SupplyItem creteria, long startRow, long endRow)\n </code><p>\n You can invoke it by specifying <code>methodArguments</code> as follows:\n <p><code>\n methodArguments=\"$dsRequest.criteria, $dsRequest.startRow, $dsRequest.endRow\"\n </code></p>\n Without <code>methodArguments</code>, there would be no way for you to specify\n <code>startRow/endRow</code> as arguments.  You could, of course, simply declare the method\n to take a <code>DSRequest</code> object and call <code>getStartRow()/getEndRow()</code> in\n the body of the method.",
        name:"methodArguments",
        seeAlso:[
            {ref:"class:ServerObject", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding"
    },
    "classAttr:ValidatorTypes.substringCount":{
        ref:"classAttr:ValidatorTypes.substringCount",
        flags:"IR",
        description:"Determine whether a string value contains some substring multiple times.\n  The substring to check for is specified via <code>validator.substring</code>.\n  The <code>validator.operator</code> property allows you to specify how to test\n  the number of substring occurrances. Valid values for this property are\n  <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,\n  <code>&gt;</code>, <code>&gt;=</code>.<br>\n  The number of matches to check for is specified via <code>validator.count</code>.",
        name:"substringCount",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "method:Date.getShortYear":{
        ref:"method:Date.getShortYear",
        flags:"",
        description:"      Return a 2 digit year for this date.\n",
        name:"getShortYear",
        seeAlso:[],
        returns:{description:"year number, padded to 2 characters", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "class:Canvas":{
        methods:["method:Canvas.animateMove", "method:Canvas.animateResize", "method:Canvas.animateRect", 
         "method:Canvas.animateFade","method:Canvas.animateScroll", "method:Canvas.animateShow", "method:Canvas.animateHide", 
         "method:Canvas.setShowResizeBar","method:Canvas.init", "method:Canvas.initWidget", "method:Canvas.isDrawn", 
         "method:Canvas.getID","method:Canvas.getInnerHTML", "method:Canvas.draw", "method:Canvas.setHtmlElement", 
         "method:Canvas.setHtmlPosition","method:Canvas.markForRedraw", "method:Canvas.redraw", "method:Canvas.clear", 
         "method:Canvas.destroy","method:Canvas.addChild", "method:Canvas.removePeer", "method:Canvas.removeChild", 
         "method:Canvas.addPeer","method:Canvas.setSnapTo", "method:Canvas.getSnapTo", "method:Canvas.setSnapEdge", 
         "method:Canvas.getSnapEdge","method:Canvas.getParentElements", "method:Canvas.contains", "method:Canvas.showClickMask", 
         "method:Canvas.hideClickMask","method:Canvas.clickMaskUp", "method:Canvas.setRect", "method:Canvas.getLeft", 
         "method:Canvas.setLeft","method:Canvas.getTop", "method:Canvas.setTop", "method:Canvas.getWidth", 
         "method:Canvas.setWidth","method:Canvas.getHeight", "method:Canvas.setHeight", "method:Canvas.getRight", 
         "method:Canvas.setRight","method:Canvas.getBottom", "method:Canvas.setBottom", "method:Canvas.getScrollWidth", 
         "method:Canvas.getScrollHeight","method:Canvas.getScrollLeft", "method:Canvas.getScrollTop", "method:Canvas.setPageLeft", 
         "method:Canvas.setPageTop","method:Canvas.getPageLeft", "method:Canvas.getPageTop", "method:Canvas.getPageRight", 
         "method:Canvas.getPageBottom","method:Canvas.setMargin", "method:Canvas.setPadding", "method:Canvas.containsPoint", 
         "method:Canvas.visibleAtPoint","method:Canvas.intersects", "method:Canvas.intersectsRect", "method:Canvas.containsEvent", 
         "method:Canvas.getOffsetX","method:Canvas.getOffsetY", "method:Canvas.getScrollbarSize", 
         "method:Canvas.getViewportWidth","method:Canvas.getViewportHeight", "method:Canvas.getInnerHeight", 
         "method:Canvas.getInnerWidth","method:Canvas.getInnerContentHeight", "method:Canvas.getInnerContentWidth", 
         "method:Canvas.getVisibleWidth","method:Canvas.getVisibleHeight", "method:Canvas.moveBy", "method:Canvas.moveTo", 
         "method:Canvas.getVSnapOrigin","method:Canvas.getHSnapOrigin", "method:Canvas.showNextTo", "method:Canvas.resizeBy", 
         "method:Canvas.setPercentSource","method:Canvas.layoutChildren", "method:Canvas.resizeTo", "method:Canvas.parentResized", 
         "method:Canvas.setDragTracker","method:Canvas.shouldDragScroll", "method:Canvas.setOverflow", 
         "method:Canvas.adjustForContent","method:Canvas.getScrollBottom", "method:Canvas.getScrollRight", 
         "method:Canvas.scrollToTop","method:Canvas.scrollToBottom", "method:Canvas.scrollToLeft", 
         "method:Canvas.scrollToRight","method:Canvas.scrollBy", "method:Canvas.scrollByPercent", "method:Canvas.scrollTo", 
         "method:Canvas.scrolled","method:Canvas.scrollToPercent", "method:Canvas.show", "method:Canvas.hide", 
         "method:Canvas.isVisible","method:Canvas.setEnabled", "method:Canvas.setDisabled", "method:Canvas.enable", 
         "method:Canvas.disable","method:Canvas.isDisabled", "method:Canvas.isEnabled", "method:Canvas.setCanFocus", 
         "method:Canvas.focus","method:Canvas.blur", "method:Canvas.setAccessKey", "method:Canvas.setTabIndex", 
         "method:Canvas.bringToFront","method:Canvas.sendToBack", "method:Canvas.moveAbove", "method:Canvas.moveBelow", 
         "method:Canvas.getContents","method:Canvas.setContents", "method:Canvas.setBackgroundColor", 
         "method:Canvas.setBackgroundImage","method:Canvas.setBorder", "method:Canvas.setOpacity", "method:Canvas.setCursor", 
         "method:Canvas.handleHover","method:Canvas.updateHover", "method:Canvas.hoverHidden", "method:Canvas.hover", 
         "method:Canvas.getHoverHTML","method:Canvas.setClassName", "method:Canvas.setStyleName", 
         "method:Canvas.showContextMenu","method:Canvas.hideContextMenu", "method:Canvas.mouseOver", "method:Canvas.mouseDown", 
         "method:Canvas.rightMouseDown","method:Canvas.mouseStillDown", "method:Canvas.mouseMove", "method:Canvas.mouseOut", 
         "method:Canvas.mouseUp","method:Canvas.click", "method:Canvas.doubleClick", "method:Canvas.mouseWheel", 
         "method:Canvas.dragRepositionStart","method:Canvas.dragRepositionMove", "method:Canvas.dragRepositionStop", 
         "method:Canvas.dragStart","method:Canvas.dragMove", "method:Canvas.dragStop", "method:Canvas.dropOver", 
         "method:Canvas.dropMove","method:Canvas.dropOut", "method:Canvas.drop", "method:Canvas.keyDown", 
         "method:Canvas.keyUp","method:Canvas.keyPress", "method:Canvas.willAcceptDrop", "method:Canvas.getHSnapPosition", 
         "method:Canvas.getVSnapPosition","method:Canvas.shouldSnapOnDrop", "method:Canvas.getImgURL", "method:Canvas.imgHTML", 
         "method:Canvas.getImage","method:Canvas.setImage", "method:Canvas.linkHTML", "method:Canvas.setShowShadow", 
         "method:Canvas.hiliteCharacter","method:Canvas.focusChanged"],
        exampleConfig:"Canvas.xml",
        ref:"class:Canvas",
        classAttrs:["classAttr:Canvas.TAB_INDEX_FLOOR"],
        classMethods:["classMethod:Canvas.getEventEdge"],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:Canvas.animateTime", "attr:Canvas.animateAcceleration", 
         "attr:Canvas.animateMoveTime","attr:Canvas.animateResizeTime", "attr:Canvas.animateRectTime", 
         "attr:Canvas.animateFadeTime","attr:Canvas.animateScrollTime", "attr:Canvas.animateShowTime", 
         "attr:Canvas.animateHideTime","attr:Canvas.animateMoveAcceleration", "attr:Canvas.animateResizeAcceleration", 
         "attr:Canvas.animateRectAcceleration","attr:Canvas.animateScrollAcceleration", "attr:Canvas.animateShowAcceleration", 
         "attr:Canvas.animateHideAcceleration","attr:Canvas.layoutAlign", "attr:Canvas.showResizeBar", "attr:Canvas.resizeBarTarget", 
         "attr:Canvas.extraSpace","attr:Canvas.ID", "attr:Canvas.autoDraw", "attr:Canvas.parentElement", 
         "attr:Canvas.topElement","attr:Canvas.masterElement", "attr:Canvas.children", "attr:Canvas.peers", 
         "attr:Canvas.htmlElement","attr:Canvas.htmlPosition", "attr:Canvas.matchElement", "attr:Canvas.position", 
         "attr:Canvas.left","attr:Canvas.top", "attr:Canvas.width", "attr:Canvas.height", "attr:Canvas.defaultWidth", 
         "attr:Canvas.defaultHeight","attr:Canvas.minWidth", "attr:Canvas.maxWidth", "attr:Canvas.minHeight", 
         "attr:Canvas.maxHeight","attr:Canvas.autoShowParent", "attr:Canvas.visibility", "attr:Canvas.canSelectText", 
         "attr:Canvas.className","attr:Canvas.styleName", "attr:Canvas.contents", "attr:Canvas.dynamicContents", 
         "attr:Canvas.dynamicContentsVars","attr:Canvas.margin", "attr:Canvas.padding", "attr:Canvas.border", 
         "attr:Canvas.backgroundColor","attr:Canvas.backgroundImage", "attr:Canvas.backgroundRepeat", "attr:Canvas.appImgDir", 
         "attr:Canvas.skinImgDir","attr:Canvas.cursor", "attr:Canvas.disabledCursor", "attr:Canvas.opacity", 
         "attr:Canvas.overflow","attr:Canvas.showCustomScrollbars", "attr:Canvas.scrollbarSize", "attr:Canvas.disabled", 
         "attr:Canvas.enabled","attr:Canvas.redrawOnResize", "attr:Canvas.canFocus", "attr:Canvas.tabIndex", 
         "attr:Canvas.accessKey","attr:Canvas.contextMenu", "attr:Canvas.prompt", "attr:Canvas.canDrag", 
         "attr:Canvas.dragStartDistance","attr:Canvas.canDragScroll", "attr:Canvas.dragScrollDelay", 
         "attr:Canvas.dragIntersectStyle","attr:Canvas.canDragReposition", "attr:Canvas.dragRepositionCursor", 
         "attr:Canvas.canDragResize","attr:Canvas.resizeFrom", "attr:Canvas.canHover", "attr:Canvas.hoverDelay", 
         "attr:Canvas.showHover","attr:Canvas.hoverWidth", "attr:Canvas.hoverHeight", "attr:Canvas.hoverAlign", 
         "attr:Canvas.hoverVAlign","attr:Canvas.hoverWrap", "attr:Canvas.hoverStyle", "attr:Canvas.hoverOpacity", 
         "attr:Canvas.hoverMoveWithMouse","attr:Canvas.edgeCursorMap", "attr:Canvas.keepInParentRect", "attr:Canvas.dragAppearance", 
         "attr:Canvas.dragType","attr:Canvas.dragTarget", "attr:Canvas.showDragShadow", "attr:Canvas.dragOpacity", 
         "attr:Canvas.canDrop","attr:Canvas.canAcceptDrop", "attr:Canvas.canDropBefore", "attr:Canvas.dropTypes", 
         "attr:Canvas.mouseStillDownInitialDelay","attr:Canvas.mouseStillDownDelay", "attr:Canvas.doubleClickDelay", 
         "attr:Canvas.noDoubleClicks","attr:Canvas.percentSource", "attr:Canvas.percentBox", "attr:Canvas.snapTo", 
         "attr:Canvas.snapEdge","attr:Canvas.snapOffsetLeft", "attr:Canvas.snapOffsetTop", "attr:Canvas.snapToGrid", 
         "attr:Canvas.snapResizeToGrid","attr:Canvas.childrenSnapToGrid", "attr:Canvas.childrenSnapResizeToGrid", 
         "attr:Canvas.snapHGap","attr:Canvas.snapVGap", "attr:Canvas.snapHDirection", "attr:Canvas.snapVDirection", 
         "attr:Canvas.snapAxis","attr:Canvas.snapOnDrop", "attr:Canvas.destroyed", "attr:Canvas.destroying", 
         "attr:Canvas.showEdges","attr:Canvas.edgeSize", "attr:Canvas.edgeOffset", "attr:Canvas.edgeImage", 
         "attr:Canvas.customEdges","attr:Canvas.edgeBackgroundColor", "attr:Canvas.edgeShowCenter", 
         "attr:Canvas.edgeCenterBackgroundColor","attr:Canvas.showShadow", "attr:Canvas.shadowDepth", "attr:Canvas.shadowOffset", 
         "attr:Canvas.shadowSoftness","attr:Canvas.shadowImage"],
        description:"Canvas is the base abstraction for cross-browser DHTML drawing.\n		All DHTML widgets inherit from the Canvas class.",
        name:"Canvas",
        seeAlso:[],
        type:"class"
    },
    "method:Array.unsort":{
        ref:"method:Array.unsort",
        flags:"A",
        description:"		Turn sorting off for this array, indicating that the current sort\n		order should be preserved.  Return true if this is supported in thist List.\n\n		Some implementations may not support this -- they should return false\n		to indicate to the caller that sort order must be maintained (eg: in\n		the case where sort order is dervied from the server, etc).\n\n",
        name:"unsort",
        seeAlso:[],
        returns:{description:"true == list supports unsorting, false == not supported.", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["sorting"]
    },
    "attr:PickList.pickListCriteria":{
        ref:"attr:PickList.pickListCriteria",
        flags:"IRWA",
        description:"If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is\n set) this property can be used to provide static filter criteria when retrieving the data\n for the pickList.",
        name:"pickListCriteria",
        seeAlso:[],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "method:CellSelection.cellIsSelected":{
        ref:"method:CellSelection.cellIsSelected",
        flags:"",
        description:"			Return true if a particular item is selected\n",
        name:"cellIsSelected",
        seeAlso:[],
        params:[
            {description:"row index of the cell to check", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column index of the cell to check", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == object is selected								false == object is not selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection", "selection"]
    },
    "attr:StretchImgButton.selected":{
        ref:"attr:StretchImgButton.selected",
        flags:"IRW",
        description:"Whether this component is selected.  For some components, selection affects appearance.",
        name:"selected",
        setter:["setSelected"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "method:CubeGrid.getEditValue":{
        ref:"method:CubeGrid.getEditValue",
        flags:"",
        description:"\n Returns the current temporary locally stored edit value for a cell being edited.\n Note this is the ${isc.DocUtils.linkForRef('attr:CubeGrid.valueProperty','valueProperty')} that will be saved for the\n cell in question.\n\n",
        name:"getEditValue",
        seeAlso:[],
        params:[
            {description:"index of the row for which the editValue should be returned", 
             optional:false,name:"rowNum", defaultValue:null, type:"number"},
            {description:"index of column for which value should be returned", optional:false, 
             name:"colNum",defaultValue:null, type:"number"}
        ],
        returns:{description:"edit value for the cell", type:"any"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "method:DynamicForm.hideItem":{
        ref:"method:DynamicForm.hideItem",
        flags:"",
        description:" Hide a form item via ${isc.DocUtils.linkForRef('method:FormItem.hide')}\n",
        name:"hideItem",
        seeAlso:[],
        params:[
            {description:"Name of the item to show", optional:false, name:"itemName", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:Window.maximized":{
        ref:"attr:Window.maximized",
        flags:"IRW",
        description:"Is this window maximized. If true at init time, the window will be drawn maximized.\n To set this property at runtime use ${isc.DocUtils.linkForRef('method:Window.maximize')} or ${isc.DocUtils.linkForRef('method:Window.restore')}.",
        name:"maximized",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "method:ListGrid.getEditRow":{
        ref:"method:ListGrid.getEditRow",
        flags:"",
        description:"\n  Returns the index of the row being edited.\n\n",
        name:"getEditRow",
        seeAlso:[],
        returns:{description:"Index of the current edit row", type:"number"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Window.bodyStyle":{
        ref:"attr:Window.bodyStyle",
        flags:"IRW",
        description:"Style of the Window body.",
        name:"bodyStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"windowBody\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "method:Canvas.setEnabled":{
        ref:"method:Canvas.setEnabled",
        deprecated:"As of Smartclient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('method:Canvas.setDisabled')}",
        flags:"A",
        description:" set the enabled state of this object.\n\n",
        name:"setEnabled",
        seeAlso:[],
        params:[
            {description:"pass false to disable or anything else to enable", optional:false, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["enable"]
    },
    "method:ValuesManager.addMembers":{
        ref:"method:ValuesManager.addMembers",
        flags:"",
        description:"  Add multiple new member forms to this valuesManager.\n",
        name:"addMembers",
        seeAlso:[
            {ref:"method:ValuesManager.addMember", description:null}
        ],
        params:[
            {description:"array of forms to add to this valuesManager as members.", optional:false, 
             name:"members",defaultValue:null, type:"array"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "classAttr:Hover.moveWithMouse":{
        ref:"classAttr:Hover.moveWithMouse",
        flags:"RWA",
        description:"When the Hover canvas is shown by default, should it move as the user moves the\n mouse pointer?<br>\n May be overridden by including a <code>moveWithMouse</code> attribute on the \n properties block passed to ${isc.DocUtils.linkForRef('classMethod:Hover.show')}",
        name:"moveWithMouse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"classAttr",
        definingClass:"class:Hover"
    },
    "method:Layout.reorderMembers":{
        ref:"method:Layout.reorderMembers",
        flags:"",
        description:" Move a range of members to a new position\n		    \n",
        name:"reorderMembers",
        seeAlso:[],
        params:[
            {description:"beginning of range of members to move", optional:false, name:"start", 
             defaultValue:null,type:"number"},
            {description:"end of range of members to move, non-inclusive", optional:false, name:"end", 
             defaultValue:null,type:"number"},
            {description:"new position to move the members to", optional:false, name:"newPosition", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "method:Window.setShowCloseButton":{
        ref:"method:Window.setShowCloseButton",
        flags:"",
        description:" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showCloseButton')} to show / hide the closeButton\n",
        name:"setShowCloseButton",
        seeAlso:[
            {ref:"attr:Window.headerControls", description:null},
            {ref:"attr:Window.showCloseButton", description:null}
        ],
        type:"method",
        definingClass:"class:Window"
    },
    "class:MenuButton":{
        methods:["method:MenuButton.setShowMenuButtonImage", "method:MenuButton.setShowMenuBelow"],
        ref:"class:MenuButton",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:MenuButton.title", "attr:MenuButton.height", "attr:MenuButton.showMenuButtonImage", 
         "attr:MenuButton.menuButtonImage","attr:MenuButton.menuButtonImageUp", "attr:MenuButton.hiliteAccessKey", 
         "attr:MenuButton.showMenuBelow","attr:MenuButton.menu", "attr:MenuButton.menuAnimationEffect"],
        description:"Simple subclass of button associated with a menu widget (gets shown below the button).",
        name:"MenuButton",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.getFieldName":{
        ref:"method:ListGrid.getFieldName",
        flags:"A",
        description:" Given a column number or field id, return the field name of a field.\n",
        name:"getFieldName",
        seeAlso:[],
        params:[
            {description:"number or id of the field.", optional:false, name:"colNum", defaultValue:null, 
             type:"number or id"}
        ],
        returns:{description:"Name of the field.", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["display"]
    },
    "method:CubeGrid.selectCells":{
        ref:"method:CubeGrid.selectCells",
        flags:"",
        description:"\n  Select/deselect cells that match a list of facetValues.  \n  Also supports an explicit list of cells or cellIds\n\n      <br><i>methodType</i> action\n",
        name:"selectCells",
        seeAlso:[],
        params:[
            {description:"cells to select", optional:false, name:"cellList", defaultValue:null, 
             type:"Array of cells | facetValues object"},
            {description:"new selection state (if null, defaults to true)", optional:true, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:SearchForm.search":{
        ref:"method:SearchForm.search",
        flags:"",
        description:" Triggered when a SubmitItem is included in the form is submitted and gets pressed.\n \n",
        name:"search",
        seeAlso:[
            {ref:"method:DynamicForm.submit", description:null},
            {ref:"method:DynamicForm.submitValues", description:null}
        ],
        params:[
            {description:"the search criteria from the form", optional:false, name:"criteria", 
             defaultValue:null,type:"Criteria"},
            {description:"the form being submitted", optional:false, name:"form", defaultValue:null, 
             type:"SearchForm"}
        ],
        type:"method",
        definingClass:"class:SearchForm",
        groups:["submitting"]
    },
    "class:BrowserPlugin":{
        methods:[],
        ref:"class:BrowserPlugin",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Client Bridges"],
        attrs:[],
        description:"Container for a Browser Plugin.",
        name:"BrowserPlugin",
        seeAlso:[],
        type:"class",
        requiresModules:["PluginBridges"]
    },
    "attr:ListGrid.groupLeadingIndent":{
        ref:"attr:ListGrid.groupLeadingIndent",
        flags:"IRW",
        description:"Default number of pixels by which to indent all groups.",
        name:"groupLeadingIndent",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null},
            {ref:"method:ListGrid.getGroupNodeHTML", description:null}
        ],
        valueType:"Number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:FormItem.emptyDisplayValue":{
        ref:"attr:FormItem.emptyDisplayValue",
        flags:"IRW",
        description:"Text to display when this form item has a null or undefined value.",
        name:"emptyDisplayValue",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "attr:RPCRequest.ignoreTimeout":{
        ref:"attr:RPCRequest.ignoreTimeout",
        flags:"IRWA",
        description:"When set to true, no reply is expected from the server.  However, if a reply is received, it will\n be processed.<p>\n\n Note: setting this to true, forces ${isc.DocUtils.linkForRef('attr:RPCRequest.sendNoQueue')} to <code>true</code> for\n this request.",
        name:"ignoreTimeout",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "method:Dialog.noClick":{
        ref:"method:Dialog.noClick",
        flags:"",
        description:" Handle a click on the 'no' button of this Dialog.\n Default implementation is to return <code>false</code>.\n Override to do something else.\n",
        name:"noClick",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "method:StretchImgButton.deselect":{
        ref:"method:StretchImgButton.deselect",
        flags:"",
        description:" Select this object.\n",
        name:"deselect",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "attr:DataSource.useLocalValidators":{
        ref:"attr:DataSource.useLocalValidators",
        flags:"A",
        description:"Whether to attempt validation on the client at all for this DataSource.\n <p>\n Disabling client-side validation entirely is a good way to test server-side validation.",
        name:"useLocalValidators",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["validation"]
    },
    "method:DataSource.getField":{
        ref:"method:DataSource.getField",
        flags:"",
        description:" Return the field definition object.\n",
        name:"getField",
        seeAlso:[],
        params:[
            {description:"Name of the field to retrieve", optional:false, name:"fieldName", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"field object", type:"DataSourceField"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "group:printing":{
        ref:"group:printing",
        refs:[],
        name:"printing",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.backgroundImage":{
        ref:"attr:Canvas.backgroundImage",
        flags:"IR",
        description:"URL for a background image for this widget (corresponding to the CSS \"background-image\"\n attribute).",
        name:"backgroundImage",
        setter:["setBackgroundImage"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:ResultSet.transformData":{
        ref:"method:ResultSet.transformData",
        flags:"",
        description:" <code>transformData()</code> provides an opportunity to modify data that has been\n returned from the server, before it has been integrated into the client-side cache.\n <P>\n If data is not immediately suited for client-side use when it is returned from the\n ultimate data store, this method allows it to be transformed on the client so that such\n transform operations do not impact server scalability.\n <P>\n It is legal for <code>transformData()</code> to modify not only the records, but also\n their number (by modifying startRow and endRow on the ${isc.DocUtils.linkForRef('class:DSResponse')} object).\n <P>\n See also ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} for an alternative entry point which\n applies to all DSResponses for a DataSource.\n\n",
        name:"transformData",
        seeAlso:[],
        params:[
            {description:"data returned from the server", optional:false, name:"newData", 
             defaultValue:null,type:"any"},
            {description:"the DSResponse object returned by the                             server", 
             optional:false,name:"dsResponse", defaultValue:null, type:"DSResponse"}
        ],
        returns:{description:"the modified data, ready to be cached", type:"Array of Objects"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:DataSourceField.type":{
        ref:"attr:DataSourceField.type",
        flags:"IR",
        description:"Type of this field.  Required for all DataSource fields.\n <P>\n Field type may imply automatic validators (for example, an integer field cannot accept the\n value \"foo\").  Field type also affects the default behaviors of DataBound components, for\n example, if a field is declared of type \"date\", components that edit that field will\n automatically choose a date-editing interface with pop-up date picker.",
        name:"type",
        seeAlso:[],
        valueType:"FieldType",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["basics"]
    },
    "method:CubeGrid.deselectAllFacetValues":{
        ref:"method:CubeGrid.deselectAllFacetValues",
        flags:"",
        description:"\n deselect all headers in a headerBar (specified by facetId) or\n all headerBars (if no facetId)\n\n  <br><i>methodType</i> action\n",
        name:"deselectAllFacetValues",
        seeAlso:[],
        params:[
            {description:"ID of facet - if null, selects all headerbars' headers", optional:true, 
             name:"facetId",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "class:HTMLPane":{
        methods:[],
        ref:"class:HTMLPane",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:[],
        description:"Use the HTMLPane component to display HTML content in a pane of specified size. If the HTML\n content is larger than the size of the pane, the pane will provide scrollbars for viewing\n clipped content.\n <P>\n You can set the size of an HTMLPane directly via the width and height properties, or\n indirectly by placing the HTMLPane in a container component (${isc.DocUtils.linkForRef('class:Layout')}, ${isc.DocUtils.linkForRef('class:Window')}, \n ${isc.DocUtils.linkForRef('class:SectionStack')}, etc) that manages the sizes of its members.",
        name:"HTMLPane",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('htmlPane')}"]
    },
    "classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED":{
        ref:"classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED",
        flags:"R",
        description:"Indicates that too many authentication attempts have been made and the server refuses to\n accept any more login attempts.",
        name:"STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-6",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "attr:PickTreeItem.canSelectParentItems":{
        ref:"attr:PickTreeItem.canSelectParentItems",
        flags:"IRW",
        description:"If true, clicking or pressing Enter on a menu item that has a submenu will\n		select that item (with standard behavior of hiding the menus, calling click\n		handlers, etc) instead of showing the submenu.",
        name:"canSelectParentItems",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('treesEditing')}"],
        definingClass:"class:PickTreeItem",
        groups:["selection"]
    },
    "attr:FusionChart.chartProperties":{
        ref:"attr:FusionChart.chartProperties",
        flags:"IRA",
        description:"Properties to passthrough to the 'graph' element of the XML generated for FusionCharts.\n <P>\n Some automatic conversions are done:\n <ul>\n <li> boolean values become '0' and '1' as FusionCharts expects </li>\n <li> color values with a leading '#' have the '#' stripped to match FusionCharts </li>\n </ul>",
        name:"chartProperties",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FusionChart"
    },
    "attr:Layout.leaveScrollbarGap":{
        ref:"attr:Layout.leaveScrollbarGap",
        flags:"IR",
        description:"Whether to leave a gap for a vertical scrollbar even when one is not actually present.\n <P>\n This setting avoids the layout resizing all members when the vertical scrollbar is\n introduced or removed, which can avoid unnecessary screen shifting and improve\n performance.",
        name:"leaveScrollbarGap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Layout"
    },
    "method:List.addAt":{
        ref:"method:List.addAt",
        flags:"",
        description:" Add a single item to this array at a specific position in the list, sliding other items over\n to fit.\n\n",
        name:"addAt",
        seeAlso:[],
        params:[
            {description:"object to add", optional:false, name:"obj", defaultValue:null, type:"object"},
            {description:"position in the list to add at", optional:false, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"object that was added", type:"object"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "attr:Applet.classID":{
        ref:"attr:Applet.classID",
        flags:"IR",
        description:"This attribute is used only with useTag: \"object\".  In combination with \n  ${isc.DocUtils.linkForRef('attr:Applet.objectCodeBase')} this tag specifies the minimum JVM version required to view\n  this applet and the URL from which the JVM can be downloaded.\n  <p>\n  The default settings match the default behavior of the &lt;applet&gt; tag which requires JVM\n  1.3 or higher.\n  <p>\n  The default classID is: \"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93\"\n  <p>\n  For notes on this feature see: <a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie' onclick=\"window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie');return false;\">http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html#in-ie</a>",
        name:"classID",
        seeAlso:[
            {ref:"attr:Applet.objectCodeBase", description:null}
        ],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:StatefulCanvas.showDisabled":{
        ref:"attr:StatefulCanvas.showDisabled",
        flags:"IRW",
        description:"Should we visibly change state when disabled?",
        name:"showDisabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "class:SVG":{
        methods:[],
        ref:"class:SVG",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Client Bridges"],
        attrs:["attr:SVG.pluginsPage", "attr:SVG.src"],
        description:"ISC Abstraction for SVG controls",
        name:"SVG",
        seeAlso:[],
        type:"class",
        requiresModules:["PluginBridges"]
    },
    "method:FormItem.itemHover":{
        ref:"method:FormItem.itemHover",
        flags:"A",
        description:"  Optional stringMethod to fire when the user hovers over this item.\n  Return false to suppress default behavior of showing a hover canvas containing the\n  HTML returned by <code>formItem.itemHoverHTML()</code> / \n  <code>form.itemHoverHTML()</code>.\n\n",
        name:"itemHover",
        seeAlso:[
            {ref:"method:FormItem.titleHover", description:null},
            {ref:"method:FormItem.itemHoverHTML", description:null}
        ],
        params:[
            {description:"This items form", optional:false, name:"form", defaultValue:null, 
             type:"DynamicForm"},
            {description:"Pointer to this item", optional:false, name:"item", defaultValue:null, 
             type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "method:Array.removeAt":{
        ref:"method:Array.removeAt",
        flags:"",
        description:" Remove the item at the specified position, rearranging all subsequent items to fill the gap\n\n",
        name:"removeAt",
        seeAlso:[],
        params:[
            {description:"position to remove", optional:false, name:"pos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"item that was removed", type:"any"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "attr:Slider.roundValues":{
        ref:"attr:Slider.roundValues",
        flags:"IRW",
        description:"Specifies whether the slider value should be rounded to the nearest integer.",
        name:"roundValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:ResultSet.rangeIsLoaded":{
        ref:"method:ResultSet.rangeIsLoaded",
        flags:"A",
        description:" Whether the given range of rows has been loaded.\n\n Unlike getRange(), will not trigger a server fetch.  \n\n",
        name:"rangeIsLoaded",
        seeAlso:[],
        params:[
            {description:"start position, inclusive", optional:false, name:"startRow", 
             defaultValue:null,type:"number"},
            {description:"end position, exclusive", optional:false, name:"endRow", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"true if all rows in the given range have been loaded, false if any rows in                   the range have not been loaded or are still in the process of being loaded", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:TabSet.skinImgDir":{
        ref:"attr:TabSet.skinImgDir",
        flags:"IR",
        description:"Default directory for skin images (those defined by the class), relative to the\n Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"images/TabSet/\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["images"]
    },
    "attr:StretchImgButton.titleStyle":{
        ref:"attr:StretchImgButton.titleStyle",
        flags:"IRW",
        description:"CSS style applied to the title text only.  Defaults to ${isc.DocUtils.linkForRef('attr:StretchImgButton.baseStyle')} when unset.\n <P>\n With a separate <code>titleStyle</code> and ${isc.DocUtils.linkForRef('attr:StretchImgButton.baseStyle')} set, you can provide a\n backgroundColor via <code>baseStyle</code> that will allow translucent .png media to be\n \"tinted\" by the underlying background color, so that a single set of media can provide\n range of color options.  In this usage, the <code>titleStyle</code> should generally not\n specify a background color as this would block out the media that appears behind the\n title.",
        name:"titleStyle",
        setter:["setTitleStyle"],
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "attr:ListGrid.sortDescendingImage":{
        ref:"attr:ListGrid.sortDescendingImage",
        flags:"IRWA",
        description:"Image to show when sorting descending. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.",
        name:"sortDescendingImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:PickList.valueField":{
        ref:"attr:PickList.valueField",
        flags:"IRA",
        getter:["FormItem.getValueFieldName"],
        description:"If this form item maps data values to display values by retrieving the \n ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} values from an \n ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource','optionDataSource')}, this property \n denotes the the field to use as the underlying data value in records from the \n optionDataSource.<br>\n If unset, assumed to be the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this form item.",
        name:"valueField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList",
        groups:["display_values"]
    },
    "method:DateChooser.setData":{
        ref:"method:DateChooser.setData",
        flags:"",
        description:" Set the picker to show the given date.\n \n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"new value", optional:false, name:"date", defaultValue:null, type:"Date"}
        ],
        type:"method",
        definingClass:"class:DateChooser"
    },
    "attr:LinkItem.linkTitle":{
        ref:"attr:LinkItem.linkTitle",
        flags:"IRW",
        description:"Optional title text to display for this item's link. If unspecified the value of the item\n will be the title text as well as the target of the link.",
        name:"linkTitle",
        setter:["setLinkTitle"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:LinkItem"
    },
    "attr:DateChooser.cancelButtonTitle":{
        ref:"attr:DateChooser.cancelButtonTitle",
        flags:"IRW",
        description:"Title for the cancellation button.",
        name:"cancelButtonTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Cancel\"",
        type:"attr",
        definingClass:"class:DateChooser",
        groups:["i18nMessages"]
    },
    "attr:Facet.canCollapse":{
        ref:"attr:Facet.canCollapse",
        flags:"IR",
        description:"For tree facets, whether expand/collapse controls should be shown.",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"facet.isTree",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:Window.canDragResize":{
        ref:"attr:Window.canDragResize",
        flags:"IRW",
        description:"Can the window be drag-resized? If true the window may be drag resized from its edges,\n and if showing, via the resiszer icon in the footer.",
        name:"canDragResize",
        seeAlso:[
            {ref:"attr:Window.showResizer", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["dragging", "resizing"]
    },
    "method:RichTextEditor.getValue":{
        ref:"method:RichTextEditor.getValue",
        flags:"",
        description:"  Retrieves the current value of the edit area.\n",
        name:"getValue",
        seeAlso:[],
        type:"method",
        definingClass:"class:RichTextEditor"
    },
    "method:DynamicForm.editSelectedData":{
        ref:"method:DynamicForm.editSelectedData",
        flags:"",
        description:"\n Edit the record selected in the specified selection component (typically a\n ${isc.DocUtils.linkForRef('class:ListGrid')}).\n <P>\n Updates the values of this editor to match the selected record's values.\n <P>\n If this form has a dataSource, then saving via ${isc.DocUtils.linkForRef('method:DynamicForm.saveData')} will use the \n \"update\" operation type.\n\n",
        name:"editSelectedData",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"the ListGrid or ID of a ${isc.DocUtils.linkForRef('class:ListGrid')} whose currently selected\n     record(s) is/are to be edited", 
             optional:false,name:"selectionComponent", defaultValue:null, type:"ListGrid or ID"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('updateOperation')}"],
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "method:DynamicForm.setItems":{
        ref:"method:DynamicForm.setItems",
        flags:"",
        description:" Synonym for ${isc.DocUtils.linkForRef('method:DynamicForm.setFields')}\n\n",
        name:"setItems",
        seeAlso:[],
        params:[
            {description:"list of new items to show in the form", optional:false, name:"itemList", 
             defaultValue:null,type:"Array of objects"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["elements"]
    },
    "attr:Slider.thumbSrc":{
        ref:"attr:Slider.thumbSrc",
        flags:"IRW",
        description:"The base filename for the slider thumb images.\n The filenames for the thumb icons are assembled from this base filename and the state of the\n thumb, as follows:<br>\n Assume the thumbSrc is set to <code>{baseName}.{extension}</code><br>\n The full set of images to be displayed is:<br>\n For horizontal sliders:\n <ul>\n <li><code>h{baseName}.{extension}</code>: default enabled appearance.\n <li><code>h{baseName}_down.{extension}</code>:  appearance when the slider is enabled and the\n     thumb is clicked.\n <li><code>h{baseName}_off.{extension}</code>:  appearance when the slider is disabled.\n </ul>\n For vertical sliders:\n <ul>\n <li><code>v{baseName}.{extension}</code>: default enabled appearance.\n <li><code>v{baseName}_down.{extension}</code>:  appearance when the slider is enabled and the\n     thumb is clicked.\n <li><code>v{baseName}_off.{extension}</code>:  appearance when the slider is disabled.\n </ul>",
        name:"thumbSrc",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"thumb.gif\"",
        type:"attr",
        definingClass:"class:Slider"
    },
    "group:statusCodes":{
        ref:"group:statusCodes",
        refs:["classAttr:RPCResponse.STATUS_SUCCESS", "classAttr:RPCResponse.STATUS_FAILURE", 
         "classAttr:RPCResponse.STATUS_VALIDATION_ERROR","classAttr:RPCResponse.STATUS_LOGIN_INCORRECT", 
         "classAttr:RPCResponse.STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED","classAttr:RPCResponse.STATUS_LOGIN_REQUIRED", 
         "classAttr:RPCResponse.STATUS_LOGIN_SUCCESS","classAttr:RPCResponse.STATUS_TRANSPORT_ERROR", 
         "classAttr:RPCResponse.STATUS_SERVER_TIMEOUT"],
        description:"Status codes returned by the server as rpcResponse.status.<br>\n See the error handling doc section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager')} for more \n information on these codes",
        name:"statusCodes",
        seeAlso:[],
        type:"group"
    },
    "method:DynamicForm.showItem":{
        ref:"method:DynamicForm.showItem",
        flags:"",
        description:" Show a form item via ${isc.DocUtils.linkForRef('method:FormItem.show')}\n",
        name:"showItem",
        seeAlso:[],
        params:[
            {description:"Name of the item to show", optional:false, name:"itemName", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:Slider.numValues":{
        ref:"attr:Slider.numValues",
        flags:"IRW",
        description:"The number of discrete values represented by slider. If specified, the range of valid\n values (between <code>minValue</code> and <code>maxValue</code>) will be divided into\n this many steps. As the thumb is moved along the track it will only select these values\n and appear to jump between the steps.",
        name:"numValues",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:Slider"
    },
    "classAttr:isc.itemIndent":{
        ref:"classAttr:isc.itemIndent",
        flags:"IRW",
        description:"Size, in pixels, of indentation of all member items. Items will be offset\n and reduced in width by this amount. Overridden by\n ${isc.DocUtils.linkForRef('classAttr:isc.itemStartIndent')} or ${isc.DocUtils.linkForRef('classAttr:isc.itemEndIndent')}.\n Setting itemIndent is equivalent to setting itemStartIndent to the same amount\n and itemEndIndent to 0.",
        name:"itemIndent",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:isc",
        groups:["layoutMember"]
    },
    "attr:DataSourceField.required":{
        ref:"attr:DataSourceField.required",
        flags:"IR",
        description:"Indicates this field must be non-null in order for a record to pass validation.\n <P>\n Note that <code>required</code> should not be set for a server-generated field, such as a\n sequence, or validation will fail on the client.",
        name:"required",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["dataType"]
    },
    "group:dataChanged":{
        ref:"group:dataChanged",
        title:"Data Changes",
        refs:[],
        description:"Operations that change the Array",
        name:"dataChanged",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.dragMove":{
        ref:"method:Canvas.dragMove",
        flags:"A",
        description:" Executed every time the mouse moves while dragging this canvas.\n\n",
        name:"dragMove",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to cancel drag interaction.", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dragPan')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:Window.restore":{
        ref:"method:Window.restore",
        flags:"",
        description:" Restores the window to its specified height and width after a call to ${isc.DocUtils.linkForRef('method:Window.minimize')} or \n ${isc.DocUtils.linkForRef('method:Window.maximize')}. Called from a click on the restore button shown in place of the \n minimize or maximize button when the window is minimized or maximized.<br>\n Resizing will occur as an animation if ${isc.DocUtils.linkForRef('attr:Window.animateMinimize')} is true.\n",
        name:"restore",
        seeAlso:[],
        type:"method",
        definingClass:"class:Window"
    },
    "attr:ListGrid.longTextEditorThreshold":{
        ref:"attr:ListGrid.longTextEditorThreshold",
        flags:"IRW",
        description:"When the length of the field specified by ${isc.DocUtils.linkForRef('attr:DataSourceField.length')} exceeds this\n value, the ListGrid shows an edit field of type ${isc.DocUtils.linkForRef('attr:ListGrid.longTextEditorType')}\n rather than the standard text field when the field enters inline edit mode.",
        name:"longTextEditorThreshold",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"255",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:StretchImgButton.action":{
        ref:"method:StretchImgButton.action",
        flags:"",
        description:" This property contains the default 'action' for the Button to fire when activated.\n",
        name:"action",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton"
    },
    "method:Array.last":{
        ref:"method:Array.last",
        flags:"",
        description:" Return the last item in this list\n\n",
        name:"last",
        seeAlso:[],
        returns:{description:"last item in the list", type:"any"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:DynamicForm.itemHoverDelay":{
        ref:"attr:DynamicForm.itemHoverDelay",
        flags:"IRW",
        description:"If the user rolls over an item, how long a delay before we fire any hover action / show\n a hover for that item?",
        name:"itemHoverDelay",
        seeAlso:[
            {ref:"attr:FormItem.hoverDelay", description:null}
        ],
        valueType:"number",
        defaultValue:"500",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "group:dataChanges":{
        ref:"group:dataChanges",
        refs:[],
        name:"dataChanges",
        seeAlso:[],
        type:"group"
    },
    "attr:HTMLFlow.captureSCComponents":{
        ref:"attr:HTMLFlow.captureSCComponents",
        flags:"IR",
        description:"If true, SmartClient components created while executing the loaded HTML are captured\n for rendering inside the HTMLFlow.",
        name:"captureSCComponents",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "method:Flashlet.getPluginHandle":{
        ref:"method:Flashlet.getPluginHandle",
        flags:"A",
        description:" \n  Returns a handle to the flashlet DOM element (valid only after the component has been drawn).  \n\n",
        name:"getPluginHandle",
        seeAlso:[],
        type:"method",
        definingClass:"class:Flashlet"
    },
    "attr:StatefulCanvas.iconHeight":{
        ref:"attr:StatefulCanvas.iconHeight",
        flags:"IR",
        description:"Height in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "group:eventHandling":{
        ref:"group:eventHandling",
        refs:["method:DynamicForm.focusInItem", "method:FormItem.focusInItem", 
         "method:FormItem.blurItem","method:FormItem.focus", "method:FormItem.blur", "method:FormItem.click", 
         "method:FormItem.change","method:FormItem.changed", "method:FormItem.keyPress", "method:ButtonItem.click"],
        name:"eventHandling",
        seeAlso:[],
        type:"group"
    },
    "class:Tree":{
        methods:["method:Tree.isRoot", "method:Tree.linkNodes", "method:Tree.getRoot", 
         "method:Tree.setRoot","method:Tree.getName", "method:Tree.getTitle", "method:Tree.getPath", 
         "method:Tree.getParentPath","method:Tree.getParent", "method:Tree.getParents", "method:Tree.getLevel", 
         "method:Tree.isFolder","method:Tree.isLeaf", "method:Tree.findById", "method:Tree.find", 
         "method:Tree.getChildren","method:Tree.getFolders", "method:Tree.getLeaves", "method:Tree.hasChildren", 
         "method:Tree.hasFolders","method:Tree.hasLeaves", "method:Tree.isDescendantOf", "method:Tree.getDescendants", 
         "method:Tree.getDescendantFolders","method:Tree.getDescendantLeaves", "method:Tree.dataChanged", "method:Tree.add", 
         "method:Tree.addList","method:Tree.move", "method:Tree.remove", "method:Tree.removeList", "method:Tree.isOpen", 
         "method:Tree.openFolder","method:Tree.openFolders", "method:Tree.closeFolder", "method:Tree.closeFolders", 
         "method:Tree.openAll","method:Tree.closeAll", "method:Tree.getOpenList", "method:Tree.getLength", 
         "method:Tree.indexOf","method:Tree.lastIndexOf"],
        ref:"class:Tree",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System"],
        attrs:["attr:Tree.modelType", "attr:Tree.isFolderProperty", "attr:Tree.defaultIsFolder", 
         "attr:Tree.pathDelim","attr:Tree.nameProperty", "attr:Tree.titleProperty", "attr:Tree.idField", 
         "attr:Tree.parentIdField","attr:Tree.childrenProperty", "attr:Tree.openProperty", "attr:Tree.data", 
         "attr:Tree.rootValue","attr:Tree.root", "attr:Tree.showRoot", "attr:Tree.autoOpenRoot", 
         "attr:Tree.defaultNodeTitle"],
        description:"A Tree is a data model representing a set of objects linked into a hierarchy.\n <P>\n A Tree has no visual presentation, it is displayed by a ${isc.DocUtils.linkForRef('class:TreeGrid')} when supplied as\n ${isc.DocUtils.linkForRef('attr:TreeGrid.data')}.  \n <P>\n A Tree can be constructed out of a List of objects with interlinked by IDs or via explicitly\n specified Arrays of child objects.  See ${isc.DocUtils.linkForRef('attr:Tree.modelType')} for an explanation of how\n to pass data to a Tree.\n <P>\n Typical usage is to call ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')} to cause automatic creation of a \n ${isc.DocUtils.linkForRef('class:ResultTree')}, which is a type of Tree that automatically handles loading data on \n demand.  For information on DataBinding Trees, see ${isc.DocUtils.linkForRef('group:treeDataBinding')}.",
        name:"Tree",
        seeAlso:[],
        type:"class"
    },
    "method:Window.shouldDismissOnEscape":{
        ref:"method:Window.shouldDismissOnEscape",
        flags:"",
        description:" Should this window be dismissed (same effect as pressing the \"Cancel\" button) when the \n user presses the \"Escape\" key?<br>\n Default behavior: if ${isc.DocUtils.linkForRef('attr:Window.dismissOnEscape')} is set, just return it. Otherwise return\n true if this window is showing a \"close\" control in the header \n (see ${isc.DocUtils.linkForRef('attr:Window.headerControls')}).\n",
        name:"shouldDismissOnEscape",
        seeAlso:[],
        returns:{description:"true if the window should be dismissed when the user hits escape", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Window"
    },
    "method:SectionStack.getSectionHeader":{
        ref:"method:SectionStack.getSectionHeader",
        flags:"",
        description:" Return the SectionHeader for a section.\n <P>\n This will be an instance of the ${isc.DocUtils.linkForRef('attr:SectionStack.sectionHeaderClass')}.  Since different\n SectionStacks may use different header classes, be careful about what APIs you rely on\n for the section header unless you have explicitly set the\n <code>sectionHeaderClass</code>.  In particular, use APIs such as\n ${isc.DocUtils.linkForRef('method:SectionStack.setSectionTitle')} to manipulate header indirectly wherever possible, as high\n performance SectionStacks designed for very large numbers of sections may cache and\n re-use headers or use other strategies that would make it invalid to store a pointer to\n a section header, assumed the header is a layout member, etc.\n\n",
        name:"getSectionHeader",
        seeAlso:[],
        params:[
            {description:"ID or index of the section for which you want the header", optional:false, 
             name:"section",defaultValue:null, type:"String or Number"}
        ],
        returns:{description:"the section header indicated", type:"SectionHeader"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "method:Canvas.hideContextMenu":{
        ref:"method:Canvas.hideContextMenu",
        flags:"A",
        description:"\n The default implementation of this method hides the contextMenu currently being shown for this\n component (which occurs when the mouse button that toggles the context menu is released).\n Override if you want some other behavior.	\n\n",
        name:"hideContextMenu",
        seeAlso:[
            {ref:"method:Canvas.showContextMenu", description:null},
            {ref:"method:Menu.hideContextMenu", description:null},
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:Window.showHeaderIcon":{
        ref:"attr:Window.showHeaderIcon",
        flags:"IRW",
        description:"If true, we show an icon on the left in the header.",
        name:"showHeaderIcon",
        setter:["setShowHeaderIcon"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "method:Canvas.getInnerContentWidth":{
        ref:"method:Canvas.getInnerContentWidth",
        flags:"A",
        description:"  Returns the amount of space available for interior content (or relatively positioned child\n  widget(s)) without introducing clipping, scrolling or overflow.<br>\n  This is the space within the viewport of the widget (not including padding, and excluding \n  margins, borders or scrollbars) rendered at its specified size.\n\n",
        name:"getInnerContentWidth",
        seeAlso:[
            {ref:"method:Canvas.getInnerContentHeight", description:null},
            {ref:"method:Canvas.getInnerHeight", description:null},
            {ref:"method:Canvas.getInnerWidth", description:null}
        ],
        returns:{description:"inner height of the widget in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Validator.condition":{
        ref:"method:Validator.condition",
        flags:"",
        description:" For a validator that is not one of the built-in ${isc.DocUtils.linkForRef('class:ValidatorTypes')}, a function or\n String expression to evaluate to see if this validator passes or fails.\n <p>\n Because the validator declaration itself is passed as a parameter to\n <code>condition()</code>, you can effectively parameterize the validator.  For example, to\n create a validator that checks that the value is after a certain date:<pre> \n     { type:\"custom\", afterDate:new Date(), \n       condition:\"value.getTime() > validator.afterDate.getTime()\" }\n </pre>\n Reusable validators, like the above, can be registered as a standard validatorType by\n calling ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')}.\n <P>\n Note that, if a field is declared with a builtin ${isc.DocUtils.linkForRef('type:FieldType')}, the value passed in\n will already have been converted to the specified type, if possible.\n\n",
        name:"condition",
        seeAlso:[],
        params:[
            {description:"FormItem or DataSourceField on which this                                           validator was declared.  NOTE: FormItem will not\n                                           be available during a save performed without a\n                                           form (eg programmatic save) or if the field \n                                           is not available in the form.", 
             optional:false,name:"item", defaultValue:null, type:"DataSourceField or FormItem"},
            {description:"Validator declaration from eg                              ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}.", 
             optional:false,name:"validator", defaultValue:null, type:"Validator"},
            {description:"value to validate", optional:false, name:"value", defaultValue:null, 
             type:"any"}
        ],
        returns:{description:"whether the value passed validation.  True for passed, false for fail.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Validator"
    },
    "attr:FormItem.showOverIcons":{
        ref:"attr:FormItem.showOverIcons",
        flags:"IRWA",
        description:"If we're showing icons, should we change their image source to the appropriate <i>over</i>\n  source when the user rolls over (or puts focus onto) them?  Can be overridden on a per\n  icon basis by the formItemIcon <code>showOver</code> property.",
        name:"showOverIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "attr:ImgTab.showFocused":{
        ref:"attr:ImgTab.showFocused",
        flags:"IRW",
        description:"Should we visibly change state when the tab recieves keyboard focus?",
        name:"showFocused",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgTab"
    },
    "class:RowSpacerItem":{
        methods:[],
        ref:"class:RowSpacerItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:RowSpacerItem.showTitle", "attr:RowSpacerItem.colSpan", 
         "attr:RowSpacerItem.startRow","attr:RowSpacerItem.endRow"],
        description:"Form item that renders as a blank row in the form layout.<br>\n Set ${isc.DocUtils.linkForRef('attr:RowSpacerItem.startRow')} to <code>false</code> to create a rowSpacer that simply\n takes up every remaining column in the current row rather than starting a new row.",
        name:"RowSpacerItem",
        seeAlso:[],
        type:"class"
    },
    "attr:ListGrid.sorterDefaults":{
        ref:"attr:ListGrid.sorterDefaults",
        flags:"IRA",
        description:"Defaults to apply to the corner sort button. To modify this object, use\n ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','ListGrid.changeDefaults()')} rather than replacing with an\n entirely new object.",
        name:"sorterDefaults",
        seeAlso:[],
        valueType:"object",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:Label.dynamicContents":{
        ref:"attr:Label.dynamicContents",
        flags:"IRWA",
        description:"Dynamic contents allows the contents string to be treated as a simple, but powerful\n template.  When this attribute is set to true, expressions of the form \\${arbitrary JS\n here} are replaced by the result of the evaluation of the JS code inside the curly\n brackets.  This evaluation happens at draw time.  If you want to trigger a re-evaluation\n of the expressions in the contents string you can call markForRedraw() on the canvas.\n <p>\n You can use this feature to build some simple custom components. For example, let's say\n you want to show the value of a Slider in a Canvas somewhere on the screen.  You can do\n this by observing the valueChanged() method on the slider and calling setContents() on\n your canvas with the new string or you can set the contents of the canvas to something\n like:\n <p><code>\n \"The slider value is \\${sliderInstance.getValue()}.\"\n </code><p>\n Next you set dynamicContents: true on the canvas, observe valueChanged() on the slider\n and call canvas.markForRedraw() in that observation.  This approach is cleaner than\n setContents() when the Canvas is aggregating several values or dynamic expressions.\n Like so:\n <p>\n <pre>\n Slider.create({\n     ID: \"mySlider\"\n });\n\n Canvas.create({\n     ID: \"myCanvas\",\n     dynamicContents: true,\n     contents: \"The slider value is \\${mySlider.getValue()}.\"\n });\n     \n myCanvas.observe(mySlider, \"valueChanged\", \n                  \"observer.markForRedraw()\");\n </pre>\n You can embed an arbitrary number of dynamic expressions in the contents string.  The\n search and replace is optimized for speed.\n <p>\n If an error occurs during the evaluation of one of the expressions, a warning is logged\n to the ISC Developer Console and the error string is embedded in place of the expected\n value in the Canvas.\n <p>\n The value of a function is its return value.  The value of any variable is the same as\n that returned by its toString() representation.\n <p>\n Inside the evalution contentext, <code>this</code> points to the canvas instance that\n has the dynamicContents string as its contents - in other words the canvas instance on\n which the template is declared.",
        name:"dynamicContents",
        seeAlso:[
            {ref:"attr:Label.contents", description:null},
            {ref:"attr:Canvas.dynamicContentsVars", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dynamicContents')}"],
        definingClass:"class:Label",
        groups:["contents"]
    },
    "classAttr:Validator.notADecimal":{
        ref:"classAttr:Validator.notADecimal",
        flags:"IRA",
        description:"Default error message to display when standard <code>isFloat</code> type validator\n  returns false.",
        name:"notADecimal",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be a valid decimal.\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:ValuesManager.getValue":{
        ref:"method:ValuesManager.getValue",
        flags:"",
        description:" Returns the value for some field.\n",
        name:"getValue",
        seeAlso:[],
        params:[
            {description:"Which value to be returned", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"current value of the appropriate field", type:"any"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "class:ResultTree":{
        methods:["method:ResultTree.invalidateCache", "method:ResultTree.dataArrived"],
        ref:"class:ResultTree",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:ResultTree.dataSource", "attr:ResultTree.loadDataOnDemand", 
         "attr:ResultTree.defaultIsFolder","attr:ResultTree.updateCacheFromRequest", "attr:ResultTree.disableCacheSync"],
        description:"ResultTrees are an implementation of the ${isc.DocUtils.linkForRef('class:Tree')} API, used to handle hierarchical\n  data, whose nodes are DataSource records which are retrieved from a server.",
        name:"ResultTree",
        seeAlso:[],
        type:"class"
    },
    "attr:PickList.animatePickList":{
        ref:"attr:PickList.animatePickList",
        flags:"IRWA",
        description:"If true, when the pickList is shown, it will be shown via an animated reveal effect",
        name:"animatePickList",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:Window.minimizeButton":{
        ref:"attr:Window.minimizeButton",
        flags:"R",
        description:"ImgButton shown in the header that will minimize this Window by calling ${isc.DocUtils.linkForRef('method:Window.minimize')}.",
        name:"minimizeButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "method:EBay.setAuthToken":{
        ref:"method:EBay.setAuthToken",
        flags:"",
        description:"\n eBay web services require an authentication token to be passed with every request.  You\n can obtain a token from <a href='http://developer.ebay.com/' onclick=\"window.open('http://developer.ebay.com/');return false;\">http://developer.ebay.com/</a>.  Before using any\n eBay web services, call this method to set the token provided to you by eBay.\n \n",
        name:"setAuthToken",
        seeAlso:[],
        params:[
            {description:"Your authToken, provided to you by eBay.", optional:false, name:"authToken", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"class:EBay"
    },
    "method:Canvas.hiliteCharacter":{
        ref:"method:Canvas.hiliteCharacter",
        flags:"A",
        description:"			Given a string and a character, hilite the first occurrance of the character in the\n          string (if it occurs), preferring uppercase to lowercase.\n\n",
        name:"hiliteCharacter",
        seeAlso:[],
        params:[
            {description:"String to return with hilited character", optional:false, name:"string", 
             defaultValue:null,type:"string"},
            {description:"Character to hilite", optional:false, name:"character", defaultValue:null, 
             type:"character"},
            {description:"Prefix to apply to hilighted character - defaults to                                      \"&lt;span style='text-decoration:underline;'&gt;\"", 
             optional:true,name:"hilitePrefix", defaultValue:null, type:"string"},
            {description:"Suffix to apply to hiliteed character - defaults to                                          \"&lt;/span&gt;\"", 
             optional:true,name:"hiliteSuffix", defaultValue:null, type:"string"}
        ],
        returns:{description:"The string passed in, with the first occurrance of the hilite                          character enclosed by the 'hilitePrefix' and 'hiliteSuffix'", 
         type:"string"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["utils"]
    },
    "type:CSSStyleName":{
        ref:"type:CSSStyleName",
        description:"CSS class name to apply to some HTML element on this page. This is a string that should\n match the css class defined for the page in an external stylesheet or in inline \n html &lt;STYLE&gt; tags.\n <P>\n As a general rule, wherever it is possible to provide a CSS styleName (such as\n ${isc.DocUtils.linkForRef('attr:Canvas.styleName')} or ${isc.DocUtils.linkForRef('attr:Button.baseStyle')}, your CSS style can specify border,\n margins, padding, and any CSS attributes controlling background or text styling.  You\n should not specify any CSS properties related to positioning, clipping, sizing or\n visibility (such as \"overflow\", \"position\", \"display\", \"visibility\" and \"float\"), using\n the SmartClient APIs for this kind of control.\n <P>\n Because text wrapping cannot be consistently controlled cross-browser from CSS alone,\n you should use SmartClient properties such as ${isc.DocUtils.linkForRef('attr:Button.wrap')} instead of the\n corresponding CSS properties, when provided.\n <P>\n Content contained within SmartClient components can use arbitrary CSS, with the \n caveat that the content should be tested on all supported browsers, just as content\n outside of SmartClient must be.",
        name:"CSSStyleName",
        seeAlso:[],
        type:"type",
        examples:["${isc.DocUtils.linkForExampleId('consistentSizing')}"],
        groups:["appearance"]
    },
    "method:FormItem.isDrawn":{
        ref:"method:FormItem.isDrawn",
        flags:"",
        description:" Returns true if this item has been written out into the DOM.\n\n",
        name:"isDrawn",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem",
        groups:["drawing"]
    },
    "classMethod:Class.setInstanceProperty":{
        ref:"classMethod:Class.setInstanceProperty",
        flags:"",
        description:"\n	Sets a named property from the instance defaults for this object.\n\n",
        name:"setInstanceProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to return", optional:false, name:"property", 
             defaultValue:null,type:"string"},
            {description:"value to set to", optional:false, name:"value", defaultValue:null, type:"any"}
        ],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:Toolbar.buttonConstructor":{
        ref:"attr:Toolbar.buttonConstructor",
        flags:"IRWA",
        description:"Default constructor for toolbar items.",
        name:"buttonConstructor",
        seeAlso:[],
        valueType:"Class",
        defaultValue:"Button",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["appearance"]
    },
    "attr:CubeGrid.cellIdProperty":{
        ref:"attr:CubeGrid.cellIdProperty",
        flags:"IR",
        description:"Name of the property in a cell record that holds it's unique ID.  Note cell record IDs are\n optional.",
        name:"cellIdProperty",
        seeAlso:[],
        valueType:"id",
        defaultValue:"\"ID\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:MenuItem.enableIf":{
        ref:"attr:MenuItem.enableIf",
        flags:"IR",
        description:"A string of script that is evaluated to a boolean value for the item's enabled property\n whenever the menu is shown or a shortcut key is pressed.\n <p>\n If you don't need to set this state dynamically, use ${isc.DocUtils.linkForRef('attr:MenuItem.enabled')} instead.",
        name:"enableIf",
        seeAlso:[],
        valueType:"expression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('menuDynamicItems')}"],
        definingClass:"object:MenuItem",
        groups:["dynamicMenuItem"]
    },
    "attr:OperationBinding.dataProtocol":{
        ref:"attr:OperationBinding.dataProtocol",
        flags:"IR",
        description:"Controls the format in which inputs are sent to the dataURL.\n <p>\n When a DataSource operation such as fetchData() is invoked on this DataSource or a component\n bound to this DataSource, the data passed to the operation, if any, will be sent to the\n <code>dataURL</code>.  The <code>dataProtocol</code> property controls the format in\n which the data is sent: SOAP message, HTTP GET or POST of parameters, etc.\n <P>\n The <code>dataProtocol</code> property need not be set for a DataSource with a WebService\n ( ${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is set), in this case, SOAP messaging is used by\n default.\n <P>\n NOTE: when ${isc.DocUtils.linkForRef('attr:OperationBinding.dataFormat')} is \"iscServer\", <code>dataProtocol</code> is not consulted.\n Instead, SmartClient uses a proprietary wire format to communicate with the SmartClient\n server, and the server-side DSRequest and DSResponse objects should be used to access\n request data and form responses.",
        name:"dataProtocol",
        seeAlso:[
            {ref:"type:DSProtocol", description:null}
        ],
        valueType:"DSProtocol",
        defaultValue:"\"getParams\"",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "method:Array.containsProperty":{
        ref:"method:Array.containsProperty",
        flags:"",
        description:"  Determine whether this array contains any members where the property passed in matches the value\n  passed in.\n\n",
        name:"containsProperty",
        seeAlso:[],
        params:[
            {description:"property to look for							(object)	key:value pairs to look for", 
             optional:false,name:"property", defaultValue:null, type:"string"},
            {description:"value to compare against (if property is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"true if this array contains an object with the appropriate property value", 
         type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["find"]
    },
    "attr:Window.hiliteBodyColor":{
        ref:"attr:Window.hiliteBodyColor",
        flags:"IRW",
        description:"Highlight color for the Window body (shown when the body is flashed).",
        name:"hiliteBodyColor",
        seeAlso:[
            {ref:"method:Window.flash", description:null}
        ],
        valueType:"string",
        defaultValue:"\"#EEEEEE\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "attr:FormItem.cellClassName":{
        ref:"attr:FormItem.cellClassName",
        deprecated:"As of SmartClient version 5.5, deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.cellStyle')}",
        flags:"IRW",
        description:"CSS class for a form item's cell in the form layout",
        name:"cellClassName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"formCell\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:ListGrid.canEditCell":{
        ref:"method:ListGrid.canEditCell",
        flags:"A",
        description:" Can this cell be edited?\n <P>\n The default implementation of <code>canEditCell()</code> respects the various property\n settings affecting editability: ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','field.canEdit')} disables editing\n for a field, a record with the ${isc.DocUtils.linkForRef('attr:ListGrid.recordEditProperty','recordEditProperty')} set to\n false is not editable, and disabled records are not editable.\n <P>\n You can override this method to control editability on a cell-by-cell basis.  For example,\n if you had a grid that allows editing of \"orders\", and you had a field \"shipDate\" that is\n normally editable, but should not be editable if the order is already \"complete\", you might\n implement <code>canEditCell()</code> as follows:\n <P>\n <pre>\n   isc.ListGrid.create({\n       ...\n       canEditCell : function (rowNum, colNum) {\n           var record = this.getRecord(rowNum),\n               fieldName = this.getFieldName(colNum);\n           if (fieldName == \"shipDate\" && \n               record.orderStatus == \"complete\") \n           {\n               return false;   \n           }\n           // use default rules for all other fields\n           return this.Super(\"canEditCell\", arguments);\n       }\n   });\n </pre>\n <P>\n Notes on providing custom implementations:\n <ul>\n <li> In order to allow complete control over editing, <code>canEditCell()</code> is called\n very frequently.  If you see delays on row to row navigation, check that your implementation\n is efficient\n <li> If you change the editability of a cell on the fly, for example, during \n ${isc.DocUtils.linkForRef('method:ListGrid.editorExit')} on another cell, call refreshCell() to show or hide the editor\n <li> If this ListGrid allows new records to be created, <code>canEditCell()</code> may be\n called when there is no record available.  The values input so far by the user are available\n via ${isc.DocUtils.linkForRef('method:ListGrid.getEditValues')}. \n </ul>\n\n",
        name:"canEditCell",
        seeAlso:[],
        params:[
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"Whether to allow editing this cell", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:FormItem.hoverAlign":{
        ref:"attr:FormItem.hoverAlign",
        flags:"IRW",
        description:"Text alignment  for text displayed in this item's hover canvas, if shown.",
        name:"hoverAlign",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverAlign", description:null}
        ],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "class:Img":{
        methods:["method:Img.setImageType", "method:Img.setSrc", "method:Img.resetSrc"],
        ref:"class:Img",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:Img.name", "attr:Img.src", "attr:Img.activeAreaHTML", "attr:Img.imageType", 
         "attr:Img.imageHeight","attr:Img.imageWidth", "attr:Img.size", "attr:Img.showTitle"],
        description:"The Img widget class implements a simple widget that displays a single image.",
        name:"Img",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('img')}"]
    },
    "attr:ListGrid.arrowKeyAction":{
        ref:"attr:ListGrid.arrowKeyAction",
        flags:"IRWA",
        description:"Action to perform when the listGrid has keyboard focus (but not editing focus) and a user\n presses the up or down arrow key. Possible values are:\n <ul>\n <li><code>select</code> : select the next row in the list (calls <code>recordClick</code> handler)</li>\n <li><code>focus</code> : move focus to the next row in the list without changing the selection</li>\n <li><code>activate</code> : select and activate the next row in the list (calls\n  <code>recordDoubleClick</code> handler)</li>\n <li><code>none</code> : no action</li>\n </ul>",
        name:"arrowKeyAction",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"select\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:ListGrid.freezeOnRightText":{
        ref:"attr:ListGrid.freezeOnRightText",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and\n ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the\n title for the menu item to freeze fields on the right of the scrollable body.",
        name:"freezeOnRightText",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Freeze on right\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "method:HTMLFlow.transformHTML":{
        ref:"method:HTMLFlow.transformHTML",
        flags:"",
        description:" Translates html content into a form most suitable for rendering inside this component.\n",
        name:"transformHTML",
        seeAlso:[],
        type:"method",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "method:DynamicForm.getValidatedValues":{
        ref:"method:DynamicForm.getValidatedValues",
        flags:"",
        description:" Call ${isc.DocUtils.linkForRef('method:DynamicForm.validate')} to check for validation errors. If no errors are found,\n return the current values for this form, otherwise return null.\n",
        name:"getValidatedValues",
        seeAlso:[],
        returns:{description:"current values or null if validation failed.", type:"object|null"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "object:ImgProperties":{
        methods:[],
        ref:"object:ImgProperties",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation/Canvas"],
        attrs:["attr:ImgProperties.src", "attr:ImgProperties.width", "attr:ImgProperties.height", 
         "attr:ImgProperties.name","attr:ImgProperties.extraStuff", "attr:ImgProperties.imgDir"],
        description:"A set of properties that can be used to create an image.",
        name:"ImgProperties",
        seeAlso:[],
        type:"object"
    },
    "attr:FormItem.validateOnChange":{
        ref:"attr:FormItem.validateOnChange",
        flags:"IRW",
        description:"If true, form items will be validated when each item's \"change\" handler is fired\n as well as when the entire form is submitted or validated.\n <p>\n Note that this property can also be set at the form, level;\n If true at either level the valiator will be fired on change - displaying errors and\n rejecting the change on validation failure.",
        name:"validateOnChange",
        seeAlso:[
            {ref:"attr:DynamicForm.validateOnChange", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["changeHandling"]
    },
    "attr:ResultTree.defaultIsFolder":{
        ref:"attr:ResultTree.defaultIsFolder",
        flags:"IR",
        description:"Controls whether nodes are assumed to be folders or leaves by default.\n <P>\n Nodes that have children or have the ${isc.DocUtils.linkForRef('isFolderProperty')} set to true will always be\n considered folders.  Other nodes will be considered folders or leaves by default according\n to this setting.\n <P>\n If <code>defaultIsFolder</code> is unset, the ResultTree will automatically set it to\n match the value of ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand')}.  This means that, when using\n folder-by-folder load on demand (<code>loadDataOnDemand:true</code>), by default a newly\n loaded node will be considered to be a folder that has not loaded its children yet.  \n <P>\n When not using folder-by-folder load on demand, by default a newly loaded node is\n considered a leaf.  If you set <code>defaultIsFolder:true</code> explicitly, by default\n a newly loaded node is considered to be a folder with no children.\n <P> \n See ${isc.DocUtils.linkForRef('method:Tree.isFolder')} for details on how to explicitly mark nodes as folders or leaves.",
        name:"defaultIsFolder",
        seeAlso:[
            {ref:"attr:TreeGrid.loadDataOnDemand", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultTree"
    },
    "attr:SectionItem.itemIds":{
        ref:"attr:SectionItem.itemIds",
        flags:"IR",
        description:"IDs of the items that should be considered a member of this section.",
        name:"itemIds",
        seeAlso:[],
        valueType:"Array of ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SectionItem"
    },
    "attr:GridRenderer.showAllColumns":{
        ref:"attr:GridRenderer.showAllColumns",
        flags:"IRA",
        description:"Whether all columns should be drawn all at once, or only columns visible in the viewport.<br><br>\n\n Drawing all columns causes longer initial rendering time, but allows smoother horizontal\n scrolling.  With a very large number of columns, showAllColumns will become too slow.",
        name:"showAllColumns",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["performance"]
    },
    "group:treeDataBinding":{
        ref:"group:treeDataBinding",
        title:"Tree DataBinding",
        treeLocation:["Client Reference/Data Binding"],
        refs:[],
        description:"The SmartClient ${isc.DocUtils.linkForRef('class:TreeGrid')} component is a visual representation of a tree and requires\n a ${isc.DocUtils.linkForRef('class:Tree')} or ${isc.DocUtils.linkForRef('class:ResultTree')} datatype passed via the ${isc.DocUtils.linkForRef('attr:TreeGrid.data')} attribute to\n initialize the tree view.  The ${isc.DocUtils.linkForRef('class:Tree')} datatype is used when you want to provide all of\n the tree nodes in one shot at initialization time.  The ${isc.DocUtils.linkForRef('class:ResultTree')} datatype is used\n when you want portions of the tree to be loaded on demand from the server.\n <p>\n <b><u>Providing all data to the Tree at creation</u></b>\n <p>\n The simplest mechanism by which to initialize a Tree is to simply provide all the data\n up-front when the Tree itself is created.  Depending on the format of your tree data, this\n can be done by setting ${isc.DocUtils.linkForRef('attr:Tree.root')} or ${isc.DocUtils.linkForRef('attr:Tree.data')}.  This functionality is provided\n by the ${isc.DocUtils.linkForRef('class:Tree')} class.\n <p>\n For examples of this type of databinding, see the following SDK examples:\n <ul>\n <li><a href='/examples/components/treeGrid_init.html' onclick=\"window.open('/examples/components/treeGrid_init.html');return false;\">TreeGrid Initialization Example</a>\n <li><a href='/examples/server_integration/#jstlTree' onclick=\"window.open('/examples/server_integration/#jstlTree');return false;\">TreeGrid Initialization with JSTL</a>\n </ul>\n <p>\n <b><u>Loading Tree nodes on demand</u></b>\n <p>\n In this mode, tree nodes are loaded on-demand the first time a user expands a folder.  This\n approach is necessary for large trees.  This functionality is provided by the\n ${isc.DocUtils.linkForRef('class:ResultTree')} class.\n <p>\n ResultTrees require that every node in the tree have an ${isc.DocUtils.linkForRef('attr:Tree.idField','id')} that is\n unique tree-wide.  When the user expands a folder whose contents have not yet been loaded\n from the server (or you programmatically call openFolder() on such a node), the client\n automatically sends a ${isc.DocUtils.linkForRef('class:DSRequest')} to the server to ask for all immediate children of\n that node.  The ${isc.DocUtils.linkForRef('class:DSRequest')} criteria will specify the id of the node for which children\n are being requested via the <code>parentId</code> property (see ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}).\n This client is asking the server: \"give me all nodes whose parentId is the id of this\n node\".  \n <P>\n If there are no pre-existing node ids in the dataset you are loading, you must generate node\n ids (because the client needs some way to identify nodes when talking to the server).\n Generally a node id should contain whatever information is required to fetch the node and\n it's children on the server.  One typical approach is to use the path to the node as a node\n id.  For XML datasets in particular, the path may be a valid XPath, so that node lookup is\n just applying an XPath to an XMLDocument.\n <p>\n ${isc.DocUtils.linkForRef('class:ResultTree')}s are created for you by the ${isc.DocUtils.linkForRef('class:TreeGrid')} when you set\n ${isc.DocUtils.linkForRef('attr:TreeGrid.dataSource')}, but you can pass an initial dataset to a databound TreeGrid by\n setting ${isc.DocUtils.linkForRef('attr:TreeGrid.initialData')}.  The ${isc.DocUtils.linkForRef('attr:Tree.idField')} is derived from the dataSource\n you provide to the TreeGrid - the first field marked as\n ${isc.DocUtils.linkForRef('attr:DataSourceField.primaryKey')}:true becomes the idField of the ResultTree.\n The ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')} is found by looking for a field that has a\n ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')} property pointing to the idField.\n <P>\n If you do not provide ${isc.DocUtils.linkForRef('attr:TreeGrid.initialData')}, the first DSRequest you receive will be a\n request for the nodes under root.  The id of the root node of the tree is the value of the\n <code>rootValue</code> attribute on the ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')} of the Tree DataSource. \n <p>\n For examples of this type of databinding, see the following SDK examples:\n <ul>\n <li><a href='/examples/databinding/tree_databinding.jsp' onclick=\"window.open('/examples/databinding/tree_databinding.jsp');return false;\">TreeGrid DataBinding Example</a>\n <li><a href='/examples/server_integration/#xml2JSLOD' onclick=\"window.open('/examples/server_integration/#xml2JSLOD');return false;\">TreeGrid XML DataBinding</a>\n </ul>\n <P>\n <b><u>Multi-Level load on demand</u></b>\n <P>\n Although the ResultTree's DSRequests ask for the immediate children of a node only, you are\n free to return multiple levels of children.  This can be done by simply returning a flat\n list of descendents with valid id's and parentId's, exactly as though you were initializing\n a multi-level tree via ${isc.DocUtils.linkForRef('attr:Tree.data')}.  \n <P>\n Note that when receiving multiple levels of children, the ResultTree's assumption is that\n if any children are loaded for a parent, then that parent is considered fully loaded.\n <P>\n When loading children for a given parent node, the ResultTree calls\n ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} on its DataSource.  For custom code that may need to reference\n the parentNode or tree in some way, the parent node whose children are being loaded is\n available on the dsRequest instance in the DataSource flow as dsRequest.parentNode, where it\n can be inspected during ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')}.",
        name:"treeDataBinding",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setBottom":{
        ref:"method:Canvas.setBottom",
        flags:"",
        description:" Resizes the widget vertically to position its bottom edge at the specified coordinate.\n <P>\n NOTE: if you're setting multiple coordinates, use setRect(), moveTo() or resizeTo()\n instead\n\n",
        name:"setBottom",
        seeAlso:[],
        params:[
            {description:"new bottom coordinate", optional:false, name:"bottom", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:DateChooser.baseNavButtonStyle":{
        ref:"attr:DateChooser.baseNavButtonStyle",
        flags:"IRW",
        description:"CSS style to apply to navigation buttons and date display at the top of the\n component. If null, the CSS style specified in ${isc.DocUtils.linkForRef('attr:DateChooser.baseButtonStyle')} is used.",
        name:"baseNavButtonStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:ValuesManager.addMember":{
        ref:"method:ValuesManager.addMember",
        flags:"",
        description:"\n Add a new member form to this valuesManager.\n This form's values will subsequently be available through this valuesManager.  <br>\n Note on pre-existant values:\n If the valuesManager has a value specified for some field, for which the member form has\n an item, this value will be applied to the member form.  This is true whether the item\n has a value or not.<br>\n However if the member form has a value for some field, and the ValuesManager does not\n have a specified value for the same field, we allow the valuesManager to pick up the \n value from the member form.    \n\n",
        name:"addMember",
        seeAlso:[
            {ref:"method:ValuesManager.addMembers", description:null}
        ],
        params:[
            {description:"form (or ID of form) to add to                                           this valuesManager as a member.", 
             optional:false,name:"member", defaultValue:null, type:"DynamicForm | String"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "attr:Button.state":{
        flags:"IRWA",
        getter:["getState"],
        type:"attr",
        ref:"attr:Button.state",
        description:"Current \"state\" of this widget. StatefulCanvases will have a different appearance based\n on their current state. By default this is handled by changing the css className applied to\n the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is\n done.<P>\n For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the \n appearance may also be updated by changing the src of the rendered image. See\n ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL \n is modified to reflect the state of the widget in this case.",
        name:"state",
        setter:["setState"],
        valueType:"State",
        seeAlso:[
            {ref:"type:State", description:null},
            {ref:"group:state", description:null}
        ],
        defaultValue:"\"\"",
        groups:["state"],
        definingClass:"class:Button"
    },
    "method:TreeGrid.setNodeIcon":{
        ref:"method:TreeGrid.setNodeIcon",
        flags:"",
        description:" Set the icon for a particular treenode to a specified URL\n\n",
        name:"setNodeIcon",
        seeAlso:[],
        params:[
            {description:"tree node", optional:false, name:"node", defaultValue:null, type:"TreeNode"},
            {description:"path to the resource", optional:false, name:"icon", defaultValue:null, 
             type:"SCImgUrl"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:ListGrid.emptyMessage":{
        ref:"attr:ListGrid.emptyMessage",
        flags:"IRW",
        description:"The string to display in the body of a listGrid with an empty data array, if\n showEmptyMessage is true.",
        name:"emptyMessage",
        seeAlso:[
            {ref:"attr:ListGrid.showEmptyMessage", description:null},
            {ref:"attr:ListGrid.emptyMessageStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"\"No items to show.\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('emptyGrid')}"],
        definingClass:"class:ListGrid",
        groups:["emptyMessage", "i18nMessages"]
    },
    "group:observation":{
        ref:"group:observation",
        title:"Observation",
        refs:["method:Class.observe", "method:Class.ignore", "method:Class.isObserving"],
        description:"Observation is the ability to take an action whenever a method is called.",
        name:"observation",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.canDragSelect":{
        ref:"attr:ListGrid.canDragSelect",
        flags:"IRW",
        description:"If this property is true, users can drag the mouse to select several rows or cells.\n  This is mutually exclusive with rearranging rows or cells by dragging.",
        name:"canDragSelect",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragListSelect')}"],
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "attr:Layout.layoutMargin":{
        flags:"IRW",
        type:"attr",
        ref:"attr:Layout.layoutMargin",
        description:"Space outside of all members. This attribute, along with ${isc.DocUtils.linkForRef('attr:Layout.layoutLeftMargin')} \n and related properties does not have a true setter method.<br>\n It may be assigned directly at runtime. After setting the property, \n ${isc.DocUtils.linkForRef('method:Layout.setLayoutMargin')} may be called with no arguments to reflow the layout.",
        name:"layoutMargin",
        setter:["setLayoutMargin"],
        valueType:"integer",
        seeAlso:[
            {ref:"attr:Layout.layoutLeftMargin", description:null},
            {ref:"attr:Layout.layoutRightMargin", description:null},
            {ref:"attr:Layout.layoutBottomMargin", description:null},
            {ref:"attr:Layout.layoutTopMargin", description:null},
            {ref:"attr:Layout.paddingAsLayoutMargin", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('userSizing')}"],
        defaultValue:"null",
        groups:["layoutMargin"],
        definingClass:"class:Layout"
    },
    "classMethod:DataSource.getDataSource":{
        ref:"classMethod:DataSource.getDataSource",
        flags:"",
        description:" Lookup a DataSource by ID.\n\n",
        name:"getDataSource",
        seeAlso:[],
        params:[
            {description:"DataSource ID", optional:false, name:"ID", defaultValue:null, 
             type:"identifier"}
        ],
        returns:{description:"the DataSource with this ID, if loaded, otherwise null.", type:"DataSource"},
        type:"classMethod",
        definingClass:"class:DataSource"
    },
    "attr:DateChooser.nextYearIcon":{
        ref:"attr:DateChooser.nextYearIcon",
        flags:"IRW",
        description:"Icon for the next year button",
        name:"nextYearIcon",
        seeAlso:[
            {ref:"attr:DateChooser.showDoubleYearIcon", description:null}
        ],
        valueType:"URL",
        defaultValue:"\"[SKIN]doubleArrow_right.gif\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "classMethod:Date.setShortDisplayFormat":{
        ref:"classMethod:Date.setShortDisplayFormat",
        flags:"",
        description:" Set the default short format for dates. After calling this method, subsequent calls to \n ${isc.DocUtils.linkForRef('method:Date.toShortDate')} will returna  string formatted according to this format \n specification. Note that this will be the standard short date format used by\n SmartClient components.<br>\n The <code>format</code> parameter may be either a ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} string, or \n a function. If passed a function, this function will be executed in the scope of the Date\n and should return the formatted string.<br>\n Initial default shortDateFormat is <code>\"toUSShortDate\"</code>.\n\n",
        name:"setShortDisplayFormat",
        seeAlso:[],
        params:[
            {description:"new formatter", optional:false, name:"format", defaultValue:null, 
             type:"DateDisplayFormat | function"}
        ],
        type:"classMethod",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:FusionChart.getDataColor":{
        ref:"method:FusionChart.getDataColor",
        flags:"",
        description:" Get a color from the ${isc.DocUtils.linkForRef('attr:FusionChart.dataColors')} Array, or white (\"FFFFFF\") if the index is beyond the\n end of the Array.  \n <P>\n Override to provide a dynamic color generation scheme.\n\n",
        name:"getDataColor",
        seeAlso:[],
        params:[
            {description:"index of the visual element to be colored", optional:false, name:"index", 
             defaultValue:null,type:"Number"}
        ],
        returns:{description:"color value in hexadecimal RRGGBB format (with no leading '#')", type:"String"},
        type:"method",
        definingClass:"class:FusionChart"
    },
    "attr:ListGrid.alternateRecordStyles":{
        ref:"attr:ListGrid.alternateRecordStyles",
        flags:"IRW",
        description:"Whether alternating rows should be drawn in alternating styles, in order to create a \"ledger\"\n effect for easier reading.  If enabled, the cell style for alternate rows will have \"Dark\"\n appended to it.",
        name:"alternateRecordStyles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('gridCells')}"],
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "method:ButtonItem.click":{
        ref:"method:ButtonItem.click",
        flags:"",
        description:" Called when a ButtonItem is clicked on.\n\n",
        name:"click",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:ButtonItem",
        groups:["eventHandling"]
    },
    "method:CellSelection.deselectCellList":{
        ref:"method:CellSelection.deselectCellList",
        flags:"",
        description:"			deselect an array of cells\n\n",
        name:"deselectCellList",
        seeAlso:[],
        params:[
            {description:"listArray of cells to deselect. Each cell can be specified                                      as a 2 element array <code>[rowNum, colNum]</code>", 
             optional:true,name:"", defaultValue:null, type:"array"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection"]
    },
    "attr:Canvas.dragIntersectStyle":{
        ref:"attr:Canvas.dragIntersectStyle",
        flags:"IRWA",
        description:"This indicates how the system will test for droppable targets: either by intersection\n      with the mouse or intersection with the rectangle of the dragMoveTarget.",
        name:"dragIntersectStyle",
        seeAlso:[],
        valueType:"DragIntersectStyle",
        defaultValue:"EH.INTERSECT_WITH_MOUSE",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:Slider.minValueLabel":{
        ref:"attr:Slider.minValueLabel",
        flags:"IRW",
        description:"The text displayed in the label for the minimum value of the slider. If left as null, then\n slider.minValue will be displayed.",
        name:"minValueLabel",
        seeAlso:[
            {ref:"attr:Slider.showRange", description:null},
            {ref:"attr:Slider.minValue", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:FormItemIcon.showFocusedWithIcon":{
        ref:"attr:FormItemIcon.showFocusedWithIcon",
        flags:"IRWA",
        description:"If this icon will be updated to show focus (see ${isc.DocUtils.linkForRef('attr:FormItemIcon.showFocused')}, \n ${isc.DocUtils.linkForRef('attr:FormItem.showFocusedIcons')}), this property governs whether the focused state should\n be shown when the item as a whole recieves focus or just if the icon recieves focus.\n If this property is unset, default behavior is to show focused state when the item\n recieves focus.",
        name:"showFocusedWithIcon",
        seeAlso:[
            {ref:"attr:FormItem.showFocusedIcons", description:null},
            {ref:"attr:FormItemIcon.showFocused", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "class:EBay":{
        methods:["method:EBay.setAuthToken", "method:EBay.setSandboxToken", 
         "method:EBay.setProductionToken","method:EBay.setUseProduction"],
        ref:"class:EBay",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Connectors"],
        attrs:[],
        description:"WebService object representing the eBay trading web service.",
        name:"EBay",
        seeAlso:[],
        type:"class"
    },
    "method:FormItem.iconClick":{
        ref:"method:FormItem.iconClick",
        flags:"",
        description:"      StringMethod.\n      Default action to fire when the user clicks on a form item icon. May be overridden\n      by setting <code>click</code> on the form item icon directly.\n",
        name:"iconClick",
        seeAlso:[],
        params:[
            {description:"a pointer to this item's form", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"a pointer to this form item", optional:false, name:"item", defaultValue:null, 
             type:"FormItem"},
            {description:"a pointer to the icon that recieved the click event.", optional:false, 
             name:"icon",defaultValue:null, type:"FormItemIcon"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "method:Button.setDisabled":{
        ref:"method:Button.setDisabled",
        flags:"",
        description:" Enable or disable this object\n",
        name:"setDisabled",
        seeAlso:[],
        params:[
            {description:"true if this widget is to be disabled", optional:false, name:"disabled", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Button",
        groups:["enable", "state"]
    },
    "attr:GridHilite.style":{
        ref:"attr:GridHilite.style",
        flags:"IR",
        description:"CSS text to be applied to cells where this hilite is applied, for example,\n \"background-color:#FF0000\"",
        name:"style",
        seeAlso:[],
        valueType:"CSSText",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:GridHilite"
    },
    "attr:Label.valign":{
        ref:"attr:Label.valign",
        flags:"IRW",
        description:"Vertical alignment of label text. See VerticalAlignment type for details.",
        name:"valign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:Label",
        groups:["positioning"]
    },
    "attr:RPCRequest.sendNoQueue":{
        ref:"attr:RPCRequest.sendNoQueue",
        flags:"IRWA",
        description:"When set to true, this request is sent to the server immediately, bypassing any current queue.",
        name:"sendNoQueue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "group:tabBarControls":{
        ref:"group:tabBarControls",
        refs:["attr:Tab.pickerTitle", "attr:TabSet.tabBarControls", "attr:TabSet.showTabScroller", 
         "attr:TabSet.showTabPicker","attr:TabSet.animateTabScrolling", "attr:TabSet.scrollerButtonSize", 
         "attr:TabSet.pickerButtonSize"],
        name:"tabBarControls",
        seeAlso:[],
        type:"group"
    },
    "method:LinkItem.setLinkTitle":{
        ref:"method:LinkItem.setLinkTitle",
        flags:"",
        description:" Method to set the linkTitle for this item\n",
        name:"setLinkTitle",
        seeAlso:[],
        params:[
            {description:"new linkTitle for this item", optional:false, name:"title", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:LinkItem"
    },
    "class:TabBar":{
        methods:["method:TabBar.selectTab"],
        ref:"class:TabBar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/TabSet"],
        attrs:["attr:TabBar.tabs", "attr:TabBar.breadth", "attr:TabBar.buttonConstructor", 
         "attr:TabBar.baseLineThickness","attr:TabBar.baseLineSrc", "attr:TabBar.baseLineCapSize", "attr:TabBar.defaultTabSize"],
        description:"Shows a set of Tabs.  TabBars are automatically created by TabSets and shouldn't be used\n directly.  The TabBar is documented for skinning purposes.",
        name:"TabBar",
        seeAlso:[],
        type:"class"
    },
    "classMethod:isA.Function":{
        ref:"classMethod:isA.Function",
        flags:"",
        description:"\n	Is <code>object</code> a Function object?\n\n",
        name:"Function",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Function", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "method:Log.logDebug":{
        ref:"method:Log.logDebug",
        flags:"",
        description:" Log a message at \"debug\" priority\n <P>\n A method named log<i>Priority</i> exists for each priority level, on every ISC Class and\n instance of an ISC Class.  Messages logged on a Class or instance have a default\n category of the classname.  Messages logged on an instance will also automatically\n incorporate the instance ID.  General best practice is to call logDebug() et al as\n \"this.logDebug\" whenever \"this\" is an instance, or as \"Log.logDebug\" otherwise.\n\n",
        name:"logDebug",
        seeAlso:[
            {ref:"method:Log.echo", description:"for dumping datastructures to the log"},
            {ref:"classMethod:Log.setPriority", 
             description:"for controlling what messages appear in the log"}
        ],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "method:ListGrid.rowHasErrors":{
        ref:"method:ListGrid.rowHasErrors",
        flags:"",
        description:" Does the specified row have unresolved errors?\n",
        name:"rowHasErrors",
        seeAlso:[
            {ref:"method:ListGrid.hasErrors", description:null},
            {ref:"method:ListGrid.cellHasErrors", description:null}
        ],
        params:[
            {description:"rowNum to check for errors", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"true if there are unresolved errors, false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "method:ResultSet.getRange":{
        ref:"method:ResultSet.getRange",
        flags:"",
        description:" Return the items between position start and end, non-inclusive at the end, possibly \n containing markers for records that haven't loaded yet.\n <P>\n Calling getRange for records that have not yet loaded will trigger an asynchronous fetch.  The\n returned data will contain the marker value <code>Array.LOADING</code> as a placeholder for\n records being fetched.  If any rows needed to be fetched, <code>dataArrived()</code> will\n fire when they arrive.\n\n",
        name:"getRange",
        seeAlso:[
            {ref:"classAttr:Array.LOADING", description:null},
            {ref:"method:ResultSet.dataArrived", description:null}
        ],
        params:[
            {description:"start position", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end position", optional:false, name:"end", defaultValue:null, type:"number"}
        ],
        returns:{description:"subset of the array from start -> end-1", type:"Array"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access"]
    },
    "attr:FormItem.tabIndex":{
        ref:"attr:FormItem.tabIndex",
        flags:"IRW",
        description:"tabIndex for the form item within the form.  Auto-assigned if not specified.<br>\n Note: This controls the tab order within the form.\n <P>\n To specify the tabindex of an item within the page as a whole (not just this form), use\n globalTabIndex instead.",
        name:"tabIndex",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["focus"]
    },
    "attr:Label.iconOrientation":{
        ref:"attr:Label.iconOrientation",
        flags:"IR",
        description:"If this button is showing an icon should it appear to the left or right of the title?\n valid options are <code>\"left\"</code> and <code>\"right\"</code>.",
        name:"iconOrientation",
        setter:["setIconOrientation"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"left\"",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "classMethod:isA.Interface":{
        ref:"classMethod:isA.Interface",
        flags:"",
        description:"\n	Is <code>object</code> an interface object?\n\n",
        name:"Interface",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Interface Object", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:Canvas.tabIndex":{
        ref:"attr:Canvas.tabIndex",
        flags:"IRWA",
        description:"If specified this governs the tabIndex of the widget in the page's tab order.\n Note that by default SmartClient auto-assigns tab-indices, ensuring focusable widgets\n are reachable by tabbing in the order in which they are drawn on the page.\n <code>canvas.tabIndex</code> cannot be set to greater than \n ${isc.DocUtils.linkForRef('classAttr:Canvas.TAB_INDEX_FLOOR')} - as we reserve the values above this range for\n auto-assigned tab-indices.",
        name:"tabIndex",
        setter:["setTabIndex"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "method:DateChooser.dataChanged":{
        ref:"method:DateChooser.dataChanged",
        flags:"",
        description:" Method to override or observe in order to be notified when a user picks a date value.\n <P>\n Has no default behavior (so no need to call Super).\n <P>\n Use ${isc.DocUtils.linkForRef('method:DateChooser.getData')} to get the current date value.\n \n",
        name:"dataChanged",
        seeAlso:[],
        type:"method",
        definingClass:"class:DateChooser"
    },
    "method:Tree.getLevel":{
        ref:"method:Tree.getLevel",
        flags:"A",
        description:"\n Return the number of levels deep this node is in the tree.  For example, for this tree:\n <pre>\n root\n   foo\n     bar\n </pre>\n Calling <code>tree.getLevel(bar)</code> will return <code>2</code>. \n\n",
        name:"getLevel",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"number of parents the node has", type:"number"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Layout.dropLineThickness":{
        ref:"attr:Layout.dropLineThickness",
        flags:"IRA",
        description:"Thickness, in pixels of the dropLine shown during drag and drop when\n ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')} is set to <code>true</code>.  See the discussion in\n ${isc.DocUtils.linkForRef('class:Layout')} for more info.",
        name:"dropLineThickness",
        seeAlso:[
            {ref:"class:Layout", description:null}
        ],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragMove')}"],
        definingClass:"class:Layout",
        groups:["dragdrop"]
    },
    "classMethod:isA.ClassObject":{
        ref:"classMethod:isA.ClassObject",
        flags:"",
        description:"\n	Is <code>object</code> a class object?\n\n",
        name:"ClassObject",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Class Object", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:DynamicForm.requiredTitleSuffix":{
        ref:"attr:DynamicForm.requiredTitleSuffix",
        flags:"IRW",
        description:"The string appended to the title of every required item in this form if\n highlightRequiredFields is true.",
        name:"requiredTitleSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\" :</B>\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "method:Selection.deselectItem":{
        ref:"method:Selection.deselectItem",
        flags:"",
        description:" Deselect a particular item by its position in the list\n\n",
        name:"deselectItem",
        seeAlso:[],
        params:[
            {description:"index of the item to be selected", optional:false, name:"position", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:FormItem.iconVAlign":{
        ref:"attr:FormItem.iconVAlign",
        flags:"IRWA",
        description:"How should icons be aligned vertically for this form item.",
        name:"iconVAlign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"\"bottom\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "attr:Label.align":{
        ref:"attr:Label.align",
        flags:"IRW",
        description:"Horizontal alignment of label text. See Alignment type for details.",
        name:"align",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.LEFT",
        type:"attr",
        definingClass:"class:Label",
        groups:["positioning"]
    },
    "method:Date.toPrettyString":{
        ref:"method:Date.toPrettyString",
        deprecated:"As of SmartClient 5.5 use ${isc.DocUtils.linkForRef('method:Date.toShortDate')} instead",
        flags:"",
        description:"			Return this date in the format: <code>MM/DD/YY HH:MM</code>\n",
        name:"toPrettyString",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:ListGrid.editFailedCSSText":{
        ref:"attr:ListGrid.editFailedCSSText",
        flags:"IRWA",
        description:"Custom CSS text to be applied to cells when editing has failed.<br>\n  If this listGrid is editable, this css text will be applied to any edited cells for which\n  validation failed, on top of the base style for the cell.<br>\n For further customization of styling for cells that failed editing validation, use\n <code>this.editFailedBaseStyle</code> instead.",
        name:"editFailedCSSText",
        seeAlso:[
            {ref:"attr:ListGrid.editFailedBaseStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"\"color:red;border:1px solid red;\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:FormItem.errorIconWidth":{
        ref:"attr:FormItem.errorIconWidth",
        flags:"IRW",
        description:"Height of the error icon, if we're showing icons when validation errors occur.",
        name:"errorIconWidth",
        seeAlso:[
            {ref:"attr:FormItem.showErrorIcon", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["errorIcon"]
    },
    "attr:Canvas.childrenSnapResizeToGrid":{
        ref:"attr:Canvas.childrenSnapResizeToGrid",
        flags:"IRW",
        description:"If true, causes this canvas's children to snap to its grid when resizing.\n This behavior can be overridden on a per-child basis by setting the \n ${isc.DocUtils.linkForRef('attr:Canvas.snapToGrid','snapToGrid')} or \n ${isc.DocUtils.linkForRef('attr:Canvas.snapResizeToGrid','snapResizeToGrid')} value on the child.",
        name:"childrenSnapResizeToGrid",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:GridRenderer.getRowSpan":{
        ref:"method:GridRenderer.getRowSpan",
        flags:"A",
        description:" Return how many rows this cell should span.  Default is 1. \n <P>\n NOTE: if using horizontal incremental rendering, <code>getRowSpan()</code> may be called for\n a rowNum <b>in the middle of a spanning cell</b>, and should return the remaining span from\n that rowNum onward.\n <P>\n NOTE: if a cell spans multiple rows, getCellRecord/Style/etc will be called with the topmost\n row coordinates only.\n\n",
        name:"getRowSpan",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"number of cells to span", type:"number"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "group:loadModulesTag":{
        ref:"group:loadModulesTag",
        title:"&lt;isomorphic:loadModules&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> HTML\n <p>\n This tag works just like ${isc.DocUtils.linkForRef('group:loadISCTag')} except it does not load a skin.  All other\n attributes are supported on this tag just as on <code>loadISC</code>.  This tag is useful if\n you have a single \"header\" JSP that has the <code>loadISC</code> tag that you then include in other\n SmartClient-enabled JSPs that require additional modules.  The JSPs that require additional\n modules can then use the <code>loadModules</code> to load additional SmartClient modules.",
        name:"loadModulesTag",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:FormItem.focus":{
        ref:"method:FormItem.focus",
        flags:"",
        description:" Called when this FormItem receives focus.\n \n",
        name:"focus",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "classMethod:Flashlet.flashAvailable":{
        ref:"classMethod:Flashlet.flashAvailable",
        flags:"",
        description:" Is Shockwave flash installed on this browser?\n",
        name:"flashAvailable",
        seeAlso:[],
        returns:{description:"true if Flash is installed.", type:"boolean"},
        type:"classMethod",
        definingClass:"class:Flashlet"
    },
    "class:Timer":{
        methods:[],
        ref:"class:Timer",
        classAttrs:[],
        classMethods:["classMethod:Timer.setTimeout", "classMethod:Timer.clear"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"The Timer class provides a predictable cross-browser system for creating\n timed events.",
        name:"Timer",
        seeAlso:[],
        type:"class"
    },
    "attr:ListGrid.showHeaderContextMenu":{
        ref:"attr:ListGrid.showHeaderContextMenu",
        flags:"IR",
        description:"Whether to show a context menu on the header with standard items for showing and hiding\n fields.",
        name:"showHeaderContextMenu",
        seeAlso:[
            {ref:"method:ListGrid.displayHeaderContextMenu", description:null},
            {ref:"method:ListGrid.getHeaderContextMenuItems", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader"]
    },
    "attr:SpinnerItem.max":{
        ref:"attr:SpinnerItem.max",
        flags:"IRW",
        description:"Maximum valid value for this item",
        name:"max",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('spinnerItem')}"],
        definingClass:"class:SpinnerItem"
    },
    "method:CubeGrid.getCellCoordinates":{
        ref:"method:CubeGrid.getCellCoordinates",
        flags:"",
        description:" Given a record in this grid, this method returns the coordinates of the cell in which the \n record is displayed as a 2 element array.\n",
        name:"getCellCoordinates",
        seeAlso:[],
        params:[
            {description:"record to find coordinates for", optional:false, name:"cellRecord", 
             defaultValue:null,type:"record"}
        ],
        returns:{description:"2 element array containing <code>[rowNum,colNum]</code> for the cell, or                  <code>null</code> if the record is not found.", 
         type:"array"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "classMethod:isc.logWarn":{
        ref:"classMethod:isc.logWarn",
        flags:"",
        description:" Same as ${isc.DocUtils.linkForRef('method:Log.logWarn')}.\n\n",
        name:"logWarn",
        seeAlso:[],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in, defaults to \"Log\"", optional:true, name:"category", 
             defaultValue:null,type:"String"}
        ],
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:PickList.textMatchStyle":{
        ref:"attr:PickList.textMatchStyle",
        flags:"IR",
        description:"When applying filter criteria to pickList data, what type of matching to use.  Legal\n values are \"substring\" (value contains user input) or \"startsWith\" (value starts with\n user input.  Both matches are case insensitive.\n <P>\n For a databound pickList (${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} set), <code>textMatchStyle</code> is\n sent to the server as ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')}.\n <P>\n For a non-databound pickList, <code>textMatchStyle</code> is applied by \n ${isc.DocUtils.linkForRef('method:PickList.filterClientPickListData')}.",
        name:"textMatchStyle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"\"startsWith\"",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "group:titles":{
        ref:"group:titles",
        refs:["attr:DataSource.title", "attr:DataSource.pluralTitle", "attr:DataSource.titleField"],
        name:"titles",
        seeAlso:[],
        type:"group"
    },
    "classMethod:Page.registerKey":{
        ref:"classMethod:Page.registerKey",
        flags:"",
        description:" Fire some action when the Page recieves a keyPress event from a certain key.<br>\n Note that if a widget has keyboard focus, this action will fire only after any widget-level\n keyPress handlers have fired and bubbled the event up to the top of their ancestor chain.<br>\n Multiple actions can be registered to fire on a single keyPress using this method, and can\n be associated with different <code>target</code> objects (which will then be available as\n a parameter when the action is fired).<br>\n This differs from calling ${isc.DocUtils.linkForRef('classMethod:Page.setEvent')} with the <code>\"keyPress\"</code>\n events registered via <code>setEvent()</code> will fire <i>before</i> widget level handlers \n respond to the event, and will fire for every <code>keyPress</code> event, not just those\n triggerred by some specific key or key-combination.\n \n \n",
        name:"registerKey",
        seeAlso:[
            {ref:"method:Canvas.keyPress", description:null},
            {ref:"classMethod:Page.setEvent", description:null},
            {ref:"classMethod:Page.unregisterKey", description:null}
        ],
        params:[
            {description:"key name or identifier object.", optional:false, name:"key", 
             defaultValue:null,type:"KeyIdentifier"},
            {description:"Action to fire when key is pressed.              This can be a string of script to evaluate or a javascript function.<br>\n              This action will be passed 2 parameters: The name of the key pressed will be \n              available as the first parameter or <code>key</code> keyword. The target \n              passed into this method will be available as the second parameter or \n             <code>target</code> keyword.", 
             optional:false,name:"action", defaultValue:null, type:"string"},
            {description:"If specified this object will be made available to the                                  action fired as a parameter.", 
             optional:true,name:"target", defaultValue:null, type:"any"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["KeyRegistry"]
    },
    "attr:Layout.defaultLayoutAlign":{
        ref:"attr:Layout.defaultLayoutAlign",
        flags:"IR",
        description:"Specifies the default alignment for layout members on the breadth axis. Can be overridden\n on a per-member basis by setting ${isc.DocUtils.linkForRef('attr:Canvas.layoutAlign')}.<br>\n If unset, default member layout alignment will be \"top\" for a horizontal layout, and\n left for a vertical layout.",
        name:"defaultLayoutAlign",
        seeAlso:[],
        valueType:"Alignment or VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMember", "layoutPolicy"]
    },
    "attr:Splitbar.showDownGrip":{
        ref:"attr:Splitbar.showDownGrip",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the\n 'Down' state on the grip image when the user mousedown's on this widget. \n Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showDown')} is false",
        name:"showDownGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["grip"]
    },
    "attr:WSRequest.wsOperation":{
        ref:"attr:WSRequest.wsOperation",
        flags:"IR",
        description:"Name of the web service operation to invoke.",
        name:"wsOperation",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:WSRequest"
    },
    "method:List.equals":{
        ref:"method:List.equals",
        flags:"",
        description:" Return whether this list is equal to another list.\n <P>\n Two lists are equal only if they have the same length and all contained items are in the same\n order and are also equal.\n\n",
        name:"equals",
        seeAlso:[],
        params:[
            {description:"list to check for equality", optional:false, name:"list", defaultValue:null, 
             type:"List"}
        ],
        returns:{description:"whether the specified list is equal to this list", type:"boolean"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:Layout.canDropComponents":{
        ref:"attr:Layout.canDropComponents",
        flags:"IRA",
        description:"Layouts provide a default implementation of a drag and drop interaction.  If you set\n ${isc.DocUtils.linkForRef('attr:Canvas.canAcceptDrop','canAcceptDrop')}:true and <code>canDropComponents:true</code>\n on a Layout, when a droppable Canvas (${isc.DocUtils.linkForRef('attr:Canvas.canDrop','canDrop:true')} is dragged over\n the layout will show a dropLine (a simple insertion line) at the drop location.  \n <P>\n When the drop occurs, the dragTarget (obtained using\n ${isc.DocUtils.linkForRef('classMethod:EventHandler.getDragTarget')}) is added as a member of this layout at the location\n shown by the dropLine (calculated by ${isc.DocUtils.linkForRef('method:Layout.getDropPosition')}).  This default\n behavior allows either members or external components that have\n ${isc.DocUtils.linkForRef('attr:Canvas.canDragReposition')} (or ${isc.DocUtils.linkForRef('attr:Canvas.canDrag')}) and ${isc.DocUtils.linkForRef('attr:Canvas.canDrop')} set\n to <code>true</code> to be added to or reordered within the Layout.\n <P>\n You can control the thickness of the dropLine via ${isc.DocUtils.linkForRef('attr:Layout.dropLineThickness')} and\n you can customize the style using css styling in the skin file (look for .layoutDropLine in\n skin_styles.css for your skin).  \n <P>  \n If you want to dynamically create a component to be added to the Layout in response to a\n drop event you can do so as follows: \n <pre>\n isc.VLayout.create({\n   ...various layout properties...\n   canDropComponents: true,\n   drop : function () {\n     // create the new component \n     var newMember = isc.Canvas.create(); \n     // add to the layout at the current drop position \n     // (the dropLine will be showing here)\n     this.addMember(newMember, this.getDropPosition());  \n     // hide the dropLine that was automatically shown \n     // by builtin SmartClient methods\n     this.hideDropLine();\n   }\n });\n </pre>\n If you want to completely suppress the builtin drag and drop logic, but still receive drag\n and drop events for your own custom implementation, set ${isc.DocUtils.linkForRef('attr:Canvas.canAcceptDrop')} to\n <code>true</code> and <code>canDropComponents</code> to <code>false</code> on your Layout.",
        name:"canDropComponents",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Layout",
        groups:["dragdrop"]
    },
    "method:Array.indexOf":{
        ref:"method:Array.indexOf",
        flags:"",
        description:" Return the position in the list of the first instance of the specified object.\n <p>\n If pos is specified, starts looking after that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"indexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"earliest index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"last index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "classMethod:History.registerCallback":{
        ref:"classMethod:History.registerCallback",
        flags:"",
        description:"\n Registers a callback to be called when the user navigates to a synthetic history entry.  \n <p>\n If the SmartClient Core module is loaded on the page where you're using the History module,\n you can use any format acceptable to ${isc.DocUtils.linkForRef('method:Class.fireCallback')} as the callback.  The\n parameters 'id' and 'data' will be passed to your callback, in that order.\n <p>\n If the SmartClient Core module is not loaded on the page, you can use one of the following\n formats:\n <ul>\n <li>A function that takes an id and a data argument, in that order.\n <li>An object literal with a property named 'callback' whose value is a function that takes\n an id and a data argument, in that order; and a property named 'target' that specifies the\n object on which the callback function should be applied.  So, e.g:\n <pre>\n {target: myObj, callback: myObj.myFunction(id, data)}\n </pre>\n </ul>\n\n When the History module initializes, it checks the current URL for a history id.  If the\n currently loading page has an id (because the user came in via the bookmark or when back or\n forward onto this page), then the History module will attempt to call whatever callback is\n registered with it on page load.  So, you can use this method to register a callback before\n page load and it will be called on page load if there is a history id (and subsequently when\n a synthetic history navigation occurs).  You can also use this method to register a callback\n after page load, but keep in mind that in that case you should call\n ${isc.DocUtils.linkForRef('classMethod:History.getCurrentHistoryId')} to see if the page that has loaded has a history id that\n you should act on.\n <p>\n When the user transitions to the history entry immediately before the first synthetic\n history entry, the callback is fired with an id of null.\n \n",
        name:"registerCallback",
        seeAlso:[],
        params:[
            {description:"The callback to invoke when the user navigates to a synthetic history entry.", 
             optional:false,name:"callback", defaultValue:null, type:"String or Object"}
        ],
        type:"classMethod",
        definingClass:"class:History"
    },
    "method:TabSet.selectTab":{
        ref:"method:TabSet.selectTab",
        flags:"",
        description:"	Select a tab\n",
        name:"selectTab",
        seeAlso:[],
        params:[
            {description:"tab to select", optional:false, name:"tab", defaultValue:null, 
             type:"number | ID | Tab"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('tabsOrientation')}"],
        definingClass:"class:TabSet"
    },
    "method:ListGrid.getBaseStyle":{
        ref:"method:ListGrid.getBaseStyle",
        flags:"",
        description:" Return the base stylename for this cell.  Has the following implementation by default:\n <ul>\n <li>If ${isc.DocUtils.linkForRef('attr:ListGrid.editFailedBaseStyle','this.editFailedBaseStyle')} is defined, and the\n     cell is displaying a validation error return this value.</li>\n <li>If ${isc.DocUtils.linkForRef('attr:ListGrid.editPendingBaseStyle','this.editFailedPendingStyle')} is defined, and\n     the cell is displaying an edit value that has not yet been saved (see \n     ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')}) return this value.</li>\n <li>Otherwise return ${isc.DocUtils.linkForRef('attr:ListGrid.recordBaseStyleProperty','record[listGrid.recordBaseStyleProperty]')},\n     if defined, otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.baseStyle','field.baseStyle')}, \n     or finally ${isc.DocUtils.linkForRef('attr:ListGrid.baseStyle','this.baseStyle')}</li>\n </ul>\n\n",
        name:"getBaseStyle",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null}
        ],
        params:[
            {description:"Record associated with this cell. May be <code>null</code>                               for a new edit row at the end of this grid's data set.", 
             optional:false,name:"record", defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS class for this cell", type:"CSSStyleName"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('replaceStyle')}"],
        definingClass:"class:ListGrid"
    },
    "group:keyboardEvents":{
        ref:"group:keyboardEvents",
        refs:["classMethod:EventHandler.getKey", "classMethod:EventHandler.shiftKeyDown", 
         "classMethod:EventHandler.ctrlKeyDown","classMethod:EventHandler.altKeyDown"],
        name:"keyboardEvents",
        seeAlso:[],
        type:"group"
    },
    "method:StretchImgButton.setTitleStyle":{
        ref:"method:StretchImgButton.setTitleStyle",
        flags:"",
        description:" Sets the ${isc.DocUtils.linkForRef('attr:StretchImgButton.titleStyle')}, which is applied to the title text.\n",
        name:"setTitleStyle",
        seeAlso:[],
        params:[
            {description:"new title style", optional:false, name:"style", defaultValue:null, 
             type:"CSSStyleName"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton"
    },
    "attr:Canvas.dragType":{
        ref:"attr:Canvas.dragType",
        flags:"IRWA",
        description:"The \"type\" of thing given as a string that can be dragged from this widget. If\n      specified, this will be matched up with the dropTypes of droppable widgets as detailed\n      in the dropTypes property.",
        name:"dragType",
        seeAlso:[
            {ref:"attr:Canvas.dropTypes", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:Canvas.getViewportWidth":{
        ref:"method:Canvas.getViewportWidth",
        flags:"A",
        description:"  Returns the width of the viewport onto the scrollable content.\n\n",
        name:"getViewportWidth",
        seeAlso:[],
        returns:{description:"width of the viewport, in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:TreeGrid.showOpenIcons":{
        ref:"attr:TreeGrid.showOpenIcons",
        flags:"IRW",
        description:"If true, show a different icon for <code>open</code> folders than closed folders.\n This is achieved by appending the ${isc.DocUtils.linkForRef('attr:TreeGrid.openIconSuffix')} onto the \n ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} URL [for example <code>\"[SKIN]/folder.gif\"</code> might be \n replaced by <code>\"[SKIN]/folder_open.gif\"</code>.<br>\n <b>Note</b> If this property is set to <code>false</code> we will show the same icon for\n open icons as for closed icons - unless a custom folder icon was specified, this will be\n determined by ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} plus the ${isc.DocUtils.linkForRef('attr:TreeGrid.closedIconSuffix')}.",
        name:"showOpenIcons",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "method:CubeGrid.getSelectedFacetValues":{
        ref:"method:CubeGrid.getSelectedFacetValues",
        flags:"",
        description:"\n  returns an array of facetValues objects indicating the headers that are selected in the\n  headerBar for this facet.  If facetId is not passed, returns selection for all\n  facets.\n\n  <br><i>methodType</i> getter\n",
        name:"getSelectedFacetValues",
        seeAlso:[],
        params:[
            {description:"Id for facet for which we are getting selected facetValues.", 
             optional:false,name:"facetId", defaultValue:null, type:"string"}
        ],
        returns:{description:"selected facetValues", type:"Array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:DynamicForm.itemHoverOpacity":{
        ref:"attr:DynamicForm.itemHoverOpacity",
        flags:"IRW",
        description:"Opacity for hovers shown for items",
        name:"itemHoverOpacity",
        seeAlso:[
            {ref:"attr:FormItem.hoverOpacity", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "method:Window.setStatus":{
        ref:"method:Window.setStatus",
        flags:"",
        description:"			Sets the text in the status bar of the window, redrawing if necessary.\n",
        name:"setStatus",
        seeAlso:[],
        params:[
            {description:"new text for the status bar", optional:false, name:"statusString", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"class:Window",
        groups:["appearance"]
    },
    "attr:ListGrid.timeFormatter":{
        ref:"attr:ListGrid.timeFormatter",
        flags:"IRW",
        description:"Display format to use for fields specified as type 'time'.  May also be specified at \n the field level via ${isc.DocUtils.linkForRef('attr:ListGridField.displayFormat')}.<br>\n If unset, time fields will be formatted based on the system wide \n ${isc.DocUtils.linkForRef('classAttr:Time.shortDisplayFormat')}.<br>\n If this field is editable, the timeFormatter will also be passed to the editor\n created to edit any time type fields as ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat')}",
        name:"timeFormatter",
        seeAlso:[],
        valueType:"timeFormatter",
        defaultValue:"\"toShortPaddedTime\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:ResultSet.updateCacheFromRequest":{
        ref:"attr:ResultSet.updateCacheFromRequest",
        flags:"IRA",
        description:"When a successful Add, Update or Remove type operation fires on this ResultSet's \n dataSource, if ${isc.DocUtils.linkForRef('attr:DSResponse.data')} is unset, should we integrate the submitted\n data values (from the request) into our data-set?",
        name:"updateCacheFromRequest",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["cacheSync"]
    },
    "method:DynamicForm.showErrors":{
        ref:"method:DynamicForm.showErrors",
        flags:"",
        description:" If this form has any outstanding validation errors, show them now.<br>\n This method is called when the set of errors are changed by ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or\n ${isc.DocUtils.linkForRef('method:DynamicForm.validate')}.<br>\n Default implementation will redraw the form to display error messages and call\n ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors','handleHiddenValidationErrors()')} to\n display errors with no visible field.<br>\n Note that this method may be overridden to perform custom display of validation errors.  \n",
        name:"showErrors",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "attr:DynamicForm.rightTitleSuffix":{
        ref:"attr:DynamicForm.rightTitleSuffix",
        flags:"IRW",
        description:"The string appended to the title of an item in this form if its titleOrientation\n          property is set to \"right\".",
        name:"rightTitleSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "classMethod:Page.getScreenHeight":{
        ref:"classMethod:Page.getScreenHeight",
        flags:"",
        description:"		Get the height of the user's screen, in pixels.\n",
        name:"getScreenHeight",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "attr:Menu.showKeys":{
        ref:"attr:Menu.showKeys",
        flags:"IRW",
        description:"A boolean, indicating whether the shortcut key column should be displayed. If\n showKeys is not set, the menu will show the key column only if one of its items\n specifies a keys property. If showKeys is false, the keys will not be displayed,\n but will still function.",
        name:"showKeys",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Menu"
    },
    "method:ListGrid.setSortState":{
        ref:"method:ListGrid.setSortState",
        flags:"",
        description:" Reset this grid's sort state (sort field and direction) to match the \n ${isc.DocUtils.linkForRef('type:listGridSortState')} object passed in.<br>\n Used to restore previous state retrieved from the grid by a call to \n ${isc.DocUtils.linkForRef('method:ListGrid.getSortState')}.\n\n",
        name:"setSortState",
        seeAlso:[
            {ref:"method:ListGrid.getSortState", description:null}
        ],
        params:[
            {description:"Object describing the desired sort state for the grid.", optional:false, 
             name:"sortState",defaultValue:null, type:"listGridSortState"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:CubeGrid.saveByCell":{
        ref:"attr:CubeGrid.saveByCell",
        flags:"R",
        description:"CubeGrids only support editing by cell",
        name:"saveByCell",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["cellEditing"]
    },
    "attr:FormItem.dateFormatter":{
        ref:"attr:FormItem.dateFormatter",
        flags:"IRWA",
        description:"Display format to use for date type values within this formItem. Default is to use the\n system-wide default short date format, configured via\n ${isc.DocUtils.linkForRef('classMethod:Date.setShortDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to \n change the format used by this item.<br>\n Note: if both <code>dateFormatter</code> and ${isc.DocUtils.linkForRef('attr:FormItem.timeFormatter','timeFormatter')}\n are specified on an item, Date type values will be formatted as dates using \n <code>dateFormatter</code>.<br>\n See also ${isc.DocUtils.linkForRef('attr:DateItem.displayFormat')} for formatting dates displayed in DateItems.",
        name:"dateFormatter",
        seeAlso:[],
        valueType:"DateDisplayFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:DynamicForm.canFocus":{
        ref:"attr:DynamicForm.canFocus",
        flags:"IRWA",
        description:"DynamicForms are considered to have focus if any of their form items have focus.\n Note that setting <code>dynamicForm.canFocus</code> to false will have no effect on\n whether form items within the form may recieve focus. This property will only govern\n whether the form may recieve focus if the form contains no focusable items.",
        name:"canFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["focus"]
    },
    "method:Menu.setItems":{
        ref:"method:Menu.setItems",
        flags:"",
        description:" Synonym for ${isc.DocUtils.linkForRef('method:Menu.setData')}.\n",
        name:"setItems",
        seeAlso:[],
        params:[
            {description:"new items for this menu", optional:false, name:"items", defaultValue:null, 
             type:"array of MenuItems"}
        ],
        type:"method",
        definingClass:"class:Menu",
        groups:["data"]
    },
    "attr:GridRenderer.quickDrawAheadRatio":{
        ref:"attr:GridRenderer.quickDrawAheadRatio",
        flags:"IRWA",
        description:"Alternative to ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio')}, to be used when the user\n is rapidly changing the grids viewport (for example drag scrolling through the grid).\n If unspecified ${isc.DocUtils.linkForRef('attr:GridRenderer.drawAheadRatio')} will be used in all cases",
        name:"quickDrawAheadRatio",
        seeAlso:[],
        valueType:"float",
        defaultValue:"1.3",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["performance"]
    },
    "group:fetching":{
        ref:"group:fetching",
        refs:["attr:ResultSet.fetchMode", "attr:ResultSet.initialData", "attr:ResultSet.initialLength", 
         "attr:ResultSet.allRows","attr:ResultSet.resultSize", "attr:ResultSet.fetchDelay", "type:FetchMode"],
        name:"fetching",
        seeAlso:[],
        type:"group"
    },
    "classMethod:isc.say":{
        ref:"classMethod:isc.say",
        flags:"",
        description:" Show a modal dialog with a message, icon, and \"OK\" button.  Intended for notifications which\n are not really warnings (default icon is less severe).\n <P>\n The callback will receive boolean true for an OK button click, or null if the Dialog is\n dismissed via the close button.\n\n",
        name:"say",
        seeAlso:[
            {ref:"classAttr:Dialog.Warn", description:null},
            {ref:"classMethod:isc.warn", description:null},
            {ref:"classMethod:isc.ask", description:null},
            {ref:"method:Dialog.okClick", description:null},
            {ref:"classAttr:Dialog.SAY_TITLE", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"Optional Callback to fire when the user                                       dismisses the dialog. This has the single parameter\n                                      'value', indicating the value returned by the Warn\n                                      dialog from 'okClick()' etc.", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"additional properties for the Dialog.                                      To set ${isc.DocUtils.linkForRef('attr:Dialog.toolbarButtons','custom buttons')} for\n                                      the Dialog, set properties.buttons to an array of buttons\n										eg:	{ buttons : [Dialog.OK, Dialog.CANCEL] }", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "group:state":{
        ref:"group:state",
        refs:["method:StatefulCanvas.setState", "method:StatefulCanvas.getState", 
         "method:StatefulCanvas.setSelected","method:StatefulCanvas.select", "method:StatefulCanvas.deselect", 
         "method:StatefulCanvas.isSelected","method:StatefulCanvas.getActionType", "method:StatefulCanvas.setActionType", 
         "method:StatefulCanvas.addToRadioGroup","method:StatefulCanvas.removeFromRadioGroup", "method:StatefulCanvas.setDisabled", 
         "method:Button.select","method:Button.deselect", "method:Button.isSelected", "method:Button.setSelected", 
         "method:Button.addToRadioGroup","method:Button.removeFromRadioGroup", "method:Button.setActionType", 
         "method:Button.getActionType","method:Button.setState", "method:Button.setDisabled", "method:Button.getState", 
         "method:ImgButton.select","method:ImgButton.deselect", "method:ImgButton.isSelected", "method:ImgButton.setSelected", 
         "method:ImgButton.addToRadioGroup","method:ImgButton.removeFromRadioGroup", "method:ImgButton.setActionType", 
         "method:ImgButton.getActionType","method:ImgButton.setState", "method:ImgButton.setDisabled", "method:ImgButton.getState", 
         "method:StretchImgButton.select","method:StretchImgButton.deselect", "method:StretchImgButton.isSelected", 
         "method:StretchImgButton.setSelected","method:StretchImgButton.addToRadioGroup", "method:StretchImgButton.removeFromRadioGroup", 
         "method:StretchImgButton.setActionType","method:StretchImgButton.getActionType", "method:StretchImgButton.setState", 
         "method:StretchImgButton.setDisabled","method:StretchImgButton.getState", "attr:StatefulCanvas.redrawOnStateChange", 
         "attr:StatefulCanvas.selected","attr:StatefulCanvas.state", "attr:StatefulCanvas.showRollOver", 
         "attr:StatefulCanvas.showFocus","attr:StatefulCanvas.showFocused", "attr:StatefulCanvas.showFocusedAsOver", 
         "attr:StatefulCanvas.showDown","attr:StatefulCanvas.showDisabled", "attr:StatefulCanvas.actionType", 
         "attr:StatefulCanvas.radioGroup","attr:Button.selected", "attr:Button.radioGroup", "attr:Button.actionType", 
         "attr:Button.state","attr:Button.showDisabled", "attr:Button.showDown", "attr:Button.showFocused", 
         "attr:Button.showRollOver","attr:ImgButton.selected", "attr:ImgButton.radioGroup", "attr:ImgButton.actionType", 
         "attr:ImgButton.state","attr:ImgButton.showDisabled", "attr:ImgButton.showDown", "attr:ImgButton.showFocus", 
         "attr:ImgButton.showFocused","attr:ImgButton.showRollOver", "attr:StretchImgButton.selected", 
         "attr:StretchImgButton.radioGroup","attr:StretchImgButton.actionType", "attr:StretchImgButton.state", 
         "attr:StretchImgButton.showDisabled","attr:StretchImgButton.showDown", "attr:StretchImgButton.showFocus", 
         "attr:StretchImgButton.showFocused","attr:StretchImgButton.showRollOver", "type:State", "type:SelectionType", "type:Selected"],
        description:"Change of state and it's consequences for presentation.",
        name:"state",
        seeAlso:[],
        type:"group"
    },
    "class:Dialog":{
        methods:["method:Dialog.saveData", "method:Dialog.closeClick", "method:Dialog.cancelClick", 
         "method:Dialog.okClick","method:Dialog.applyClick", "method:Dialog.yesClick", "method:Dialog.noClick"],
        exampleConfig:"Dialog.xml",
        ref:"class:Dialog",
        classAttrs:["classAttr:Dialog.OK_BUTTON_TITLE", "classAttr:Dialog.APPLY_BUTTON_TITLE", 
         "classAttr:Dialog.YES_BUTTON_TITLE","classAttr:Dialog.NO_BUTTON_TITLE", "classAttr:Dialog.CANCEL_BUTTON_TITLE", 
         "classAttr:Dialog.CONFIRM_TITLE","classAttr:Dialog.SAY_TITLE", "classAttr:Dialog.WARN_TITLE", "classAttr:Dialog.ASK_TITLE", 
         "classAttr:Dialog.ASK_FOR_VALUE_TITLE","classAttr:Dialog.LOGIN_TITLE", "classAttr:Dialog.USERNAME_TITLE", 
         "classAttr:Dialog.PASSWORD_TITLE","classAttr:Dialog.LOGIN_BUTTON_TITLE", "classAttr:Dialog.LOGIN_ERROR_MESSAGE", 
         "classAttr:Dialog.Prompt","classAttr:Dialog.Warn"],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:Dialog.styleName", "attr:Dialog.showToolbar", "attr:Dialog.toolbarButtons"],
        description:"Dialogs are a specialized version of ${isc.DocUtils.linkForRef('class:Window')} used for small windows such as\n alerts, prompts, and confirmations.  They can be modal or modeless (via the\n ${isc.DocUtils.linkForRef('attr:Window.isModal','isModal')} property) and will contain various children by default\n (\"titlebar\", \"resizer\", etc).\n <P>\n NOTE: If you are building a custom component that will add components to the Window via\n ${isc.DocUtils.linkForRef('method:Window.addItem','addItem()')}, in most cases it makes sense",
        name:"Dialog",
        seeAlso:[],
        type:"class"
    },
    "attr:Progressbar.src":{
        ref:"attr:Progressbar.src",
        flags:"IRW",
        description:"The base file name for the progressbar image.",
        name:"src",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]progressbar.gif\"",
        type:"attr",
        definingClass:"class:Progressbar",
        groups:["appearance"]
    },
    "method:Canvas.setHtmlElement":{
        ref:"method:Canvas.setHtmlElement",
        flags:"",
        description:" Setter for the ${isc.DocUtils.linkForRef('attr:Canvas.htmlElement')}.\n",
        name:"setHtmlElement",
        seeAlso:[],
        params:[
            {description:"New htmlElement for this canvas, or Null to clear the existing      htmlElement", 
             optional:false,name:"element", defaultValue:null, type:"DOM element"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["htmlElement"]
    },
    "method:FormItem.getDisplayValue":{
        ref:"method:FormItem.getDisplayValue",
        flags:"",
        description:" Returns this item's value with any valueMap applied to it - the value as currently\n displayed to the user.\n",
        name:"getDisplayValue",
        seeAlso:[],
        params:[
            {description:"optional stored value to be mapped to a display value.  Default is to                use the form's current value", 
             optional:true,name:"value", defaultValue:null, type:null}
        ],
        returns:{description:"value displayed to the user", type:"any"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["valueMap"]
    },
    "class:WSRequest":{
        methods:[],
        ref:"class:WSRequest",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:WSRequest.wsOperation", "attr:WSRequest.data", "attr:WSRequest.useFlatFields", 
         "attr:WSRequest.headerData"],
        description:"A WSRequest (or \"web service request\") is an extended RPCRequest will additional properties\n application to WSDL/SOAP web services.\n <P>\n All properties which are legal on ${isc.DocUtils.linkForRef('class:RPCRequest')} are legal on a WSRequest, in\n addition to the properties listed here.",
        name:"WSRequest",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        type:"class"
    },
    "attr:Tree.idField":{
        ref:"attr:Tree.idField",
        flags:"IRA",
        description:"For trees with modelType \"parent\", this property specifies the name of the property\n that contains the unique ID of nodes in this tree. By default this is set to\n ${isc.DocUtils.linkForRef('attr:TreeNode.id')}.",
        name:"idField",
        seeAlso:[
            {ref:"attr:TreeNode.id", description:null}
        ],
        valueType:"string",
        defaultValue:"\"id\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "group:dsResponse":{
        ref:"group:dsResponse",
        refs:["attr:DSResponse.data"],
        name:"dsResponse",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.getImage":{
        ref:"method:Canvas.getImage",
        flags:"A",
        description:" Retrieve a native image element by name.\n <P>\n The image element must have been created from HTML generated by calling\n <code>canvas.imgHTML()</code> on this particular Canvas.\n \n",
        name:"getImage",
        seeAlso:[],
        params:[
            {description:"name of the image to get, as originally passed to                              <code>imgHTML</code>", 
             optional:false,name:"identifier", defaultValue:null, type:"string"}
        ],
        returns:{description:"DOM image object if found, else null", type:"object"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["images"]
    },
    "attr:FormItem.errorOrientation":{
        ref:"attr:FormItem.errorOrientation",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is true, where should the error icon and text appear\n relative to the form item itself. Valid options are <code>\"top\"</code>, \n <code>\"bottom\"</code>, <code>\"left\"</code> or <code>\"right\"</code>.<br>\n If unset the orientation will be derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.errorOrientation')}.",
        name:"errorOrientation",
        seeAlso:[],
        valueType:"align",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["validation", "appearance"]
    },
    "method:ViewLoader.setViewURL":{
        ref:"method:ViewLoader.setViewURL",
        flags:"",
        description:" Change the URL this component loads a view from.  Triggers a fetch from the new URL.\n\n",
        name:"setViewURL",
        seeAlso:[],
        params:[
            {description:"URL to retrieve view from", optional:true, name:"url", defaultValue:null, 
             type:"URL"},
            {description:"Parameters to send to the viewURL.  Merged with                           <code>component.viewURLParams</code> if both are set.", 
             optional:true,name:"params", defaultValue:null, type:"Object"},
            {description:"Additional properties for the RPCRequest                         sent by the ViewLoader.  Very advanced; could be used to, for\n                        example, set HTTP headers.", 
             optional:true,name:"rpcProperties", defaultValue:null, type:"RPCRequest Properties"}
        ],
        type:"method",
        definingClass:"class:ViewLoader",
        groups:["viewLoading"]
    },
    "group:jspTags":{
        ref:"group:jspTags",
        title:"SmartClient JSP Tags",
        refs:[],
        description:"The SmartClient Java Server component ships with a number of custom JSP tags designed to\n make development with SmartClient easier.  The custom tags are defined in\n <code>[webroot]/WEB-INF/iscTaglib.xml</code> in the SDK package.  To make use of these tags, make\n sure you have the following entry in your web.xml (the SDK already contains this entry by\n default):<br>\n <pre>\n &lt;taglib&gt;\n     &lt;taglib-uri&gt;isomorphic&lt;/taglib-uri&gt; \n     &lt;taglib-location&gt;/WEB-INF/iscTaglib.xml&lt;/taglib-location&gt; \n &lt;/taglib&gt;\n </pre>\n <p>\n Also, the JSP page making use of the tag must load the custom taglib via the following\n directive:<br>\n <pre>\n &lt;%@ taglib uri=\"/WEB-INF/iscTaglib.xml\" prefix=\"isomorphic\" %&gt;\n </pre>\n All SmartClient JSP tags produce either HTML or JavaScript output, so you can easily see\n what any given tag is generating by doing a \"View->Source\" in your browser after browsing to\n the JSP that contains your tag.  Tags that produce HTML must be located in the HTML BODY\n context in your JSP - that is, outside of any <code>&lt;SCRIPT&gt;</code> tags and inside\n <code>&lt;BODY&gt;</code> tags.  Tags that produce JavaScript must be located inside\n <code>&lt;SCRIPT&gt;</code> tags.",
        name:"jspTags",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:DataSource.getLegalChildTags":{
        ref:"method:DataSource.getLegalChildTags",
        flags:"",
        description:" For a DataSource that describes a DOM structure, the list legal child elements that can\n be contained by the element described by this DataSource.\n <p>\n For a DataSource described by XML schema, this is the list of legal subelements <b>of\n complexType</b> (elements of simpleType become DataSourceFields with atomic type).\n <p>\n Note that currently, if an XML schema file contains ordering constraints, DataSources\n derived from XML Schema do not capture these constraints.\n\n",
        name:"getLegalChildTags",
        seeAlso:[],
        type:"method",
        definingClass:"class:DataSource",
        groups:["xmlSchema"]
    },
    "method:Window.setShowMaximizeButton":{
        ref:"method:Window.setShowMaximizeButton",
        flags:"",
        description:" Dynamically update ${isc.DocUtils.linkForRef('attr:Window.showMaximizeButton')} to show / hide the maximizeButton\n",
        name:"setShowMaximizeButton",
        seeAlso:[
            {ref:"attr:Window.headerControls", description:null},
            {ref:"attr:Window.showMaximizeButton", description:null}
        ],
        type:"method",
        definingClass:"class:Window"
    },
    "classMethod:Page.clearEvent":{
        ref:"classMethod:Page.clearEvent",
        flags:"",
        description:"	Clear event(s) under the given eventType.<p>\n	To clear all events, omit the ID parameter.  To clear a specific event,\n	pass the ID that was returned by Page.setEvent().\n",
        name:"clearEvent",
        seeAlso:[
            {ref:"class:EventHandler", description:null}
        ],
        params:[
            {description:"event type to clear", optional:false, name:"eventType", defaultValue:null, 
             type:"PageEvent, Event"},
            {description:"ID of the event to clear. 										If not specified, all events in eventType will be cleared.", 
             optional:true,name:"ID", defaultValue:null, type:"number"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["EventRegistry"]
    },
    "attr:CubeGrid.hilites":{
        ref:"attr:CubeGrid.hilites",
        flags:"IRW",
        description:"Hilites are styling that can declaratively attached to data via setting the\n ${isc.DocUtils.linkForRef('attr:CubeGrid.hiliteProperty')} on a record to the id of a hilite declaration.\n <P>\n Hilites essentially supply functionality similar to what is possible by overriding\n ${isc.DocUtils.linkForRef('method:ListGrid.getCellStyle','getCellStyle()')} and other styling-related methods, but\n without coding.",
        name:"hilites",
        seeAlso:[],
        valueType:"GridHilite",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "classMethod:XMLTools.nativeXMLAvailable":{
        ref:"classMethod:XMLTools.nativeXMLAvailable",
        flags:"",
        description:"\n Returns true if the current browser exposes an XML parser that can be used for SmartClient\n XML operations like web service bindings and XML processing.  See\n ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information on when the XML parser may not\n available and what features are impacted as a result.\n\n",
        name:"nativeXMLAvailable",
        seeAlso:[],
        returns:{description:"true if native XML processing is available, false otherwise.", type:"boolean"},
        type:"classMethod",
        definingClass:"class:XMLTools"
    },
    "attr:ListGridField.linkText":{
        ref:"attr:ListGridField.linkText",
        flags:"IRW",
        description:"The HTML to display in cells of this field if the fieldType is set to link. Can be\n  overridden by ${isc.DocUtils.linkForRef('attr:ListGridRecord.linkText')}.",
        name:"linkText",
        seeAlso:[
            {ref:"type:ListGridFieldType", description:null},
            {ref:"type:FieldType", description:null},
            {ref:"attr:ListGridRecord.linkText", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('linkImage')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "classMethod:isA.Boolean":{
        ref:"classMethod:isA.Boolean",
        flags:"",
        description:"\n	Is <code>object</code> a Boolean object?\n\n",
        name:"Boolean",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Boolean", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "method:Canvas.redraw":{
        ref:"method:Canvas.redraw",
        flags:"A",
        description:" Redraws the widget immediately with its current property values.  \n\n Generally, if you want a Canvas to redraw, call markForRedraw() - this will cause the Canvas to\n be redrawn when current processing ends, so that a series of modifications made to a Canvas will\n cause it to redraw only once.\n\n Only call redraw() directly if you need immediate responsiveness, for example you are redrawing\n in response to continuous mouse motion.\n\n",
        name:"redraw",
        seeAlso:[],
        params:[
            {description:"reason for performing the redraw", optional:true, name:"reason", 
             defaultValue:"\"no reason provided\"",type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "group:stringMethods":{
        ref:"group:stringMethods",
        title:"String Methods Overview",
        treeLocation:["Client Reference/System"],
        refs:[],
        description:"A method flagged as a String Method can be specified as a String containing a valid\n JavaScript expression.  This expression will automatically be converted to a function with a\n return value matching the value of the last statement.  Providing a String is not required -\n you may use a real function instead.\n <p>\n For example - suppose you wanted to override the <code>leafClick()</code> method on\n the TreeGrid.  Normally you would do so as follows:<br>\n\n <pre>\n TreeGrid.create({\n     ...\n     leafClick : function(viewer, leaf, recordNum) { \n         if(leaf.name == 'zoo') { \n             alert(1); \n         } else {\n             alert(2);\n         }\n     }\n });\n </pre>\n\n Since leafClick is a stringMethod, however, you can shorten this to:<br>\n <pre>\n TreeGrid.create({\n     ...\n     leafClick : \"if(leaf.name == 'zoo') { alert(1); } else { alert(2); }\";\n });\n </pre>",
        name:"stringMethods",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.getCellStyle":{
        ref:"method:CubeGrid.getCellStyle",
        flags:"",
        description:" Return the CSS class for a cell. By default this method has the following implementation:<br>\n - return any custom style for the record (see ${isc.DocUtils.linkForRef('attr:GridRenderer.recordCustomStyleProperty')}) \n   if defined.<br>\n - create a style name based on the result of ${isc.DocUtils.linkForRef('method:GridRenderer.getBaseStyle')} and the \n   state of the record.<br>\n The state of the record is indicated by adding a suffix to the base style.\n There are four independant boolean states, which are combined in the order given:\n <ol>\n <li>\"Disabled\" : whether the cell is disabled; enable by setting the \"enabled\" flag on record\n     returned by getCellRecord\n <li>\"Selected\" : whether cell is selected; enable by passing a Selection object as \"selection\"\n <li>\"Over\" : mouse is over this cell; enable with showRollovers\n <li>\"Dark\" : alternating color bands; enable with alternateRowStyles\n </ol>\n For example, with a baseStyle of \"myCell\", a cell which is selected, which the mouse is over,\n and which is in a dark-colored band will get a styleName of myCellSelectedOverDark.\n <p>\n Cell Styles customizable by:\n <ul>\n <li>attaching a custom style to a record by setting \n    <code>record[this.recordCustomStyleProperty]</code> to some valid CSS style name.  \n <li>modifying the base style returned by getBaseStyle() [see that method for further \n     documentation on this]\n <li>overriding this function\n </ul>\n\n",
        name:"getCellStyle",
        seeAlso:[],
        params:[
            {description:"record object for this row and column", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"number of the row", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"number of the column", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS style for this cell", type:"CSSStyleName"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["appearance"]
    },
    "method:WebService.getHeaderData":{
        ref:"method:WebService.getHeaderData",
        flags:"",
        description:" Override this method to return data that should be serialized as SOAP headers for the\n current operation, such as a sessionId.\n <P>\n Format of the returned data is the same as that documented for\n ${isc.DocUtils.linkForRef('attr:DSRequest.headerData')}.\n <P>\n The object passed to this method will be a true DSRequest in the case of a DataSource\n operation, or just an Object with a \"data\" property for web service operations\n initiated by ${isc.DocUtils.linkForRef('method:WebService.callOperation')}.\n <P>\n If <code>headerData</code> is instead provided via either dsRequest.headerData or as\n part of the <code>requestProperties</code> parameter to\n ${isc.DocUtils.linkForRef('method:WebService.callOperation','callOperation()')}, this method will never be called.\n\n",
        name:"getHeaderData",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"dsRequest", defaultValue:null, type:"DSRequest"}
        ],
        returns:{description:"data for SOAP headers", type:"Object"},
        type:"method",
        definingClass:"class:WebService"
    },
    "attr:ListGridField.name":{
        ref:"attr:ListGridField.name",
        flags:"IRW",
        description:"Unique name of this field. \n  <P>\n  The name of field is also the property in each record which holds the value for that\n  field.",
        name:"name",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["data"]
    },
    "attr:ToolbarItem.showTitle":{
        ref:"attr:ToolbarItem.showTitle",
        flags:"IRW",
        description:"Don't show a title for toolbars",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["appearance"]
    },
    "method:Tree.hasLeaves":{
        ref:"method:Tree.hasLeaves",
        flags:"",
        description:"\n  Return whether this node has any children that are leaves.\n\n",
        name:"hasLeaves",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true fi the node has children that are leaves", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:FormItemIcon.keyPress":{
        ref:"method:FormItemIcon.keyPress",
        flags:"",
        description:"      StringMethod action to fire when this icon has focus and recieves a keypress\n      event.\n      If unset the form item's <code>iconKeyPress</code> method will be fired instead \n      (if specified).\n",
        name:"keyPress",
        seeAlso:[],
        params:[
            {description:"Name of the key pressed", optional:false, name:"keyName", defaultValue:null, 
             type:"string"},
            {description:"character produced by the keypress", optional:false, name:"character", 
             defaultValue:null,type:"character"},
            {description:"The Dynamic Form to which this icon's item belongs.", optional:false, 
             name:"form",defaultValue:null, type:"DynamicForm"},
            {description:"The Form Item containing this icon", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"},
            {description:"A pointer to the form item icon", optional:false, name:"icon", 
             defaultValue:null,type:"FormItemIcon"}
        ],
        type:"method",
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "group:frozenFields":{
        ref:"group:frozenFields",
        title:"Frozen Fields",
        refs:["method:ListGrid.freezeField", "method:ListGrid.unfreezeField", 
         "attr:ListGridField.frozen","attr:ListGrid.frozenBaseStyle", "attr:ListGrid.shrinkForFreeze", 
         "attr:ListGrid.frozenHeaderBaseStyle","attr:ListGrid.frozenHeaderTitleStyle", "attr:ListGrid.canFreezeFields"],
        description:"Frozen fields are fields that do not scroll horizontally with other fields, remaining on\n the screen while other fields may be scrolled off.  This feature is typically used to\n allow basic identifying information (like an \"accountId\") to remain on screen while the\n user scrolls through a large number of related fields.\n <P>\n Fields can be programmatically frozen via setting\n ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','field.frozen')} to true when the grid is created, or\n dynamically frozen and unfrozen via ${isc.DocUtils.linkForRef('method:ListGrid.freezeField','freezeField()')} and\n ${isc.DocUtils.linkForRef('method:ListGrid.unfreezeField','unfreezeField()')}.\n The setting ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','canFreezeFields')} enables a user interface to\n allow end users to dynamically freeze and unfreeze fields.\n <P>\n The frozen fields feature is not compatible with the following features:\n <ul>\n <li> variable height auto-sizing records\n      (${isc.DocUtils.linkForRef('attr:ListGrid.fixedRecordHeights','fixedRecordHeights:false')})\n <li> inline filtering (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','showFilterEditor:true')})\n <li> headers that autoFit to titles (normally enabled via\n      <code>field.overflow:\"visible\"</code>\n <li> the ${isc.DocUtils.linkForRef('class:CubeGrid')} subclass of ListGrid\n <li> nested grids\n </ul>\n The frozen fields feature <b>is</b> compatible with column resize and reorder, selection\n and multi-selection, loading data on demand, inline editing, drag and drop and reorder\n of records, the ${isc.DocUtils.linkForRef('class:TreeGrid')} subclass of ListGrid, and all dynamic styling-related and\n formatting-related features.",
        name:"frozenFields",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGridField.imageWidth":{
        ref:"attr:ListGridField.imageWidth",
        flags:"IRW",
        description:"Width of images shown for fieldTypes image and imageFile in this field.\n <P>\n If set to a String, assumed to be a property on each record that specifies the image\n width.  For example, if <code>field.imageWidth</code> is \"logoWidth\",\n <code>record.logoWidth</code> will control the width of the image.",
        name:"imageWidth",
        seeAlso:[
            {ref:"attr:ListGrid.imageSize", description:null},
            {ref:"attr:ListGridField.imageSize", description:null},
            {ref:"attr:ListGridField.imageHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:ListGrid.cancelEditingConfirmationMessage":{
        ref:"attr:ListGrid.cancelEditingConfirmationMessage",
        flags:"IRW",
        description:"If this is an editable listGrid, and <code>this.confirmCancelEditing</code> is true\n this property is used as the message to display in the confirmation dismissal prompt.",
        name:"cancelEditingConfirmationMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"Cancelling this edit will clear unsaved edit values for this record. Continue?",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing", "i18nMessages"]
    },
    "attr:ButtonItem.baseStyle":{
        ref:"attr:ButtonItem.baseStyle",
        flags:"IRW",
        description:"Optional <code>baseStyle</code> will be applied to the button.",
        name:"baseStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ButtonItem",
        groups:["appearance"]
    },
    "attr:Canvas.shadowSoftness":{
        ref:"attr:Canvas.shadowSoftness",
        flags:"IRA",
        description:"Softness, or degree of blurring, of the shadow.\n <P>\n A shadow with <code>softness:x</code> is 2x pixels larger in each direction than the element\n throwing the shadow, and the media for each edge should be x pixels wide/tall.\n <P>\n Defaults to <code>shadowDepth</code> if unset.",
        name:"shadowSoftness",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('shadows')}"],
        definingClass:"class:Canvas",
        groups:["shadow"]
    },
    "method:Canvas.setTabIndex":{
        ref:"method:Canvas.setTabIndex",
        flags:"A",
        description:"  Assign an explicit tabIndex to this widget.\n",
        name:"setTabIndex",
        seeAlso:[
            {ref:"attr:Canvas.tabIndex", description:null}
        ],
        params:[
            {description:"New tabIndex for this widget. Must be less than                           ${isc.DocUtils.linkForRef('classAttr:Canvas.TAB_INDEX_FLOOR')} to avoid interfering with auto-assigned\n                          tab indices on the page.", 
             optional:false,name:"tabIndex", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "attr:DetailViewerField.value":{
        ref:"attr:DetailViewerField.value",
        flags:"IR",
        description:"When a field specifies its ${isc.DocUtils.linkForRef('attr:DetailViewerField.type')} to be \"header\", the value of\n this attribute specifies the header text.",
        name:"value",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"undefined\"",
        type:"attr",
        definingClass:"object:DetailViewerField"
    },
    "attr:Menu.emptyMessage":{
        ref:"attr:Menu.emptyMessage",
        flags:"IRWA",
        description:"Message to show when a menu is shown with no items.",
        name:"emptyMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"[Empty menu]\"",
        type:"attr",
        definingClass:"class:Menu"
    },
    "class:CanvasItem":{
        methods:[],
        ref:"class:CanvasItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:CanvasItem.canvas", "attr:CanvasItem.canvasConstructor", 
         "attr:CanvasItem.canvasDefaults","attr:CanvasItem.canvasProperties"],
        description:"Form item which renders a Canvas inline in a DynamicForm instance.",
        name:"CanvasItem",
        seeAlso:[],
        type:"class"
    },
    "method:CubeGrid.facetValueSelectionChanged":{
        ref:"method:CubeGrid.facetValueSelectionChanged",
        flags:"",
        description:"\n      Handler/Notification function for facetValue selection change\n      (no default implementation)\n\n      <br><i>methodType</i> handler\n",
        name:"facetValueSelectionChanged",
        seeAlso:[],
        params:[
            {description:"facetValues with new selection state", optional:false, name:"facetValues", 
             defaultValue:null,type:"facetValues object"},
            {description:"new selection state", optional:false, name:"newState", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:EdgedCanvas.edgeOffset":{
        ref:"attr:EdgedCanvas.edgeOffset",
        flags:"IRA",
        description:"Amount the contained Canvas should be offset.  Defaults to edgeSize; set to less than\n edgeSize to allow the contained Canvas to overlap the edge and corner media.",
        name:"edgeOffset",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('edges')}"],
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:ListGrid.showSortArrow":{
        ref:"attr:ListGrid.showSortArrow",
        flags:"IRW",
        description:"Indicates whether a sorting arrow should appear for the listGrid, and its\n          location. See SortArrow type for details.<br>\n          Clicking the sort arrow reverses the direction of sorting for the current sort\n          column (if any), or sorts the listGrid by its first sortable column. The arrow\n          image on the button indicates the current direction of sorting.\n          If undefined, the sort arrow will show up in the sorted field, and the\n          corner sort button will be displayed if a vertical scrollbar is being displayed",
        name:"showSortArrow",
        seeAlso:[],
        valueType:"SortArrow",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["sorting", "appearance"]
    },
    "attr:Layout.memberOverlap":{
        ref:"attr:Layout.memberOverlap",
        flags:"IR",
        description:"Number of pixels by which each member should overlap the preceding member, used for\n creating an \"stack of cards\" appearance for the members of a Layout.\n <P>\n <code>memberOverlap</code> can be used in conjunction with ${isc.DocUtils.linkForRef('attr:Layout.stackZIndex')} to create\n a particular visual stacking order.\n <P>\n Note that overlap of individual members can be accomplished with a negative setting for\n ${isc.DocUtils.linkForRef('attr:Canvas.extraSpace')}.",
        name:"memberOverlap",
        seeAlso:[],
        valueType:"positiveInteger",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMember"]
    },
    "attr:Button.showDisabledIcon":{
        ref:"attr:Button.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "group:values":{
        ref:"group:values",
        refs:[],
        description:"Manipulating the values stored in the form.",
        name:"values",
        seeAlso:[],
        type:"group"
    },
    "attr:Menu.defaultWidth":{
        ref:"attr:Menu.defaultWidth",
        flags:"IRW",
        description:"The default menu width.",
        name:"defaultWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"150",
        type:"attr",
        definingClass:"class:Menu",
        groups:["sizing"]
    },
    "attr:DSResponse.status":{
        ref:"attr:DSResponse.status",
        flags:"R",
        description:"Same meaning as ${isc.DocUtils.linkForRef('attr:RPCResponse.status')}, except DSResponses have additional error codes,\n such as ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR','validation failure')}.",
        name:"status",
        seeAlso:[
            {ref:"group:dataSourceOperations", 
             description:"for standard return types for DataSource Operations"}
        ],
        valueType:"Number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["errorHandling"]
    },
    "attr:DynamicForm.disableValidation":{
        ref:"attr:DynamicForm.disableValidation",
        flags:"IRW",
        description:"If set to true, client-side validators will not run on the form when validate() is\n called.  Server-side validatiors (if any) will still run on attempted save.",
        name:"disableValidation",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null},
            {ref:"method:DynamicForm.submit", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "class:HeaderItem":{
        methods:[],
        exampleConfig:"HeaderItem.xml",
        ref:"class:HeaderItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:HeaderItem.defaultValue", "attr:HeaderItem.showTitle", 
         "attr:HeaderItem.textBoxStyle","attr:HeaderItem.colSpan", "attr:HeaderItem.startRow", "attr:HeaderItem.endRow"],
        description:"FormItem for showing a header within a DynamicForm.\n <p>\n Set the <code>defaultValue</code> of this item to the HTML you want to embed in the form.",
        name:"HeaderItem",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.refreshCell":{
        ref:"method:ListGrid.refreshCell",
        flags:"",
        description:" Refresh an individual cell without redrawing the grid.\n <P>\n The cell's value, CSS class, and CSS text will be refreshed, to the current values returned\n by getCellValue(), getCellStyle() and getCellCSSText() respectively.\n\n",
        name:"refreshCell",
        seeAlso:[
            {ref:"method:ListGrid.refreshCellStyle", description:"to update just styling"}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column number of cell to refresh", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('calculatedCellValue')}"],
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:TreeGrid.openIconSuffix":{
        ref:"attr:TreeGrid.openIconSuffix",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:TreeGrid.showOpenIcons')} is true, this suffix will be appended to the\n ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')} for open folders in this treeGrid.",
        name:"openIconSuffix",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"open\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "attr:ResultSet.initialLength":{
        ref:"attr:ResultSet.initialLength",
        flags:"IA",
        description:"Initial value of the data set length.",
        name:"initialLength",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching", "cacheSync"]
    },
    "attr:Chart.facets":{
        ref:"attr:Chart.facets",
        flags:"IR",
        description:"An Array of facets, exactly analogous to ${isc.DocUtils.linkForRef('attr:CubeGrid.facets')}, except that:\n <ul>\n <li> the \"inlinedValues\" property can be set on a facet to change data representation as\n described under ${isc.DocUtils.linkForRef('attr:Chart.data')}.\n <li> for a non-inlined facet, Charts support auto-derivation of facetValues from the data.\n </ul>",
        name:"facets",
        seeAlso:[],
        valueType:"Array of Facet or Facet",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "attr:Canvas.visibility":{
        flags:"IRW",
        getter:["isVisible"],
        type:"attr",
        ref:"attr:Canvas.visibility",
        description:"Controls widget visibility when the widget is initialized. See Visibility type for\n      details.",
        name:"visibility",
        setter:["show", "hide"],
        valueType:"Visibility",
        seeAlso:[],
        defaultValue:"Canvas.INHERIT",
        groups:["appearance"],
        definingClass:"class:Canvas"
    },
    "method:Canvas.mouseWheel":{
        ref:"method:Canvas.mouseWheel",
        flags:"A",
        description:"\n Executed when the mouse wheel is actuated.\n\n",
        name:"mouseWheel",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        platformNotes:"Not all end user systems have mouse wheels.",
        examples:["${isc.DocUtils.linkForExampleId('customMouseEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:ListGrid.getEditorValueMap":{
        ref:"method:ListGrid.getEditorValueMap",
        flags:"A",
        description:"\n  Returns the valueMap to display for a field when it is displayed in the editor while\n  editing some record.<br>\n  Called when a user starts to edit a field, or whenever the field valueMap is updated via\n  a call to ${isc.DocUtils.linkForRef('method:ListGrid.setValueMap')} or ${isc.DocUtils.linkForRef('method:ListGrid.setEditorValueMap')}.\n  Default implementation will return the <code>field.editorValueMap</code> if specified, otherwise\n  <code>field.valueMap</code> - can be overriden to provide a\n  different specific valueMap for some field based on the record/field data.\n\n",
        name:"getEditorValueMap",
        seeAlso:[],
        params:[
            {description:"field definition field for which we need a valueMap", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"Field values for record being edited. Note that this will include                              the current edit values for fields that have not yet been saved.\n                              May be null, if editing a new record.", 
             optional:false,name:"values", defaultValue:null, type:"object"}
        ],
        returns:{description:"ValueMap for the edit field (or null if no valueMap required)", type:"ValueMap"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:CanvasItem.canvasProperties":{
        ref:"attr:CanvasItem.canvasProperties",
        flags:"IRW",
        description:"Properties to apply to this canvas on creation if this.canvas is not already a canvas \n instance.",
        name:"canvasProperties",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:CanvasItem"
    },
    "attr:Scrollbar.scrollTarget":{
        ref:"attr:Scrollbar.scrollTarget",
        flags:"IRWA",
        description:"The widget whose contents should be scrolled by this scrollbar. The scrollbar thumb\n          is sized according to the amount of visible vs. scrollable content in this widget.",
        name:"scrollTarget",
        setter:["setScrollTarget"],
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "attr:DataSource.addGlobalId":{
        ref:"attr:DataSource.addGlobalId",
        flags:"IRA",
        description:"Whether to make this DataSource available as a global variable for convenience.",
        name:"addGlobalId",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["identity"]
    },
    "attr:FormItem.validators":{
        ref:"attr:FormItem.validators",
        flags:"IR",
        description:"Validators for this form item.  \n <P>\n <b>Note:</b> these validators will only be run on the client; to\n do real client-server validation, validators must be specified on the DataSource.",
        name:"validators",
        seeAlso:[],
        valueType:"Array of Validator",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem"
    },
    "attr:Img.showTitle":{
        ref:"attr:Img.showTitle",
        flags:"IRWA",
        description:"Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be \n displayed for this component.<br>\n Applies to Image-based components only, where the title will be rendered out in a label\n floating over the component",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Img"
    },
    "method:DynamicForm.setFieldErrors":{
        ref:"method:DynamicForm.setFieldErrors",
        flags:"",
        description:" Set field validation error[s] for some field.<br>\n The errors parameter may be passed in as a string (a single error message), or an array of\n strings.<br>\n The showErrors parameter allows the errors to be displayed immediately. Alternatively, an\n explicit call to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')} will display the errors for this field.\n",
        name:"setFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to apply the new errors to", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"errors to apply to the field in question", optional:false, name:"errors", 
             defaultValue:null,type:"string | array of strings"},
            {description:"If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display", 
             optional:false,name:"show", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "classAttr:Dialog.CONFIRM_TITLE":{
        ref:"classAttr:Dialog.CONFIRM_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.confirm')} method.\n Note that a custom title can be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"CONFIRM_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Confirm\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:Canvas.destroyed":{
        ref:"attr:Canvas.destroyed",
        flags:"RA",
        description:"If this property is set to <code>true</code>, the ${isc.DocUtils.linkForRef('method:Canvas.destroy','destroy()')} method\n has been called on this canvas. This implies the canvas is no longer valid. Its ID has been\n removed from global scope, and calling standard canvas APIs on it is likely to result in \n errors.",
        name:"destroyed",
        seeAlso:[
            {ref:"method:Canvas.destroy", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas"
    },
    "attr:ListGrid.sorterConstructor":{
        ref:"attr:ListGrid.sorterConstructor",
        flags:"IR",
        description:"Widget class for the corner sort button, if showing. For consistent appearance, this\n is usually set to match ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor')}",
        name:"sorterConstructor",
        seeAlso:[],
        valueType:"Class",
        defaultValue:"Button",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:ImgButton.iconWidth":{
        ref:"attr:ImgButton.iconWidth",
        flags:"IR",
        description:"Width in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "method:Canvas.willAcceptDrop":{
        ref:"method:Canvas.willAcceptDrop",
        flags:"A",
        description:"\n Returns true if the widget object being dragged can be dropped on this widget, and\n false otherwise.  The default implementation of this method simply compares the\n ${isc.DocUtils.linkForRef('attr:Canvas.dragType')} of the <code>dragTarget</code> (the component being dragged from)\n with the list of ${isc.DocUtils.linkForRef('attr:Canvas.dropTypes')} on this Canvas.  If the ${isc.DocUtils.linkForRef('attr:Canvas.dropTypes')}\n list contains the ${isc.DocUtils.linkForRef('attr:Canvas.dragType')} value, then this method returns true.  Otherwise it\n returns false.\n\n",
        name:"willAcceptDrop",
        seeAlso:[
            {ref:"attr:Canvas.dragType", description:null},
            {ref:"attr:Canvas.dropTypes", description:null},
            {ref:"attr:Canvas.dragTarget", description:null},
            {ref:"method:Canvas.drop", description:null}
        ],
        returns:{description:"true if the widget object being dragged can be dropped on this widget,                      false otherwise", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:SelectItem.pickerIconSrc":{
        ref:"attr:SelectItem.pickerIconSrc",
        flags:"IRWA",
        description:"If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this property governs the\n src of the picker icon image to be displayed.",
        name:"pickerIconSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/SelectItem_PickButton_icon.gif\"",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["pickerIcon"]
    },
    "method:GridRenderer.cellDoubleClick":{
        ref:"method:GridRenderer.cellDoubleClick",
        flags:"A",
        description:" Called when a cell receives a double click event.\n\n",
        name:"cellDoubleClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:ListGrid.headerMenuButtonIcon":{
        ref:"attr:ListGrid.headerMenuButtonIcon",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the icon shown on the\n auto-generated <code>headerMenuButton</code>",
        name:"headerMenuButtonIcon",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"[SKIN]/ListGrid/sort_descending.gif\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "classAttr:ValidatorTypes.integerRange":{
        ref:"classAttr:ValidatorTypes.integerRange",
        flags:"IR",
        description:"Tests whether the value for this field is a whole number within the range \n  specified.  The <code>max</code> and <code>min</code> properties on the validator\n  are used to determine the acceptable range.",
        name:"integerRange",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        examples:["${isc.DocUtils.linkForExampleId('validationBuiltins')}"],
        definingClass:"class:ValidatorTypes"
    },
    "attr:EdgedCanvas.edgeOffsetLeft":{
        ref:"attr:EdgedCanvas.edgeOffsetLeft",
        flags:"IRA",
        description:"Amount the contained Canvas should be offset from the left.  Defaults to the size for\n the left edge.  Set smaller to allow the contained Canvas to overlap the edge and\n corner media.",
        name:"edgeOffsetLeft",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "group:baseLine":{
        ref:"group:baseLine",
        refs:["attr:TabBar.baseLineThickness", "attr:TabBar.baseLineSrc", "attr:TabBar.baseLineCapSize"],
        description:"The baseLine is StretchImg that is placed along the edge of the TabBar that borders on\n the pane, occluding the pane's actual border but matching it exactly.  The selected tab\n is in front of the baseLine, and the rest are behind it.",
        name:"baseLine",
        seeAlso:[],
        type:"group"
    },
    "attr:MenuButton.height":{
        ref:"attr:MenuButton.height",
        flags:"IRW",
        description:"Default height of the button.",
        name:"height",
        seeAlso:[],
        valueType:"Number or String",
        defaultValue:"22",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "attr:RPCRequest.timeout":{
        ref:"attr:RPCRequest.timeout",
        flags:"IRWA",
        description:"Overrides RPCManager.defaultTimeout for this request only.  If you're using queuing, note\n that the timeout setting derived from the last request in the queue is used for the entire\n queue.  If you want to override the timeout for the queue, make sure to set your override at\n least on the last request in the queue.",
        name:"timeout",
        seeAlso:[
            {ref:"classAttr:RPCManager.defaultTimeout", description:null}
        ],
        valueType:"number",
        defaultValue:"RPCManager.defaultTimeout",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "method:Layout.addMembers":{
        ref:"method:Layout.addMembers",
        flags:"",
        description:"\n  Add one or more canvases to the layout, optionally at specific positions.\n\n  NOTE: depending on the layout policy, adding a new member may cause existing members to\n  resize.\n\n",
        name:"addMembers",
        seeAlso:[],
        params:[
            {description:"array of canvases to be added, or reference to single                                          canvas", 
             optional:false,name:"newMembers", defaultValue:null, type:"Array or object"},
            {description:"position to add newMembers; if omitted newMembers                                          will be added at the last position", 
             optional:true,name:"position", defaultValue:null, type:"Number"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:Slider.thumbThickWidth":{
        ref:"attr:Slider.thumbThickWidth",
        flags:"IRW",
        description:"The dimension of the thumb perpendicular to the slider track.",
        name:"thumbThickWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"23",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:CheckboxItem.valueIconWidth":{
        ref:"attr:CheckboxItem.valueIconWidth",
        flags:"IRW",
        description:"Width of the checkbox image.",
        name:"valueIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"13",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["valueIcons"]
    },
    "attr:TreeGrid.folderClosedImage":{
        ref:"attr:TreeGrid.folderClosedImage",
        deprecated:"as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}",
        flags:"IRW",
        description:"The filename of the default icon for all closed folder nodes in this treeGrid. Use\n the node.icon property (null by default) to specify a custom image for an individual\n folder node. The same custom image will be used for both the open and closed folder\n images.",
        name:"folderClosedImage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "attr:GridRenderer.totalRows":{
        ref:"attr:GridRenderer.totalRows",
        flags:"IRW",
        getter:["getTotalRows"],
        description:"Total number of rows in the grid.<br><br>\n\n NOTE: in order to create a valid grid, you must either provide a totalRows value or implement\n getTotalRows()",
        name:"totalRows",
        seeAlso:[
            {ref:"method:GridRenderer.getTotalRows", description:null}
        ],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:GridRenderer"
    },
    "method:ListGrid.getDragTrackerTitle":{
        ref:"method:ListGrid.getDragTrackerTitle",
        flags:"",
        description:" Return \"title\" HTML to display as a drag tracker when the user drags some record.<br>\n Default implementation will display the cell value for the title field (see \n ${isc.DocUtils.linkForRef('method:ListGrid.getTitleField')}) for the record(s) being dragged (including any\n icons / custom formatting / styling, etc).\n <p>\n Note: Only called if ${isc.DocUtils.linkForRef('attr:ListGrid.dragTrackerMode')} is set to <code>\"title\"</code>.\n",
        name:"getDragTrackerTitle",
        seeAlso:[],
        params:[
            {description:"First selected record being dragged", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"row index of first record being dragged", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"Title for the row. Default implementation looks at the value of the                  title-field cell for the row.", 
         type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["dragTracker"]
    },
    "method:ListGrid.getRequiredFieldMessage":{
        ref:"method:ListGrid.getRequiredFieldMessage",
        flags:"",
        description:" Returns the message to display when a user attempts to save a required field with an\n empty value. Override for localization if required.\n",
        name:"getRequiredFieldMessage",
        seeAlso:[],
        params:[
            {description:"definition of the field being edited", optional:false, name:"field", 
             defaultValue:null,type:"object"},
            {description:"record object being edited", optional:false, name:"record", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"\"Field is required\"", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation", "i18nMessages"]
    },
    "attr:FormItem.title":{
        ref:"attr:FormItem.title",
        flags:"IRW",
        getter:["getTitle"],
        description:"User visible title for this form item.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["basics"]
    },
    "method:FormItem.stopHover":{
        ref:"method:FormItem.stopHover",
        flags:"A",
        description:" This method is fired when the user rolls off this item (or the title for this item) and\n will clear any hover canvas shown by the item.\n",
        name:"stopHover",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:Button.title":{
        flags:"IRW",
        getter:["getTitle"],
        type:"attr",
        ref:"attr:Button.title",
        description:"The text title to display in this button.",
        name:"title",
        setter:["setTitle"],
        valueType:"string",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonStates')}"],
        defaultValue:"varies",
        groups:["basics", "i18nMessages"],
        definingClass:"class:Button"
    },
    "method:ListGrid.getCellRecord":{
        ref:"method:ListGrid.getCellRecord",
        flags:"A",
        description:" Return the pointer to a particular record by record number.<br>\n Notes:<br>\n - If this is a databound grid, and the record for some row has not yet been loaded, \n   returns the ${isc.DocUtils.linkForRef('classAttr:Array.LOADING')} marker, and a fetch will be initialized to retrieve the\n   record from the server.<br>\n - If this is a new row in editable ListGrid, and has not yet been saved, this method will\n   return null.\n",
        name:"getCellRecord",
        seeAlso:[
            {ref:"method:ListGrid.getRecord", description:null},
            {ref:"method:ListGrid.getEditedRecord", description:null}
        ],
        params:[
            {description:"row index of record to return.", optional:false, name:"recordNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"Record object for the row.", type:"ListGridRecord"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:Validator.errorMessage":{
        ref:"attr:Validator.errorMessage",
        flags:"IR",
        description:"Text to display if the value does not pass this validation check.\n <P>\n If unspecified, default error messages exist for all built-in validators, and a generic\n message will be used for a custom validator that is not passed.",
        name:"errorMessage",
        seeAlso:[],
        valueType:"errorMessage",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('conditionallyRequired')}"],
        definingClass:"class:Validator"
    },
    "class:FormItem":{
        methods:["method:FormItem.getFieldName", "method:FormItem.getTitle", 
         "method:FormItem.getIconHeight","method:FormItem.getIconWidth", "method:FormItem.setLeft", "method:FormItem.setTop", 
         "method:FormItem.getErrorHTML","method:FormItem.isDrawn", "method:FormItem.show", "method:FormItem.hide", 
         "method:FormItem.getDisplayValue","method:FormItem.setValueMap", "method:FormItem.setValueIcons", 
         "method:FormItem.getValueFieldName","method:FormItem.getDisplayFieldName", "method:FormItem.getOptionDataSource", 
         "method:FormItem.setValue","method:FormItem.getValue", "method:FormItem.stopHover", "method:FormItem.itemHover", 
         "method:FormItem.titleHover","method:FormItem.titleHoverHTML", "method:FormItem.itemHoverHTML", 
         "method:FormItem.setDisabled","method:FormItem.isDisabled", "method:FormItem.enable", "method:FormItem.disable", 
         "method:FormItem.focusInItem","method:FormItem.blurItem", "method:FormItem.showIf", 
         "method:FormItem.defaultDynamicValue","method:FormItem.focus", "method:FormItem.blur", "method:FormItem.click", 
         "method:FormItem.iconClick","method:FormItem.iconKeyPress", "method:FormItem.change", "method:FormItem.changed", 
         "method:FormItem.transformInput","method:FormItem.keyPress", "method:FormItem.getValueIcon"],
        ref:"class:FormItem",
        classAttrs:[],
        classMethods:["classMethod:FormItem.create"],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:FormItem.type", "attr:FormItem.editorType", "attr:FormItem.name", 
         "attr:FormItem.title","attr:FormItem.defaultValue", "attr:FormItem.ID", "attr:FormItem.emptyDisplayValue", 
         "attr:FormItem.valueMap","attr:FormItem.optionDataSource", "attr:FormItem.valueField", "attr:FormItem.displayField", 
         "attr:FormItem.fetchMissingValues","attr:FormItem.filterLocally", "attr:FormItem.dateFormatter", 
         "attr:FormItem.timeFormatter","attr:FormItem.valueIcons", "attr:FormItem.emptyValueIcon", 
         "attr:FormItem.showValueIconOnly","attr:FormItem.suppressValueIcon", "attr:FormItem.valueIconWidth", 
         "attr:FormItem.valueIconHeight","attr:FormItem.valueIconSize", "attr:FormItem.valueIconLeftPadding", 
         "attr:FormItem.valueIconRightPadding","attr:FormItem.imageURLPrefix", "attr:FormItem.imageURLSuffix", "attr:FormItem.form", 
         "attr:FormItem.validators","attr:FormItem.required", "attr:FormItem.visible", "attr:FormItem.disabled", 
         "attr:FormItem.accessKey","attr:FormItem.tabIndex", "attr:FormItem.globalTabIndex", "attr:FormItem.showTitle", 
         "attr:FormItem.titleOrientation","attr:FormItem.titleAlign", "attr:FormItem.wrapTitle", "attr:FormItem.validateOnChange", 
         "attr:FormItem.width","attr:FormItem.height", "attr:FormItem.colSpan", "attr:FormItem.rowSpan", 
         "attr:FormItem.startRow","attr:FormItem.endRow", "attr:FormItem.align", "attr:FormItem.textAlign", 
         "attr:FormItem.left","attr:FormItem.top", "attr:FormItem.icons", "attr:FormItem.defaultIconSrc", 
         "attr:FormItem.showOverIcons","attr:FormItem.showFocusedIcons", "attr:FormItem.iconVAlign", "attr:FormItem.iconHeight", 
         "attr:FormItem.iconWidth","attr:FormItem.prompt", "attr:FormItem.showIcons", "attr:FormItem.errorIconHeight", 
         "attr:FormItem.errorIconWidth","attr:FormItem.errorIconSrc", "attr:FormItem.showErrorIcon", "attr:FormItem.showErrorText", 
         "attr:FormItem.showErrorStyle","attr:FormItem.errorOrientation", "attr:FormItem.hint", "attr:FormItem.showHint", 
         "attr:FormItem.showFocused","attr:FormItem.showDisabled", "attr:FormItem.cellStyle", "attr:FormItem.hintStyle", 
         "attr:FormItem.titleStyle","attr:FormItem.textBoxStyle", "attr:FormItem.cellClassName", 
         "attr:FormItem.errorCellClassName","attr:FormItem.titleClassName", "attr:FormItem.titleErrorClassName", 
         "attr:FormItem.hintClassName","attr:FormItem.hoverDelay", "attr:FormItem.hoverWidth", "attr:FormItem.hoverHeight", 
         "attr:FormItem.hoverAlign","attr:FormItem.hoverVAlign", "attr:FormItem.hoverStyle", "attr:FormItem.hoverOpacity"],
        description:"An Item that can participate in a DynamicForm, managing some value.\n <P>\n FormItems are never directly created, instead, FormItem descriptors are passed to a\n DynamicForm.  See the ${isc.DocUtils.linkForRef('class:DynamicForm')} documentation for details.",
        name:"FormItem",
        seeAlso:[],
        type:"class"
    },
    "attr:Tree.parentIdField":{
        ref:"attr:Tree.parentIdField",
        flags:"IRA",
        description:"For trees with modelType \"parent\", this property specifies the name of the property\n that contains the unique parent ID of a node.  By default this is set to\n ${isc.DocUtils.linkForRef('attr:TreeNode.parentId')}.",
        name:"parentIdField",
        seeAlso:[
            {ref:"attr:TreeNode.parentId", description:null}
        ],
        valueType:"string",
        defaultValue:"\"parentId\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "method:Canvas.getVisibleWidth":{
        ref:"method:Canvas.getVisibleWidth",
        flags:"A",
        description:"      Return the visible width of the Canvas.\n\n",
        name:"getVisibleWidth",
        seeAlso:[],
        returns:{description:"visible width in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:Log.getCallTrace":{
        ref:"method:Log.getCallTrace",
        flags:"",
        description:" Returns a one-line summary of the current method call, showing method name and passed\n arguments.\n\n",
        name:"getCallTrace",
        seeAlso:[],
        params:[
            {description:"arguments object from the call to trace.  On IE, defaults to the                             calling function's arguments", 
             optional:true,name:"args", defaultValue:null, type:"Arguments"}
        ],
        type:"method",
        platformNotes:"IE only.",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "group:dynamicString":{
        ref:"group:dynamicString",
        refs:[],
        name:"dynamicString",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.setContents":{
        ref:"method:Canvas.setContents",
        flags:"",
        description:" Changes the contents of a widget to newContents, an HTML string.\n <P>\n When ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents','dynamicContents')} is set, <code>setContents()</code> can\n also be called with no arguments to cause contents to be re-evaluated.\n\n",
        name:"setContents",
        seeAlso:[],
        params:[
            {description:"an HTML string to be set as the contents of this widget", optional:true, 
             name:"newContents",defaultValue:null, type:"string"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('setContents')}"],
        definingClass:"class:Canvas"
    },
    "method:ListGridField.getCellValue":{
        ref:"method:ListGridField.getCellValue",
        deprecated:"As of SmartClient 5.5, use ${isc.DocUtils.linkForRef('method:ListGridField.formatCellValue')}.",
        flags:"",
        description:" A stringMethod which returns the cell value to display for this field for some record.\n If defined, called by ListGrid.getCellValue().  Called in the scope of the field object.\n\n Deprecated as of Jan 12 05 in favor of field.formatCellValue, because 'getCellValue()'\n is a lower-level API which handles (for example) returning the HTML for editors within\n the cell.\n  \n",
        name:"getCellValue",
        seeAlso:[
            {ref:"method:ListGrid.getCellValue", description:null},
            {ref:"method:ListGridField.formatCellValue", description:null}
        ],
        params:[
            {description:"the ListGrid for which we're returning a cellValue", optional:false, 
             name:"viewer",defaultValue:null, type:"ListGrid"},
            {description:"the current record object", optional:false, name:"record", defaultValue:null, 
             type:"object"},
            {description:"row-index of the current record", optional:false, name:"recordNum", 
             defaultValue:null,type:"nubmer"},
            {description:"current field object", optional:false, name:"field", defaultValue:null, 
             type:"listGridField"},
            {description:"column-index of the current field", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"},
            {description:"unformatted value for this field, determined via                           ListGrid.getRawCellValue()", 
             optional:false,name:"value", defaultValue:null, type:"any"}
        ],
        returns:{description:"value to display in the ListGrid cell", type:"any"},
        type:"method",
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "type:VerticalAlignment":{
        ref:"type:VerticalAlignment",
        values:[
            {description:"At the top of the container", value:"Canvas.TOP"},
            {description:"Center within container.", value:"Canvas.CENTER"},
            {description:"At the bottom of the container", value:"Canvas.BOTTOM"}
        ],
        description:null,
        name:"VerticalAlignment",
        seeAlso:[],
        type:"type",
        groups:["appearance"]
    },
    "method:FormItem.getErrorHTML":{
        ref:"method:FormItem.getErrorHTML",
        flags:"A",
        description:" Output the HTML for an error message in a form element. Default behavior respects\n ${isc.DocUtils.linkForRef('attr:FormItem.showErrorIcon')} and ${isc.DocUtils.linkForRef('attr:FormItem.showErrorText')} as described in the\n documentation for those attributes.\n",
        name:"getErrorHTML",
        seeAlso:[],
        params:[
            {description:"error message string or array of error messages", optional:false, 
             name:"error",defaultValue:null, type:"string | array"}
        ],
        returns:{description:"HTML to display the error", type:"HTML"},
        type:"method",
        definingClass:"class:FormItem"
    },
    "attr:SelectItem.optionFilterContext":{
        ref:"attr:SelectItem.optionFilterContext",
        flags:"IRA",
        description:"If this item has a specified <code>optionDataSource</code>, and this property is\n not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when\n performing the filter operation on the dataSource to obtain the set of options for the\n list.",
        name:"optionFilterContext",
        seeAlso:[],
        valueType:"RPCRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "group:gridValidation":{
        ref:"group:gridValidation",
        refs:["method:ListGrid.validateRow", "method:ListGrid.validateCell", 
         "method:ListGrid.getRequiredFieldMessage","method:ListGrid.hasErrors", "method:ListGrid.rowHasErrors", 
         "method:ListGrid.cellHasErrors","method:ListGrid.getRowErrors", "method:ListGrid.getCellErrors", 
         "method:ListGrid.setFieldError","method:ListGrid.setRowErrors", "method:ListGrid.clearFieldError", 
         "attr:ListGridField.validators","attr:ListGridField.validateOnChange", "attr:ListGridField.required", 
         "attr:ListGrid.validateByCell","attr:ListGrid.validateOnChange", "attr:ListGrid.neverValidate"],
        description:"ListGrids support automatic validation of edited cells / records. This group is a collection \n of APIs related to the validation subsystem.\n <p>\n Default validation occurs in response to the user navigating between edit cells \n (see ${isc.DocUtils.linkForRef('attr:ListGrid.validateByCell')}) or whenever edited values are to be committed to the\n server for saving.  Standard validation can also be triggered for a cell or row programatically at\n any time.<br>\n When standard validation occurs, ${isc.DocUtils.linkForRef('attr:ListGridField.validators')} will be run on each\n cell to be validated.<br>\n In addition to this standard behavior developers can add custom errors to fields\n via ${isc.DocUtils.linkForRef('method:ListGrid.setFieldError')} / ${isc.DocUtils.linkForRef('method:ListGrid.setFieldError')}.",
        name:"gridValidation",
        seeAlso:[
            {ref:"group:editing", description:null}
        ],
        type:"group"
    },
    "attr:SpinnerItem.min":{
        ref:"attr:SpinnerItem.min",
        flags:"IRW",
        description:"Minimum valid value for this item",
        name:"min",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('spinnerItem')}"],
        definingClass:"class:SpinnerItem"
    },
    "attr:RestDataSource.dataFormat":{
        ref:"attr:RestDataSource.dataFormat",
        flags:"IR",
        description:"Expected format for server responses. RestDataSources handle <code>\"json\"</code> and\n <code>\"xml\"</code> format responses by default. See class overview documentation for \n examples of responses in each format.",
        name:"dataFormat",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"xml\"",
        type:"attr",
        definingClass:"class:RestDataSource"
    },
    "method:TabSet.getTabNumber":{
        ref:"method:TabSet.getTabNumber",
        flags:"",
        description:" Get the index of a tab, from the tab or tabID.  If passed a number, just returns it.\n",
        name:"getTabNumber",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"number | ID | tab"}
        ],
        returns:{description:"the index of the tab, or -1 if not found", type:"number"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "group:rpcPrompt":{
        ref:"group:rpcPrompt",
        refs:["classAttr:RPCRequest.useCursorTracker", "classAttr:RPCManager.defaultPrompt", 
         "classAttr:RPCManager.promptStyle","classAttr:RPCManager.useCursorTracker", "classAttr:RPCManager.promptCursor", 
         "classAttr:RPCManager.showPrompt","attr:RPCRequest.promptStyle", "attr:RPCRequest.promptCursor", "attr:RPCRequest.prompt", 
         "attr:RPCRequest.showPrompt"],
        description:"The properties in this group all deal with setting and styling a modal prompt during an RPC\n call to the server.",
        name:"rpcPrompt",
        seeAlso:[],
        type:"group"
    },
    "method:Tree.hasFolders":{
        ref:"method:Tree.hasFolders",
        flags:"",
        description:"\n Return true if this this node has any children that are folders.\n\n",
        name:"hasFolders",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the node has children that are folders", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:FusionChart.dataColors":{
        ref:"attr:FusionChart.dataColors",
        flags:"IR",
        description:"An array of colors to use for a series of visual elements representing data (eg columns,\n bars, pie slices), any of which may be adjacent to any other.\n <P>\n Colors are expressed as hexademical RRGGBB Strings <b>with no leading '#' character</b>.",
        name:"dataColors",
        seeAlso:[],
        valueType:"Array of CSSColor",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:FusionChart"
    },
    "method:DynamicForm.setErrors":{
        ref:"method:DynamicForm.setErrors",
        flags:"A",
        description:" Setter for validation errors on this form. Errors passed in should be a Javascript object\n of the format<br>\n <code>{fieldName1:errors, fieldName2:errors}</code><br>\n Where the <code>errors</code> value may be either a string (single error message) or an\n array of strings (if multiple errors should be applied to the field in question).\n",
        name:"setErrors",
        seeAlso:[],
        params:[
            {description:"list of errors as an object with the field names as keys", optional:false, 
             name:"errors",defaultValue:null, type:"object"},
            {description:"If true redraw form to display errors now. Otherwise errors can be displayed by calling\n      ${isc.DocUtils.linkForRef('method:DynamicForm.showErrors')}<br>\n      Note: When the errors are shown, \n      ${isc.DocUtils.linkForRef('method:DynamicForm.handleHiddenValidationErrors','handleHiddenValidationErrors()')} will\n      be fired for errors on hidden fields, or with no associated formItem.", 
             optional:false,name:"showErrors", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "classMethod:Page.getSkinDir":{
        ref:"classMethod:Page.getSkinDir",
        flags:"",
        description:"		Return the directory for media that's part of the skin\n\n",
        name:"getSkinDir",
        seeAlso:[],
        returns:{description:"base URL for skin media", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "object:ListGridRecord":{
        methods:[],
        ref:"object:ListGridRecord",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/ListGrid"],
        attrs:["attr:ListGridRecord.enabled", "attr:ListGridRecord.isSeparator", 
         "attr:ListGridRecord.singleCellValue","attr:ListGridRecord.canDrag", "attr:ListGridRecord.canAcceptDrop", 
         "attr:ListGridRecord.linkText"],
        description:"A ListGridRecord is a JavaScript Object whose properties contain values for each\n ${isc.DocUtils.linkForRef('object:ListGridField')}.  A ListGridRecord may have additional properties which affect the\n record's appearance or behavior, or which hold data for use by custom logic or other,\n related components.\n <p>\n For example a ListGrid that defines the following fields:\n <pre>\n fields : [\n     {name: \"field1\"},\n     {name: \"field2\"}\n ],\n </pre>\n Might have the following data:\n <pre>\n data : [\n     {field1: \"foo\", field2: \"bar\", customProperty:5},\n     {field1: \"field1 value\", field2: \"field2 value\", enabled:false}\n ]\n </pre>\n Each line of code in the <code>data</code> array above creates one JavaScript Object via\n JavaScript {type:ObjectLiteral,object literal} notation.  These JavaScript Objects are\n used as ListGridRecords.\n <P>\n Both records shown above have properties whose names match the name property of a\n ListGridField, as well as additional properties.  The second record will be disabled due to\n <code>enabled:false</code>; the first record has a property \"customProperty\" which will\n have no effect by default but which may accessed by custom logic.\n <P>\n After a ListGrid is created and has loaded data, records may be accessed via\n ${isc.DocUtils.linkForRef('attr:ListGrid.data')}, for example, listGrid.data.get(0) retrieves the first record.\n ListGridRecords are also passed to many events, such as\n ${isc.DocUtils.linkForRef('method:ListGrid.cellClick','cellClick()')}.\n <P>\n A ListGridRecord is always an ordinary JavaScript Object regardless of how the grid's\n dataset is loaded (static data, java server, XML web service, etc), and so supports the\n normal behaviors of JavaScript Objects, including accessing and assigning to properties\n via dot notation:\n <pre>\n     var fieldValue = record.<i>fieldName</i>;\n     record.<i>fieldName</i> = newValue;\n </pre>\n <P>\n Note however that simply assigning a value to a record won't cause the display to be\n automatically refreshed - ${isc.DocUtils.linkForRef('method:ListGrid.refreshCell')} needs to be called.  Also,\n consider ${isc.DocUtils.linkForRef('group:editing','editValues vs saved values')} when directly modifying\n ListGridRecords.\n <P>\n See the attributes in the API tab for the full list of special properties on\n ListGridRecords that will affect the grid's behavior.",
        name:"ListGridRecord",
        seeAlso:[
            {ref:"attr:ListGrid.data", description:null}
        ],
        type:"object"
    },
    "attr:Applet.mayScript":{
        ref:"attr:Applet.mayScript",
        flags:"IR",
        description:"Usable only in IE: if true allows Java->JS LiveConnect (other platforms that support\n  LiveConnect have it enabled by default and do not allow it to be disabled).",
        name:"mayScript",
        seeAlso:[
            {ref:"attr:Applet.scriptable", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        platformNotes:"Relevant on IE only.",
        definingClass:"class:Applet"
    },
    "attr:ListGrid.valueIconWidth":{
        ref:"attr:ListGrid.valueIconWidth",
        flags:"IRW",
        description:"Width for value icons for this listGrid.\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconSize')}.\n Can be overridden at the field level",
        name:"valueIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:SelectItem.multiple":{
        ref:"attr:SelectItem.multiple",
        flags:"IRW",
        description:"If true, this selectItem will be displayed as a tall list of options, and the user\n will be able to select multiple options.\n <P>\n In this case the logical value of the formItem, as retrieved by \n ${isc.DocUtils.linkForRef('method:FormItem.getValue','getValue()')} and set via ${isc.DocUtils.linkForRef('method:FormItem.setValue','setValue()')}, is \n an Array of Strings reflecting the selected values.",
        name:"multiple",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "class:ResetItem":{
        methods:[],
        ref:"class:ResetItem",
        classAttrs:[],
        classMethods:[],
        attrs:[],
        description:"Button that resets the form to default values, by calling\n <code>DynamicForm.resetValues()</code>\n \n If you define a click handler on this item, you can return false to cancel the reset.",
        name:"ResetItem",
        seeAlso:[],
        type:"class"
    },
    "method:Array.set":{
        ref:"method:Array.set",
        flags:"",
        description:" Change the array element at a particular position.\n <P>\n set() can be used to expand the length of the list.\n\n",
        name:"set",
        seeAlso:[],
        params:[
            {description:"position in the list to change", optional:false, name:"pos", 
             defaultValue:null,type:"number"},
            {description:"new value for that position", optional:false, name:"obj", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"whatever's at that position, null if not found", type:"object"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "type:Overflow":{
        ref:"type:Overflow",
        values:[
            {description:"Content that extends beyond the widget's width or height is                              displayed.\n                              Note: To have the content be sized only by the drawn size of \n                              the content set the overflow to be Canvas.VISIBLE and specify\n                              a small size, allowing the size to expand to the size required\n                              by the content.\n                              Leaving the width / height for the widget undefined will use the\n                              default value of 100, and setting the size to zero may cause the\n                              widget not to draw.", 
             value:"Canvas.VISIBLE"},
            {description:"Content that extends beyond the widget's width or height is                              clipped (hidden).", 
             value:"Canvas.HIDDEN"},
            {description:"Horizontal and/or vertical scrollbars are displayed only if                              necessary. Content that extends beyond the remaining visible\n                              area is clipped.", 
             value:"Canvas.AUTO"},
            {description:"Horizontal and vertical scrollbars are always drawn inside the                              widget. Content that extends beyond the remaining visible area\n                              is clipped, and can be accessed via scrolling.", 
             value:"Canvas.SCROLL"},
            {description:"Clip horizontally but extend the canvas's clip region                              vertically if necessary.", 
             value:"Canvas.CLIP_H"},
            {description:"Clip vertically but extend the canvas's clip region                              horizontally if necessary.", 
             value:"Canvas.CLIP_V"}
        ],
        description:null,
        name:"Overflow",
        seeAlso:[],
        type:"type",
        groups:["sizing"]
    },
    "attr:ImgButton.title":{
        flags:"IRW",
        getter:["getTitle"],
        type:"attr",
        ref:"attr:ImgButton.title",
        description:"The text title to display in this button.",
        name:"title",
        setter:["setTitle"],
        valueType:"string",
        seeAlso:[],
        defaultValue:"varies",
        groups:["basics"],
        definingClass:"class:ImgButton"
    },
    "method:Canvas.hide":{
        ref:"method:Canvas.hide",
        flags:"",
        description:"			Sets the widget's CSS visibility attribute to \"hidden\".\n",
        name:"hide",
        seeAlso:[],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('showAndHide')}"],
        definingClass:"class:Canvas",
        groups:["visibility"]
    },
    "attr:SectionItem.defaultValue":{
        ref:"attr:SectionItem.defaultValue",
        flags:"IRW",
        description:"Section items show their <code>value</code> as title text for the section.\n Therefore the simplest way to specify this text on the form item directly is via the\n <code>defaultValue</code> attribute.",
        name:"defaultValue",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Section Header\"",
        type:"attr",
        definingClass:"class:SectionItem"
    },
    "classAttr:Canvas.TAB_INDEX_FLOOR":{
        ref:"classAttr:Canvas.TAB_INDEX_FLOOR",
        flags:"R",
        description:"Specifies the lower limit for automatically assigned tab indices for focusable canvii.",
        name:"TAB_INDEX_FLOOR",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"1000",
        type:"classAttr",
        definingClass:"class:Canvas",
        groups:["focus"]
    },
    "group:dataSourceOperations":{
        ref:"group:dataSourceOperations",
        title:"DataSource Operations",
        treeLocation:["Client Reference/Data Binding"],
        refs:[],
        description:"A DataSource Operation is a type of ${isc.DocUtils.linkForRef('group:operations','operation')} that acts on the set\n of stored objects represented by a ${isc.DocUtils.linkForRef('class:DataSource')}, performing one of the basic actions\n that makes sense on a set of similar records: \"fetch\", \"add\", \"update\" or \"remove\".  \n <P>\n Each DataSource operation has specific request and response data, for example, in the\n \"fetch\" DataSource operation, the request data is expected to be search criteria, and the\n response data is expected to be a list of matching DataSource records.  Listed below are the\n request data and response data for each DataSource operation type, and what they mean.  \n <P>\n DataSource records are represented on the client by a JavaScript Object,\n where each property in the Object maps a DataSource field name to the field value - hence\n the DataSource operations below are in essence a way of exchanging records from client to\n server and back.\n <P>\n If you are using ${isc.DocUtils.linkForRef('group:serverDataIntegration','server-side data integration')} with the\n SmartClient Java server, see the ${isc.DocUtils.linkForDocNode('javaServerReference', 'Java Server Reference')} for\n information about how DataSource Requests arrive on the server (specifically\n com.isomophic.datasource.DSRequest) and how to provide responses \n (specifically com.isomorphic.datasource.DSResponse.setData()).\n <P>\n If you are using ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')} to directly\n consume services that use XML, JSON or other formats, see the \"Editing and Saving\" section\n of the ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side data integration')} topic.\n <P>\n\n <b>fetch</b>\n <ul>\n <li>Request data: filter criteria, as an Object\n <li>Response data: matching records, as an Array of Objects\n </ul>\n\n <b>add</b>\n <ul>\n <li>Request data: new record, as an Object\n <li>Response data: new record as stored, as an Object\n </ul>\n\n <b>update</b>\n <ul>\n <li>Request data: primary keys of record to update, and new values (or just complete updated\n record), as an Object\n <li>Response data: new record as stored, as an Object\n </ul>\n\n <b>remove</b>\n <ul>\n <li>Request data: primary keys of record to delete, as an Object\n <li>Response data: minimally the primary keys of deleted record (can be complete record), as\n an Object\n </ul>",
        name:"dataSourceOperations",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.saveByCell":{
        ref:"attr:ListGrid.saveByCell",
        flags:"IRW",
        description:"Whether edits should be saved whenever the user moves between cells in the current edit\n row.\n <P>\n If unset, defaults to this.editByCell.\n <P>\n To avoid automatic saving entirely, set ${isc.DocUtils.linkForRef('attr:ListGrid.autoSaveEdits')}:false.",
        name:"saveByCell",
        seeAlso:[
            {ref:"attr:ListGrid.editByCell", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:fieldState":{
        ref:"group:fieldState",
        refs:["method:ListGrid.fieldStateChanged"],
        name:"fieldState",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.htmlElement":{
        ref:"attr:Canvas.htmlElement",
        flags:"IRWA",
        description:"If specified as a pointer to an HTML element present in the DOM, this canvas will be\n rendered inside that element on ${isc.DocUtils.linkForRef('method:Canvas.draw','draw()')}.\n <P>\n <i>NOTES:</i><br>\n This feature is intended for temporary integration with legacy page architectures only;\n the native browser's reaction to DOM insertion is unspecified and unsupported. For\n consistent cross-browser layout and positioning semantics, use Canvas parents\n (especially Layouts) and use absolute positioning at top level.\n <P>\n Persistence of htmlElement: If ${isc.DocUtils.linkForRef('attr:Canvas.htmlPosition')} is set to <code>\"replace\"</code>\n the htmlElement will be removed from the DOM when the canvas is drawn - therefore the\n htmlElement attribute will be cleared at this time.\n Otherwise if a Canvas is clear()d and then draw()n again it will \n be rendered inside the same htmlElement.<br>\n If a Canvas is added as a child to Canvas parent, its htmlElement will be dropped.\n <P>\n ${isc.DocUtils.linkForRef('attr:Canvas.position')} should typically be set to <code>\"relative\"</code> if the widget \n is to be rendered inline within a standard page.",
        name:"htmlElement",
        setter:["setHtmlElement"],
        seeAlso:[],
        valueType:"HTML Element",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["htmlElement", "positioning"]
    },
    "method:DataSource.xmlSerialize":{
        ref:"method:DataSource.xmlSerialize",
        flags:"A",
        description:" Serialize a JavaScript object as XML.\n <P>\n The JavaScript Object passed to ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} becomes an XML\n element named after the ${isc.DocUtils.linkForRef('attr:DataSource.tagName')} (or ${isc.DocUtils.linkForRef('attr:DataSource.ID')} if\n tagName is unset).  Each property of the object becomes a subElement.  For example,\n using a DataSource to serialize like this:\n <pre>\n     var inputObject = {\n        startRow : 5,\n        endRow : 50,\n        data : [\n           { field1 : \"value1\", field2: new Date() },\n           { field1 : \"value3\", field2: null }\n        ]\n     };\n     var myDS = isc.DataSource.create({ tagName:\"DSRequest\" });\n     myDS.xmlSerialize(inputObject);\n </pre>\n .. produces the following XML:\n <pre>\n     &lt;DSRequest&gt;\n         &lt;startRow&gt;5&lt;/startRow&gt;\n         &lt;endRow&gt;50&lt;/endRow&gt;\n         &lt;data&gt;\n             &lt;field1&gt;value1&lt;/field1&gt;\n             &lt;field2&gt;2005-10-14T18:01:16&lt;/field2&gt;\n         &lt;/data&gt;\n         &lt;data&gt;\n             &lt;field1&gt;value3&lt;/field1&gt;\n             &lt;field2&gt;&lt;/field2&gt;\n         &lt;/data&gt;\n     &lt;/DSRequest&gt;\n </pre>\n <P>\n If you are working with a WSDL-described web service, XML serialization is performed\n automatically by APIs like ${isc.DocUtils.linkForRef('method:WebService.callOperation')} - you only need to\n know about serialization in order to understand how to put together JavaScript data that\n will fill in an XML message properly.   \n <br>\n <b>Note:</b> when trying to send data to a web service, it is best to avoid putting\n together any XML yourself, instead modify the JavaScript data being fed to ISC's SOAP\n engine.  This is because the WSDL and SOAP rules for correctly namespacing and encoding\n Web Service messages are very complex and are subject to change with new versions of the\n web service you are contacting, whereas the data itself is easy to manipulate and less\n likely to change.\n <br>\n To troubleshoot message formation, you can set the log category \"xmlComm\" to \n <code>DEBUG</code> level in order to see the XML message formed by SmartClient reported\n in log statements in the Developer Console.\n\n",
        name:"xmlSerialize",
        seeAlso:[],
        params:[
            {description:"data to be serialized", optional:false, name:"data", defaultValue:null, 
             type:"any"},
            {description:"options for the serialization engine", optional:false, name:"flags", 
             defaultValue:null,type:"SerializationContext"}
        ],
        returns:{description:"data as serialized to XML", type:"String"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "attr:RPCRequest.useSimpleHttp":{
        ref:"attr:RPCRequest.useSimpleHttp",
        flags:"IRWA",
        description:"When set to true, assume the request is not going to the SmartClient server, and hence send\n a simple HTTP request that does not use SmartClient-specific request encoding.\n <P>\n Values specified in ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent to to the server as HTTP request\n parameters.  If ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} is \"GET\", parameters appear in the request URL, otherwise\n if httpMethod is \"POST\", parameters are encoded in the request body (exactly like an HTML form\n does).  These parameters are then accessible via typical server-side APIs for retrieving\n HTTP parameters, eg, servletRequest.getParameter(paramName) in Java Servlets.  \n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} method is POST and ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is supplied,\n ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is assumed to be a string to post as the HTTP request body, and\n ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent as URL parameters instead.  This usage is for sending\n custom request bodies such as the XML payloads used for SOAP.  In this case,\n ${isc.DocUtils.linkForRef('attr:RPCRequest.contentType')} is typically also set to indicate the content type of the\n request body.\n <p>\n Setting <code>useSimpleHttp</code> to true also automatically sets\n ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} to true as well.",
        name:"useSimpleHttp",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "group:errors":{
        ref:"group:errors",
        refs:["method:DynamicForm.getErrors", "method:DynamicForm.getFieldErrors", 
         "method:DynamicForm.setErrors","method:DynamicForm.setError", "method:DynamicForm.addFieldErrors", 
         "method:DynamicForm.setFieldErrors","method:DynamicForm.clearFieldErrors", "method:DynamicForm.clearErrors", 
         "method:DynamicForm.hasErrors","method:DynamicForm.hasFieldErrors", "method:DynamicForm.getValidatedValues", 
         "method:DynamicForm.showErrors","method:DynamicForm.showFieldErrors", "method:ValuesManager.getValidatedValues", 
         "method:ValuesManager.setErrors","method:ValuesManager.addFieldErrors", "method:ValuesManager.setFieldErrors", 
         "method:ValuesManager.clearErrors","method:ValuesManager.clearFieldErrors", "method:ValuesManager.getErrors", 
         "method:ValuesManager.getFieldErrors","method:ValuesManager.hasErrors", "method:ValuesManager.hasFieldErrors", 
         "method:ValuesManager.showErrors","method:ValuesManager.showFieldErrors"],
        description:"Validation errors and how they are shown",
        name:"errors",
        seeAlso:[],
        type:"group"
    },
    "attr:CanvasItem.canvasDefaults":{
        ref:"attr:CanvasItem.canvasDefaults",
        flags:"IRW",
        description:"Default properties for the canvas if this.canvas is not already a canvas instance.",
        name:"canvasDefaults",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:CanvasItem"
    },
    "method:Window.removeItems":{
        ref:"method:Window.removeItems",
        flags:"",
        description:"			Removes an array of widgets from the window.\n",
        name:"removeItems",
        seeAlso:[],
        params:[
            {description:"an array of widgets to be removed", optional:false, name:"items", 
             defaultValue:null,type:"array of canvases"}
        ],
        returns:{description:"the array of widgets removed", type:"array"},
        type:"method",
        definingClass:"class:Window",
        groups:["windowItems"]
    },
    "method:Log.echoAll":{
        ref:"method:Log.echoAll",
        flags:"",
        description:" Like echo(), except that if passed an Array, echoAll() will echo() every element of the\n Array.\n\n",
        name:"echoAll",
        seeAlso:[
            {ref:"method:Log.echo", description:null}
        ],
        params:[
            {description:"object to echo", optional:false, name:"obj", defaultValue:null, type:"any"}
        ],
        returns:{description:"a short string representation of the object", type:"string"},
        type:"method",
        definingClass:"class:Log",
        groups:["debug"]
    },
    "method:SectionStack.addSection":{
        ref:"method:SectionStack.addSection",
        flags:"",
        description:"\n Add a section to the SectionStack.\n\n",
        name:"addSection",
        seeAlso:[],
        params:[
            {description:"Initialization block                  for the section or a list of initialization blocks to add.", 
             optional:false,name:"sections", defaultValue:null, 
             type:"SectionStackSection Properties | List of SectionStackSection Properties"},
            {description:"index for the new section(s) (if not specified, the section                      will be added at the end of the SectionStack).", 
             optional:true,name:"position", defaultValue:null, type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsAddAndRemove')}"],
        definingClass:"class:SectionStack"
    },
    "interface:PickList":{
        methods:["method:PickList.fetchData", "method:PickList.getOptionDataSource", 
         "method:PickList.getPickListFilterCriteria","method:PickList.getValueFieldName", "method:PickList.getDisplayFieldName", 
         "method:PickList.getClientPickListData","method:PickList.dataArrived", "method:PickList.filterClientPickListData", 
         "method:PickList.getSelectedRecord"],
        ref:"interface:PickList",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:PickList.pickListHeight", "attr:PickList.pickListWidth", 
         "attr:PickList.pickListBaseStyle","attr:PickList.animatePickList", "attr:PickList.animationTime", 
         "attr:PickList.pickListProperties","attr:PickList.pickListHeaderHeight", "attr:PickList.valueField", 
         "attr:PickList.displayField","attr:PickList.pickListFields", "attr:PickList.valueIconField", 
         "attr:PickList.pickListCriteria","attr:PickList.optionDataSource", "attr:PickList.showOptionsFromDataSource", 
         "attr:PickList.optionFilterContext","attr:PickList.filterLocally", "attr:PickList.textMatchStyle", 
         "attr:PickList.showAllOptions","attr:PickList.separatorRows"],
        description:"Interface to show a drop-down list of pickable options. Used by the ${isc.DocUtils.linkForRef('class:SelectItem')} and\n ${isc.DocUtils.linkForRef('class:ComboBoxItem')} classes.",
        name:"PickList",
        seeAlso:[],
        type:"interface"
    },
    "attr:ListGridField.canEdit":{
        ref:"attr:ListGridField.canEdit",
        flags:"IRW",
        description:"Can this field be edited? May be overridden by setting the\n      'canEdit' property at the listGrid level",
        name:"canEdit",
        seeAlso:[
            {ref:"attr:ListGrid.canEdit", description:null},
            {ref:"attr:ListGrid.recordEditProperty", description:null},
            {ref:"method:ListGrid.canEditCell", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('disableEditing')}"],
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:TreeGrid.getDropFolder":{
        ref:"method:TreeGrid.getDropFolder",
        flags:"",
        description:" When the user is dragging a droppable element over this grid, this method returns the folder\n which would contain the item if dropped. This is the current drop node if the user is hovering\n over a folder, or the node's parent if the user is hovering over a leaf.\n",
        name:"getDropFolder",
        seeAlso:[],
        returns:{description:"target drop folder", type:"node"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["events"]
    },
    "attr:GridRenderer.cellPadding":{
        ref:"attr:GridRenderer.cellPadding",
        flags:"IRW",
        description:"The amount of empty space, in pixels, surrounding each value in its cell.",
        name:"cellPadding",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "classMethod:Page.getURL":{
        ref:"classMethod:Page.getURL",
        flags:"",
        description:" Return a full URL for a relative path that uses a special prefix such as \"[APPFILES]\" or\n \"[SKIN]\".\n <P>\n For images, use ${isc.DocUtils.linkForRef('classMethod:Page.getImgURL')} instead.\n\n",
        name:"getURL",
        seeAlso:[],
        params:[
            {description:"Local file name for the image.", optional:false, name:"fileName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"URL for the image.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "method:Window.centerInPage":{
        ref:"method:Window.centerInPage",
        flags:"A",
        description:" Centers the Window in the page. This is called automatically in window.show() if\n Window.autoCenter is true.\n Note - if the Window is a child of another widget, we center in the parent widget\n rather than centering in the page.\n",
        name:"centerInPage",
        seeAlso:[
            {ref:"attr:Window.autoCenter", description:null}
        ],
        type:"method",
        definingClass:"class:Window",
        groups:["appearance"]
    },
    "method:Chart.setData":{
        ref:"method:Chart.setData",
        flags:"",
        description:" Change the dataset for this chart on the fly.  May or may not be supported by concrete chart\n implementations.\n\n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"new dataset", optional:false, name:"newData", defaultValue:null, 
             type:"Array of CellRecord or CellRecord"}
        ],
        type:"method",
        definingClass:"interface:Chart"
    },
    "attr:Tab.disabled":{
        ref:"attr:Tab.disabled",
        flags:"IRW",
        description:"If specified, this tab will initially be rendered in a disabled state. To enable or\n disable tabs on the fly use the ${isc.DocUtils.linkForRef('method:TabSet.enableTab')}, and ${isc.DocUtils.linkForRef('method:TabSet.disableTab')}\n methods.",
        name:"disabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab"
    },
    "method:List.removeList":{
        ref:"method:List.removeList",
        flags:"",
        description:" Remove all instances of objects in the specified list from this list, sliding the remaining\n objects around to fill gaps.\n\n",
        name:"removeList",
        seeAlso:[],
        params:[
            {description:"list of items to remove", optional:false, name:"list", defaultValue:null, 
             type:"array"}
        ],
        returns:{description:"list of items passed in", type:"list"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "method:Class.toString":{
        ref:"method:Class.toString",
        flags:"",
        description:"\n  The default toString() for instances reports that you have an instance of a class and prints\n  the instance ID if present.\n",
        name:"toString",
        seeAlso:[],
        type:"method",
        definingClass:"class:Class"
    },
    "method:TabSet.addTab":{
        ref:"method:TabSet.addTab",
        flags:"A",
        description:" Add a tab\n",
        name:"addTab",
        seeAlso:[
            {ref:"method:TabSet.addTabs", description:null}
        ],
        params:[
            {description:"new tab", optional:false, name:"tab", defaultValue:null, type:"Tab"},
            {description:"position where tab should be added", optional:false, name:"position", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('tabsAddAndRemove')}"],
        definingClass:"class:TabSet"
    },
    "method:SectionStack.removeItem":{
        ref:"method:SectionStack.removeItem",
        flags:"",
        description:" Remove an item from a section.\n",
        name:"removeItem",
        seeAlso:[],
        params:[
            {description:"ID or index of the section to remove item from", optional:false, 
             name:"section",defaultValue:null, type:"String or Number"},
            {description:"Item to remove", optional:false, name:"item", defaultValue:null, type:"Canvas"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:Canvas.prompt":{
        ref:"attr:Canvas.prompt",
        flags:"IRW",
        description:"Prompt displayed in hover canvas if ${isc.DocUtils.linkForRef('attr:Canvas.showHover','showHover')} is true.",
        name:"prompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customHovers')}"],
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:TabSet.getPaneContainerEdges":{
        ref:"method:TabSet.getPaneContainerEdges",
        flags:"A",
        description:" If the paneContainer for this tab set is showing ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','edges')}, this \n method can be used to specify (dynamically) which ${isc.DocUtils.linkForRef('attr:Canvas.customEdges','customEdges')} to\n show. Called when the pane creator is created.\n <P>\n Default implementation will return null unless ${isc.DocUtils.linkForRef('attr:TabSet.showPartialEdges','showPartialEdges')}\n is true, in which case it will return the three edges opposite the\n ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')}.\n",
        name:"getPaneContainerEdges",
        seeAlso:[],
        returns:{description:"array of custom edges to show", type:"array"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:CubeGrid.anyCellSelected":{
        ref:"method:CubeGrid.anyCellSelected",
        flags:"",
        description:"\n Determine whether any cells are selected in this cubeGrid\n\n  <br><i>methodType</i> tester\n",
        name:"anyCellSelected",
        seeAlso:[],
        returns:{description:"true if any cells are selected", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:ListGrid.discardAllEdits":{
        ref:"method:ListGrid.discardAllEdits",
        flags:"A",
        description:"\n Cancel outstanding edits, discarding edit values, and hiding editors for the record[s] passed\n in if appropriate.\n If no rows are passed in all outstanding edit values will be dropped.\n \n",
        name:"discardAllEdits",
        seeAlso:[],
        params:[
            {description:"allows you to specify which row(s) to drop edits for", optional:true, 
             name:"rows",defaultValue:null, type:"array of numbers"},
            {description:"By default this method will hide the editor if                              it is currently showing for any row in the grid. Passing in\n                              this parameter will leave the editor visible (and just reset\n                              the edit values underneath the editor).", 
             optional:true,name:"dontHideEditor", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Label.showRollOverIcon":{
        ref:"attr:Label.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "method:DynamicForm.itemKeyPress":{
        ref:"method:DynamicForm.itemKeyPress",
        flags:"",
        description:" Handler fired when a FormItem within this form receives a keypress event.\n <P>\n Fires after the keyPress handler on the FormItem itself, and only if the item did not\n cancel the event and chooses to allow it to propagate to the form as a whole. \n \n",
        name:"itemKeyPress",
        seeAlso:[],
        params:[
            {description:"the FormItem where the change event occurred", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"},
            {description:"name of the key that was pressed (EG: \"A\", \"Space\")", optional:false, 
             name:"keyName",defaultValue:null, type:"string"},
            {description:"numeric character value of the pressed key.", optional:false, 
             name:"characterValue",defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:DynamicForm"
    },
    "attr:TabSet.topEdgeSizes":{
        ref:"attr:TabSet.topEdgeSizes",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeSizes</code>, \n <code>rightEdgeSizes</code>, <code>topEdgeSizes</code> and <code>bottomEdgeSizes</code> \n propertes allow the sizes of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"topEdgeSizes",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:Canvas.getContents":{
        ref:"method:Canvas.getContents",
        flags:"",
        description:"      Returns the contents of a Canvas. The contents are an HTML string.\n",
        name:"getContents",
        seeAlso:[],
        returns:{description:"contents of this Canvas", type:"HTML"},
        type:"method",
        definingClass:"class:Canvas"
    },
    "attr:FormItem.rowSpan":{
        ref:"attr:FormItem.rowSpan",
        flags:"IRW",
        description:"Number of rows that this item spans",
        name:"rowSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formLayout"]
    },
    "attr:ImgButton.showSelectedIcon":{
        ref:"attr:ImgButton.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:ListGrid.filterOnKeypress":{
        ref:"attr:ListGrid.filterOnKeypress",
        flags:"IRWA",
        description:"If we're showing the filterEditor (this.showFilterEditor is true), this property \n determines whether this list should be filtered every time the user modifies the value\n in a field of the filter-editor. Can also be set at the field level.",
        name:"filterOnKeypress",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "class:MenuBar":{
        methods:["method:MenuBar.setMenus", "method:MenuBar.addMenus", "method:MenuBar.removeMenus", 
         "method:MenuBar.showMenu"],
        ref:"class:MenuBar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:MenuBar.menus", "attr:MenuBar.tabIndex"],
        description:"A MenuBar is a bar of buttons used to show a set of menus.",
        name:"MenuBar",
        seeAlso:[],
        type:"class"
    },
    "attr:FormItem.icons":{
        ref:"attr:FormItem.icons",
        flags:"IRW",
        description:"An array of descriptor objects for icons to display in a line after this form item.\n  These icons are clickable images, often used to display some kind of helper for \n  populating a form item.",
        name:"icons",
        seeAlso:[
            {ref:"object:FormItemIcon", description:null}
        ],
        valueType:"Array of FormItemIcon Properties",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formIcons')}"],
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "attr:Applet.src":{
        ref:"attr:Applet.src",
        flags:"IR",
        description:"A URL that points to the class of this applet.  This is the same as the 'code' attribute.\n  Note that if you specify both the src and the code attributes, the src attribute will be\n  ignored in favor of the code attribute.",
        name:"src",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:Chart.shouldAnimateShow":{
        ref:"attr:Chart.shouldAnimateShow",
        flags:"IR",
        description:"Whether the chart should animate when shown (eg, bars or columns grow into place)",
        name:"shouldAnimateShow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"interface:Chart",
        groups:["chartAppearance"]
    },
    "attr:Snapbar.gripImgSuffix":{
        ref:"attr:Snapbar.gripImgSuffix",
        flags:"IRA",
        description:"Overridden from ${isc.DocUtils.linkForRef('attr:Splitbar.gripImgSuffix')} to simplify providing custom grip media\n for this widget.",
        name:"gripImgSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"snap\"",
        type:"attr",
        definingClass:"class:Snapbar"
    },
    "attr:ListGrid.sorterProperties":{
        ref:"attr:ListGrid.sorterProperties",
        flags:"IRA",
        description:"Properties to apply to the sorter button. Overrides defaults applied via \n ${isc.DocUtils.linkForRef('attr:ListGrid.sorterDefaults')}.",
        name:"sorterProperties",
        seeAlso:[],
        valueType:"Button Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:DateItem.endDate":{
        ref:"attr:DateItem.endDate",
        flags:"IRW",
        description:"Maximum date the selectors will allow the user to pick.",
        name:"endDate",
        seeAlso:[],
        valueType:"Date",
        defaultValue:"12/31/2015",
        type:"attr",
        definingClass:"class:DateItem",
        groups:["appearance"]
    },
    "attr:OperationBinding.recordXPath":{
        ref:"attr:OperationBinding.recordXPath",
        flags:"IR",
        description:"For an XML or JSON DataSource, XPath expression used to retrieve the objects that will\n become DataSource records.\n <p>\n For example, an \"ItemSearch\" web service might return a \"Results\" structure containing\n metadata along with the set of Items that one might want to display in a grid.  An XPath\n expression like \"/Results/Items\" could be used to retrieve just the Items, which would then\n become DataSource records.\n <p>\n For a JSON web service, the <code>recordXPath</code> is applied to the returned JSON data\n via ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')}.  Only limited XPath syntax is allowed; see \n ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects','selectObjects()')} for details.\n <P>\n For processing XML results, see ${isc.DocUtils.linkForRef('attr:OperationBinding.xmlNamespaces')} for information\n on the namespaces that are available in this XPath expression.\n <P>\n To learn about XPath, try the following search:\n <a href=\"http://www.google.com/search?q=xpath+tutorial\" target=\"_blank\"\n >http://www.google.com/search?q=xpath+tutorial</a>",
        name:"recordXPath",
        seeAlso:[],
        valueType:"XPathExpression",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:TabBar.buttonConstructor":{
        ref:"attr:TabBar.buttonConstructor",
        flags:"AIRW",
        description:"SmartClient component used for the tabs of the tabBar. \n Must be Button or Button subclass.",
        name:"buttonConstructor",
        seeAlso:[],
        valueType:"class",
        defaultValue:"ImgTab",
        type:"attr",
        definingClass:"class:TabBar"
    },
    "attr:HTMLFlow.contents":{
        ref:"attr:HTMLFlow.contents",
        flags:"IRW",
        description:"The contents of a canvas or label widget. Any HTML string is acceptable.",
        name:"contents",
        seeAlso:[
            {ref:"attr:HTMLFlow.dynamicContents", description:null}
        ],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contents"]
    },
    "method:CubeGrid.facetValuesSelected":{
        ref:"method:CubeGrid.facetValuesSelected",
        flags:"",
        description:"\n return whether the header indicated by the set of facetValues is selected\n\n  <br><i>methodType</i> tester\n",
        name:"facetValuesSelected",
        seeAlso:[],
        params:[
            {description:"facetValues to test", optional:false, name:"facetValues", defaultValue:null, 
             type:"facetValues object"}
        ],
        returns:{description:"true if the header is selected", type:"boolean"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "attr:TabSet.pickerButtonSrc":{
        ref:"attr:TabSet.pickerButtonSrc",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true, this property governs the base URL for the picker\n button image, when ${isc.DocUtils.linkForRef('attr:TabSet.symmetricPickerButton')} is set to false\n <P>\n Note that if <code>symmetricPickerButton</code> is true, the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonHSrc')} \n and ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonVSrc')} properties will be used instead.\n <P>\n To get the path to the image to display, this base URL will be modified as follows:\n <ul>\n <li>If appropriate a state suffix of <code>\"Down\"</code> or <code>\"Disabled\"</code> will be\n     appended.</li>\n <li>The ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} for this tabSet will be appended.</li>\n </ul>",
        name:"pickerButtonSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricPickerButton", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/picker.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "attr:Slider.sliderTarget":{
        ref:"attr:Slider.sliderTarget",
        flags:"IRW",
        description:"The target widget for the <code>sliderMove</code> event generated when the slider thumb \n is moved.",
        name:"sliderTarget",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:FormItem.hoverHeight":{
        ref:"attr:FormItem.hoverHeight",
        flags:"IRW",
        description:"Option to specify a height for any hover shown for this item.",
        name:"hoverHeight",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverHeight", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:StretchImgButton.showFocus":{
        ref:"attr:StretchImgButton.showFocus",
        deprecated:"as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  Note that by default the\n <code>over</code> state is used to indicate focus.",
        name:"showFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "classMethod:RPCManager.cancelQueue":{
        ref:"classMethod:RPCManager.cancelQueue",
        flags:"",
        description:" Cancel a transaction (a queue of requests being sent to the server). \n",
        name:"cancelQueue",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:RPCManager"
    },
    "attr:DataSource.schemaNamespace":{
        ref:"attr:DataSource.schemaNamespace",
        flags:"R",
        description:"For a DataSource derived from WSDL or XML schema, the XML namespace this schema belongs\n to.  This is a read-only attribute automatically present on DataSources returned from\n ${isc.DocUtils.linkForRef('method:SchemaSet.getSchema')} and ${isc.DocUtils.linkForRef('method:WebService.getSchema')}.",
        name:"schemaNamespace",
        seeAlso:[],
        valueType:"URN",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["wsdlBinding", "clientDataIntegration"]
    },
    "attr:DataSource.titleField":{
        ref:"attr:DataSource.titleField",
        flags:"IRW",
        description:"Best field to use for a user-visible title for an individual record from this dataSource.\n <p>\n For example, for a DataSource of employees, a \"full name\" field would probably most clearly\n labels an employee record.\n <p>\n If not explicitly set, titleField looks for fields named \"title\", \"name\", and \"id\" in that\n order.  If a field exists with one of those names, it becomes the titleField.  If not, then the\n first field is designated as the titleField.",
        name:"titleField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["titles"]
    },
    "attr:DetailViewer.cellStyle":{
        ref:"attr:DetailViewer.cellStyle",
        flags:"IRW",
        description:"CSS style for a normal value",
        name:"cellStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"detail\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "method:DataSource.recordsFromXML":{
        ref:"method:DataSource.recordsFromXML",
        flags:"A",
        description:" Transform a list of XML elements to DataSource records.\n <P>\n <code>recordsFromXML()</code> will return a List of DataSource records in the form of\n JavaScript objects.  The value for each field is extracted from the XML according to the\n rules described under ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')}. \n <P>\n Derived JavaScript values for each field will be the appropriate JavaScript type, eg,\n for a field of \"date\" type, the JS value will be a JavaScript Date object.\n \n",
        name:"recordsFromXML",
        seeAlso:[],
        params:[
            {description:"XML elements to transform, eg, the result of a                                       call to ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectNodes')}", 
             optional:false,name:"elements", defaultValue:null, type:"List of XMLElement"}
        ],
        returns:{description:"List of DataSource records derived from the XML elements", type:"List"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "method:List.getLength":{
        ref:"method:List.getLength",
        flags:"",
        description:" Return the number of items in this list\n\n",
        name:"getLength",
        seeAlso:[],
        returns:{description:"number of items in the list", type:"Number"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "method:StretchImgButton.select":{
        ref:"method:StretchImgButton.select",
        flags:"",
        description:" Select this object.\n",
        name:"select",
        seeAlso:[],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "class:Scrollbar":{
        methods:["method:Scrollbar.setScrollTarget"],
        ref:"class:Scrollbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:Scrollbar.btnSize", "attr:Scrollbar.autoEnable", "attr:Scrollbar.showCorner", 
         "attr:Scrollbar.allowThumbDownState","attr:Scrollbar.showTrackEnds", "attr:Scrollbar.thumbMinSize", 
         "attr:Scrollbar.trackEndWidth","attr:Scrollbar.trackEndHeight", "attr:Scrollbar.thumbOverlap", 
         "attr:Scrollbar.startThumbOverlap","attr:Scrollbar.endThumbOverlap", "attr:Scrollbar.scrollTarget"],
        description:"The Scrollbar widget implements cross-platform, image-based scrollbars that control the\n  scrolling of content in other widgets.   When native, CSS-based scrollbars are not in use,\n  Scrollbar widgets are created and displayed automatically for widgets that require them.\n  <br><br>\n  Even where native scrollbars are functional, it may be desirable to use Scrollbar widgets\n  to customize size, positioning, images, and enabled state.",
        name:"Scrollbar",
        seeAlso:[],
        type:"class"
    },
    "method:ComboBoxItem.getClientPickListData":{
        ref:"method:ComboBoxItem.getClientPickListData",
        flags:"",
        description:" Returns the set of data to be displayed in this item's PickList.\n <P>\n This method will be called for non-databound form items implementing the PickList\n interface.  The default implementation will derive data from the item's valueMap - \n can be overridden to allow a custom set of options to be displayed.\n <P>\n Note that for PickLists that filter data based on user input\n (${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')}), this method should return the data <b>before\n filtering</b>.  To customize the data returned after filtering, override\n ${isc.DocUtils.linkForRef('method:ComboBoxItem.filterClientPickListData')} instead.\n <P>\n As an example, for a formItem with ${isc.DocUtils.linkForRef('attr:ComboBoxItem.valueField')} set to \"valueFieldName\", the\n default implementation would take a valueMap like the following:\n <pre>\n     valueMap: { value1: \"display 1\", value2: \"display 2\" }\n </pre>\n .. and returning the following set of records: \n <pre>\n     [\n          { valueFieldName : \"value1\" },\n          { valueFieldName : \"value2\" }\n     ]\n </pre>\n Due to the valueMap, these records will appear as a two row pickList displayed as\n \"display 1\" and \"display 2\".\n\n",
        name:"getClientPickListData",
        seeAlso:[],
        returns:{description:"Array of record objects to be displayed in the           pickList. Note that when a user picks a record from the list, the value of the\n           field matching <code>item.valueField</code> will be picked. Also note that the\n           fields to be displayed can be customized via <code>item.pickListFields</code>", 
         type:"Array of ListGridRecord"},
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "classMethod:Date.setNormalDisplayFormat":{
        ref:"classMethod:Date.setNormalDisplayFormat",
        flags:"",
        description:" Set the default formatter for date objects to the method name passed in.  After calling this\n method, subsequent calls to ${isc.DocUtils.linkForRef('method:Date.toNormalDate')} will return a string formatted\n according to this format specification. Note: this will be the standard long date format used \n by SmartClient components.<br>\n The <code>format</code> parameter may be either a ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} string, or \n a function. If passed a function, this function will be executed in the scope of the Date\n and should return the formatted string.<br>\n Initial default normalDisplayFormat is <code>\"toLocaleString\"</code>\n",
        name:"setNormalDisplayFormat",
        seeAlso:[],
        params:[
            {description:"new formatter", optional:false, name:"format", defaultValue:null, 
             type:"DateDisplayFormat | function"}
        ],
        type:"classMethod",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "classAttr:Validator.notOneOf":{
        ref:"classAttr:Validator.notOneOf",
        flags:"IRA",
        description:"Default error message to display when standard <code>isOneOf</code> type validator\n is not passed.",
        name:"notOneOf",
        seeAlso:[],
        valueType:"string",
        defaultValue:"'Not a valid option'",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:Canvas.clickMaskUp":{
        ref:"method:Canvas.clickMaskUp",
        flags:"",
        description:" Determines whether a clickmask is showing\n",
        name:"clickMaskUp",
        seeAlso:[
            {ref:"method:Canvas.showClickMask", description:null}
        ],
        params:[
            {description:"optional ID of specific clickMask to check. If not passed,                       checks for the click mask associated with this widget only.", 
             optional:true,name:"ID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["clickMask"]
    },
    "attr:FacetValue.titleHilite":{
        ref:"attr:FacetValue.titleHilite",
        flags:"IR",
        description:"Hilite style to apply to the title for this facetValue.  See\n ${isc.DocUtils.linkForRef('attr:CubeGrid.hilites')}.",
        name:"titleHilite",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "method:ValuesManager.resetValues":{
        ref:"method:ValuesManager.resetValues",
        flags:"A",
        description:"\n Same as ${isc.DocUtils.linkForRef('method:DynamicForm.reset')}.\n\n",
        name:"resetValues",
        seeAlso:[],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "group:validation":{
        ref:"group:validation",
        refs:["classMethod:isc.getErrorsHTML", "method:DynamicForm.getItemErrorHTML", 
         "method:DynamicForm.validate","method:DynamicForm.validateData", "classMethod:Validator.addValidator", 
         "classMethod:Validator.addValidators","attr:DynamicForm.showInlineErrors", "attr:DynamicForm.showErrorIcons", 
         "attr:DynamicForm.showErrorText","attr:DynamicForm.showErrorStyle", "attr:DynamicForm.errorOrientation", 
         "attr:DynamicForm.errorItemProperties","attr:DynamicForm.errorItemCellStyle", "attr:DynamicForm.errorsPreamble", 
         "attr:DynamicForm.showTitlesWithErrorMessages","attr:DynamicForm.errors", "attr:DynamicForm.validateOnChange", 
         "attr:DynamicForm.unknownErrorMessage","attr:DynamicForm.validationURL", "attr:DynamicForm.disableValidation", 
         "attr:FormItem.required","attr:FormItem.showErrorIcon", "attr:FormItem.showErrorText", 
         "attr:FormItem.showErrorStyle","attr:FormItem.errorOrientation", "attr:TextItem.length", 
         "attr:ValuesManager.unknownErrorMessage","attr:ValuesManager.disableValidation", "attr:DataSource.useLocalValidators", 
         "attr:DataSourceField.validators","attr:SimpleType.validators"],
        description:"Validation",
        name:"validation",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.animateFadeTime":{
        ref:"attr:Canvas.animateFadeTime",
        flags:"IRWA",
        description:"Default time for performing an animated fade.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateFadeTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:CubeGrid.getRollupValue":{
        ref:"method:CubeGrid.getRollupValue",
        flags:"",
        description:" Get the facetValue definition for the facetValue to show when this facet is \"rolled up\" under\n another facet, during a breakout.<br><br>\n\n A facet is not required to have a rollup value, and if it does not have one, then rollups will\n simply be blank rows.  The facetValueId of the rollup value can be declared as\n cubeGrid.rollupValue or facet.rollupValue.  \n\n",
        name:"getRollupValue",
        seeAlso:[
            {ref:"attr:CubeGrid.rollupValue", description:null}
        ],
        returns:{description:"rolled up facet value definition", type:"facetValue"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:StatefulCanvas.showRollOverIcon":{
        ref:"attr:StatefulCanvas.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:ListGrid.getEditField":{
        ref:"method:ListGrid.getEditField",
        flags:"",
        description:"\n  Returns the field object associated with cell currently being edited\n\n",
        name:"getEditField",
        seeAlso:[],
        returns:{description:"Field object definition", type:"object"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Slider.showTitle":{
        ref:"attr:Slider.showTitle",
        flags:"IRW",
        description:"Indicates whether the slider's title should be displayed. The default position for this label\n is to the left of a horizontal slider, or above a vertical slider.",
        name:"showTitle",
        seeAlso:[
            {ref:"attr:Slider.title", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:Progressbar.breadth":{
        flags:"IR",
        getter:["getBreadth"],
        type:"attr",
        ref:"attr:Progressbar.breadth",
        description:"Thickness of the progressbar in pixels. This is effectively width for a vertical\n progressbar, or height for a horizontal progressbar.\n <P>\n This property must be set instead of setting <code>width</code> or <code>height</code>.",
        name:"breadth",
        setter:["setBreadth"],
        valueType:"number",
        seeAlso:[],
        defaultValue:"20",
        groups:["appearance"],
        definingClass:"class:Progressbar"
    },
    "group:treeField":{
        ref:"group:treeField",
        refs:["attr:TreeGridField.treeField", "attr:TreeGrid.treeFieldTitle", "attr:TreeGrid.showRoot", 
         "attr:TreeGrid.separateFolders","attr:TreeGrid.displayNodeType"],
        name:"treeField",
        seeAlso:[],
        type:"group"
    },
    "class:RestDataSource":{
        methods:["method:RestDataSource.transformRequest", "method:RestDataSource.transformResponse"],
        ref:"class:RestDataSource",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding"],
        attrs:["attr:RestDataSource.dataFormat", "attr:RestDataSource.xmlRecordXPath", 
         "attr:RestDataSource.jsonRecordXPath","attr:RestDataSource.operationBindings", "attr:RestDataSource.dataURL", 
         "attr:RestDataSource.fetchDataURL","attr:RestDataSource.updateDataURL", "attr:RestDataSource.addDataURL", 
         "attr:RestDataSource.removeDataURL","attr:RestDataSource.sendMetaData", "attr:RestDataSource.metaDataPrefix"],
        description:"The RestDataSource implements the 4 core DataSource operations using a simple protocol of\n XML or JSON requests and responses sent over HTTP, which can be easily fulfilled by any HTTP\n server technology.\n <P>\n RestDataSource is named for the\n <a href='http://www.google.com/search?hl=en&q=REST+HTTP' onclick=\"window.open('http://www.google.com/search?hl=en&q=REST+HTTP');return false;\">REST</a> (REpresentational State\n Transfer) pattern, which in brief says that simple messages passed over HTTP is a sufficient\n protocol for many web applications, without the need for further protocols such as WSDL or\n SOAP.\n <P>\n A RestDataSource is used just like a normal DataSource.  RestDataSources are configured,\n using the general-purpose databinding facilities of DataSources, to expect a particular\n format for responses and to send requests in a specific format.   These request and\n response formats represent Isomorphic's recommended best practices for binding SmartClient\n to backends which do not already support a similar, pre-existing request and response\n format.\n <P>\n Full source code to the RestDataSource is provided (see \n /examples/databinding/RestDataSource.js), intended for possible further modification and an\n extended example of how to use SmartClient's general databinding engine.\n <P>\n RestDataSource is typically used with PHP, Ruby, Python, Perl or custom server technologies,\n and represents an alternative to installing the SmartClient Server in a Java technology\n stack, or using ${isc.DocUtils.linkForRef('group:wsdlBinding','WSDL-based binding')} with .NET or other WSDL-capable\n technologies.\n <P>\n <span style=\"font-weight:bold;font-size:16px;\">Examples</span>\n <p>\n <b>XML formatted responses:</b>\n <P>\n RestDataSource expects a response to like the following in response to a \"fetch\" request:\n <pre>\n &lt;response&gt;\n    &lt;status&gt;0&lt;/status&gt;\n    &lt;data&gt;\n      &lt;record&gt;\n          &lt;field1&gt;value&lt;/field1&gt;\n          &lt;field2&gt;value&lt;/field2&gt;\n      &lt;/record&gt;\n      &lt;record&gt;\n          &lt;field1&gt;value&lt;/field1&gt;\n          &lt;field2&gt;value&lt;/field2&gt;\n      &lt;/record&gt;\n    &lt;/data&gt;\n &lt;/response&gt;\n </pre>\n The status element indicates whether the fetch operation was successful \n (see ${isc.DocUtils.linkForRef('group:statusCodes')}).\n <P>\n The data element contains a list of record nodes, each of which represents a record returned\n by the server.  Additional elements for totalRows returned, startRow and endRow may\n also be included.\n <P>\n Note: for a more compact format, simple field values may be specified on record \n nodes directly as attributes - in this case a record element might be structured like this:\n <pre>\n     &lt;record field1=\"value\" field2=\"value\" /&gt;\n </pre>\n <p>\n Successful \"add\" or \"update\" request responses are similar in format - in this case the data\n element would be expected to contain a single record object containing the details of the\n record, as saved on the server.\n <P>\n The response from a \"remove\" operation would again include status and data elements, but in\n this case, only the primary key field value(s) of the removed record would be expected to be \n present under the data element.\n <p>\n If a validation failure occurred on the server, the response would\n have status set to ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} [<code>-4</code> by default],\n and any validation errors could be included as per-field sub-elements of an \"errors\"\n element.\n <P>\n Note that in this case the response would not be expected to contain any data element.  \n A response showing a validation error might look like this:\n <pre>\n &lt;response&gt;\n    &lt;status&gt;-4&lt;/status&gt;\n    &lt;errors&gt;\n      &lt;field1&gt;\n          &lt;errorMessage&gt;A validation error occurred for this field&lt;/errorMessage&gt;\n      &lt;/field1&gt;\n    &lt;/errors&gt;\n &lt;/response&gt;\n </pre>\n <p>\n <b>JSON formatted responses:</b>\n <P>\n JSON format responses are expected to contain the same data / meta-data as XMLresponses,\n encapsulated a simple object with a <code>\"response\"</code> attribute.<br>\n The response to a \"fetch\" request would therefore have this format:<br>\n <pre>\n {    response:\n      {   status:0,\n          data:[\n              {field1:\"value\", field2:\"value\"},\n              {field1:\"value\", field2:\"value\"}\n          ]\n      }\n }\n </pre>\n The structure successful for \"add\", \"update\" and \"remove\" responses would be similar, though\n the data array would be expected to contain the single edited record only.<br>\n For a remove, only the value for the primaryKey field[s] would be required.\n <p>\n If an error occurred on the server, this would be indicated in the <code>status</code> \n attribute.  For a validation error, the status would be set to \n ${isc.DocUtils.linkForRef('classAttr:RPCResponse.STATUS_VALIDATION_ERROR')} [<code>-4</code> by default], and errors would\n be specified in the <code>errors</code> attribute of the response. For example:\n <pre>\n {    response:\n      {   status:-4,\n          errors: \n              {   field1:{errorMessage:\"A validation error on field1\"},\n                  field2:{errorMessage:\"A validation error on field2\"}\n              }\n      }\n }\n </pre>\n An array of errors may also be returned for a single field, like this:\n <pre>\n {    response:\n      {   status:-4,\n          errors: \n              {   field1:[\n                      {errorMessage:\"First error on field1\"},\n                      {errorMessage:\"Second error on field1\"}\n                  ]\n              }\n      }\n }\n </pre>\n <b>Server inbound data formats</b>\n <P>\n The format of data sent to the server is determined by the ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol')}\n specified for the operation. Request data is sent as parameters if the format is \n specified as <code>\"getParams\"</code> or <code>\"postParams\"</code>.\n <P>\n In this case, the parameters sent to the server will consist of the DSRequest's data, and any\n parameters explicitly specified on the DSRequest object (as ${isc.DocUtils.linkForRef('attr:RPCRequest.params')}.<br> \n If ${isc.DocUtils.linkForRef('attr:RestDataSource.sendMetaData')} is true, the DSRequest meta \n data properties will also be present as parameters, prefixed with \n ${isc.DocUtils.linkForRef('attr:RestDataSource.metaDataPrefix')}.\n <P>\n Example URL constructed with the metaDataPrefix set to <code>\"_\"</code> (the default):\n <p>\n <code>\n &nbsp;&nbsp;&nbsp;<i>[dataURL]</i>?field1=value1&_operationType=fetch&_startRow=0&_endRow=50&_sortBy=-field2&_dataSource=dsName\n </code>\n <p>\n In this case the server would be able to separate the request's data from the meta data \n via the <code>\"_\"</code> prefix.\n <P>\n If data is sent to the server via the <code>\"postMessage\"</code> dataProtocol, the data will\n be sent as a serialized XML message.  In this case the created XML document will contain \n nodes for each relevant property of the request (including a <code>\"data\"</code> node \n containing the request's data.\n <P>\n An example of an XML message might look like this:\n <pre>\n  &lt;data&gt;\n        &lt;countryDS&gt;\n            &lt;countryCode&gt;US&lt;/countryCode&gt;\n            &lt;countryName&gt;Edited Value&lt;/countryName&gt;\n            &lt;capital&gt;Edited Value&lt;/capital&gt;\n            &lt;continent&gt;Edited Value&lt;/continent&gt;\n        &lt;/countryDS&gt;\n    &lt;/data&gt;\n    &lt;dataSource&gt;countryDS&lt;/dataSource&gt;\n    &lt;operationType&gt;update&lt;/operationType&gt;\n </pre>\n The ${isc.DocUtils.linkForRef('attr:RestDataSource.operationBindings','default OperationBindings')} for a RestDataSource\n specify dataProtocol as \"getParams\" for the fetch operation, and \"postParams\" for update,\n add and remove operations.\n <P>\n <b>Hierachical (Tree) data:</b>\n <P>\n To create a hierachical DataSource, in the DataSource's <code>fields</code> array, a field \n must be specified as the parent id field - the field which will contain a pointer to the\n id of each node's parent. \n This can be achieved by setting the ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')} and the \n ${isc.DocUtils.linkForRef('attr:DataSourceField.rootValue')} attributes on the field definition. For example:\n <pre>\n RestDataSource.create({\n  ID:\"supplyItem\",\n  fields : [\n      {name:\"itemId\", type:\"sequence\", primaryKey:true},\n      {name:\"parentId\", type:\"integer\", foreignKey:\"supplyItem.itemId\", rootValue:0},\n      ...\n  ]\n });\n </pre>\n Tree Data is then treated on the server as a flat list of records linked by parent id.<br>\n Tree data is typically displayed using a dataBound ${isc.DocUtils.linkForRef('class:TreeGrid')} component. TreeGrids\n automatically create a ${isc.DocUtils.linkForRef('class:ResultTree')} data object, which requests data directly\n from the DataSource.  ResultTrees load data on demand, only requesting currently visible \n (open) nodes from the server. This is handled by including a specified value for the parent \n id field in the request criteria.<br>\n To implement a standard load-on-demand tree RestDataSource back end, you should therefore \n simply return the set of nodes that match the criteria passed in. \n For example, if your DataSource was defined as the \"supplyItem\" code snippet above, \n a fetch request for all children of a node with <code>itemId</code> set to <code>12</code> \n would have <code>\"parentId\"</code> set to <code>12</code> in the request criteria.\n A valid response would then contain all the records that matched this criteria. For example:\n <pre>\n &lt;response&gt;\n    &lt;status&gt;0&lt;/status&gt;\n    &lt;data&gt;\n      &lt;record&gt;\n          &lt;itemId&gt;15&lt;/itemId&gt;\n          &lt;parentId&gt;12&lt;/parentId&gt;\n      &lt;/record&gt;\n      &lt;record&gt;\n          &lt;itemId&gt;16&lt;/itemId&gt;\n          &lt;parentId&gt;12&lt;/parentId&gt;\n      &lt;/record&gt;\n    &lt;/data&gt;\n &lt;/response&gt;\n </pre>\n The structure of responses for Add, Update and Delete type requests will be the \n same regardless of whether the data is hierachical. However you should be aware that \n the underlying data storage may need to be managed slightly differently in some cases.<br>\n Specifically, Add and Update operations may change the structure of the tree by returning a \n new parent id field value for the modified node. Depending on how your data is stored you \n may need to include special back-end logic to handle this.<br>\n Also, if a user deletes a folder within a databound tree, any children of that folder will \n also be dropped from the tree, and can be removed from the back-end data storage.<br>\n Note: For a general overview of binding components to Tree structured data, see \n ${isc.DocUtils.linkForRef('group:treeDataBinding','Tree Databinding')}.",
        name:"RestDataSource",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('restEditSave')}"]
    },
    "method:Date.toNormalDate":{
        ref:"method:Date.toNormalDate",
        flags:"",
        description:" Returns the date as a formatted string using the format set up via the \n <code>setNormalDisplayFormat()</code> method. Note that the default formatter for this\n method is <code>\"toLocaleString\"</code>.\n",
        name:"toNormalDate",
        seeAlso:[],
        params:[
            {description:"Optional Format for the date returned", optional:false, name:"format", 
             defaultValue:null,type:"DateDisplayFormat"}
        ],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:SectionStack.sectionIsExpanded":{
        ref:"method:SectionStack.sectionIsExpanded",
        flags:"",
        description:"\n Returns true if the specified section is expanded, false if it is collapsed.\n\n",
        name:"sectionIsExpanded",
        seeAlso:[],
        params:[
            {description:"Section for which you want to obtain information.\n                      For this parameter, you can pass the position of the section in the\n                      SectionStack, or the ID of the section.", 
             optional:false,name:"section", defaultValue:null, type:"sectionId|position"}
        ],
        returns:{description:"true if the section is expanded, false if it is not.", type:"boolean"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:Img.imageHeight":{
        ref:"attr:Img.imageHeight",
        flags:"IR",
        description:"Explicit size for the image, for ${isc.DocUtils.linkForRef('attr:Img.imageType')} settings that would normally use the\n image's natural size (applies to ${isc.DocUtils.linkForRef('attr:Img.imageType')} \"center\" and \"normal\" only).",
        name:"imageHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Img"
    },
    "method:StatefulCanvas.setSelected":{
        ref:"method:StatefulCanvas.setSelected",
        flags:"",
        description:" Set this object to be selected or deselected.\n",
        name:"setSelected",
        seeAlso:[],
        params:[
            {description:"new boolean value of whether or not the object is                                          selected.", 
             optional:false,name:"newIsSelected", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "attr:OperationBinding.dataFormat":{
        ref:"attr:OperationBinding.dataFormat",
        flags:"IR",
        description:"Format for response data for this operation.\n <P>\n Typically set once for the DataSource as a whole via ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat')}.",
        name:"dataFormat",
        seeAlso:[],
        valueType:"DSDataFormat",
        defaultValue:"\"iscServer\"",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:StatefulCanvas.icon":{
        ref:"attr:StatefulCanvas.icon",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"icon",
        setter:["setIcon"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "attr:DateChooser.baseWeekendStyle":{
        ref:"attr:DateChooser.baseWeekendStyle",
        flags:"IRW",
        description:"Base css style applied to weekends. Will have \"Over\", \"Selected\" and \"Down\"\n suffix appended as the user interacts with buttons.  Defaults to ${isc.DocUtils.linkForRef('attr:DateChooser.baseWeekdayStyle')}.",
        name:"baseWeekendStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:Layout.reorderMember":{
        ref:"method:Layout.reorderMember",
        flags:"",
        description:" Shift a member of the layout to a new position\n		    \n",
        name:"reorderMember",
        seeAlso:[],
        params:[
            {description:"current position of the member to move to a new position", optional:false, 
             name:"memberNum",defaultValue:null, type:"number"},
            {description:"new position to move the member to", optional:false, name:"newPosition", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:StatefulCanvas.overCanvasConstructor":{
        ref:"attr:StatefulCanvas.overCanvasConstructor",
        flags:"IRWA",
        description:"Constructor class name for this widgets ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas','overCanvas')}",
        name:"overCanvasConstructor",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"Canvas\"",
        type:"attr",
        definingClass:"class:StatefulCanvas"
    },
    "attr:StretchImgButton.iconAlign":{
        ref:"attr:StretchImgButton.iconAlign",
        flags:"IR",
        description:"If this button is showing an icon should it be right or left aligned?",
        name:"iconAlign",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:TreeNode.canDrag":{
        ref:"attr:TreeNode.canDrag",
        flags:"IRA",
        description:"Governs whether this node can be dragged. Only has an effect if this node is displayed in\n a ${isc.DocUtils.linkForRef('class:TreeGrid')} where ${isc.DocUtils.linkForRef('attr:TreeGrid.canDragRecordsOut')}, ${isc.DocUtils.linkForRef('attr:TreeGrid.canReorderRecords')}\n or ${isc.DocUtils.linkForRef('attr:TreeGrid.canReparentNodes')} is <code>true</code>",
        name:"canDrag",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:Window.headerBackground":{
        ref:"attr:Window.headerBackground",
        flags:"R",
        description:"Img background component for the header, for gradient or image-based display",
        name:"headerBackground",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "classAttr:isc.itemStartIndent":{
        ref:"classAttr:isc.itemStartIndent",
        flags:"IRW",
        description:"Size, in pixels, of indentation of all member items relative to the start of\n the alignment axis. For instance, for left-aligned members, \n itemStartIndent specifies indentation for every item from the left side of the\n section stack. Overrides ${isc.DocUtils.linkForRef('classAttr:isc.itemIndent')}.",
        name:"itemStartIndent",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"undefined",
        type:"attr",
        definingClass:"class:isc",
        groups:["layoutMember"]
    },
    "attr:ImgButton.showRollOverIcon":{
        ref:"attr:ImgButton.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "method:Canvas.clear":{
        ref:"method:Canvas.clear",
        flags:"A",
        description:" Remove all visual representation of a Canvas.\n <P>\n This is far more expensive than hide(), because in order to become visible again, the Canvas must\n be draw()n again.  Generally, application code has no reason to call clear(); if you want to\n temporarily hide a Canvas, use hide() and show(), and if you want to permanently destroy a\n Canvas, use destroy().\n <P>\n Note: a clear() will happen as part of moving a Canvas to a different parent.  See addChild().\n\n",
        name:"clear",
        seeAlso:[
            {ref:"method:Canvas.addChild", description:null}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "method:SectionStack.sectionIsVisible":{
        ref:"method:SectionStack.sectionIsVisible",
        flags:"",
        description:"\n Returns true if the specified section is visible, false if it is not.  A section is\n visible if it shows a header and the header is visible or if it has items and the first\n item is visible.\n\n",
        name:"sectionIsVisible",
        seeAlso:[],
        params:[
            {description:"Section for which you want to obtain visibility information.\n                      For this parameter, you can pass the position of the section in the\n                      SectionStack, or the ID of the section.", 
             optional:false,name:"section", defaultValue:null, type:"sectionId|position"}
        ],
        returns:{description:"true if the section is visible, false if it is not.", type:"boolean"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:DataSource.serverObject":{
        ref:"attr:DataSource.serverObject",
        flags:"IR",
        description:"For Direct Method Invocation (DMI) binding, declares the ServerObject to use as the default\n target for all ${isc.DocUtils.linkForRef('attr:DataSource.operationBindings')}.  Specifying this\n attribute in an XML DataSource stored on the server enables DMI for this DataSource.",
        name:"serverObject",
        seeAlso:[],
        valueType:"ServerObject",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["serverDataIntegration"],
        requiresModules:["SCServer"]
    },
    "method:StatefulCanvas.setIcon":{
        ref:"method:StatefulCanvas.setIcon",
        flags:"",
        description:" Change the icon being shown next to the title text.\n",
        name:"setIcon",
        seeAlso:[],
        params:[
            {description:"URL of new icon", optional:false, name:"icon", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "attr:ListGridField.filterEditorValueMap":{
        ref:"attr:ListGridField.filterEditorValueMap",
        flags:"IRW",
        description:"If this listGrid is showing a filter row, this property can be used to specify a\n  mapping of internal data to/from display values to be in the appropriate filter\n  row form item.",
        name:"filterEditorValueMap",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "method:CubeGrid.getFacetValuesColumn":{
        ref:"method:CubeGrid.getFacetValuesColumn",
        flags:"",
        description:" Get the index of the first column in the grid that matches the specified FacetValueMap.<br>\n The facetValues passed in should contain values for at least one column facet. If values are \n sparse (values not specified for every column facet), the first column matching the specified\n facet values will be returned.\n",
        name:"getFacetValuesColumn",
        seeAlso:[],
        params:[
            {description:"facet values to find", optional:false, name:"facetValues", defaultValue:null, 
             type:"facetValueMap"}
        ],
        returns:{description:"index of first column in the grid that matches the facet values passed in.", 
         type:"integer"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:HTMLFlow.contentsType":{
        ref:"attr:HTMLFlow.contentsType",
        flags:"IR",
        description:"The default setting of 'null' or 'fragment' indicates that HTML loaded from\n ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsURL')} is assumed to be an HTML fragment rather than a complete page.  Set to\n \"page\" to load HTML as a standalone page, via an IFRAME.  \n <P>\n <code>contentsType:\"page\"</code> should only be used for controlled HTML content, and only\n when such content cannot be delivered as an HTML fragment instead (the default).  To\n dynamically load SmartClient components, use ${isc.DocUtils.linkForRef('class:ViewLoader')}, <b>never</b> this mechanism\n (click ${isc.DocUtils.linkForRef('group:noFrames','here')} for why).\n <P>\n Loading HTML content as a fragment is less resource intensive and avoids visual artifacts\n such as translucent media becoming opaque or disappearing when placed over an IFRAME.  \n <P>\n Loading third-party, uncontrolled content could lead to the surrounding page disappearing if\n a user clicks on an HTML link with <code>target=_top</code>.\n <P>\n With <code>contentsType:\"page\"</code>, ${isc.DocUtils.linkForRef('attr:HTMLFlow.loadingMessage')} is not supported, and only\n \"GET\" is supported for ${isc.DocUtils.linkForRef('attr:HTMLFlow.httpMethod','httpMethod')}.",
        name:"contentsType",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "attr:CubeGrid.facetTitleAlign":{
        ref:"attr:CubeGrid.facetTitleAlign",
        flags:"IRW",
        description:"default alignment for facet labels",
        name:"facetTitleAlign",
        setter:["setFacetTitleAlign"],
        seeAlso:[],
        valueType:"alignEnum",
        defaultValue:"\"center\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "classAttr:Validator.notADate":{
        ref:"classAttr:Validator.notADate",
        flags:"IRA",
        description:"Default error message to display when standard <code>isDate</code> type validator\n  returns false.",
        name:"notADate",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be a date.\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:ListGrid.getRecordIndex":{
        ref:"method:ListGrid.getRecordIndex",
        flags:"",
        description:" Get the index of the provided record.\n <P>\n This is essentially the same as calling listGrid.data.indexOf(record), except that \n the currently visible range of records is checked first.  This is important for\n responsiveness in functions that respond to user actions when the user is working near the\n end of a very large dataset (eg 500k records).\n\n",
        name:"getRecordIndex",
        seeAlso:[],
        params:[
            {description:"the record whose index is to be retrieved", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"}
        ],
        returns:{description:"indexindex of the record, or -1 if not found", type:"Number"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:ListGridField.title":{
        ref:"attr:ListGridField.title",
        flags:"IRW",
        description:"A title for this field, to display in the header of the listGrid object.  Alternately you can\n specify a ${isc.DocUtils.linkForRef('method:ListGridField.getFieldTitle')} method on the field to return the HTML for the field title.",
        name:"title",
        seeAlso:[
            {ref:"method:ListGridField.getFieldTitle", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "attr:DynamicForm.errorItemProperties":{
        ref:"attr:DynamicForm.errorItemProperties",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in \n a single item rendered at the top of the form.<br>\n This attribute contains a properties block for this item.",
        name:"errorItemProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "attr:DetailViewerField.height":{
        ref:"attr:DetailViewerField.height",
        flags:"IR",
        description:"For ${isc.DocUtils.linkForRef('attr:DetailViewerField.type')}: <code>\"separator\"</code>, this attribute specifies\n the height of the separator.",
        name:"height",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:DetailViewerField"
    },
    "group:cursor":{
        ref:"group:cursor",
        refs:["attr:Splitbar.cursor", "attr:Splitbar.vResizeCursor", "attr:Splitbar.hResizeCursor"],
        name:"cursor",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgButton.actionType":{
        flags:"IRW",
        getter:["getActionType"],
        type:"attr",
        ref:"attr:ImgButton.actionType",
        description:"Behavior on state changes -- BUTTON, RADIO or CHECKBOX",
        name:"actionType",
        setter:["setActionType"],
        valueType:"SelectionType",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('buttonRadioToggle')}"],
        defaultValue:"\"button\"",
        groups:["state", "event handling"],
        definingClass:"class:ImgButton"
    },
    "group:skinning":{
        ref:"group:skinning",
        title:"Skinning / Theming",
        treeLocation:["Concepts"],
        refs:[],
        description:"Skinning (aka \"theming\" or \"branding\") is the process of modifying SmartClient's default\n look and feel to match the desired look and feel for your application.  SmartClient supports\n an extremely powerful and simple skinning system that allows designers with a basic grasp of\n CSS and JavaScript to skin any SmartClient component.\n <P>\n <h4>Basics</h4>\n <P>\n <ul>\n <li> SmartClient components create their visual appearance by dynamically generating HTML,\n within the browser, using JavaScript.\n\n <li> the HTML generated by SmartClient components contains CSS style names and URLs to\n images\n\n <li> SmartClient components can be skinned by replacing the CSS styles and images that\n the components use by default, or by using JavaScript properties to configure\n components to use new CSS styles and new image URLs.\n\n <li> You can change the appearance of an individual SmartClient component by passing \n properties to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}, or you can skin all components of the\n same class at once, by using ${isc.DocUtils.linkForRef('classMethod:Class.addProperties','addProperties()')} and \n ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults()')} to change the defaults for the class.\n\n <li> A \"skin\" consists of:\n <ul>\n <li> a single CSS stylesheet containing all CSS styles used by SmartClient components\n (<code>skin_styles.css</code>)\n <li> a single JavaScript file that sets component defaults (<code>load_skin.js</code>)\n <li> a directory tree of images organized by component\n </ul>\n \n <li>\n The example skins that come with SmartClient are in\n <code>isomorphicSDK/isomorphic/skins</code>.  The standard filesystem layout for a skin is:\n <pre>\n    isomorphic/skins\n        skin_styles.css\n        load_skin.js\n        images/\n            ListGrid/\n                sort_ascending.gif\n                ...\n            Tab/\n            ... other directories containing\n                component or shared media ...\n </pre>\n <li> A skin is loaded via a &lt;SCRIPT SRC=&gt; tag that loads load_skin.js, or, if using\n the SmartClient server, by specifying the \"skin\" property of the ${isc.DocUtils.linkForRef('group:loadISCTag')}.\n load_skin.js loads the stylesheet and sets the CSS styleNames and media URLs that\n SmartClient components will use.\n </ul>\n <P>\n <h4>Modifying Skins</h4>\n <P>\n To modify a skin, first create a copy of one of the skins that comes with the SmartClient\n SDK, then modify the copy.  Full instructions are provided in Chapter 9 of the \n ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')}.\n <P>\n <h4>Locating Skinning Properties</h4>\n <P>\n <b>Starting from the name of the component</b>\n <P>\n Given a SmartClient component that you want to skin, use the search feature of the SmartClient\n Reference to locate it, and open the \"Instance APIs\" tab.\n <ul>\n <li> for properties that set CSS styles, look for properties whose name includes \"style\", eg\n ${isc.DocUtils.linkForRef('attr:Button.baseStyle')}\n <li> for properties that control URLs to media, look for properties whose name includes\n \"src\", \"image\" or \"icon\", such as ${isc.DocUtils.linkForRef('attr:Img.src')}\n <li> for subcomponents that also support skinning, look for properties of type \"AutoChild\"\n and check the reference for the type of the AutoChild for settable properties.  For example,\n ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')} is an ImgButton and therefore supports ${isc.DocUtils.linkForRef('attr:ImgButton.src')}.\n </ul>\n <b>TIP</b>: the Instance APIs tab allows you to search within just the current class, limit \n the display to just properties or methods, and sort by type.\n <P>\n <b>Starting from a running example</b>\n <P>\n Open the Developer Console and use the Watch Tab to locate the component or subcomponent you \n want to skin, then locate it in the documentation, as above.\n <P>\n If you don't find the component in the documentation, it may be a custom component specific\n to your organization.  To find the base SmartClient component for a component named\n \"MyComponent\", use the following code to find out the name of the superclass:\n <pre>\n     isc.<i>MyComponent</i>.getSuperClass().getClassName()\n </pre>\n Repeat this until you arrive at a SmartClient built-in class.  You can execute this code in\n the \"Eval JS\" area of the Results pane of the Developer Console.\n <P>\n Specific browsers offer alternate approaches to quickly discover the images or style names\n being used for a part of a SmartClient component's appearance: \n <ul>\n <li> the Firefox browser offers a dialog via Tools->\"Page Info\" that gives a manifest of\n media used in the page.\n <li> the <a href='http://www.getfirebug.com/' onclick=\"window.open('http://www.getfirebug.com/');return false;\">Firebug</a> extension for Firefox has an\n \"Inspect\" feature that allows you to see the HTML, CSS and media in use for a given area of\n the screen\n <li> right clicking (option-click on a Mac) on an image and choosing \"Properties\" shows a\n dialog that provides the image URL in most browsers.  Tips:\n <ul>\n <li> if a SmartClient component is showing text over an image, right-click at the very edge of\n the underlying image to get image properties rather than information about the text label\n <li> on some browsers, in order to see the full image URL, you may need to drag select the \n partial URL of the image shown in the properties dialog\n </ul>\n </ul>\n <P>\n <h4>Image URLs in SmartClient</h4>\n <P>\n Properties that refer to images by URL, such as ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.icon')}, are\n specially interpreted in SmartClient to allow for simpler and more uniform image URLs,\n and to allow applications to be restructured more easily.\n <P>\n Unlike the URL used with an HTML &lt;IMG&gt; element, the image URL passed to a SmartClient\n component is not assumed to be relative to the current page.  See ${isc.DocUtils.linkForRef('type:SCImgURL')} for a\n full explanation of the default application image directory, and the meaning of the \"[SKIN]\"\n prefix.\n <P>\n <h4>Specifying Image URLs</h4>\n <P>\n Default image URLs for SmartClient components are specified in <code>load_skin.js</code> via\n JavaScript, using calls to ${isc.DocUtils.linkForRef('classMethod:Class.addProperties')} and\n ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}.  For example, the <code>load_skin.js</code> file\n from the \"SmartClient\" sample skin includes the following code to establish the media used by\n ${isc.DocUtils.linkForRef('attr:Window.minimizeButton')}:\n <pre>\n    isc.Window.changeDefaults(\"minimizeButtonDefaults\", { \n         src:\"[SKIN]/Window/minimize.png\"\n    });\n </pre>\n <P>\n <h4>Specifying Image Sizes</h4>\n <P>\n Many SmartClient components must know some image sizes in advance, in order to allow those\n components to autosize to data or content.\n <P>\n For example, the ${isc.DocUtils.linkForRef('class:ImgTab')}s used in ${isc.DocUtils.linkForRef('class:TabSet')}s are capable of automatically sizing\n to a variable length ${isc.DocUtils.linkForRef('attr:Tab.title')}.  To make this possible, SmartClient must know the\n sizes of the images used as \"endcaps\" on each tab in advance.\n <P>\n Like image URLs, image sizes are specified in <code>load_skin.js</code>.  The following code\n sample establishes the default size of the \"endcaps\" for tabs, by setting a default value\n for ${isc.DocUtils.linkForRef('attr:ImgTab.capSize')}:\n <pre>\n     isc.ImgTab.addProperties({\n         capSize:4\n     })\n </pre>\n <P>\n <h4>CSS usage in SmartClient</h4>\n <P>\n In SmartClient, screen layout and sizing are controlled via JavaScript, and appearance via\n CSS and images.  \n <P>\n CSS borders, margins and padding applied to SmartClient components can be treated as purely\n visual properties with no effect on sizing or layout.  Unlike HTML elements, a SmartClient\n component will always have the exact size you specify via JavaScript, regardless of browser\n platform, browser compatibility mode, or borders, margins, or padding, all of which normally\n affect the final size of an HTML element. \n <P>\n For this reason, SmartClient skinning requires only novice-level familiarity with CSS, as CSS\n is used principally for colors and fonts.  See ${isc.DocUtils.linkForRef('type:CSSStyleName','this discussion')} for\n further details on what properties should be set via CSS vs via JavaScript.\n <P>\n <h4>Statefulness and Suffixes</h4>\n <P>\n Some components or areas within components, including buttons and the cells within a grid, are\n \"stateful\", meaning that they can be in one of a set of states each of which has a distinct\n visual appearance.\n <P>\n Stateful components switch the CSS styles or image URLs they are using as they transition\n from state to state, appending state information as suffixes on the style names or URL.\n See ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:Button.baseStyle')} for details and examples.\n <P>\n SmartClient has built-in logic to manage a series of state transitions, such as:\n <ul>\n <li> \"rollover\": showing a different appearance when the mouse is over a component\n <li> \"button down\": showing a different appearance when the mouse is pressed over a\n component\n <li> \"disabled\": showing a different appearance when a component cannot be interacted with\n <li> \"selected\": showing one of a set of components in a different state to indicate\n selection\n </ul>\n Flags on some components, such as ${isc.DocUtils.linkForRef('attr:ImgButton.showRollOver')}, allow you to control whether the\n component will switch CSS style or image URL when the component transitions into a given state.\n <P>\n <h4>StretchImg: 3-segment stretchable images</h4>\n <P>\n A ${isc.DocUtils.linkForRef('class:StretchImg')} is SmartClient component that renders out a compound image composed of 3\n image files: two fixed-size endcaps images and a stretchable center segment.  Like stateful\n components, the names of each image segment is appended to the image URL as a suffix.  See\n ${isc.DocUtils.linkForRef('attr:StretchImg.src')} for details.\n <P>\n <h4>EdgedCanvas</h4>\n <P>\n Similar to a StretchImg, an ${isc.DocUtils.linkForRef('class:EdgedCanvas')} provides an image-based decorative edge\n around and/or behind another component, with up to 9 segments (a 3x3 grid).  Decorative\n edges can be added to any component by setting ${isc.DocUtils.linkForRef('attr:Canvas.showEdges','showEdges:true')}.\n EdgedCanvas is also used to construct dropshadows, which can be enabled on any component via\n ${isc.DocUtils.linkForRef('attr:Canvas.showShadow','showShadow:true')}.\n <P>\n <h4>Multiple looks for the same component type</h4>\n <P>\n In some cases you need to create two variations in appearance for a component with the same\n behavior.  For example, you may want to create a specialized Window, called \"PaletteWindow\",\n that behaves like a normal Window but has a very compact look & feel.  To create a\n separately skinnable component for PaletteWindow, use ${isc.DocUtils.linkForRef('classMethod:isc.defineClass')}.  For\n example:\n <pre>\n    isc.defineClass(\"PaletteWindow\", \"Window\");\n    isc.PaletteWindow.addProperties({\n        showFooter:false,\n        ...\n    })\n </pre>",
        name:"skinning",
        seeAlso:[],
        type:"group"
    },
    "method:Menu.showSubmenu":{
        ref:"method:Menu.showSubmenu",
        flags:"A",
        description:" Show the submenu for the specified item, if it has one.\n <P>\n Normally triggered automatically by user interaction.\n\n",
        name:"showSubmenu",
        seeAlso:[],
        params:[
            {description:"the item in question, or it's index", optional:false, name:"item", 
             defaultValue:null,type:"MenuItem | number"}
        ],
        type:"method",
        definingClass:"class:Menu",
        groups:["visibility"]
    },
    "method:GridRenderer.rowOver":{
        ref:"method:GridRenderer.rowOver",
        flags:"A",
        description:" Called when the mouse pointer enters a row\n\n",
        name:"rowOver",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:ValuesManager.setDataSource":{
        ref:"method:ValuesManager.setDataSource",
        flags:"A",
        description:" Specifies a dataSource for this valuesManager.  This dataSource will then be used for\n validation and client-server flow methods.\n",
        name:"setDataSource",
        seeAlso:[],
        params:[
            {description:"Datasource object or identifier to bind to.", optional:false, 
             name:"dataSource",defaultValue:null, type:"string | DataSource"}
        ],
        type:"method",
        definingClass:"class:ValuesManager"
    },
    "attr:Slider.trackSrc":{
        ref:"attr:Slider.trackSrc",
        flags:"IRW",
        description:"The base filename for the slider track images.\n The filenames for the track icons are assembled from this base filename and the state of the\n slider, as follows:<br>\n Assume the trackSrc is set to <code>{baseName}.{extension}</code><br>\n The full set of images to be displayed is:<br>\n For horizontal sliders:\n <ul>\n <li><code>h{baseName}_start.{extension}</code>: start (left edge) of the track for a slider\n     that is enabled.\n <li><code>h{baseName}_stretch.{extension}</code>:  the track for an enabled slider; this may\n     be centered, tiled, or stretched.\n <li><code>h{baseName}_end.{extension}</code>:  end (right edge) of the track for a slider\n     that is enabled.\n <li><code>h{baseName}_off_start.{extension}</code>: start (left edge) of the track for a slider\n     that is disabled.\n <li><code>h{baseName}_off_stretch.{extension}</code>:  the track for a disabled slider; this\n     may be centered, tiled, or stretched.\n <li><code>h{baseName}_off_end.{extension}</code>:  end (right edge) of the track for a slider\n     that is disabled.\n </ul>\n For vertical sliders:\n <ul>\n <li><code>v{baseName}_start.{extension}</code>: start (bottom edge) of the track for a slider\n     that is enabled.\n <li><code>v{baseName}_stretch.{extension}</code>:  the track for an enabled slider; this may\n     be centered, tiled, or stretched.\n <li><code>v{baseName}_end.{extension}</code>:  end (top edge) of the track for a slider\n     that is enabled.\n <li><code>v{baseName}_off_start.{extension}</code>: start (bottom edge) of the track for a slider\n     that is disabled.\n <li><code>v{baseName}_off_stretch.{extension}</code>:  the track for a disabled slider; this\n     may be centered, tiled, or stretched.\n <li><code>v{baseName}_off_end.{extension}</code>:  end (top edge) of the track for a slider\n     that is disabled.\n </ul>",
        name:"trackSrc",
        seeAlso:[
            {ref:"attr:Slider.trackImageType", description:null}
        ],
        valueType:"String",
        defaultValue:"\"track.gif\"",
        type:"attr",
        definingClass:"class:Slider"
    },
    "type:TreeModelType":{
        ref:"type:TreeModelType",
        values:[
            {description:"In this model, each node has an ID unique across the whole tree and a parent ID that points to its parent.  The name of the unique ID property is can be specified\n via ${isc.DocUtils.linkForRef('attr:Tree.idField')} and the name of the parent ID property can be specified via\n ${isc.DocUtils.linkForRef('attr:Tree.parentIdField')}.  The initial set of nodes can be passed in as a list to\n ${isc.DocUtils.linkForRef('attr:Tree.data')} and also added as a list later via ${isc.DocUtils.linkForRef('method:Tree.linkNodes')}.\n Whether or not a given node is a folder is determined by the value of the property specified\n by ${isc.DocUtils.linkForRef('attr:Tree.isFolderProperty')}.\n <br><br>\n The \"parent\" modelType is best for integrating with relational storage (because nodes can\n map easily to rows in a table) and collections of Beans and is the model used for DataBound\n trees.", 
             value:"\"parent\""},
            {description:"In this model, nodes specify their children as a list of nodes.  The property that holdes the children nodes is determined by ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}.\n Nodes are not required to have an ID that is unique across the whole tree (in fact, no ID is\n required at all).  Node names (specified by the ${isc.DocUtils.linkForRef('attr:Tree.nameProperty')}, unique within\n their siblings, are optional but not required.  Whether or not a given node is a folder is\n determined by the presense of the children list (${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}).", 
             value:"\"children\""}
        ],
        description:null,
        name:"TreeModelType",
        seeAlso:[],
        type:"type"
    },
    "method:ListGrid.editComplete":{
        ref:"method:ListGrid.editComplete",
        flags:"",
        description:" Callback fired when inline edits have been successfully saved.\n <P>\n No default implementation.\n\n",
        name:"editComplete",
        seeAlso:[],
        params:[
            {description:"current index of the row that was saved", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"index of the column that was saved, if applicable", optional:false, 
             name:"colNum",defaultValue:null, type:"number"},
            {description:"new values that were saved", optional:false, name:"newValues", 
             defaultValue:null,type:"any"},
            {description:"old values before the save occurred", optional:false, name:"oldValues", 
             defaultValue:null,type:"any"},
            {description:"Event that led to the save", optional:false, name:"editCompletionEvent", 
             defaultValue:null,type:"editCompletionEvent"},
            {description:"for DataSource saves, DSResponse object returned", optional:true, 
             name:"dsResponse",defaultValue:null, type:"DSResponse"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:TreeNode.enabled":{
        ref:"attr:TreeNode.enabled",
        flags:"IR",
        description:"Affects the visual style and interactivity of the record.  If set to <code>false</code>\n the record (row in a ${isc.DocUtils.linkForRef('class:ListGrid')} or ${isc.DocUtils.linkForRef('class:TreeGrid')}) will not highlight when the\n mouse moves over it, nor will it respond to mouse clicks.",
        name:"enabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('disabledRows')}"],
        definingClass:"object:TreeNode"
    },
    "group:rects":{
        ref:"group:rects",
        refs:[],
        name:"rects",
        seeAlso:[],
        type:"group"
    },
    "method:CubeGrid.getColumnFacetValues":{
        ref:"method:CubeGrid.getColumnFacetValues",
        flags:"",
        description:" Return a ${isc.DocUtils.linkForRef('type:FacetValueMap','FacetValueMap')} indicating the facet values for a specific \n column in the grid\n",
        name:"getColumnFacetValues",
        seeAlso:[],
        params:[
            {description:"index of the column", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"facet values for the specified column. Returns null if the specified       column is not present in the grid.", 
         type:"FacetValueMap"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "classAttr:isc.itemEndIndent":{
        ref:"classAttr:isc.itemEndIndent",
        flags:"IRW",
        description:"Size, in pixels, of indentation of all member items relative to the end of\n the alignment axis. For instance, for left-aligned members, \n itemStartIndent specifies indentation for every item from the right side of the\n section stack.",
        name:"itemEndIndent",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"undefined",
        type:"attr",
        definingClass:"class:isc",
        groups:["layoutMember"]
    },
    "attr:Canvas.canHover":{
        ref:"attr:Canvas.canHover",
        flags:"IRW",
        description:"Will this Canvas fire hover events when the user hovers over it, or one of its children?",
        name:"canHover",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null},
            {ref:"method:Canvas.hover", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:Canvas.bringToFront":{
        ref:"method:Canvas.bringToFront",
        flags:"",
        description:" Puts this widget at the top of the stacking order, so it appears in front of all other\n widgets in the same parent.\n",
        name:"bringToFront",
        seeAlso:[],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('layer')}"],
        definingClass:"class:Canvas",
        groups:["zIndex"]
    },
    "classMethod:Page.moveTo":{
        ref:"classMethod:Page.moveTo",
        flags:"",
        description:"		Move the window to a specified top and left in screen coordinates.\n\n",
        name:"moveTo",
        seeAlso:[],
        params:[
            {description:"new left coordinate for window", optional:false, name:"left", 
             defaultValue:null,type:"number"},
            {description:"new top coordinate for window", optional:false, name:"top", defaultValue:null, 
             type:"number"}
        ],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "class:FileLoader":{
        methods:[],
        ref:"class:FileLoader",
        classAttrs:["classAttr:FileLoader.defaultModules", "classAttr:FileLoader.defaultSkin"],
        classMethods:["classMethod:FileLoader.cacheISC", "classMethod:FileLoader.loadISC", 
         "classMethod:FileLoader.loadJSFiles","classMethod:FileLoader.loadModules", "classMethod:FileLoader.cacheFiles", 
         "classMethod:FileLoader.cacheModules","classMethod:FileLoader.cacheImgStates", "classMethod:FileLoader.cacheStretchImgStates", 
         "classMethod:FileLoader.cacheEdgeImages","classMethod:FileLoader.cacheShadows"],
        treeLocation:["Optional Modules/Network Performance"],
        attrs:[],
        description:"This class enables background (deferred) loading and caching of JS, CSS and Image files.  It is\n designed to work standalone from the rest of the SmartClient framework to provide a lightweight\n caching and loading mechanism for SmartClient modules as well as user-built application\n modules/fragments.\n <p>\n The most common usage scenarios are:\n <ul>\n   <li> Caching JS, CSS, Image files in the browser in anticipation of a transition to a page\n   that requires these files.  For example, a plain HTML (non-SmartClient) login page or\n   landing page can begin caching SmartClient in the background while allowing the user\n   to login, or giving the user something to read.  Normally, loading SmartClient or other\n   large JavaScript files would block page loading and display.  By loading SmartClient in\n   the background only after a simple HTML landing page has loaded, you can completely\n   eliminate perceived download time associated with loading a rich UI application, making a\n   much larger difference in user experience than any difference in framework/application size.\n   <li> Loading a multi-phase UI.  In this scenario, an initial rendering of a page is done with\n   minimal data transfer to the browser.  Then JS, CSS, and Image files are fetched in the\n   background to provide richer UI components.  During this time the user can continue to normally\n   interact with the initial page.  Once loading is complete, the UI is updated with richer\n   components.\n </ul>\n\n The recommended usage pattern is to use the <code>loadISC</code> custom tag provided as part of\n the SmartClient SDK.  You can specify <code>cacheOnly=\"true\"</code> to loadISC to cache the\n SmartClient framework in the background or alternately <code>defer=\"true\"</code> to load the\n SmartClient framework and make it available in the current page.  You can specify the\n <code>onload</code> attribute of the tag to provide a JavaScript callback to your code that will\n be called when the framework loading is complete.\n <p>\n If you're not working in a JSP environment, you can use the\n ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')}/${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')} APIs to accomplish\n the same effect as the <code>loadISC</code> JSP tag.\n <p>\n Additional APIs are provided for performing dynamic caching and loading of other JS, CSS, and\n Image files to improve the performance of your application.  See below.\n <p>\n <b>You must set <code>window.isomorphicDir</code> before loading and using this module unless the\n default of '../isomorphic/' is accepable.  E.g. if your html file is in your toplevel webroot\n directory, then your HTML file should say (note the trailing slash):</b>\n <pre>\n &lt;SCRIPT&gt;window.isomorphicDir='isomorphic/'&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/modules/ISC_FileLoader.js&gt;&lt;/SCRIPT&gt;\n </pre>\n \n This module is usable independent of the rest of SmartClient - you can use it on pages that\n don't load any other modules.  In practice, the general pattern is to use this module on\n static HTML pages such as a login page to pre-cache SmartClient modules, application logic,\n skin files, and css so that once the user logs in, there's no latency to load the rich UI.\n <p>\n Note: You can also reference this class via the alias isc.FL",
        name:"FileLoader",
        seeAlso:[],
        type:"class",
        requiresModules:["NetworkPerformance"]
    },
    "attr:TimeItem.displayFormat":{
        ref:"attr:TimeItem.displayFormat",
        flags:"IRW",
        description:"What format should this item's time string be presented in?",
        name:"displayFormat",
        seeAlso:[],
        valueType:"timeFormatter",
        defaultValue:"\"toShort24HourTime\"",
        type:"attr",
        definingClass:"class:TimeItem"
    },
    "method:Class.Super":{
        ref:"method:Class.Super",
        flags:"",
        description:"\n	Call the SuperClass implementation of a particular method.  \n\n",
        name:"Super",
        seeAlso:[],
        params:[
            {description:"name of the superclass method to call", optional:false, name:"methodName", 
             defaultValue:null,type:"string"},
            {description:"native \"arguments\" object, or array of                                           arguments to pass to the Super call", 
             optional:false,name:"args", defaultValue:null, type:"arguments or Array"},
            {description:"native \"arguments\" object, required if an Array is                                  passed for the \"args\" parameter in lieue of the native\n                                  arguments object", 
             optional:true,name:"nativeArgs", defaultValue:null, type:"arguments"}
        ],
        returns:{description:"return value of the superclass call", type:"any"},
        type:"method",
        definingClass:"class:Class"
    },
    "attr:StatefulCanvas.showDownIcon":{
        ref:"attr:StatefulCanvas.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "attr:Scrollbar.startThumbOverlap":{
        ref:"attr:Scrollbar.startThumbOverlap",
        flags:"IRWA",
        description:"Number of pixels the thumb is allowed to overlap the buttons at the start of the track.\n Default prevents doubling of 1px borders.  Set higher to allow media that shows curved\n joins between the track button and ScrollThumb.",
        name:"startThumbOverlap",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "attr:Slider.maxValue":{
        ref:"attr:Slider.maxValue",
        flags:"IRW",
        description:"The maximum slider value. The slider value is equal to maxValue when the thumb is at the\n top or right of the slider (unless flipValues is true, in which case the maximum value\n is at the bottom/left of the slider)",
        name:"maxValue",
        seeAlso:[
            {ref:"attr:Slider.flipValues", description:null}
        ],
        valueType:"float",
        defaultValue:"100",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:Slider"
    },
    "method:DataSource.getFieldNames":{
        ref:"method:DataSource.getFieldNames",
        flags:"",
        description:" Retrieves the list of fields declared on this DataSource.\n\n",
        name:"getFieldNames",
        seeAlso:[],
        returns:{description:"names of all fields declared on this DataSource", type:"Array of String"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "classMethod:XMLTools.loadWSDL":{
        ref:"classMethod:XMLTools.loadWSDL",
        flags:"A",
        description:" Load a WSDL file and create an instance of WebService that allows invoking operations and\n binding DataSources to web service operations.\n <P>\n The created WebService object is available in the callback as the single parameter\n \"service\", or can retrieved via <code>WebService.get(serviceNamespace)</code>.\n <P>\n XML Schema present in the WSDL file will also will also be processed as described in\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}.\n <P>\n NOTE: unless you are building an application that dynamically contacts WSDL web services\n without prior knowledge, instead of calling loadWSDL(), you should either:\n <ul>\n <li> use the ${isc.DocUtils.linkForRef('group:loadWSDLTag')} tag to eliminate the need for an asynchronous\n download of a WSDL file as part of application startup, <b>OR</b>\n <li> use the \"WSDL\" tab in the Developer Console to obtain the WebService definition as a\n JavaScript file that can be retrieved via a normal HTML &lt;SCRIPT SRC=&gt; tag.  \n </ul>\n Platform notes:\n <ul>\n <li> loadWSDL() is not supported in Safari 2.0 (but is supported in Safari 3.0.3 and greater)\n However, you can use either approach mentioned above (loadWSDLTag or JavaScript file) with \n Safari pre 3.0.3.\n <li> if you are using a non-Java server, in order to obtain a JavaScript file representing a\n web service, you must run the Developer Console in the Java-based SmartClient SDK\n </ul>\n\n",
        name:"loadWSDL",
        seeAlso:[],
        params:[
            {description:"URL to load the WSDL file from", optional:false, name:"wsdlURL", 
             defaultValue:null,type:"URL"},
            {description:"signature is callback(service)", optional:false, name:"callback", 
             defaultValue:null,type:"Callback"}
        ],
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('WSDLDataSource')}"],
        definingClass:"class:XMLTools",
        groups:["xmlSchema"]
    },
    "type:KeyIdentifier":{
        ref:"type:KeyIdentifier",
        description:"Identifiers for keys pressed by the user used by various methods.<br>\n Valid <code>keyIdentifier</code>s can be either ${isc.DocUtils.linkForRef('type:KeyName')} strings, or objects.<br>\n If a <code>keyIdentifier</code> is specified as an object, it should have the following\n properties:<br>\n - <code>keyName</code>: name of the key<br>\n - <code>ctrlKey</code>: optional boolean - true if ctrl is down.<br>\n - <code>shiftKey</code>: optional boolean - true if shift is down.<br>\n - <code>altKey</code>: optional boolean - true if alt is down.",
        name:"KeyIdentifier",
        seeAlso:[
            {ref:"type:KeyName", description:null}
        ],
        type:"type"
    },
    "attr:DataSourceField.valueXPath":{
        ref:"attr:DataSourceField.valueXPath",
        flags:"IR",
        description:"XPath expression used to retrieve the field's value.\n <P>\n This XPath expression will be evaluated in the scope of the record objects selected by \n the ${isc.DocUtils.linkForRef('attr:DataSource.recordXPath')}.  For XML data \n (${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat:\"xml\"')}) this means a call to\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectString')} passing the selected XML element.  For JSON data\n (${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat:\"json\"')}), this means a call to \n ${isc.DocUtils.linkForRef('classMethod:XMLTools.selectObjects')} passing the selected JSON object.\n <P>\n In the absence of a <code>valueXPath</code>, for JSON data the value for the field will\n be the value of the same-named property in the selected object.  \n <P>\n For XML data, the value will be the attribute or subelement named after the field name\n For example, for a field \"author\" on a record element &lt;book&gt;, the following structures\n require no valueXPath:\n <pre>\n    &lt;book author=\"Mark Jones\"/&gt;\n\n    &lt;book&gt;\n        &lt;author&gt;Mark Jones&lt;/author&gt;\n    &lt;/book&gt;\n </pre>\n <p>\n To learn about XPath, try the following search:\n <a href=\"http://www.google.com/search?q=xpath+tutorial\" target=\"_blank\"\n >http://www.google.com/search?q=xpath+tutorial</a>\n <P>\n <B>Using valueXPath with the SmartClient server</B>\n <p>\n If you're using the SmartClient server to return data via the DSResponse object (or\n indirectly doing so using DataSource DMI), the valueXPath you specify on the DataSource\n fields will be applied to the data you return via the \n <a href='http://jakarta.apache.org/commons/jxpath/' onclick=\"window.open('http://jakarta.apache.org/commons/jxpath/');return false;\">JXPath</a> library.\n <P>\n If you are returning Java Beans as your DSResponse data, normally each dataSource field\n receives the value of the same named Java Bean property, that is, a field \"zipCode\" is\n populated by looking for \"getZipCode()\" on the objects passed as DSResponse data.  You can\n use <code>valueXPath</code> to retrieve properties from subobjects, so long as a chain of\n getter methods exists that corresponds to the valueXPath.  For example, a valueXPath of\n \"address/zipCode\" expects to call \"getAddress()\" on the bean(s) passed to\n DSResponse.setData(), followed by \"getZipCode()\" on whatever object \"getAddress()\" returns.\n <P>\n When you are saving data, the inbound DSRequest values, available as a Java Map, will use \n just dataSource field names as Map keys, not the valueXPath used to derive them.  However,\n to achieve bidirectional valueXPath binding, you can use the server-side method\n dataSource.setProperties() to use the valueXPath when setting properties on your server\n object model.  When applied as a setter, an XPath like \"address/zipCode\" attempts\n \"getAddress()\" followed by \"setZipCode()\" on the returned object.  JXPath also has some\n ability to auto-create intervening objects if they are missing, such as auto-creating an\n \"address\" subobject when applying \"address/zipCode\" as a valueXPath.\n <P>\n See the\n <a href='http://jakarta.apache.org/commons/jxpath/' onclick=\"window.open('http://jakarta.apache.org/commons/jxpath/');return false;\">JXPath</a> library documentation for\n complete details, including other types of server object models supported, such as\n server-side XML.",
        name:"valueXPath",
        seeAlso:["DataSource.setProperties() (Java API)", "DSResponse.setData() (Java API)"],
        valueType:"XPathExpression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('xpathBinding')}"],
        definingClass:"class:DataSourceField",
        groups:["clientDataIntegration"]
    },
    "attr:Snapbar.showGrip":{
        ref:"attr:Snapbar.showGrip",
        flags:"IRW",
        description:"Should we show a \"grip\" image floating above the center of this widget?",
        name:"showGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar",
        groups:["grip"]
    },
    "classMethod:Log.getPriority":{
        ref:"classMethod:Log.getPriority",
        flags:"",
        description:" Return the priority setting for a particular category.\n <P>\n If there is no priority setting specific to this category, <code>null</code> will be\n returned, NOT <code>Log.defaultPriority</code>.\n\n",
        name:"getPriority",
        seeAlso:[],
        params:[
            {description:"category name", optional:false, name:"category", defaultValue:null, 
             type:"String"},
            {description:"Optional class or instance to check for                                               specific log priority overrides", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"}
        ],
        returns:{description:"priority setting", type:"LogPriority"},
        type:"classMethod",
        definingClass:"class:Log"
    },
    "method:Date.toEuropeanShortDate":{
        ref:"method:Date.toEuropeanShortDate",
        flags:"",
        description:"			Return this date in the format: <code>DD/MM/YYYY</code>\n",
        name:"toEuropeanShortDate",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:ListGrid.booleanFalseImage":{
        ref:"attr:ListGrid.booleanFalseImage",
        flags:"IRWA",
        description:"Image to display for a false value in a boolean field. Default <code>null</code> value\n means no image will be displayed\n <P>\n To turn this off explicitly set ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} to true",
        name:"booleanFalseImage",
        seeAlso:[
            {ref:"attr:ListGrid.booleanTrueImage", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "method:Log.logIsEnabledFor":{
        ref:"method:Log.logIsEnabledFor",
        flags:"",
        description:" Check whether a message logged at the given priority would be visible in the log.\n <P>\n As with logDebug, category is defaulted to the current className.  Use this method to avoid\n putting together expensive log messages if they will never appear in the log.\n\n",
        name:"logIsEnabledFor",
        seeAlso:[],
        params:[
            {description:"priority level", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:Applet.extraHTML":{
        ref:"attr:Applet.extraHTML",
        flags:"IR",
        description:"Any additional HTML you want to throw into the tag that specifies the applet element.",
        name:"extraHTML",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Applet"
    },
    "method:ListGrid.getTotalRows":{
        ref:"method:ListGrid.getTotalRows",
        flags:"",
        description:" Return the total number of rows in the grid.\n <P>\n Note that, when creating new rows via inline editing, this can be more than the total number\n of rows in the dataset (that is, grid.data.getLength())\n",
        name:"getTotalRows",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:SpacerItem.width":{
        ref:"attr:SpacerItem.width",
        flags:"IRW",
        description:"default width for the spacer",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:SpacerItem",
        groups:["appearance"]
    },
    "method:DynamicForm.showFieldErrors":{
        ref:"method:DynamicForm.showFieldErrors",
        flags:"",
        description:" If this form has any outstanding validation errors for the field passed in, show them now.\n Called when field errors are set directly via ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')} / \n ${isc.DocUtils.linkForRef('method:DynamicForm.addFieldErrors')} / ${isc.DocUtils.linkForRef('method:DynamicForm.clearFieldErrors')}.<br>\n Default implementation simply falls through to ${isc.DocUtils.linkForRef('method:DynamicForm.showErrors')}.\n",
        name:"showFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to show errors for", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "attr:FormItem.textAlign":{
        ref:"attr:FormItem.textAlign",
        flags:"IRW",
        description:"Alignment of the text / content within this form item",
        name:"textAlign",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"Canvas.LEFT",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:TreeGrid.closeFolder":{
        ref:"method:TreeGrid.closeFolder",
        flags:"",
        description:" Closes a folder.\n\n",
        name:"closeFolder",
        seeAlso:[
            {ref:"method:TreeGrid.openFolder", description:null},
            {ref:"method:TreeGrid.folderClosed", description:null}
        ],
        params:[
            {description:"node to close", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:ListGrid.getTitleField":{
        ref:"method:ListGrid.getTitleField",
        flags:"",
        description:" Method to return the fieldName which represents the \"title\" for records in this\n ListGrid.<br>\n If this.titleField is explicitly specified it will always be used.\n Otherwise, default implementation will check ${isc.DocUtils.linkForRef('attr:DataSource.titleField')} for databound\n grids.<br>\n For non dataotherwise returns the first defined field name of <code>\"title\"</code>, \n <code>\"name\"</code>, or <code>\"id\"</code>. If we dont find any field-names that match these\n titles, the first field in the grid will be used instead.\n",
        name:"getTitleField",
        seeAlso:[],
        returns:{description:"fieldName for title field for this grid.", type:"string"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:OperationBinding.xmlNamespaces":{
        ref:"attr:OperationBinding.xmlNamespaces",
        flags:"IR",
        description:"Optional object declaring namespace prefixes for use in ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} and\n ${isc.DocUtils.linkForRef('attr:DataSourceField.valueXPath')} XPath expressions.\n <P>\n <code>xmlNamespaces</code> should be specified as a mapping from namespace prefix to\n namespace URI, for example:\n <pre>\n    xmlNamespaces : {\n        az : \"http://webservices.amazon.com/AWSECommerceService/2005-03-23\"\n    }\n </pre>\n By default, all namespaces declared on the document element are made available with the\n prefix used in the document itself.  For non-WSDL-described XML results, if there is a\n default namespace on the document element, it is made available with the special prefix\n \"default\".\n <P>\n For results of WSDL-described operations, the service namespace is available under the\n prefix \"service\", and the schema namespace of the top-most output element, if any, is\n available under the prefix \"schema\".  \"default\" will be the schema namespace if there is\n one, otherwise the service namespace.\n <P>\n For basic information on XML Namespaces and their use in XPath, try the following search:\n <a href=\"http://www.google.com/search?q=XPath+xml+namespaces\" target=\"_blank\"\n >http://www.google.com/search?q=XPath+xml+namespaces</a>",
        name:"xmlNamespaces",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('xmlYahooWebServices')}"],
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "method:TabSet.setTabTitle":{
        ref:"method:TabSet.setTabTitle",
        flags:"A",
        description:" Changes the title of a tab\n",
        name:"setTabTitle",
        seeAlso:[],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"Tab | number | ID"},
            {description:"new title", optional:false, name:"title", defaultValue:null, type:"HTML"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('titleChange')}"],
        definingClass:"class:TabSet"
    },
    "method:FormItem.hide":{
        ref:"method:FormItem.hide",
        flags:"I",
        description:" Hide this form item.\n <BR><BR>\n This will cause the form to redraw.  If this item had an item.showIf expression, it will\n be destroyed.\n",
        name:"hide",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem"
    },
    "method:Toolbar.itemDragResized":{
        ref:"method:Toolbar.itemDragResized",
        flags:"",
        description:" Observable, overrideable method - called when one of the Toolbar buttons is drag resized.\n\n",
        name:"itemDragResized",
        seeAlso:[],
        params:[
            {description:"the index of the item that was resized", optional:false, name:"itemNum", 
             defaultValue:null,type:"number"},
            {description:"the new size of the item", optional:false, name:"newSize", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Toolbar"
    },
    "attr:TreeGrid.showCustomIconDrop":{
        ref:"attr:TreeGrid.showCustomIconDrop",
        flags:"IRWA",
        description:"Should folder nodes showing custom icons (set via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconProperty')}),\n show drop state images when the user is drop-hovering over the folder.\n If true, the ${isc.DocUtils.linkForRef('attr:TreeGrid.dropIconSuffix')} will be appended to the image URL\n (so <code>\"customFolder.gif\"</code> might be replaced with \n <code>\"customFolder_drop.gif\"</code>).<br>\n Can be overridden at the node level via the ${isc.DocUtils.linkForRef('attr:TreeGrid.customIconDropProperty')} property.",
        name:"showCustomIconDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["treeIcons"]
    },
    "classAttr:ValidatorTypes.isBoolean":{
        ref:"classAttr:ValidatorTypes.isBoolean",
        flags:"IR",
        description:"Validation will fail if this field is non-empty and has a non-boolean value.",
        name:"isBoolean",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "classMethod:isc.getKeys":{
        ref:"classMethod:isc.getKeys",
        flags:"",
        description:"\n	Return all keys (property names) of a given object\n\n",
        name:"getKeys",
        seeAlso:[],
        params:[
            {description:"object to get properties from", optional:false, name:"object", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"String names of all properties.  NOTE: never null", type:"Array"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:TabSet.scrollerVSrc":{
        ref:"attr:TabSet.scrollerVSrc",
        flags:"IR",
        description:"If this TabSet is showing ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller','tab scroller buttons')}, and \n ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is true, this property governs the base\n URL for the tab bar back and forward scroller button images for vertical tab bars [IE for\n tab sets with ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} set to \"left\" or \"right\"].\n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:TabSet.symmetricScroller','symmetricScroller')} is false, \n ${isc.DocUtils.linkForRef('attr:TabSet.scrollerSrc')} will be used instead.\n <P>\n To get the path to the image to display, this base URL will be modified as follows:\n <ul>\n <li>If appropriate a state suffix of <code>\"Down\"</code> or <code>\"Disabled\"</code> will be\n     appended.</li>\n <li>A suffix of <code>\"forward\"</code> or <code>\"back\"</code> will be appended for the\n     forward or backward scrolling button.</li>\n </ul>\n For example - if the scrollerVSrc is set to <code>\"[SKIN]vscroll.gif\"</code>, the image\n displayed for the back-scroller button on a tabSet with <code>tabBarPosition</code> set to\n \"left\" and <code>symmetricScroller</code> set to true would be one of \n <code>\"[SKIN]vscroll_back.gif\"</code>, <code>\"[SKIN]vscroll_Down_back.gif\"</code>,\n and <code>\"[SKIN]vscroll_Disabled_back.gif\"</code>.\n <P>\n Note that for best results the media should be sized to match the scroller button sizes, \n determined by ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness')} and ${isc.DocUtils.linkForRef('attr:TabSet.scrollerButtonSize')}.",
        name:"scrollerVSrc",
        seeAlso:[
            {ref:"attr:TabSet.symmetricScroller", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]vscroll.gif\"",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "method:ListGridField.change":{
        ref:"method:ListGridField.change",
        flags:"",
        description:" If this field is editable, any ${isc.DocUtils.linkForRef('method:FormItem.change','change')} handler specified\n on the ListGridField will be passed onto the editors for this field.\n",
        name:"change",
        seeAlso:[
            {ref:"method:ListGridField.changed", description:null},
            {ref:"method:ListGrid.cellChanged", description:null}
        ],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the editor (form item) itself (also available as \"this\").                              Note that in addition to the standard FormItem APIs available\n                              on the editor, it also has:<br>\n                              - a pointer back to the containing listGrid \n                              [<code>item.grid</code>]<br>\n                              - the colNum being edited [<code>item.colNum</code>]<br>\n                              - the rowNum being edited [<code>item.rowNum</code>]", 
             optional:false,name:"item", defaultValue:null, type:"FormItem"},
            {description:"The new value of the form item", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"The previous value of the form item", optional:false, name:"oldValue", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:Applet.useTag":{
        ref:"attr:Applet.useTag",
        flags:"IR",
        values:[
            {description:"Use the &lt;applet&gt; tag.  Works on all browsers.", value:"\"applet\""},
            {description:"Use the &lt;object&gt; tag.  Works on IE.", value:"\"object\""}
        ],
        description:"Specifies the type of tag to use for the applet html.  See\n  <a href='http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html' onclick=\"window.open('http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html');return false;\">http://java.sun.com/j2se/1.4.2/docs/guide/plugin/developer_guide/using_tags.html</a> for a\n  discussion of different tags.",
        name:"useTag",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"applet\"",
        type:"attr",
        definingClass:"class:Applet"
    },
    "method:DynamicForm.getValuesAsCriteria":{
        ref:"method:DynamicForm.getValuesAsCriteria",
        flags:"",
        description:" Return search criteria based on the current set of values within this form.\n <p>\n The search criteria returned are essentialy the same as <code>form.getValues()</code>,\n except that empty values are omitted.  This is because a form field which is left blank in a\n search form means \"allow any value for this field\" and not \"this field must be blank\".\n <p>\n Examples of empty values include a blank text field or SelectItem with an empty selection.\n\n",
        name:"getValuesAsCriteria",
        seeAlso:[
            {ref:"method:ListGrid.fetchData", description:null},
            {ref:"type:Criteria", description:null}
        ],
        returns:{description:"Name:values pairs representing current filter criteria", type:"object"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:ListGridField.valueIconLeftPadding":{
        ref:"attr:ListGridField.valueIconLeftPadding",
        flags:"IRW",
        description:"How much padding should there be on the left of valueIcons for this field\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconLeftPadding')}",
        name:"valueIconLeftPadding",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "classAttr:RPCResponse.STATUS_SUCCESS":{
        ref:"classAttr:RPCResponse.STATUS_SUCCESS",
        flags:"R",
        description:"Indicates successful completion of the request.  This is the default status and is\n automatically used by the RPCResponse on the server unless you override it with\n setStatus().\n <br><br>\n See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}\n for more information.",
        name:"STATUS_SUCCESS",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"0",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "attr:ActiveXControl.params":{
        ref:"attr:ActiveXControl.params",
        flags:"IR",
        description:"A map of key/value pairs to pass to the Active X control as parameters.",
        name:"params",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ActiveXControl"
    },
    "attr:TabSet.leftEdgeSizes":{
        ref:"attr:TabSet.leftEdgeSizes",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeSizes</code>, \n <code>rightEdgeSizes</code>, <code>topEdgeSizes</code> and <code>bottomEdgeSizes</code> \n propertes allow the sizes of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"leftEdgeSizes",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:DataBoundComponent.addOperation":{
        ref:"attr:DataBoundComponent.addOperation",
        flags:"IRW",
        description:"Operation ID this component should use when performing add operations.",
        name:"addOperation",
        seeAlso:[
            {ref:"attr:DSRequest.operationId", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["operations"]
    },
    "attr:ImgProperties.name":{
        ref:"attr:ImgProperties.name",
        flags:"IRW",
        description:"Specifies the name of the image. This is an identifier unique to the canvas, and subsequent\n calls to <code>${isc.DocUtils.linkForRef('method:Canvas.getImage')}</code> and\n <code>${isc.DocUtils.linkForRef('method:Canvas.setImage')}</code> \n with this name will act on the image object created using this ImgProperties object.",
        name:"name",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "attr:Window.items":{
        ref:"attr:Window.items",
        flags:"IR",
        description:"The contents of the Window body. Can be specified three different ways:\n      <ul><li>an Array of Canvases that will become the children of the Window's body when it\n      is initialized; the canvases in this array should be created, but not drawn (autodraw:\n      false).\n      <li>a single canvas that will become a child of the Window body.\n      <li>a string that will be set as the body's contents.</ul>",
        name:"items",
        seeAlso:[
            {ref:"attr:Window.body", description:null}
        ],
        valueType:"Array of Canvas, Canvas or String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "group:focus":{
        ref:"group:focus",
        title:"Focus",
        refs:["method:DynamicForm.focusInItem", "method:FormItem.focusInItem", 
         "method:FormItem.blurItem","method:Canvas.focus", "method:Canvas.blur", "method:Canvas.setAccessKey", 
         "method:Canvas.setTabIndex","method:Canvas.focusChanged", "classAttr:Canvas.TAB_INDEX_FLOOR", 
         "attr:DynamicForm.autoFocus","attr:DynamicForm.selectOnFocus", "attr:DynamicForm.canFocus", "attr:FormItem.accessKey", 
         "attr:FormItem.tabIndex","attr:FormItem.globalTabIndex", "attr:TextItem.selectOnFocus", 
         "attr:TextAreaItem.selectOnFocus","attr:Canvas.canFocus", "attr:Canvas.tabIndex", "attr:Canvas.accessKey", 
         "attr:Window.canFocusInHeaderButtons"],
        description:"Focus is the ability to become the target of keyboard input events.\n <P>\n A widget normally receives focus by being clicked on or tabbed to.",
        name:"focus",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItem.hoverStyle":{
        ref:"attr:FormItem.hoverStyle",
        flags:"IRW",
        description:"Explict CSS Style for any hover shown for this item.",
        name:"hoverStyle",
        seeAlso:[
            {ref:"attr:DynamicForm.itemHoverStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:Label.iconAlign":{
        ref:"attr:Label.iconAlign",
        flags:"IR",
        description:"If this button is showing an icon should it be right or left aligned?",
        name:"iconAlign",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "attr:DateChooser.nextYearIconWidth":{
        ref:"attr:DateChooser.nextYearIconWidth",
        flags:"IRW",
        description:"Width of the icon for the next year button",
        name:"nextYearIconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"14",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:ListGridField.defaultValue":{
        ref:"attr:ListGridField.defaultValue",
        flags:"IRW",
        description:"If this field ${isc.DocUtils.linkForRef('attr:ListGridField.canEdit','can be edited')}, this property can be used to\n specify a default value for this field's editor when adding new rows to the grid.",
        name:"defaultValue",
        seeAlso:[
            {ref:"method:ListGrid.startEditingNew", description:null}
        ],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:RPCRequest.showPrompt":{
        ref:"attr:RPCRequest.showPrompt",
        flags:"IRW",
        description:"Overrides RPCManager.showPrompt for this request only.  If you're using queuing, note that\n if any of the requests in the queue specify showPrompt:true, then a prompt will be shown for\n the entire queue with the prompt text of the first request in the queue to specify a custom\n prompt if promptStyle is set to \"dialog\".  If promptStyle is set to \"cursor\" for the request\n that specified showPrompt: true, then the entire queue uses the \"cursor\" style for the\n prompt.",
        name:"showPrompt",
        seeAlso:[
            {ref:"classAttr:RPCManager.showPrompt", description:null}
        ],
        valueType:"boolean",
        defaultValue:"RPCManager.showPrompt",
        type:"attr",
        definingClass:"class:RPCRequest",
        groups:["rpcPrompt"]
    },
    "attr:Canvas.height":{
        flags:"IRW",
        getter:["getHeight"],
        type:"attr",
        ref:"attr:Canvas.height",
        description:"Size for this component's vertical dimension.\n <P>\n Can be a number of pixels, or a percentage like \"50%\". See documentation for\n ${isc.DocUtils.linkForRef('attr:Canvas.width')} for details on who percentage values are resolved actual size.\n <P>\n Note that if ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow')} is set to \"visible\", this size is a\n minimum, and the component may overflow to show all content and/or children.\n <P>\n If trying to establish a default height for a custom component, set\n ${isc.DocUtils.linkForRef('attr:Canvas.defaultHeight','defaultHeight')} instead.",
        name:"height",
        setter:["setHeight"],
        valueType:"Number or String",
        seeAlso:[],
        defaultValue:"null",
        groups:["sizing"],
        definingClass:"class:Canvas"
    },
    "attr:Slider.trackCapSize":{
        ref:"attr:Slider.trackCapSize",
        flags:"IRW",
        description:"The height of vertical slider start and end images, or width of horizontal slider start and\n end images.",
        name:"trackCapSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"6",
        type:"attr",
        definingClass:"class:Slider"
    },
    "classAttr:Dialog.ASK_TITLE":{
        ref:"classAttr:Dialog.ASK_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.ask')} method.\n Note that a custom title can be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"ASK_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Question\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:ListGrid.drawAheadRatio":{
        ref:"attr:ListGrid.drawAheadRatio",
        flags:"IRW",
        description:"How far should we render rows ahead of the currently visible area?  This is expressed as a\n ratio from viewport size to rendered area size.<br><br>\n \n Tweaking drawAheadRatio allows you to make tradeoffs between continuous scrolling speed vs\n initial render time and render time when scrolling by large amounts.<br><br>\n\n NOTE: Only applies when showAllRows is false.",
        name:"drawAheadRatio",
        seeAlso:[],
        valueType:"float",
        defaultValue:"1.3",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('databoundFetch')}"],
        definingClass:"class:ListGrid",
        groups:["performance"]
    },
    "method:ListGrid.getCellVAlign":{
        ref:"method:ListGrid.getCellVAlign",
        flags:"",
        description:" Return the vertical alignment for cell contents.\n Expected values are: 'top', 'center', or 'bottom'\n\n",
        name:"getCellVAlign",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null}
        ],
        params:[
            {description:"this cell's record", optional:false, name:"record", defaultValue:null, 
             type:"listgridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"Vertical alignment of cell contents: 'right', 'center', or 'left'", 
         type:"string"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:DataSource.filterData":{
        ref:"method:DataSource.filterData",
        flags:"",
        description:" Perform a \"fetch\" DataSource operation against this DataSource, sending search criteria\n and retrieving matching records.\n <P>\n This is identical to ${isc.DocUtils.linkForRef('method:DataSource.fetchData')} except that\n ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is set to \"substring\" to cause case insensitive\n substring matching (if the server respects this setting).\n\n",
        name:"filterData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on                                                       the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest Properties"}
        ],
        type:"method",
        definingClass:"class:DataSource",
        groups:["operations"]
    },
    "attr:DateItem.centuryThreshold":{
        ref:"attr:DateItem.centuryThreshold",
        flags:"IRW",
        description:"Only used if we're showing the date in a text field. When parsing a date, if the year\n is specified with only 2 digits and is less than the centuryThreshold, then the year will\n be assumed to be 20xx; otherwise it will be interpreted according to default browser\n behaviour, which will consider it to be 19xx.",
        name:"centuryThreshold",
        seeAlso:[],
        valueType:"number",
        defaultValue:"25",
        type:"attr",
        definingClass:"class:DateItem",
        groups:["appearance"]
    },
    "attr:ToolStripResizer.vSrc":{
        ref:"attr:ToolStripResizer.vSrc",
        flags:"IRW",
        description:"Image for resizer",
        name:"vSrc",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]resizer.png\"",
        type:"attr",
        definingClass:"class:ToolStripResizer"
    },
    "method:ListGrid.rowContextClick":{
        ref:"method:ListGrid.rowContextClick",
        flags:"",
        description:" Called when a row receives a contextclick event.\n",
        name:"rowContextClick",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('recordClicks')}"],
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:Selection.multipleSelected":{
        ref:"method:Selection.multipleSelected",
        flags:"",
        description:"	Whether multiple items are selected\n",
        name:"multipleSelected",
        seeAlso:[],
        returns:{description:"true == more than one item is selected								false == no items are selected, or only one item is selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:ListGrid.rowDoubleClick":{
        ref:"method:ListGrid.rowDoubleClick",
        flags:"A",
        description:" Event handler for when a body record is double-clicked.\n <P>\n Default implementation fires 'editCell' if appropriate, and handles firing\n 'recordDoubleClick' stringMethod if defined at the field or LG level (That method has a\n different signature from this one)\n\n",
        name:"rowDoubleClick",
        seeAlso:[
            {ref:"method:ListGrid.recordDoubleClick", description:null}
        ],
        params:[
            {description:"record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"index of the row where the click occurred", optional:false, name:"recordNum", 
             defaultValue:null,type:"number"},
            {description:"index of the col where the click occurred", optional:false, name:"fieldNum", 
             defaultValue:null,type:"number"},
            {description:"indicates whether this was a synthesized record                                              doubleclick in response to a keyboard event", 
             optional:true,name:"keyboardGenerated", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"false if first click not on same record; true otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "method:TreeGrid.folderContextClick":{
        ref:"method:TreeGrid.folderContextClick",
        flags:"",
        description:"\n This method is called when a context click occurs on a folder record.\n\n",
        name:"folderContextClick",
        seeAlso:[
            {ref:"method:TreeGrid.nodeContextClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which the contexclick occurred.", optional:false, 
             name:"viewer",defaultValue:null, type:"TreeGrid"},
            {description:"The folder (record) on which the contextclick occurred.", optional:false, 
             name:"folder",defaultValue:null, type:"TreeNode"},
            {description:"Index of the row where the contextclick occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:CellSelection.anySelected":{
        ref:"method:CellSelection.anySelected",
        flags:"",
        description:"			Is anything in the list selected?\n",
        name:"anySelected",
        seeAlso:[],
        returns:{description:"true == at least one item is selected								false == nothing at all is selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection", "selection"]
    },
    "attr:DetailViewer.separatorStyle":{
        ref:"attr:DetailViewer.separatorStyle",
        flags:"IRW",
        description:"CSS style for a separator",
        name:"separatorStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"detail\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "classMethod:Page.loadStyleSheet":{
        ref:"classMethod:Page.loadStyleSheet",
        flags:"",
        description:"		Load a styleSheet for this application.  \n\n		The styleSheetURL parameter can use any special directories, eg:<br>\n      &nbsp;&nbsp;<code>Page.loadStylesheet(\"[SKIN]/skin_styles.css\")</code><br>\n      or<br>\n      &nbsp;&nbsp;<code>Page.loadStylesheet(\"[APP]/app_styles.css\")</code>.\n      <P>\n		If you don't specify a special directory, the app directory\n			will be assumed.\n		<P>\n		Note:   If the document's ONLOAD handler has already fired, this\n				will have no effect.\n\n",
        name:"loadStyleSheet",
        seeAlso:[],
        params:[
            {description:"URL to the stylesheet.", optional:false, name:"styleSheetURL", 
             defaultValue:null,type:"URL"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["skins", "files", "images"]
    },
    "method:ValuesManager.getValidatedValues":{
        ref:"method:ValuesManager.getValidatedValues",
        flags:"",
        description:" Call ${isc.DocUtils.linkForRef('method:ValuesManager.validate')} to check for validation errors. If no errors are found,\n return the current values for this valuesManager, otherwise return null.\n",
        name:"getValidatedValues",
        seeAlso:[],
        returns:{description:"current values or null if validation failed.", type:"object|null"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:TabSet.tabs":{
        ref:"attr:TabSet.tabs",
        flags:"IRW",
        description:"An array of tab objects, specifying the title and pane contents of each tab in the\n TabSet.  When developing in JavaScript, tabs are specified as an array of object\n literals, not instances - see ${isc.DocUtils.linkForRef('object:Tab')}.\n <p>\n You can add and remove tabs after creating the TabSet by calling ${isc.DocUtils.linkForRef('method:TabSet.addTab')}",
        name:"tabs",
        seeAlso:[],
        valueType:"Array of Tab",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('tabsOrientation')}"],
        definingClass:"class:TabSet"
    },
    "attr:EdgedCanvas.edgeTop":{
        ref:"attr:EdgedCanvas.edgeTop",
        flags:"IR",
        description:"Height in pixels for top corners and edges.  Defaults to edgeSize when unset.",
        name:"edgeTop",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:Window.headerLabelDefaults":{
        ref:"attr:Window.headerLabelDefaults",
        flags:"IRWA",
        description:"This is an object literal property block specifying various properties of the header\n label that displays the ${isc.DocUtils.linkForRef('attr:Window.title')}.  Overrideable defaults are as follows:\n <ul>\n <li>styleName- defaults to <code>\"windowHeaderText\"</code> and specifies the css style\n that is used  to render the ${isc.DocUtils.linkForRef('attr:Window.title')} text.\n </ul>\n You can override the the above propertites by calling ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults')}.",
        name:"headerLabelDefaults",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "headerLabel"]
    },
    "type:listGridSelectedState":{
        ref:"type:listGridSelectedState",
        description:"An object containing the stored selection information for a listGrid.\n Note that this object is not intended to be interrogated directly, but may be stored \n (for example) as a blob on the server for state persistence across sessions.",
        name:"listGridSelectedState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "class:DataSourceField":{
        methods:["method:DataSourceField.getFieldValue"],
        ref:"class:DataSourceField",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding/DataSource"],
        attrs:["attr:DataSourceField.name", "attr:DataSourceField.type", "attr:DataSourceField.required", 
         "attr:DataSourceField.valueMap","attr:DataSourceField.validators", "attr:DataSourceField.length", 
         "attr:DataSourceField.valueXPath","attr:DataSourceField.title", "attr:DataSourceField.canEdit", 
         "attr:DataSourceField.editorType","attr:DataSourceField.hidden", "attr:DataSourceField.detail", 
         "attr:DataSourceField.primaryKey","attr:DataSourceField.foreignKey", "attr:DataSourceField.childrenProperty", 
         "attr:DataSourceField.rootValue","attr:DataSourceField.xmlAttribute", "attr:DataSourceField.multiple", 
         "attr:DataSourceField.propertiesOnly","attr:DataSourceField.inapplicable", "attr:DataSourceField.group"],
        description:"Metadata about a DataSourceField, including its type and validators.",
        name:"DataSourceField",
        seeAlso:[],
        type:"class"
    },
    "attr:ListGridField.filterEditorType":{
        ref:"attr:ListGridField.filterEditorType",
        flags:"IRWA",
        description:"If this ListGrid is showing a filter row, this property can be used to\n      specify the form item class to use for the filter form item associated with this \n      field\n      (Only used if this field is not canFilter:false).<br>\n      Note: If this is not specified, the edit-form item type may be derived from the\n      'editorType' property, typically inherited from datasource fields, or from the\n      'type' of the field (showing the appropriate form item for the data-type).",
        name:"filterEditorType",
        seeAlso:[],
        valueType:"FormItem className",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "method:Tree.move":{
        ref:"method:Tree.move",
        flags:"",
        description:"\n Moves the specified node to a new parent.\n\n",
        name:"move",
        seeAlso:[],
        params:[
            {description:"node to move", optional:false, name:"node", defaultValue:null, type:"TreeNode"},
            {description:"new parent to move the node to", optional:false, name:"newParent", 
             defaultValue:null,type:"TreeNode"},
            {description:"Position of the new node in the children list. If not	                                specified, the node will be added at the end of the list.", 
             optional:true,name:"position", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:DataSource.criteriaPolicy":{
        ref:"attr:DataSource.criteriaPolicy",
        flags:"IRWA",
        description:"Decides under what conditions the ${isc.DocUtils.linkForRef('class:ResultSet')} cache should be dropped when the\n ${isc.DocUtils.linkForRef('attr:ResultSet.criteria')} changes",
        name:"criteriaPolicy",
        seeAlso:[
            {ref:"method:DataSource.compareCriteria", description:null}
        ],
        valueType:"CriteriaPolicy",
        defaultValue:"\"dropOnShortening\"",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "attr:WebService.globalNamespaces":{
        ref:"attr:WebService.globalNamespaces",
        flags:"IRW",
        description:"Namespaces definitions to add to the root element of outbound XML messages sent to a web\n service, as a mapping from namespace prefix to namespace URI.\n <P>\n The default value is:\n <pre>\n   globalNamespaces : {\n      xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\n      xsd: \"http://www.w3.org/2001/XMLSchema\"\n   },\n </pre>\n This default value allows the use of the xsi:type and xsi:nil attributes without further\n declarations.\n <P>\n Note that some web services will only accept specific revisions of the XML Schema URI.\n If xsi-namespaced attributes seem to be ignored by an older webservice, try the URI\n \"http://www.w3.org/1999/XMLSchema-instance\" instead.",
        name:"globalNamespaces",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"...",
        type:"attr",
        definingClass:"class:WebService"
    },
    "method:Label.setContents":{
        ref:"method:Label.setContents",
        flags:"",
        description:" Changes the contents of a widget to newContents, an HTML string.\n <P>\n When ${isc.DocUtils.linkForRef('attr:Canvas.dynamicContents','dynamicContents')} is set, <code>setContents()</code> can\n also be called with no arguments to cause contents to be re-evaluated.\n\n",
        name:"setContents",
        seeAlso:[],
        params:[
            {description:"an HTML string to be set as the contents of this widget", optional:true, 
             name:"newContents",defaultValue:null, type:"string"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('setContents')}"],
        definingClass:"class:Label"
    },
    "method:DynamicForm.clearFieldErrors":{
        ref:"method:DynamicForm.clearFieldErrors",
        flags:"",
        description:" Clear any validation errors on the field passed in.\n",
        name:"clearFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to clear errors from", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"If true this method will fall through to ${isc.DocUtils.linkForRef('method:DynamicForm.showFieldErrors')}  to update the display", 
             optional:false,name:"show", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "method:Class.getID":{
        ref:"method:Class.getID",
        flags:"",
        description:"			Return the global identifier for this object.\n\n",
        name:"getID",
        seeAlso:[],
        returns:{description:"global identifier for this canvas", type:"string"},
        type:"method",
        definingClass:"class:Class"
    },
    "method:CubeGrid.saveEdits":{
        ref:"method:CubeGrid.saveEdits",
        flags:"A",
        description:"\n Validates and saves edits for some cell. If rowNum and colNum are not passed in, the current\n edit cell will be saved.\n <P>\n The 'callback' parameter provides a notification when the save attempt completes.\n Cases under which the callback will fire are:\n <ul><li>Save completed successfully</li>\n <li>No changes to the edited cell, so save not required</li>\n <li>Validation failure occurred on the client or on the server</li></ul>\n Note that if no rowNum/colNum were passed in and the editor is not showing for the cell,\n the callback will NOT fire - in this case, the method is a no-op.\n <P>\n Other, standard callbacks such as ${isc.DocUtils.linkForRef('method:ListGrid.editComplete','editComplete()')},\n ${isc.DocUtils.linkForRef('method:ListGrid.editFailed','editFailed()')} and ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged','cellChanged()')} will\n fire normally.\n <P>\n Note this method does not hide the inline editors if they are showing - to explicitly save \n and end editing, use the method 'endEditing()'\n\n",
        name:"saveEdits",
        seeAlso:[
            {ref:"method:ListGrid.endEditing", description:null}
        ],
        params:[
            {description:"Event used to complete cell editing.          Optional, and defaults to <code>\"programmatic\"</code>.  Can be used by the \n          <code>callback</code> method to perform custom actions such as navigation when the \n          save completes.", 
             optional:true,name:"editCompletionEvent", defaultValue:null, type:"EditCompletionEvent"},
            {description:"Callback to fire on completion of the saving process.                                    If no edits were made or client-side validation fails \n                                    the callback will be fired synchronously at the end of this\n                                    method.<br>\n                                    Takes the following parameters:\n                                    <br>- rowNum <i>(Number) edited row number</i>\n                                    <br>- colNum <i>(Number) edited column number</i>\n                                    <br>- editCompletionEvent <i>(EditCompletionEvent) event \n                                      passed in (defaults to <code>\"programmatic\"</code>)</i>\n                                    <br>- success <i>(boolean) false if the save was unable to\n                                      complete due to a validation failure or server-side \n                                      error.</i>", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"Which row should be saved. If unspecified the current edit row                            is saved by default. Note that if there is no current edit cell\n                            this method will no op.", 
             optional:true,name:"rowNum", defaultValue:null, type:"number"},
            {description:"Which row should be saved. If unspecified the current edit column                            is saved by default. Note that if there is no current edit cell\n                            this method will no op.", 
             optional:true,name:"colNum", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["editing"]
    },
    "type:ListGridEditEvent":{
        ref:"type:ListGridEditEvent",
        values:[
            {description:"A single mouse click triggers inline editing", value:"\"click\""},
            {description:"A double click triggers inline editing", value:"\"doubleClick\""},
            {description:"No mouse event will trigger editing.  Editing must be                      programmatically started via ${isc.DocUtils.linkForRef('method:ListGrid.startEditing')}\n                      (perhaps from an external button) or may be triggered by \n                      keyboard navigation if ${isc.DocUtils.linkForRef('attr:ListGrid.editOnFocus')} is set.", 
             value:"\"none\""}
        ],
        description:"Event that will trigger inline editing.",
        name:"ListGridEditEvent",
        seeAlso:[],
        type:"type",
        groups:["editing"]
    },
    "class:Selection":{
        methods:["method:Selection.isSelected", "method:Selection.anySelected", 
         "method:Selection.multipleSelected","method:Selection.getSelection", "method:Selection.getSelectedRecord", 
         "method:Selection.setSelected","method:Selection.select", "method:Selection.deselect", "method:Selection.selectSingle", 
         "method:Selection.selectList","method:Selection.deselectList", "method:Selection.selectAll", 
         "method:Selection.deselectAll","method:Selection.selectItem", "method:Selection.deselectItem", 
         "method:Selection.selectRange","method:Selection.deselectRange"],
        ref:"class:Selection",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Maintains a 'selected' subset of a List or Array of objects, such as records in a record\n set, or widgets in a selectable header.<br><br>\n\n Includes methods for selecting objects and checking which objects are selected, and also for\n selecting objects as a result of mouse events, including drag selection support.<br>\n The selection object is used automatically to handle selection APIs on ${isc.DocUtils.linkForRef('class:ListGrid')}\n and ${isc.DocUtils.linkForRef('class:TreeGrid')} instances.<br><br>",
        name:"Selection",
        seeAlso:[],
        type:"class"
    },
    "classMethod:isc.getKeyForValue":{
        ref:"classMethod:isc.getKeyForValue",
        flags:"",
        description:" Given a value and an object of <code>key:value</code> pairs, return the value that corresponds\n to that key.\n <P>\n If the key is not found, <code>defaultValue</code> will be returned if provided, otherwise the\n value will be returned.\n\n",
        name:"getKeyForValue",
        seeAlso:[],
        params:[
            {description:"value to look for", optional:false, name:"key", defaultValue:null, 
             type:"string or number"},
            {description:"object of key:value pairs", optional:false, name:"valueMap", 
             defaultValue:null,type:"object"},
            {description:"default key to return if value not found", optional:true, name:"defaultKey", 
             defaultValue:null,type:"any"}
        ],
        returns:{description:"returns first key in valueMap with value, or                                              defaultKey if value not found", 
         type:"any"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:FormItemIcon.src":{
        ref:"attr:FormItemIcon.src",
        flags:"IRW",
        description:"If set, this property determines this icon's image source.\n      If unset the form item's <code>defaultIconSrc</code> property will be used\n      instead.<br>\n      As with <code>defaultIconSrc</code> this URL will be modified by adding\n      \"_Over\" or \"_Disabled\" if appropriate to show the icons over or disabled state.",
        name:"src",
        seeAlso:[
            {ref:"attr:FormItem.defaultIconSrc", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('formIcons')}"],
        definingClass:"object:FormItemIcon",
        groups:["formIcons"]
    },
    "attr:Slider.flipValues":{
        ref:"attr:Slider.flipValues",
        flags:"IRW",
        description:"Specifies whether the value range of the slider should be flipped so that values increase as\n the thumb is moved down (for a vertical slider) or to the left (for a horizontal slider).",
        name:"flipValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:Canvas.getScrollbarSize":{
        ref:"method:Canvas.getScrollbarSize",
        flags:"A",
        description:"  Returns the thickness of this widget's scrollbars.<br>\n  For canvases showing custom scrollbars this is determined from <code>this.scrollbarSize</code>\n\n",
        name:"getScrollbarSize",
        seeAlso:[
            {ref:"attr:Canvas.scrollbarSize", description:null}
        ],
        returns:{description:"thickness of the scrollbars, in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:ListGridField.getGroupTitle":{
        ref:"method:ListGridField.getGroupTitle",
        flags:"",
        description:" Return the title of the group which the listGridField represents. Default title is \n the group value. \n\n",
        name:"getGroupTitle",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null},
            {ref:"method:ListGridField.getGroupValue", description:null}
        ],
        params:[
            {description:"the value from the group is created, the result of   ${isc.DocUtils.linkForRef('method:ListGridField.getGroupValue')}", 
             optional:false,name:"groupValue", defaultValue:null, type:"any"},
            {description:"the node in the grid containing the group.", optional:false, 
             name:"groupNode",defaultValue:null, type:"groupNode"},
            {description:"Field object for which to get group value", optional:false, name:"field", 
             defaultValue:null,type:"Object"},
            {description:"The name of the field", optional:false, name:"fieldName", defaultValue:null, 
             type:"String"},
            {description:"the ListGrid displaying the cell", optional:false, name:"grid", 
             defaultValue:null,type:"ListGrid"}
        ],
        returns:{description:"Group value to which this record belongs", type:"any"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('customGrouping')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "attr:SelectItem.hiliteOnFocus":{
        ref:"attr:SelectItem.hiliteOnFocus",
        deprecated:"As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} instead.",
        flags:"IRWA",
        description:"Should this SelectItem show a hilite when it recieves keyboard focus?",
        name:"hiliteOnFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "classAttr:ValidatorTypes.matchesField":{
        ref:"classAttr:ValidatorTypes.matchesField",
        flags:"IR",
        description:"Tests whether the value for this field matches the value of some other field.\n  The field to compare against is specified via the <code>otherField</code> property\n  on the validator object (should be set to a field name).<br>\n  Note this validator type is only supported for items being edited within a \n  DynamicForm - it cannot be applied to a ${isc.DocUtils.linkForRef('object:ListGridField','ListGrid field')}.",
        name:"matchesField",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        examples:["${isc.DocUtils.linkForExampleId('matchValue')}"],
        definingClass:"class:ValidatorTypes"
    },
    "attr:Tree.modelType":{
        ref:"attr:Tree.modelType",
        flags:"IRWA",
        description:"Selects the model used to construct the tree representation.  If the \"parent\" modelType is\n used, you can provide the initial parent-linked data set to the tree via the\n ${isc.DocUtils.linkForRef('attr:Tree.data')} attribute.  If the \"children\" modelType is used, you can provide the\n initial tree structure to the Tree via the ${isc.DocUtils.linkForRef('attr:Tree.root')} attribute.",
        name:"modelType",
        seeAlso:[
            {ref:"attr:Tree.data", description:null},
            {ref:"attr:Tree.root", description:null}
        ],
        valueType:"TreeModelType",
        defaultValue:"\"children\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('nodeTitles')}"],
        definingClass:"class:Tree"
    },
    "type:FieldType":{
        ref:"type:FieldType",
        values:[
            {description:"Generic text, e.g. <code>\"John Doe\"</code>. This is the default field type.                    Use <code>field.length</code> to set length.", 
             value:"\"text\""},
            {description:"A boolean value, e.g. <code>true</code>", value:"\"boolean\""},
            {description:"A whole number, e.g. <code>123</code>", value:"\"integer\""},
            {description:"A floating point (decimal) number, e.g. <code>1.23</code>", 
             value:"\"float\""},
            {description:"A date, including time of day. Represented on the client as a                    JavaScript <code>Date</code> object. See ${isc.DocUtils.linkForRef('class:Date')} for\n                    SmartClient extensions to the <code>Date</code> object.", 
             value:"\"date\""},
            {description:"A text value constrained to a set of legal values specified by the                    field's ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap','valueMap')}, as though an\n                    ${isc.DocUtils.linkForRef('classAttr:ValidatorTypes.isOneOf','isOneOf')} validator had been declared.", 
             value:"\"enum\""},
            {description:"An enum whose values are numeric.", value:"\"intEnum\""},
            {description:"If you are using the SmartClient SQL datasource connector, a                    <code>sequence</code> is a unique, increasing whole number, incremented\n                    whenever a new record is added. Otherwise, <code>sequence</code> behaves\n                    identically to <code>integer</code>. This type is typically used with\n                    <code>field.primaryKey</code> to auto-generate unique primary keys.", 
             value:"\"sequence\""},
            {description:"A string representing a well-formed URL.  Some components                    will render this as an HTML link (using an anchor tag for example).", 
             value:"\"link\""},
            {description:"A string representing a well-formed URL that points to an                    image.  Some components will render an IMG tag with the value of this field\n                    as the 'src' attribute to render the image.", 
             value:"\"image\""},
            {description:"Arbitrary binary data.  When this field type is present, three additional fields are automatically generated.  They are: &lt;fieldName&gt;_filename, &lt;fieldName&gt;_filesize, and\n &lt;fieldName&gt;_date_created where &lt;fieldName&gt; is the value of the <code>name</code>\n attribute of this field.  These fields are marked as\n ${isc.DocUtils.linkForRef('attr:DataSourceField.hidden')}<code>:true</code> to suppress their rendering by default.  You\n can show one or more of these fields by specifying the field with a <code>hidden:false</code>\n override in the fields array of the databound component.", 
             value:"\"binary\""},
            {description:"Binary data comprising an image.", value:"\"imageFile\""}
        ],
        description:"The types listed below are built-in types that ${isc.DocUtils.linkForRef('interface:DataBoundComponent','databound\n components')} understand and treat specially (using type-specific form controls, validators,\n formatters, sorting logic, etc).  \n <P>\n You can declare custom types via ${isc.DocUtils.linkForRef('class:SimpleType','SimpleType.create()')}, with settings that\n will influence DataBound components.  You can also create your own subclasses of databound\n components to add further custom, reusable behaviors based on field.type.\n <P>\n <code>field.type</code> can also be the ID of another ${isc.DocUtils.linkForRef('class:DataSource')}, which allows you to\n model nested structures such as XML documents (in fact, ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadXMLSchema')}\n models XML schema in this way).  Nested DataSource declarations affect how XML and JSON data\n is deserialized into JavaScript objects in the \n ${isc.DocUtils.linkForRef('group:clientDataIntegration','client-side integration')} pipeline, so that you can load\n complex XML documents and have them deserialized into a correctly typed JavaScript object\n model.\n <P>\n Note: to declared related but <i>separate</i> objects, as in an \"Account\" object that can be\n related to both a \"Contact\" object and \"Order\" objects, use\n ${isc.DocUtils.linkForRef('attr:DataSourceField.foreignKey')}, <b>not</b> a nested structure declaration.",
        name:"FieldType",
        seeAlso:[
            {ref:"type:ListGridFieldType", description:null},
            {ref:"type:FormItemType", description:null}
        ],
        type:"type"
    },
    "type:Direction":{
        ref:"type:Direction",
        values:[
            {description:"above", value:"Canvas.UP"},
            {description:"below", value:"Canvas.DOWN"},
            {description:"to the left of", value:"Canvas.LEFT"},
            {description:"to the right of", value:"Canvas.RIGHT"}
        ],
        description:null,
        name:"Direction",
        seeAlso:[],
        type:"type",
        groups:["appearance"]
    },
    "method:CubeGrid.facetLabelHoverHTML":{
        ref:"method:CubeGrid.facetLabelHoverHTML",
        flags:"",
        description:"\n      Get the HTML for the facet label hover.  Default implementation returns null.\n\n      <br><i>methodType</i> callback\n",
        name:"facetLabelHoverHTML",
        seeAlso:[],
        params:[
            {description:"ID for the facet", optional:false, name:"facetId", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "attr:Canvas.noDoubleClicks":{
        ref:"attr:Canvas.noDoubleClicks",
        flags:"IRWA",
        description:"If true, this canvas will recieve all mouse-clicks as single click events rather than\n doubleClicks.",
        name:"noDoubleClicks",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["events"]
    },
    "attr:ImgSplitbar.skinImgDir":{
        ref:"attr:ImgSplitbar.skinImgDir",
        flags:"IR",
        description:"Default directory for skin images (those defined by the class), relative to the\n Page-wide ${isc.DocUtils.linkForRef('classMethod:Page.getSkinDir','skinDir')}.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"images/SplitBar/\"",
        type:"attr",
        definingClass:"class:ImgSplitbar",
        groups:["images"]
    },
    "attr:Splitbar.vResizeCursor":{
        ref:"attr:Splitbar.vResizeCursor",
        flags:"IR",
        description:"Cursor to display if this Splitbar is to be used for vertical resize of widgets.",
        name:"vResizeCursor",
        seeAlso:[],
        valueType:"Cursor",
        defaultValue:"\"row-resize\"",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["cursor"]
    },
    "group:contentLoading":{
        ref:"group:contentLoading",
        refs:["method:ViewLoader.handleError", "method:HTMLFlow.setContentsURL", 
         "method:HTMLFlow.loadingContent","method:HTMLFlow.handleError", "method:HTMLFlow.transformHTML", 
         "method:HTMLFlow.contentLoaded","class:HTMLFlow", "attr:ViewLoader.httpMethod", "attr:HTMLFlow.contentsURL", 
         "attr:HTMLFlow.loadingMessage","attr:HTMLFlow.contentsURLParams", "attr:HTMLFlow.httpMethod", 
         "attr:HTMLFlow.contentsType","attr:HTMLFlow.evalScriptBlocks", "attr:HTMLFlow.captureSCComponents"],
        name:"contentLoading",
        seeAlso:[],
        type:"group"
    },
    "method:Array.intersect":{
        ref:"method:Array.intersect",
        flags:"",
        description:" Return the list of items that are in both this list and the passed-in list(s).\n\n",
        name:"intersect",
        seeAlso:[],
        params:[
            {description:"lists to intersect with", optional:false, name:"lists", defaultValue:null, 
             type:"all List arguments"}
        ],
        returns:{description:"intersection", type:"List"},
        type:"method",
        definingClass:"object:Array",
        groups:["arrayMath"]
    },
    "method:Array.setProperty":{
        ref:"method:Array.setProperty",
        flags:"",
        description:"	Set item[property] = value for each item in this array.\n",
        name:"setProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to set", optional:false, name:"property", 
             defaultValue:null,type:"string"},
            {description:"value to set to", optional:false, name:"value", defaultValue:null, type:"any"}
        ],
        type:"method",
        definingClass:"object:Array",
        groups:["iteration"]
    },
    "method:Canvas.scrollTo":{
        ref:"method:Canvas.scrollTo",
        flags:"",
        description:" Scrolls the content of the widget so that the origin (top-left corner) of the content\n is left pixels to the left and top pixels above the widget's top-left corner (but still\n clipped by the widget's dimensions).\n <p>\n This is guaranteed to be called whenever this Canvas is scrolled, whether scrolling is\n initiated programmatically, by custom scrollbars, or a by a native scrollbar.\n\n",
        name:"scrollTo",
        seeAlso:[],
        params:[
            {description:"the left coordinate", optional:true, name:"left", defaultValue:null, 
             type:"number"},
            {description:"the top coordiante", optional:true, name:"top", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "classMethod:Class.addProperties":{
        ref:"classMethod:Class.addProperties",
        flags:"",
        description:"\n	Add default properties and methods to all instances of this class.<br><br>\n\n	These properties can then be accessed as <code>myInstance.property</code>, \n  and methods can be called via <code>myInstance.methodName()</code>\n\n",
        name:"addProperties",
        seeAlso:[],
        params:[
            {description:"objects with properties to add (think named parameters).										all the properties of each argument will be applied\n										as instance-level property defaults.", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"object"}
        ],
        returns:{description:"the class after properties have been added to it", type:"object"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:ListGrid.hoverStyle":{
        ref:"attr:ListGrid.hoverStyle",
        flags:"IRWA",
        description:"Style to apply to hovers shown over this grid.",
        name:"hoverStyle",
        seeAlso:[
            {ref:"attr:ListGrid.showHover", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"gridHover\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["hovers"]
    },
    "method:Tree.closeAll":{
        ref:"method:Tree.closeAll",
        flags:"",
        description:" Close all nodes under a particular node\n\n",
        name:"closeAll",
        seeAlso:[],
        params:[
            {description:"node from which to close folders (if not specified, the root                              node is used)", 
             optional:true,name:"node", defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:ListGrid.groupByMaxRecords":{
        ref:"attr:ListGrid.groupByMaxRecords",
        flags:"IRW",
        description:"Maximum number of records to which a groupBy can be applied. If there are more records,\n grouping will not be available via the default header context menu, and calls to \n ${isc.DocUtils.linkForRef('method:ListGrid.groupBy')} will be ignored.",
        name:"groupByMaxRecords",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"Number",
        defaultValue:"1000",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:ToolbarItem.vertical":{
        ref:"attr:ToolbarItem.vertical",
        flags:"IRA",
        description:"Should the toolbar stack its buttons vertically or horizontally?",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ToolbarItem"
    },
    "class:isc":{
        methods:[],
        ref:"class:isc",
        classAttrs:["classAttr:isc.itemIndent", "classAttr:isc.itemStartIndent", "classAttr:isc.itemEndIndent"],
        classMethods:["classMethod:isc.getErrorsHTML", "classMethod:isc.getIconLeft", 
         "classMethod:isc.getIconTop","classMethod:isc.getIconRect", "classMethod:isc.getIconPageRect", "classMethod:isc.clone", 
         "classMethod:isc.logWarn","classMethod:isc.echo", "classMethod:isc.echoAll", "classMethod:isc.echoLeaf", 
         "classMethod:isc.logEcho","classMethod:isc.logEchoAll", "classMethod:isc.addProperties", "classMethod:isc.getKeys", 
         "classMethod:isc.getValues","classMethod:isc.sortObject", "classMethod:isc.sortObjectByProperties", 
         "classMethod:isc.addDefaults","classMethod:isc.propertyDefined", "classMethod:isc.defineClass", 
         "classMethod:isc.timeStamp","classMethod:isc.getValueForKey", "classMethod:isc.getKeyForValue", 
         "classMethod:isc.makeReverseMap","classMethod:isc.setAutoDraw", "classMethod:isc.showPrompt", "classMethod:isc.clearPrompt", 
         "classMethod:isc.warn","classMethod:isc.say", "classMethod:isc.ask", "classMethod:isc.confirm", 
         "classMethod:isc.askForValue","classMethod:isc.showLoginDialog"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"The <code>isc</code> object contains global methods and objects of the Isomorphic SmartClient\n framework.\n <P>\n When the ISC framework runs in \"simple names\" mode (the default), all ISC Classes and several\n global methods are installed as global variables, that is, properties of the browser's\n \"window\" object.  When simple names mode is disabled (called \"portal mode\"), the framework\n uses only the global variable: \"isc\" and global variables prefixed with \"isc_\".  Portal mode\n is intended for applications which must integrate with fairly arbitrary JavaScript code\n written by third-party developers, and/or third party JavaScript frameworks, where it is\n important that each framework stays within it's own namespace.\n <P>\n In portal mode, all references to ISC classes and global functions must be prefixed with\n \"isc.\", for example:<pre>\n \n      Canvas.create(addProperties({}, myDefaults))\n\n </pre>would become<pre>\n\n      isc.Canvas.create(isc.addProperties({}, myDefaults));\n\n </pre>\n Portal mode is enabled by setting <code>window.isc_useSimpleNames = false</code> <b>before</b>\n ISC is loaded.",
        name:"isc",
        seeAlso:[],
        type:"class"
    },
    "attr:Canvas.canAcceptDrop":{
        ref:"attr:Canvas.canAcceptDrop",
        flags:"IRWA",
        description:"Indicates that this object can receive dropped widgets (i.e. other widgets can be\n      dropped on top of it).",
        name:"canAcceptDrop",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragCreate')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:ListGrid.getFieldState":{
        ref:"method:ListGrid.getFieldState",
        flags:"",
        description:" Returns a snapshot of the current presentation of this listGrid's fields as \n a ${isc.DocUtils.linkForRef('type:listGridFieldState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setFieldState')} to reset this grid's fields to\n the current state.<br>\n Note that the information stored includes the current width and visibility of each of this \n grid's fields.\n",
        name:"getFieldState",
        seeAlso:[
            {ref:"method:ListGrid.setFieldState", description:null}
        ],
        returns:{description:"current state of this grid's fields.", type:"listGridFieldState"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "classMethod:History.getHistoryData":{
        ref:"classMethod:History.getHistoryData",
        flags:"",
        description:"\n Returns the data associated with the specified history id.\n\n",
        name:"getHistoryData",
        seeAlso:[],
        params:[
            {description:"The id for which to fetch history data.", optional:false, name:"id", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"The data associated with the specified history id.", type:"any"},
        type:"classMethod",
        definingClass:"class:History"
    },
    "attr:SelectItem.height":{
        ref:"attr:SelectItem.height",
        flags:"IRW",
        description:"Default height for select items is 19px.",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"19",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "method:Array.getLength":{
        ref:"method:Array.getLength",
        flags:"",
        description:" Return the number of items in this list\n\n",
        name:"getLength",
        seeAlso:[],
        returns:{description:"number of items in the list", type:"Number"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "type:DisplayNodeType":{
        ref:"type:DisplayNodeType",
        values:[
            {description:"operate on both folders and leaves", value:"null/unset"},
            {description:"operate on folders only, ignoring leaves", value:"\"folders\""},
            {description:"operate on leaves only, ignoring folders", value:"\"leaves\""}
        ],
        description:"Flag passed to functions as displayNodeType, telling the function whether it should work on\n folders, leaves or both at once.",
        name:"DisplayNodeType",
        seeAlso:[],
        type:"type",
        groups:["ancestry"]
    },
    "method:Tree.getParentPath":{
        ref:"method:Tree.getParentPath",
        flags:"",
        description:"\n Given a node, return the path to it's parent.  This works just like\n ${isc.DocUtils.linkForRef('method:Tree.getPath')} except the node itself is not reported as part of the path.\n\n",
        name:"getParentPath",
        seeAlso:[
            {ref:"method:Tree.getPath", description:null}
        ],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"path to the node's parent", type:"string"},
        type:"method",
        definingClass:"class:Tree"
    },
    "group:valueIcons":{
        ref:"group:valueIcons",
        refs:["method:FormItem.setValueIcons", "method:FormItem.getValueIcon", 
         "attr:FormItem.valueIcons","attr:FormItem.emptyValueIcon", "attr:FormItem.showValueIconOnly", 
         "attr:FormItem.suppressValueIcon","attr:FormItem.valueIconWidth", "attr:FormItem.valueIconHeight", 
         "attr:FormItem.valueIconSize","attr:FormItem.valueIconLeftPadding", "attr:FormItem.valueIconRightPadding", 
         "attr:FormItem.imageURLPrefix","attr:FormItem.imageURLSuffix", "attr:CheckboxItem.valueIconWidth", 
         "attr:CheckboxItem.valueIconHeight"],
        name:"valueIcons",
        seeAlso:[],
        type:"group"
    },
    "attr:CubeGrid.facetLabelHoverWidth":{
        ref:"attr:CubeGrid.facetLabelHoverWidth",
        flags:"IRWA",
        description:"If specified and <code>this.showHover</code> is true, this is the default width to apply\n to hover tips shown for facetLabels. If unset, hover canvas will be sized to \n <code>this.hoverWidth</code> if specified instead.",
        name:"facetLabelHoverWidth",
        seeAlso:[
            {ref:"attr:Canvas.hoverWidth", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:TreeGrid.filterData":{
        ref:"method:TreeGrid.filterData",
        flags:"",
        description:" Retrieves data that matches the provided criteria and displays the matching data in this\n component.\n <P>\n This method behaves exactly like ${isc.DocUtils.linkForRef('method:TreeGrid.fetchData')} except that\n ${isc.DocUtils.linkForRef('attr:DSRequest.textMatchStyle')} is automatically set to \"substring\" so that String-valued\n fields are matched by case-insensitive substring comparison.\n\n",
        name:"filterData",
        seeAlso:[],
        params:[
            {description:"Search criteria.                       If a ${isc.DocUtils.linkForRef('class:DynamicForm')} is passed in as this argument\n                      instead of a raw criteria object, will be derived by calling\n                      ${isc.DocUtils.linkForRef('method:DynamicForm.getValuesAsCriteria')}", 
             optional:true,name:"criteria", defaultValue:null, type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"for databound components only - optional                            additional properties to set on the DSRequest that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["dataBoundComponentMethods"]
    },
    "method:SectionStack.collapseSection":{
        ref:"method:SectionStack.collapseSection",
        flags:"",
        description:" \n Collapse a section or sections.  This action hides all the items assigned to the\n section.  Calling this method is equivalent to the user clicking on the SectionHeader of\n an expanded section.\n\n",
        name:"collapseSection",
        seeAlso:[
            {ref:"method:SectionStack.hideSection", description:null}
        ],
        params:[
            {description:"Section(s) to collapse.  For this parameter, you can pass the position \n                      of the section in the SectionStack, the ID of the section, or a\n                      List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"},
            {description:"callback to fire when the section has been collapsed", optional:true, 
             name:"callback",defaultValue:null, type:null}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"],
        definingClass:"class:SectionStack"
    },
    "attr:ListGridField.displayField":{
        ref:"attr:ListGridField.displayField",
        flags:"IRWA",
        description:"Specifies the ${isc.DocUtils.linkForRef('attr:ListGridField.optionDataSource')} field used to retrieve the display\n values that are to be mapped from the internal values specified by ${isc.DocUtils.linkForRef('attr:ListGridField.valueField')}.<br>\n If no <code>optionDataSource</code> is defined for the field, the cell will display\n the displayField value for the current record instead of the underlying value for\n this field. Note that if this field is editable this will also\n be applied to this field's editors.",
        name:"displayField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "attr:TreeGrid.dataSource":{
        ref:"attr:TreeGrid.dataSource",
        flags:"IRW",
        description:"The DataSource that this component should bind to for default fields and for performing\n ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')}.\n <P>\n Can be specified as either a DataSource instance or the String ID of a DataSource.",
        name:"dataSource",
        seeAlso:[],
        valueType:"DataSource or ID",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dataSourceFields')}"],
        definingClass:"class:TreeGrid",
        groups:["databinding"]
    },
    "attr:ImgButton.showDisabledIcon":{
        ref:"attr:ImgButton.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:ComboBoxItem.optionFilterContext":{
        ref:"attr:ComboBoxItem.optionFilterContext",
        flags:"IRA",
        description:"If this item has a specified <code>optionDataSource</code>, and this property is\n not null, this will be passed to the datasource as ${isc.DocUtils.linkForRef('class:RPCRequest')} properties when\n performing the filter operation on the dataSource to obtain the set of options for the\n list.",
        name:"optionFilterContext",
        seeAlso:[],
        valueType:"RPCRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "classMethod:isc.addProperties":{
        ref:"classMethod:isc.addProperties",
        flags:"",
        description:"\n Add all properties and methods from any number of objects to a destination object, \n overwriting properties in the destination object.\n <p>\n Common uses of <code>addProperties</code> include creating a shallow copy of an object:<pre>\n\n     isc.addProperties({}, someObject);\n\n </pre>Combining settings in order of precedence:<pre>\n\n     isc.addProperties({}, defaults, overrides, skinOverrides);\n\n </pre>\n <P>\n <b>NOTE</b>: do not use <code>addProperties</code> to add defaults to an ISC class.  Use\n <code>Class.addProperties()</code>, as in: <i>MyClassName</i><code>.addProperties()</code>.\n\n",
        name:"addProperties",
        seeAlso:[
            {ref:"method:Class.addProperties", description:null}
        ],
        params:[
            {description:"object to add properties to", optional:false, name:"destination", 
             defaultValue:null,type:"object"},
            {description:"objects to obtain properties from.  Properties of all 											arguments other than destination are applied in turn.", 
             optional:true,name:"(arguments 1-N)", defaultValue:null, type:"object"}
        ],
        returns:{description:"returns the destination object", type:"object"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:ButtonItem.buttonConstructor":{
        ref:"attr:ButtonItem.buttonConstructor",
        flags:"IRA",
        description:"Constructor class for the button.",
        name:"buttonConstructor",
        seeAlso:[],
        valueType:"Class",
        defaultValue:"AutoFitButton",
        type:"attr",
        definingClass:"class:ButtonItem"
    },
    "method:ValuesManager.valuesHaveChanged":{
        ref:"method:ValuesManager.valuesHaveChanged",
        flags:"A",
        description:"          Compares the current set of values with the values stored by the call to the\n          <code>rememberValues()</code> method. Returns true if the values have changed, and false\n          otherwise.\n",
        name:"valuesHaveChanged",
        seeAlso:[],
        returns:{description:"true if current values do not match remembered values", type:"boolean"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "classMethod:EventHandler.getTarget":{
        ref:"classMethod:EventHandler.getTarget",
        flags:"",
        description:" Return the canvas that is the target of the mouse event.\n Returns null if no canvas found.\n\n",
        name:"getTarget",
        seeAlso:[],
        returns:{description:"event target canvas", type:"Canvas"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "attr:DataSource.dropExtraFields":{
        ref:"attr:DataSource.dropExtraFields",
        flags:"IR",
        description:"Indicates that for any data being interpreted as DataSource records, only data that\n corresponds to declared fields should be retained; any extra data should be discarded.\n <P>\n For ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','JSON')} data, this means extra properties in selected\n objects are dropped.\n <P>\n By default, for DMI DSResponses, DSResponse.data is filtered on the server to just\n the set of fields defined on the DataSource.  This type of filtering can also be enabled\n for non-DMI DSResponses (see the overview in ${isc.DocUtils.linkForRef('class:DMI')}).  Setting this property to\n <code>false</code> disables this filtering for this DataSource only.  This setting\n overrides the configuration in <code>server.properties</code>.  This setting can\n be overridden by ${isc.DocUtils.linkForRef('attr:ServerObject.dropExtraFields')}.",
        name:"dropExtraFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "method:ImgButton.setDisabled":{
        ref:"method:ImgButton.setDisabled",
        flags:"",
        description:" Enable or disable this object\n",
        name:"setDisabled",
        seeAlso:[],
        params:[
            {description:"true if this widget is to be disabled", optional:false, name:"disabled", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["enable", "state"]
    },
    "attr:ListGrid.useAllDataSourceFields":{
        ref:"attr:ListGrid.useAllDataSourceFields",
        flags:"IRW",
        description:"If true, the set of fields given by the \"default binding\" (see \n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}) is used, with any fields specified in\n <code>component.fields</code> acting as overrides that can suppress or modify the\n display of individual fields, without having to list the entire set of fields that\n should be shown.\n <P>\n If <code>component.fields</code> contains fields that are not found in the DataSource,\n they will be shown after the most recently referred to DataSource field.  If the new\n fields appear first, they will be shown first.\n <P>\n ${isc.DocUtils.linkForExampleId('validationFieldBinding', 'This example')} shows a mixture of component\n fields and DataSource fields, and how they interact for validation.",
        name:"useAllDataSourceFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('validationFieldBinding')}"],
        definingClass:"class:ListGrid",
        groups:["databinding"]
    },
    "attr:Canvas.dragStartDistance":{
        ref:"attr:Canvas.dragStartDistance",
        flags:"IRWA",
        description:"Number of pixels the cursor needs to move before the EventHandler starts a drag operation.",
        name:"dragStartDistance",
        seeAlso:[],
        valueType:"number",
        defaultValue:"5",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:SectionStack.getSectionNumber":{
        ref:"method:SectionStack.getSectionNumber",
        flags:"",
        description:"\n Returns the position of the specified section in the SectionStack.  The numbering is\n zero-based.  \n\n",
        name:"getSectionNumber",
        seeAlso:[],
        params:[
            {description:"ID of a section for which you want to obtain the position.", optional:false, 
             name:"sectionID",defaultValue:null, type:"string"}
        ],
        returns:{description:"Position of the section in the SectionStack or -1 if the specified                      section is not a member of this SectionStack.", 
         type:"number"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:Facet.rollupValue":{
        ref:"attr:Facet.rollupValue",
        flags:"IR",
        description:"facetValueId of the rollup facetValue for this facet",
        name:"rollupValue",
        seeAlso:[],
        valueType:"String",
        defaultValue:"cubeGrid.rollupValue",
        type:"attr",
        definingClass:"class:Facet"
    },
    "attr:Canvas.parentElement":{
        ref:"attr:Canvas.parentElement",
        flags:"IRA",
        description:"This Canvas's immediate parent, if any.\n <BR>\n Can be initialized, but any subsequent manipulation should be via \n ${isc.DocUtils.linkForRef('method:Canvas.addChild','addChild()')} and ${isc.DocUtils.linkForRef('method:Canvas.removeChild','removeChild()')} calls\n on the parent.",
        name:"parentElement",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:ToolbarItem.buttonBaseStyle":{
        ref:"attr:ToolbarItem.buttonBaseStyle",
        flags:"IRW",
        description:"If specified this baseStyle will be applied to the buttons in this toolbar.",
        name:"buttonBaseStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["appearance"]
    },
    "classMethod:isc.getValueForKey":{
        ref:"classMethod:isc.getValueForKey",
        flags:"",
        description:" Given a key and an object of <code>key:value</code> pairs, return the value that corresponds to\n that key.\n <P>\n If the key is not found, <code>defaultValue</code> will be returned if provided, otherwise the\n key will be returned.\n\n",
        name:"getValueForKey",
        seeAlso:[],
        params:[
            {description:"key to look for", optional:false, name:"key", defaultValue:null, 
             type:"string or number"},
            {description:"object of key:value pairs", optional:false, name:"valueMap", 
             defaultValue:null,type:"object"},
            {description:"default value to return if key not found", optional:true, 
             name:"defaultValue",defaultValue:null, type:"any"}
        ],
        returns:{description:"returns value in valueMap under name key, or                                              defaultValue if key not found", 
         type:"any"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:TextAreaItem.wrap":{
        ref:"attr:TextAreaItem.wrap",
        flags:"IRW",
        description:"Text wrapping style.",
        name:"wrap",
        seeAlso:[],
        valueType:"TEXTAREA_WRAP",
        defaultValue:"TextAreaItem.VIRTUAL",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["appearance"]
    },
    "class:Validator":{
        methods:["method:Validator.condition"],
        ref:"class:Validator",
        classAttrs:["classAttr:Validator.notABoolean", "classAttr:Validator.notAString", 
         "classAttr:Validator.notAnInteger","classAttr:Validator.notADecimal", "classAttr:Validator.notADate", 
         "classAttr:Validator.mustBeLessThan","classAttr:Validator.mustBeGreaterThan", "classAttr:Validator.mustBeLaterThan", 
         "classAttr:Validator.mustBeEarlierThan","classAttr:Validator.mustBeShorterThan", "classAttr:Validator.mustBeLongerThan", 
         "classAttr:Validator.mustBeExactLength","classAttr:Validator.requiredField", "classAttr:Validator.notOneOf"],
        classMethods:["classMethod:Validator.addValidator", "classMethod:Validator.addValidators"],
        treeLocation:["Client Reference/Forms"],
        attrs:["attr:Validator.type", "attr:Validator.errorMessage", "attr:Validator.stopIfFalse", 
         "attr:Validator.clientOnly"],
        description:"A validator describes a check that should be performed on a value the user is trying to\n save.\n <p>\n Validators are specified for DataSource fields via the ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')}\n property.  Validators that need not be run on the server can also be specified for a\n specific ${isc.DocUtils.linkForRef('class:FormItem')} or ${isc.DocUtils.linkForRef('object:ListGridField')}.\n <p>\n ISC supports a powerful library of ${isc.DocUtils.linkForRef('class:ValidatorTypes')} which have identical behavior\n on both the client and the server.  \n <p> \n Beyond this, custom validators can be defined on the client and custom validation logic\n added on the server.  Note that the <code>regexp</code> and <code>mask</code> validator\n types are very flexible and can be used to perform virtually any kind of formatting check\n that doesn't involve some large external dataset.\n <p>\n Custom validators can be reused on the client by adding them to the global validator list,\n via the ${isc.DocUtils.linkForRef('classMethod:Validator.addValidator')} method.",
        name:"Validator",
        seeAlso:[
            {ref:"class:ValidatorTypes", description:null}
        ],
        type:"class"
    },
    "classMethod:Date.getInputFormat":{
        ref:"classMethod:Date.getInputFormat",
        flags:"",
        description:" Retrieves the the default format for strings being parsed into dates via \n <code>Date.parseInput()</code>\n",
        name:"getInputFormat",
        seeAlso:[
            {ref:"classMethod:Date.setInputFormat", description:null}
        ],
        type:"classMethod",
        definingClass:"class:Date"
    },
    "type:FormMethod":{
        ref:"type:FormMethod",
        values:[
            {description:"GET request -- URL encoding (~4K max)", value:"DynamicForm.GET"},
            {description:"POST request -- separate field encoding (no max)", value:"DynamicForm.POST"}
        ],
        description:"Form METHOD parameters - how the form fields are submitted to the server",
        name:"FormMethod",
        seeAlso:[],
        type:"type",
        groups:["submitting"]
    },
    "class:Slider":{
        methods:["method:Slider.setValue", "method:Slider.getValue", "method:Slider.valueChanged", 
         "method:Slider.valueIsChanging"],
        ref:"class:Slider",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:Slider.title", "attr:Slider.length", "attr:Slider.vertical", 
         "attr:Slider.thumbThickWidth","attr:Slider.thumbThinWidth", "attr:Slider.trackWidth", "attr:Slider.thumbSrc", 
         "attr:Slider.trackSrc","attr:Slider.trackCapSize", "attr:Slider.trackImageType", "attr:Slider.showTitle", 
         "attr:Slider.showRange","attr:Slider.showValue", "attr:Slider.labelWidth", "attr:Slider.labelHeight", 
         "attr:Slider.labelSpacing","attr:Slider.value", "attr:Slider.minValue", "attr:Slider.minValueLabel", 
         "attr:Slider.maxValue","attr:Slider.maxValueLabel", "attr:Slider.numValues", "attr:Slider.roundValues", 
         "attr:Slider.flipValues","attr:Slider.sliderTarget", "attr:Slider.canFocus", "attr:Slider.stepPercent", 
         "attr:Slider.animateThumb","attr:Slider.animateThumbTime", "attr:Slider.animateThumbInit"],
        description:"The Slider class implements a GUI slider widget allowing the user to select a numeric \n  value from within a range by dragging a visual indicicator up and down a track.\n	<p>\n  The slider will generate events as the user interacts with it and changes its value.\n  If slider.sliderTarget is specified, moving the slider thumb generates a custom\n	event named 'sliderMove', sent to the sliderTarget.\n  If a <code>sliderMove</code> handler stringMethod is defined on the target, it will be \n  fired when the slider is moved. The second parameter (available via the variable name\n  <code>eventInfo</code> if the handler is a string) is a pointer back to the slider.\n  <p>\n  The slider will also fire a <code>valueChanged()</code> method whenever its value is \n  changed.  This can be observed or overridden on the Slider instance to perform some action.",
        name:"Slider",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"]
    },
    "attr:Button.radioGroup":{
        ref:"attr:Button.radioGroup",
        flags:"IRWA",
        description:"String identifier for this canvas's mutually exclusive selection group.",
        name:"radioGroup",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonRadioToggle')}"],
        definingClass:"class:Button",
        groups:["state", "event handling"]
    },
    "classAttr:Validator.mustBeEarlierThan":{
        ref:"classAttr:Validator.mustBeEarlierThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>dateRange</code> type validator\n  returns false because the value passed in is less than the specified maximum date.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeEarlierThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be earlier than ${max}\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:ResultSet.neverDropUpdatedRows":{
        ref:"attr:ResultSet.neverDropUpdatedRows",
        flags:"IRA",
        description:"By default when a a row is returned by the server, the current ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria','filter\n criteria')} are applied to it, and it may disappear from the cache.\n <P>\n Set this flag to true to disable this behavior.",
        name:"neverDropUpdatedRows",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["cacheSync"]
    },
    "attr:Facet.summaryValue":{
        ref:"attr:Facet.summaryValue",
        flags:"IR",
        description:"Value for facet summary.",
        name:"summaryValue",
        seeAlso:[],
        valueType:"String",
        defaultValue:"cubeGrid.summaryValue",
        type:"attr",
        definingClass:"class:Facet"
    },
    "classMethod:Page.setIsomorphicDir":{
        ref:"classMethod:Page.setIsomorphicDir",
        flags:"",
        description:"		Specify the root directory for Isomorphic-supplied files.\n\n",
        name:"setIsomorphicDir",
        seeAlso:[],
        params:[
            {description:"New IsomorphicDir URL.", optional:true, name:"URL", defaultValue:null, 
             type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files"]
    },
    "group:animation":{
        ref:"group:animation",
        refs:["method:Canvas.animateMove", "method:Canvas.animateResize", "method:Canvas.animateRect", 
         "method:Canvas.animateFade","method:Canvas.animateScroll", "method:Canvas.animateShow", "method:Canvas.animateHide", 
         "attr:TreeGrid.animateFolders","attr:TreeGrid.animateFolderTime", "attr:TreeGrid.animateFolderSpeed", 
         "attr:TreeGrid.animateFolderEffect","attr:Slider.animateThumb", "attr:Slider.animateThumbTime", "attr:Slider.animateThumbInit", 
         "attr:Canvas.animateTime","attr:Canvas.animateAcceleration", "attr:Canvas.animateMoveTime", 
         "attr:Canvas.animateResizeTime","attr:Canvas.animateRectTime", "attr:Canvas.animateFadeTime", 
         "attr:Canvas.animateScrollTime","attr:Canvas.animateShowTime", "attr:Canvas.animateHideTime", 
         "attr:Canvas.animateMoveAcceleration","attr:Canvas.animateResizeAcceleration", "attr:Canvas.animateRectAcceleration", 
         "attr:Canvas.animateScrollAcceleration","attr:Canvas.animateShowAcceleration", "attr:Canvas.animateHideAcceleration", 
         "attr:Layout.animateMembers","attr:Layout.animateMemberTime", "attr:SectionStack.animateSections", 
         "attr:Window.animateMinimize","attr:Window.minimizeTime", "attr:Window.minimizeAcceleration"],
        name:"animation",
        seeAlso:[],
        type:"group"
    },
    "group:springIntegration":{
        ref:"group:springIntegration",
        title:"Integration with Spring",
        treeLocation:["Concepts"],
        refs:[],
        description:"<b>Overview</b>\n <P>\n The Spring framework has many different parts, from integration with Object Relational\n Mapping (ORM) and transaction management systems, to a Model View Controller (MVC)\n architecture.\n <P>\n If you are building a new application from scratch and/or you are trying to \n modernize the presentation layer of an existing application, most of Spring MVC is\n inapplicable in the ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient architecture')}.  Specifically,\n SmartClient renders <b>all</b> HTML on the client, and the server is responsible only for\n retrieving data and enforcing business rules.  This means that Spring's ModelAndView and all\n functionality related to retrieving and rendering Views is unnecessary in SmartClient.\n SmartClient only needs the Model, and provides methods to deliver that Model to SmartClient\n components (the server side method DSResponse.setData()).\n <P>\n However, Spring's DispatchServlet, Handler chain, and Controller architecture is applicable\n to SmartClient.  See \"Using Spring Controllers\" below.\n <P>\n <b>Existing Spring Application</b>\n <P>\n As discussed under the general ${isc.DocUtils.linkForRef('group:clientServerIntegration','server integration')}\n topic, integrating SmartClient into your application involves finding a way to provide data\n that fulfills the ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} sent by SmartClient components.\n <P>\n There are 2 approaches for integrating SmartClient into an existing Spring application:\n <ul>\n <li> <b>configure Spring to return XML or JSON responses</b>: create variants\n on existing Spring workflows that use a different type of View in order to output XML or\n JSON data instead of complete HTML pages.  The SmartClient ${isc.DocUtils.linkForRef('class:RestDataSource')} provides a\n standard \"REST\" XML or JSON-based protocol you can implement, or you can adapt generic\n ${isc.DocUtils.linkForRef('class:DataSource','DataSources')} to existing formats.\n <P>\n In some Spring applications, all existing Spring workflows can be made callable by\n SmartClient with a generic View class capable of serializing the Model to XML or JSON,\n combined with a Controller that always uses this View.  Consider the following Java\n anonymous class, which uses the SmartClient JSTranslater class to dump the entire \n Spring Model as a JSON response.\n <pre>\n  new View() {\n        public void render(Map model, HttpServletRequest request,\n                           HttpServletResponse response) throws IOException {\n                final ServletOutputStream outputStream = response.getOutputStream();\n                response.setContentType(\"application/x-javascript\");\n                outputStream.println(JSTranslater.get().toJS(model));\n                outputStream.close();\n        }\n        public String getContentType() {\n                return \"application/x-javascript\";\n        }\n  }\n </pre>\n <P>\n If you use this approach, you do not need to install the SmartClient server, and can\n ${isc.DocUtils.linkForRef('group:iscInstall','deploy')} SmartClient as simple web content (JS/media/HTML files).  If you\n are already familiar with how to generate XML from objects that typically appear in your\n Spring Models, this may be the easiest path.\n <P>\n <li> <b>call Spring beans via SmartClient DMI</b>: use SmartClient Direct Method Invocation\n (DMI) to map ${isc.DocUtils.linkForRef('class:DSRequest','DataSource requests')} to beans managed by Spring, via\n ${isc.DocUtils.linkForRef('attr:ServerObject.lookupStyle')}:\"spring\".   Return data to the browser by either simply\n returning it from your method, or via calling DSResponse.setData() (server-side method).  \n If, from a bean created by Spring, you can easily create the data you typically use to\n populate a Model in a ModelAndView, this may be the easiest path.\n </ul>\n <P>\n <b>Using Spring Controllers with SmartClient DMI</b>\n <P>\n You can create a Controller that invokes standard SmartClient server request processing,\n including DMI, like so:\n <pre>\n public class SmartClientRPCController extends AbstractController\n {\n     public ModelAndView handleRequest(HttpServletRequest request, \n                                       HttpServletResponse response)\n         throws Exception\n     {\n         // invoke SmartClient server standard request processing\n         com.isomorphic.rpc.RPCManager.processRequest(request, response);\n         return null; // avoid default rendering\n     }\n }\n </pre>\n This lets you use Spring's DispatchServlet, Handler chain and Controller architecture as a\n pre- and post-processing model wrapped around SmartClient DMI.",
        name:"springIntegration",
        seeAlso:[],
        type:"group"
    },
    "attr:TabSet.showTabPicker":{
        ref:"attr:TabSet.showTabPicker",
        flags:"IR",
        description:"If there is not enough space to display all the tab-buttons in this tabSet, should\n a drop-down \"picker\" be displayed to allow selection of tabs that are clipped?",
        name:"showTabPicker",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "classAttr:Dialog.YES_BUTTON_TITLE":{
        ref:"classAttr:Dialog.YES_BUTTON_TITLE",
        flags:"IRW",
        description:"Title for the <code>\"Yes\"</code> button.",
        name:"YES_BUTTON_TITLE",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        valueType:"HTML",
        defaultValue:"\"Yes\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "method:List.remove":{
        ref:"method:List.remove",
        flags:"",
        description:" Remove first instance of the passed object from this array, sliding other items around to\n fill gaps.\n\n",
        name:"remove",
        seeAlso:[],
        params:[
            {description:"item to remove", optional:false, name:"obj", defaultValue:null, type:"any"}
        ],
        returns:{description:"true if a matching object was found and removed, false if no matching object was found and the list remains unchanged.", 
         type:"boolean"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "method:TreeGrid.openFolder":{
        ref:"method:TreeGrid.openFolder",
        flags:"A",
        description:" Opens a folder.\n <p>\n Executed when a folder node receives a 'doubleClick' event. This handler must be\n specified as a function, whose single parameter is a reference to the relevant folder\n node in the tree's data.<br>\n See the ListGrid Widget Class for inherited recordClick and recordDoubleClick events.\n\n",
        name:"openFolder",
        seeAlso:[
            {ref:"method:TreeGrid.closeFolder", description:null},
            {ref:"method:TreeGrid.folderOpened", description:null},
            {ref:"class:ListGrid", description:null}
        ],
        params:[
            {description:"node to open", optional:false, name:"node", defaultValue:null, type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "attr:Menu.cellHeight":{
        ref:"attr:Menu.cellHeight",
        flags:"IRW",
        description:"The height of each item in the menu, in pixels.",
        name:"cellHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:Menu",
        groups:["sizing", "sizing"]
    },
    "attr:DynamicForm.itemHoverHeight":{
        ref:"attr:DynamicForm.itemHoverHeight",
        flags:"IRW",
        description:"A default height for hovers shown for items",
        name:"itemHoverHeight",
        seeAlso:[
            {ref:"attr:FormItem.hoverHeight", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "attr:Label.showDisabledIcon":{
        ref:"attr:Label.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "attr:DynamicForm.longTextEditorType":{
        ref:"attr:DynamicForm.longTextEditorType",
        flags:"IRW",
        description:"Name of the Form Item class to use for text fields which exceed the \n longTextEditorThreshold for this form.",
        name:"longTextEditorType",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"textArea\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["appearance"]
    },
    "attr:Canvas.dropTypes":{
        ref:"attr:Canvas.dropTypes",
        flags:"IRWA",
        description:"The \"type\" of thing(s) that can be dropped on this widget specified as a string or an\n array of strings (indicating multiple types). Leave this with the value null to indicate\n that this widget can accept anything dropped on it from the page.",
        name:"dropTypes",
        seeAlso:[
            {ref:"method:Canvas.willAcceptDrop", description:null},
            {ref:"attr:Canvas.dragType", description:null}
        ],
        valueType:"string | array of strings",
        defaultValue:"Canvas.ANYTHING",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:ImgButton.icon":{
        ref:"attr:ImgButton.icon",
        flags:"IR",
        description:"Optional icon to be shown with the button title text.  \n <P>\n Specify as the partial URL to an image, relative to the imgDir of this component.",
        name:"icon",
        setter:["setIcon"],
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "method:ValuesManager.editNewRecord":{
        ref:"method:ValuesManager.editNewRecord",
        flags:"",
        description:"\n Prepare to edit a new record by clearing the current set of values (or replacing them \n with initialValues if specified).\n <br>\n Subsequent calls to <code>saveData()</code> will use an <code>add</code> rather than\n an <code>update</code> operation.\n\n",
        name:"editNewRecord",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"initial set of values for the editor as a map of field names to their corresponding\n     values", 
             optional:true,name:"initialValues", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "attr:Chart.labelValues":{
        ref:"attr:Chart.labelValues",
        flags:"IR",
        description:"Whether to show labels on each individual value (bar, column or line point)",
        name:"labelValues",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"interface:Chart",
        groups:["chartAppearance"]
    },
    "attr:TabSet.scrollerButtonSize":{
        ref:"attr:TabSet.scrollerButtonSize",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} is true, this property governs the size of scroller\n buttons. Applied as the width of buttons if the tabBar is horizontal, or the height\n if tabBar is vertical. Note that the other dimension is determined by \n ${isc.DocUtils.linkForRef('attr:TabSet.tabBarThickness','this.tabBarThickness')}",
        name:"scrollerButtonSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "attr:Slider.showValue":{
        ref:"attr:Slider.showValue",
        flags:"IRW",
        description:"Indicates whether a label for the value of the slider should be displayed. The\n default position for this label is to the right of a horizontal slider, or below a vertical\n slider.",
        name:"showValue",
        seeAlso:[
            {ref:"attr:Slider.value", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider"
    },
    "classAttr:Dialog.WARN_TITLE":{
        ref:"classAttr:Dialog.WARN_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.warn')} method.\n Note that a custom title can be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"WARN_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Note\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:Img.imageWidth":{
        ref:"attr:Img.imageWidth",
        flags:"IR",
        description:"Explicit size for the image, for ${isc.DocUtils.linkForRef('attr:Img.imageType')} settings that would normally use the\n image's natural size (applies to ${isc.DocUtils.linkForRef('attr:Img.imageType')} \"center\" and \"normal\" only).",
        name:"imageWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Img"
    },
    "attr:MenuButton.menuButtonImageUp":{
        ref:"attr:MenuButton.menuButtonImageUp",
        flags:"IRWA",
        description:"Image for menu button indicating that the button expands a menu.  This image is shown\n for menus expanding up from the button.   Menu direction is controlled by\n ${isc.DocUtils.linkForRef('attr:MenuButton.showMenuBelow')}.",
        name:"menuButtonImageUp",
        seeAlso:[
            {ref:"attr:MenuButton.menuButtonImage", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]menu_button_up.gif\"",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "attr:SpacerItem.height":{
        ref:"attr:SpacerItem.height",
        flags:"IRW",
        description:"default height for the spacer",
        name:"height",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:SpacerItem",
        groups:["appearance"]
    },
    "attr:Tree.childrenProperty":{
        ref:"attr:Tree.childrenProperty",
        flags:"IRW",
        description:"For trees with the modelType \"children\", this property specifies the name of the property\n that contains the list of children for a node.",
        name:"childrenProperty",
        seeAlso:[
            {ref:"attr:Tree.modelType", description:null}
        ],
        valueType:"string",
        defaultValue:"\"children\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('childrenArrays')}"],
        definingClass:"class:Tree"
    },
    "method:ValuesManager.getValues":{
        ref:"method:ValuesManager.getValues",
        flags:"",
        description:"  Returns the current set of values for the values manager instance.  This includes the\n  values from any form managed by this manager, as well as any values explicitly applied\n  via ${isc.DocUtils.linkForRef('method:ValuesManager.setValues')}.\n",
        name:"getValues",
        seeAlso:[],
        returns:{description:"a map of the values for this manager", type:"object"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "method:Array.get":{
        ref:"method:Array.get",
        flags:"",
        description:" Return the item at a particular position\n",
        name:"get",
        seeAlso:[],
        params:[
            {description:"position of the element to get", optional:false, name:"pos", 
             defaultValue:null,type:"Number"}
        ],
        returns:{description:"whatever's at that position, undef if not found", type:"object"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:EdgedCanvas.edgeOffsetTop":{
        ref:"attr:EdgedCanvas.edgeOffsetTop",
        flags:"IRA",
        description:"Amount the contained Canvas should be offset from the top.  Defaults to the size for \n the top edge.  Set smaller to allow the contained Canvas to overlap the edge and \n corner media.",
        name:"edgeOffsetTop",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:DataSource.recordXPath":{
        ref:"attr:DataSource.recordXPath",
        flags:"IR",
        description:"See ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')}.  <code>recordXPath</code> can be specified\n directly on the DataSource for a simple read-only DataSource only capable of \"fetch\"\n operations.",
        name:"recordXPath",
        seeAlso:[],
        valueType:"XPathExpression",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('xmlDataSource')}", 
         "${isc.DocUtils.linkForExampleId('jsonXPath')}"],
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "attr:SectionItem.canCollapse":{
        ref:"attr:SectionItem.canCollapse",
        flags:"IR",
        description:"Whether this section header can be collapsed.  If set false, suppresses open/close state\n icon",
        name:"canCollapse",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SectionItem"
    },
    "attr:CubeGrid.padTitles":{
        ref:"attr:CubeGrid.padTitles",
        flags:"IRW",
        description:"Whether to pad titles so they aren't flush with header borders",
        name:"padTitles",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "method:ImgButton.addToRadioGroup":{
        ref:"method:ImgButton.addToRadioGroup",
        flags:"",
        description:" Add this widget to the specified mutually exclusive selection group with the ID\n passed in.\n Selecting this widget will then deselect any other StatefulCanvases with the same\n radioGroup ID.\n StatefulCanvases can belong to only one radioGroup, so this method will remove from \n any other radiogroup of which this button is already a member.\n",
        name:"addToRadioGroup",
        seeAlso:[],
        params:[
            {description:"- ID of the radiogroup to which this widget should be added", 
             optional:false,name:"groupID", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state", "event handling"]
    },
    "method:ListGrid.deselectAllRecords":{
        ref:"method:ListGrid.deselectAllRecords",
        flags:"",
        description:"\n  deselect all records\n\n      <br><i>methodType</i> action\n",
        name:"deselectAllRecords",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "group:debugging":{
        ref:"group:debugging",
        title:"Debugging",
        treeLocation:["Concepts"],
        refs:[],
        description:"<h4>Built-in Diagnostics</h4>\n <P>\n In any page in which ISC has been loaded, you have access to the Developer Console,\n which can be opened by entering the following URL into your browser from the running\n application:\n <pre>\n     javascript:isc.showConsole()</pre>\n Basic information on the features of the Developer Console can be found in the QuickStart\n Guide.  This topic focuses on use of the log system and related debugging facilities.\n <P>\n The Developer Console contains a \"Results\" pane that displays a list of diagnostic\n messages logged by the SmartClient framework. The \"Logging Preferences\" menu lets you\n enable and disable SmartClient's built-in diagnostics in several categories. Because\n important diagnostic messages may be logged at any time, you should have the Developer\n Console open whenever you are working with SmartClient (and you should bookmark the\n \"javascript:\" expression above to make this easier).\n <P>\n Log messages are of the format:\n <P>\n &nbsp;&nbsp;&nbsp;<i>timestamp</i>:<i>priority</i>:<i>category</i>:<i>message</i>\n <P>\n For example, the following log message:\n <pre>\n     11:59:25:806:INFO:Page:Page loading complete.</pre>\n Occured at 11:59:25 local time and 806 milliseconds.  It's priority was <code>INFO</code>,\n it occurred in the category <i>Page</i>, and the message is \"Page loading complete.\".\n <P>\n Each logging <i>category</i> has a <i>priority</i> associated with it.  If a message's\n priority is lower than the current priority for the category it is logged in, the\n message will be suppressed (will not appear in the \"Results\" pane).  \n <p>\n It is critical to be familiar with the diagnostic categories built-in to SmartClient - \n you will use them in most debugging sessions.  Open the Logging Preferences menu and select\n \"More..\" to see a list of diagnostic log categories.   Hover over each category name to\n see a description of what kind of messages are logged in the category.  \n <P>\n <h4>Debugging JavaScript Errors</h4>\n <P>\n Isomorphic recommends the FireFox browser as the primary development platform.  In FireFox,\n JavaScript errors are reported both in the SmartClient Developer Console and in the FireFox\n JavaScript console, which can be opened by entering the special\n url \"javascript:\" in the address bar.\n <P>\n Isomorphic currently recommends that every SmartClient developer install either the \n <a href='https://addons.mozilla.org/firefox/1815/' onclick=\"window.open('https://addons.mozilla.org/firefox/1815/');return false;\">Console2</a> or\n <a href='http://www.getfirebug.com/' onclick=\"window.open('http://www.getfirebug.com/');return false;\">Firebug</a> extensions for FireFox.  \"Console2\" simply\n replaces the default FireFox JavaScript console with a more functional console;\n Firebug aims to be a true debugger.  Both tools will typically load or identify the correct\n file and line number where a JS error occured.\n <P>\n In Internet Explorer, when JS errors occur, SmartClient is able to report full stack traces\n in the Developer Console.  This can be invaluable when your code triggers a JS error\n in the SmartClient libraries themselves, or when it is unclear how your code is being\n called.  Stack traces from Internet Explorer should <i>always</i> be included in issue\n reports sent to Isomorphic Software, if at all possible. \n <P>\n <h4>Inspecting application state</h4>\n <P>\n The \"Evaluate JS Expression\" area of the Results Pane in the Developer Console can be used\n to inspect the current state of a SmartClient application.  Any SmartClient or browser\n built-in API can be called from the \"Evaluate JS Expression\" area, and the results will\n be intelligently summarized (via ${isc.DocUtils.linkForRef('method:Log.echo')}).  For example, simply typing a\n component's ID and pressing the \"Eval JS\" button will give you a dump of it's current\n property values.  \n <P>\n Many, many SmartClient APIs can be usefully called while troubleshooting, eg, \n ${isc.DocUtils.linkForRef('attr:ListGrid.data')} is a ${isc.DocUtils.linkForRef('class:ResultSet')} when a grid is DataBound and \n ${isc.DocUtils.linkForRef('method:ResultSet.get')} can be called to inspect the current values on records.  In addition,\n new application code can be tried out, for example, you might repeatedly instantiate a new\n component, trying variants on the properties you could give it.\n <P>\n <b>Inspecting transient application state with logs</b>\n <P>\n Transient state, such as the values of local variables in a method that is crashing, can be\n sent to the Developer Console via using the ${isc.DocUtils.linkForRef('class:Log')} class.  For example, to dump the\n value of the local variable \"request\": \n <pre>\n     isc.logWarn(\"request is: \" + isc.echo(request));\n </pre>\n <P>\n It's a good idea to dump the values of local variables in any method that is crashing or\n behaving unexpectedly.\n <P>\n Note the use of ${isc.DocUtils.linkForRef('classMethod:isc.logWarn','logWarn()')} above: in typical debugging sessions, it's best\n to simply use <code>logWarn</code> method to output diagnostics to ensure your message will\n not be suppressed by log priority settings.\n <P>\n NOTE: never use the native <code>alert()</code> method to output diagnostics.  Among other\n issues, <code>alert()</code> can affect timing, masking or altering the behavior you were\n trying to debug.  SmartClient's logging system doesn't suffer from these problems and\n provides much more control.\n <P>\n <h4>Issue Reports</h4>\n <P>\n If you believe you've discovered a bug in SmartClient or you are having trouble using\n SmartClient APIs, you can report it at <a href='http://forums.smartclient.com/' onclick=\"window.open('http://forums.smartclient.com/');return false;\">http://forums.smartclient.com/</a>, or, if\n you have Enterprise Support, at the \n <a href='http://support.isomorphic.com/' onclick=\"window.open('http://support.isomorphic.com/');return false;\">Customer Support Extranet</a>.\n <P>\n <b>How quickly your issue is resolved is entirely up to you</b>.  If you follow the steps\n below and submit an appropriate issue report, you will generally receive a rapid solution\n from Isomorphic Support, regardless of what support level you have, because Isomorphic\n aggressively corrects bugs and legitimate usage issues.  If you skip steps you are likely to\n be directed back to this document and asked to submit a more complete issue report.\n <P>\n Before reporting an issue, ensure that you:\n <ul>\n <li> Have read the ${isc.DocUtils.linkForDocNode('QuickStartGuide', 'QuickStart Guide')} cover to\n cover.  Later chapters cover more advanced topics and provide links to further examples and\n reference.\n <li> Have searched the ${isc.DocUtils.linkForDocNode('FeatureExplorer', 'Feature Explorer')} for examples that show\n what you are trying to do\n <li> Have searched this reference, trying multiple searches using different, common and\n related terms for what you are trying to do (eg for search, try \"search\", \"filter\",\n \"criteria\", \"find\", \"match\", etc)\n <li> Have searched the public <a href='http://forums.smartclient.com' onclick=\"window.open('http://forums.smartclient.com');return false;\">forums</a>\n </ul>\n Always include:\n <ul>\n <li> A description of what you are trying to accomplish <b>from a user's perspective</b>.\n The best answers often point out a simpler approach.\n <li> The browser(s), operating system(s) and SmartClient version(s) you experience the error\n on (SmartClient version is available in the lower-left handle corner of the Developer\n Console)\n </ul>\n Then, include <b>either</b> a standalone test case (see below), <b>or</b>:\n <ul>\n <li> For JS errors, Stack traces from Firebug (for Firefox) or the Developer Console (for\n IE), as covered under \"Debugging JavaScript Errors\" above\n <li> Results of calling <code>echo()</code> on local variables or other application\n state you think is relevant (see \"Inspecting Application State\" above)\n <li> What server platform and ${isc.DocUtils.linkForRef('group:clientServerIntegration','databinding approach')} you\n are using, if applicable\n <li> contents of the SmartClient Developer Console \"Log messages\" area, with appropriate\n diagnostic categories set the DEBUG or INFO level (see \"Built-in Diagnostics\" above)\n <li> sample code and sample data\n </ul>\n <b>Preparing a standalone test case</b>\n <P>\n A standalone test case is one of:\n <ol>\n <li> a chunk of JavaScript code that can be executed from the \"Eval JS\" area of the\n Developer Console on some specified page within the unmodified SmartClient SDK,\n demonstrating your issue\n <li> an .html or .jsp file that can be dropped at a specified location into an unmodified\n SmartClient SDK and will run without changes, demonstrating your issue.\n <li> a .zip file that includes a standalone .html/.jsp file  as above, as well as\n dependencies required to make the test case runnable, such as XML datasets\n </ol>\n <P>\n Submitting a standalone test case removes any ambiguity as to whether there is a bug in\n SmartClient or a bug in your code, and eliminates the possibility of Isomorphic Support\n responding with a \"works for me\" result due to incomplete information.  Issues with verified\n test cases are routed directly to the engineer that authored the relevant SmartClient\n subsystem, often as the new highest priority task.  In addition, the process of preparing a\n test case very often allows you to solve the issue yourself.\n <P>\n There are two approaches to test case preparation:\n <ol>\n <li> Add code to an existing SmartClient example until you can reproduce the problem\n <li> Remove code from your application until it minimally shows the problem and runs standalone\n </ol>\n <P>\n For approach #1, find the nearest match to your use case in the\n ${isc.DocUtils.linkForDocNode('FeatureExplorer')} examples or in the other examples accessible from the Examples\n folder of the SDK, then try to minimally modify that example to demonstrate your issue.\n Feature Explorer examples are a particularly good starting point because you can simply copy\n the code from the Feature Explorer to the Eval JS area of the Developer Console and begin\n changing it, and if successful this yields a type #1 test case, the easiest for you to\n submit and most efficient for Isomorphic to work with.\n <P>\n For approach #2,\n <ol>\n <li> If a server is involved in initial page generation (eg a .jsp file), in most cases you\n can eliminate many server dependencies <b>and</b> create an easily modifiable starting point\n by using the browser's \"View Source\" feature to save a copy of the generated HTML output as\n an .html file in the same directory as the .jsp file that generated it.  Such a file will\n generally continue to function (all relative paths are still correct), and can be modified\n freely without the need to later revert changes to a .jsp.\n <li> Eliminate any code that isn't involved in the interaction.  Keep running the test case\n as you eliminate code to ensure you are still seeing the issue (you may solve it this way,\n or find key preconditions that you can report to Isomorphic)\n <li> For any issue that isn't cosmetic, revert to a default SmartClient skin\n <li> For any necessary RPC/DataSource interactions, spoof the interaction with one of these\n approaches:\n <ul>\n <li> switch any DataSources to one of the sample DataSources from the SDK (eg \"supplyItem\")\n if your issue can still be reproduced in this case.\n <li> create a small sample dataset in JavaScript directly in the .html file, and use a\n ${isc.DocUtils.linkForRef('attr:DataSource.clientOnly','clientOnly DataSource')} with that dataset.\n <li> capture server responses verbatim by setting the RPCManager log category to DEBUG, save\n the responses as flat files, and set ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} to point at them.\n <li> for RPCs, instead of calling the RPCManager, directly call your own callback function,\n passing a spoofed RPCResponse that includes just the fields your code depends upon\n </ul>\n <li> Finally, move your .html file into the stock SmartClient SDK along with any remaining\n dependencies and verify the problem can still be reproduced\n </ol>\n Having prepared the test case, combine it with the other required issue report information\n covered above, and submit it to the <a href='http://forums.smartclient.com/' onclick=\"window.open('http://forums.smartclient.com/');return false;\">forums</a>,\n or, if you have Enterprise Support, at the\n <a href='http://support.isomorphic.com/' onclick=\"window.open('http://support.isomorphic.com/');return false;\">Customer Support Extranet</a>.\n <P>\n <h4>Adding your own diagnostic categories</h4>\n <P>\n Calling <code>logWarn()</code> is fine for a log statement you plan to delete at the end of\n the debugging session.  However, many log statements have lasting value if you could enable\n or disable them only when you need the relevant diagnostics, like SmartClient's built-in\n diagnostic categories.  To do this, pick a priority level less than <code>WARN</code>\n (<code>INFO</code> or <code>DEBUG</code>), and call the corresponding method on the Log\n class (<code>logInfo()</code> or <code>logDebug()</code>), passing the category name as a\n second parameter.  For example:\n <pre>\n   isc.Log.logInfo(\"first record is: \" + \n                   isc.Log.echo(myGrid.data.get(0)), \n                  \"myGridLoading\");\n </pre>\n This message will no longer appear in the Results Pane by default, because its priority\n (<code>INFO</code>) is less than the default of <code>WARN</code>.  To see this message,\n open the Logging Preferences menu and pick \"More..\", then click the \"Add\" button, enter\n \"myGridLoading\" as the category name and set the priority to <code>INFO</code>.  The message\n will now appear next time it is logged.\n <P>\n Now you have a custom log category that you and other developers can use to debug your\n application, subsystem by subsystem.  These diagnostics will be available to you both in\n development and production environments.\n <P>\n As with SmartClient's built-in diagnostics, you may choose to log certain messages in your\n custom category at the <code>DEBUG</code> level and a lesser number of messages at the\n <code>INFO</code> level, to create different depths of diagnostic output.\n <P>\n <h4>Logging refinements</h4>\n <P>\n The core log methods (<code>logDebug()</code>, <code>logInfo()</code>,\n <code>logWarn()</code>) and the \"echo\" facilities (<code>echo()</code> and\n <code>echoAll()</code>) are available on every SmartClient component and Class.  Hence,\n in many cases, the special JavaScript value \"this\" will refer to an object that supports\n <code>logWarn()</code> et al.  For example:\n <pre>\n     Canvas.create({\n        ID:\"canvasExample\",\n        contents:\"Hello World!\",\n        click:\"this.logWarn('the Canvas is: ' + this.echo(this))\"\n     });\n </pre>\n The special value \"this\" is not always set to a SmartClient component, for example, in some\n kinds of callbacks (eg ${isc.DocUtils.linkForRef('method:ListGrid.fetchData','fetchData()')}).  When in doubt, use these\n methods via the Log class as <code>isc.Log.logWarn()</code>.\n <P>\n <b>Logging performance</b>\n <P>\n Because the log message is actually formed <i>before</i> the call to the log system, logs\n that are suppressed can still carry a performance penalty.  This is particularly true of\n logs that output a lot of data or occur frequently.  To avoid this penalty, you can check in\n advance whether a message will be suppressed using \n ${isc.DocUtils.linkForRef('method:Log.logIsDebugEnabled','isc.Log.logIsDebugEnabled()')} and\n ${isc.DocUtils.linkForRef('method:Log.logIsInfoEnabled','isc.Log.logIsInfoEnabled()')}.  For example:\n <pre>\n   if (isc.Log.logIsInfoEnabled(\"myGridLoading\")) {\n      isc.Log.logInfo(\"first record is: \" +\n                      isc.Log.echo(myGrid.data.get(0)),\n                      \"myGridLoading\");\n   }\n </pre>\n Generally, it is only important to do this for logs that will occur multiple times during a\n given user interaction (eg a mousedown or keypress) and/or that call <code>echo()</code> on\n objects with many properties.",
        name:"debugging",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.waitForSave":{
        ref:"attr:ListGrid.waitForSave",
        flags:"IRWA",
        description:"If this is an editable listGrid, this property determines whether the user will be\n able to dismiss the edit form, or navigate to another cell while the save is in \n process (before the asynchronous server response returns).",
        name:"waitForSave",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:parsing":{
        ref:"group:parsing",
        refs:[],
        name:"parsing",
        seeAlso:[],
        type:"group"
    },
    "attr:ResultSet.initialData":{
        ref:"attr:ResultSet.initialData",
        flags:"IA",
        description:"You can specify the initial set of data for the ResultSet using this property.\n This data will be considered cached meaning sorting and filtering can occur on\n the client (no need for server fetch).\n This cached data can be dropped via a call to ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')}.",
        name:"initialData",
        seeAlso:[],
        valueType:"Array of records",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching", "cacheSync"]
    },
    "method:Canvas.dragRepositionStop":{
        ref:"method:Canvas.dragRepositionStop",
        flags:"A",
        description:"\n Executed when the mouse button is released at the end of the drag. Your\n widget can use this opportunity to fire custom code based upon where the\n mouse button was released, etc. \n <p>\n Returning true from this handler will cause the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline if\n ${isc.DocUtils.linkForRef('attr:Canvas.dragAppearance')} is set to \"outline\") to be left in its current\n location. Returning false from this handler will cause it to snap back to its\n original location.\n\n",
        name:"dragRepositionStop",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to snap the ${isc.DocUtils.linkForRef('attr:Canvas.dragTarget')} (or outline) back to its                   original location or true to leave it at the current cursor position.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:Window.minimizeTime":{
        ref:"attr:Window.minimizeTime",
        flags:"IRWA",
        description:"If this window is minimizeable, and animateMinimize is true, what should the duration of \n the minize / maximize be (in ms)? If unset defaults to <code>canvas.animationTime</code>.",
        name:"minimizeTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('windowMinimize')}"],
        definingClass:"class:Window",
        groups:["appearance", "header", "animation"]
    },
    "attr:ListGridField.width":{
        ref:"attr:ListGridField.width",
        flags:"IRW",
        description:"The width of this field, specified as either an absolute number of pixels,\n  a percentage of the remaining space, or \"*\" to allocate an equal portion of the\n  remaining space. <br>\n  ListGrid field widths may also be set when the fields are instantiated via the \n  listGrid.setFields() method by passing an array of numbers (absolute pixel sizes only) \n  as the second parameter",
        name:"width",
        seeAlso:[],
        valueType:"number|string",
        defaultValue:"\"*\"",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "attr:Window.modalMaskStyle":{
        ref:"attr:Window.modalMaskStyle",
        flags:"IR",
        description:"Specifies the CSS style for the modal mask.",
        name:"modalMaskStyle",
        seeAlso:[
            {ref:"attr:Window.modalMask", description:null}
        ],
        valueType:"string",
        defaultValue:"\"modalMask\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["modal", "appearance"]
    },
    "group:hibernateIntegration":{
        ref:"group:hibernateIntegration",
        title:"Integration with Hibernate",
        treeLocation:["Concepts"],
        refs:[],
        description:"SmartClient can integrate with Hibernate in two main ways:\n <ul>\n <li> With pre-existing Hibernate configuration and Java beans, SmartClient\n server-side DSRequests can be transformed into Hibernate <code>Criteria</code> objects,\n and results returned via a SmartClient DSResponse.  \n <li> SmartClient can drive Hibernate as a storage layer only, automatically generating\n Hibernate configuration from a SmartClient DataSource file (<i>dataSourceID</i>.ds.xml).  In\n this case, you do not write a Java bean; Hibernate's beanless \n <a href='http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#persistent-classes-dynamicmodels' onclick=\"window.open('http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#persistent-classes-dynamicmodels');return false;\">\"dynamic model\"</a>\n mode is used.  This is enabled via ${isc.DocUtils.linkForRef('attr:DataSource.serverType')}:\"hibernate\".\n </ul>\n <P>\n <b>Mapping DSRequest/DSResponse to Hibernate</b>\n <P>\n This integration strategy uses the server-side Java APIs described in\n ${isc.DocUtils.linkForRef('group:serverDataIntegration')}.  Two complete examples of Hibernate integration are\n provided in the SDK, one using ${isc.DocUtils.linkForRef('class:DMI')} and one using ${isc.DocUtils.linkForRef('class:RPCManager')} dispatch.  Both\n are accessible from the SDK Explorer as Examples->Server Integration, and both include\n sample Hibernate configuration as well as a sample UI capable of loading and saving data.\n <ul>\n <li>\n <a href='/examples/server_integration/index.html#customDataSourceIntegrationHibernate' onclick=\"window.open('/examples/server_integration/index.html#customDataSourceIntegrationHibernate');return false;\">\"Custom DataSource Integration with Hibernate\"</a> \n shows how to create a .jsp that uses RPCManager dispatch to implement all four DataSource\n request ${isc.DocUtils.linkForRef('attr:DSRequest.operationType')}s via Hibernate for a sample bean.\n <li>\n <a href='/examples/server_integration/index.html#springDSHiberateDMI' onclick=\"window.open('/examples/server_integration/index.html#springDSHiberateDMI');return false;\">\"Spring DataSource Integration using DMI to Hibernate\"</a>\n shows how to use SmartClient Direct Method Invocation (${isc.DocUtils.linkForRef('class:DMI')}) to implement all four\n DataSource operations with Hibernate.  This particular example uses\n ${isc.DocUtils.linkForRef('group:springIntegration','Spring')}-based lookup of the target for DMI, however, the same\n approach will work without Spring - see other DMI examples on the same page for non-Spring\n methods of DMI target lookup.\n </ul>\n As discussed under ${isc.DocUtils.linkForRef('class:DMI')}, whether to use DMI or RPCManager dispatch is largely a matter\n of preference, however if you are already using Spring, a DMI-based approach is probably\n a better fit.\n <P>\n <b>serverType:\"hibernate\"</b>\n <P>\n As with DataSources using SmartClient's built-in ${isc.DocUtils.linkForRef('group:sqlDataSource','SQL engine')}, you\n need only ${isc.DocUtils.linkForRef('group:dataSourceDeclaration','create a DataSource')} in XML format - no Java\n classes or other configuration are required.  The ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')}'s\n \"Import DataSources\" section can be used to import test data into serverType:\"hibernate\"\n DataSources in the same manner as SQLDataSources.",
        name:"hibernateIntegration",
        seeAlso:[],
        type:"group"
    },
    "type:AutoChild":{
        ref:"type:AutoChild",
        description:"An autoChild is an automatically generated subcomponent that a component creates to\n handle part of its presentation or functionality.\n <P>\n An example is the Window component and its subcomponent the \"header\".\n <P>\n AutoChildren support a standard set of properties that can be used to customize or skin\n them.  The names of these properties are derived from the name of the autoChild itself.\n These properties will generally not be separately documented for every autoChild unless\n there are special usage instructions - the existance of the properties is implied\n whenever you see an autoChild documented.\n <P>\n The properties are:\n <dl>\n <dt> <b>\"show\" + name</b> (eg showHeader)\n <dd> Controls whether this autoChild should be created and shown at all.  Note that the\n first letter of the autoChild name is uppercased for this property (\"header\" -> \"Header\").\n\n <dt> <b>name + \"Properties\"</b> (eg headerProperties)\n <dd> Properties to apply to the autoChild created by this particular instance of the\n parent component.  For example:\n <pre>\n        isc.Window.create({\n            headerProperties: { layoutMargin : 10 }\n        });\n </pre>\n Would apply a ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin','layoutMargin')} to the header of the Window,\n increasing the empty space around the subcomponents of the header (buttons, title label,\n etc).\n <P>\n Generally, *Properties is null.  <b>Do not</b> use the *Properties mechanism for\n skinning.  See below. \n\n <dt> <b>name + \"Defaults\"</b> (eg headerDefaults)\n <dd> Defaults that will be applied to the autoChild in every instance of the parent\n component.  *Defaults is used for skinning.  This property should never be set when\n creating an instance of the parent component, as it will generally wipe out defaults\n required for the component's operation.  Use ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults')}\n to alter defaults instead, generally as part of a custom skin and/or custom component\n creation.\n\n <dt> <b>name + \"Constructor\"</b> (eg headerConstructor)\n <dd> SmartClient Class of the component to be created.  Extremely advanced, this\n property should generally only be used when there is documentation encouraging you to do\n so.\n </dl>\n Note that an autoChild need not be a direct child of the creating component, for\n example, the ${isc.DocUtils.linkForRef('attr:Window.minimizeButton','minimizeButton')} of the Window is also an\n autoChild, even though it is actually located within the window header.\n <P>\n <h4>Skinning AutoChildren</h4>\n <P>\n Skinning autoChildren, done via ${isc.DocUtils.linkForRef('classMethod:Class.changeDefaults','changeDefaults()')}, is done\n for two purposes:\n <ul>\n <li> Changing the default appearance or behavior of a component, for example, making all\n Window headers shorter\n <li> Creating a customized variation of an existing component <i>while retaining the\n base component unchanged</i>.  For example, creating a subclass of Window called\n \"PaletteWindow\" with very compact appearance, while leaving the base Window class\n unchanged so that warning dialogs and other core uses of Windows do not look like\n PaletteWindows.\n </ul>\n The best code examples for skinning are in the load_skin.js file for the \"SmartClient\"\n skin, in <code>isomorphic/skins/SmartClient/load_skin.js</code>.\n <P>\n <h4>Passthroughs (eg window.headerStyle)</h4>\n <P>\n In many cases a component will provide shortcuts to skinning or customizing its\n autoChildren, such as ${isc.DocUtils.linkForRef('attr:Window.headerStyle')}, which becomes header.styleName.  When\n these shortcuts exist, they must be used instead of the more general autoChild skinning\n system.\n <P>\n <h4>Safe Skinning</h4>\n <P>\n Before skinning an autoChild consider the \n ${isc.DocUtils.linkForRef('group:safeSkinning','safe skinning guidelines')}.\n <P>\n <h4>Accessing AutoChildren Dynamically</h4>\n <P>\n For a component \"Window\" with an autoChild named \"header\", if you create a Window\n with ID \"myWindow\", the header autoChild is available as \"myWindow.header\".\n <P>\n Unless documented otherwise, an autoChild should be considered an internal part of a\n component.  Always configure autoChildren by APIs on the parent component when they\n exist.  It makes sense to access an autoChild for troubleshooting purposes or for\n workarounds, but in general, an autoChild's type, behavior, and internal structure are\n subject to change without notice in future SmartClient versions.\n <P>\n Accessing an autoChild may give you a way to make a dynamic change to a component that\n is not otherwise supported by the parent component (for example, changing a text label\n where there is no setter on the parent).  Before using this approach, consider whether\n simply recreating the parent component from scratch is a viable option - this approach\n is more than fast enough for most smaller components, and will not create a reliance on\n unsupported APIs.",
        name:"AutoChild",
        seeAlso:[],
        type:"type"
    },
    "attr:Tab.ID":{
        ref:"attr:Tab.ID",
        flags:"IRW",
        description:"Optional ID for the tab, which can later be used to reference the tab.\n APIs requiring a referenct a tab will accept the tabs ID \n [including  ${isc.DocUtils.linkForRef('method:TabSet.selectTab')}, ${isc.DocUtils.linkForRef('method:TabSet.updateTab')}, ${isc.DocUtils.linkForRef('method:TabSet.removeTab')}].<br>\n The ID will also be passed to the ${isc.DocUtils.linkForRef('method:TabSet.tabSelected')} and ${isc.DocUtils.linkForRef('method:TabSet.tabDeselected')}\n handler functions, if specified.\n <p>\n Note that if you provide an ID, it must be globally unique.",
        name:"ID",
        seeAlso:[],
        valueType:"identifier",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab"
    },
    "method:ListGrid.clearCriteria":{
        ref:"method:ListGrid.clearCriteria",
        flags:"",
        description:" Clear the current criteria used to filter data.\n\n",
        name:"clearCriteria",
        seeAlso:[
            {ref:"method:ListGrid.fetchData", description:null}
        ],
        params:[
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundFilter')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:DataSourceField.title":{
        ref:"attr:DataSourceField.title",
        flags:"IR",
        description:"Default user-visible title for this field.\n <p>\n This will be picked up by DataBound components and other views onto this DataSource.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["componentBinding"]
    },
    "object:isA":{
        methods:[],
        ref:"object:isA",
        classAttrs:[],
        classMethods:["classMethod:isA.List", "classMethod:isA.emptyString", "classMethod:isA.nonemptyString", 
         "classMethod:isA.Object","classMethod:isA.emptyObject", "classMethod:isA.String", "classMethod:isA.Array", 
         "classMethod:isA.Function","classMethod:isA.Number", "classMethod:isA.Boolean", "classMethod:isA.Date", 
         "classMethod:isA.RegularExpression","classMethod:isA.Instance", "classMethod:isA.ClassObject", "classMethod:isA.Interface"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"A library of functions for determining the types of other objects.<br><br>\n\n  The \"isA\" methods for the basic JavaScript types are much faster and more consistent across\n  platforms than JavaScript's \"typeof\" operator.<br><br>\n\n  An isA method is automatically created for every ISC Class and Interface definition, for\n  example, isA.Canvas().<br><br>",
        name:"isA",
        seeAlso:[],
        type:"object",
        examples:[
         "<code>if (isA.Number(myVariable)) ...</code>\n	Note: <code>is</code> and <code>isAn</code> are synonyms of <code>isA</code> and can be used\n			interchangably when it looks better syntactically, eg:\n				<code>if (myObject == null) ...</code>\n			or\n				<code>if (isAn.Array(myObject)) ...</code>"]
    },
    "method:Canvas.initWidget":{
        ref:"method:Canvas.initWidget",
        flags:"",
        description:"\n For custom components, perform any initialization specific to your widget subclass.\n <P>\n When creating a subclass of any Canvas-based component, you should generally override\n this method rather than overriding ${isc.DocUtils.linkForRef('method:Class.init')}.  This is because Canvas has its own\n ${isc.DocUtils.linkForRef('method:Class.init')} override which performs some generally desirable initialization - see\n ${isc.DocUtils.linkForRef('method:Canvas.init')} for details.\n <p>\n This method is called by ${isc.DocUtils.linkForRef('method:Canvas.init')} when a component is create()d.  When\n overriding this method, You must call the superClass initWidget implementation, like\n so:\n <pre>\n    this.Super(\"initWidget\", arguments);\n </pre>\n <P>\n In general, if you are going to call functionality supported by your superclass (eg calling\n addTab() when your superclass is a TabSet), call Super() first.  However, you can generally\n assign properties to <code>this</code> before calling Super() as a way of mimicing the\n effect of the property being passed to ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} on normal instance\n construction.  For example, when subclassing a DynamicForm, you could set this.items to a\n generated set of items before calling Super().\n <P>\n NOTE: child creation: if you are creating a component that auto-creates certain children (eg\n a Window which creates a Header child), typical practice is to create those children\n immediately before drawing by overriding draw().  This postpones work until it is really\n necessary and avoids having to update children if settings are changed between creation and\n draw().  Alternatively, if you prefer callers to directly manipulate auto-created children,\n it's best to create them earlier in initWidget(), in order to allow manipulation before\n draw.\n\n",
        name:"initWidget",
        seeAlso:[],
        params:[
            {description:"All arguments initially passed to ${isc.DocUtils.linkForRef('classMethod:Class.create')}", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"any"}
        ],
        type:"method",
        definingClass:"class:Canvas"
    },
    "method:Button.select":{
        ref:"method:Button.select",
        flags:"",
        description:" Select this object.\n",
        name:"select",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["state"]
    },
    "method:Canvas.animateShow":{
        ref:"method:Canvas.animateShow",
        flags:"",
        description:" Show a canvas by growing it vertically to its fully drawn height over a period of time.\n This method will not fire if the widget is already drawn and visible, or has overflow\n other than <code>\"visible\"</code> or <code>\"hidden\"</code>.\n",
        name:"animateShow",
        seeAlso:[],
        params:[
            {description:"How should the content of the window be revealed during the show.\n      Supported effects are <ul>\n                      <li><code>\"slide\"</code> (content slides into view as the window grows)\n                      <li><code>\"wipe\"</code> (default: content is revealed as the window grows)\n                      <li><code>\"fade\"</code> (widget fades into view, from transparent \n                                              to widget's specified <code>opacity</code> \n                                              - 100% by default)\n                      <li><code>\"fly\"</code> (widget is moved to its final position from\n                                              an offscreen position to the left)\n                      </ul>\n      If passed an object, the <code>effect</code> attribute of the object should be\n      one of the above effect strings - other attributes may be used to modify the effect\n      Currently this is only supported for <code>\"slide\"</code> and <code>\"wipe\"</code>\n      type animations where <code>\"startFrom\"</code> may be specified as <code>\"T\"</code>\n      [the animation will shift the widget down from the top] or <code>\"L\"</code> [the\n      animation will grow the widget from the left side].", 
             optional:false,name:"effect", defaultValue:null, type:"string | object"},
            {description:"When the show completes this callback will be fired. Single                              'earlyFinish' parameter will be passed if the animation was\n                              cut short by a call to finishAnimation.", 
             optional:true,name:"callback", defaultValue:null, type:"callback"},
            {description:"Duration in ms of the animated show", optional:true, name:"duration", 
             defaultValue:null,type:"number"},
            {description:"Optional acceleration effect function to                           bias the animation ratios", 
             optional:true,name:"acceleration", defaultValue:null, type:"AnimationAcceleration"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('animateWipe')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "class:Progressbar":{
        methods:["method:Progressbar.setPercentDone", "method:Progressbar.percentChanged", 
         "method:Progressbar.getLength","method:Progressbar.getBreadth", "method:Progressbar.setLength", 
         "method:Progressbar.setBreadth"],
        ref:"class:Progressbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:Progressbar.percentDone", "attr:Progressbar.length", "attr:Progressbar.breadth", 
         "attr:Progressbar.vertical","attr:Progressbar.src"],
        description:"The Progressbar widget class extends the StretchImg class to implement image-based progress\n bars (graphical bars whose lengths represent percentages, typically of task completion).",
        name:"Progressbar",
        seeAlso:[],
        type:"class"
    },
    "attr:SubmitItem.title":{
        ref:"attr:SubmitItem.title",
        flags:"IRW",
        description:"SubmitItems show a title of <code>\"Submit\"</code> by default. May be overridden.",
        name:"title",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"Submit\"",
        type:"attr",
        definingClass:"class:SubmitItem"
    },
    "method:List.indexOf":{
        ref:"method:List.indexOf",
        flags:"",
        description:" Return the position in the list of the first instance of the specified object.\n <p>\n If pos is specified, starts looking after that position.\n <p>\n Returns -1 if not found.\n\n",
        name:"indexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"earliest index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"last index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "attr:ImgSplitbar.vertical":{
        ref:"attr:ImgSplitbar.vertical",
        flags:"R",
        description:"Is this split bar vertically orientated?<br>\n When a <code>Splitbar</code> is created by a layout to be the resizeBar for some\n member of the layout, the <code>vertical</code> property will be set to <code>true</code>\n if the layout is horizontal, meaning this resizeBar will be taller than it is wide, \n and will allow horizontal resizing of the member.",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "method:ListGrid.getFocusRow":{
        ref:"method:ListGrid.getFocusRow",
        flags:"A",
        description:" Get the row that currently has keyboard focus.  Arrow key navigation moves relative to this\n row.\n \n",
        name:"getFocusRow",
        seeAlso:[],
        returns:{description:"rowNum of the current focus row", type:"Number"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "attr:FacetValue.id":{
        ref:"attr:FacetValue.id",
        flags:"IRW",
        description:"id of this facetValue.  Any string or number.",
        name:"id",
        seeAlso:[],
        valueType:"String | Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "class:TextItem":{
        methods:["method:TextItem.getHint"],
        exampleConfig:"TextItem.xml",
        ref:"class:TextItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:TextItem.width", "attr:TextItem.height", "attr:TextItem.textBoxStyle", 
         "attr:TextItem.length","attr:TextItem.selectOnFocus"],
        description:"FormItem for managing a text field.",
        name:"TextItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('textItem')}"]
    },
    "attr:FormItem.textBoxStyle":{
        ref:"attr:FormItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class name for a form item's text box element.\n <P>\n NOTE: See the ${isc.DocUtils.linkForRef('group:CompoundFormItem_skinning')} discussion for special skinning considerations.",
        name:"textBoxStyle",
        seeAlso:[
            {ref:"attr:FormItem.cellStyle", description:null}
        ],
        valueType:"FormItemBaseStyle",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:Selection.anySelected":{
        ref:"method:Selection.anySelected",
        flags:"",
        description:" Whether at least one item is selected\n",
        name:"anySelected",
        seeAlso:[],
        returns:{description:"true == at least one item is selected								false == nothing at all is selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:StatefulCanvas.setState":{
        ref:"method:StatefulCanvas.setState",
        flags:"A",
        description:" Set the 'state' of this object, this changes it's appearance.\n\n",
        name:"setState",
        seeAlso:[
            {ref:"method:StatefulCanvas.setDisabled", description:"which also affects state values."}
        ],
        params:[
            {description:"new state", optional:false, name:"newState", defaultValue:null, type:"State"}
        ],
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state", "appearance"]
    },
    "attr:ListGrid.showDetailFields":{
        ref:"attr:ListGrid.showDetailFields",
        flags:"IR",
        description:"Whether to include fields marked <code>detail:true</code> from this component's \n <code>DataSource</code>.<br>\n Fields may also be included directly in this component's <code>fields</code> array in\n which case they will be present regardless of the <code>detail</code> attribute.\n <p>\n When this property is <code>true</code>, <code>ListGrid</code>s will include all \n detail fields, but they will be initially hidden. To override the visibility of\n a detail field, use the standard ${isc.DocUtils.linkForRef('method:ListGrid.showField')}, ${isc.DocUtils.linkForRef('method:ListGrid.hideField')}\n and ${isc.DocUtils.linkForRef('attr:ListGridField.showIf')} APIs.<br>\n The user may show these fields via the default header context menu \n (${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')}).<br>\n Setting this property to false will completely exclude all detail fields from the list\n grid's fields array.",
        name:"showDetailFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["databinding"]
    },
    "attr:Canvas.snapOffsetLeft":{
        ref:"attr:Canvas.snapOffsetLeft",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined for this widget, this property can be used to\n specify an offset in px for the left coordinate of this widget.\n <P>\n For example if <code>snapTo</code> is specifed as <code>\"L\"</code> and \n <code>snapOffsetLeft</code> is set to 6, this widget will be rendered 6px inside the left\n edge of its parent or master element.",
        name:"snapOffsetLeft",
        seeAlso:[
            {ref:"attr:Canvas.snapTo", description:null}
        ],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:FormItem.setTop":{
        ref:"method:FormItem.setTop",
        flags:"A",
        description:" For a form with ${isc.DocUtils.linkForRef('attr:DynamicForm.itemLayout','itemLayout')}:\"absolute\" only, set the top\n coordinate of this form item.\n <P>\n Causes the form to redraw.\n",
        name:"setTop",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem"
    },
    "attr:ListGrid.fixedRecordHeights":{
        ref:"attr:ListGrid.fixedRecordHeights",
        flags:"IRWA",
        description:"Should we vertically clip cell contents, or allow rows to expand vertically to show all\n contents?\n <P>\n If we allow rows to expand, the row height as derived from\n ${isc.DocUtils.linkForRef('method:GridRenderer.getRowHeight','getRowHeight()')} or the\n default ${isc.DocUtils.linkForRef('attr:ListGrid.cellHeight')} is treated as a minimum.",
        name:"fixedRecordHeights",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('autofitValues')}"],
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "group:webService":{
        ref:"group:webService",
        refs:["method:WebService.getOperationNames", "method:WebService.getSchema", 
         "method:WebService.callOperation","method:WebService.getFetchDS", "method:WebService.setLocation", "class:WebService", 
         "classMethod:WebService.get","attr:SchemaSet.schemaNamespace", "attr:WebService.serviceNamespace"],
        name:"webService",
        seeAlso:[],
        type:"group"
    },
    "method:TabSet.scrollForward":{
        ref:"method:TabSet.scrollForward",
        flags:"",
        description:" If there is not enough space to display all the tabs in this tabSet, this method will \n scroll the next tab (that first tab that is clipped at the end of the tab-bar) into view.\n",
        name:"scrollForward",
        seeAlso:[],
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:HTMLFlow.contentsURL":{
        ref:"attr:HTMLFlow.contentsURL",
        flags:"IRW",
        description:"URL to load content from.\n <P>\n If specified, this component will load HTML content from the specified URL when it is\n first drawn.\n <p>\n This feature relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.",
        name:"contentsURL",
        setter:["setContentsURL"],
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "group:loadISCTag":{
        ref:"group:loadISCTag",
        title:"&lt;isomorphic:loadISC&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> HTML\n <p>\n This tag sets window.isomorphicDir and loads a default set of SmartClient modules and a\n skin.  SmartClient modules are JavaScript files that need to be loaded via \n <code>&lt;SCRIPT SRC=/some/filename.js&gt;&lt;/SCRIPT&gt;</code>\n blocks as part of the loading HTML page.  The modules themselves are stored in the\n <code>[webroot]/isomorphic/system/modules</code> directory.  A skin defines the look and feel of your\n website and typically consists of at least one CSS file and some SmartClient UI Component\n default overrides.  Skins are located in <code>[webroot]/isomorphic/skins</code>.  Loading a skin\n consists of loading the corresponding <code>load_skin.js</code> - residing at top-level in\n each skin directory.\n <p>\n The default set of modules loaded by this tag are: <code>Core, Foundation, Containers,\n Grids, Forms, DataBinding</code>.  The default skin is the <code>SmartClient</code> skin.\n So, for example inserting this into your JSP:\n <pre>\n &lt;isomorphic:loadISC/&gt;\n </pre>\n Produces the following output:\n <pre>\n &lt;SCRIPT&gt;window.isomorphicDir='isomorphic/';&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Core.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Foundation.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Containers.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Grids.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Forms.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_DataBinding.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT src=isomorphic/skins/SmartClient/load_skin.js&gt;&lt;/SCRIPT&gt;\n </pre>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>skin</b><br>\n <i>value format</i>: Name of skin to load.  See the <code>[webroot]/isomorphic/skins</code> directory\n for a list of available skins.  You can also create your own skin by copying an existing\n skin directory recursively, modifying anything you need, and using your new skin name as the\n value here.<br>\n <i>default value</i>: \"SmartClient\"\n <p>\n This selects a skin other than the default.  The value of this attribute is used as a path\n component to <code>load_skin.js</code>.  For example, specifying:\n <pre>\n &lt;isomorphic:loadISC skin=\"standard\"/&gt;\n </pre>\n Produces the following <code>load_skin.js</code> directive (in addition to all the standard\n module loads):\n <pre>\n &lt;SCRIPT src=isomorphic/skins/standard/load_skin.js&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n <b>skinDir</b><br>\n <i>value format</i>: path or URL up to and including the name of the skin<br>\n <i>default value</i>: automatically derived from the value of the <code>skin</code>\n attribute\n <p>\n This attribute is usable in lieu of the <code>skin</code> attribute and allows you to\n specify the full path or URL to the directory containing the load_skin.js for your skin.\n This allows you to move the directory containing the skin anywhere you want - including to a\n completely different server.\n <p>\n <b>includeModules</b><br>\n <i>value format</i>: Comma separated list of modules to load.  See the\n <code>[webroot]/isomorphic/system/modules</code> directory for a list of loadable modules.  The\n leading \"ISC_\" is optional, spaces after commas also optional.<br>\n <i>default value</i>: NONE\n <p>\n This attribute allows you to specify SmartClient modules that you want to load in addition\n to the default set of modules. For example, specifying:\n <pre>\n &lt;isomorphic:loadISC includeModules=\"Analytics\"/&gt;\n </pre>\n Produces the following output:\n <pre>\n &lt;SCRIPT&gt;window.isomorphicDir='isomorphic/';&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Core.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Foundation.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Containers.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Grids.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Forms.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_DataBinding.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT SRC=isomorphic/system/development/ISC_Analytics.js&gt;&lt;/SCRIPT&gt;\n &lt;SCRIPT src=isomorphic/skins/SmartClient/load_skin.js&gt;&lt;/SCRIPT&gt;\n </pre>\n Notice the addition of the line that loads <code>ISC_Analytics.js</code>.  SmartClient\n modules must be loaded in a particular order and may have dependencies on other modules.\n The <code>loadISC</code> automatically resolves any missing dependencies and includes them\n in the list of modules to load.  The list of modules to load is also automatically reordered\n as required by this tag, so you can specify just the modules you care about, in any order,\n and <code>loadISC</code> will do the right thing.\n <p>\n <b>module</b><br>\n <i>value format</i>: Comma separated list of modules to load.  See the\n <code>[webroot]/isomorphic/system/modules</code> directory for a list of loadable modules.  The\n leading \"ISC_\" is optional, spaces after commas also optional.<br>\n <i>default value</i>: \"Core, Foundation, Containers, Grids, Forms, DataBinding\"\n <p>\n Specifying this attribute overrides the default set of modules loaded by\n <code>loadISC</code> This is useful if you don't need to load all of the default modules on\n a particular page.\n <p>\n <b>isomorphicURI</b><br>\n <i>value format</i>: absolute or relative (from current URI) path to the\n <code>isomorphic</code> directory (by default located in webRoot).<br>\n <i>default value</i>: automatically derived\n <p>\n This value sets <code>window.isomorphicDir</code> and defines the base path to SmartClient\n modules from the currently exectuing JSP.  By default, this value is automatically derived\n and you don't need to override it.  Generally, an override is only required if you're\n pointing multiple web application deployments at one base URL for cache coherence reasons.\n <p>\n <b>defer</b><br>\n <i>value format</i>: boolean - acceptable values: \"true\" or \"false\"<br>\n <i>default value</i>: \"false\"\n <p>\n This attribute applies only if you're using the optional Network Performance component of\n SmartClient.  By default, the modules specified by the <code>loadISC</code> tag are loaded\n synchronously - that is, the the browser waits for each module to download before rendering\n any HTML on the page.  Specifying <code>defer=\"true\"</code> makes the module load\n asynchronous.  In this mode, all the page content except the modules specified by\n <code>loadISC</code> is loaded and rendered first, and then the SmartClient modules are\n loaded.  The asynchronous mode makes it possible to render some content and allow the user\n to interact with the site immediately, while SmartClient modules load in the background.\n <p>\n Note that typically SmartClient modules are delivered compressed with cache headers, so the\n download delay really only affects first time users of your site, those whose cached\n versions have expired, or if you've upgraded your SmartClient module to a newer version that\n the user has cached.\n <p>\n Using this directive is equivalent to calling ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')}.\n <p>\n <b>cacheOnly</b><br>\n <i>value format</i>: boolean - acceptable values: \"true\" or \"false\"<br>\n <i>default value</i>: \"false\"\n <p>\n This attribute applies only if you're using the optional Network Performance component of\n SmartClient.  This works like <code>defer</code> (see above), except that the modules are\n only loaded into the browser cache, but not executed.  This means that when the specified\n modules download, they'll be added to the browser cache, but will not be available to the\n execution context of the page.  Actually executing the module code takes some processing\n time on the client, whereas simply caching it does not.  The typical use case for this\n directive is on some intermediary page before the user gets to a SmartClient-enabled page.\n For example, you could include a cacheOnly <code>loadISC</code> tag on a login page that\n does not use SmartClient components, but protects a SmartClient-enabled application.  While\n the user is typing in their credentials, the SmartClient modules will cache in the\n background, then once the user logs in and is sent to a SmartClient-enabled page, the\n modules are simply read from cache.\n <p>\n Using this directive is equivalent to calling ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')}.\n <p>\n <b>onload</b><br>\n <i>value format</i>: String - any javascript code\n <i>default value</i>: NONE\n <p>\n This attribute applies only if you're using the optional Network Performance component of\n SmartClient.  This attribute is usable in conjuction with <code>defer</code> and\n <code>cacheOnly</code> attributes.  This attribute allows you to specify a callback to\n execute when loading or caching of the specified modules has completed.  You can use this\n to, for example, replace portions of the page with SmartClient components once SmartClient\n has loaded.\n <p>\n The value of this attribute is passed as the <code>onload</code> handler to the generated\n ${isc.DocUtils.linkForRef('classMethod:FileLoader.cacheISC')} or ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadISC')} call as appropriate.",
        name:"loadISCTag",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "attr:DateChooser.baseButtonStyle":{
        ref:"attr:DateChooser.baseButtonStyle",
        flags:"IRW",
        description:"Base css style applied to this picker's buttons. Will have \"Over\", \"Selected\" and \"Down\"\n suffix appended as the user interacts with buttons.",
        name:"baseButtonStyle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"dateChooserButton\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "method:ValuesManager.getMember":{
        ref:"method:ValuesManager.getMember",
        flags:"",
        description:"  Returns a pointer to a specific member form.\n",
        name:"getMember",
        seeAlso:[],
        params:[
            {description:"ID of the form to retrieve", optional:false, name:"ID", defaultValue:null, 
             type:"string"}
        ],
        returns:{description:"member form (or null if unable to find a member with the  specified ID).", 
         type:"DynamicForm"},
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "attr:StretchImgButton.actionType":{
        flags:"IRW",
        getter:["getActionType"],
        type:"attr",
        ref:"attr:StretchImgButton.actionType",
        description:"Behavior on state changes -- BUTTON, RADIO or CHECKBOX",
        name:"actionType",
        setter:["setActionType"],
        valueType:"SelectionType",
        seeAlso:[],
        defaultValue:"\"button\"",
        groups:["state", "event handling"],
        definingClass:"class:StretchImgButton"
    },
    "attr:OperationBinding.dataURL":{
        ref:"attr:OperationBinding.dataURL",
        flags:"IR",
        description:"URL to contact to fulfill DSRequests for this operationBinding.\n <P>\n <code>dataURL</code> is typically set as DataSource.dataURL rather than on each individual\n operationBinding.\n <P>\n <code>dataURL</code> can be omitted for a DataSource using a Web Service\n (${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is set).",
        name:"dataURL",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "class:XMLTools":{
        methods:[],
        ref:"class:XMLTools",
        classAttrs:[],
        classMethods:["classMethod:XMLTools.loadXML", "classMethod:XMLTools.parseXML", 
         "classMethod:XMLTools.nativeXMLAvailable","classMethod:XMLTools.toJS", "classMethod:XMLTools.selectObjects", 
         "classMethod:XMLTools.selectNodes","classMethod:XMLTools.selectString", "classMethod:XMLTools.selectNumber", 
         "classMethod:XMLTools.transformNodes","classMethod:XMLTools.serializeToString", "classMethod:XMLTools.loadXMLSchema", 
         "classMethod:XMLTools.loadWSDL"],
        treeLocation:["Client Reference/Data Binding"],
        attrs:[],
        description:"Utility methods for dealing with XML elements, XML Schema, WSDL files, XSLT, and other\n XML-related functionality.",
        name:"XMLTools",
        seeAlso:[],
        type:"class"
    },
    "classAttr:Validator.notABoolean":{
        ref:"classAttr:Validator.notABoolean",
        flags:"IRA",
        description:"Default error message to display when standard <code>isBoolean</code> type validator\n  returns false.",
        name:"notABoolean",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be a true/false value\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:ValuesManager.dataSource":{
        ref:"attr:ValuesManager.dataSource",
        flags:"IRWA",
        getter:["getDataSource"],
        description:"Specifies a dataSource for this valuesManager.  This dataSource will then be used for\n validation and client-server flow methods.  Can be specified as a dataSource object or\n an identifier for the dataSource.<br>\n Note that member forms should have the same dataSource applied to them to allow their\n items to inherit properties from the DataSource fields.",
        name:"dataSource",
        setter:["setDataSource"],
        seeAlso:[
            {ref:"method:ValuesManager.setDataSource", description:null},
            {ref:"method:ValuesManager.getDataSource", description:null}
        ],
        valueType:"DataSource | string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ValuesManager"
    },
    "method:FormItem.transformInput":{
        ref:"method:FormItem.transformInput",
        flags:"",
        description:" Called when a FormItem's value is about to change as the result of user interaction.  This\n method fires after the user performed an action that would change the value of this field,\n and allows the developer to modify / reformat the value before it gets validated / saved.\n Fires before ${isc.DocUtils.linkForRef('method:FormItem.change')}.<br>\n Return the reformatted value.\n\n",
        name:"transformInput",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"The new value of the form item", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"The previous (current) value of the form item", optional:false, 
             name:"oldValue",defaultValue:null, type:"any"}
        ],
        returns:{description:"The desired new value for the form item", type:"any"},
        type:"method",
        definingClass:"class:FormItem"
    },
    "attr:ServerObject.visibleMethods":{
        ref:"attr:ServerObject.visibleMethods",
        flags:"IR",
        description:"When the ${isc.DocUtils.linkForRef('class:ServerObject')} appears in a .app.xml file (for RPC DMI), this property\n specifies the list of methods on the ServerObject that are callable from the client.  See\n the builtin.app.xml file in the /shared/app directory of the SDK for an example of a\n visibleMethods declaration block.",
        name:"visibleMethods",
        seeAlso:[
            {ref:"class:DMI", description:null}
        ],
        valueType:"List",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ServerObject"
    },
    "method:Array.getValueMap":{
        ref:"method:Array.getValueMap",
        flags:"",
        description:" Get a map of the form <code>{ item[idField] -&gt; item[displayField] }</code>, for all \n items in the list.  Note that if more than one item has the same <code>idProperty</code>, \n the value for the later item in the list will clobber the value for the earlier item.\n\n",
        name:"getValueMap",
        seeAlso:[],
        params:[
            {description:"Property to use as ID (data value) in the valueMap", optional:false, 
             name:"idField",defaultValue:null, type:"string"},
            {description:"Property to use a display value in the valueMap", optional:false, 
             name:"displayField",defaultValue:null, type:"string"}
        ],
        returns:{description:"valueMap object", type:"object"},
        type:"method",
        definingClass:"object:Array"
    },
    "type:TitleOrientation":{
        ref:"type:TitleOrientation",
        values:[
            {description:null, value:"\"left\""},
            {description:null, value:"\"top\""},
            {description:null, value:"\"right\""}
        ],
        description:"Orientation of titles relative to the FormItem being labelled.  Can be set a the\n DynamicForm level as a default, or on individual items.",
        name:"TitleOrientation",
        seeAlso:[
            {ref:"attr:DynamicForm.titleOrientation", description:null},
            {ref:"attr:FormItem.titleOrientation", description:null}
        ],
        type:"type",
        groups:["formTitles"]
    },
    "method:ListGrid.cellMouseDown":{
        ref:"method:ListGrid.cellMouseDown",
        flags:"",
        description:" Called when a cell receives a mousedown event.\n \n",
        name:"cellMouseDown",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:Canvas.hoverVAlign":{
        ref:"attr:Canvas.hoverVAlign",
        flags:"IRW",
        description:"If <code>this.showHover</code> is true, this property can be used to customize the\n vertical alignment of content in the hover canvas.",
        name:"hoverVAlign",
        seeAlso:[
            {ref:"attr:Canvas.showHover", description:null}
        ],
        valueType:"VerticalAlignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "method:GridRenderer.cellClick":{
        ref:"method:GridRenderer.cellClick",
        flags:"A",
        description:" Called when a cell receives a click event.\n\n",
        name:"cellClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:DynamicForm.clearValues":{
        ref:"method:DynamicForm.clearValues",
        flags:"",
        description:" Reset to default form values and clear errors\n",
        name:"clearValues",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:ListGrid.singleCellValueProperty":{
        ref:"attr:ListGrid.singleCellValueProperty",
        flags:"IRW",
        description:"If <code>record[this.singleCellValueProperty]</code> is set for some record, the \n record will be displayed as a single cell spanning every column in the grid, with \n contents set to the value of <code>record[this.singleCellValueProperty]</code>.",
        name:"singleCellValueProperty",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"singleCellValue\"",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "class:CheckboxItem":{
        methods:["method:CheckboxItem.setValueMap"],
        exampleConfig:"CheckboxItem.xml",
        ref:"class:CheckboxItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:CheckboxItem.titleStyle", "attr:CheckboxItem.textBoxStyle", 
         "attr:CheckboxItem.showLabel","attr:CheckboxItem.checkedImage", "attr:CheckboxItem.uncheckedImage", 
         "attr:CheckboxItem.unsetImage","attr:CheckboxItem.valueIconWidth", "attr:CheckboxItem.valueIconHeight", 
         "attr:CheckboxItem.valueMap"],
        description:"Checkbox form item, implemented with customizeable checkbox images",
        name:"CheckboxItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('checkboxItem')}"]
    },
    "method:Button.getState":{
        ref:"method:Button.getState",
        flags:"",
        description:" Return the state of this StatefulCanvas\n",
        name:"getState",
        seeAlso:[],
        returns:{description:null, type:"State"},
        type:"method",
        definingClass:"class:Button",
        groups:["state"]
    },
    "method:ListGrid.getHeaderContextMenuItems":{
        ref:"method:ListGrid.getHeaderContextMenuItems",
        flags:"",
        description:" If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu')} is <code>true</code> this method returns\n the menu items to be displayed in the default header context menu.\n <P>\n This method will be called each time the menu is displayed, allowing for dynamic content\n depending on the current state of the fields.\n <P>\n The default set of menu items will includes menu items for freezing fields, showing and\n hiding fields, grouping by fields, or other listGrid features \n\n",
        name:"getHeaderContextMenuItems",
        seeAlso:[],
        params:[
            {description:"Index of the field the user clicked in the    ${isc.DocUtils.linkForRef('attr:ListGrid.fields','fields')} array. <b>Note:</b> if the user right-clicked the sorter button\n    this parameter will be <code>null</code>.", 
             optional:true,name:"fieldNum", defaultValue:null, type:"integer"}
        ],
        returns:{description:"Array of MenuItem", type:null},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridHeader"]
    },
    "method:ResultSet.getLength":{
        ref:"method:ResultSet.getLength",
        flags:"",
        description:" Return the total number of records that match the current filter criteria.\n <P>\n This length can only be known, even approximately, when the first results are retrieved from\n the server.  Before then, the ResultSet returns a large length in order to encourage viewers\n to ask for rows.  ${isc.DocUtils.linkForRef('method:ResultSet.lengthIsKnown','ResultSet.lengthIsKnown()')} can be called to\n determine whether an actual length is known.\n\n",
        name:"getLength",
        seeAlso:[],
        returns:{description:"number of items in the list", type:"Number"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access"]
    },
    "attr:SelectOtherItem.selectOtherPrompt":{
        ref:"attr:SelectOtherItem.selectOtherPrompt",
        flags:"IR",
        description:"Title to show in prompt for \"other\" value.\n Note this is a dynamic string. JavaScript content is supported within <code>\\${...}</code>\n tags, with local variables for <code>item</code> (a pointer to this item), <code>value</code>\n a pointer to the currently selected item value",
        name:"selectOtherPrompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Other value for <br>${item.getTitle()}?\"",
        type:"attr",
        definingClass:"class:SelectOtherItem",
        groups:["i18nMessages"]
    },
    "method:ListGrid.formatCellValue":{
        ref:"method:ListGrid.formatCellValue",
        flags:"",
        description:" Formatter to apply to values displayed within cells.\n <P>\n The value passed to this method is either the field value found in the cell record \n or, if there are unsaved edits, the current user-entered value for the cell.\n <b>NOTE:</b> unsaved user edits may contain nulls, bad values or values of the wrong\n type, so formatters used for editable data should be bulletproof.  For example, if you\n have a function \"myNumberFormatter\" that should only be passed actual Numbers, you might\n define formatCellValue like so:\n <pre>\n     isc.isA.Number(parseInt(value)) ? \n            myNumberFormatter(parseInt(value)) : value\n </pre>\n Note that this formatter will not be applied to the value displayed within editors for\n cells - use <code>formatEditorValue</code> to achieve this.\n <P>\n If <code>formatCellValue</code> is defined at the field level for some cell being edited,\n the field level method will be used to format the edit value and this method will not\n be called for that cell.<br>\n\n",
        name:"formatCellValue",
        seeAlso:[
            {ref:"method:ListGridField.formatCellValue", description:null},
            {ref:"method:ListGrid.formatEditorValue", description:null}
        ],
        params:[
            {description:"raw value for the cell being", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"Record object for the cell. Note: If this is a new row that has not been saved, in an \n   editable grid, it has no associated record object. In this case the edit values will\n   be passed in as this parameter.", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"formatted value to display in the cell.", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["display_values"]
    },
    "attr:PickList.pickListHeight":{
        ref:"attr:PickList.pickListHeight",
        flags:"IRW",
        description:"Maximum height to show the pick list before it starts to scroll.\n Note that by default the pickList will be sized to the height required by its content\n so it will be taller when more rows are available as selectable options",
        name:"pickListHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"300",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "attr:CubeGrid.bodyStyleName":{
        ref:"attr:CubeGrid.bodyStyleName",
        flags:"IRW",
        description:"CSS class for the CubeGrid body",
        name:"bodyStyleName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"cubeGridBody\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["appearance"]
    },
    "method:Canvas.getID":{
        ref:"method:Canvas.getID",
        flags:"",
        description:"      When a widget instance is created, it is assigned a unique global identifier that can be\n      used to access the instance by name. The getID method returns this ID for a particular\n      instance. Global IDs are essential when you need to embed a widget reference in a string,\n      usually a string that will be evaluated in the future and/or in another object, where you\n      may not have access to a variable or parameter holding the widget's reference.\n\n",
        name:"getID",
        seeAlso:[],
        returns:{description:"global identifier for this canvas", type:"string"},
        type:"method",
        definingClass:"class:Canvas"
    },
    "method:GridRenderer.getEventRow":{
        ref:"method:GridRenderer.getEventRow",
        flags:"",
        description:" Returns the row number of the most recent mouse event.\n",
        name:"getEventRow",
        seeAlso:[],
        params:[
            {description:"optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event", 
             optional:false,name:"y", defaultValue:null, type:"number"}
        ],
        returns:{description:"row number, or -2 if beyond last drawn row", type:"number"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events", "selection"]
    },
    "attr:ListGrid.filterByCell":{
        ref:"attr:ListGrid.filterByCell",
        flags:"IRWA",
        description:"If we're showing the filterEditor (this.showFilterEditor is true), this property \n determines whether this list should be filtered every time the user puts focus in\n a different field in the filter editor.",
        name:"filterByCell",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "attr:FormItem.showTitle":{
        ref:"attr:FormItem.showTitle",
        flags:"IRW",
        description:"Should we show a title cell for this formItem?\n <p>\n Note: the default value of this attribute is overridden by some subclasses.",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "attr:RowSpacerItem.endRow":{
        ref:"attr:RowSpacerItem.endRow",
        flags:"IRW",
        description:"these items are in a row by themselves by default",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RowSpacerItem",
        groups:["appearance"]
    },
    "attr:ImgSplitbar.target":{
        ref:"attr:ImgSplitbar.target",
        flags:"R",
        description:"When a <code>Splitbar</code> is created by a layout, the <code>target</code> property\n of the Splitbar will be a pointer to the member for which it is acting as a resizeBar.\n The Splitbar will be positioned next to its target, and will resize it on drag completion.",
        name:"target",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "group:items":{
        ref:"group:items",
        title:"Form Items",
        refs:["method:DynamicForm.getItem", "method:DynamicForm.getField", "attr:DynamicForm.items", 
         "attr:DynamicForm.fields","attr:ToolbarItem.buttons"],
        description:"Manipulating the items that belong to a form.\n <BR><br>\n An item manages an atomic value (eg a String, Number, Date, etc) that appears as one of the\n properties in the overall form's values.  Some items exist purely for layout or appearance\n purposes (eg SpacerItem) and do not manage a value.",
        name:"items",
        seeAlso:[],
        type:"group"
    },
    "attr:ImgButton.src":{
        ref:"attr:ImgButton.src",
        flags:"IRW",
        description:"The base filename for the image.\n <P>\n If <code>img.state</code> is set, it's value will be appended to the URL before the\n file extension.  \n <P>\n For example, given an <code>src</code> of \"findIcon.gif\" and a state of\n \"Disabled\", the resulting image name would be \"findIcon_Disabled.gif\".  Compound states\n such as \"Selected\", \"Focused\" and \"Over\" or \"Down\" will have an intervening underscore,\n resulting in, for example, <code>\"findIcon_Selected_Down.gif\"</code>.",
        name:"src",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/ImgButton/button.png\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonAppearance')}"],
        definingClass:"class:ImgButton",
        groups:["appearance"]
    },
    "classMethod:Page.getSkinImgDir":{
        ref:"classMethod:Page.getSkinImgDir",
        flags:"",
        description:"		Return the directory for a skin image.\n\n",
        name:"getSkinImgDir",
        seeAlso:[],
        params:[
            {description:"Partial URL (relative to Page._skinDir) where the image lives.										If not supplied, will use \"images/\"", 
             optional:true,name:"imgDir", defaultValue:null, type:"URL"}
        ],
        returns:{description:"URL for page-specific images.", type:"string"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "method:ImgButton.getState":{
        ref:"method:ImgButton.getState",
        flags:"",
        description:" Return the state of this StatefulCanvas\n",
        name:"getState",
        seeAlso:[],
        returns:{description:null, type:"State"},
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "attr:DetailViewer.dateFormatter":{
        ref:"attr:DetailViewer.dateFormatter",
        flags:"IR",
        description:"Display format to use for fields specified as type 'date'.  Default is to use the\n system-wide default normal date format, configured via\n ${isc.DocUtils.linkForRef('classMethod:Date.setNormalDisplayFormat')}.  Specify any valid ${isc.DocUtils.linkForRef('type:DateDisplayFormat')} to \n change the format used by this detailViewer.",
        name:"dateFormatter",
        seeAlso:[],
        valueType:"DateDisplayFormat",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DetailViewer"
    },
    "attr:Layout.layoutRightMargin":{
        ref:"attr:Layout.layoutRightMargin",
        flags:"IRW",
        description:"Space outside of all members, on the right-hand side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.\n <P>\n Requires a manual call to <code>setLayoutMargin()</code> if changed on the fly.",
        name:"layoutRightMargin",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "method:SectionStack.getSections":{
        ref:"method:SectionStack.getSections",
        flags:"",
        description:"\n Returns a list of all sectionIDs in the order in which they appear in the SectionStack.\n\n",
        name:"getSections",
        seeAlso:[],
        returns:{description:"list of all sectionIDs in the order in which they appear in the SectionStack.", 
         type:"List"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "class:DOMGrid":{
        methods:["method:DOMGrid.setRootElement"],
        ref:"class:DOMGrid",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids"],
        attrs:["attr:DOMGrid.rootElement"],
        description:"Provides a tree view of any DOM-compliant structure, such as an XML or HTML document.",
        name:"DOMGrid",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.removeData":{
        ref:"method:ListGrid.removeData",
        flags:"",
        description:" Perform a DataSource \"remove\" operation to remove records from this component's\n DataSource.\n\n",
        name:"removeData",
        seeAlso:[],
        params:[
            {description:"primary key values of record to delete,                                           (or complete record)", 
             optional:false,name:"data", defaultValue:null, type:"Object"},
            {description:"method to call on operation completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                          that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('databoundRemove')}"],
        definingClass:"class:ListGrid",
        groups:["dataBoundComponentMethods"]
    },
    "attr:CubeGrid.valueProperty":{
        ref:"attr:CubeGrid.valueProperty",
        flags:"IR",
        description:"Name of the property in a cell record that holds the cell value.",
        name:"valueProperty",
        seeAlso:[],
        valueType:"id",
        defaultValue:"\"_value\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:SliderItem.defaultValue":{
        ref:"attr:SliderItem.defaultValue",
        flags:"IRW",
        description:"Default value for this sliderItems is 1.",
        name:"defaultValue",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:SliderItem"
    },
    "attr:Splitbar.canDrag":{
        ref:"attr:Splitbar.canDrag",
        flags:"IRW",
        description:"<code>canDrag</code> set to true to allow dragging of the split bar. Dragging the\n Splitbar will resize it's ${isc.DocUtils.linkForRef('attr:Splitbar.target','target')}",
        name:"canDrag",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Splitbar"
    },
    "attr:Slider.stepPercent":{
        ref:"attr:Slider.stepPercent",
        flags:"IRW",
        description:"The percentage of the total slider that constitutes one discrete step. The slider will move\n one step when the appropriate arrow key is pressed.",
        name:"stepPercent",
        seeAlso:[],
        valueType:"float",
        defaultValue:"5",
        type:"attr",
        definingClass:"class:Slider"
    },
    "method:ListGrid.getEventColumn":{
        ref:"method:ListGrid.getEventColumn",
        flags:"",
        description:" Returns the column number of the most recent mouse event.\n",
        name:"getEventColumn",
        seeAlso:[],
        params:[
            {description:"optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event", 
             optional:false,name:"x", defaultValue:null, type:"number"}
        ],
        returns:{description:"column number, or -2 if beyond last drawn column", type:"number"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:TreeGrid.loadDataOnDemand":{
        ref:"attr:TreeGrid.loadDataOnDemand",
        flags:"IRW",
        description:"For databound treeGrid instances, should the entire tree of data be loaded on initial \n fetch, or should folders load their children as they are opened.<br>\n If unset the default ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand')} setting will be used.",
        name:"loadDataOnDemand",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('initialData')}"],
        definingClass:"class:TreeGrid",
        groups:["databinding"]
    },
    "classMethod:isA.Number":{
        ref:"classMethod:isA.Number",
        flags:"",
        description:"\n	Is <code>object</code> a Number object?<br><br>\n\n	NOTE: this returns false if <code>object</code> is an invalid number (<code>isNaN(object) == true</code>)\n\n",
        name:"Number",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Number", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:ListGrid.originalData":{
        ref:"attr:ListGrid.originalData",
        flags:"R",
        description:"When grouped, a copy of the original ungrouped data.",
        name:"originalData",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"List of ListGridRecord",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "method:Date.toDateStamp":{
        ref:"method:Date.toDateStamp",
        flags:"",
        description:"			Return this date in the format:\n				<code><i>YYYYMMDD</i>T<i>HHMMSS</i>[Z]</code>\n",
        name:"toDateStamp",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:StretchImgButton.isSelected":{
        ref:"method:StretchImgButton.isSelected",
        flags:"",
        description:" Find out if this object is selected\n",
        name:"isSelected",
        seeAlso:[],
        returns:{description:null, type:"boolean"},
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "attr:TreeNode.children":{
        ref:"attr:TreeNode.children",
        flags:"IRW",
        description:"For trees with the modelType \"children\", this property specifies the children of this\n TreeNode.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.childrenProperty')}",
        name:"children",
        seeAlso:[
            {ref:"attr:Tree.modelType", description:null},
            {ref:"attr:Tree.childrenProperty", description:null}
        ],
        valueType:"List of TreeNode",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:SelectItem.showOver":{
        ref:"attr:SelectItem.showOver",
        flags:"IRWA",
        description:"When the user rolls over the select item, should the pickButton display it's \n <code>Over</code> state?",
        name:"showOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "attr:TextAreaItem.selectOnFocus":{
        ref:"attr:TextAreaItem.selectOnFocus",
        flags:"IRW",
        description:"If this property is set to true, whenever this item is given focus programmatically \n (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.<br>\n If false, the selection is not modified on focus - any previous selection within the\n item will be restored.<br>\n If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.selectOnFocus')}",
        name:"selectOnFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["focus"]
    },
    "attr:ListGrid.editFailedBaseStyle":{
        ref:"attr:ListGrid.editFailedBaseStyle",
        flags:"IRWA",
        description:"A base name for the CSS class applied to cells when editing has failed.<br>\n  If this listGrid is editable, this style will be applied to any edited cells for which\n  validation failed.<br>\n  As with the default 'baseStyle' property, this style will have \"Dark\", \"Over\", \"Selected\", \n  or \"Disabled\" appended to it according to the state of the cell.<br>\n If null, cells for which editing has failed will be rendered using the normal base style\n classNames, but with custom CSSText applied as derived from <code>this.editFailedCSSText</code>",
        name:"editFailedBaseStyle",
        seeAlso:[
            {ref:"attr:ListGrid.baseStyle", description:null},
            {ref:"attr:ListGrid.editFailedCSSText", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "method:Canvas.showContextMenu":{
        ref:"method:Canvas.showContextMenu",
        flags:"A",
        description:" Executed when the right mouse button is clicked.  The default implementation of\n this method auto-creates a ${isc.DocUtils.linkForRef('class:Menu')} from the ${isc.DocUtils.linkForRef('attr:Canvas.contextMenu')} property on\n this component and then calls ${isc.DocUtils.linkForRef('method:Menu.showContextMenu')} on it to show it.\n <p>\n If you want to show a standard context menu, you can simply define your Menu and set it as the\n contextMenu property on your component - you do not need to override this method.\n <p>\n If you want to do some other processing before showing a menu or do something else entirely, then\n you should override this method.  Note that the return value from this method controls whether or\n not the native browser context menu is shown.\n \n",
        name:"showContextMenu",
        seeAlso:[
            {ref:"attr:Canvas.contextMenu", description:null},
            {ref:"method:Menu.showContextMenu", description:null},
            {ref:"method:Canvas.hideContextMenu", description:null},
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false == don't show native context menu, true == show native context menu", 
         type:"boolean"},
        type:"method",
        platformNotes:"On the Mac platform, context menu functionality may be triggered by <code>Command+click</code><br>\n On the Opera browser, context menu functionality may be triggered by <code>Shift+Ctrl+click</code>",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "classMethod:isc.showPrompt":{
        ref:"classMethod:isc.showPrompt",
        flags:"",
        description:"\n	Method available on the isc object to show a modal prompt to the user.\n  This method will display the message using the Dialog.Prompt singleton object.<br>\n  Note: if this prompt is to be shown to the user during some slow JavaScript logic, we \n  advise calling this method, then using ${isc.DocUtils.linkForRef('method:Class.delayCall')} or ${isc.DocUtils.linkForRef('classMethod:Timer.setTimeout')}\n  to kick off the slow logic in a separate thread. This ensures that the prompt is showing\n  before the lengthy execution begins.\n  \n\n",
        name:"showPrompt",
        seeAlso:[
            {ref:"classAttr:Dialog.Prompt", description:null}
        ],
        params:[
            {description:"message to display", optional:false, name:"message", defaultValue:null, 
             type:"string"},
            {description:"additional properties for the Dialog, applied before                                       the Dialog is shown", 
             optional:true,name:"properties", defaultValue:null, type:"object"}
        ],
        type:"classMethod",
        definingClass:"class:isc",
        groups:["Prompting"]
    },
    "attr:DataSourceField.valueMap":{
        ref:"attr:DataSourceField.valueMap",
        flags:"IR",
        description:"A valueMap is a set of legal values for a field.\n <p>\n The valueMap can be specified as either an Array of legal values, or as an Object \n where each property maps a stored value to a user-displayable value.\n <p>\n To enforce that a field should be constrained to only the values in the valueMap, either\n declare ${isc.DocUtils.linkForRef('attr:DataSourceField.type','field.type')} as \"enum\", or use an\n ${isc.DocUtils.linkForRef('classAttr:ValidatorTypes.isOneOf','isOneOf validator')} with explicitly listed values.  Otherwise,\n although a normal ${isc.DocUtils.linkForRef('class:SelectItem')} control will only allow values from the valueMap to be\n entered, other controls such as a ${isc.DocUtils.linkForRef('class:ComboBoxItem','ComboBox')} will allow other values \n to be entered.\n <p>\n In XML, a valueMap that specifies only a list of legal values is specified as follows:\n <pre>\n   &lt;valueMap&gt;\n   	&lt;value&gt;Pens &amp; Pencils&lt;/value&gt;\n   	&lt;value&gt;Stationery&lt;/value&gt;\n   	&lt;value&gt;Computer Products&lt;/value&gt;\n   	&lt;value&gt;Furniture&lt;/value&gt;\n   	&lt;value&gt;Misc&lt;/value&gt;\n   &lt;/valueMap&gt;\n </pre>\n A ValueMap that specifies stored values mapped to user-visible values is specified as\n follows:\n <pre>\n   &lt;valueMap&gt;\n   	&lt;value ID=\"1\"&gt;Pens &amp; Pencils&lt;/value&gt;\n   	&lt;value ID=\"2\"&gt;Stationery&lt;/value&gt;\n   	&lt;value ID=\"3\"&gt;Computer Products&lt;/value&gt;\n   	&lt;value ID=\"4\"&gt;Furniture&lt;/value&gt;\n   	&lt;value ID=\"5\"&gt;Misc&lt;/value&gt;\n   &lt;/valueMap&gt;\n </pre>",
        name:"valueMap",
        seeAlso:[],
        valueType:"ValueMap",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSourceField",
        groups:["dataType"]
    },
    "attr:RPCRequest.httpMethod":{
        ref:"attr:RPCRequest.httpMethod",
        flags:"IRW",
        description:"Selects the HTTP method that will be used for the request.  Valid values are \"POST\" and \"GET\".",
        name:"httpMethod",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"POST\"",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:CheckboxItem.checkedImage":{
        ref:"attr:CheckboxItem.checkedImage",
        flags:"IRW",
        description:"URL for the image to display when this checkbox is selected, or checked.\n This is the base image name - if <code>showValueIconOver</code> et al are set, the\n state (<code>\"Over\"</code>, <code>\"Down\"</code> and <code>\"Disabled\"</code>) will be\n added to this name as the user intereacts with the checkbox, as well as the \n <code>\".gif\"</code> extension",
        name:"checkedImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/DynamicForm/checked.gif\"",
        type:"attr",
        definingClass:"class:CheckboxItem",
        groups:["appearance"]
    },
    "attr:TreeGrid.canReorderRecords":{
        ref:"attr:TreeGrid.canReorderRecords",
        flags:"IRWA",
        description:"Indicates whether records can be reordered by dragging within this listGrid.",
        name:"canReorderRecords",
        seeAlso:[
            {ref:"attr:TreeNode.canDrag", description:null},
            {ref:"attr:TreeNode.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragReparent')}"],
        definingClass:"class:TreeGrid",
        groups:["dragdrop"]
    },
    "method:Button.setSelected":{
        ref:"method:Button.setSelected",
        flags:"",
        description:" Select this object.\n",
        name:"setSelected",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["state"]
    },
    "group:menuIcons":{
        ref:"group:menuIcons",
        refs:["attr:MenuItem.checked", "attr:MenuItem.icon", "attr:MenuItem.iconWidth", 
         "attr:MenuItem.iconHeight"],
        name:"menuIcons",
        seeAlso:[],
        type:"group"
    },
    "method:Tree.closeFolder":{
        ref:"method:Tree.closeFolder",
        flags:"",
        description:"\n Closes a folder\n\n",
        name:"closeFolder",
        seeAlso:[],
        params:[
            {description:"folder to close", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:Window.headerControls":{
        ref:"attr:Window.headerControls",
        flags:"IR",
        description:"Array of members to show in the Window header.  \n <P>\n The default value of <code>headerControls</code> is an Array of Strings listing the\n standard header controls in their default order:\n <pre>\n    headerControls : [\"headerIcon\", \"headerLabel\", \n                      \"minimizeButton\", \"maximizeButton\", \"closeButton\"]\n </pre>\n You can override <code>headerControls</code> to change the order of standard controls in\n the header.  You can also omit standard controls this way, although it more efficient to\n use the related \"show\" property if available (eg ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton')}).  \n <P>\n By embedding a Canvas directly in this list you can add arbitrary additional controls to\n the header, for example, an additional button (eg return to dock) or a DynamicForm with\n various kinds of input controls.  Tip: custom controls need to set layoutAlign:\"center\"\n to appear vertically centered.",
        name:"headerControls",
        seeAlso:[],
        valueType:"Array of String",
        defaultValue:"(see below)",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('windowHeaderControls')}"],
        definingClass:"class:Window"
    },
    "attr:HTMLFlow.evalScriptBlocks":{
        ref:"attr:HTMLFlow.evalScriptBlocks",
        flags:"IR",
        description:"If <code>evalScriptBlocks</code> is true, HTMLFlow will pre-process the loaded HTML in order to\n mimic how the HTML would execute if it were loaded as an independent page or loaded via an\n IFRAME.  \n <P>\n This feature is intended to assist with migrating existing applications to SmartClient.\n <P>\n Note that, if evalScriptBlocks is false, &lt;SCRIPT&gt; blocks will still be detected and disabled\n to avoid the inconsistent results across different browsers.",
        name:"evalScriptBlocks",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "class:RichTextItem":{
        methods:[],
        ref:"class:RichTextItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:RichTextItem.showTitle", "attr:RichTextItem.startRow", "attr:RichTextItem.endRow", 
         "attr:RichTextItem.colSpan","attr:RichTextItem.controlGroups"],
        description:"FormItem for rich text (HTML) editing. Makes use of a ${isc.DocUtils.linkForRef('class:RichTextEditor')} as the \n editing interface.",
        name:"RichTextItem",
        seeAlso:[],
        type:"class"
    },
    "attr:RowSpacerItem.colSpan":{
        ref:"attr:RowSpacerItem.colSpan",
        flags:"IRW",
        description:"by default, separators span all remaining columns",
        name:"colSpan",
        seeAlso:[],
        valueType:"number",
        defaultValue:"\"*\"",
        type:"attr",
        definingClass:"class:RowSpacerItem",
        groups:["appearance"]
    },
    "classMethod:Array.compareAscending":{
        ref:"classMethod:Array.compareAscending",
        flags:"A",
        description:" Compare two values for an ascending order sort, using locale-sensitive comparison.\n",
        name:"compareAscending",
        seeAlso:[],
        params:[
            {description:"first value to compare", optional:false, name:"a", defaultValue:null, 
             type:"any"},
            {description:"second value to compare", optional:false, name:"b", defaultValue:null, 
             type:"any"}
        ],
        returns:{description:"negative == second is larger, 0 == same value, positive == first is larger", 
         type:"number"},
        type:"classMethod",
        definingClass:"object:Array",
        groups:["sorting"]
    },
    "method:ImgButton.setActionType":{
        ref:"method:ImgButton.setActionType",
        flags:"",
        description:" Update the 'actionType' for this canvas (radio / checkbox / button)\n If the canvas is currently selected, and the passed in actionType is 'button'\n this method will deselect the canvas.\n",
        name:"setActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state", "event handling"]
    },
    "method:Canvas.isVisible":{
        ref:"method:Canvas.isVisible",
        flags:"",
        description:" Returns true if the widget is visible, taking all parents into account, so that a widget\n which is not hidden might still report itself as not visible if it is within a hidden\n parent.\n <P>\n NOTE: Undrawn widgets will report themselves as visible if they would be visible if drawn.\n\n",
        name:"isVisible",
        seeAlso:[],
        returns:{description:"true if the widget is visible, false otherwise", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["visibility"]
    },
    "method:DataBoundComponent.setDataSource":{
        ref:"method:DataBoundComponent.setDataSource",
        flags:"",
        description:" Bind to a new DataSource.\n <P>\n Like passing the \"dataSource\" property on creation, binding to a DataSource means that the\n component will use the DataSource to provide default data for its fields.\n <P>\n When binding to a new DataSource, if the component has any existing \"fields\" or has a dataset,\n these will be discarded by default, since it is assumed the new DataSource may represent a\n completely unrelated set of objects.  If the old \"fields\" are still relevant, pass them to\n setDataSource().\n \n",
        name:"setDataSource",
        seeAlso:[],
        params:[
            {description:"DataSource to bind to", optional:false, name:"dataSource", defaultValue:null, 
             type:"ID or DataSource"},
            {description:"optional array of fields to use", optional:false, name:"fields", 
             defaultValue:null,type:"Array of Fields"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('WSDLDataSource')}"],
        definingClass:"interface:DataBoundComponent"
    },
    "attr:DSRequest.startRow":{
        ref:"attr:DSRequest.startRow",
        flags:"IR",
        description:"Starting row of requested results, used only with fetch operations.\n <p>\n Note that startRow and endRow are zero-based, so startRow: 0, endRow: 1 is a request\n for the first two records.",
        name:"startRow",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:DSRequest",
        groups:["paging"]
    },
    "attr:Canvas.resizeFrom":{
        ref:"attr:Canvas.resizeFrom",
        flags:"IRWA",
        description:"Allows resizing in certain edges or corners. The default value of null indicates that\n      the widget is resizable from any corner or edge. To restrict resizing to only certain\n      corners, set resizeFrom to an array of any of the values listed:<br>\n      T      top edge<br>\n      B      bottom edge<br>\n      L      left edge<br>\n      R      right edge<br>\n      TL     top-left corner<br>\n      TR     top-right corner<br>\n      BL     bottom-left corner<br>\n      BR     bottom-right corner<br>\n	    E.g. setting this property to a value of [\"R\",\"TR\",\"BR\"] would restrict resizing to\n      the right edge, top-right corner and bottom-right corner only",
        name:"resizeFrom",
        seeAlso:[],
        valueType:"array",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragResize')}"],
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "method:Array.dataChanged":{
        ref:"method:Array.dataChanged",
        flags:"A",
        description:" Method called when this array changes in some way.  Observe the method to react to changes in\n this list.\n <P>\n Note: dataChanged() will only fire when items are added, removed or rearranged.  If a list\n contains objects, dataChanged() will not fire if changes are made to objects within the list\n without changing their position within the list.  If an observer of dataChanged() needs to react\n to such a change, you can manually fire dataChanged() by simply calling it.\n <P>\n Note: may be called multiple times as the result of a multi-item add or remove, etc.\n\n",
        name:"dataChanged",
        seeAlso:[],
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "type:Orientation":{
        ref:"type:Orientation",
        values:[
            {description:"members laid out vertically", value:"Layout.VERTICAL"},
            {description:"members laid out horizontally", value:"Layout.HORIZONTAL"}
        ],
        description:null,
        name:"Orientation",
        seeAlso:[],
        type:"type",
        groups:["orientation"]
    },
    "method:GridRenderer.getNearestRowToEvent":{
        ref:"method:GridRenderer.getNearestRowToEvent",
        flags:"",
        description:"			Returns the nearest row to the event coordinates\n",
        name:"getNearestRowToEvent",
        seeAlso:[],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events", "selection"]
    },
    "method:SectionStack.removeSection":{
        ref:"method:SectionStack.removeSection",
        flags:"",
        description:"\n Remove a section or set of sections from the SectionStack.  The removed sections' header\n and items (if any) are automatically destroyed.\n\n",
        name:"removeSection",
        seeAlso:[],
        params:[
            {description:"Section(s) to remove.  For this                  parameter, you can pass the position of the section in the\n                  SectionStack, the ID of the section, or a List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('sectionsAddAndRemove')}"],
        definingClass:"class:SectionStack"
    },
    "attr:ResultSet.dataSource":{
        ref:"attr:ResultSet.dataSource",
        flags:"IR",
        description:"What ${isc.DocUtils.linkForRef('class:DataSource')} is this resultSet associated with?",
        name:"dataSource",
        seeAlso:[],
        valueType:"DataSource or ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet"
    },
    "attr:Canvas.destroying":{
        ref:"attr:Canvas.destroying",
        flags:"RA",
        description:"This property is set to true when the ${isc.DocUtils.linkForRef('method:Canvas.destroy')} method is called on a widget.\n If this property is true, but ${isc.DocUtils.linkForRef('attr:Canvas.destroyed')} is not, this indicates the canvas is\n in the process of being destroyed.",
        name:"destroying",
        seeAlso:[
            {ref:"method:Canvas.destroy", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas"
    },
    "method:CellSelection.selectCell":{
        ref:"method:CellSelection.selectCell",
        flags:"",
        description:"			Select a particular cell\n",
        name:"selectCell",
        seeAlso:[],
        params:[
            {description:"row index of cell to select", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column index of cell to select", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection"]
    },
    "group:communication":{
        ref:"group:communication",
        refs:["type:SendMethod"],
        name:"communication",
        seeAlso:[],
        type:"group"
    },
    "attr:FormItem.errorCellClassName":{
        ref:"attr:FormItem.errorCellClassName",
        deprecated:"As of SmartClient version 5.5 deprecated in favor of ${isc.DocUtils.linkForRef('attr:FormItem.cellStyle')}",
        flags:"IRW",
        description:"CSS class for a form item's cell when a validation error is showing.",
        name:"errorCellClassName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"formError\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:DataSource.supportsTextMatchStyle":{
        ref:"method:DataSource.supportsTextMatchStyle",
        flags:"A",
        description:" Does this dataSource support the specified \"textMatchStyle\" when performing a filter\n operation against a text field.\n",
        name:"supportsTextMatchStyle",
        seeAlso:[],
        params:[
            {description:"textMatchStyle to check. If passed a null value, assume                                an exact match is being requested.", 
             optional:false,name:"textMatchStyle", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:DataSource"
    },
    "attr:PickTreeItem.dataSource":{
        ref:"attr:PickTreeItem.dataSource",
        flags:"IRA",
        description:"If specified, the tree of possible options will be derived from the dataSource as a\n ResultTree, rather than using this.valueTree.  Options can be loaded on demand or up\n front according tp ${isc.DocUtils.linkForRef('attr:PickTreeItem.loadDataOnDemand')}.",
        name:"dataSource",
        seeAlso:[],
        valueType:"datasource",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:PickTreeItem"
    },
    "attr:StatefulCanvas.showDown":{
        ref:"attr:StatefulCanvas.showDown",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes down in this object?",
        name:"showDown",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "class:DetailViewer":{
        exampleConfig:"DetailViewer.xml",
        methods:["method:DetailViewer.setData", "method:DetailViewer.viewSelectedData"],
        type:"class",
        ref:"class:DetailViewer",
        classAttrs:[],
        treeLocation:["Client Reference/Grids"],
        classMethods:[],
        description:"Displays one or more records \"horizontally\" with one property per line.",
        attrs:["attr:DetailViewer.data", "attr:DetailViewer.fields", "attr:DetailViewer.fieldIdProperty", 
         "attr:DetailViewer.recordsPerBlock","attr:DetailViewer.blockSeparator", "attr:DetailViewer.showEmptyField", 
         "attr:DetailViewer.emptyCellValue","attr:DetailViewer.labelPrefix", "attr:DetailViewer.labelSuffix", 
         "attr:DetailViewer.wrapLabel","attr:DetailViewer.labelStyle", "attr:DetailViewer.cellStyle", 
         "attr:DetailViewer.headerStyle","attr:DetailViewer.separatorStyle", "attr:DetailViewer.dateFormatter", 
         "attr:DetailViewer.showEmptyMessage","attr:DetailViewer.emptyMessage", "attr:DetailViewer.emptyMessageStyle", 
         "attr:DetailViewer.loadingMessage","attr:DetailViewer.loadingMessageStyle"],
        implementsInterfaces:["DataBoundComponent"],
        name:"DetailViewer",
        seeAlso:[]
    },
    "attr:ListGridField.editorIconHeight":{
        ref:"attr:ListGridField.editorIconHeight",
        flags:"IRA",
        description:"If this field is editable, this property will be passed to editors displayed for\n cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconHeight')}.<br>\n If this property unset, the iconHeight property from the editor can be picked up from \n ${isc.DocUtils.linkForRef('attr:ListGridField.iconHeight')} instead.",
        name:"editorIconHeight",
        seeAlso:[
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:GridRenderer.snapToCells":{
        ref:"attr:GridRenderer.snapToCells",
        flags:"IRW",
        description:"Should drag-and-drop operations snap the dragged object into line with the nearest cell?",
        name:"snapToCells",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["dragdrop"]
    },
    "attr:ListGrid.emptyCellValue":{
        ref:"attr:ListGrid.emptyCellValue",
        flags:"IRW",
        description:"The value to display for cells whose value is null or the empty string after applying\n formatCellValue and valueMap (if any).\n <p>\n This is the grid-wide attribute.  You may also set the emptyCellValue on a per-field basis.",
        name:"emptyCellValue",
        seeAlso:[
            {ref:"attr:ListGridField.emptyCellValue", description:null}
        ],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('emptyValues')}"],
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "method:DynamicForm.resetValues":{
        ref:"method:DynamicForm.resetValues",
        flags:"",
        description:"\n Same as ${isc.DocUtils.linkForRef('method:DynamicForm.reset')}.\n\n",
        name:"resetValues",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:FormItem.accessKey":{
        ref:"attr:FormItem.accessKey",
        flags:"IRW",
        description:"AccessKey - a keyboard shortcut to trigger a form item's default behavior.<br>\n      Note: Alt+ (or in Moz Firefox 2.0 and above, Shift+Alt+) the specified key will \n      trigger the form item's default behavior.",
        name:"accessKey",
        seeAlso:[],
        valueType:"keyChar",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["focus"]
    },
    "attr:ListGridRecord.isSeparator":{
        ref:"attr:ListGridRecord.isSeparator",
        flags:"IR",
        description:"Default property name denoting a separator row.<br>\n When set to <code>true</code>, defines a horizontal separator in the listGrid\n object. Typically this is specified as the only property of a record object, since a\n record with <code>isSeparator:true</code> will not display any values.<br>\n Note: this attribute name is governed by ${isc.DocUtils.linkForRef('attr:ListGrid.isSeparatorProperty')}.",
        name:"isSeparator",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridRecord"
    },
    "attr:SelectItem.defaultValue":{
        ref:"attr:SelectItem.defaultValue",
        flags:"IRW",
        description:"Static default value for this SelectItem. To default to the first option use\n ${isc.DocUtils.linkForRef('attr:SelectItem.defaultToFirstOption')} instead.",
        name:"defaultValue",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "method:Date.toShortDate":{
        ref:"method:Date.toShortDate",
        flags:"",
        description:" Returns the date as a formatted string using the format set up via the \n <code>setShortDisplayFormat()</code> method.\n",
        name:"toShortDate",
        seeAlso:[],
        params:[
            {description:"Optional Format for the date returned", optional:false, name:"format", 
             defaultValue:null,type:"DateDisplayFormat"}
        ],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "method:Menu.hideContextMenu":{
        ref:"method:Menu.hideContextMenu",
        flags:"",
        description:" Hide the context menu - alias for hide()\n",
        name:"hideContextMenu",
        seeAlso:[],
        type:"method",
        definingClass:"class:Menu",
        groups:["visibility"]
    },
    "method:Menu.setItemEnabled":{
        ref:"method:Menu.setItemEnabled",
        flags:"",
        description:"          Enables or disables the menu item according to the value of newState, and redraws\n          the menu if necessary. Returns true if there's a change in the enabled state.\n\n",
        name:"setItemEnabled",
        seeAlso:[],
        params:[
            {description:"pointer to (or number of) the item in question", optional:false, name:"item", 
             defaultValue:null,type:"item or number"},
            {description:"true to enable the menu item, false to disable it", optional:false, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if the enabled state was changed", type:"boolean"},
        type:"method",
        definingClass:"class:Menu"
    },
    "method:Canvas.draw":{
        ref:"method:Canvas.draw",
        flags:"",
        description:"      Draws the widget on the page.\n",
        name:"draw",
        seeAlso:[],
        returns:{description:"Pointer to this canvas.  Returned so statements like the following will						work:<br>\n                          var myCanvas = Canvas.newInstance({...}).draw();", 
         type:"canvas"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "method:Canvas.getBottom":{
        ref:"method:Canvas.getBottom",
        flags:"",
        description:" Return the bottom coordinate of this object as rendered, relative to its enclosing context,\n in pixels.\n\n",
        name:"getBottom",
        seeAlso:[],
        returns:{description:"bottom coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "sizing"]
    },
    "attr:Slider.showRange":{
        ref:"attr:Slider.showRange",
        flags:"IRW",
        description:"Indicates whether labels for the min and max values of the slider should be displayed. The\n default positions for these labels are below the start/end of a horizontal slider, or to the\n right of the start/end of a vertical slider.",
        name:"showRange",
        seeAlso:[
            {ref:"attr:Slider.minValueLabel", description:null},
            {ref:"attr:Slider.maxValueLabel", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider"
    },
    "type:DateInputFormat":{
        ref:"type:DateInputFormat",
        description:"3 character string containing the <code>\"M\"</code>, <code>\"D\"</code> and <code>\"Y\"</code>\n  characters to indicate the format of strings being parsed into Date instances via \n  <code>Date.parseInput()</code>.<br>\n  As an example - an input format of \"MDY\" would parse \"01/02/1999\" to Jan 2nd 1999",
        name:"DateInputFormat",
        seeAlso:[],
        type:"type"
    },
    "class:Layout":{
        methods:["method:Layout.getMemberOffset", "method:Layout.setLayoutMargin", 
         "method:Layout.getMemberDefaultBreadth","method:Layout.getMemberSizes", "method:Layout.reflow", "method:Layout.reflowNow", 
         "method:Layout.getMember","method:Layout.getMemberNumber", "method:Layout.hasMember", "method:Layout.getMembers", 
         "method:Layout.addMember","method:Layout.addMembers", "method:Layout.removeMember", "method:Layout.removeMembers", 
         "method:Layout.showMember","method:Layout.hideMember", "method:Layout.reorderMember", "method:Layout.reorderMembers", 
         "method:Layout.drop","method:Layout.getDropPosition", "method:Layout.hideDropLine"],
        ref:"class:Layout",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:Layout.members", "attr:Layout.overflow", "attr:Layout.orientation", 
         "attr:Layout.vPolicy","attr:Layout.hPolicy", "attr:Layout.enforcePolicy", "attr:Layout.defaultLayoutAlign", 
         "attr:Layout.align","attr:Layout.reverseOrder", "attr:Layout.paddingAsLayoutMargin", 
         "attr:Layout.layoutMargin","attr:Layout.layoutLeftMargin", "attr:Layout.layoutRightMargin", 
         "attr:Layout.layoutTopMargin","attr:Layout.layoutBottomMargin", "attr:Layout.membersMargin", 
         "attr:Layout.leaveScrollbarGap","attr:Layout.memberOverlap", "attr:Layout.resizeBarClass", "attr:Layout.resizeBarSize", 
         "attr:Layout.animateMembers","attr:Layout.animateMemberTime", "attr:Layout.canDropComponents", 
         "attr:Layout.dropLineThickness","attr:Layout.showDragPlaceHolder", "attr:Layout.placeHolderProperties", 
         "attr:Layout.stackZIndex","attr:Layout.managePercentBreadth", "attr:Layout.placeHolderDefaults", 
         "attr:Layout.dropLine"],
        description:"A subclass of Canvas that automatically arranges other Canvases according to a layout policy.\n <br><br>\n A Layout manages a set of \"member\" Canvases initialized via the \"members\" property.  Layouts\n can have both \"members\", which are managed by the Layout, and normal Canvas children, which\n are unmanaged.\n <br><br>\n Rather than using the Layout class directly, use the HLayout, VLayout, HStack and VStack\n classes, which are subclasses of Layout preconfigured for horizontal or vertical stacking,\n with the \"fill\" (VLayout) or \"none\" (VStack) ${isc.DocUtils.linkForRef('type:LayoutPolicy','policies')} already set.\n <br><br>\n Layouts and Stacks may be nested to create arbitrarily complex layouts.\n <br><br>\n To show a resizer bar after (to the right or bottom of) a layout member, set showResizeBar to\n true on that member component (not on the HLayout or VLayout).  Resizer bars override\n membersMargin spacing.\n <br><br> \n Like other Canvas subclasses, Layout and Stack components may have % width and height\n values. To create a dynamically-resizing layout that occupies the entire page (or entire\n parent component), set width and height to \"100%\".",
        name:"Layout",
        seeAlso:[
            {ref:"type:LayoutPolicy", description:"for available policies"},
            {ref:"class:VLayout", description:null},
            {ref:"class:HLayout", description:null},
            {ref:"class:VStack", description:null},
            {ref:"class:HStack", description:null},
            {ref:"class:LayoutSpacer", description:null}
        ],
        type:"class"
    },
    "attr:StaticTextItem.textBoxStyle":{
        ref:"attr:StaticTextItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class for this item",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"staticTextItem\"",
        type:"attr",
        definingClass:"class:StaticTextItem",
        groups:["appearance"]
    },
    "method:FormItem.getDisplayFieldName":{
        ref:"method:FormItem.getDisplayFieldName",
        flags:"",
        description:" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.\n If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method\n will return the title field for the <code>optionDataSource</code>\n",
        name:"getDisplayFieldName",
        seeAlso:[],
        returns:{description:"display field name, or null", type:"String"},
        type:"method",
        definingClass:"class:FormItem"
    },
    "method:Canvas.handleHover":{
        ref:"method:Canvas.handleHover",
        flags:"A",
        description:" Handler fired on a delay when the user hovers the mouse over this hover-target.\n Default implementation will fire <code>this.hover()</code> (if defined), and handle \n showing the hover canvas if <code>this.showHover</code> is true.\n",
        name:"handleHover",
        seeAlso:[
            {ref:"attr:Canvas.canHover", description:null},
            {ref:"attr:Canvas.showHover", description:null},
            {ref:"method:Canvas.hover", description:null}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["hovers"]
    },
    "attr:NativeCheckboxItem.showLabel":{
        ref:"attr:NativeCheckboxItem.showLabel",
        flags:"IRW",
        description:"Should we should the label text next to the checkbox item.",
        name:"showLabel",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:NativeCheckboxItem"
    },
    "method:ValuesManager.showFieldErrors":{
        ref:"method:ValuesManager.showFieldErrors",
        flags:"",
        description:" Method to explicitly show the latest set of validation errors present on some field \n within this ValuesManager.<br>\n If the field in question is present as a visible item in a member form, the form item\n will be redrawn to display the error message(s).\n Otherwise ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} will be fired to allow \n custom handling of hidden errors.\n",
        name:"showFieldErrors",
        seeAlso:[],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:ImgButton.iconSize":{
        ref:"attr:ImgButton.iconSize",
        flags:"IR",
        description:"Size in pixels of the icon image.\n <P>\n The <code>iconWidth</code> and <code>iconHeight</code> properties can be used to\n configure width and height separately.",
        name:"iconSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:Chart.chartType":{
        ref:"attr:Chart.chartType",
        flags:"IR",
        description:"Type of chart to draw, see ${isc.DocUtils.linkForRef('type:ChartType')} for a list of known types.",
        name:"chartType",
        seeAlso:[],
        valueType:"ChartType",
        defaultValue:"\"Column\"",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "method:Canvas.addPeer":{
        ref:"method:Canvas.addPeer",
        flags:"",
        description:"      Adds newPeer as a peer of this widget (also making it a child of this widget's parent, if\n      any), set up a named object reference (i.e., this[name]) to the new widget if name is\n      provided, and draw the peer if this widget has been drawn already.<br>\n      The widget to be added as a peer will be removed from its old master and/or parent, if any,\n      and it will be added as a child to the parent of this canvas (if any)\n",
        name:"addPeer",
        seeAlso:[],
        params:[
            {description:"new peer widget to add", optional:false, name:"newPeer", defaultValue:null, 
             type:"canvas"},
            {description:"name to assign to peer (eg: this[peer] == child)", optional:true, 
             name:"name",defaultValue:null, type:"string"},
            {description:"if true, peer will not automatically be drawn (only                                  for advanced use)", 
             optional:true,name:"autoDraw", defaultValue:null, type:"boolean"},
            {description:"if true, when draw is called on the master widget, the peer\n                                  will be drawn before the master", 
             optional:true,name:"preDraw", defaultValue:null, type:"boolean"}
        ],
        returns:{description:"the new peer, or null if it couldn't be added", type:"canvas"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:Canvas.canDragScroll":{
        ref:"attr:Canvas.canDragScroll",
        flags:"IRWA",
        description:"If this Canvas is canAcceptDrop:true, when the user drags a droppable widget over\n      an edge of the widget, should we scroll to show the rest of the widget's content?\n      Returned from canvas.shouldDragScroll().",
        name:"canDragScroll",
        seeAlso:[
            {ref:"method:Canvas.shouldDragScroll", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragging"]
    },
    "attr:TreeGrid.folderDropImage":{
        ref:"attr:TreeGrid.folderDropImage",
        deprecated:"as part of SmartClient release 5.5 in favor of ${isc.DocUtils.linkForRef('attr:TreeGrid.folderIcon')}",
        flags:"IRW",
        description:"The filename of the icon displayed for a folder node that will accept drag-and-drop\n data when the mouse is released.",
        name:"folderDropImage",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "attr:SelectItem.pickButtonSrc":{
        ref:"attr:SelectItem.pickButtonSrc",
        deprecated:"As of SmartClient version 5.5, pickButtonSrc has been deprecated in   favor of ${isc.DocUtils.linkForRef('attr:SelectItem.pickerIconSrc')}.",
        flags:"IRWA",
        description:"Source for image to show for the pick button",
        name:"pickButtonSrc",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "method:ImgButton.setAutoFit":{
        ref:"method:ImgButton.setAutoFit",
        flags:"",
        description:" Setter method for the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.autoFit')} property. Pass in true or false to turn\n autoFit on or off. When autoFit is set to <code>false</code>, canvas will be resized to\n it's previously specified size.\n",
        name:"setAutoFit",
        seeAlso:[],
        params:[
            {description:"New autoFit setting.", optional:false, name:"autoFit", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ImgButton"
    },
    "group:sqlDataSource":{
        ref:"group:sqlDataSource",
        title:"SQL DataSources",
        treeLocation:["Client Reference/Data Binding/DataSource"],
        refs:[],
        description:"For prototyping purposes, the ISC server supports basic SQL connectivity for DataSources\n defined in XML.  Because the request processing flow for the built-in SQL engine is\n identical to the flow used for \n ${isc.DocUtils.linkForRef('group:serverDataIntegration','integrating with other Java storage engines')},\n when your application grows past prototype stage you can switch to a different storage\n engine without wasted work.\n <P>\n To use the built-in SQL engine, declare a ${isc.DocUtils.linkForRef('class:DataSource')} in XML format with\n ${isc.DocUtils.linkForRef('attr:DataSource.serverType')} set to \"sql\", and place it in the shared dataSources directory\n ([webroot]/shared/ds by default) in a file called \"[dataSourceId].ds.xml\".\n <p>\n You can then use the ${isc.DocUtils.linkForRef('group:adminConsole','Admin Console')} to configure database access,\n as well as to automatically create and populate a database table based on your DataSource.\n By default, DataSources will use the \"default database\" from the admin console, however you\n can set ${isc.DocUtils.linkForRef('attr:DataSource.dbName')} to the name of a specific database configuration you have\n configured via the Admin Console.\n <P>\n The list of databases known to work with the the built-in SQL logic is as follows:\n <p>\n <table class='normal'>\n <tr><td width=40></td><td width=200><i>HSQLDB 1.7.x, 1.8.x</i></td><td></td></tr>\n <tr><td></td><td><i>IBM DB2 8.x, 9.x</i></td><td></td></tr>\n <tr><td></td><td><i>MS SQL Server 2000</i></td><td></td></tr>\n <tr><td></td><td><i>MySQL 3.2.x, 4.0.x, 4.1.x, 5.0.x, 5.1.x</i></td><td></td></tr>\n <tr><td></td><td><i>Oracle 8.0.5, 8i, 9i, 10g</i></td><td></td></tr>\n <tr><td></td><td><i>PostgreSQL 7.x, 8.x</i></td><td></td></tr>\n </table>\n <p>You will also need a JDBC driver for your specific database. Licensing restrictions\n prevent us including any JDBC driver other than the one for HSQLDB.  However, you\n can download these drivers for free from the vendors' websites.  If your specific database\n server or version is not listed above, please go to the\n <a href=\"http://forums.smartclient.com\">SmartClient forums</a> for assistance.\n <P>\n You can also connect to an existing database table - the ISC SQL engine simply generates a\n DB table whose columns match the DataSource field names and types, so you can instead\n declare a DataSource whose fields match an existing table.  To troubleshoot such an\n integration, you can look at the generated SQL for both table creation and ${isc.DocUtils.linkForRef('class:DSRequest')}\n handling in the server-side log.\n <P>\n Once you have your SQL DataSource connected to a table, in a default SDK installation,\n DSRequests for your DataSource will be sent to the default\n ${isc.DocUtils.linkForRef('classAttr:RPCManager.actionURL','actionURL')}, and hence handled automatically, without you having\n to write any Java code, by the ${isc.DocUtils.linkForRef('group:iscInstall','IDACall servlet registered in web.xml')}.\n IDACall is a very simple servlet that just calls the server-side method\n dsRequest.execute() for all inbound requests.\n <P>\n If you need to customize how DSRequests are handled on the server, you can write your own\n version of the IDACall servlet to dispatch requests, as described under ${isc.DocUtils.linkForRef('class:RPCManager')}\n and exemplified by the\n <a href='/examples/server_integration/#customDataSourceIntegration' onclick=\"window.open('/examples/server_integration/#customDataSourceIntegration');return false;\">Custom DataSource Integration example</a>.\n This allows you add your own logic either before or after calling dsRequest.execute() \n to invoke the normal behavior of the SQL engine.  This means you can implement:\n <ol>\n <li> authenticated access (also see ${isc.DocUtils.linkForRef('group:relogin')})\n <li> custom validation rules, via inspecting the inbound DSRequest and sending back a\n      DSResponse with errors set\n <li> business rules such as user-based data visibility, by eg calling\n      dsRequest.setCriteria() to set certain fixed criteria on all requests\n <li> side effects such as sending notifications mails after data is updated\n <li> server-side formatting or other derived values such as totals, by retrieving the\n      default returned dataset via dsResponse.getData(), and updating it via\n      dsResponse.setData()\n </ol>\n When your application grows past prototype stage and you switch to a different storage\n engine, you should be able to reuse any logic that surrounds the dsRequest.execute() call,\n simply replacing that dsRequest.execute() call with code that performs the dsRequest against\n your own storage engine.",
        name:"sqlDataSource",
        seeAlso:[],
        type:"group",
        requiresModules:["SCServer"]
    },
    "method:Canvas.scrollToPercent":{
        ref:"method:Canvas.scrollToPercent",
        flags:"",
        description:"  Scroll this widget to some position specified as a percentage of scroll size in either \n (or both) direction(s).\n\n",
        name:"scrollToPercent",
        seeAlso:[],
        params:[
            {description:"Left Percentage position to scroll to                                         Will accept either a numeric percent value, or a \n                                        string like \"10%\".", 
             optional:false,name:"left", defaultValue:null, type:"number | string"},
            {description:"Top Percentage position to scroll to                                        Will accept either a numeric percent value, or a \n                                       string like \"10%\".", 
             optional:false,name:"top", defaultValue:null, type:"number | string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "attr:ListGridField.editorIconWidth":{
        ref:"attr:ListGridField.editorIconWidth",
        flags:"IRA",
        description:"If this field is editable, this property will be passed to editors displayed for\n cells within this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}.<br>\n If this property unset, the iconWidth property from the editor can be picked up from \n ${isc.DocUtils.linkForRef('attr:ListGridField.iconWidth')} instead.",
        name:"editorIconWidth",
        seeAlso:[
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:RPCRequest.callbackParam":{
        ref:"attr:RPCRequest.callbackParam",
        flags:"IRW",
        description:"For use only with the <code>scriptInclude</code> transport, this attribute specifies the\n name of the parameter from which the server expects to read the name of the JavaScript\n callback function.\n <P>\n SmartClient will use the callback mechanism provided by the server, then call\n ${isc.DocUtils.linkForRef('attr:RPCRequest.callback')} normally.\n <p>\n This attribute is ignored by all other transports.",
        name:"callbackParam",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"callback\"",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "type:TEXTAREA_WRAP":{
        ref:"type:TEXTAREA_WRAP",
        values:[
            {description:"don't allow wrapping at all", value:"TextAreaItem.OFF"},
            {description:"when the entered text reaches the edge of the text area,                                  wrap visibly but don't include line breaks in the textarea\n                                  value", 
             value:"TextAreaItem.SOFT"},
            {description:"when the entered text reaches the edge of the text area,                                   insert a line break", 
             value:"TextAreaItem.HARD"}
        ],
        description:null,
        name:"TEXTAREA_WRAP",
        seeAlso:[],
        type:"type"
    },
    "attr:Window.bodyDefaults":{
        ref:"attr:Window.bodyDefaults",
        flags:"IRWA",
        description:"Default properties for the body of the Window<br>\n You can change the class-level bodyDefaults for all Windows by changing this item\n or set  instance.body to be another object of properties to override for your instance only",
        name:"bodyDefaults",
        seeAlso:[],
        valueType:"object",
        defaultValue:"...",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "method:Canvas.scrolled":{
        ref:"method:Canvas.scrolled",
        flags:"",
        description:" Notification that this component has just scrolled.  Use with\n ${isc.DocUtils.linkForRef('method:Class.observe','observation')}.\n <P>\n Fires for both CSS and ${isc.DocUtils.linkForRef('class:Scrollbar','\"synthetic\" scrollbars')}.\n\n",
        name:"scrolled",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "classMethod:isc.timeStamp":{
        ref:"classMethod:isc.timeStamp",
        flags:"",
        description:"  Shorthand for <code>new Date().getTime();</code>, this returns a timeStamp - a large number\n  which is incremented by 1 every millisecond.  Can be used to generate unique identifiers,\n  or perform timing tasks.\n\n",
        name:"timeStamp",
        seeAlso:[],
        returns:{description:"a large integer (actually the number of milliseconds since 1/1/1970)", 
         type:"number"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:ComboBoxItem.optionDataSource":{
        ref:"attr:ComboBoxItem.optionDataSource",
        flags:"IRA",
        description:"If set, this FormItem will derive data to show in the PickList by fetching records from\n the specified <code>optionDataSource</code>.  The fetched data will be used as a\n ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} by extracting the\n ${isc.DocUtils.linkForRef('attr:FormItem.valueField','valueField')} and ${isc.DocUtils.linkForRef('attr:FormItem.displayField','displayField')} in\n the loaded records, to derive one valueMap entry per record loaded from the\n optionDataSource.  Multiple fields from the fetched data may be shown in the pickList by\n setting ${isc.DocUtils.linkForRef('attr:ComboBoxItem.pickListFields')}.\n <P>\n The data will be retrieved via a \"fetch\" operation on the DataSource, passing the \n ${isc.DocUtils.linkForRef('attr:PickList.pickListCriteria')} (if set) as criteria, and passing\n ${isc.DocUtils.linkForRef('attr:ComboBoxItem.optionFilterContext')} (if set) as DSRequest properties.\n <P>\n The fetch will be triggered when the pickList is first shown, or, you can set\n ${isc.DocUtils.linkForRef('attr:SelectItem.autoFetchData','autoFetchData:true')} to fetch when the FormItem is\n first drawn.  You can also call ${isc.DocUtils.linkForRef('method:PickList.fetchData')} at any time to manually \n trigger a fetch.\n <P>\n Data paging is automatically enabled if the optionDataSource supports it.  As the\n pickList is scrolled by the user, requests for additional data will be automatically\n issued.\n <P>\n For a pickList attached to a ComboBoxItem, new fetches are issued as the user types,\n with criteria set as described under ${isc.DocUtils.linkForRef('method:ComboBoxItem.getPickListFilterCriteria')}.\n If your dataSource is not capable of filtering results by search criteria (eg the\n dataSource is backed by an XML flat file), you can set ${isc.DocUtils.linkForRef('attr:ComboBoxItem.filterLocally')} to have the\n entire dataset loaded up front and filtering performed in the browser.  This disables\n data paging.\n <P>\n Setting optionDataSource also enables the basic ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}\n behaviors, eg, fetching individual display values before the pickList is shown.\n <P>\n Note that if a normal, static ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','valueMap')} is <b>also</b> specified\n for the field (either directly in the form item or as part of the field definition in\n the dataSource), it will be preferred to the data derived from the optionDataSource for\n whatever mappings are present.",
        name:"optionDataSource",
        seeAlso:[],
        valueType:"DataSource | String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "attr:ListGrid.freezeOnLeftText":{
        ref:"attr:ListGrid.freezeOnLeftText",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid and\n ${isc.DocUtils.linkForRef('attr:ListGrid.canFreezeFields','this.canFreezeFields')} is true, this string will be shown as the\n title for the menu item to freeze fields on the left of the scrollable body.",
        name:"freezeOnLeftText",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Freeze on left\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "classMethod:FileLoader.cacheStretchImgStates":{
        ref:"classMethod:FileLoader.cacheStretchImgStates",
        flags:"",
        description:"\n Caches a set of state stretch images derived from a base image.  This is useful for caching a set\n of images for a single component.  For example this code:\n <pre>\n isc.FileLoader.cacheStretchImgStates(\"/isomorphic/skins/SmartClient/images/button/button.png\",\n                                      \"Down,Over\");\n </pre>\n Will cause the following images to be cached:\n <pre>\n /isomorphic/skins/SmartClient/images/button/button_start.png\n /isomorphic/skins/SmartClient/images/button/button_stretch.png\n /isomorphic/skins/SmartClient/images/button/button_end.png\n /isomorphic/skins/SmartClient/images/button/button_Down_start.png\n /isomorphic/skins/SmartClient/images/button/button_Down_stretch.png\n /isomorphic/skins/SmartClient/images/button/button_Down_end.png\n /isomorphic/skins/SmartClient/images/button/button_Over_start.png\n /isomorphic/skins/SmartClient/images/button/button_Over_stretch.png\n /isomorphic/skins/SmartClient/images/button/button_Over_end.png\n </pre>\n\n",
        name:"cacheStretchImgStates",
        seeAlso:[
            {ref:"classMethod:FileLoader.cacheImgStates", description:null}
        ],
        params:[
            {description:"List of base image URLs from which stateful names are to be                                    derived.  This can either be a\n                                    string with comma separated baseURLs or an Array of baseURLs.", 
             optional:false,name:"baseURLs", defaultValue:null, type:"String or Array"},
            {description:"List of states to load.  If none specified, The following                                    default list will be used:\n                                    \"Down,Over,Selected,Selected_Down,Selected_Over\".  This can\n                                    either be a string with comma separated states or an Array\n                                    of states", 
             optional:true,name:"states", defaultValue:null, type:"String or Array"},
            {description:"List of StretchImg pieces to cache.  If not specified, the                                    following list will be used: \"start,stretch,end\".  This can\n                                    either be a string with comma separated piece names or an Array\n                                    of piece names.", 
             optional:true,name:"pieces", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified URLs                                      has completed caching.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "method:Canvas.moveTo":{
        ref:"method:Canvas.moveTo",
        flags:"",
        description:" Moves the widget so that its top-left corner is at the specified coordinates. \n <P>\n This method will also accept a single parameter as an object array with left and top given\n as properties.\n\n",
        name:"moveTo",
        seeAlso:[],
        params:[
            {description:"x-coordinate to move to in LOCAL coordinates						                       or Object with left and top properties", 
             optional:true,name:"left", defaultValue:null, type:"number or Object"},
            {description:"y-coordinate to move to in LOCAL coordinates", optional:true, name:"top", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"whether the component actually moved", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('move')}"],
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "classAttr:Hover.hoverCanvasDefaults":{
        ref:"classAttr:Hover.hoverCanvasDefaults",
        flags:"IRW",
        description:"Defaults to apply to the Hover canvas shown when the user hovers over some widget.\n By default this property is set to this object:<br><pre>\n       { defaultWidth:100, \n         defaultHeight:1,\n         baseStyle:\"canvasHover\",\n         align:\"left\",\n         valign:\"top\",\n         opacity:null\n        }\n </pre><br>\n Note that these properties can be overridden by individual widgets showing hovers, by\n modifying ${isc.DocUtils.linkForRef('attr:Canvas.hoverWidth')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverHeight')}, \n ${isc.DocUtils.linkForRef('attr:Canvas.hoverStyle')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverAlign')}, ${isc.DocUtils.linkForRef('attr:Canvas.hoverVAlign')}, \n ${isc.DocUtils.linkForRef('attr:Canvas.hoverOpacity')}, and ${isc.DocUtils.linkForRef('attr:Canvas.hoverWrap')}.",
        name:"hoverCanvasDefaults",
        seeAlso:[],
        valueType:"object",
        defaultValue:"{...}",
        type:"classAttr",
        definingClass:"class:Hover"
    },
    "attr:FormItem.hintStyle":{
        ref:"attr:FormItem.hintStyle",
        flags:"IRW",
        description:"CSS class for the \"hint\" string.",
        name:"hintStyle",
        seeAlso:[
            {ref:"attr:FormItem.hint", description:null}
        ],
        valueType:"string",
        defaultValue:"\"formHint\"",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:CanvasItem.canvasConstructor":{
        ref:"attr:CanvasItem.canvasConstructor",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:CanvasItem.canvas','this.canvas')} is not specified as a canvas instance at init\n time, a canvas will be created instead. This property denotes the class of that widget\n (Should be set to the name of a subclass of Canvas).",
        name:"canvasConstructor",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"Canvas\"",
        type:"attr",
        definingClass:"class:CanvasItem"
    },
    "method:ListGrid.deselectRecords":{
        ref:"method:ListGrid.deselectRecords",
        flags:"",
        description:"\n  Deselect a list of records passed in explicitly, or by index.\n  [Synonym for selectRecords(records, false)]\n\n      <br><i>methodType</i> action\n",
        name:"deselectRecords",
        seeAlso:[],
        params:[
            {description:"records (or row numbers) to deselect", optional:false, name:"records", 
             defaultValue:null,type:"Array of records | number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "attr:Button.showDisabled":{
        ref:"attr:Button.showDisabled",
        flags:"IRW",
        description:"Should we visibly change state when disabled?",
        name:"showDisabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonStates')}"],
        definingClass:"class:Button",
        groups:["state"]
    },
    "classMethod:XMLTools.toJS":{
        ref:"classMethod:XMLTools.toJS",
        flags:"",
        description:" Translates an XML fragment to JavaScript collections.  This method works just like the\n server-side method XML.toJS(Element, Writer):\n <ul>\n <li>  Elements become JavaScript Objects with each attribute becoming a property\n <li>  Subelements with just text (no child elements or attributes) become properties\n <li>  Subelements with child elements or attributes become sub objects\n </ul>\n For example, if you pass the following fragment to this method:\n <pre>\n &lt;foo&nbsp;bar=\"zoo\"&gt;\n     &nbsp;&nbsp;&lt;x&gt;y&lt;/x&gt;\n &lt;/foo&gt;\n </pre>\n You will get back the following JS structure: \n <pre>\n { bar:\"zoo\", x:\"y\"}\n </pre>\n All atomic property values will be of String type.  Use ${isc.DocUtils.linkForRef('method:DataSource.recordsFromXML')}\n to do schema-driven XML to JS transform, which can produce correctly typed values.\n \n",
        name:"toJS",
        seeAlso:[],
        params:[
            {description:"The element to tranform to JS", optional:false, name:"element", 
             defaultValue:null,type:"XMLElement or XMLDocument"}
        ],
        returns:{description:"The resulting JavaScript collection.", type:"Object"},
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('xmlServerValidationErrors')}"],
        definingClass:"class:XMLTools"
    },
    "attr:TreeGrid.canReparentNodes":{
        ref:"attr:TreeGrid.canReparentNodes",
        flags:"IRW",
        description:"If set this property allows the user to reparent nodes by dragging them from their\n current folder to a new folder.<br>\n <b>Backcompat:</b> For backwards compatibility with versions prior to SmartClient 1.5,\n if this property is unset, but <code>this.canAcceptDroppedRecords</code> is true, we\n allow nodes to be dragged to different folders.",
        name:"canReparentNodes",
        seeAlso:[
            {ref:"attr:TreeNode.canDrag", description:null},
            {ref:"attr:TreeNode.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["dragdrop"]
    },
    "attr:TextAreaItem.iconVAlign":{
        ref:"attr:TextAreaItem.iconVAlign",
        flags:"IR",
        description:"Align icons with the top edge of text area icons by default.",
        name:"iconVAlign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.TOP",
        type:"attr",
        definingClass:"class:TextAreaItem",
        groups:["formIcons"]
    },
    "attr:RichTextEditor.value":{
        ref:"attr:RichTextEditor.value",
        flags:"IRW",
        getter:["getValue"],
        description:"Initial value for the edit area.    Use <code>getValue()</code> and \n <code>setValue()</code> to update at runtime.",
        name:"value",
        setter:["setValue"],
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "attr:ViewLoader.loadingMessage":{
        ref:"attr:ViewLoader.loadingMessage",
        flags:"IR",
        description:"Message to show while the view is loading",
        name:"loadingMessage",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Loading View...\"",
        type:"attr",
        definingClass:"class:ViewLoader",
        groups:["viewLoading"]
    },
    "attr:Label.showFocusedIcon":{
        ref:"attr:Label.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "group:location":{
        ref:"group:location",
        refs:["method:Tree.findById", "method:Tree.find", "attr:Window.autoCenter"],
        name:"location",
        seeAlso:[],
        type:"group"
    },
    "attr:TreeGrid.fields":{
        ref:"attr:TreeGrid.fields",
        flags:"IRW",
        description:"An array of field objects, specifying the order, layout, dynamic calculation, and\n sorting behavior of each field in the treeGrid object. In TreeGrids, the fields\n array specifies columns. Each field in the fields array is TreeGridField object.\n <p>\n If ${isc.DocUtils.linkForRef('attr:TreeGrid.dataSource')} is also set, this value acts as a set of overrides as\n explained in ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}.",
        name:"fields",
        seeAlso:[
            {ref:"object:TreeGridField", description:null}
        ],
        valueType:"Array of TreeGridField",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["databinding"]
    },
    "method:Slider.valueChanged":{
        ref:"method:Slider.valueChanged",
        flags:"A",
        description:" This method is called when the slider value changes. This occurs when the setValue method is\n called, or when the slider is moved. Observe this method to be notified when the slider value\n changes.\n\n",
        name:"valueChanged",
        seeAlso:[
            {ref:"method:Class.observe", description:null}
        ],
        params:[
            {description:"the new value", optional:false, name:"value", defaultValue:null, type:"number"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:Slider"
    },
    "type:KeyName":{
        ref:"type:KeyName",
        description:"Strings to identify the various keys on the keyboard.\n <ul>\n <li>  For alpha keys, the single (uppercase) character value is used, such as \"Q\"\n <li>  For Numeric keys, the number is used as in a single character string, like \"1\"\n <li>  Function keys are identified as <code>\"f1\"</code> - <code>\"f12\"</code>\n <li>  Non alpha-numeric character keys (such as the key for \"[\" / \"{\") are identified by\n       their unmodified character value (the value obtained by hitting the key without \n       holding shift down), by default - exceptions are listed below.\n <li>  Additional key names:<br>\n      - <code>Space</code><br>    \n      - <code>Tab</code><br>    \n      - <code>Enter</code><br>\n      - <code>Escape</code><br>\n      - <code>Backspace</code><br>\n      - <code>Insert</code><br>\n      - <code>Delete</code><br>\n      - <code>Arrow_Up</code><br>\n      - <code>Arrow_Down</code><br>\n      - <code>Arrow_Left</code><br>\n      - <code>Arrow_Right</code><br>            \n      - <code>Home</code><br>\n      - <code>End</code><br>\n      - <code>Page_Up</code><br>    \n      - <code>Page_Down</code><br>   \n      - <code>Shift</code><br>\n      - <code>Ctrl</code><br>\n      - <code>Alt</code>\n </ul>\n [Note: Some keys may not be available for capture on every platform]",
        name:"KeyName",
        seeAlso:[],
        type:"type"
    },
    "attr:TreeGrid.canDragRecordsOut":{
        ref:"attr:TreeGrid.canDragRecordsOut",
        flags:"IRW",
        description:"Indicates whether records can be dragged from this listGrid and dropped elsewhere.",
        name:"canDragRecordsOut",
        seeAlso:[
            {ref:"attr:TreeNode.canDrag", description:null},
            {ref:"attr:TreeNode.canAcceptDrop", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('treeDropEvents')}"],
        definingClass:"class:TreeGrid",
        groups:["dragdrop"]
    },
    "attr:PickList.showOptionsFromDataSource":{
        ref:"attr:PickList.showOptionsFromDataSource",
        flags:"IRWA",
        description:"If this item is part of a databound form, and has a specified <code>valueMap</code>\n by default we show the valueMap options in the pickList for the item.\n Setting this property to true will ensure that the options displayed in our pickList\n are derived from the form's <code>dataSource</code>.",
        name:"showOptionsFromDataSource",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList",
        groups:["databinding"]
    },
    "attr:StretchImg.vertical":{
        ref:"attr:StretchImg.vertical",
        flags:"IRW",
        description:"Indicates whether the list of images is drawn vertically from top to bottom (true),\n or horizontally from left to right (false).",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StretchImg",
        groups:["appearance"]
    },
    "attr:Img.size":{
        ref:"attr:Img.size",
        flags:"IR",
        description:"Convenience for setting height and width to the same value, at init time only",
        name:"size",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Img",
        groups:["sizing"]
    },
    "method:CubeGrid.facetValueOver":{
        ref:"method:CubeGrid.facetValueOver",
        flags:"",
        description:"    StringMethod handler fired when mouseover occurs over a facetValues header button\n  <br><i>methodType</i> handler\n",
        name:"facetValueOver",
        seeAlso:[],
        params:[
            {description:"facetValuesObject for the appropriate header button", optional:false, 
             name:"facetValues",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events"]
    },
    "method:DynamicForm.itemHoverHTML":{
        ref:"method:DynamicForm.itemHoverHTML",
        flags:"A",
        description:"  Retrieves the HTML to display in a hover canvas when the user holds the mousepointer over\n  some item.  Return null to suppress the hover canvas altogether.<br>\n  Default implementation returns the prompt for the item if defined.<br>\n  Can be overridden via <code>item.itemHoverHTML()</code>\n\n",
        name:"itemHoverHTML",
        seeAlso:[
            {ref:"attr:FormItem.prompt", description:null},
            {ref:"method:FormItem.itemHoverHTML", description:null}
        ],
        params:[
            {description:"Item the user is hovering over.", optional:false, name:"item", 
             defaultValue:null,type:"FormItem"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "method:Array.slideRange":{
        ref:"method:Array.slideRange",
        flags:"A",
        description:" Slide a range of elements from start to end to position destination, moving all the other\n elements to cover the gap.\n\n",
        name:"slideRange",
        seeAlso:[],
        params:[
            {description:"start position", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"end position (exclusive, like substring() and slice())", optional:false, 
             name:"end",defaultValue:null, type:"number"},
            {description:"destination position for the range", optional:false, name:"destination", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"object:Array"
    },
    "attr:Canvas.children":{
        ref:"attr:Canvas.children",
        flags:"IRWA",
        description:"Array of all Canvii that are immediate children of this Canvas.",
        name:"children",
        seeAlso:[],
        valueType:"Array of Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "method:ValuesManager.filterData":{
        ref:"method:ValuesManager.filterData",
        flags:"",
        description:" Retrieve data that matches the provided criteria, and edit the first record returned.<br>\n Differs from ${isc.DocUtils.linkForRef('method:DynamicForm.fetchData')} in that a case insensitive substring match\n will be performed against the criteria to retrieve the data.\n \n",
        name:"filterData",
        seeAlso:[],
        params:[
            {description:"search criteria", optional:true, name:"criteria", defaultValue:null, 
             type:"Criteria"},
            {description:"callback to invoke on completion", optional:true, name:"callback", 
             defaultValue:null,type:"DSCallback"},
            {description:"additional properties to set on the DSRequest                                            that will be issued", 
             optional:true,name:"requestProperties", defaultValue:null, type:"DSRequest"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["dataBoundComponentMethods"]
    },
    "attr:DataSource.resultTreeClass":{
        ref:"attr:DataSource.resultTreeClass",
        flags:"IRA",
        description:"Class for ResultTrees used by this datasource.  If null, defaults to using\n ${isc.DocUtils.linkForRef('class:ResultTree')}.\n <P>\n This can be set to a custom subclass of ResultTree that, for example, hangs onto to extra\n information necessary for integration with web services.",
        name:"resultTreeClass",
        seeAlso:[],
        valueType:"Class Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource"
    },
    "group:visualBuilder":{
        ref:"group:visualBuilder",
        title:"Visual Builder",
        treeLocation:["Concepts"],
        refs:[],
        description:"The SmartClient Visual Builder tool, accessible from the SDK Explorer as Tools->Visual\n Builder, is intended for:\n <ul>\n <li> business analysts and others doing functional application design, who want to create\n functional prototypes in a codeless, \"what you see is what you get\" environment\n <li> developers new to SmartClient who want to get a basic familiarity with component\n layout, component properties and SmartClient code structure\n <li> developers building simple applications that can be completed entirely within Visual\n Builder\n </ul>\n <P>\n <h4>Using Visual Builder</h4>\n <P>\n Basic usage instructions are embedded in Visual Builder itself, in the \"About Visual\n Builder\" pane.  Click on it to open it.\n <P>\n <b>Visual Builder for Functional Design</b>\n <P>\n Visual Builder has several advantages over other tools typically used for functional design:\n <ul>\n <li> Visual Builder allows simple drag and drop manipulation of components, form-based\n editing of component properties, and simple connection of events to actions - all without\n requiring any code to be written.  It is actually simpler to use than\n DreamWeaver or other code-oriented prototyping tools\n <li> because Visual Builder generates clean code, designs will not have to be converted to\n another technology before development can proceed.  This reduces both effort and the\n potential for miscommunication\n <li> developers can add custom skinning, components with custom behaviors, and custom\n DataSources with sample datasets to Visual Builder so that the design environment is an even\n closer match to the final application.  This helps eliminate many types of unimplementable\n designs \n <li> because Visual Builder is built in SmartClient itself, Visual Builder is simply a \n web page, and does not require installation.  Visual Builder can be deployed to \n an internal network to allow teams with a mixture of technical and semi-technical \n users to collaboratively build and share prototypes of SmartClient-based applications.  \n </ul>\n <P>\n <b>Loading and Saving</b>\n <P>\n The \"File\" menu within Visual Builder allows screens to be saved and reloaded for further\n editing.  Saved screens <b>can</b> be edited outside of Visual Builder and successfully\n reloaded, however, as with any design tool that provides a drag and drop, dialog-driven\n approach to screen creation, Visual Builder cannot work with entirely free-form code.  In\n particular, when a screen is loaded and then re-saved:\n <ul>\n <li> any indenting or spacing changes are not preserved \n <li> order of property or method defintions will revert to Visual Builder's default\n <li> while method definitions on components are preserved, any code <b>outside of</b>\n      component definitions will be dropped (in some cases adding such code will cause\n      loading to fail)\n <li> each Canvas-based component will be output separately, in the order these components\n      appear in the project tree, deepest first\n </ul>\n Generally speaking, screen definitions that you edit within Visual Builder should consist of\n purely declarative code.  Rather than appearing in screen definitions, custom components and\n JavaScript libraries should be added to Visual Builder itself via the customization\n facilities described below.\n <P>\n <h4>Customizing Visual Builder</h4>\n <P>\n The rest of this topic focuses on how Visual Builder can be customized and deployed by\n developers to make it more effective as a functional design tool for a particular\n organization.\n <P>\n <b>Adding Custom DataSources to Visual Builder</b>\n <P>\n DataSources placed in the project dataSources directory ([webroot]/shared/ds by default)\n will be detected by Visual Builder whenever it is started, and appear in the DataSource\n listing in the lower right-hand corner automatically.\n <P>\n If you have created a custom subclass of DataSource (eg, as a base class for several\n DataSources that contact the same web service), you can use it with Visual Builder by:\n <ul>\n <li> creating an XML version of the DataSource using the XML tag &lt;DataSource&gt; and the\n <code>constructor</code> property set to the name of your custom DataSource subclass (as\n described ${isc.DocUtils.linkForRef('group:componentXML')} under the heading <i>Custom Components</i>)\n <li> modifying [webroot]/tools/visualBuilder/globalDependencies.xml to load the JavaScript\n code for your custom DataSource class.  See examples in that file.\n </ul>\n <P>\n <b>Adding Custom Components to Visual Builder</b>\n <P>\n The Component Library on the right hand side of Visual Builder loads component definitions\n from two XML files in the [webroot]/tools/visualBuilder directory: customComponents.xml and\n defaultComponents.xml.  customComponents.xml is empty and is intended for developers to add\n their own components.  defaultComponents.xml can also be customized, but the base version\n will change between SmartClient releases.\n <P>\n As can be seen by looking at defaultComponents.xml, components are specified using a tree\n structure similar to that shown in the \n ${isc.DocUtils.linkForExampleId('treeLoadXML', 'tree XML loading example')}.  The properties that can be set on\n nodes are:\n <ul>\n <li> <code>className</code>: name of the SmartClient Class on which ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')} will be\n called in order to construct the component.  <code>className</code> can be omitted to create\n a folder that cannot be dropped\n <li> <code>title</code>: title for the node\n <li> <code>defaults</code>: an Object specifying defaults to be passed to\n ${isc.DocUtils.linkForRef('classMethod:Class.create','create()')}.\n For example, you could add an \"EditableGrid\" node by using <code>className:\"ListGrid\"</code>\n and specifying:\n <pre>\n &lt;defaults canEdit=\"true\"/&gt;</pre>\n NOTE: if you set any defaults that are not Canvas properties, you need to provide explicit\n type as documented under <i>Custom Properties</i> for ${isc.DocUtils.linkForRef('group:componentXML')}.\n <li> <code>children</code>: components that should appear as children in the tree under this\n node\n <li> <code>icon</code>: icon to show in the Visual Builder component tree (if desired)\n <li> <code>iconWidth/Height/Size</code>: dimensions of the icon in pixels (\"iconSize\" sets\n both)\n <li> <code>showDropIcon</code>: for components that allow children, whether to show a\n special drop icon on valid drop (like ${isc.DocUtils.linkForRef('attr:TreeGrid.showDropIcons')}).\n </ul>\n <P>\n In order to use custom classes in Visual Builder, you must modify\n <code>[webroot]/tools/visualBuilder/globalDependences.xml</code> to include:\n <ul>\n <li> the JavaScript class definition for the custom class (in other words, the\n ${isc.DocUtils.linkForRef('classMethod:isc.defineClass','defineClass()')} call)\n <li> a ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for the custom component\n </ul>\n See globalDependencies.xml for examples.\n <P>\n <h4>Component Schema and Visual Builder</h4>\n <P>\n When you provide ${isc.DocUtils.linkForRef('group:componentSchema','custom schema')} for a component, Visual Builder\n uses that schema to drive component editing (Component Properties pane) and to drive drag\n and drop screen building functionality.\n <P>\n <b>Component Editing</b>\n <P>\n Newly declared fields will appear in the Component Editor in the \"Other\" category at the\n bottom by default.  You can create your own category by simply setting field.group to the\n name of a new group and using this on multiple custom fields.\n <P>\n The ComponentEditor will pick a FormItem for a custom field by the\n ${isc.DocUtils.linkForRef('type:FormItemType','same rules')} used for ordinary databinding, including the ability to\n set field.editorType to use a custom FormItem.\n <P>\n When the \"Apply\" button is clicked, Visual Builder will look for an appropriate \"setter\n function\" for the custom field, for example, for a field named \"myProp\", Visual Builder will\n look for \"setMyProp\".  The target component will also be ${isc.DocUtils.linkForRef('method:Canvas.redraw','redrawn')}.\n <P>\n <b>Event -> Action Bindings</b>\n <P>\n The Component Properties pane contains an Events tab that allows you wire components events\n to actions on any other component currently in the project.\n <P>\n Events are simply ${isc.DocUtils.linkForRef('group:stringMethods','StringMethods')} defined on the component.  In\n order to be considered events, method definitions must have been added to the class via\n ${isc.DocUtils.linkForRef('classMethod:Class.registerStringMethods')} and either be publicly documented SmartClient methods or,\n for custom classes, have a methods definition in the ${isc.DocUtils.linkForRef('group:componentSchema','component\n schema')}.\n Examples of events are: ${isc.DocUtils.linkForRef('method:ListGrid.recordClick')} and ${isc.DocUtils.linkForRef('method:DynamicForm.itemChange')}.\n <P>\n Actions are methods on any component that have a method definition in the\n ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} and specify action=\"true\".\n <P>\n All available events (stringMethods) on a component are shown in the Events tab of the\n Component Editor.  Clicking the plus (+) sign next to the event name brings up a menu that\n shows a list of all components currently in the project and their available actions.\n Selecting an action from this submenu binds the action to the selected event.  When an event\n is bound to an action in this manner, automatic type matching is performed to pass arguments\n from the event to the action as follows:\n <ul>\n <li>Only non-optional parameters of the action are bound.\n <li>For each non-optional parameter of the action method, every parameter of the\n event method is inspected in order to either directly match the type (for non-object types)\n or to match an isAssignableFrom type check via a SmartClient schema inheritance check.\n <li>The 'type' of a parameter is determined from the type documented in the SmartClient\n reference for built-in components, or from the <code>type</code> atribute on the method\n param in the ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} definition of a custom component.\n <li>When a matching parameter is found, it is assigned to the current slot of the action and\n not considered for further parameter matching.\n <li>The above pattern is repeated until all non-optional parameters are exhausted, all\n event parameters are exhausted, or until no further type matches can be inferred.\n </ul>\n The \"actionBinding\" log category can be enabled in the Developer Console to troubleshoot\n issues with automatic binding for custom methods.\n <P>\n <b>Component Drag and Drop</b>\n <P>\n Visual Builder uses component schema to determine whether a given drop is allowed and what\n methods should be called to accomplish the drop.  For example, any Canvas-based component\n can be dropped on a VLayout because VLayout has a \"members\" field of type \"Canvas\", and an \n ${isc.DocUtils.linkForRef('method:Layout.addMember','addMember()')} function.\n <P>\n Because of these rules, any subclass of Canvas will be automatically eligable to be dropped\n into any container that accepts a Canvas (eg, a Layout or Tab).  Any subclass of a FormItem\n will be, likewise, automatically eligible to be dropped into a DynamicForm.\n <P>\n You can declare custom containment relations, such as a custom class \"Wizard\" that accepts\n instances of the custom class \"Pane\" by simply declaring a\n ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} that says that Wizard has a property called\n \"panes\" of type \"Pane\".  Then, provide methods that allow components to be added and removed:\n <ul>\n <li> for a ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','multiple')} field, provide \"add\" and \"remove\"\n functions based on the name of the field.  For example, for a field \"panes\" of type \"Pane\",\n provide \"addPane()\" that takes a Pane instance, and \"removePane()\" that takes a pane\n instance or pane ID \n <li> for a singular field (such as ${isc.DocUtils.linkForRef('attr:Canvas.contextMenu')} or ${isc.DocUtils.linkForRef('attr:Tab.pane')}), provide a\n setter method named after the field (eg setContextMenu()) that takes either an instance of\n the component or null for removal\n </ul>\n <P>\n The \"editing\" log category can be enabled in the Developer Console to troubleshoot issues\n with schema-driven drag and drop and automatic lookup of getter/setter and adder/remover\n methods.\n <P>\n <B>NOTE:</B> after modifying component schema, it may be necessary to restart the servlet\n engine and reload Visual Builder\n <P>\n <b>Presenting simplified components</b>\n <P>\n SmartClient components expose many methods and properties.  For some environments, it is\n more appropriate to provide a simplified list of properties, events, and actions on either\n built-in SmartClient components or your custom components.  This can be done by providing a\n custom ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for an existing component that exposes\n your minimal set.  You also need to provide a trivial subclass of the class you're exposing\n so that it can be instantiated.\n <P>\n For example, let's say you want to make a simplified button called EButton that exposes only\n the 'title' property and the 'click' event of a standard Button.  The following steps will\n accomplish this:\n <p>\n 1. Edit /tools/visualBuilder/customComponents.xml and add a block similar to the following\n to make your custom component appear in the Component Library:\n <pre>\n &lt;PaletteNode&gt;\n     &lt;title&gt;EButton&lt;/title&gt;\n     &lt;className&gt;EButton&lt;/className&gt;\n     &lt;icon&gt;button.gif&lt;/icon&gt;\n &lt;/PaletteNode&gt;\n </pre>\n 2. Next, create a custom schema: /isomorphic/system/schema/EButton.ds.xml as follows:\n <pre>\n &lt;DataSource ID=\"EButton\" inheritsFrom=\"Button\" Constructor=\"EButton\"\n             showLocalFieldsOnly=\"true\" showSuperClassActions=\"false\"\n             showSuperClassEvents=\"false\"&gt;\n 	   &lt;fields&gt;\n         &lt;field name=\"title\"  type=\"HTML\"/&gt;\n     &lt;/fields&gt;\n     &lt;methods&gt;\n         &lt;method name=\"click\"&gt;\n             &lt;description&gt;Fires when this button is clicked.&lt;/description&gt;\n         &lt;/method&gt;\n     &lt;/methods&gt;\n &lt;/DataSource&gt;\n </pre>\n See documentation above and also ${isc.DocUtils.linkForRef('group:componentSchema','component schema')} for what the\n properties above do.\n 3.  Finally, you'll need to define an EButton class as a simple subclass of Button, as\n follows:\n <pre>\n isc.defineClass(\"EButton\", \"Button\");\n </pre>\n To make sure that the Visual Builder will load the above definition, you'll need to place it\n into a JavaScript file being loaded by the Visual Builder.  If you do not already have\n such a file, you can create one and add it to the list of Visual Builder dependencies by\n adding an entry in /tools/visualBuilder/globalDependencies.xml.  See examples in that file\n for specifics.\n <P>\n <h4>Deploying Visual Builder for Functional Designers</h4>\n <P>\n The normal ${isc.DocUtils.linkForRef('group:iscInstall')} deployment instructions apply to Visual Builder <b>except\n that</b> the \"BuiltinRPCs\", which are configured via server.properties, must be enabled\n in order for Visual Builder to load and save files to the SmartClient server.  This also\n means that Visual Builder should only be deployed within trusted environments.  \n <P>\n Note that the Visual Builder provides a \"live\" interface to the provided DataSources.  In\n other words, if a DataSource supports saving and a designer enables inline editing in a grid,\n real saves will be initiated.  The Visual Builder tool should be configured to use the same\n sample data that developers use during development.",
        name:"visualBuilder",
        seeAlso:[],
        type:"group"
    },
    "attr:DynamicForm.canSubmit":{
        ref:"attr:DynamicForm.canSubmit",
        flags:"IRWA",
        description:"Governs whether this form will be used to perform a standard HTML form submission.\n Note that if true, ${isc.DocUtils.linkForRef('method:DynamicForm.submit')} will perform a native HTML submission\n to the specified ${isc.DocUtils.linkForRef('attr:DynamicForm.action')} URL.<br>\n Wherever possible we strongly recommend using the \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')} to send data to\n the server as they provide a far more sophisticated interface, with built in \n options for server validation, required fields, etc.<br>",
        name:"canSubmit",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "attr:Splitbar.gripImgSuffix":{
        ref:"attr:Splitbar.gripImgSuffix",
        flags:"IRA",
        description:"part name for the 'grip' image if ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true",
        name:"gripImgSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"grip\"",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["grip"]
    },
    "method:ResultTree.invalidateCache":{
        ref:"method:ResultTree.invalidateCache",
        flags:"A",
        description:" Manually invalidate this ResultTree's cache.\n <P>\n Generally a ResultTree will observe and incorporate updates to the DataSource that provides it's\n records, but when this is not possible, <code>invalidateCache()</code> allows manual cache\n invalidation.\n <P>\n Components bound to this ResultTree will typically re-request the currently visible portion\n of the dataset, causing the ResultTree to re-fetch data from the server.\n",
        name:"invalidateCache",
        seeAlso:[],
        type:"method",
        definingClass:"class:ResultTree"
    },
    "method:DataSource.compareCriteria":{
        ref:"method:DataSource.compareCriteria",
        flags:"",
        description:" Given two sets of criteria, determine whether they are equivalent, the new criteria is\n guaranteed more restrictive, or the new criteria is not guaranteed more restrictive,\n returning 0, 1 or -1 respectively.\n <P>\n By default (${isc.DocUtils.linkForRef('type:CriteriaPolicy')}:\"dropOnShortening\"), returns:\n <ul>\n <li> -1 if the new criteria has fewer properties than the old criteria (indicating that it\n      isn't more restrictive)\n <li> -1 if the value for any property in the old criteria is an array and 1) the value for\n      the same property in the new criteria isn't an array, or 2) is an array but\n      of different length, or 3) the arrays do not contain the exact same set of objects\n      (order can be different)\n <li> -1 if the value for any given property in the old criteria is not an array, and the\n      the value for the same property property in the new criteria is different\n <li> -1 if both values for a given property are strings and the new criteria value doesn't\n      contain the new criteria value\n <li> 1 if none of the above are true and for at least one of the properties, the\n      respective criteria values are both strings, and the old criteria value is a substring\n      of, and is shorter than, the new criteria value\n <li> 0 otherwise (indicating the sets of criteria are equivalent)\n </ul>\n <P>\n For (${isc.DocUtils.linkForRef('type:CriteriaPolicy')}:\"dropOnChange\"), returns:\n <ul>\n <li> -1 if the two sets of criteria have a different number of properties\n <li> -1 if the value for any property in the old criteria is an array and 1) the value for\n      the same property in the new criteria isn't an array, or 2) is an array but\n      of different length, or 3) the arrays do not contain the exact same set of objects\n      (order can be different)\n <li> -1 if the value for any given property in the old criteria is not an array, and the\n      the value for the same property property in the new criteria is different\n <li> 0 otherwise (indicating the sets of criteria are equivalent)\n </ul>\n This method is called by ${isc.DocUtils.linkForRef('method:ResultSet.compareCriteria')} to determine whether a change\n in criteria should cause the cache to be invalidated. You may want\n to override this method in order to mimic the filtering behavior that your server performs.\n\n",
        name:"compareCriteria",
        seeAlso:[
            {ref:"type:CriteriaPolicy", description:null}
        ],
        params:[
            {description:"the list of rows", optional:false, name:"newCriteria", defaultValue:null, 
             type:"Criteria"},
            {description:"the filter criteria", optional:false, name:"oldCriteria", defaultValue:null, 
             type:"Criteria"},
            {description:"dataSource request properties", optional:true, name:"requestProperties", 
             defaultValue:null,type:"DSRequest Properties"},
            {description:"overrides ${isc.DocUtils.linkForRef('type:CriteriaPolicy')}", optional:true, 
             name:"policy",defaultValue:null, type:"string"}
        ],
        returns:{description:"0 if the filters are equivalent, 1 if newFilter is guaranteed more                      restrictive, and -1 if newFilter is not guaranteed more restrictive", 
         type:"Number"},
        type:"method",
        definingClass:"class:DataSource"
    },
    "method:CubeGrid.closeFacet":{
        ref:"method:CubeGrid.closeFacet",
        flags:"",
        description:"\n  Handler fired when facet is closed\n\n      <br><i>methodType</i> handler\n",
        name:"closeFacet",
        seeAlso:[],
        params:[
            {description:"ID of facet that was closed", optional:false, name:"facetId", 
             defaultValue:null,type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["columnControls"]
    },
    "attr:Layout.placeHolderProperties":{
        ref:"attr:Layout.placeHolderProperties",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:Layout.showDragPlaceHolder','this.showDragPlaceHolder')} is true, this \n properties object can be used to customize the appearance of the placeholder displayed\n when the user drags a widget out of this layout.",
        name:"placeHolderProperties",
        seeAlso:[],
        valueType:"canvas properties",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('dragMove')}"],
        definingClass:"class:Layout",
        groups:["dragdrop"]
    },
    "class:Flashlet":{
        methods:["method:Flashlet.getPluginHandle"],
        ref:"class:Flashlet",
        classAttrs:[],
        classMethods:["classMethod:Flashlet.flashAvailable", "classMethod:Flashlet.getFlashVersion"],
        treeLocation:["Optional Modules/Client Bridges"],
        attrs:["attr:Flashlet.name", "attr:Flashlet.params", "attr:Flashlet.classID", 
         "attr:Flashlet.codeBase","attr:Flashlet.pluginsPage", "attr:Flashlet.src"],
        description:"ISC abstraction for Flashlets.",
        name:"Flashlet",
        seeAlso:[],
        type:"class",
        requiresModules:["PluginBridges"]
    },
    "method:ValuesManager.setValue":{
        ref:"method:ValuesManager.setValue",
        flags:"",
        description:" Set the value for some field.\n",
        name:"setValue",
        seeAlso:[],
        params:[
            {description:"Which field to set the value for", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"New value for the field.", optional:false, name:"newValue", defaultValue:null, 
             type:"any"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:ResultSet.fetchDelay":{
        ref:"attr:ResultSet.fetchDelay",
        flags:"IRWA",
        description:"Delay in milliseconds before fetching rows.\n <P>\n When a get() or getRange() call asked for rows that haven't been loaded, the\n ResultSet will wait before actually triggering the request.  If, during the delay, more\n get() or getRange() calls are made for missing rows, the final fetch to the server will\n reflect the most recently requested rows.\n <P>\n The intent of this delay is to avoid triggering many unnecessary fetches during\n drag-scrolling and similar user interactions.",
        name:"fetchDelay",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching"]
    },
    "method:SectionStack.getExpandedSections":{
        ref:"method:SectionStack.getExpandedSections",
        flags:"",
        description:"\n Returns the list of currently expanded sections.  The list items are section IDs.\n\n",
        name:"getExpandedSections",
        seeAlso:[],
        returns:{description:"list of currently expanded sections", type:"List"},
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:StatefulCanvas.radioGroup":{
        ref:"attr:StatefulCanvas.radioGroup",
        flags:"IRWA",
        description:"String identifier for this canvas's mutually exclusive selection group.",
        name:"radioGroup",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state", "event handling"]
    },
    "attr:CubeGrid.facetValueHoverAlign":{
        ref:"attr:CubeGrid.facetValueHoverAlign",
        flags:"IRWA",
        description:"Allows the developer to override the horizontal text alignment of hover tips shown for\n facet values.  If unspecified the hover canvas content alignment will be set by\n <code>this.hoverAlign</code> if specified.",
        name:"facetValueHoverAlign",
        seeAlso:[
            {ref:"attr:Canvas.hoverAlign", description:null}
        ],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "method:Canvas.mouseStillDown":{
        ref:"method:Canvas.mouseStillDown",
        flags:"A",
        description:"\n Executed repeatedly (every ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownDelay')} by default) when the system is idle -\n i.e. not busy running other scripts - and the left mouse button is held down after having been\n pressed in the object. This event is not native to JavaScript, but is provided by the ISC system.\n <p>\n Note: The event handling system waits ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownInitialDelay')} before\n calling mouseStillDown for the first time on the widget.  Subsequently the method is called every\n ${isc.DocUtils.linkForRef('attr:Canvas.mouseStillDownDelay')}.  Both attributes are configurable per widget instance.\n <p>\n This method is called only when the left mouse is held down.\n\n",
        name:"mouseStillDown",
        seeAlso:[
            {ref:"attr:Canvas.mouseStillDownInitialDelay", description:null},
            {ref:"attr:Canvas.mouseStillDownDelay", description:null},
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        platformNotes:"Some end user systems only have one mouse button.",
        examples:["${isc.DocUtils.linkForExampleId('customMouseEvents')}"],
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "method:DynamicForm.hasFieldErrors":{
        ref:"method:DynamicForm.hasFieldErrors",
        flags:"",
        description:" Does this form currently h ave any validation errors on the field passed in?<br>\n Validation errors are set up automatically by validation, or may be explicitly set via\n ${isc.DocUtils.linkForRef('method:DynamicForm.setErrors')} or ${isc.DocUtils.linkForRef('method:DynamicForm.setFieldErrors')}.\n",
        name:"hasFieldErrors",
        seeAlso:[],
        params:[
            {description:"field to test for validation errors", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true if the form has outstanding errors for the field in question.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["errors"]
    },
    "attr:OperationBinding.operationId":{
        ref:"attr:OperationBinding.operationId",
        flags:"IR",
        description:"Optional operationId if this DataSource supports two or more variants of one of the basic\n DataSource operations, for instance, a \"fetch\" that uses full text search and a \"fetch\" that\n accepts per-field search criteria.  See ${isc.DocUtils.linkForRef('attr:DSRequest.operationId')} for usage.",
        name:"operationId",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:ListGrid.frozenHeaderBaseStyle":{
        ref:"attr:ListGrid.frozenHeaderBaseStyle",
        flags:"IR",
        description:"If this listGrid contains any frozen fields, this property can be used to apply a custom\n headerBaseStyle to the frozen fields set of fields. If unset, the standard headerBaseStyle\n will be used for both frozen and unfrozen cells.",
        name:"frozenHeaderBaseStyle",
        seeAlso:[
            {ref:"attr:ListGrid.headerBaseStyle", description:null},
            {ref:"attr:ListGridField.frozen", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHead4er", "appearance", "frozenFields"]
    },
    "method:ListGrid.getEventRow":{
        ref:"method:ListGrid.getEventRow",
        flags:"",
        description:" Returns the row number of the most recent mouse event.\n",
        name:"getEventRow",
        seeAlso:[],
        params:[
            {description:"optional y-coordinate to obtain row number, in lieue of the y                        coordinate of the last mouse event", 
             optional:false,name:"y", defaultValue:null, type:"number"}
        ],
        returns:{description:"row number, or -2 if beyond last drawn row", type:"number"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "classMethod:RPCManager.sendProxied":{
        ref:"classMethod:RPCManager.sendProxied",
        flags:"",
        description:" Send an HTTP request to a remote host, potentially through the HttpProxy servlet installed\n on the ISC server.\n <P>\n This API allows contacting services which are hosted on servers other than the origin server\n if the HttpProxy servlet is enabled on the ISC server.\n <P>\n The HttpProxy will be used if the ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL')} starts with \"http\" and uses a\n hostname other than \"localhost\" or <code>window.location.hostname</code>, or if\n <code>request.useHttpProxy</code> is explicitly set.  Otherwise the request goes to the\n origin server (the server that returned the current page).\n <P>\n The ${isc.DocUtils.linkForRef('class:RPCRequest')} properties that will be respected when relaying requests via the\n HttpProxy are: \n ${isc.DocUtils.linkForRef('attr:RPCRequest.actionURL','actionURL')}, ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod','httpMethod')}, \n ${isc.DocUtils.linkForRef('attr:RPCRequest.params','params')}, ${isc.DocUtils.linkForRef('attr:RPCRequest.contentType','contentType')}, \n ${isc.DocUtils.linkForRef('attr:RPCRequest.httpHeaders','httpHeaders')}, and ${isc.DocUtils.linkForRef('attr:RPCRequest.data','data')}.  In this case\n \"data\", if set, will be used as the request body for an HTTP POST.\n <P>\n Higher-level APIs like ${isc.DocUtils.linkForRef('class:DataSource')} or ${isc.DocUtils.linkForRef('class:WebService')} call through this API, and so\n automatically use the HttpProxy if ${isc.DocUtils.linkForRef('attr:DataSource.dataURL')} or\n ${isc.DocUtils.linkForRef('method:WebService.setLocation','webService.location')} is set to a foreign server.\n <P>\n This API is only suitable for direct use when loading unstructured data that will not be\n shown in a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')}.  For a WSDL-described web service, use\n ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')} instead.  For other web services, use a ${isc.DocUtils.linkForRef('class:DataSource')} with\n ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')}, and use ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} and\n ${isc.DocUtils.linkForRef('method:DataSource.transformResponse')} as necessary to form requests for the service and\n transform responses for display.\n\n",
        name:"sendProxied",
        seeAlso:[],
        params:[
            {description:"rpcRequest to be routed through the HttpProxy", optional:false, 
             name:"request",defaultValue:null, type:"rpcRequest"}
        ],
        type:"classMethod",
        definingClass:"class:RPCManager",
        requiresModules:["SCServer"]
    },
    "attr:ListGrid.baseStyle":{
        ref:"attr:ListGrid.baseStyle",
        flags:"IR",
        getter:["getBaseStyle"],
        description:"The base name for the CSS class applied to cells. This style will have \"Dark\", \n \"Over\", \"Selected\", or \"Disabled\" appended to it according to the state of the cell.",
        name:"baseStyle",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null},
            {ref:"method:ListGrid.getBaseStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"\"cell\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "attr:Applet.codeBase":{
        ref:"attr:Applet.codeBase",
        flags:"IR",
        description:"The base URL of the applet if the ${isc.DocUtils.linkForRef('attr:Applet.code')} attribute is relative",
        name:"codeBase",
        seeAlso:[
            {ref:"attr:Applet.code", description:null},
            {ref:"attr:Applet.archive", description:null}
        ],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:ListGridField.iconSize":{
        ref:"attr:ListGridField.iconSize",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the \n size of the icon to be displayed in the ListGrid header button. \n (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconSize')})",
        name:"iconSize",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null}
        ],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "method:Tree.openFolders":{
        ref:"method:Tree.openFolders",
        flags:"",
        description:"\n Open a set of folders, specified by path or as pointers to nodes.\n\n",
        name:"openFolders",
        seeAlso:[
            {ref:"method:ResultTree.dataArrived", description:null}
        ],
        params:[
            {description:"List of nodes or node paths.", optional:false, name:"nodeList", 
             defaultValue:null,type:"List of TreeNode"}
        ],
        type:"method",
        definingClass:"class:Tree"
    },
    "class:SearchForm":{
        methods:["method:SearchForm.search"],
        ref:"class:SearchForm",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms"],
        attrs:[],
        description:"A SearchForm is a DynamicForm specialized for a user to enter search criteria.\n <P>\n All DynamicForm properties and methods work on SearchForm.  SearchForm extends and\n specializes DynamicForm for searching, for example, SearchForm sets\n <code>hiliteRequiredFields</code> false by default because fields are typically required in\n a search.",
        name:"SearchForm",
        seeAlso:[
            {ref:"class:DynamicForm", description:null}
        ],
        type:"class"
    },
    "attr:DynamicForm.sectionVisibilityMode":{
        ref:"attr:DynamicForm.sectionVisibilityMode",
        flags:"IRW",
        description:"If the form has sections, [implemented as ${isc.DocUtils.linkForRef('class:SectionItem')}s], this attribute controls\n whether multiple sections can be expanded at once.",
        name:"sectionVisibilityMode",
        seeAlso:[
            {ref:"type:VisibilityMode", description:null},
            {ref:"class:SectionItem", description:null}
        ],
        valueType:"VisibilityMode",
        defaultValue:"\"multiple\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "method:ListGrid.getCellCSSText":{
        ref:"method:ListGrid.getCellCSSText",
        flags:"",
        description:" Return CSS text for styling this cell, which will be applied in addition to the CSS class\n for the cell, as overrides.\n <p>\n \"CSS text\" means semicolon-separated style settings, suitable for inclusion in a CSS\n stylesheet or in a STYLE attribute of an HTML element.\n\n",
        name:"getCellCSSText",
        seeAlso:[
            {ref:"method:ListGrid.getCellStyle", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS text for this cell", type:"string"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('addStyle')}"],
        definingClass:"class:ListGrid"
    },
    "attr:Menu.canSelectParentItems":{
        ref:"attr:Menu.canSelectParentItems",
        flags:"IRW",
        description:"If true, clicking or pressing Enter on a menu item that has a submenu will\n		select that item (with standard behavior of hiding the menus, calling click\n		handlers, etc) instead of showing the submenu.",
        name:"canSelectParentItems",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('treeBinding')}"],
        definingClass:"class:Menu",
        groups:["selection"]
    },
    "group:timing":{
        ref:"group:timing",
        refs:[],
        name:"timing",
        seeAlso:[],
        type:"group"
    },
    "group:caching":{
        ref:"group:caching",
        title:"Caching",
        treeLocation:["Optional Modules/Network Performance"],
        refs:[],
        description:"Standard web browsers can cache server responses, associating the locally-cached files with\n the URLs (including query parameters) that were used to fetch the files from the\n server. Each file may be assigned an explicit expiration time. Requests for the associated\n URL will always be served from the local cache, without accessing the server, until the file\n expires.\n <p>\n The recommended approach is to move as much content as possible into cacheable assets\n (these can be images, html, css, and js) and tell the browser to cache those for as long as\n possible (ideally indefinitely).  Clearly, most things can't simply be cached permanently -\n new versions of the application will often require changes to these assets.  To allow for\n this, the pages that direct the loading of the cached assets should be dynamic and should\n create version-specific URLs to these cacheable assets.  This can be done by tacking the\n version number as a query parameter or as a path component.  Here's an example of loading a\n javascript file versioned with a query parameter:\n <pre>\n &lt;script src='/foo/bar.js?version=13'&gt;&lt;/script&gt;\n </pre>\n Generally, the version number wouldn't be hard-coded into the dynamic page, but would\n instead pick up the value of a variable, such that you can simply bump up the value in one\n configuration file and have all versioned URLs change dynamically.\n <p>\n Because SmartClient performs the assembly of image URLs dynamically, versioning of\n SmartClient skins must be done with a path component.  You can do this by changing the base\n skinDir using ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - e.g:\n <pre>\n isc.Page.setSkinDir('/version/5.6/isomorphic/skins/SmartClient/');\n </pre>\n You can then either deploy the new skins under the versioned directory above or use a URL\n rewriting engine such as mod_rewrite for Apache to map all such versions into a single\n deploy directory.\n <p>\n To actually tell the browser to cache images for a longer length of time than the browser\n session, you need to set the HTTP 'Expires' header.\n If you're not using the SmartClient Java back-end there are several caching solutions\n available, depending on your server of choice.  Microsoft's IIS has built-in caching\n capability, please check the reference manual for details.  If you're using Apache, you can\n use <a href='http://httpd.apache.org/docs/2.0/mod/mod_expires.html' onclick=\"window.open('http://httpd.apache.org/docs/2.0/mod/mod_expires.html');return false;\">mod_expires</a>.  Some servlet\n containers also natively support the setting of caching headers.\n <p>\n The SmartClient Java back-end supports setting caching headers via the FileDownload service\n on a per-mimetype basis.  To use it, first register the FileDownload servlet in your web.xml\n as follows:\n <pre>\n     &lt;servlet&gt;\n       &lt;servlet-name&gt;FileDownload&lt;/servlet-name&gt;\n       &lt;init-param&gt;\n           &lt;param-name&gt;expires&lt;/param-name&gt;\n           &lt;param-value&gt;text/javascript:3600,image/gif:86400&lt;/param-value&gt;\n       &lt;/init-param&gt;\n       &lt;servlet-class&gt;com.isomorphic.servlet.FileDownload&lt;/servlet-class&gt;\n     &lt;/servlet&gt;\n </pre>\n The expires parameter controls the expiration time in seconds.  In the block above,\n javascript files are set to expire in 1 hour and gif images are set to expire in 1 day from\n the time they are served to the browser.  If you don't set explicit expires mappings, all\n images and css files will be set to expire in 1 day and javascript files will expire in 1\n hour, by default.\n <p>\n Next, map any resource that you want to serve with caching headers to the FileDownload\n servlet in your web.xml.  Typically, you'll want to serve the SmartClient modules and all\n skin images with caching headers.  You can do so by adding the following servlet-mapping\n directives to your web.xml:\n <pre>\n     &lt;servlet-mapping&gt;\n       &lt;servlet-name&gt;FileDownload&lt;/servlet-name&gt;\n       &lt;url-pattern&gt;/isomorphic/system/modules/*&lt;/url-pattern&gt;\n     &lt;/servlet-mapping&gt;\n \n     &lt;servlet-mapping&gt;\n       &lt;servlet-name&gt;FileDownload&lt;/servlet-name&gt;\n       &lt;url-pattern&gt;/isomorphic/skins/*&lt;/url-pattern&gt;\n     &lt;/servlet-mapping&gt;\n </pre>",
        name:"caching",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.saveEdits":{
        ref:"method:ListGrid.saveEdits",
        flags:"A",
        description:"\n Validates and saves edits within the row currently being edited (or another row with unsaved\n edits, if indicated).\n <P>\n This method can be called to manually trigger saves if the default mechanisms of\n ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell','cell by cell')} or row by row saving are not suitable.  \n <P>\n The 'callback' parameter provides a notification when the save attempt completes, which is\n likely to be asynchronous for databound grids.  Cases under which the callback will fire are:\n <ul><li>Save completed successfully</li>\n <li>No changes to the edited row, so save not required</li>\n <li>Validation failure occurred on the client or on the server</li></ul>\n Note that if this method was unable to determine the row to be saved, the callback will NOT\n fire - in this case, the method is a no-op.\n <P>\n Other, standard callbacks such as ${isc.DocUtils.linkForRef('method:ListGrid.editComplete')}, ${isc.DocUtils.linkForRef('method:ListGrid.editFailed')} and \n ${isc.DocUtils.linkForRef('method:ListGrid.cellChanged')} will fire normally.\n <P>\n Note this method does not hide the inline editors if they are showing - to explicitly save \n and end editing, use the method 'endEditing()'\n\n",
        name:"saveEdits",
        seeAlso:[
            {ref:"method:ListGrid.endEditing", description:null}
        ],
        params:[
            {description:"Event used to complete cell editing.          Optional, and defaults to <code>\"programmatic\"</code>.  Can be used by the \n          <code>callback</code> method to perform custom actions such as navigation when the \n          save completes.", 
             optional:true,name:"editCompletionEvent", defaultValue:null, type:"EditCompletionEvent"},
            {description:"Callback to fire on completion of the saving process.                                    If no edits were made or client-side validation fails \n                                    the callback will be fired synchronously at the end of this\n                                    method.<br>\n                                    Takes the following parameters:\n                                    <br>- rowNum <i>(Number) edited row number</i>\n                                    <br>- colNum <i>(Number) edited column number</i>\n                                    <br>- editCompletionEvent <i>(EditCompletionEvent) event \n                                      passed in (defaults to <code>\"programmatic\"</code>)</i>\n                                    <br>- success <i>(boolean) false if the save was unable to\n                                      complete due to a validation failure or server-side \n                                      error.</i>", 
             optional:true,name:"callback", defaultValue:null, type:"Callback"},
            {description:"Which row should be saved. If unspecified the current edit row                            is saved by default. Note that if there is no current edit row \n                            this method will no op.", 
             optional:true,name:"rowNum", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:DynamicForm.cellBorder":{
        ref:"attr:DynamicForm.cellBorder",
        flags:"IRW",
        description:"Width of border for the table that form is drawn in. This is primarily used for debugging\n form layout.",
        name:"cellBorder",
        seeAlso:[],
        valueType:"number",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "classMethod:Canvas.getEventEdge":{
        ref:"classMethod:Canvas.getEventEdge",
        flags:"",
        description:"		Check if an event is within an \"edge\" of this canvas.\n\n",
        name:"getEventEdge",
        seeAlso:[
            {ref:"attr:Canvas.resizeFrom", description:null}
        ],
        params:[
            {description:"Array of legal edges.  Default is all the resizeFrom mask of this canvas.", 
             optional:true,name:"edgeMask", defaultValue:null, type:"array"}
        ],
        returns:{description:"\"T\", \"TR\", etc. for corner the event is within, or null if not within a legal edge.", 
         type:"string"},
        type:"classMethod",
        definingClass:"class:Canvas",
        groups:["dragdrop", "dragResize"]
    },
    "attr:SelectItem.pickListCriteria":{
        ref:"attr:SelectItem.pickListCriteria",
        flags:"IRWA",
        description:"If this item has a databound pick-list (for example ${isc.DocUtils.linkForRef('attr:PickList.optionDataSource')} is\n set) this property can be used to provide static filter criteria when retrieving the data\n for the pickList.",
        name:"pickListCriteria",
        seeAlso:[],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "class:RPCRequest":{
        methods:[],
        ref:"class:RPCRequest",
        classAttrs:["classAttr:RPCRequest.useCursorTracker"],
        classMethods:[],
        treeLocation:["Client Reference/RPC"],
        attrs:["attr:RPCRequest.data", "attr:RPCRequest.actionURL", "attr:RPCRequest.promptStyle", 
         "attr:RPCRequest.promptCursor","attr:RPCRequest.prompt", "attr:RPCRequest.showPrompt", "attr:RPCRequest.callback", 
         "attr:RPCRequest.clientContext","attr:RPCRequest.willHandleError", "attr:RPCRequest.timeout", "attr:RPCRequest.params", 
         "attr:RPCRequest.evalResult","attr:RPCRequest.evalVars", "attr:RPCRequest.callbackParam", 
         "attr:RPCRequest.serverOutputAsString","attr:RPCRequest.transport", "attr:RPCRequest.useXmlHttpRequest", 
         "attr:RPCRequest.httpMethod","attr:RPCRequest.contentType", "attr:RPCRequest.httpHeaders", 
         "attr:RPCRequest.containsCredentials","attr:RPCRequest.ignoreTimeout", "attr:RPCRequest.sendNoQueue", 
         "attr:RPCRequest.paramsOnly","attr:RPCRequest.useSimpleHttp", "attr:RPCRequest.bypassCache"],
        description:"Encapsulates a client/server RPC request.  You'll need to provide an instance of this class (or a\n constructor for it) to the ${isc.DocUtils.linkForRef('classMethod:RPCManager.sendRequest')} method.  If you use the \n ${isc.DocUtils.linkForRef('classMethod:RPCManager.send')} method, an instance of RPCRequest will be created for you.",
        name:"RPCRequest",
        seeAlso:[
            {ref:"classMethod:RPCManager.send", description:null},
            {ref:"classMethod:RPCManager.sendRequest", description:null}
        ],
        type:"class"
    },
    "method:FormItem.titleHoverHTML":{
        ref:"method:FormItem.titleHoverHTML",
        flags:"A",
        description:"  If defined, this method should return the HTML to display in a hover canvas when the \n  user holds the mousepointer over this item's title.  Return null to suppress the hover \n  canvas altogether.<br>\n  If not defined, <code>dynamicForm.titleHoverHTML()</code> will be evaluated to \n  determine hover content instead.\n\n",
        name:"titleHoverHTML",
        seeAlso:[
            {ref:"attr:FormItem.prompt", description:null},
            {ref:"method:FormItem.titleHover", description:null},
            {ref:"method:FormItem.itemHoverHTML", description:null}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["Hovers"]
    },
    "attr:DSResponse.totalRows":{
        ref:"attr:DSResponse.totalRows",
        flags:"R",
        description:"Total number of rows available from the server that match the current filter criteria,\n when using paged result fetching.",
        name:"totalRows",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["paging"]
    },
    "attr:TextItem.selectOnFocus":{
        ref:"attr:TextItem.selectOnFocus",
        flags:"IRW",
        description:"If this property is set to true, whenever this item is given focus programmatically \n (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.<br>\n If false, the selection is not modified on focus - any previous selection within the\n item will be restored.<br>\n If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:DynamicForm.selectOnFocus')}",
        name:"selectOnFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TextItem",
        groups:["focus"]
    },
    "object:ListGridField":{
        methods:["method:ListGridField.getGroupValue", "method:ListGridField.getGroupTitle", 
         "method:ListGridField.getFieldTitle","method:ListGridField.getSummaryTitle", "method:ListGridField.sortNormalizer", 
         "method:ListGridField.defaultDynamicValue","method:ListGridField.editorEnter", "method:ListGridField.editorExit", 
         "method:ListGridField.cellChanged","method:ListGridField.recordClick", "method:ListGridField.recordDoubleClick", 
         "method:ListGridField.getCellValue","method:ListGridField.formatCellValue", "method:ListGridField.formatEditorValue", 
         "method:ListGridField.parseEditorValue","method:ListGridField.change", "method:ListGridField.changed", 
         "method:ListGridField.hoverHTML"],
        ref:"object:ListGridField",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Grids/ListGrid"],
        attrs:["attr:ListGridField.canGroupBy", "attr:ListGridField.valueIcons", 
         "attr:ListGridField.valueIconSize","attr:ListGridField.valueIconWidth", "attr:ListGridField.valueIconHeight", 
         "attr:ListGridField.valueIconLeftPadding","attr:ListGridField.valueIconRightPadding", "attr:ListGridField.editorValueIcons", 
         "attr:ListGridField.editorValueIconWidth","attr:ListGridField.editorValueIconHeight", "attr:ListGridField.showValueIconOnly", 
         "attr:ListGridField.suppressValueIcon","attr:ListGridField.valueIconOrientation", "attr:ListGridField.imageURLPrefix", 
         "attr:ListGridField.imageURLSuffix","attr:ListGridField.editorImageURLPrefix", "attr:ListGridField.editorImageURLSuffix", 
         "attr:ListGridField.imageSize","attr:ListGridField.imageWidth", "attr:ListGridField.imageHeight", 
         "attr:ListGridField.type","attr:ListGridField.name", "attr:ListGridField.title", "attr:ListGridField.showIf", 
         "attr:ListGridField.frozen","attr:ListGridField.icon", "attr:ListGridField.iconSize", "attr:ListGridField.iconWidth", 
         "attr:ListGridField.iconHeight","attr:ListGridField.iconOrientation", "attr:ListGridField.iconSpacing", 
         "attr:ListGridField.showDisabledIcon","attr:ListGridField.showRollOverIcon", "attr:ListGridField.showFocusedIcon", 
         "attr:ListGridField.showDownIcon","attr:ListGridField.showSelectedIcon", "attr:ListGridField.icons", 
         "attr:ListGridField.editorIconWidth","attr:ListGridField.editorIconHeight", "attr:ListGridField.defaultIconSrc", 
         "attr:ListGridField.iconVAlign","attr:ListGridField.summaryTitle", "attr:ListGridField.width", "attr:ListGridField.align", 
         "attr:ListGridField.headerBaseStyle","attr:ListGridField.headerTitleStyle", "attr:ListGridField.cellAlign", 
         "attr:ListGridField.baseStyle","attr:ListGridField.canSort", "attr:ListGridField.sortDirection", 
         "attr:ListGridField.canEdit","attr:ListGridField.defaultValue", "attr:ListGridField.enterKeyEditAction", 
         "attr:ListGridField.escapeKeyEditAction","attr:ListGridField.editorType", "attr:ListGridField.editorProperties", 
         "attr:ListGridField.validators","attr:ListGridField.validateOnChange", "attr:ListGridField.required", 
         "attr:ListGridField.displayFormat","attr:ListGridField.inputFormat", "attr:ListGridField.canFilter", 
         "attr:ListGridField.filterEditorValueMap","attr:ListGridField.filterEditorType", "attr:ListGridField.defaultFilterValue", 
         "attr:ListGridField.filterEditorProperties","attr:ListGridField.filterOnKeypress", "attr:ListGridField.linkText", 
         "attr:ListGridField.valueMap","attr:ListGridField.editorValueMap", "attr:ListGridField.emptyCellValue", 
         "attr:ListGridField.optionDataSource","attr:ListGridField.valueField", "attr:ListGridField.displayField", 
         "attr:ListGridField.showHover","attr:ListGridField.canToggle"],
        description:"An object with a particular set of properties used to configure the display of\n and interaction with the columns of a ${isc.DocUtils.linkForRef('class:ListGrid')}.",
        name:"ListGridField",
        seeAlso:[
            {ref:"attr:ListGrid.fields", description:null},
            {ref:"method:ListGrid.setFields", description:null}
        ],
        type:"object"
    },
    "method:ListGrid.refreshCellStyle":{
        ref:"method:ListGrid.refreshCellStyle",
        flags:"",
        description:" Refresh the styling of an individual cell without redrawing the grid.\n <P>\n The cell's CSS class and CSS text will be refreshed, to the current values returned by\n getCellStyle() and getCellCSSText() respectively.\n <P>\n The cell's contents (as returned by getCellValue()) will <b>not</b> be refreshed.  To\n refresh both styling and contents, call refreshCell() instead.\n\n",
        name:"refreshCellStyle",
        seeAlso:[
            {ref:"method:ListGrid.refreshCell", description:"to update cell contents too"}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column number of cell to refresh", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:RichTextEditor.fontSizes":{
        ref:"attr:RichTextEditor.fontSizes",
        flags:"IRA",
        description:"ValueMap of css font size property values to font size titles to display in the font size\n  selector if <code>\"fontSizeSelector\"</code> is included in \n  ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')}.\n  Default value for this attribute:<br>\n <code>{\n &nbsp;&nbsp;\"1\":\"1 (8 pt)\",\n &nbsp;&nbsp;\"2\":\"2 (10 pt)\",\n &nbsp;&nbsp;\"3\":\"3 (12 pt)\",\n &nbsp;&nbsp;\"4\":\"4 (14 pt)\",\n &nbsp;&nbsp;\"5\":\"5 (18 pt)\",\n &nbsp;&nbsp;\"6\":\"6 (24 pt)\",\n &nbsp;&nbsp;\"7\":\"7 (36 pt)\"}</code>",
        name:"fontSizes",
        seeAlso:[],
        valueType:"object",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "attr:DataSource.childrenField":{
        ref:"attr:DataSource.childrenField",
        flags:"IR",
        description:"fieldName for a field in the dataSource expected to contain an explicit array of child nodes.\n Enables loading a databound tree as a hierachical data structure, rather than a flat list of\n nodes linked by foreignKey.<br>\n Note this is an alternative to setting ${isc.DocUtils.linkForRef('attr:DataSourceField.childrenProperty')} directly on\n the childrenField object.<P>\n By default the children field will be assumed to be ${isc.DocUtils.linkForRef('attr:DataSourceField.multiple','multiple')},\n for XML databinding. This implies that child data should be delivered in the format:\n <pre>\n      &lt;childrenFieldName&gt;\n          &lt;item name=\"firstChild\" ...&gt;\n          &lt;item name=\"secondChild\" ...&gt;\n      &lt;/childrenFieldName&gt;\n </pre>\n However data may also be delivered as a direct list of <code>childrenFieldName</code> \n elements:\n <pre>\n      &lt;childrenFieldName name=\"firstChild\" ...&gt;\n      &lt;childrenFieldName name=\"secondChild\" ...&gt;\n </pre>\n If you want to return your data in this format, you will need to explicitly set \n <code>multiple</code> to false in the appropriate dataSource field definition.",
        name:"childrenField",
        seeAlso:[
            {ref:"attr:DataSourceField.childrenProperty", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["dataSourceRelations"]
    },
    "group:formValues":{
        ref:"group:formValues",
        refs:["method:DynamicForm.setValues", "method:DynamicForm.rememberValues", 
         "method:DynamicForm.resetValues","method:DynamicForm.clearValues", "method:DynamicForm.valuesHaveChanged", 
         "method:DynamicForm.getValues","method:DynamicForm.getValuesAsCriteria", "method:DynamicForm.getValue", 
         "method:DynamicForm.setValue","method:DynamicForm.showItem", "method:DynamicForm.hideItem", 
         "method:DynamicForm.setValueMap","method:FormItem.getValue", "method:FormItem.defaultDynamicValue", 
         "method:ValuesManager.getValues","method:ValuesManager.setValues", "method:ValuesManager.clearValues", 
         "method:ValuesManager.getMemberValues","method:ValuesManager.setMemberValues", "method:ValuesManager.rememberValues", 
         "method:ValuesManager.resetValues","method:ValuesManager.valuesHaveChanged", "method:ValuesManager.getValue", 
         "method:ValuesManager.setValue","method:DynamicForm.reset", "attr:DynamicForm.values"],
        name:"formValues",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGridField.editorImageURLSuffix":{
        ref:"attr:ListGridField.editorImageURLSuffix",
        flags:"IRWA",
        description:"When some cell in this field is being edited, this property can be used to apply \n an explicit ${isc.DocUtils.linkForRef('attr:FormItem.imageURLSuffix')} to the editor in question. \n This can be used to modify the valueIcons within the editor.<br>\n If unset, but ${isc.DocUtils.linkForRef('attr:ListGridField.imageURLPrefix')} is specified, that will be used\n instead.",
        name:"editorImageURLSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:DynamicForm.errorsPreamble":{
        ref:"attr:DynamicForm.errorsPreamble",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:DynamicForm.showInlineErrors')} is false we show all errors for the form item in \n a single item rendered at the top of the form.<br>\n This attribute specifies an introductory string rendered out before the individual error\n messages.",
        name:"errorsPreamble",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"The following errors were found\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation", "i18nMessages"]
    },
    "attr:Scrollbar.allowThumbDownState":{
        ref:"attr:Scrollbar.allowThumbDownState",
        flags:"IRWA",
        description:"If true, the thumb's appearance changes when it's clicked on.",
        name:"allowThumbDownState",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Scrollbar",
        groups:["appearance"]
    },
    "attr:Button.showRollOverIcon":{
        ref:"attr:Button.showRollOverIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image on mouse rollover.",
        name:"showRollOverIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "group:treeIcons":{
        ref:"group:treeIcons",
        refs:["method:TreeGrid.setNodeIcon", "attr:TreeGrid.iconSize", "attr:TreeGrid.folderIcon", 
         "attr:TreeGrid.dropIconSuffix","attr:TreeGrid.openIconSuffix", "attr:TreeGrid.closedIconSuffix", "attr:TreeGrid.nodeIcon", 
         "attr:TreeGrid.showOpenIcons","attr:TreeGrid.showDropIcons", "attr:TreeGrid.customIconProperty", 
         "attr:TreeGrid.showCustomIconOpen","attr:TreeGrid.showCustomIconDrop", "attr:TreeGrid.customIconOpenProperty", 
         "attr:TreeGrid.customIconDropProperty","attr:TreeGrid.showConnectors", "attr:TreeGrid.openerImage", 
         "attr:TreeGrid.connectorImage"],
        name:"treeIcons",
        seeAlso:[],
        type:"group"
    },
    "attr:Canvas.defaultHeight":{
        ref:"attr:Canvas.defaultHeight",
        flags:"IRWA",
        description:"For custom components, establishes a default height for the component.\n <P>\n For a component that should potentially be sized automatically by a Layout, set this\n property rather than ${isc.DocUtils.linkForRef('attr:Canvas.height')} directly, because Layouts regard a height setting as\n an explicit size that shouldn't be changed.",
        name:"defaultHeight",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "group:grip":{
        ref:"group:grip",
        refs:["attr:Splitbar.showGrip", "attr:Splitbar.gripImgSuffix", "attr:Splitbar.showDownGrip", 
         "attr:Splitbar.showRollOverGrip","attr:Splitbar.showClosedGrip", "attr:Snapbar.showGrip", "attr:Snapbar.showDownGrip", 
         "attr:Snapbar.showRollOverGrip","attr:Snapbar.showClosedGrip"],
        name:"grip",
        seeAlso:[],
        type:"group"
    },
    "attr:Splitbar.showGrip":{
        ref:"attr:Splitbar.showGrip",
        flags:"IRA",
        description:"Should we show a \"grip\" image floating above the center of this widget?",
        name:"showGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["grip"]
    },
    "class:SectionHeader":{
        methods:[],
        ref:"class:SectionHeader",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/SectionStack"],
        attrs:["attr:SectionHeader.icon", "attr:SectionHeader.baseStyle"],
        description:"Simple SectionHeader class based on a Label with an icon, skinnable via CSS.",
        name:"SectionHeader",
        seeAlso:[],
        type:"class"
    },
    "attr:Splitbar.hSrc":{
        ref:"attr:Splitbar.hSrc",
        flags:"IR",
        description:"Base URL for the image if ${isc.DocUtils.linkForRef('attr:StretchImg.vertical')} is false and \n ${isc.DocUtils.linkForRef('attr:StretchImg.src')} is unset.",
        name:"hSrc",
        seeAlso:[
            {ref:"attr:StretchImg.src", description:null},
            {ref:"attr:StretchImg.vSrc", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Splitbar",
        groups:["appearance"]
    },
    "attr:SectionStackSection.showHeader":{
        ref:"attr:SectionStackSection.showHeader",
        flags:"I",
        description:"If true, a header will be shown for this section.  If false, no header will be shown.",
        name:"showHeader",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"object:SectionStackSection"
    },
    "method:Menu.getSubmenu":{
        ref:"method:Menu.getSubmenu",
        flags:"A",
        description:" Get the submenu for a particular menu item.\n <P>\n Override to provide dynamic generation of submenus.\n \n",
        name:"getSubmenu",
        seeAlso:[],
        params:[
            {description:"the item in question, or it's index", optional:false, name:"item", 
             defaultValue:null,type:"MenuItem | number"}
        ],
        returns:{description:"the submenu", type:"Menu"},
        type:"method",
        definingClass:"class:Menu"
    },
    "attr:Button.showDownIcon":{
        ref:"attr:Button.showDownIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the mouse goes\n down on the button.",
        name:"showDownIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('buttonIcons')}"],
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "method:Class.setProperties":{
        ref:"method:Class.setProperties",
        flags:"",
        description:" Set multiple properties on an object, calling the appropriate setter methods if any are\n found.\n <p>\n Whenever you set a property on an ISC component, you should call either the specific setter\n for that property, or <code>setProperty()/setProperties()</code> if it doesn't have one.\n This future-proofs your code against the later addition of required setters.  \n <p>\n With <code>setProperties()</code> in particular, some classes may be able to take shortcuts\n and be more efficient when 2 or more related properties are set at the same time.\n\n",
        name:"setProperties",
        seeAlso:[
            {ref:"method:Class.setProperty", description:null}
        ],
        params:[
            {description:"objects with properties to add (think named parameters).										all the properties of each argument will be applied one\n										after another so later properties will override", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:Class"
    },
    "object:MenuItem":{
        methods:["method:MenuItem.click", "method:MenuItem.action"],
        ref:"object:MenuItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control/Menu"],
        attrs:["attr:MenuItem.title", "attr:MenuItem.submenu", "attr:MenuItem.isSeparator", 
         "attr:MenuItem.enabled","attr:MenuItem.checked", "attr:MenuItem.icon", "attr:MenuItem.iconWidth", 
         "attr:MenuItem.iconHeight","attr:MenuItem.keys", "attr:MenuItem.keyTitle", "attr:MenuItem.enableIf", 
         "attr:MenuItem.checkIf","attr:MenuItem.dynamicTitle", "attr:MenuItem.dynamicIcon"],
        description:"Menu items are specified are object literals, not class instances.  For example, when\n developing in JavaScript, a typical initialization block for a Menu would look like\n this:\n <pre>\n Menu.create({\n     data: [\n         {title: \"item1\", click: \"alert(1)\"},\n         {title: \"item2\"}\n     ]\n });\n </pre>\n And in XML:\n <pre>\n &lt;Menu&gt;\n    &lt;data&gt;\n        &lt;MenuItem title=\"item1\" click=\"alert(1)\"/&gt;\n        &lt;MenuItem title=\"item2\"/&gt;\n    &lt;/data&gt;\n &lt;/Menu&gt;\n </pre>",
        name:"MenuItem",
        seeAlso:[],
        type:"object"
    },
    "attr:StretchImgButton.state":{
        flags:"IRWA",
        getter:["getState"],
        type:"attr",
        ref:"attr:StretchImgButton.state",
        description:"Current \"state\" of this widget. StatefulCanvases will have a different appearance based\n on their current state. By default this is handled by changing the css className applied to\n the StatefulCanvas - see ${isc.DocUtils.linkForRef('attr:StatefulCanvas.baseStyle')} for a description of how this is\n done.<P>\n For ${isc.DocUtils.linkForRef('class:Img')} or ${isc.DocUtils.linkForRef('class:StretchImg')} based subclasses of StatefulCanvas, the \n appearance may also be updated by changing the src of the rendered image. See\n ${isc.DocUtils.linkForRef('attr:Img.src')} and ${isc.DocUtils.linkForRef('attr:StretchImgButton.src')} for a description of how the URL \n is modified to reflect the state of the widget in this case.",
        name:"state",
        setter:["setState"],
        valueType:"State",
        seeAlso:[
            {ref:"type:State", description:null},
            {ref:"group:state", description:null}
        ],
        defaultValue:"\"\"",
        groups:["state"],
        definingClass:"class:StretchImgButton"
    },
    "class:Date":{
        methods:["method:Date.duplicate", "method:Date.getShortDayName", "method:Date.getShortMonthName", 
         "method:Date.getShortYear","method:Date.toDateStamp", "method:Date.toNormalDate", "method:Date.toShortDate", 
         "method:Date.toUSShortDate","method:Date.toUSShortDateTime", "method:Date.toEuropeanShortDate", 
         "method:Date.toEuropeanShortDateTime","method:Date.toJapanShortDate", "method:Date.toJapanShortDateTime", 
         "method:Date.toSerializeableDate","method:Date.setFormatter", "method:Date.toPrettyString"],
        ref:"class:Date",
        classAttrs:["classAttr:Date.shortDayNames", "classAttr:Date.shortMonthNames"],
        classMethods:["classMethod:Date.create", "classMethod:Date.compareDates", 
         "classMethod:Date.setInputFormat","classMethod:Date.getInputFormat", "classMethod:Date.parseInput", 
         "classMethod:Date.setNormalDisplayFormat","classMethod:Date.setShortDisplayFormat"],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Extensions to the Date class, including added static methods on the Date object, and \n  additional instance methods available on all date instances.",
        name:"Date",
        seeAlso:[],
        type:"class"
    },
    "method:ComboBoxItem.dataArrived":{
        ref:"method:ComboBoxItem.dataArrived",
        flags:"",
        description:" If this item is showing a dataBound pickList, this notification method will be fired \n when new data arrives from the server.\n",
        name:"dataArrived",
        seeAlso:[],
        params:[
            {description:"index of first row returned by the server", optional:false, name:"startRow", 
             defaultValue:null,type:"number"},
            {description:"index of last row returned by the server", optional:false, name:"endRow", 
             defaultValue:null,type:"number"},
            {description:"pointer this pickList's data", optional:false, name:"data", defaultValue:null, 
             type:"ResultSet"}
        ],
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "classMethod:Flashlet.getFlashVersion":{
        ref:"classMethod:Flashlet.getFlashVersion",
        flags:"",
        description:" Which version of Flash is installed on this browser?\n",
        name:"getFlashVersion",
        seeAlso:[],
        returns:{description:"flash version number, or null if flash is not installed", type:"number"},
        type:"classMethod",
        definingClass:"class:Flashlet"
    },
    "attr:Applet.code":{
        ref:"attr:Applet.code",
        flags:"IR",
        description:"A URL that points to the class of the applet.",
        name:"code",
        seeAlso:[
            {ref:"attr:Applet.codeBase", description:null},
            {ref:"attr:Applet.archive", description:null}
        ],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "method:TabSet.removeTab":{
        ref:"method:TabSet.removeTab",
        flags:"A",
        description:" Remove a tab.\n <P>\n The pane associated with the removed tab is automatically destroyed when you\n call this method.  To avoid this, call ${isc.DocUtils.linkForRef('method:TabSet.updateTab')} with <code>null</code> as the new\n pane immediately before removing the tab.\n \n",
        name:"removeTab",
        seeAlso:[
            {ref:"method:TabSet.removeTabs", description:null}
        ],
        params:[
            {description:"list of tabs, tabIDs, or tab numbers", optional:false, name:"tabs", 
             defaultValue:null,type:"Tab | ID | number | Array of Tab"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('tabsAddAndRemove')}"],
        definingClass:"class:TabSet"
    },
    "method:ValuesManager.clearFieldErrors":{
        ref:"method:ValuesManager.clearFieldErrors",
        flags:"",
        description:" Clear all validation errors associated with some field in this form\n",
        name:"clearFieldErrors",
        seeAlso:[],
        params:[
            {description:"field for which errors should be cleared", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"if true, and the field is present in one of our member forms,                        redraw it to clear any currently visible validation errors", 
             optional:false,name:"show", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "method:FormItem.defaultDynamicValue":{
        ref:"method:FormItem.defaultDynamicValue",
        flags:"A",
        description:" Expression evaluated to determine the ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')} when no value is \n provided for this item.\n <P>\n If you don't need dynamic evaluation, you can just use <code>item.defaultValue</code>.\n\n",
        name:"defaultDynamicValue",
        seeAlso:[
            {ref:"attr:FormItem.defaultValue", description:null}
        ],
        params:[
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the current set of values for the form as a whole", optional:false, 
             name:"values",defaultValue:null, type:"Object"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["formValues"]
    },
    "object:SerializationContext":{
        methods:[],
        ref:"object:SerializationContext",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Data Binding/DataSource"],
        attrs:["attr:SerializationContext.useFlatFields"],
        description:"Flags for XML serialization",
        name:"SerializationContext",
        seeAlso:[],
        type:"object"
    },
    "method:SelectItem.getDisplayFieldName":{
        ref:"method:SelectItem.getDisplayFieldName",
        flags:"A",
        description:" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.displayField')} for this form item.\n If unset, and ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is explicitly specified, this method\n will return the title field for the <code>optionDataSource</code>\n",
        name:"getDisplayFieldName",
        seeAlso:[],
        returns:{description:"display field name, or null", type:"String"},
        type:"method",
        definingClass:"class:SelectItem"
    },
    "method:ListGrid.cellHoverHTML":{
        ref:"method:ListGrid.cellHoverHTML",
        flags:"",
        description:" StringMethod to dynamically assemble an HTML string to show in a hover window over the\n appropriate cell/record when this.canHover and this.showHover are both true.\n Called when the mouse hovers over a cell.\n\n",
        name:"cellHoverHTML",
        seeAlso:[
            {ref:"attr:ListGrid.canHover", description:null},
            {ref:"attr:ListGrid.showHover", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"the html to be shown inside the hover for this cell", type:"html"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "attr:Menu.useKeys":{
        ref:"attr:Menu.useKeys",
        flags:"IRW",
        description:"A boolean indicating whether this menu should use shortcut keys. Set useKeys to\n false in a menu's initialization block to explicitly disable shortcut keys.",
        name:"useKeys",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Menu"
    },
    "classAttr:Dialog.SAY_TITLE":{
        ref:"classAttr:Dialog.SAY_TITLE",
        flags:"IRW",
        description:"Default title for the dialog displayed in response to the ${isc.DocUtils.linkForRef('classMethod:isc.say')} method.\n Note that a custom title can be specified as the <code>title</code> attribute of the \n <code>properties</code> parameter passed to that method.",
        name:"SAY_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Note\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:ImgProperties.width":{
        ref:"attr:ImgProperties.width",
        flags:"IRW",
        description:"Specifies the width of the image.",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ImgProperties"
    },
    "attr:DetailViewer.emptyMessageStyle":{
        ref:"attr:DetailViewer.emptyMessageStyle",
        flags:"IRWA",
        description:"CSS style to display this message in",
        name:"emptyMessageStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"normal\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["emptyMessage"]
    },
    "group:columnControls":{
        ref:"group:columnControls",
        refs:["method:CubeGrid.closeFacet", "method:CubeGrid.closeColumn"],
        description:null,
        name:"columnControls",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.data":{
        flags:"IRW",
        type:"attr",
        ref:"attr:ListGrid.data",
        description:"A List of ListGridRecord objects, specifying the data to be used to populate the\n ListGrid.  In ListGrids, the data array specifies rows. Note that ListGrids\n automatically observe changes to the data List and redraw accordingly.\n <p>\n This property is settable directly only as part of a ${isc.DocUtils.linkForRef('class:ListGrid')} constructor.  If\n you want to change the ${isc.DocUtils.linkForRef('class:ListGrid')}'s data after initial creation, call\n ${isc.DocUtils.linkForRef('method:ListGrid.setData')}.\n <p>\n This property will typically not be explicitly specified for databound ListGrids, where\n the data is returned from the server via databound component methods such as\n ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')}. In this case the data objects will be set to a \n ${isc.DocUtils.linkForRef('class:ResultSet','resultSet')} rather than a simple array.",
        name:"data",
        setter:["setData"],
        valueType:"List of ListGridRecord",
        seeAlso:[
            {ref:"object:ListGridRecord", description:null}
        ],
        examples:["${isc.DocUtils.linkForExampleId('inlineData')}", 
         "${isc.DocUtils.linkForExampleId('localData')}"],
        defaultValue:"null",
        groups:["data"],
        definingClass:"class:ListGrid"
    },
    "attr:Snapbar.showDownGrip":{
        ref:"attr:Snapbar.showDownGrip",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the\n 'Down' state on the grip image when the user mousedown's on this widget. \n Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showDown')} is false",
        name:"showDownGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar",
        groups:["grip"]
    },
    "attr:Tab.closeIcon":{
        ref:"attr:Tab.closeIcon",
        flags:"IRW",
        description:"Custom src for the close icon for this tab to display if it is closeable.\n See ${isc.DocUtils.linkForRef('attr:Tab.canClose')} and ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')}.",
        name:"closeIcon",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab"
    },
    "group:Hovers":{
        ref:"group:Hovers",
        refs:["method:DynamicForm.itemHoverHTML", "method:DynamicForm.titleHoverHTML", 
         "method:FormItem.stopHover","method:FormItem.itemHover", "method:FormItem.titleHover", 
         "method:FormItem.titleHoverHTML","method:FormItem.itemHoverHTML", "attr:DynamicForm.itemHoverDelay", 
         "attr:DynamicForm.itemHoverWidth","attr:DynamicForm.itemHoverHeight", "attr:DynamicForm.itemHoverAlign", 
         "attr:DynamicForm.itemHoverVAlign","attr:DynamicForm.itemHoverStyle", "attr:DynamicForm.itemHoverOpacity", 
         "attr:FormItem.hoverDelay","attr:FormItem.hoverWidth", "attr:FormItem.hoverHeight", "attr:FormItem.hoverAlign", 
         "attr:FormItem.hoverVAlign","attr:FormItem.hoverStyle", "attr:FormItem.hoverOpacity"],
        name:"Hovers",
        seeAlso:[],
        type:"group"
    },
    "attr:Window.animateMinimize":{
        ref:"attr:Window.animateMinimize",
        flags:"IRWA",
        description:"Should this window minimize, maximize, and restore as an animation, or as a \n simple 1-step transition?",
        name:"animateMinimize",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('windowMinimize')}"],
        definingClass:"class:Window",
        groups:["appearance", "header", "animation"]
    },
    "method:Canvas.setWidth":{
        ref:"method:Canvas.setWidth",
        flags:"",
        description:" Resizes the widget horizontally to the specified width (moves the right side of the\n widget). The width parameter can be expressed as a percentage of viewport size or as\n the number of pixels.\n <P>\n NOTE: if you're setting multiple coordinates, use resizeTo() or setRect() instead\n    \n",
        name:"setWidth",
        seeAlso:[],
        params:[
            {description:"new width", optional:false, name:"width", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:OperationBinding.recordName":{
        ref:"attr:OperationBinding.recordName",
        flags:"IR",
        description:"For an XML DataSource, tagName of the elements to be used as records.\n <p>\n This is a simple alternative to ${isc.DocUtils.linkForRef('attr:OperationBinding.recordXPath')} when the elements to be used as\n records all share a tagName.\n <p>\n When a DataSource has a WebService, <code>recordName</code> can also be set to the name\n of any <code>complexType</code> declared within the WebService's WSDL file.",
        name:"recordName",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('wsdlBinding')}"],
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "classMethod:Class.fireCallback":{
        ref:"classMethod:Class.fireCallback",
        flags:"",
        description:"\n Fire some arbitrary action specified as a ${isc.DocUtils.linkForRef('type:Callback')}.\n Returns the value returned by the action.\n \n",
        name:"fireCallback",
        seeAlso:[],
        params:[
            {description:"Action to fire.", optional:false, name:"callback", defaultValue:null, 
             type:"Callback"},
            {description:"Comma separated string of variable names. If the callback                            passed in was a string of script, any arguments passed to the\n                            callback will be available as local variables with these names.", 
             optional:true,name:"argNames", defaultValue:null, type:"string"},
            {description:"Array of arguments to pass to the mthod. Note that the number                           of arguments should match the number of argNames.", 
             optional:true,name:"args", defaultValue:null, type:"array"},
            {description:"If specified the callback will be evaluated in the scope of this                          object - the <code>this</code> keyword will be a pointer to this\n                          target when the callback is fired.", 
             optional:true,name:"target", defaultValue:null, type:"object"}
        ],
        returns:{description:"returns the value returned by the callback method passed in.", type:"any"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:ListGrid.canEdit":{
        ref:"attr:ListGrid.canEdit",
        flags:"IRW",
        description:"Can the user edit cells in this listGrid? Can be set for the listGrid, and overridden for \n      individual fields.<br>\n      If 'canEdit' is false at the listGrid level, fields can never be edited - in this case\n      the canEdit property on individual fields will be ignored.<br>\n      If 'canEdit' is set to true at the listGrid level, setting the 'canEdit' property to\n      false at the field level will prevent the field from being edited inline.<br>\n      If 'canEdit' is not set at the listGrid level, setting 'canEdit' to true at the field \n      level enables the field to be edited inline.",
        name:"canEdit",
        seeAlso:[
            {ref:"method:ListGrid.startEditing", description:null},
            {ref:"attr:ListGridField.canEdit", description:null},
            {ref:"attr:ListGrid.recordEditProperty", description:null},
            {ref:"method:ListGrid.canEditCell", description:null},
            {ref:"attr:ListGrid.fields", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('editByRow')}"],
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:Layout.resizeBarClass":{
        ref:"attr:Layout.resizeBarClass",
        flags:"AIRW",
        description:"Class to use for creating resizeBars.\n <P>\n A resize bar will be created for any Layout member that specifies\n ${isc.DocUtils.linkForRef('attr:Canvas.showResizeBar','<code>showResizeBar:true</code>')}.\n Resize bars will be instances of the class specified by this property, and will \n automatically be sized to the member's breadth and to the thickness\n given by ${isc.DocUtils.linkForRef('attr:Layout.resizeBarSize')}.<br>\n Classes that are valid by default are ${isc.DocUtils.linkForRef('class:Splitbar')} and ${isc.DocUtils.linkForRef('class:ImgSplitbar')}.\n <P>\n To customize the appearance or behavior of resizeBars within some layout a custom \n resize bar class can be created by subclassing ${isc.DocUtils.linkForRef('class:Splitbar')} or ${isc.DocUtils.linkForRef('class:ImgSplitbar')} and\n setting this property on your layout to use your new class.\n <P>\n Resize bars will automatically be sized to the member's breadth and to the thickness\n given by <code>layout.resizeBarSize</code>.  The built-in Splitbar class supports\n drag resizing of its target member, and clicking on the bar to hide the target member.",
        name:"resizeBarClass",
        seeAlso:[
            {ref:"class:Splitbar", description:null},
            {ref:"class:ImgSplitbar", description:null},
            {ref:"attr:Layout.resizeBarSize", description:null}
        ],
        valueType:"String",
        defaultValue:"\"Splitbar\"",
        type:"attr",
        definingClass:"class:Layout"
    },
    "attr:MultiFileItem.dataSource":{
        ref:"attr:MultiFileItem.dataSource",
        flags:"IR",
        description:"DataSource where files are stored.  \n <P>\n This DataSource is expected to have a field of type \"binary\" as well as a primaryKey and\n foreignKey declaration to some other DataSource; see the ${isc.DocUtils.linkForRef('class:MultiFileItem')} for an\n overview.\n <P>\n This DataSource need only be capable of \"fetch\", \"add\" and \"remove\" - \"update\" is unused.",
        name:"dataSource",
        seeAlso:[],
        valueType:"DataSource or ID",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MultiFileItem"
    },
    "method:DynamicForm.setFields":{
        ref:"method:DynamicForm.setFields",
        flags:"",
        description:" Set the ${isc.DocUtils.linkForRef('attr:DynamicForm.fields','items')} for this DynamicForm. \n Takes an array of item definitions, which will be converted to ${isc.DocUtils.linkForRef('class:FormItem')}s and \n displayed in the form.<br>\n Note: Do not attempt to create ${isc.DocUtils.linkForRef('class:FormItem')} instances directly. This method should be\n passed the raw properties for each item only.\n\n",
        name:"setFields",
        seeAlso:[],
        params:[
            {description:"list of new items to show in the form", optional:false, name:"itemList", 
             defaultValue:null,type:"Array of objects"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["elements"]
    },
    "attr:Menu.iconHeight":{
        ref:"attr:Menu.iconHeight",
        flags:"IRW",
        description:"The default height applied to custom icons in this menu. This is used whenever\n          item.iconHeight is not specified.",
        name:"iconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Menu"
    },
    "class:ToolStrip":{
        methods:[],
        ref:"class:ToolStrip",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:ToolStrip.members", "attr:ToolStrip.height", "attr:ToolStrip.styleName", 
         "attr:ToolStrip.vertical","attr:ToolStrip.resizeBarClass", "attr:ToolStrip.resizeBarSize", 
         "attr:ToolStrip.separatorClass","attr:ToolStrip.separatorSize"],
        description:"Base class for creating toolstrips like those found in browsers and office applications: a\n mixed set of controls including ${isc.DocUtils.linkForRef('class:ImgButton','icon buttons')}, \n ${isc.DocUtils.linkForRef('attr:Button.radioGroup','radio button groups')}, ${isc.DocUtils.linkForRef('class:MenuButton','menus')},\n ${isc.DocUtils.linkForRef('class:ComboBoxItem','comboBoxes')}, ${isc.DocUtils.linkForRef('class:LayoutSpacer','spacers')}, ${isc.DocUtils.linkForRef('class:Label','status displays')} and \n ${isc.DocUtils.linkForRef('class:SelectItem','drop-down selects')}.  \n <P>\n All of the above components are placed in the ${isc.DocUtils.linkForRef('attr:ToolStrip.members','members array')} to form\n a ToolStrip.  Note that the ${isc.DocUtils.linkForRef('class:FormItem','FormItems')} mentioned above (ComboBox and\n drop-down selects) need to be placed within a ${isc.DocUtils.linkForRef('class:DynamicForm')} as usual.\n <P>\n The special strings \"separator\" and \"resizer\" can be placed in the members array to create\n separators and resizers respectively.\n <P>\n Also see the ${isc.DocUtils.linkForExampleId('toolstrip')} example in the Feature Explorer.",
        name:"ToolStrip",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('toolstrip')}"]
    },
    "method:ListGrid.sort":{
        ref:"method:ListGrid.sort",
        flags:"",
        description:"          Sorts a listGrid explicitly by the column given by sortFieldNum, if provided, in \n          ascending or descending order if specified by sortDirection. If sortFieldNum is not\n          provided and listGrid.sortFieldNum is undefined, the data will be sorted by the first\n          sortable column in the listGrid in ascending order.<br>\n          If provided, sortFieldNum and sortDirection will be remembered on the listGrid so that\n          resort() can be called subsequently.\n",
        name:"sort",
        seeAlso:[
            {ref:"type:SortDirection", description:null}
        ],
        params:[
            {description:"the column number to sort by", optional:true, name:"sortFieldNum", 
             defaultValue:null,type:"number"},
            {description:"the direction to sort in", optional:true, name:"sortDirection", 
             defaultValue:null,type:"SortDirection"}
        ],
        returns:{description:"sorting worked", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["sorting"]
    },
    "type:DSOperationType":{
        ref:"type:DSOperationType",
        values:[
            {description:"Fetch one or more records that match a set of search criteria.", 
             value:"\"fetch\""},
            {description:"Store new records", value:"\"add\""},
            {description:"Update an existing record", value:"\"update\""},
            {description:"Remove (delete) an existing record", value:"\"remove\""}
        ],
        description:"One of the four basic operations that can be performed on DataSource data: \"fetch\",\n \"add\", \"update\", \"remove\".  Elsewhere called CRUD operations, where CRUD stands for\n \"create\", \"retrieve\", \"update\", \"delete\", which correspond to \"add\", \"fetch\", \"update\" and\n \"remove\" in SmartClient terminology.  See ${isc.DocUtils.linkForRef('group:dataSourceOperations')} for a full\n description.",
        name:"DSOperationType",
        seeAlso:[],
        type:"type"
    },
    "group:selection":{
        ref:"group:selection",
        refs:["method:Selection.isSelected", "method:Selection.anySelected", 
         "method:Selection.multipleSelected","method:Selection.getSelection", "method:Selection.getSelectedRecord", 
         "method:Selection.setSelected","method:Selection.select", "method:Selection.deselect", "method:Selection.selectSingle", 
         "method:Selection.selectList","method:Selection.deselectList", "method:Selection.selectAll", 
         "method:Selection.deselectAll","method:Selection.selectItem", "method:Selection.deselectItem", 
         "method:Selection.selectRange","method:Selection.deselectRange", "method:GridRenderer.cellIsEnabled", 
         "method:GridRenderer.getEventRow","method:GridRenderer.getEventColumn", "method:GridRenderer.getNearestRowToEvent", 
         "method:GridRenderer.getNearestColToEvent","method:GridRenderer.selectionChanged", "method:GridRenderer.cellSelectionChanged", 
         "method:ListGrid.selectRecord","method:ListGrid.deselectRecord", "method:ListGrid.selectRecords", 
         "method:ListGrid.deselectRecords","method:ListGrid.selectAllRecords", "method:ListGrid.deselectAllRecords", 
         "method:ListGrid.anySelected","method:ListGrid.selectionChanged", "method:CellSelection.cellIsSelected", 
         "method:CellSelection.anySelected","method:CellSelection.getSelectedCells", "method:CellSelection.selectCell", 
         "method:CellSelection.deselectCell","method:CellSelection.selectCellList", "method:CellSelection.deselectCellList", 
         "method:CellSelection.selectSingleCell","method:CubeGrid.getEventRow", "method:CubeGrid.getEventColumn", 
         "method:CubeGrid.facetValueSelectionChanged","method:CubeGrid.getSelectedCells", "method:CubeGrid.getSelectedCellIds", 
         "method:CubeGrid.anyCellSelected","method:CubeGrid.cellIsSelected", "method:CubeGrid.selectCell", 
         "method:CubeGrid.deselectCell","method:CubeGrid.selectCells", "method:CubeGrid.deselectCells", 
         "method:CubeGrid.selectAllCells","method:CubeGrid.deselectAllCells", "method:CubeGrid.getSelectedFacetValues", 
         "method:CubeGrid.facetValuesSelected","method:CubeGrid.facetHasSelection", "method:CubeGrid.getFacetsHavingSelection", 
         "method:CubeGrid.selectFacetValues","method:CubeGrid.deselectFacetValues", "method:CubeGrid.selectFacetValue", 
         "method:CubeGrid.deselectFacetValue","method:CubeGrid.selectAllFacetValues", "method:CubeGrid.deselectAllFacetValues", 
         "method:CubeGrid.deselectAll","method:CubeGrid.cellSelectionChanged", "method:Toolbar.selectButton", 
         "method:Toolbar.deselectButton","method:ListGrid.getSelection", "method:ListGrid.getSelectedRecord", 
         "attr:ListGrid.selection","attr:ListGrid.selectionType", "attr:ListGrid.canDragSelect", 
         "attr:Menu.canSelectParentItems","attr:PickTreeItem.canSelectParentItems", "type:SelectionStyle"],
        description:null,
        name:"selection",
        seeAlso:[],
        type:"group"
    },
    "group:timer":{
        ref:"group:timer",
        refs:[],
        name:"timer",
        seeAlso:[],
        type:"group"
    },
    "attr:DynamicForm.action":{
        ref:"attr:DynamicForm.action",
        flags:"IRW",
        description:"The URL to which the form will submit its values.\n <p>\n <b>NOTE:</b> this is used only in the very rare case that a form is used to submit data\n directly to a URL.  Normal server contact is through RPCManager.<br>\n See ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} for more on this.",
        name:"action",
        setter:["setAction"],
        seeAlso:[
            {ref:"group:operations", description:null},
            {ref:"class:RPCManager", description:null}
        ],
        valueType:"string",
        defaultValue:"\"#\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "attr:Canvas.overflow":{
        ref:"attr:Canvas.overflow",
        flags:"IRW",
        description:"Controls what happens when the drawn size of the content of a Canvas is either\n			greater or smaller than the specified size of the Canvas.  Similar to the CSS\n			property overflow, but consistent across browsers.  See Overflow type for\n			details.",
        name:"overflow",
        setter:["setOverflow"],
        seeAlso:[],
        valueType:"Overflow",
        defaultValue:"Canvas.VISIBLE",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:OperationBinding.defaultParams":{
        ref:"attr:OperationBinding.defaultParams",
        flags:"IRA",
        description:"HTTP parameters that should be submitted with every DSRequest.\n <P>\n Useful for authenticated services that require a sessionId with every request.\n <P>\n Can be set for all operations of a given DataSource as DataSource.defaultParams.",
        name:"defaultParams",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:DSRequest.textMatchStyle":{
        ref:"attr:DSRequest.textMatchStyle",
        flags:"I",
        description:"For \"fetch\" operations, how search criteria should be interpreted for text fields: either\n \"exact\" for exact match, or \"substring\" for case-insensitive substring match.\n <p>\n This setting is respected by the built-in SQLDataSource.  Your custom DataSource\n implementation can interpret the search criteria passed into \"fetch\" operations in arbitrary\n ways; you can safely ignore this flag and use others of your own devising.",
        name:"textMatchStyle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"exact\"",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "attr:ListGrid.groupNodeStyle":{
        ref:"attr:ListGrid.groupNodeStyle",
        flags:"IRW",
        description:"The CSS style that group rows will have",
        name:"groupNodeStyle",
        seeAlso:[
            {ref:"group:grouping", description:null}
        ],
        valueType:"String",
        defaultValue:"\"groupNode\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "method:ListGridField.recordDoubleClick":{
        ref:"method:ListGridField.recordDoubleClick",
        flags:"",
        description:"\n Executed when this field is double-clicked.  Note that if ${isc.DocUtils.linkForRef('method:ListGrid.recordDoubleClick')} is\n also defined, it will not fire for fields that define a recordDoubleClick handler.\n\n\n",
        name:"recordDoubleClick",
        seeAlso:[
            {ref:"method:ListGrid.recordClick", description:null}
        ],
        params:[
            {description:"the listGrid that contains doubleclick event", optional:false, name:"viewer", 
             defaultValue:null,type:"ListGrid"},
            {description:"the record that was double-clicked", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"number of the record clicked on in the current set of                                  displayed records (starts with 0)", 
             optional:false,name:"recordNum", defaultValue:null, type:"number"},
            {description:"the field that was clicked on (field definition)", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"number of the field clicked on in the listGrid.fields                                  array", 
             optional:false,name:"fieldNum", defaultValue:null, type:"number"},
            {description:"value of the cell (after valueMap, etc. applied)", optional:false, 
             name:"value",defaultValue:null, type:"object"},
            {description:"raw value of the cell (before valueMap, etc applied)", optional:false, 
             name:"rawValue",defaultValue:null, type:"object"}
        ],
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('recordClicks')}"],
        definingClass:"object:ListGridField",
        groups:["events"]
    },
    "attr:FormItem.errorIconHeight":{
        ref:"attr:FormItem.errorIconHeight",
        flags:"IRW",
        description:"Height of the error icon, if we're showing icons when validation errors occur.",
        name:"errorIconHeight",
        seeAlso:[
            {ref:"attr:FormItem.showErrorIcon", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["errorIcon"]
    },
    "attr:SelectItem.pickerIconStyle":{
        ref:"attr:SelectItem.pickerIconStyle",
        flags:"IRW",
        description:"Base CSS class name for a form item's picker icon cell. If unset inherits from \n this items <code>controlStyle</code>.",
        name:"pickerIconStyle",
        seeAlso:[
            {ref:"attr:SelectItem.controlStyle", description:null}
        ],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"selectItemPickerIcon\", [IRA]",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["appearance"]
    },
    "method:ResultSet.indexOf":{
        ref:"method:ResultSet.indexOf",
        flags:"",
        description:" Return the position in the list of the first instance of the specified object.\n <p>\n If pos is specified, starts looking after that position.\n <p>\n Returns -1 if not found.\n <p>\n <b>NOTE:</b> ResultSet.indexOf() only inspects the current cache of records, so it is only\n appropriate for temporary presentation purposes.  For example, it would not be appropriate\n to hold onto a record and attempt to use indexOf() to determine if it had been deleted.\n\n",
        name:"indexOf",
        seeAlso:[],
        params:[
            {description:"object to look for", optional:false, name:"obj", defaultValue:null, type:"any"},
            {description:"earliest index to consider", optional:true, name:"pos", defaultValue:null, 
             type:"number"},
            {description:"last index to consider", optional:true, name:"endPos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"position of the item, if found, -1 if not found", type:"number"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access"]
    },
    "classAttr:Validator.requiredField":{
        ref:"classAttr:Validator.requiredField",
        flags:"IRA",
        description:"Default error message to display when validation fails for a field marked as required,\n  or a field with a standard <code>requiredIf</code> type validator whose condition \n  evaluates to true, because the field has no value.",
        name:"requiredField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"'Field is required'",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "attr:SliderItem.sliderProperties":{
        ref:"attr:SliderItem.sliderProperties",
        flags:"IR",
        description:"Properties to add to the automatically created ${isc.DocUtils.linkForRef('class:Slider')} used by this\n FormItem.  See the ${isc.DocUtils.linkForRef('class:Slider')} class for reference.",
        name:"sliderProperties",
        seeAlso:[],
        valueType:"Slider properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SliderItem"
    },
    "attr:DetailViewer.labelPrefix":{
        ref:"attr:DetailViewer.labelPrefix",
        flags:"IRW",
        description:"text to put before a label",
        name:"labelPrefix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["labels"]
    },
    "method:MenuBar.addMenus":{
        ref:"method:MenuBar.addMenus",
        flags:"",
        description:" Dynamically update the menuBar to include additional menus. Will update the visible set\n of buttons as appropriate\n",
        name:"addMenus",
        seeAlso:[],
        params:[
            {description:"Array of new menus to add", optional:false, name:"newMenus", 
             defaultValue:null,type:"array"},
            {description:"desired starting position of the new menus in the existing menus   array", 
             optional:false,name:"position", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:MenuBar"
    },
    "attr:StretchImgButton.showDisabled":{
        ref:"attr:StretchImgButton.showDisabled",
        flags:"IRW",
        description:"Should we visibly change state when disabled?",
        name:"showDisabled",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["state"]
    },
    "method:List.getItems":{
        ref:"method:List.getItems",
        flags:"",
        description:" Return the items at a list of specified positions.\n\n",
        name:"getItems",
        seeAlso:[],
        params:[
            {description:"array of positions", optional:false, name:"itemList", defaultValue:null, 
             type:"List of Number"}
        ],
        returns:{description:"subset of the array, in the same order as itemList", type:"array"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "method:StatefulCanvas.isSelected":{
        ref:"method:StatefulCanvas.isSelected",
        flags:"",
        description:" Find out if this object is selected\n",
        name:"isSelected",
        seeAlso:[],
        returns:{description:null, type:"boolean"},
        type:"method",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "classMethod:DataSource.get":{
        ref:"classMethod:DataSource.get",
        flags:"",
        description:" Synonym of ${isc.DocUtils.linkForRef('classMethod:DataSource.getDataSource')}: Lookup a DataSource by ID.\n\n",
        name:"get",
        seeAlso:[],
        params:[
            {description:"DataSource ID", optional:false, name:"ID", defaultValue:null, 
             type:"identifier"}
        ],
        returns:{description:"the DataSource with this ID, if loaded, otherwise null.", type:"DataSource"},
        type:"classMethod",
        definingClass:"class:DataSource"
    },
    "classAttr:ValidatorTypes.contains":{
        ref:"classAttr:ValidatorTypes.contains",
        flags:"IR",
        description:"Determine whether a string value contains some substring specified via \n <code>validator.substring</code>.",
        name:"contains",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        definingClass:"class:ValidatorTypes"
    },
    "attr:GridRenderer.showEmptyMessage":{
        ref:"attr:GridRenderer.showEmptyMessage",
        flags:"IRW",
        description:"Indicates whether the text of the emptyMessage property should be displayed if no data is\n available.",
        name:"showEmptyMessage",
        seeAlso:[
            {ref:"attr:GridRenderer.emptyMessage", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["emptyMessage"]
    },
    "attr:ListGridField.editorProperties":{
        ref:"attr:ListGridField.editorProperties",
        flags:"IRWA",
        description:"Properties to apply the the form item created to edit this field. (Only used if\n this field is editable).\n <P>\n For example, if you have a field \"shoeSize\" with ${isc.DocUtils.linkForRef('attr:DataSourceField.editorType')} set\n to \"SpinnerItem\" in order to use a SpinnerItem as your field editor, and you want to pass the\n ${isc.DocUtils.linkForRef('attr:SpinnerItem.step')} property to the created SpinnerItem:\n <pre>\n    fields : [\n        { name:\"shoeSize\", editorType:\"SpinnerItem\", \n          editorProperties : { step:0.5 } },\n        ... other fields ...\n    ]\n </pre>",
        name:"editorProperties",
        seeAlso:[],
        valueType:"FormItem properties",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customEditors')}"],
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:Chart.setupChart":{
        ref:"method:Chart.setupChart",
        flags:"",
        description:" General facet and data model setup, including auto-derivation of facetValues from data if\n necessary.  Should be called by any concrete charting implementation before calling any\n other Chart method.\n\n",
        name:"setupChart",
        seeAlso:[],
        type:"method",
        definingClass:"interface:Chart"
    },
    "attr:Dialog.toolbarButtons":{
        ref:"attr:Dialog.toolbarButtons",
        flags:"IR",
        description:"Array of Buttons to show in the ${isc.DocUtils.linkForRef('attr:Dialog.showToolbar','toolbar')}, if shown.\n <P>\n The set of buttons to use is typically set by calling one of the shortcuts such as\n ${isc.DocUtils.linkForRef('classMethod:isc.say')} or ${isc.DocUtils.linkForRef('classMethod:isc.confirm')}.  A custom set of buttons can be passed to\n these shortcuts methods via the \"properties\" argument, or to a directly created Dialog.\n <P>\n In both cases, a mixture of ${isc.DocUtils.linkForRef('type:DialogButtons','built-in buttons')}, custom buttons,\n and other components (such as a ${isc.DocUtils.linkForRef('class:LayoutSpacer')}) can be passed.  Built-in buttons\n can be referred to as <code>isc.Dialog.OK</code>, for example:\n <pre>\n isc.Dialog.create({\n    toolbarButtons:[\n       isc.Dialog.OK, \n       isc.Dialog.CANCEL, \n       isc.LayoutSpacer.create({width:50}), \n       { title:\"Not now\", click:\"doSomething()\" }\n    ]\n })\n </pre>\n Built-in buttons will call standard methods on the Dialog itself, such as\n ${isc.DocUtils.linkForRef('method:Dialog.cancelClick')}, as explained in the \n ${isc.DocUtils.linkForRef('type:DialogButtons','list of built-in buttons')}.",
        name:"toolbarButtons",
        seeAlso:[],
        valueType:"Array of Button or Button Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Dialog"
    },
    "attr:DSRequest.operationType":{
        ref:"attr:DSRequest.operationType",
        flags:"IR",
        description:"Type of operation being performed, \"fetch\", \"add\", \"remove\" or \"update\".\n <P>\n This property is generally automatically populated, for example when calling\n <code>fetchData()</code> on a DataSource or DataBound component the operationType is\n automatically set to \"fetch\".",
        name:"operationType",
        seeAlso:[],
        valueType:"DSOperationType",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "attr:Snapbar.showRollOverGrip":{
        ref:"attr:Snapbar.showRollOverGrip",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:Splitbar.showGrip')} is true, this property determines whether to show the\n 'Over' state on the grip image when the user rolls over on this widget. \n Has no effect if ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showRollOver')} is false",
        name:"showRollOverGrip",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Snapbar",
        groups:["grip"]
    },
    "attr:DataSource.useFlatFields":{
        ref:"attr:DataSource.useFlatFields",
        flags:"IR",
        description:"Like ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useFlatFields')}, but applies to all DataBound components\n that bind to this DataSource.",
        name:"useFlatFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["fields"]
    },
    "attr:FacetValue.borderAfter":{
        ref:"attr:FacetValue.borderAfter",
        flags:"IR",
        description:"CSS line style to apply as a border after this facetValue",
        name:"borderAfter",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "classMethod:FileLoader.loadISC":{
        ref:"classMethod:FileLoader.loadISC",
        flags:"",
        description:"\n Loads the specified SmartClient modules and skin in defer mode.  Calling this method is\n equivalent to using the <code>loadISC</code> JSP tag with <code>defer=\"true\"</code>.\n\n",
        name:"loadISC",
        seeAlso:[],
        params:[
            {description:"Name of the skin to load.  If not specified, the skin specified by the                        default ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultSkin')} will be used.\n                        Instead of a skin name, you can specify a skinDir - this works just\n                        like ${isc.DocUtils.linkForRef('classMethod:Page.setSkinDir')} - the skin assumed to be a skinDir if\n                        there's at least one forward slash (/) in the name.", 
             optional:true,name:"skin", defaultValue:null, type:"String"},
            {description:"List of modules to load.  If not specified, the list of modules                                   specified by the default\n                                   ${isc.DocUtils.linkForRef('classAttr:FileLoader.defaultModules')} will be used.  You\n                                   can specify modules as e.g: \"Core,Foundation\" or as [\"Core\",\n                                   \"Foundation\"]", 
             optional:true,name:"modules", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when all specified modules and                                      skin have loaded.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:GridRenderer.fixedRowHeights":{
        ref:"attr:GridRenderer.fixedRowHeights",
        flags:"IRWA",
        description:"Should we vertically clip cell contents, or allow rows to expand vertically to show all\n contents?\n <P>\n If we allow rows to expand, the row height as derived from\n ${isc.DocUtils.linkForRef('method:GridRenderer.getRowHeight','getRowHeight()')} or the\n default ${isc.DocUtils.linkForRef('attr:GridRenderer.cellHeight')} is treated as a minimum.",
        name:"fixedRowHeights",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "classMethod:isc.getValues":{
        ref:"classMethod:isc.getValues",
        flags:"",
        description:"\n	Return all values of a given object\n\n",
        name:"getValues",
        seeAlso:[],
        params:[
            {description:"object to get properties from", optional:false, name:"object", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"values of all properties.  NOTE: never null", type:"Array"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:ActiveXControl.id":{
        ref:"attr:ActiveXControl.id",
        flags:"IR",
        description:"Sets the 'id' attribute on the object.  If a name is not provided it will be\n  auto-generated.  Note that in general you don't need to set this.  If you have a reference to\n  your ISC ActiveX control object you can simply call\n  ${isc.DocUtils.linkForRef('method:ActiveXControl.getPluginHandle')} to get a handle to the element.",
        name:"id",
        seeAlso:[
            {ref:"method:ActiveXControl.getPluginHandle", description:null},
            {ref:"method:ActiveXControl.getPluginID", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ActiveXControl"
    },
    "classAttr:Dialog.APPLY_BUTTON_TITLE":{
        ref:"classAttr:Dialog.APPLY_BUTTON_TITLE",
        flags:"IRW",
        description:"Title for the <code>\"Apply\"</code> button.",
        name:"APPLY_BUTTON_TITLE",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        valueType:"HTML",
        defaultValue:"\"Apply\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "method:Array.addList":{
        ref:"method:Array.addList",
        flags:"",
        description:" Add a list of items to this array.\n <P>\n Note: you can specify that a subset range be added by passing start and end indices\n\n",
        name:"addList",
        seeAlso:[],
        params:[
            {description:"list of items to add", optional:false, name:"list", defaultValue:null, 
             type:"array"},
            {description:"optional start index in list", optional:true, name:"listStartRow", 
             defaultValue:null,type:"number"},
            {description:"optional end index in list (non-inclusive)", optional:true, 
             name:"listEndRow",defaultValue:null, type:"number"}
        ],
        returns:{description:"list of items that were added", type:"list"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "classMethod:History.getCurrentHistoryId":{
        ref:"classMethod:History.getCurrentHistoryId",
        flags:"",
        description:"\n Returns the current history id as reflected by the current URL.\n\n",
        name:"getCurrentHistoryId",
        seeAlso:[],
        returns:{description:"The current history id as reflected by the current URL.", type:"String"},
        type:"classMethod",
        definingClass:"class:History"
    },
    "attr:StretchImgButton.valign":{
        ref:"attr:StretchImgButton.valign",
        flags:"IRW",
        description:"Vertical alignment of this component's title.",
        name:"valign",
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:StretchImgButton",
        groups:["appearance"]
    },
    "attr:RichTextEditor.fontNames":{
        ref:"attr:RichTextEditor.fontNames",
        flags:"IRA",
        description:"ValueMap of css fontName properties to font name titles to display in the font selector \n  if <code>\"fontSelector\"</code> is included in ${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} \n  for this editor.\n  Default value for this attribute:<br>\n <code> {\n &nbsp;&nbsp;\"arial,helvetica,sans-serif\":\"Arial\",\n &nbsp;&nbsp;'courier new,courier,monospace':\"Courier New\",\n &nbsp;&nbsp;'georgia,times new roman,times,serif':\"Georgia\",\n &nbsp;&nbsp;'tahoma,arial,helvetica,sans-serif':\"Tahoma\",\n &nbsp;&nbsp;'times new roman,times,serif':\"Times New Roman\",\n &nbsp;&nbsp;'verdana,arial,helvetica,sans-serif':\"Verdana\",\n &nbsp;&nbsp;\"impact\":\"Impact\"}</code>",
        name:"fontNames",
        seeAlso:[],
        valueType:"object",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:RichTextEditor"
    },
    "attr:TabSet.bottomEdgeSizes":{
        ref:"attr:TabSet.bottomEdgeSizes",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeSizes</code>, \n <code>rightEdgeSizes</code>, <code>topEdgeSizes</code> and <code>bottomEdgeSizes</code> \n propertes allow the sizes of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge sizes where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"bottomEdgeSizes",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:ListGrid.headerBackgroundColor":{
        ref:"attr:ListGrid.headerBackgroundColor",
        flags:"IRW",
        description:"BackgroundColor for the header toolbar. Typically this is set to match the color\n of the header buttons.",
        name:"headerBackgroundColor",
        seeAlso:[],
        valueType:"color",
        defaultValue:"\"#CCCCCC\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "attr:GridRenderer.cellHeight":{
        ref:"attr:GridRenderer.cellHeight",
        flags:"IRW",
        description:"The default height of each row in pixels.",
        name:"cellHeight",
        seeAlso:[
            {ref:"method:GridRenderer.getRowHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["cellStyling"]
    },
    "attr:TabSet.symmetricPickerButton":{
        ref:"attr:TabSet.symmetricPickerButton",
        flags:"IR",
        description:"If this TabSet is showing a ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker','tab picker button')}, this\n property determines whether the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonHSrc')} and\n ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonVSrc')} media will be used for vertical and horizontal tab-bar\n picker buttons, or whether separate media should be used for each possible \n ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition','tabBarPosition')} based on the ${isc.DocUtils.linkForRef('attr:TabSet.pickerButtonSrc')}\n property  for this tabSet.",
        name:"symmetricPickerButton",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarScrolling"]
    },
    "classMethod:Array.compareDescending":{
        ref:"classMethod:Array.compareDescending",
        flags:"A",
        description:" Compare two values for a descending order sort, using locale-sensitive comparison.\n",
        name:"compareDescending",
        seeAlso:[],
        params:[
            {description:"first value to compare", optional:false, name:"first", defaultValue:null, 
             type:"any"},
            {description:"second value to compare", optional:false, name:"second", defaultValue:null, 
             type:"any"}
        ],
        returns:{description:"negative == first is larger, 0 == same value, positive == second is larger", 
         type:"number"},
        type:"classMethod",
        definingClass:"object:Array",
        groups:["sorting"]
    },
    "attr:Canvas.canFocus":{
        flags:"IRWA",
        type:"attr",
        ref:"attr:Canvas.canFocus",
        description:"Can this widget be allowed to become the target of keyboard events?\n <P>\n If canFocus is unset (the default), only scrollable widgets with visible scrollbars are\n focusable, to allow for keyboard scrolling.\n <P>\n A widget normally receives focus by being clicked on or tabbed to.",
        name:"canFocus",
        setter:["setCanFocus"],
        valueType:"boolean",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('focus')}"],
        defaultValue:"null",
        groups:["focus", "events"],
        definingClass:"class:Canvas"
    },
    "method:GridRenderer.cellMouseUp":{
        ref:"method:GridRenderer.cellMouseUp",
        flags:"A",
        description:" Called when a cell receives a mouseup event.\n\n",
        name:"cellMouseUp",
        seeAlso:[],
        params:[
            {description:"Record object (retrieved from getCellRecord(rowNum, colNum))", 
             optional:false,name:"record", defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "classMethod:Page.setSkinDir":{
        ref:"classMethod:Page.setSkinDir",
        flags:"",
        description:"		Specify the URL for media that's part of the skin\n\n",
        name:"setSkinDir",
        seeAlso:[],
        params:[
            {description:"New skinDir URL", optional:true, name:"URL", defaultValue:null, type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["skins", "files", "images"]
    },
    "attr:DateChooser.nextMonthIcon":{
        ref:"attr:DateChooser.nextMonthIcon",
        flags:"IRW",
        description:"Icon for the next month button",
        name:"nextMonthIcon",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"\"[SKIN]arrow_right.gif\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:ListGrid.canFreezeFields":{
        ref:"attr:ListGrid.canFreezeFields",
        flags:"IRW",
        description:"Whether an interface should be shown to allow user is allowed to dynamically \"freeze\" or\n \"unfreeze\" columns with respect to horizontally scrolling.  \n <P>\n Note that the <code>canFreezeFields</code> setting enables or disables the user\n interface for freezing and unfreezing fields only.  Fields can be programmatically\n frozen via setting ${isc.DocUtils.linkForRef('attr:ListGridField.frozen','field.frozen')} to true when the grid is\n created, or dynamically frozen and unfrozen via ${isc.DocUtils.linkForRef('method:ListGrid.freezeField')} and\n ${isc.DocUtils.linkForRef('method:ListGrid.unfreezeField')}.",
        name:"canFreezeFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["frozenFields"]
    },
    "method:ListGrid.getFieldNum":{
        ref:"method:ListGrid.getFieldNum",
        flags:"A",
        description:"		Given a field or field id, return it's index in the fields array\n",
        name:"getFieldNum",
        seeAlso:[],
        params:[
            {description:"field number or field.name", optional:false, name:"fieldID", 
             defaultValue:null,type:"string || number"}
        ],
        returns:{description:"index of the field within this.fields", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["display"]
    },
    "attr:Window.headerIcon":{
        ref:"attr:Window.headerIcon",
        flags:"R",
        description:"Header icon shown at left end of header by default.",
        name:"headerIcon",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:ToolbarItem.buttons":{
        ref:"attr:ToolbarItem.buttons",
        flags:"IRW",
        description:"List of buttons for the toolbar.\n  Each buttons should be specified as a simple JS object with properties to apply to the\n  button to be displayed. Note that any <code>click</code> stringMethod applied to the\n  button will be passed 2 parameters: <code>form</code> and <code>item</code>.",
        name:"buttons",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ToolbarItem",
        groups:["items"]
    },
    "attr:RichTextItem.controlGroups":{
        ref:"attr:RichTextItem.controlGroups",
        flags:"IA",
        description:"${isc.DocUtils.linkForRef('attr:RichTextEditor.controlGroups')} to display for this editor.\n Each controlGroup should be a property set either on this item or on the RichTextEditor\n prototype and should be set to an array of ${isc.DocUtils.linkForRef('type:ControlName')}s.",
        name:"controlGroups",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RichTextItem"
    },
    "method:Tree.removeList":{
        ref:"method:Tree.removeList",
        flags:"",
        description:"\n Remove a list of nodes (not necessarily from the same parent), and all children of those nodes.\n			\n",
        name:"removeList",
        seeAlso:[],
        params:[
            {description:"list of nodes to remove", optional:false, name:"nodeList", defaultValue:null, 
             type:"List of TreeNode"}
        ],
        returns:{description:"true if the tree was changed as a result of this call", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "method:Canvas.moveBy":{
        ref:"method:Canvas.moveBy",
        flags:"",
        description:"			Moves the widget deltaX pixels to the right and deltaY pixels down. Pass negative\n          numbers to move up and/or to the left.\n",
        name:"moveBy",
        seeAlso:[],
        params:[
            {description:"amount to move horizontally (may be negative)", optional:false, 
             name:"deltaX",defaultValue:null, type:"number"},
            {description:"amount to move vertically (may be negative)", optional:false, name:"deltaY", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"whether the component actually moved", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('move')}"],
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "attr:StatefulCanvas.actionType":{
        flags:"IRW",
        getter:["getActionType"],
        type:"attr",
        ref:"attr:StatefulCanvas.actionType",
        description:"Behavior on state changes -- BUTTON, RADIO or CHECKBOX",
        name:"actionType",
        setter:["setActionType"],
        valueType:"SelectionType",
        seeAlso:[],
        defaultValue:"\"button\"",
        groups:["state", "event handling"],
        definingClass:"class:StatefulCanvas"
    },
    "attr:BlurbItem.showTitle":{
        ref:"attr:BlurbItem.showTitle",
        flags:"IRW",
        description:"Blurb items show no title by default.",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:BlurbItem",
        groups:["appearance"]
    },
    "classMethod:Time.compareTimes":{
        ref:"classMethod:Time.compareTimes",
        flags:"",
        description:" Compares the times of 2 dates, or strings. If a string is passed as one of the \n parameters it should be in a format that converts to a valid time such as <code>\"1:30pm\"</code>, \n <code>\"13:30\"</code>, or <code>\"1:30:45pm\"</code>\n",
        name:"compareTimes",
        seeAlso:[],
        params:[
            {description:"First time to compare", optional:false, name:"time1", defaultValue:null, 
             type:"Date|string"},
            {description:"Second time to compare", optional:false, name:"time2", defaultValue:null, 
             type:"Date|string"}
        ],
        returns:{description:"True if the times match, false if not", type:"boolean"},
        type:"classMethod",
        definingClass:"class:Time"
    },
    "method:Progressbar.setLength":{
        ref:"method:Progressbar.setLength",
        flags:"",
        description:" Sets the length of the progressbar to newLength. This is the width of a horizontal progressbar,\n or the height of a vertical progressbar.\n\n",
        name:"setLength",
        seeAlso:[],
        params:[
            {description:"the new length of the progressbar", optional:false, name:"newLength", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Progressbar"
    },
    "method:WebService.setLocation":{
        ref:"method:WebService.setLocation",
        flags:"A",
        description:" Set location can be used when the actual URL where a service will be accessible isn't\n known until runtime, or changes at runtime, hence can't be embedded in the service\n definition.\n <P>\n With an operation parameter, <code>setLocation()</code> can be used to set a distinct\n URL for each web service operation.  This is a development-time only feature that allows\n XML flat files to be placed at various URLs on a server, to serve as spoofed responses\n for each web service operation.\n\n",
        name:"setLocation",
        seeAlso:[],
        params:[
            {description:"URL where web service can be contacted", optional:false, name:"location", 
             defaultValue:null,type:"URL"},
            {description:"optional operation name to set the location for, for                             debugging only", 
             optional:true,name:"operation", defaultValue:null, type:"String"}
        ],
        type:"method",
        definingClass:"class:WebService",
        groups:["webService"]
    },
    "method:ValuesManager.setFieldErrors":{
        ref:"method:ValuesManager.setFieldErrors",
        flags:"",
        description:" Sets validation errors for some field in the valuesManager.<br>\n Errors passed in should be a string (for a single error message) or an array of strings.\n Pass in the showErrors parameter to immediately display the errors to the user by \n redrawing the appropriate member form item (or if no visible item is found for the field\n firing ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.\n",
        name:"setFieldErrors",
        seeAlso:[],
        params:[
            {description:"name of field to apply errors to", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"error messages for the field", optional:false, name:"errors", 
             defaultValue:null,type:"string | array of strings"},
            {description:"should the error(s) be immediately displayed to the user?", optional:false, 
             name:"showErrors",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "attr:ListGridField.editorType":{
        ref:"attr:ListGridField.editorType",
        flags:"IRWA",
        description:"Name of form item class to use for the form item created to edit this field. \n      (Only used if this field is editable).<br>\n      Note: If this is not specified, the edit-form item type may be derived from the\n      <code>editorType</code> property, typically inherited from datasource fields, or \n      from the <code>type</code> of the field (showing the appropriate form item for \n      the data-type). See the ${isc.DocUtils.linkForRef('group:editing')} overview for more on editing ListGrid\n      fields.",
        name:"editorType",
        seeAlso:[
            {ref:"attr:ListGrid.canEdit", description:null}
        ],
        valueType:"FormItem className",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('customEditors')}"],
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "method:TabSet.disableTab":{
        ref:"method:TabSet.disableTab",
        flags:"",
        description:" If the specified tab is enabled, disable it now.\n",
        name:"disableTab",
        seeAlso:[
            {ref:"attr:Tab.disabled", description:null}
        ],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"Tab | number | ID"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "group:cues":{
        ref:"group:cues",
        refs:["method:Canvas.setOpacity", "method:Canvas.setCursor", "attr:Canvas.cursor", 
         "attr:Canvas.disabledCursor","attr:Canvas.opacity", "attr:Canvas.contextMenu", "type:Cursor"],
        description:"Visual hints for the user that something can be done to this object",
        name:"cues",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.groupIcon":{
        ref:"attr:ListGrid.groupIcon",
        flags:"IRW",
        description:"The URL of the base icon for the group icons in this treegrid.",
        name:"groupIcon",
        seeAlso:[
            {ref:"group:grouping", description:null}
        ],
        valueType:"SCImgURL",
        defaultValue:"\"[SKINIMG]/TreeGrid/opener.gif\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "class:ViewLoader":{
        methods:["method:ViewLoader.setViewURL", "method:ViewLoader.handleError"],
        type:"class",
        ref:"class:ViewLoader",
        classAttrs:[],
        treeLocation:["Client Reference/Foundation"],
        classMethods:[],
        description:"The ViewLoader component can be used to load new SmartClient-based user interfaces into a\n running application.\n <P>\n <b>NOTE:</b> before using a ViewLoader, be sure that you have read about and understood the\n ${isc.DocUtils.linkForRef('group:smartArchitecture','SmartClient Architecture')}.  The most responsive and\n scalable application architecture preloads views rather than using ViewLoaders.\n <P>\n A ViewLoader is a Canvas, and can be provided anywhere a Canvas can be provided: as a Tab\n pane, and Layout member, etc.  When a ViewLoader draws, it shows a\n ${isc.DocUtils.linkForRef('attr:ViewLoader.loadingMessage','loading message')}, then\n performs an RPC to the ${isc.DocUtils.linkForRef('attr:ViewLoader.viewURL','viewURL')} to load components.\n <P>\n The response from the viewURL should be SmartClient components defined in JavaScript, with no\n surrounding &lt;SCRIPT&gt; tags or other HTML framing.  The returned script can be\n dynamically generated, for example, it may be the result of a JSP containing an XML view\n description enclosed in ${isc.DocUtils.linkForRef('group:xmlTag','&lt;isomorphicXML&gt;')} tags.\n <P>\n In the returned script, the special variable \"viewLoader\" is available to refer to the\n ViewLoader instance that is loading components.  The intended usage is that the returned\n script creates a view consisting of SmartClient components, then calls\n <code>viewLoader.setView(myView)</code> to place the loaded view into the ViewLoader.\n If the view does not call setView() explicitly, the viewLoader will find the last top-level\n UI component (Canvas subclass) created by the view and set that as the current view.\n Top-level in this case means that the UI component is not contained in another UI component\n as a member or child.\n <p>\n The ViewLoader relies on the XMLHttpRequest object which can be disabled by end-users in some\n supported browsers.  See ${isc.DocUtils.linkForRef('group:platformDependencies')} for more information.",
        attrs:["attr:ViewLoader.loadingMessage", "attr:ViewLoader.viewURL", 
         "attr:ViewLoader.viewURLParams","attr:ViewLoader.viewRPCProperties", "attr:ViewLoader.httpMethod"],
        name:"ViewLoader",
        seeAlso:[
            {ref:"attr:RPCRequest.evalResult", description:null},
            {ref:"group:smartArchitecture", 
             description:"for general discussion of architectural best practices in      SmartClient"}
        ],
        examples:["${isc.DocUtils.linkForExampleId('viewLoading')}"],
        groups:["viewLoading"]
    },
    "attr:Window.showCloseButton":{
        ref:"attr:Window.showCloseButton",
        flags:"IRW",
        description:"If true, show a close button in the header, which will dismiss this window by \n calling ${isc.DocUtils.linkForRef('method:Window.closeClick')}.",
        name:"showCloseButton",
        setter:["setShowCloseButton"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "attr:ImgSplitbar.vSrc":{
        ref:"attr:ImgSplitbar.vSrc",
        flags:"IR",
        description:"Default src to display when ${isc.DocUtils.linkForRef('attr:ImgSplitbar.vertical')} is true, \n and ${isc.DocUtils.linkForRef('attr:ImgSplitbar.src')} is unset.",
        name:"vSrc",
        seeAlso:[
            {ref:"attr:ImgSplitbar.src", description:null}
        ],
        valueType:"boolean",
        defaultValue:"[SKIN]vgrip.png",
        type:"attr",
        definingClass:"class:ImgSplitbar"
    },
    "attr:DynamicForm.target":{
        ref:"attr:DynamicForm.target",
        flags:"IRWA",
        description:"The name of a window or frame that will receive the results returned by the form's\n action. The default null indicates to use the current frame.\n <p>\n <b>NOTE:</b> this is used only in the very rare case that a form is used to submit data\n directly to a URL.  Normal server contact is through\n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.",
        name:"target",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "method:ListGrid.setEditorValueMap":{
        ref:"method:ListGrid.setEditorValueMap",
        flags:"A",
        description:"\n Set a valueMap to display for this field while editing.<br>\n This method sets the ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueMap','field.editorValueMap')} property - \n note that if  ${isc.DocUtils.linkForRef('method:ListGrid.getEditorValueMap')} has been overridden it may not make use \n of this property.\n",
        name:"setEditorValueMap",
        seeAlso:[],
        params:[
            {description:"Field object or identifier", optional:false, name:"fieldID", 
             defaultValue:null,type:"object | number | field name"},
            {description:"ValueMap to apply to the field", optional:false, name:"map", 
             defaultValue:null,type:"object"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:EdgedCanvas.edgeImage":{
        ref:"attr:EdgedCanvas.edgeImage",
        flags:"IR",
        description:"Base name of images for edges.  Extensions for each corner or edge piece will be added\n to this image URL, before the extension.  For example, with the default base name of\n \"edge.gif\", the top-left corner image will be \"edge_TL.gif\".\n <P>\n The full list of extensions is: \"_TL\", \"_TR\", \"_BL\", \"_BR\", \"_T\", \"_L\", \"_B\", \"_R\",\n \"_center\".",
        name:"edgeImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]/rounded/frame/FFFFFF/6.png\"",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:ListGridField.filterEditorProperties":{
        ref:"attr:ListGridField.filterEditorProperties",
        flags:"IRWA",
        description:"If this ListGrid is showing a filter row\n (${isc.DocUtils.linkForRef('attr:ListGrid.showFilterEditor','showFilterEditor')}:true), this property\n can be used to specify properties for the appropriate filter form item.",
        name:"filterEditorProperties",
        seeAlso:[],
        valueType:"FormItem properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "classAttr:RPCManager.fetchDataPrompt":{
        ref:"classAttr:RPCManager.fetchDataPrompt",
        flags:"IRW",
        description:"Default prompt displayed to the user while an operation is running to fetch data from\n the server.<br>\n Displayed as a result of ${isc.DocUtils.linkForRef('method:ListGrid.filterData')}, ${isc.DocUtils.linkForRef('method:ListGrid.fetchData')} and\n ${isc.DocUtils.linkForRef('method:ListGrid.clearCriteria')} code paths.",
        name:"fetchDataPrompt",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Finding Records that match your criteria...\"",
        type:"classAttr",
        definingClass:"class:RPCManager",
        groups:["i18nMessages"]
    },
    "group:changeHandling":{
        ref:"group:changeHandling",
        refs:["attr:FormItem.validateOnChange"],
        name:"changeHandling",
        seeAlso:[],
        type:"group"
    },
    "attr:RPCRequest.params":{
        ref:"attr:RPCRequest.params",
        flags:"IRW",
        description:"Values to be sent as simple HTTP params, as a JavaScript Object where each property/value\n pair will become an HTTP parameter name and value.  These parameters are then accessible on\n the server, for example, using servletRequest.getParameter(paramName) in Java Servlets.  \n <P>\n This API is primarily used in combination with ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')}.\n <P>\n When contacting the SmartClient server, setting <code>params</code> is an opportunity to\n send additional data aside from the main ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} payload; this is useful for \n adding data to DataSource requests which will be kept separate from the automatically sent\n DataSource data.\n <P>\n Note that in contrast to ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} object, the data in\n <code>rpcRequest.params</code> is not serialized/deserialized by the SmartClient server, and\n all values arrive on the server as String type (like HTTP parameters always do).\n <p>\n The params value can also be a componentID or component instance that provides a method\n getValues() that returns an Object literal.  SmartClient components\n ${isc.DocUtils.linkForRef('class:DynamicForm')}, ${isc.DocUtils.linkForRef('class:ValuesManager')} are two such classes.  Lastly, you may\n specify the ID of a native form element (retreivable via getElementById()) and the params\n will be populated from there.  If there is an error resolving your params directive, it will\n be logged to the Developer Console.\n <p>\n Note: The params are submitted once per http transaction.  If you are using \n ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue','request queuing')} to bundle multiple RPCRequests or DSRequests\n into a single HTTP turnaround, the params from the various RPCRequests will be merged,\n with the later-queued transactions winning on parameter name collisions.  A warning will be\n logged in the Developer Console if multiple RPCRequests specified params.",
        name:"params",
        seeAlso:[],
        valueType:"Object, others - see below",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "method:DynamicForm.setValueMap":{
        ref:"method:DynamicForm.setValueMap",
        flags:"",
        description:"		Set the valueMap for a specified item\n",
        name:"setValueMap",
        seeAlso:[],
        params:[
            {description:"itemName of the item upon which the valueMap should be set.", 
             optional:false,name:"itemName", defaultValue:null, type:"string"},
            {description:"new valueMap for the field in question.", optional:false, name:"valueMap", 
             defaultValue:null,type:"ValueMap"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "method:CubeGrid.getFacetValueLayout":{
        ref:"method:CubeGrid.getFacetValueLayout",
        flags:"",
        description:" \n      get the current visual order and width for the facet values of a facet or facetValueGroup\n      [ {id:facetValueId, width:currentWidth }, ... ]\n\n      <br><i>methodType</i> getter\n",
        name:"getFacetValueLayout",
        seeAlso:[],
        params:[
            {description:"Which facet do we want details for?", optional:false, name:"id", 
             defaultValue:null,type:"facetValuegroupId | facetId"}
        ],
        returns:{description:"array of {id:facetValueId, width:width} objects", type:"array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:OperationBinding.requestProperties":{
        ref:"attr:OperationBinding.requestProperties",
        flags:"IR",
        description:"Additional properties to pass through to the ${isc.DocUtils.linkForRef('class:DSRequest')} created for this operation.\n Note that these will be cumulative with and will override on a per-property basis any\n properties set via ${isc.DocUtils.linkForRef('attr:DataSource.requestProperties')}.\n <p>\n These properties are applied before ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} is called.",
        name:"requestProperties",
        seeAlso:[
            {ref:"class:DSRequest", description:null},
            {ref:"attr:DataSource.requestProperties", description:null}
        ],
        valueType:"DSRequest Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration", "serverDataIntegration"]
    },
    "attr:Facet.collapsed":{
        ref:"attr:Facet.collapsed",
        flags:"IR",
        description:"For tree facets, default collapse state for parent nodes",
        name:"collapsed",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Facet"
    },
    "type:AnimationAcceleration":{
        ref:"type:AnimationAcceleration",
        description:"Acceleration effect for animations. Can either be a ratio function or a string.\n Ratio functions take a value between 0 and 1 which represents how much of the \n animation's duration has elapsed, and return another value between 0 and 1 indicating\n how close the animation is to completion. For a completely linear animation, the \n function would return the value it was passed. This allows you to bias animations to\n [for example] speed up toward the end of the animation.<br>\n The following strings are also supported for common ratio bias effects:\n <ul>\n <li>\"smoothStart\" - animation will speed up as time elapses\n <li>\"smoothEnd\" - animation will slow down as time elapses\n <li>\"smoothStartEnd\" - animation will speed up in the middle\n <li>\"none\" - no bias</ul>",
        name:"AnimationAcceleration",
        seeAlso:[],
        type:"type"
    },
    "method:DynamicForm.submitForm":{
        ref:"method:DynamicForm.submitForm",
        flags:"",
        description:" Submits the form to the URL defined by ${isc.DocUtils.linkForRef('attr:DynamicForm.action')}, \n identically to how a plain HTML &lt;form&gt; element would submit data,\n as either an HTTP GET or POST as specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.method')}.\n <P>\n <b>Notes:</b>\n <ul>\n <li>this is used only in the very rare case that a form is used to submit data\n directly to a URL.  Normal server contact is through \n ${isc.DocUtils.linkForRef('group:dataBoundComponentMethods','DataBound Component Methods')}.</li>\n <li>For this method to reliably include values for every field in the grid, \n      ${isc.DocUtils.linkForRef('attr:DynamicForm.canSubmit')} must be set to <code>true</code></li>\n <li>To submit values for fields that do not have an editor, use ${isc.DocUtils.linkForRef('class:HiddenItem')} \n with a ${isc.DocUtils.linkForRef('attr:FormItem.defaultValue')} set.  This is analagous to &lt;input type=\"hidden\"&gt;\n in HTML forms.\n </ul>\n",
        name:"submitForm",
        seeAlso:[],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["submitting"]
    },
    "method:Window.closeClick":{
        ref:"method:Window.closeClick",
        flags:"",
        description:" Handles a click on the close button of this window. The default implementation\n hides the window and returns false to cancel bubbling.  Override this method if you want\n other actions to be taken.\n",
        name:"closeClick",
        seeAlso:[],
        type:"method",
        definingClass:"class:Window",
        groups:["buttons"]
    },
    "method:Progressbar.setPercentDone":{
        ref:"method:Progressbar.setPercentDone",
        flags:"",
        description:" Sets percentDone to newPercent.\n\n",
        name:"setPercentDone",
        seeAlso:[],
        params:[
            {description:"percent to show as done (0-100)", optional:false, name:"newPercent", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Progressbar"
    },
    "attr:FormItem.timeFormatter":{
        ref:"attr:FormItem.timeFormatter",
        flags:"IRWA",
        description:"Time-format to apply to date type values within this formItem.  If specified, any\n dates displayed in this item will be formatted as times using the appropriate format.<br>\n Has no effect if +lilnk{formItem.dateFormatter} is also set.<br>\n See also ${isc.DocUtils.linkForRef('attr:TimeItem.displayFormat')} for formatting values displayed in TimeItems.",
        name:"timeFormatter",
        seeAlso:[],
        valueType:"TimeFormatter",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "attr:Label.iconWidth":{
        ref:"attr:Label.iconWidth",
        flags:"IR",
        description:"Width in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "method:FormItem.changed":{
        ref:"method:FormItem.changed",
        flags:"",
        description:" Called when a FormItem's value has been changed as the result of user interaction.  This\n method fires after the newly specified value has been stored.\n",
        name:"changed",
        seeAlso:[],
        params:[
            {description:"the managing DynamicForm instance", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"the form item itself (also available as \"this\")", optional:false, 
             name:"item",defaultValue:null, type:"FormItem"},
            {description:"The current value (after the change).", optional:false, name:"value", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["eventHandling"]
    },
    "attr:MenuButton.menu":{
        ref:"attr:MenuButton.menu",
        flags:"IRW",
        description:"The menu to show.",
        name:"menu",
        seeAlso:[],
        valueType:"Menu",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MenuButton"
    },
    "method:Toolbar.selectButton":{
        ref:"method:Toolbar.selectButton",
        flags:"",
        description:" Given an identifier for a button, select it.\n The button identifier can be a number (index), string (id), or object (widget or init block),\n as with the getButtonNumber() method.\n \n",
        name:"selectButton",
        seeAlso:[
            {ref:"method:Toolbar.getButtonNumber", description:null}
        ],
        params:[
            {description:"Button / Button identifier", optional:false, name:"buttonID", 
             defaultValue:null,type:"number | string | object | canvas"}
        ],
        type:"method",
        definingClass:"class:Toolbar",
        groups:["selection"]
    },
    "type:LogPriority":{
        ref:"type:LogPriority",
        values:[
            {description:"unrecoverable error", value:"Log.FATAL"},
            {description:"error, may be recoverable", value:"Log.ERROR"},
            {description:"apparent problem, misused API, partial result", value:"Log.WARN"},
            {description:"significant events in normal operation", value:"Log.INFO"},
            {description:"diagnostics for developers", value:"Log.DEBUG"}
        ],
        description:"Priority levels for log messages",
        name:"LogPriority",
        seeAlso:[
            {ref:"method:Log.logDebug", description:null}
        ],
        type:"type"
    },
    "attr:Scrollbar.btnSize":{
        ref:"attr:Scrollbar.btnSize",
        flags:"IRW",
        description:"The size of the square buttons (arrows) at the ends of this scrollbar. This \n overrides the width of a vertical scrollbar or the height of a horizontal scrollbar\n to set the scrollbar's thickness.",
        name:"btnSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:Scrollbar",
        groups:["appearance"]
    },
    "method:Canvas.adjustForContent":{
        ref:"method:Canvas.adjustForContent",
        flags:"A",
        description:" This method tells a component to adjust for size changes made to content by external code.\n <P>\n This is for very advanced use in which the contents of a Canvas are being directly updated by\n Ajax techniques, which is required for integration with some third-party libraries.\n Calling this method is required because browsers do not provide consistent events by which\n SmartClient can be notified of external content changes.\n <P>\n Only contents supplied to a widget via ${isc.DocUtils.linkForRef('attr:Canvas.contents')} or via an override of\n ${isc.DocUtils.linkForRef('method:Canvas.getInnerHTML')} should be manipulated directly.  Contents automatically\n generated by SmartClient components (such as the basic structure of a Button) should never be\n manipulated: these structures are considered internal, differ by platform, and will change\n without notice.\n",
        name:"adjustForContent",
        seeAlso:[],
        params:[
            {description:"By default the adjustment will occur on a small delay for performance reasons. \n  Pass in this parameter to force immediate adjustment.", 
             optional:false,name:"immediate", defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:ListGrid.getDragData":{
        ref:"method:ListGrid.getDragData",
        flags:"A",
        description:"\n During a drag-and-drop interaction, this method returns the set of records being dragged out\n of the ListGrid.  In the default implementation, this is the list of currently selected\n records.<p>\n \n This method is generally called by ${isc.DocUtils.linkForRef('method:ListGrid.transferDragData')} and is consulted by\n ${isc.DocUtils.linkForRef('method:ListGrid.willAcceptDrop')}.\n \n",
        name:"getDragData",
        seeAlso:[
            {ref:"method:ListGrid.transferDragData", description:null}
        ],
        returns:{description:"Array of ${isc.DocUtils.linkForRef('object:ListGridRecord')}s that are currently selected.", 
         type:"Array of ListGridRecord"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["dragging", "data"]
    },
    "attr:ListGridField.valueIconRightPadding":{
        ref:"attr:ListGridField.valueIconRightPadding",
        flags:"IRW",
        description:"How much padding should there be on the right of valueIcons for this field\n Overrides ${isc.DocUtils.linkForRef('attr:ListGrid.valueIconRightPadding')}",
        name:"valueIconRightPadding",
        seeAlso:[
            {ref:"attr:ListGridField.valueIcons", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "classMethod:Page.getAppFilesDir":{
        ref:"classMethod:Page.getAppFilesDir",
        flags:"",
        description:" Returns the directory for application-specific files (other than images).\n\n",
        name:"getAppFilesDir",
        seeAlso:[],
        params:[
            {description:"New app files URL.", optional:true, name:"URL", defaultValue:null, 
             type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page",
        groups:["files", "images"]
    },
    "attr:CubeGrid.bodyMinHeight":{
        ref:"attr:CubeGrid.bodyMinHeight",
        flags:"IRWA",
        description:"Minimum height for the body of this cubeGrid",
        name:"bodyMinHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:Slider.animateThumb":{
        ref:"attr:Slider.animateThumb",
        flags:"IRW",
        description:"Should the thumb be animated to its new position when the value is changed programmatically,\n or by clicking in the slider track.",
        name:"animateThumb",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider",
        groups:["animation"]
    },
    "attr:StatefulCanvas.showDisabledIcon":{
        ref:"attr:StatefulCanvas.showDisabledIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image if the button becomes\n disabled.",
        name:"showDisabledIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "classAttr:Hover.topOffset":{
        ref:"classAttr:Hover.topOffset",
        flags:"RW",
        description:"When positioining the hover canvas, this will be the default top offset from the \n mousepointer, if no explicit position was passed to the ${isc.DocUtils.linkForRef('classMethod:Hover.show')} method",
        name:"topOffset",
        seeAlso:[],
        valueType:"number",
        defaultValue:"15",
        type:"classAttr",
        definingClass:"class:Hover"
    },
    "class:VStack":{
        methods:[],
        exampleConfig:"VStack.xml",
        ref:"class:VStack",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:[],
        description:"A subclass of Layout that simply stacks members on the vertical axis without trying to\n manage their height.  On the horizontal axis, any members that do not have explict widths\n will be sized to match the width of the stack.",
        name:"VStack",
        seeAlso:[
            {ref:"attr:Layout.vPolicy", description:null}
        ],
        type:"class"
    },
    "method:Canvas.isDrawn":{
        ref:"method:Canvas.isDrawn",
        flags:"",
        description:"      Returns the boolean true, if the widget has been completely drawn, and false otherwise.\n",
        name:"isDrawn",
        seeAlso:[],
        returns:{description:"true if drawn, false if not drawn", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "method:RestDataSource.transformRequest":{
        ref:"method:RestDataSource.transformRequest",
        flags:"",
        description:" RestDataSource.transformRequest() implemented to format request meta-data properties \n for transmitting to the server.<br>\n See ${isc.DocUtils.linkForRef('class:RestDataSource','RestDataSource overview')} for a description of the \n standard formatting applied to requests.\n",
        name:"transformRequest",
        seeAlso:[],
        type:"method",
        definingClass:"class:RestDataSource"
    },
    "group:iteration":{
        ref:"group:iteration",
        title:"Iteration",
        refs:["method:Array.getProperty", "method:Array.map", "method:Array.setProperty", 
         "method:Array.clearProperty"],
        description:"Operations on entire Arrays at once",
        name:"iteration",
        seeAlso:[],
        type:"group"
    },
    "attr:StatefulCanvas.showOverCanvas":{
        ref:"attr:StatefulCanvas.showOverCanvas",
        flags:"IRWA",
        description:"When this property is set to true, this widget will create and show the\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.overCanvas')} on user rollover.",
        name:"showOverCanvas",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas"
    },
    "type:listGridSortState":{
        ref:"type:listGridSortState",
        description:"An object containing the stored sort information for a listGrid.\n Note that this object is not intended to be interrogated directly, but may be stored \n (for example) as a blob on the server for state persistence across sessions.",
        name:"listGridSortState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "method:TabSet.getSelectedTabNumber":{
        ref:"method:TabSet.getSelectedTabNumber",
        flags:"A",
        description:" Returns the index of the currently selected tab object.  \n",
        name:"getSelectedTabNumber",
        seeAlso:[],
        returns:{description:"the index of the currently selected tab object", type:"number"},
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:Window.setSrc":{
        ref:"method:Window.setSrc",
        flags:"",
        description:" Sets the URL of the contents to display in the body of the window, redrawing if\n necessary.\n",
        name:"setSrc",
        seeAlso:[],
        params:[
            {description:"URL of new contents to be displayed in the window body", optional:false, 
             name:"url",defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "type:treeGridViewState":{
        ref:"type:treeGridViewState",
        description:"An object containing the \"view state\" information for a treeGrid. In addition to the \n state data contained by a ${isc.DocUtils.linkForRef('type:listGridViewState')} object, this will also contain the \n current open state of the treeGrid in question.<br>\n Note that this object is not intended to be interrogated directly, but may be stored \n (for example) as a blob on the server for view state persistence across sessions.",
        name:"treeGridViewState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "attr:ListGridField.required":{
        ref:"attr:ListGridField.required",
        flags:"IRW",
        description:"When the user edits cells in this field, is this value required to be non-empty \n in order for validation to pass.<br>\n Note: for databound listGrids, this property may be specified on the \n ${isc.DocUtils.linkForRef('class:DataSourceField')}, enabling both client and server side validation.",
        name:"required",
        seeAlso:[
            {ref:"attr:ListGridField.validators", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["gridValidation"]
    },
    "method:ImgButton.setIconOrientation":{
        ref:"method:ImgButton.setIconOrientation",
        flags:"",
        description:" Changes the orientation of the icon relative to the text of the button.\n\n",
        name:"setIconOrientation",
        seeAlso:[],
        params:[
            {description:"The new orientation of the icon relative to the text of the button.", 
             optional:false,name:"orientation", defaultValue:null, type:"\"left\" or \"right\""}
        ],
        type:"method",
        definingClass:"class:ImgButton",
        groups:["buttonIcon"]
    },
    "attr:EdgedCanvas.edgeColor":{
        ref:"attr:EdgedCanvas.edgeColor",
        flags:"IR",
        description:"CSS color (WITHOUT \"#\") for the edges.  If specified, will be used as part of image\n names.  Example: \"edge_88FF88_TL.gif\".",
        name:"edgeColor",
        seeAlso:[],
        valueType:"cssColor",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "classMethod:Class.addPropertyList":{
        ref:"classMethod:Class.addPropertyList",
        flags:"",
        description:"\n	Add default properties to all instances of this class\n\n",
        name:"addPropertyList",
        seeAlso:[],
        params:[
            {description:"listarray of objects with properties to add", optional:true, name:"", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"the class after properties have been added to it", type:"object"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:Canvas.dragScrollDelay":{
        ref:"attr:Canvas.dragScrollDelay",
        flags:"IRWA",
        description:"If this widget supports drag-scrolling, This property specifies how many ms the\n      user must hover over the drag-scroll threshold before scrolling begins.",
        name:"dragScrollDelay",
        seeAlso:[],
        valueType:"number",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragging"]
    },
    "attr:Layout.resizeBarSize":{
        ref:"attr:Layout.resizeBarSize",
        flags:"AIRW",
        description:"Thickness of the resizeBars in pixels",
        name:"resizeBarSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:Layout"
    },
    "attr:DSResponse.startRow":{
        ref:"attr:DSResponse.startRow",
        flags:"R",
        description:"Starting row of returned server results, when using paged result fetching\n <p>\n Note that startRow and endRow are zero-based - the first record is row zero.",
        name:"startRow",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["paging"]
    },
    "classMethod:Class.getInstanceProperty":{
        ref:"classMethod:Class.getInstanceProperty",
        flags:"",
        description:"\n	Gets a named property from the instance defaults for this object.\n\n",
        name:"getInstanceProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to return", optional:false, name:"property", 
             defaultValue:null,type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:StatefulCanvas.showFocusedIcon":{
        ref:"attr:StatefulCanvas.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["buttonIcon"]
    },
    "method:Array.find":{
        ref:"method:Array.find",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:Array.findIndex')}, but returns the object itself instead of its index.\n\n",
        name:"find",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"first matching object or null if not found", type:"Object"},
        type:"method",
        definingClass:"object:Array",
        groups:["access", "find"]
    },
    "method:Canvas.scrollToTop":{
        ref:"method:Canvas.scrollToTop",
        flags:"",
        description:" Vertically scrolls the content of the widget to 0\n\n",
        name:"scrollToTop",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "attr:ListGrid.headerMenuButtonIconHeight":{
        ref:"attr:ListGrid.headerMenuButtonIconHeight",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the height of the icon\n shown on the auto-generated <code>headerMenuButton</code>",
        name:"headerMenuButtonIconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "method:ListGrid.getValueIcon":{
        ref:"method:ListGrid.getValueIcon",
        flags:"",
        description:" Returns the appropriate valueIcon for a cell based on the field and the data value for the \n cell. Default implementation returns null if ${isc.DocUtils.linkForRef('attr:ListGridField.suppressValueIcon')} is true\n otherwise looks at ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')}.\n",
        name:"getValueIcon",
        seeAlso:[],
        params:[
            {description:"field associated with the cell", optional:false, name:"field", 
             defaultValue:null,type:"ListGridField"},
            {description:"data value for the cell's record in this field.", optional:false, 
             name:"value",defaultValue:null, type:"any"},
            {description:"record associated with this cell", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:SectionItem.sectionVisible":{
        ref:"attr:SectionItem.sectionVisible",
        deprecated:"As of SmartClient version 5.5, use ${isc.DocUtils.linkForRef('attr:SectionItem.sectionExpanded')}             instead.",
        flags:"IR",
        description:"Whether this form section should initially be visible.",
        name:"sectionVisible",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:SectionItem"
    },
    "method:ListGrid.formatEditorValue":{
        ref:"method:ListGrid.formatEditorValue",
        flags:"",
        description:" Formatter to apply to values displayed within editors while a cell is being edited.\n The value passed to this method is the raw value for the cell.<br>\n If <code>formatEditorValue</code> is defined at the field level for some cell being edited,\n the field level method will be used to format the edit value and this method will not\n be called for that cell.<br>\n To convert the formatted value displayed within an editor back to a raw value, the\n <code>parseEditorValue</code> method is used.\n\n",
        name:"formatEditorValue",
        seeAlso:[
            {ref:"method:ListGridField.formatEditorValue", description:null},
            {ref:"method:ListGrid.parseEditorValue", description:null}
        ],
        params:[
            {description:"raw value for the cell being edited", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"Record object for the cell. Note: If this is a new row that has not been saved, \n   it has no associated record object. In this case the edit values will\n   be passed in as this parameter.", 
             optional:false,name:"record", defaultValue:null, type:"ListGridRecord"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number for the cell.", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"formatted value to display in the editor", type:"any"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "group:tabBar":{
        ref:"group:tabBar",
        refs:["attr:TabSet.tabBarPosition", "attr:TabSet.tabBarAlign", "attr:TabSet.tabBarThickness", 
         "attr:TabSet.selectedTab"],
        name:"tabBar",
        seeAlso:[],
        type:"group"
    },
    "group:stringProcessing":{
        ref:"group:stringProcessing",
        refs:["method:Number.stringify", "method:String.contains", "method:String.startsWith", 
         "method:String.endsWith"],
        name:"stringProcessing",
        seeAlso:[],
        type:"group"
    },
    "attr:PickTreeItem.emptyMenuMessage":{
        ref:"attr:PickTreeItem.emptyMenuMessage",
        flags:"IRA",
        description:"This message will be displayed as a singled, disabled option in any empty menu/submenu\n created from this item's data tree.",
        name:"emptyMenuMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"No items to display\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('pickTree')}"],
        definingClass:"class:PickTreeItem"
    },
    "attr:Toolbar.vertical":{
        ref:"attr:Toolbar.vertical",
        flags:"IRW",
        description:"Indicates whether the buttons are drawn horizontally from left to right (false), or\n vertically from top to bottom (true).",
        name:"vertical",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Toolbar",
        groups:["appearance"]
    },
    "method:Array.slide":{
        ref:"method:Array.slide",
        flags:"A",
        description:" Slide element at position start to position destination, moving all the other elements to cover\n the gap.\n\n",
        name:"slide",
        seeAlso:[],
        params:[
            {description:"start position", optional:false, name:"start", defaultValue:null, 
             type:"number"},
            {description:"destinationdestination position for this", optional:true, name:"start", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"object:Array"
    },
    "method:ResultSet.get":{
        ref:"method:ResultSet.get",
        flags:"",
        description:" Returns the record at the specified position.\n <P>\n All List access methods of the ResultSet have the semantics described in <code>getRange()</code>.\n",
        name:"get",
        seeAlso:[
            {ref:"method:ResultSet.getRange", description:null}
        ],
        params:[
            {description:"position of the element to get", optional:false, name:"pos", 
             defaultValue:null,type:"Number"}
        ],
        returns:{description:"whatever's at that position, undef if not found", type:"object"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access"]
    },
    "attr:Tab.canClose":{
        ref:"attr:Tab.canClose",
        flags:"IRW",
        description:"Determines whether this tab should show an icon allowing the user to dismiss the tab by\n clicking on it directly. The URL for this icon's image will be derived from \n ${isc.DocUtils.linkForRef('attr:TabSet.closeTabIcon')} by default, but may be overridden by explicitly specifying\n ${isc.DocUtils.linkForRef('attr:Tab.closeIcon')}.<br>\n If unset, this property is derived from ${isc.DocUtils.linkForRef('attr:TabSet.canCloseTabs')}",
        name:"canClose",
        seeAlso:[
            {ref:"method:TabSet.closeClick", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('closeableTabs')}"],
        definingClass:"object:Tab"
    },
    "object:Number":{
        methods:["method:Number.stringify"],
        ref:"object:Number",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Extra methods added to the Number object, available on all number variables.",
        name:"Number",
        seeAlso:[],
        type:"object"
    },
    "attr:DynamicForm.cellPadding":{
        ref:"attr:DynamicForm.cellPadding",
        flags:"IRW",
        description:"The amount of empty space, in pixels, surrounding each form item within its cell in\n the layout grid.",
        name:"cellPadding",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "method:GridRenderer.rowMouseDown":{
        ref:"method:GridRenderer.rowMouseDown",
        flags:"A",
        description:" Called when a row receives a mousedown event.\n \n",
        name:"rowMouseDown",
        seeAlso:[],
        params:[
            {description:"record object returned from 'getCellRecord()'", optional:false, 
             name:"record",defaultValue:null, type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "method:Menu.setItemChecked":{
        ref:"method:Menu.setItemChecked",
        flags:"",
        description:"          Checks or unchecks the menu item according to the value of newState, and redraws\n          the menu if necessary. Returns true if there's a change in the checked state.\n\n",
        name:"setItemChecked",
        seeAlso:[],
        params:[
            {description:"pointer to (or number of) the item in question", optional:false, name:"item", 
             defaultValue:null,type:"item or number"},
            {description:"true to check the menu item, false to uncheck it", optional:false, 
             name:"newState",defaultValue:null, type:"boolean"}
        ],
        returns:{description:"true if the checked state was changed", type:"boolean"},
        type:"method",
        definingClass:"class:Menu"
    },
    "attr:ListGrid.groupStartOpen":{
        ref:"attr:ListGrid.groupStartOpen",
        flags:"IRW",
        description:"Describes the default state of ListGrid groups when groupBy is called. \n Possible values are:\n     \"all\": open all groups\n     \"first\": open the first group\n     \"none\": start with all groups closed",
        name:"groupStartOpen",
        seeAlso:[
            {ref:"method:ListGrid.groupBy", description:null}
        ],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["grouping"]
    },
    "attr:ListGrid.filterEditorHeight":{
        ref:"attr:ListGrid.filterEditorHeight",
        flags:"IRW",
        description:"Height for the filterEditor, if shown.",
        name:"filterEditorHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"22",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["filterEditor"]
    },
    "method:Canvas.markForRedraw":{
        ref:"method:Canvas.markForRedraw",
        flags:"",
        description:"      Marks the widget as \"dirty\" so that it will be added to a queue for redraw. Once a small lag\n      time has elapsed, each widget added to the queue is then redrawn with its current property\n      values.\n\n",
        name:"markForRedraw",
        seeAlso:[],
        params:[
            {description:"reason for performing the redraw", optional:true, name:"reason", 
             defaultValue:"\"no reason provided\"",type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "attr:Tab.width":{
        ref:"attr:Tab.width",
        flags:"IRW",
        description:"You can specify an explicit width for the tab using this property.  Note that tabs\n automatically size to make room for the full title, but if you want to e.g. specify a\n uniform width for all tabs in a TabSet, this property enables you to do so.",
        name:"width",
        seeAlso:[],
        valueType:"number",
        defaultValue:"100",
        type:"attr",
        definingClass:"object:Tab"
    },
    "method:DynamicForm.handleHiddenValidationErrors":{
        ref:"method:DynamicForm.handleHiddenValidationErrors",
        flags:"A",
        description:" Method to display validation error messages for fields that are not currently visible \n in this form.<br>\n This will be called when validation fails for<br>\n - a hidden field in this form<br>\n - if this form is databound, a datasource field with specified validators, for which we\n   have no specified form item.<br>\n Implement this to provide custom validation error handling for these fields.<br>\n By default hidden validation errors will be logged as warnings in the developerConsole.\n Return false from this method to suppress that behavior.\n",
        name:"handleHiddenValidationErrors",
        seeAlso:[],
        params:[
            {description:"The set of errors returned - this is an object of the form<br>                      &nbsp;&nbsp;<code>{fieldName:errors}</code><br>\n                      Where the 'errors' object is either a single string or an array\n                      of strings containing the error messages for the field.", 
             optional:false,name:"errors", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:DynamicForm"
    },
    "method:ValuesManager.addFieldErrors":{
        ref:"method:ValuesManager.addFieldErrors",
        flags:"",
        description:" Adds validation errors to the existing set of errors for the field in question.\n Errors passed in should be a string (for a single error message) or an array of strings.\n Pass in the showErrors parameter to immediately display the errors to the user by \n redrawing the appropriate member form item (or if no visible item is found for the field\n firing ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')}.\n",
        name:"addFieldErrors",
        seeAlso:[],
        params:[
            {description:"name of field to apply errors to", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"error messages for the field", optional:false, name:"errors", 
             defaultValue:null,type:"string | array of strings"},
            {description:"should the error(s) be immediately displayed to the user?", optional:false, 
             name:"showErrors",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "method:Layout.hideDropLine":{
        ref:"method:Layout.hideDropLine",
        flags:"A",
        description:" Calling this method hides the dropLine shown during a drag and drop interaction with a\n Layout that has ${isc.DocUtils.linkForRef('attr:Layout.canDropComponents')} set to true.  This method is only useful for\n custom implementations of ${isc.DocUtils.linkForRef('method:Layout.drop')} as the default implementation calls this\n method automatically.\n\n",
        name:"hideDropLine",
        seeAlso:[],
        type:"method",
        definingClass:"class:Layout"
    },
    "method:CubeGrid.setFixedFacetValue":{
        ref:"method:CubeGrid.setFixedFacetValue",
        flags:"",
        description:"\n Modify fixedFacetValues for this cubeGrid.\n\n",
        name:"setFixedFacetValue",
        seeAlso:[],
        params:[
            {description:"facetId", optional:false, name:"facetId", defaultValue:null, type:"id"},
            {description:"fixedFacetValue     New fixed value for the facet, to be added to cubeGrid.fixedFacetValues.  Default is the\n     rollup value for the facet.", 
             optional:false,name:"fixedFacetValueId", defaultValue:null, type:"id"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "classAttr:Dialog.LOGIN_BUTTON_TITLE":{
        ref:"classAttr:Dialog.LOGIN_BUTTON_TITLE",
        flags:"IRW",
        description:"Default title for login button in the dialog displayed by \n ${isc.DocUtils.linkForRef('classMethod:isc.showLoginDialog')}.",
        name:"LOGIN_BUTTON_TITLE",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"\"Log in\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "attr:ListGrid.cellPadding":{
        ref:"attr:ListGrid.cellPadding",
        flags:"IRW",
        description:"The amount of empty space, in pixels, surrounding each value in its cell.",
        name:"cellPadding",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "method:ListGrid.bodyKeyPress":{
        ref:"method:ListGrid.bodyKeyPress",
        flags:"",
        description:" Handle a keyPress event on the body.  \n <P>\n Default implementation handles navigating between records with arrow keys, and activating\n records with space an enter.\n\n",
        name:"bodyKeyPress",
        seeAlso:[],
        params:[
            {description:"the event details", optional:false, name:"event", defaultValue:null, 
             type:"ISCEvent"}
        ],
        returns:{description:"return value for the keyPress event.", type:"EventReturn"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "class:PasswordItem":{
        methods:[],
        exampleConfig:"PasswordItem.xml",
        ref:"class:PasswordItem",
        classAttrs:[],
        classMethods:[],
        attrs:[],
        description:"FormItem for password fields, where text input by the user should not be shown in readable text.",
        name:"PasswordItem",
        seeAlso:[],
        type:"class"
    },
    "attr:TreeGridField.treeField":{
        ref:"attr:TreeGridField.treeField",
        flags:"IRW",
        description:"The field containing <code>treeField: true</code> will display the ${isc.DocUtils.linkForRef('class:Tree')}.  If no\n field specifies this property, the first field in ${isc.DocUtils.linkForRef('attr:TreeGrid.fields')} is assigned to\n display the ${isc.DocUtils.linkForRef('class:Tree')}.",
        name:"treeField",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"see below",
        type:"attr",
        definingClass:"object:TreeGridField",
        groups:["treeField"]
    },
    "type:EscapeKeyEditAction":{
        ref:"type:EscapeKeyEditAction",
        values:[
            {description:"cancels the current edit and discards edit values", value:"\"cancel\""},
            {description:"end editing", value:"\"done\""}
        ],
        description:"What to do if the user hits escape while editing a cell.",
        name:"EscapeKeyEditAction",
        seeAlso:[],
        type:"type",
        groups:["editing"]
    },
    "method:CubeGrid.getSelectedCells":{
        ref:"method:CubeGrid.getSelectedCells",
        flags:"",
        description:"\n  returns an array of the selected cell records\n\n  <br><i>methodType</i> getter\n",
        name:"getSelectedCells",
        seeAlso:[],
        returns:{description:"array of the selected cell records", type:"Array"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["selection"]
    },
    "method:Canvas.getRight":{
        ref:"method:Canvas.getRight",
        flags:"",
        description:" Return the right coordinate of this object as rendered, relative to its enclosing context,\n in pixels.\n\n",
        name:"getRight",
        seeAlso:[],
        returns:{description:"right coordinate", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning", "sizing"]
    },
    "method:Canvas.scrollToBottom":{
        ref:"method:Canvas.scrollToBottom",
        flags:"",
        description:" Vertically scrolls the content of the widget to the end of its content\n\n",
        name:"scrollToBottom",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "attr:ListGrid.wrapCells":{
        ref:"attr:ListGrid.wrapCells",
        flags:"IRWA",
        description:"Should content within cells be allowed to wrap?",
        name:"wrapCells",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('autofitValues')}"],
        definingClass:"class:ListGrid",
        groups:["cellStyling"]
    },
    "attr:DateChooser.skinImgDir":{
        ref:"attr:DateChooser.skinImgDir",
        flags:"IRWA",
        description:"Overridden directory where images for this widget (such as the month and year button icons)\n may be found.",
        name:"skinImgDir",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"images/common/\"",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:Canvas.percentSource":{
        ref:"attr:Canvas.percentSource",
        flags:"IRWA",
        description:"If this canvas has its size specified as a percentage, this property allows the user to\n explicitly designate another canvas upon which sizinng will be based.\n <P>\n If unset percentage sizing is based on<br>\n - the ${isc.DocUtils.linkForRef('attr:Canvas.masterElement','masterElement')} if there is one and\n   ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is set,<br> \n - otherwise on the amount of space available in this widget's parentElement, if this is\n   a child of some other widget<br>\n - otherwise the page size.",
        name:"percentSource",
        setter:["setPercentSource"],
        seeAlso:[
            {ref:"attr:Canvas.percentBox", description:null}
        ],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "class:StaticTextItem":{
        methods:[],
        ref:"class:StaticTextItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:StaticTextItem.wrap", "attr:StaticTextItem.clipValue", 
         "attr:StaticTextItem.textBoxStyle"],
        description:"A FormItem that displays an uneditable value.",
        name:"StaticTextItem",
        seeAlso:[],
        type:"class"
    },
    "method:TreeGrid.canEditCell":{
        ref:"method:TreeGrid.canEditCell",
        flags:"",
        description:" Overridden to disallow editing of the ${isc.DocUtils.linkForRef('attr:TreeNode.name','name')} field of this grid's data\n tree. Also disallows editing of the auto-generated tree field, which displays the result\n of ${isc.DocUtils.linkForRef('method:Tree.getTitle')} on the node.\n",
        name:"canEditCell",
        seeAlso:[],
        returns:{description:"Whether to allow editing this cell", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:TreeGrid.nodeContextClick":{
        ref:"method:TreeGrid.nodeContextClick",
        flags:"",
        description:"\n This method is called when a context click occurs on a leaf or folder record.  Note that\n if you set up a callback for <code>nodeContextClick()</code> and\n e.g. ${isc.DocUtils.linkForRef('method:TreeGrid.leafContextClick')}, then both will fire (in that order) if a leaf\n is contextclicked - unless <code>nodeContextClick()</code> returns false, in which case\n no further contextClick callbacks will be called.\n\n",
        name:"nodeContextClick",
        seeAlso:[
            {ref:"method:TreeGrid.folderContextClick", description:null},
            {ref:"method:TreeGrid.leafContextClick", description:null}
        ],
        params:[
            {description:"The TreeGrid on which the contexclick occurred.", optional:false, 
             name:"viewer",defaultValue:null, type:"TreeGrid"},
            {description:"The node (record) on which the contextclick occurred.", optional:false, 
             name:"node",defaultValue:null, type:"TreeNode"},
            {description:"Index of the row where the contextclick occurred.", optional:false, 
             name:"recordNum",defaultValue:null, type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:CellSelection.selectSingleCell":{
        ref:"method:CellSelection.selectSingleCell",
        flags:"",
        description:"			select a single cell and deselect everything else\n",
        name:"selectSingleCell",
        seeAlso:[],
        params:[
            {description:"row index of cell to select", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"column index of cell to select", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection"]
    },
    "attr:DynamicForm.numCols":{
        ref:"attr:DynamicForm.numCols",
        flags:"IRW",
        description:"The number of columns of titles and items in this form's layout grid. A title and\n corresponding item each have their own column, so to display two form elements per\n row (each having a title and item), you would set this property to 4.",
        name:"numCols",
        seeAlso:[],
        valueType:"number",
        defaultValue:"2",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["tableLayout"]
    },
    "attr:Window.hiliteHeaderStyle":{
        ref:"attr:Window.hiliteHeaderStyle",
        flags:"IRWA",
        description:"Highlight style for the Window header. Displayed when a window \n is ${isc.DocUtils.linkForRef('method:Window.flash','flashed')}",
        name:"hiliteHeaderStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"WindowHeader\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "classAttr:RPCResponse.STATUS_VALIDATION_ERROR":{
        ref:"classAttr:RPCResponse.STATUS_VALIDATION_ERROR",
        flags:"R",
        description:"Indicates a validation failure on the server.\n See the error handling section in ${isc.DocUtils.linkForRef('class:RPCManager','RPCManager documentation')}\n for more information.",
        name:"STATUS_VALIDATION_ERROR",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-4",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "method:ListGrid.cellDoubleClick":{
        ref:"method:ListGrid.cellDoubleClick",
        flags:"",
        description:" Called when a cell receives a double click event.\n\n",
        name:"cellDoubleClick",
        seeAlso:[],
        params:[
            {description:"Record object returned from getCellRecord()", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('cellClicks')}"],
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "group:gridHead4er":{
        ref:"group:gridHead4er",
        refs:["attr:ListGrid.frozenHeaderBaseStyle", "attr:ListGrid.frozenHeaderTitleStyle"],
        name:"gridHead4er",
        seeAlso:[],
        type:"group"
    },
    "classMethod:Time.createDate":{
        ref:"classMethod:Time.createDate",
        flags:"",
        description:" Creates a date object with the time set to the hours, minutes and seconds passed in.\n (Time is in UTC time, adjusted by ${isc.DocUtils.linkForRef('classAttr:Time.UTCHoursOffset')} if appropriate).\n",
        name:"createDate",
        seeAlso:[],
        params:[
            {description:"Hours for the date (defaults to zero)", optional:true, name:"hours", 
             defaultValue:null,type:"number"},
            {description:"Minutes for the date (defaults to zero)", optional:true, name:"minutes", 
             defaultValue:null,type:"number"},
            {description:"Seconds for the date (defaults to zero)", optional:true, name:"seconds", 
             defaultValue:null,type:"number"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "method:Date.toSerializeableDate":{
        ref:"method:Date.toSerializeableDate",
        flags:"A",
        description:" Return this date in 'serialized' format <code>YYYY-MM-DD HH:MM:SS</code>\n",
        name:"toSerializeableDate",
        seeAlso:[],
        returns:{description:"formatted date string", type:"String"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:TreeGrid.animateFolderTime":{
        ref:"attr:TreeGrid.animateFolderTime",
        flags:"IRW",
        description:"When animating folder opening / closing, if ${isc.DocUtils.linkForRef('attr:TreeGrid.animateFolderSpeed')} is not\n set, this property designates the duration of the animation in ms.",
        name:"animateFolderTime",
        seeAlso:[
            {ref:"attr:TreeGrid.animateFolderSpeed", description:null}
        ],
        valueType:"number",
        defaultValue:"300",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["animation"]
    },
    "attr:ToolStrip.height":{
        ref:"attr:ToolStrip.height",
        flags:"IRW",
        description:"ToolStrips set a default ${isc.DocUtils.linkForRef('attr:Canvas.height','height')} to avoid being stretched by\n containing layouts.",
        name:"height",
        seeAlso:[],
        valueType:"Number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:ToolStrip",
        groups:["sizing"]
    },
    "attr:SelectItem.hiliteTextColor":{
        ref:"attr:SelectItem.hiliteTextColor",
        deprecated:"As of SmartClient version 5.5, if ${isc.DocUtils.linkForRef('attr:SelectItem.showFocused')} is true,  styling will be updated for this form item on focus. The hiliting effect can therefore\n  be achieved via ${isc.DocUtils.linkForRef('attr:SelectItem.textBoxStyle')} and ${isc.DocUtils.linkForRef('attr:SelectItem.controlStyle')} \n  instead.",
        flags:"IRWA",
        description:"Text color to apply to the select item's selected value when the SelectItem \n recieves focus, if <code>hiliteOnFocus</code> is true.",
        name:"hiliteTextColor",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"white\"",
        type:"attr",
        definingClass:"class:SelectItem"
    },
    "method:EBay.setUseProduction":{
        ref:"method:EBay.setUseProduction",
        flags:"",
        description:"\n You can use web services in sandbox or production mode.  By default, this web service\n will work in sandbox mode.  Call this method with a true value to switch to production\n mode.\n\n",
        name:"setUseProduction",
        seeAlso:[],
        params:[
            {description:"true to use production, false to use sandbox", optional:false, 
             name:"useProduction",defaultValue:null, type:"boolean"}
        ],
        type:"method",
        definingClass:"class:EBay"
    },
    "attr:Scrollbar.thumbMinSize":{
        ref:"attr:Scrollbar.thumbMinSize",
        flags:"IRWA",
        description:"The minimum pixel size of the draggable thumb regardless of how large the scrolling\n region becomes.",
        name:"thumbMinSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"12",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "class:SliderItem":{
        methods:[],
        ref:"class:SliderItem",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Forms/Form Items"],
        attrs:["attr:SliderItem.vertical", "attr:SliderItem.minValue", "attr:SliderItem.maxValue", 
         "attr:SliderItem.numValues","attr:SliderItem.defaultValue", "attr:SliderItem.sliderProperties"],
        description:"FormItem that uses a ${isc.DocUtils.linkForRef('class:Slider')} component to present an interface for picking\n from either a continuous range or a range with a small number of discrete values.",
        name:"SliderItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('sliderItem')}"]
    },
    "attr:Applet.scriptable":{
        ref:"attr:Applet.scriptable",
        flags:"IR",
        description:"Usable only in IE: if true allows JS->Java LiveConnect (other platforms that support\n  LiveConnect have it enabled by default and do not allow it to be disabled).",
        name:"scriptable",
        seeAlso:[
            {ref:"attr:Applet.mayScript", description:null}
        ],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        platformNotes:"Relevant only on IE.",
        definingClass:"class:Applet"
    },
    "attr:Canvas.animateShowTime":{
        ref:"attr:Canvas.animateShowTime",
        flags:"IRWA",
        description:"Default time for performing an animated show.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateShowTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:DynamicForm.itemHoverVAlign":{
        ref:"attr:DynamicForm.itemHoverVAlign",
        flags:"IRW",
        description:"Vertical text alignment for hovers shown for items",
        name:"itemHoverVAlign",
        seeAlso:[
            {ref:"attr:FormItem.hoverVAlign", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "attr:DynamicForm.errors":{
        flags:"IRW",
        getter:["getErrors"],
        type:"attr",
        ref:"attr:DynamicForm.errors",
        description:"A property list of itemName:errorMessage pairs, specifying the set of error messages\n          displayed with the corresponding form elements. Each errorMessage may be either a\n          single string or an array of strings.",
        name:"errors",
        setter:["setErrors"],
        valueType:"array",
        seeAlso:[],
        defaultValue:"null",
        groups:["validation"],
        definingClass:"class:DynamicForm"
    },
    "attr:DynamicForm.validateOnChange":{
        ref:"attr:DynamicForm.validateOnChange",
        flags:"IRW",
        description:"If true, form fields will be validated when each item's \"change\" handler is fired\n		as well as when the entire form is submitted or validated.<br>\n      Note that this property can also be set at the item level to enable finer granularity\n      validation in response to user interaction - if true at either level, validation\n      will occur on change.",
        name:"validateOnChange",
        seeAlso:[
            {ref:"attr:FormItem.validateOnChange", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["validation"]
    },
    "method:TabSet.enableTab":{
        ref:"method:TabSet.enableTab",
        flags:"",
        description:" If the specified tab is disabled, enable it now.\n",
        name:"enableTab",
        seeAlso:[
            {ref:"attr:Tab.disabled", description:null}
        ],
        params:[
            {description:null, optional:false, name:"tab", defaultValue:null, type:"Tab | number | ID"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "method:Progressbar.getBreadth":{
        ref:"method:Progressbar.getBreadth",
        flags:"",
        description:" Returns the current height of a horizontal progressbar, or width of a vertical progressbar.\n\n",
        name:"getBreadth",
        seeAlso:[],
        returns:{description:"the breadth of the progressbar", type:"number"},
        type:"method",
        definingClass:"class:Progressbar"
    },
    "attr:ListGrid.dragTrackerStyle":{
        ref:"attr:ListGrid.dragTrackerStyle",
        flags:"IRW",
        description:"CSS Style to apply to the drag tracker when dragging occurs on this grid.",
        name:"dragTrackerStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"gridDragTracker\"",
        type:"attr",
        definingClass:"class:ListGrid"
    },
    "attr:ListGrid.trackerImage":{
        ref:"attr:ListGrid.trackerImage",
        flags:"IRWA",
        description:"Default image to use for the dragTracker when things are dragged within or out of this \n list. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.",
        name:"trackerImage",
        seeAlso:[
            {ref:"attr:ListGrid.dragTrackerMode", description:null},
            {ref:"method:ListGrid.getDragTrackerIcon", description:null}
        ],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["dragTracker"]
    },
    "method:GridRenderer.setColumnWidth":{
        ref:"method:GridRenderer.setColumnWidth",
        flags:"",
        description:" Sets the width of a single column.\n\n",
        name:"setColumnWidth",
        seeAlso:[],
        params:[
            {description:"the number of the column to resize", optional:false, name:"colNum", 
             defaultValue:null,type:"number"},
            {description:"the new width", optional:false, name:"newWidth", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "attr:FormItem.titleAlign":{
        ref:"attr:FormItem.titleAlign",
        flags:"IRW",
        description:"Alignment of this item's title in its cell.\n <p>\n If null, dynamically set according to text direction.",
        name:"titleAlign",
        seeAlso:[],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["title"]
    },
    "method:Button.setActionType":{
        ref:"method:Button.setActionType",
        flags:"",
        description:" Update the 'actionType' for this canvas (radio / checkbox / button)\n If the canvas is currently selected, and the passed in actionType is 'button'\n this method will deselect the canvas.\n",
        name:"setActionType",
        seeAlso:[],
        type:"method",
        definingClass:"class:Button",
        groups:["state", "event handling"]
    },
    "attr:Facet.selectionBoundary":{
        ref:"attr:Facet.selectionBoundary",
        flags:"IR",
        description:"Selection boundary determining what facets / facetValues can be selected together by\n drag selection / shift+click selection",
        name:"selectionBoundary",
        seeAlso:[],
        valueType:"enum",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Facet"
    },
    "classMethod:isA.emptyString":{
        ref:"classMethod:isA.emptyString",
        flags:"",
        description:"\n	Is <code>object</code> the empty string?<br><br>\n	\n	NOTE: if you prefer, you can call this as <code>isAn.emptyString()</code>\n\n",
        name:"emptyString",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a null string", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "type:Visibility":{
        ref:"type:Visibility",
        values:[
            {description:"The widget visibility will match that of its parent (usually visible).", 
             value:"Canvas.INHERIT"},
            {description:"The widget will always be visible whether its parent is or not.", 
             value:"Canvas.VISIBLE"},
            {description:"The widget will always be hidden even when its parent is visible.", 
             value:"Canvas.HIDDEN"}
        ],
        description:null,
        name:"Visibility",
        seeAlso:[],
        type:"type",
        groups:["visibility"]
    },
    "attr:Canvas.redrawOnResize":{
        ref:"attr:Canvas.redrawOnResize",
        flags:"IRWA",
        description:"Should this element be redrawn in response to a resize?\n <P>\n Should be set to true for components whose ${isc.DocUtils.linkForRef('method:Canvas.getInnerHTML','inner HTML')} will not\n automatically reflow to fit the component's new size.",
        name:"redrawOnResize",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["drawing"]
    },
    "method:TabSet.updateTab":{
        ref:"method:TabSet.updateTab",
        flags:"",
        description:" Set the pane for a tab.\n <P>\n Pass in the index of a tab (or a tab object), and a new pane.\n <P>\n NOTE: the old pane for the tab is not destroy()d\n \n",
        name:"updateTab",
        seeAlso:[],
        params:[
            {description:"tab to update", optional:false, name:"tab", defaultValue:null, 
             type:"number | ID | Tab"},
            {description:"new pane for the tab", optional:false, name:"pane", defaultValue:null, 
             type:"Canvas | ID"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "classAttr:Time.displayFormat":{
        ref:"classAttr:Time.displayFormat",
        flags:"RWA",
        description:"Standard formatter to be used when converting a date to a time-string via ${isc.DocUtils.linkForRef('classMethod:Time.toTime')}",
        name:"displayFormat",
        setter:["Time.setNormalDisplayFormat"],
        seeAlso:[],
        valueType:"timeFormatter|function",
        defaultValue:"\"toTime\"",
        type:"classAttr",
        definingClass:"class:Time"
    },
    "group:formLayout":{
        ref:"group:formLayout",
        title:"Form Layout",
        treeLocation:["Client Reference/Forms"],
        refs:["attr:DynamicForm.itemLayout", "attr:FormItem.width", "attr:FormItem.height", 
         "attr:FormItem.colSpan","attr:FormItem.rowSpan", "attr:FormItem.startRow", "attr:FormItem.endRow", 
         "attr:ButtonItem.startRow","attr:ButtonItem.endRow"],
        description:"<b>FormItem Placement in Columns and Rows</b>\n <P>\n With the default tabular layout mechanism, items are laid out in rows from left to\n right until the number of columns, specified by ${isc.DocUtils.linkForRef('attr:DynamicForm.numCols','form.numCols')},\n is filled, then a new row is begun.  Flags on FormItems, including\n ${isc.DocUtils.linkForRef('attr:FormItem.startRow','startRow')}, ${isc.DocUtils.linkForRef('attr:FormItem.endRow','endRow')},\n ${isc.DocUtils.linkForRef('attr:FormItem.colSpan','colSpan')} and ${isc.DocUtils.linkForRef('attr:FormItem.rowSpan','rowSpan')}, control row and\n column placement and spanning.  \n <P>\n Note that the most common form items (TextItem, SelectItem, etc) take up <b>two</b>\n columns by default: one for the form control itself, and one for it's title.  The\n default setting of ${isc.DocUtils.linkForRef('attr:DynamicForm.numCols','form.numCols:2')} will result in one TextItem\n or SelectItem per row.\n <P>\n Note also that ButtonItems have both startRow:true and endRow:true by default.  You must\n set startRow and/or endRow to <code>false</code> on a ButtonItem in order to place a\n button in the same row as any other item.\n <P>\n The log category \"tablePlacement\" can be enabled from the Developer Console to watch\n items being placed.  You can also set ${isc.DocUtils.linkForRef('attr:DynamicForm.cellBorder','form.cellBorder:1')} to\n reveal the table structure for layout troubleshooting purposes.\n <P>\n <b>Row and Column Sizing</b>\n <P>\n ${isc.DocUtils.linkForRef('attr:DynamicForm.colWidths')} controls the widths of form columns.  FormItems that have\n \"*\" for ${isc.DocUtils.linkForRef('attr:FormItem.width')} will fill the column.  FormItems with a numeric width will\n have that width in pixels regardless of the column's specified width, which may cause the\n column to overflow as described under ${isc.DocUtils.linkForRef('attr:DynamicForm.fixedColWidths')}.\n <P>\n For row heights, the largest pixel height specified on any item in the row is taken as a\n minimum size for the row.  Then, any rows that have \"*\" or \"%\" height items will share\n any height not taken up by fixed-sized items.\n <P>\n <b>Managing Overflow</b>\n <P>\n Forms often contain labels, data values, or instructional text which can vary in\n size based on the skin, data values, or internationalization settings.  There are a few\n ways to deal with a form potentially varying in size:\n <ol>\n <li> Allow scrolling when necessary, using ${isc.DocUtils.linkForRef('attr:Canvas.overflow','overflow:auto')}, either\n on the immediate form, or on some parent.\n <li> Place the form in a Layout along with a component that can render any specified\n size, such as a ${isc.DocUtils.linkForRef('class:ListGrid')}.  In this case, the Layout will automatically shrink the\n grid in order to accomodate the form.\n <li> Ensure that the form can always render at a designed minimum size by reducing\n the number of cases of variable-sized text, and testing remaining cases across all\n supported skins.  For example, move help text into hovers on help icons, or clip \n long text values at a maximum length and provide a hover to see the rest.\n </ol>\n\n Several examples of Form Layout are available ${isc.DocUtils.linkForExampleId('formsLayout', 'here')}.",
        name:"formLayout",
        seeAlso:[],
        type:"group"
    },
    "method:Canvas.shouldDragScroll":{
        ref:"method:Canvas.shouldDragScroll",
        flags:"A",
        description:"  If this widget is showing scrollbars, and a user drags close to the edge of the viewport,\n  should we scroll the viewport in the appropriate direction?\n  Returns this.canDragScroll by default.\n",
        name:"shouldDragScroll",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["events", "dragging"]
    },
    "classMethod:isA.emptyObject":{
        ref:"classMethod:isA.emptyObject",
        flags:"",
        description:"\n Is <code>object</code> an object with no properties (i.e.: <code>{}</code>)?\n <P>\n Note that an object that has properties with null values is considered non-empty, eg \n <code>{ propName:null }</code> is non-empty.\n <P>\n NOTE: if you prefer, you can call this as <code>isAn.emptyObject()</code>\n\n",
        name:"emptyObject",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is the empty object", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "classMethod:Time.parseInput":{
        ref:"classMethod:Time.parseInput",
        flags:"",
        description:" Converts a time-string such as <code>1:00pm</code> to a date object with the appropriate\n time set. Accepts most formats of time string.\n (Time is in UTC time, adjusted by ${isc.DocUtils.linkForRef('classAttr:Time.UTCHoursOffset')} if appropriate).\n",
        name:"parseInput",
        seeAlso:[],
        params:[
            {description:"time string to convert to a date", optional:false, name:"string", 
             defaultValue:null,type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "attr:Canvas.snapToGrid":{
        ref:"attr:Canvas.snapToGrid",
        flags:"IRW",
        description:"Causes this canvas to snap to its parent's grid when dragging.",
        name:"snapToGrid",
        seeAlso:[
            {ref:"attr:Canvas.childrenSnapToGrid", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["dragdrop"]
    },
    "attr:FormItem.valueIcons":{
        ref:"attr:FormItem.valueIcons",
        flags:"IRW",
        description:"A mapping of logical form item values to URLs.\n If specified, when the form item is set to the value in question, an icon will be \n displayed with the appropriate source URL.",
        name:"valueIcons",
        setter:["setValueIcons"],
        seeAlso:[
            {ref:"method:FormItem.getValueIcon", description:null}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "attr:ListGridField.showIf":{
        ref:"attr:ListGridField.showIf",
        flags:"IRWA",
        description:"A string of script that, if provided, is evaluated to conditionally determine whether\n this field should be displayed.  Evaluated on initial draw, then reevaluated on explicit \n calls to <code>listGrid.refreshFields()</code> or <code>listGrid.setFields()</code>. \n <P>\n Note that explicit calls to ${isc.DocUtils.linkForRef('method:ListGrid.showField','grid.showField()')} or hideField()\n will wipe out the <code>showIf</code> expression, as will the end user showing and\n hiding columns via the ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','header contextMenu')}.",
        name:"showIf",
        seeAlso:[
            {ref:"method:ListGrid.refreshFields", description:null}
        ],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["appearance"]
    },
    "attr:ListGrid.autoSaveEdits":{
        ref:"attr:ListGrid.autoSaveEdits",
        flags:"IRWA",
        description:"If this ListGrid is editable, should edits be saved out when the user finishes editing\n a row (or a cell if ${isc.DocUtils.linkForRef('attr:ListGrid.saveByCell')} is true).\n When set to true, pending edits will be retained for all edited cells (across rows\n if appropriate).<br>\n To save the pending edits out, use ${isc.DocUtils.linkForRef('method:ListGrid.saveAllEdits')}.<br>\n To discard pending edits, use ${isc.DocUtils.linkForRef('method:ListGrid.discardAllEdits')}.<br>\n Note that edits are saved to the underlying data set, so for databound grids saving \n edits made in a grid will commit the changes to the server.",
        name:"autoSaveEdits",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:Canvas.getInnerContentHeight":{
        ref:"method:Canvas.getInnerContentHeight",
        flags:"A",
        description:"  Returns the amount of space available for interior content (or relatively positioned child\n  widget(s)) without introducing clipping, scrolling or overflow.<br>\n  This is the space within the viewport of the widget (not including padding, and excluding \n  margins, borders or scrollbars) rendered at its specified size.\n\n",
        name:"getInnerContentHeight",
        seeAlso:[
            {ref:"method:Canvas.getInnerContentWidth", description:null},
            {ref:"method:Canvas.getInnerHeight", description:null},
            {ref:"method:Canvas.getInnerWidth", description:null}
        ],
        returns:{description:"inner height of the widget in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "group:loadDSTag":{
        ref:"group:loadDSTag",
        title:"&lt;isomorphic:loadDS&gt;",
        treeLocation:["Java Server Reference/SmartClient JSP Tags"],
        refs:[],
        description:"<i>produces:</i> JavaScript\n <p>\n This tag convers a SmartClient DataSource defined in XML to JavaScript for use in\n databinding on the client (browser).\n <p>\n Note that this JSP tag must be surrounded by &lt;SCRIPT&gt; tags in the JSP because it\n generates JavaScript code.  Like other tags that generate JavaScript code, this tag can be\n used in a JSP that is included from your main page in order to create separate\n cacheability.  For example:<pre>\n     &lt;SCRIPT SRC=\"myDataSources.jsp\"&gt;&lt;/SCRIPT&gt;\n </pre>\n <p>\n <b><u>Tag Attributes:</u></b>\n <p>\n <b>ID</b><br>\n <i>value format</i>: String - ID of datasource to load<br>\n <i>default value</i>: NONE\n <p>\n This attribute specifies the name of the dataSource that you wish to load.  DataSources are\n located in <code>[webroot]/shared/ds</code> by default.  This location is changeable in\n <code>[webroot]/WEB-INF/classes/server.properties</code> by setting the config parameter\n <code>project.datasources</code> to the directory where your dataSources are located.\n We recommend that for prototying, at least, you use the default directory.\n <p>\n For example:\n <pre>\n &lt;isomorphic:loadDS ID=\"supplyItem\"/&gt;\n </pre>\n Would load the <code>supplyItem</code> DataSource.\n <p>\n See ${isc.DocUtils.linkForRef('group:dataSourceDeclaration')} for more details on creating DataSources and an\n example.\n <p>\n <b>name</b><br>\n <i>value format</i>: String - ID of datasource to load<br>\n <i>default value</i>: NONE\n <p>\n This is a synonym for the <code>ID</code> attribute.",
        name:"loadDSTag",
        seeAlso:[
            {ref:"group:dataSourceDeclaration", description:null}
        ],
        type:"group",
        requiresModules:["SCServer"]
    },
    "classAttr:RPCResponse.STATUS_LOGIN_SUCCESS":{
        ref:"classAttr:RPCResponse.STATUS_LOGIN_SUCCESS",
        flags:"R",
        description:"Indicates that the login succeeded.",
        name:"STATUS_LOGIN_SUCCESS",
        seeAlso:[
            {ref:"class:RPCRequest", description:null}
        ],
        valueType:"integer",
        defaultValue:"-8",
        type:"classAttr",
        definingClass:"class:RPCResponse",
        groups:["statusCodes"]
    },
    "method:HTMLFlow.contentLoaded":{
        ref:"method:HTMLFlow.contentLoaded",
        flags:"",
        description:" StringMethod fired when content is completely loaded in this htmlFlow. Has no default \n implementation. May be observed or overridden as a notification type method to fire custom\n logic when loading completes.<br>\n Note: Does not apply to htmlFlows with ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set \n to <code>\"page\"</code>\n",
        name:"contentLoaded",
        seeAlso:[],
        type:"method",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "classMethod:Class.toString":{
        ref:"classMethod:Class.toString",
        flags:"",
        description:"\n  The default toString() for a ClassObject reports that you have a ClassObject and what class\n  it is.\n",
        name:"toString",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:Canvas.animateTime":{
        ref:"attr:Canvas.animateTime",
        flags:"IRWA",
        description:"Default total duration of animations. Can be overridden by setting animation times for\n specific animations, or by passing a <code>duration</code> parameter into the appropriate\n animate...() method.",
        name:"animateTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"300",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('animateMove')}"],
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:ResultSet.findNextIndex":{
        ref:"method:ResultSet.findNextIndex",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.findNextIndex')}.  Checks only loaded rows and will not trigger a fetch.\n",
        name:"findNextIndex",
        seeAlso:[],
        params:[
            {description:"first index to consider", optional:false, name:"startIndex", 
             defaultValue:null,type:"int"},
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"endIndex", defaultValue:null, 
             type:"int"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access", "find"]
    },
    "method:Tree.remove":{
        ref:"method:Tree.remove",
        flags:"",
        description:"\n Removes a node, along with all its children.\n\n",
        name:"remove",
        seeAlso:[],
        params:[
            {description:"node to remove", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"true if the tree was changed as a result of this call", type:"boolean"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:ListGridField.editorValueIconWidth":{
        ref:"attr:ListGridField.editorValueIconWidth",
        flags:"IRW",
        description:"When some cell in this field is being edited, setting this property will specify the\n width for value icons in the cell's editor. If unset, the editor's valueIcon width and\n height will be determined in the same way as it would be for a static cell.",
        name:"editorValueIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "attr:Canvas.left":{
        flags:"IRW",
        getter:["getLeft"],
        type:"attr",
        ref:"attr:Canvas.left",
        description:"Number of pixels the left side of the widget is offset to the right from its default\n drawing context (either its parent's topleft corner, or the document flow, depending on\n the value of the ${isc.DocUtils.linkForRef('attr:Canvas.position')} property).",
        name:"left",
        setter:["setLeft"],
        valueType:"number",
        seeAlso:[],
        defaultValue:"0",
        groups:["positioning"],
        definingClass:"class:Canvas"
    },
    "method:MenuBar.setMenus":{
        ref:"method:MenuBar.setMenus",
        flags:"",
        description:" Dynamically reset the set of menus displayed by this menu bar. \n",
        name:"setMenus",
        seeAlso:[],
        params:[
            {description:"array of new menus for this menubar", optional:false, name:"menus", 
             defaultValue:null,type:"array"}
        ],
        type:"method",
        definingClass:"class:MenuBar"
    },
    "attr:ResultTree.updateCacheFromRequest":{
        ref:"attr:ResultTree.updateCacheFromRequest",
        flags:"IRA",
        description:"When a successful Add, Update or Remove type operation fires on this ResultTree's \n dataSource, if ${isc.DocUtils.linkForRef('attr:DSResponse.data')} is unset, should we integrate the submitted\n data values (from the request) into our data-set?",
        name:"updateCacheFromRequest",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ResultTree",
        groups:["cacheSync"]
    },
    "attr:TreeGrid.animateFolderEffect":{
        ref:"attr:TreeGrid.animateFolderEffect",
        flags:"IRW",
        description:"When animating folder opening / closing, this property can be set to apply an\n animated acceleration effect.designates the speed of the\n animation in pixels shown (or hidden) per second.",
        name:"animateFolderEffect",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["animation"]
    },
    "attr:OperationBinding.wsOperation":{
        ref:"attr:OperationBinding.wsOperation",
        flags:"IR",
        description:"Name of the web service operation that will be invoked in order to execute this DataSource\n operation.\n <P>\n Valid only for a DataSource that has a WebService (${isc.DocUtils.linkForRef('attr:DataSource.serviceNamespace')} is\n set).  Otherwise, use ${isc.DocUtils.linkForRef('attr:OperationBinding.dataURL')}.\n <P>\n Setting <code>wsOperation</code> means that ${isc.DocUtils.linkForRef('attr:DSRequest.data')} will be serialized as the\n request message for the specified web service operation, with namespacing and soap encoding\n handled automatically.  See ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} for how to customize what\n data is sent to the server.",
        name:"wsOperation",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('wsdlBinding')}"],
        definingClass:"class:OperationBinding",
        groups:["clientDataIntegration"]
    },
    "attr:FormItem.visible":{
        ref:"attr:FormItem.visible",
        flags:"IRW",
        description:"Whether this item is currently visible.\n <P>\n <code>visible</code> can only be set on creation.  After creation, use\n ${isc.DocUtils.linkForRef('method:FormItem.show')} and ${isc.DocUtils.linkForRef('method:FormItem.hide')} to manipulate visibility.",
        name:"visible",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["appearance"]
    },
    "method:Window.minimize":{
        ref:"method:Window.minimize",
        flags:"",
        description:" Minimize the window. Fired when the user clicks the minimize button if \n ${isc.DocUtils.linkForRef('attr:Window.showMinimizeButton','this.showMinimizeButton')} is true.<br>\n Default implementation shrinks the window to just the height of the header bar, hiding the\n body. If ${isc.DocUtils.linkForRef('attr:Window.animateMinimize','animateMinimize')} is true, the resize will be animated.\n A restore button will be displayed in place of the minimize button when the window is \n minimized.\n",
        name:"minimize",
        seeAlso:[],
        type:"method",
        definingClass:"class:Window"
    },
    "attr:TreeGrid.dragDataAction":{
        ref:"attr:TreeGrid.dragDataAction",
        flags:"IRWA",
        description:"Specifies what to do with data dragged from this TreeGrid (into another component, or\n another node in this TreeGrid.  The default action is to move the data.  A setting of\n \"none\" is not recommended for trees because Trees maintain the node open state on the nodes\n themselves, and hence having multiple Tree objects share a reference to a node can have\n unintended consequences (such as opening a folder in one tree also triggering an open in\n another tree that shares the same node).\n <br><br>\n For DataBound trees (${isc.DocUtils.linkForRef('class:ResultTree')}), the expectation is that\n ${isc.DocUtils.linkForRef('method:TreeGrid.folderDrop')} will be overridden to perform whatever action took\n place as the result of the drag and drop interaction.",
        name:"dragDataAction",
        seeAlso:[
            {ref:"group:sharingNodes", description:null}
        ],
        valueType:"DragDataAction",
        defaultValue:"ListGrid.MOVE",
        type:"attr",
        definingClass:"class:TreeGrid"
    },
    "attr:Layout.orientation":{
        ref:"attr:Layout.orientation",
        flags:"AIRW",
        description:"Orientation of this layout.",
        name:"orientation",
        seeAlso:[],
        valueType:"Orientation",
        defaultValue:"\"horizontal\"",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "attr:Button.showSelectedIcon":{
        ref:"attr:Button.showSelectedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n becomes selected.",
        name:"showSelectedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "method:Date.toUSShortDateTime":{
        ref:"method:Date.toUSShortDateTime",
        flags:"",
        description:"  Return this date in the format: <code>MM/DD/YYYY HH:MM</code>\n   \n",
        name:"toUSShortDateTime",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:Chart.valueProperty":{
        ref:"attr:Chart.valueProperty",
        flags:"IR",
        description:"Property in each record that holds a data value.\n <P>\n Not used if there is an inline facet, see ${isc.DocUtils.linkForRef('attr:Chart.data')}.",
        name:"valueProperty",
        seeAlso:[],
        valueType:"String",
        defaultValue:"\"_value\"",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "group:imageColumns":{
        ref:"group:imageColumns",
        refs:["method:ListGrid.getValueIcon", "method:ListGrid.getEditorValueIcons", 
         "attr:ListGridField.valueIcons","attr:ListGrid.valueIconSize", "attr:ListGrid.valueIconWidth", 
         "attr:ListGrid.valueIconHeight","attr:ListGridField.valueIconSize", "attr:ListGridField.valueIconWidth", 
         "attr:ListGridField.valueIconHeight","attr:ListGridField.valueIconLeftPadding", "attr:ListGridField.valueIconRightPadding", 
         "attr:ListGridField.editorValueIcons","attr:ListGridField.editorValueIconWidth", "attr:ListGridField.editorValueIconHeight", 
         "attr:ListGridField.showValueIconOnly","attr:ListGridField.suppressValueIcon", "attr:ListGridField.valueIconOrientation", 
         "attr:ListGrid.valueIconLeftPadding","attr:ListGrid.valueIconRightPadding", "attr:ListGridField.imageURLPrefix", 
         "attr:ListGridField.imageURLSuffix","attr:ListGrid.imageSize", "attr:ListGridField.imageSize", "attr:ListGridField.imageWidth", 
         "attr:ListGridField.imageHeight","attr:ListGrid.booleanTrueImage", "attr:ListGrid.booleanFalseImage", 
         "attr:ListGrid.booleanImageWidth","attr:ListGrid.booleanImageHeight"],
        description:"Columns that show images either as their only appearance or in addition to text.",
        name:"imageColumns",
        seeAlso:[],
        type:"group"
    },
    "attr:ValuesManager.unknownErrorMessage":{
        ref:"attr:ValuesManager.unknownErrorMessage",
        flags:"IRW",
        description:"The error message for a failed validator that does not specify its own errorMessage.",
        name:"unknownErrorMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Invalid value\"",
        type:"attr",
        definingClass:"class:ValuesManager",
        groups:["validation", "i18nMessages"]
    },
    "method:TreeGrid.getViewState":{
        ref:"method:TreeGrid.getViewState",
        flags:"",
        description:" Overridden to return a ${isc.DocUtils.linkForRef('type:treeGridViewState')} object for the grid.\n",
        name:"getViewState",
        seeAlso:[
            {ref:"type:treeGridViewState", description:null},
            {ref:"method:TreeGrid.setViewState", description:null}
        ],
        returns:{description:"current view state for the grid.", type:"treeGridViewState"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "attr:Canvas.topElement":{
        ref:"attr:Canvas.topElement",
        flags:"RA",
        description:"The top-most Canvas (i.e., not a child of any other Canvas), if any, in this widget's\n containment hierarchy.",
        name:"topElement",
        seeAlso:[],
        valueType:"Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "attr:CubeGrid.metricFacetId":{
        ref:"attr:CubeGrid.metricFacetId",
        flags:"IR",
        description:"In a CubeGrid that displays values of different types (eg \"Revenue\" and \"Income\"), the\n different types of values on display are enumerated as the facet values of the \"metric\n facet\".  \n <P>\n The metric facet is treated identically to any other facet by the CubeGrid: it can be\n represented as row or column headers, can be innermost or have other facets under it,\n can be moved around, etc.  However when a metric facet is used, ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId')}\n must be set to allow the CubeGrid generate meaningful descriptions of values show in\n cells for use in hovers and other situations; see ${isc.DocUtils.linkForRef('attr:CubeGrid.valueTitle')} for a full\n explanation.",
        name:"metricFacetId",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"metric\"",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "interface:Chart":{
        methods:["method:Chart.setupChart", "method:Chart.getFacet", "method:Chart.getFacetValue", 
         "method:Chart.getValue","method:Chart.setData"],
        ref:"interface:Chart",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Optional Modules/Analytics"],
        attrs:["attr:Chart.valueProperty", "attr:Chart.data", "attr:Chart.facets", "attr:Chart.stacked", 
         "attr:Chart.chartType","attr:Chart.valueTitle", "attr:Chart.title", "attr:Chart.subTitle", "attr:Chart.threeD", 
         "attr:Chart.shouldAnimateShow","attr:Chart.labelValues"],
        description:"Generic Chart properties and interfaces to be mixed into concrete charting implementations.\n <P>\n Components such as the ${isc.DocUtils.linkForRef('method:ListGrid.chartData','ListGrid')} and\n ${isc.DocUtils.linkForRef('method:CubeGrid.makeChart','CubeGrid')} expect this interface and can drive charting engines\n that support it.\n <P>\n Concrete Chart implementations may expose whatever properties they want for configuration,\n however, to enable easy switching of charting engines (different engines may be used for\n different end users based on that user's installed plugins), they should support\n the properties of this interface to the maximum extent possible.\n <P>\n This interface also provides core data model management (see\n ${isc.DocUtils.linkForRef('method:Chart.getValue','getValue()')}) for charting engines.",
        name:"Chart",
        seeAlso:[],
        type:"interface",
        requiresModules:["Analytics"]
    },
    "method:Class.fireCallback":{
        ref:"method:Class.fireCallback",
        flags:"",
        description:"\n	Method to fire a callback. Callback will be fired in the scope of the object on \n  which this method is called.<br>\n  Falls through to ${isc.DocUtils.linkForRef('classMethod:Class.fireCallback')}\n\n",
        name:"fireCallback",
        seeAlso:[],
        params:[
            {description:"Callback to fire", optional:false, name:"callback", defaultValue:null, 
             type:"Callback"},
            {description:"comma separated string of variables", optional:true, name:"argNames", 
             defaultValue:null,type:"string"},
            {description:"array of arguments to pass to the method", optional:true, name:"args", 
             defaultValue:null,type:"array"}
        ],
        returns:{description:"returns the value returned by the callback method passed in.", type:"any"},
        type:"method",
        definingClass:"class:Class"
    },
    "method:TreeGrid.getOpenState":{
        ref:"method:TreeGrid.getOpenState",
        flags:"",
        description:" Returns a snapshot of the current open state of this grid's data as\n a ${isc.DocUtils.linkForRef('type:treeGridOpenState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:TreeGrid.getOpenState')} to open the same set of folders\n within the treeGrid's data (assuming the nodes are still present in the data).\n",
        name:"getOpenState",
        seeAlso:[
            {ref:"method:TreeGrid.getOpenState", description:null}
        ],
        returns:{description:"current sort state for the grid.", type:"treeGridOpenState"},
        type:"method",
        definingClass:"class:TreeGrid",
        groups:["viewState"]
    },
    "attr:EdgedCanvas.edgeSize":{
        ref:"attr:EdgedCanvas.edgeSize",
        flags:"IR",
        description:"Size in pixels for corners and edges",
        name:"edgeSize",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"6",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "attr:Canvas.backgroundRepeat":{
        ref:"attr:Canvas.backgroundRepeat",
        flags:"IRW",
        description:"Specifies how the background image should be tiled if this widget\n      is larger than the image. It corresponds to the CSS background-repeat attribute.\n      See BkgndRepeat type for details.",
        name:"backgroundRepeat",
        seeAlso:[],
        valueType:"BkgndRepeat",
        defaultValue:"Canvas.REPEAT",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "method:Canvas.rightMouseDown":{
        ref:"method:Canvas.rightMouseDown",
        flags:"A",
        description:"\n Executed when the right mouse down is pressed on this widget.  No default implementation.\n\n",
        name:"rightMouseDown",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        platformNotes:"Some end user systems only have one mouse button.",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "group:facetLayout":{
        ref:"group:facetLayout",
        refs:["method:CubeGrid.getFacetValueLayout", "method:CubeGrid.getRowFacetLayout", 
         "method:CubeGrid.getColumnFacetLayout","method:CubeGrid.addRowFacet", "method:CubeGrid.addColumnFacet", 
         "method:CubeGrid.removeFacet","method:CubeGrid.setFixedFacetValue", "method:CubeGrid.facetValueReordered", 
         "method:CubeGrid.facetAdded","method:CubeGrid.facetRemoved", "method:CubeGrid.facetMoved", "attr:CubeGrid.columnFacets", 
         "attr:CubeGrid.rowFacets","attr:CubeGrid.hideEmptyFacetValues", "attr:CubeGrid.canReorderColumns", 
         "attr:CubeGrid.canMoveFacets"],
        description:null,
        name:"facetLayout",
        seeAlso:[],
        type:"group"
    },
    "attr:Button.selected":{
        ref:"attr:Button.selected",
        flags:"IRW",
        description:"Whether this component is selected.  For some components, selection affects appearance.",
        name:"selected",
        setter:["setSelected"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["state"]
    },
    "attr:Canvas.doubleClickDelay":{
        ref:"attr:Canvas.doubleClickDelay",
        flags:"IRWA",
        description:"Amount of time (in msec) between which two clicks are considered a single click",
        name:"doubleClickDelay",
        seeAlso:[],
        valueType:"number",
        defaultValue:"250",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["events"]
    },
    "method:GridRenderer.rowOut":{
        ref:"method:GridRenderer.rowOut",
        flags:"A",
        description:" Called when the mouse pointer leaves a row\n\n",
        name:"rowOut",
        seeAlso:[],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"whether to cancel the event", type:"boolean"},
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "group:loadingDataMessage":{
        ref:"group:loadingDataMessage",
        refs:["attr:ListGrid.loadingDataMessage", "attr:ListGrid.loadingDataMessageStyle"],
        name:"loadingDataMessage",
        seeAlso:[],
        type:"group"
    },
    "attr:Window.modalMaskOpacity":{
        ref:"attr:Window.modalMaskOpacity",
        flags:"IR",
        description:"Controls the opacity of the modal mask displayed behind modal windows.",
        name:"modalMaskOpacity",
        seeAlso:[
            {ref:"attr:Window.modalMask", description:null}
        ],
        valueType:"number",
        defaultValue:"50",
        type:"attr",
        definingClass:"class:Window",
        groups:["modal", "appearance"]
    },
    "type:RowEndEditAction":{
        ref:"type:RowEndEditAction",
        values:[
            {description:"navigate to the first editable cell in the same record", value:"\"same\""},
            {description:"navigate to the first editable cell in the next record", value:"\"next\""},
            {description:"complete the edit.", value:"\"done\""},
            {description:"Leave focus in the cell being edited (take no action)", value:"\"stop\""}
        ],
        description:"While editing a ListGrid, what cell should we edit when the user attempts to navigate \n  into a cell past the end of an editable row, via a Tab keypress, or a programmatic\n  saveAndEditNextCell() call?",
        name:"RowEndEditAction",
        seeAlso:[
            {ref:"attr:ListGrid.rowEndEditAction", description:null}
        ],
        type:"type",
        groups:["editing"]
    },
    "method:DetailViewer.setData":{
        ref:"method:DetailViewer.setData",
        flags:"",
        description:" Sets the data displayed by this detail viewer.\n\n",
        name:"setData",
        seeAlso:[],
        params:[
            {description:"new data to be displayed", optional:false, name:"newData", defaultValue:null, 
             type:"object or array"}
        ],
        type:"method",
        definingClass:"class:DetailViewer"
    },
    "method:ValuesManager.showErrors":{
        ref:"method:ValuesManager.showErrors",
        flags:"",
        description:" Method to explicitly show the latest set of validation errors present on this \n ValuesManager.<br>\n Will redraw all member forms to display (or clear) currently visible errors, and\n fire ${isc.DocUtils.linkForRef('method:ValuesManager.handleHiddenValidationErrors')} to allow custom handling of\n hidden errors.\n",
        name:"showErrors",
        seeAlso:[],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["errors"]
    },
    "classMethod:isA.Array":{
        ref:"classMethod:isA.Array",
        flags:"",
        description:"\n	Is <code>object</code> an Array object?<br><br>\n\n	NOTE: if you prefer, you can call this as <code>isAn.Array()</code>\n\n",
        name:"Array",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is an Array", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "attr:Facet.canMinimize":{
        ref:"attr:Facet.canMinimize",
        flags:"IR",
        description:"If facet minimizing is enabled, whether this facet should show controls to minimize the\n next facet.  Generally a tree facet should not also allow minimizing the next facet -\n the interaction of the two types of collapsing can be confusing.\n <P>\n See ${isc.DocUtils.linkForRef('attr:CubeGrid.canMinimizeFacets')}.",
        name:"canMinimize",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"cubeGrid.canMinimizeFacets",
        type:"attr",
        definingClass:"class:Facet"
    },
    "method:ListGrid.cellHasErrors":{
        ref:"method:ListGrid.cellHasErrors",
        flags:"",
        description:" Given a rowNum and a colNum or fieldName, determine whether we currently have stored \n validation errors for the record/field in question.\n",
        name:"cellHasErrors",
        seeAlso:[
            {ref:"method:ListGrid.hasErrors", description:null},
            {ref:"method:ListGrid.rowHasErrors", description:null}
        ],
        params:[
            {description:"index of row to check for validation errors", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"name of field, or index of column to check for validation                                       errors", 
             optional:false,name:"fieldID", defaultValue:null, type:"number|string"}
        ],
        returns:{description:"true if we have validation errors for the row/col in question", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:StretchImgButton.baseStyle":{
        ref:"attr:StretchImgButton.baseStyle",
        flags:"IRW",
        description:"Base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n <P>\n When the component changes state (eg becomes disabled), a suffix will be appended to this\n style name, reflecting the following states: \"Over\", \"Down\", or \"Disabled\".\n <P>\n If the widget is selected, the suffixes will be \"Selected\", \"SelectedOver\", etc.\n <P>\n If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be \"Focused\",\n \"FocusedOver\", etc, or if the widget is both selected and focused, \"SelectedFocused\",\n \"SelectedFocusedOver\", etc.\n <P>\n For example, if <code>baseStyle</code> is set to \"button\", this component is\n ${isc.DocUtils.linkForRef('method:StretchImgButton.isSelected','selected')} and the mouse cursor is over this component, the style\n \"buttonSelectedOver\" will be used.",
        name:"baseStyle",
        setter:["setBaseStyle"],
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"stretchImgButton\"",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:ListGrid.getViewState":{
        ref:"method:ListGrid.getViewState",
        flags:"",
        description:" Returns a snapshot of the current view state of this ListGrid.<br>\n This includes the field state, sort state and selected state of the grid, returned as a\n ${isc.DocUtils.linkForRef('type:listGridViewState')} object.<br>\n This object can be passed to ${isc.DocUtils.linkForRef('method:ListGrid.setViewState')} to reset this grid's vew state\n to the current state (assuming the same data / fields are present in the grid).<br>\n",
        name:"getViewState",
        seeAlso:[
            {ref:"type:listGridViewState", description:null},
            {ref:"method:ListGrid.setViewState", description:null}
        ],
        returns:{description:"current view state for the grid.", type:"listGridViewState"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["viewState"]
    },
    "attr:StatefulCanvas.baseStyle":{
        ref:"attr:StatefulCanvas.baseStyle",
        flags:"IRW",
        description:"Base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n <P>\n When the component changes state (eg becomes disabled), a suffix will be appended to this\n style name, reflecting the following states: \"Over\", \"Down\", or \"Disabled\".\n <P>\n If the widget is selected, the suffixes will be \"Selected\", \"SelectedOver\", etc.\n <P>\n If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be \"Focused\",\n \"FocusedOver\", etc, or if the widget is both selected and focused, \"SelectedFocused\",\n \"SelectedFocusedOver\", etc.\n <P>\n For example, if <code>baseStyle</code> is set to \"button\", this component is\n ${isc.DocUtils.linkForRef('method:StatefulCanvas.isSelected','selected')} and the mouse cursor is over this component, the style\n \"buttonSelectedOver\" will be used.",
        name:"baseStyle",
        setter:["setBaseStyle"],
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:StatefulCanvas"
    },
    "attr:DSResponse.data":{
        ref:"attr:DSResponse.data",
        flags:"R",
        description:"For DataSource operations, this is typically either an Array of Objects representing records\n (for \"fetch\" operations) or a single Object representing the updated record (for \"update\",\n \"add\" or \"remove\" operations).",
        name:"data",
        seeAlso:[
            {ref:"group:dataSourceOperations", 
             description:"for standard return types for DataSource Operations"}
        ],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSResponse",
        groups:["dsResponse"]
    },
    "attr:TextItem.length":{
        ref:"attr:TextItem.length",
        flags:"IRW",
        description:"if set, maximum number of characters for this field",
        name:"length",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TextItem",
        groups:["validation"]
    },
    "attr:Layout.vPolicy":{
        ref:"attr:Layout.vPolicy",
        flags:"IRWA",
        description:"Sizing policy applied to members on vertical axis",
        name:"vPolicy",
        seeAlso:[],
        valueType:"LayoutPolicy",
        defaultValue:"\"fill\"",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "attr:DateChooser.nextMonthIconWidth":{
        ref:"attr:DateChooser.nextMonthIconWidth",
        flags:"IRW",
        description:"Width of the icon for the next month button",
        name:"nextMonthIconWidth",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "group:zIndex":{
        ref:"group:zIndex",
        refs:["method:Canvas.bringToFront", "method:Canvas.sendToBack", "method:Canvas.moveAbove", 
         "method:Canvas.moveBelow"],
        description:"Object's \"stacking order\" above or below other objects",
        name:"zIndex",
        seeAlso:[],
        type:"group"
    },
    "method:ListGrid.editFailed":{
        ref:"method:ListGrid.editFailed",
        flags:"A",
        description:" Called when an attempt to save inline edits fails, due to a validation error or other\n server error.\n <P>\n The default implementation of editFailed does nothing for normal validation errors,\n which are displayed before editFailed() is called.  For any other errors, the default\n implementation will call ${isc.DocUtils.linkForRef('classMethod:RPCManager.handleError')}, which by default\n will result in a warning dialog.\n\n",
        name:"editFailed",
        seeAlso:[],
        params:[
            {description:"current index of the row we attempted to save", optional:false, 
             name:"rowNum",defaultValue:null, type:"number"},
            {description:"index of the column where the edit failed, if applicable", optional:false, 
             name:"colNum",defaultValue:null, type:"number"},
            {description:"new values that we attempted to save", optional:false, name:"newValues", 
             defaultValue:null,type:"any"},
            {description:"old values before the save occurred", optional:false, name:"oldValues", 
             defaultValue:null,type:"any"},
            {description:"Edit completion event that led to the save                                                  attempt", 
             optional:false,name:"editCompletionEvent", defaultValue:null, type:"editCompletionEvent"},
            {description:"DSResponse, for saves through a DataSource", optional:true, 
             name:"dsResponse",defaultValue:null, type:"DSResponse"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "method:ValuesManager.clearValues":{
        ref:"method:ValuesManager.clearValues",
        flags:"",
        description:"  Clear out all the values managed by this values manager.\n",
        name:"clearValues",
        seeAlso:[],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["formValues"]
    },
    "attr:DynamicForm.values":{
        flags:"IRW",
        getter:["getValues"],
        type:"attr",
        ref:"attr:DynamicForm.values",
        description:"An Object containing the initial values of the form as properties, where each\n propertyName is the name of a ${isc.DocUtils.linkForRef('group:Items','form item')} in the form, and each property\n value is the value held by that form item.\n <P>\n The form's values may contain values that are not managed by any FormItem, and these\n values will be preserved and available when the form values are subsequently retrieved\n via ${isc.DocUtils.linkForRef('method:DynamicForm.getValues')}.\n <P>\n Providing values on initialization is equivalent to calling ${isc.DocUtils.linkForRef('method:DynamicForm.setValues')}.\n <P>\n As the user manipulates form items to change values, change events fire\n ${isc.DocUtils.linkForRef('method:FormItem.change','on the items')} and \n ${isc.DocUtils.linkForRef('method:DynamicForm.itemChange','on the form as a whole')}.\n <P>\n Note that form values are logical values, for example, the value of a ${isc.DocUtils.linkForRef('class:DateItem')} is\n a JavaScript Date object, not a String, even if the user enters the date via a text\n input.  Likewise the value of a ${isc.DocUtils.linkForRef('class:TextItem')} or ${isc.DocUtils.linkForRef('class:CheckboxItem')} that started out\n null remains null until the user changes it; the value will not be automatically\n converted to the null string (\"\") or false respectively, as happens with native HTML\n elements.",
        name:"values",
        setter:["setValues"],
        valueType:"Object",
        seeAlso:[],
        defaultValue:"null",
        groups:["formValues"],
        definingClass:"class:DynamicForm"
    },
    "method:ListGrid.fieldStateChanged":{
        ref:"method:ListGrid.fieldStateChanged",
        flags:"",
        description:" Notification method executed when columns are resized or reordered, or fields are \n shown or hidden. Has no default implementation.\n\n",
        name:"fieldStateChanged",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["fieldState"]
    },
    "attr:ListGridField.defaultFilterValue":{
        ref:"attr:ListGridField.defaultFilterValue",
        flags:"IRWA",
        description:"If this ListGrid is showing a filter row, this property can be used to apply a default\n value to show in the filter editor for this field.",
        name:"defaultFilterValue",
        seeAlso:[],
        valueType:"any",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["filterEditor"]
    },
    "attr:GridRenderer.canHover":{
        ref:"attr:GridRenderer.canHover",
        flags:"RW",
        description:"If true, cellHover and rowHover events will fire when the user leaves the mouse over a \n row / cell.",
        name:"canHover",
        seeAlso:[
            {ref:"method:GridRenderer.cellHover", description:null},
            {ref:"method:GridRenderer.rowHover", description:null},
            {ref:"attr:GridRenderer.showHover", description:null}
        ],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["events"]
    },
    "attr:HeaderItem.textBoxStyle":{
        ref:"attr:HeaderItem.textBoxStyle",
        flags:"IRW",
        description:"Base CSS class for this item",
        name:"textBoxStyle",
        seeAlso:[],
        valueType:"FormItemBaseStyle",
        defaultValue:"\"headerItem\"",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "attr:ActiveXControl.uuid":{
        ref:"attr:ActiveXControl.uuid",
        flags:"IR",
        description:"Set this to the uuid of your Active X control - ISC will then generate the appropriate\n  classID entry for you.",
        name:"uuid",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ActiveXControl"
    },
    "attr:StatefulCanvas.showRollOver":{
        ref:"attr:StatefulCanvas.showRollOver",
        flags:"IRW",
        description:"Should we visibly change state when the mouse goes over this object?",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "class:StretchImg":{
        methods:["method:StretchImg.setState"],
        ref:"class:StretchImg",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Foundation"],
        attrs:["attr:StretchImg.vertical", "attr:StretchImg.capSize", "attr:StretchImg.src", 
         "attr:StretchImg.hSrc","attr:StretchImg.vSrc", "attr:StretchImg.imageType", "attr:StretchImg.items", 
         "attr:StretchImg.showTitle"],
        description:"The StretchImg widget class implements a widget type that displays a list of multiple images\n  that make up a single image.",
        name:"StretchImg",
        seeAlso:[],
        type:"class"
    },
    "attr:DetailViewer.wrapLabel":{
        ref:"attr:DetailViewer.wrapLabel",
        flags:"IRW",
        description:"Should the label be allowed to wrap, or be fixed to one line no matter how long",
        name:"wrapLabel",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["labels"]
    },
    "method:Date.toJapanShortDate":{
        ref:"method:Date.toJapanShortDate",
        flags:"",
        description:" Return the date in this format: <code>YYYY/MM/DD</code>\n",
        name:"toJapanShortDate",
        seeAlso:[],
        returns:{description:"formatted date string", type:"string"},
        type:"method",
        definingClass:"class:Date",
        groups:["dateFormatting"]
    },
    "attr:HTMLFlow.loadingMessage":{
        ref:"attr:HTMLFlow.loadingMessage",
        flags:"IRW",
        description:"HTML to show while content is being fetched, active only if the <code>contentsURL</code>\n property has been set.\n <P>\n The loading message will show both during the initial load of content, and during reload if\n the contents are reloaded or the contentsURL changed.  For a first-time only loading\n message, initialize the <code>contents</code> property instead.<br>\n Note: the <code>loadingMessage</code> is never displayed when loading complete web pages \n rather than HTML fragments (see ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType')}).",
        name:"loadingMessage",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "attr:CubeGrid.data":{
        ref:"attr:CubeGrid.data",
        flags:"IRW",
        description:"An array of \"cellRecords\", each of which represents data for one cell of the body area.",
        name:"data",
        seeAlso:[
            {ref:"attr:CubeGrid.fixedFacetValues", description:null}
        ],
        valueType:"Array of CellRecord",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:Layout.layoutTopMargin":{
        ref:"attr:Layout.layoutTopMargin",
        flags:"IRW",
        description:"Space outside of all members, on the top side.  Defaults to ${isc.DocUtils.linkForRef('attr:Layout.layoutMargin')}.\n <P>\n Requires a manual call to <code>setLayoutMargin()</code> if changed on the fly.",
        name:"layoutTopMargin",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutMargin"]
    },
    "attr:DataBoundComponent.showDetailFields":{
        ref:"attr:DataBoundComponent.showDetailFields",
        flags:"IRW",
        description:"Whether to show include marked <code>detail:true</code> when a DataBoundComponent is \n given a DataSource but no <code>component.fields</code>.\n <p>\n The <code>detail</code> property is used on DataSource fields to mark fields that \n shouldn't appear by default in a view that tries to show many records in a small space.",
        name:"showDetailFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "attr:DataSourceField.childrenProperty":{
        ref:"attr:DataSourceField.childrenProperty",
        flags:"IR",
        description:"If true, this property indicates that this field will hold an explicit array of child nodes \n for the current node.\n This has the same effect as specifying ${isc.DocUtils.linkForRef('attr:DataSource.childrenField')} to this field's \n name.",
        name:"childrenProperty",
        seeAlso:[
            {ref:"attr:DataSource.childrenField", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('treeLoadXML')}"],
        definingClass:"class:DataSourceField",
        groups:["dataSourceRelations"]
    },
    "method:CellSelection.selectCellList":{
        ref:"method:CellSelection.selectCellList",
        flags:"",
        description:"			select an array of cells\n",
        name:"selectCellList",
        seeAlso:[],
        params:[
            {description:"listArray of cells to select. Each cell can be specified                                      as a 2 element array <code>[rowNum, colNum]</code>", 
             optional:true,name:"", defaultValue:null, type:"array"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:CellSelection",
        groups:["selection"]
    },
    "attr:ListGrid.headerMenuButtonIconWidth":{
        ref:"attr:ListGrid.headerMenuButtonIconWidth",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderMenuButton')} is true, this property governs the width of the icon\n shown on the auto-generated <code>headerMenuButton</code>",
        name:"headerMenuButtonIconWidth",
        seeAlso:[],
        valueType:"number",
        defaultValue:"7",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["headerMenuButton"]
    },
    "attr:SelectItem.pickerIconProperties":{
        ref:"attr:SelectItem.pickerIconProperties",
        flags:"IRA",
        description:"If ${isc.DocUtils.linkForRef('attr:SelectItem.showPickerIcon')} is true for this item, this block of properties will\n be applied to the pickerIcon. Allows for advanced customization of this icon.",
        name:"pickerIconProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:SelectItem",
        groups:["pickerIcon"]
    },
    "classMethod:FileLoader.cacheFiles":{
        ref:"classMethod:FileLoader.cacheFiles",
        flags:"",
        description:"\n Caches the specified list of files.\n\n",
        name:"cacheFiles",
        seeAlso:[],
        params:[
            {description:"List of URLs to cache.  These may point to image, js, or css                               files.  This can either be a string with comma separated URLs or an\n                               Array of URLs.", 
             optional:false,name:"URLs", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified                                      files has been cached.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"},
            {description:"Specifies the type of the files referenced by the URLs.  Valid values are:                        \"js\", \"css\", and \"image\".  If not specified, the type is auto-derived from\n                        the file extension.  If a type cannot be derived, the cache directive\n                        for that specific URL will be ignored and an error will be logged to\n                        the Developer Console. You must specify a type if you use a\n                        non-standard extension for your file - for example if you use a JSP\n                        or a servlet with no extension to generate images.", 
             optional:true,name:"type", defaultValue:null, type:"String"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:ImgButton.hiliteAccessKey":{
        ref:"attr:ImgButton.hiliteAccessKey",
        flags:"IRW",
        description:"If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the\n specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user\n it will be modified to include HTML to underline the accessKey.<br>\n Note that this property may cause titles that include HTML (rather than simple strings)\n to be inappropriately modified, so should be disabled if your title string includes\n HTML characters.",
        name:"hiliteAccessKey",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ImgButton"
    },
    "method:WebService.getInputHeaderSchema":{
        ref:"method:WebService.getInputHeaderSchema",
        flags:"",
        description:" Get the schema for each part of the SOAP header for the input message of a given\n operation, as a mapping from part name to schema.  For example, given WSDL like:\n <pre>\n     &lt;soap:header part=\"SessionHeader\" message=\"tns:HeaderMessage\"/&gt;\n     &lt;soap:header part=\"CallOptions\" message=\"tns:HeaderMessage/&gt;\n </pre>\n The following schema would be returned:\n <pre>\n     { SessionHeader : <i>sessionHeaderPartSchema</i>,\n       CallOptions : <i>callOptionsPartSchema</i> }\n </pre>\n The schema are instances of ${isc.DocUtils.linkForRef('class:DataSource')} that can be inspected to discover the\n elements and types that are legal in that header part, and can construct a valid SOAP\n header part if ${isc.DocUtils.linkForRef('method:DataSource.xmlSerialize')} is invoked.\n \n",
        name:"getInputHeaderSchema",
        seeAlso:[],
        params:[
            {description:"name of an operation from this web service", optional:false, 
             name:"operationName",defaultValue:null, type:"String"}
        ],
        returns:{description:"mapping from partName to schema", type:"Object"},
        type:"method",
        definingClass:"class:WebService"
    },
    "attr:Slider.canFocus":{
        ref:"attr:Slider.canFocus",
        flags:"IRW",
        description:"Indicates whether keyboard manipulation of the slider is allowed.",
        name:"canFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Slider"
    },
    "attr:FormItem.valueIconHeight":{
        ref:"attr:FormItem.valueIconHeight",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:FormItem.valueIcons')} is specified, use this property to specify a height for the\n value icon written out.",
        name:"valueIconHeight",
        seeAlso:[
            {ref:"attr:FormItem.valueIconWidth", description:null},
            {ref:"attr:FormItem.valueIconSize", description:null}
        ],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["valueIcons"]
    },
    "method:FormItem.getOptionDataSource":{
        ref:"method:FormItem.getOptionDataSource",
        flags:"",
        description:" Returns the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} for this item. Default implementation\n will return the  ${isc.DocUtils.linkForRef('class:DataSource')} of this item's form if \n no explicit <code>optionDataSource</code> is specified.\n",
        name:"getOptionDataSource",
        seeAlso:[],
        type:"method",
        definingClass:"class:FormItem",
        groups:["display_values"]
    },
    "type:RPCCallback":{
        ref:"type:RPCCallback",
        treeLocation:["Client Reference/RPC"],
        description:"A ${isc.DocUtils.linkForRef('type:Callback')} to evaluate when an RPCRequest completes.\n <p>\n Parameters passed to this callback are:\n <ul>\n <li>rpcResponse: an ${isc.DocUtils.linkForRef('class:RPCResponse')} encapsulating the server response to your\n     request\n <li>data: just the \"data\" property from the RPCResponse, for convenience\n <li>rpcRequest: the ${isc.DocUtils.linkForRef('class:RPCRequest')} that was sent.  You can use\n     ${isc.DocUtils.linkForRef('attr:RPCRequest.clientContext')} to track state during the server turnaround.\n </ul>\n For example, to take the data returned by the server and display it in a previously created\n ListGrid with the ID \"myGrid\":\n <pre>\n     isc.RPCManager.send(\"getData\", \"myGrid.setData(data)\");\n </pre>\n Or\n <pre>\n     isc.RPCManager.send(\"getData\", function (rpcResponse, data, rpcRequest) { \n                                        myGrid.setData(data)\n                                    });\n </pre>",
        name:"RPCCallback",
        seeAlso:[
            {ref:"class:RPCRequest", description:null},
            {ref:"class:RPCResponse", description:null}
        ],
        type:"type"
    },
    "attr:ComboBoxItem.filterLocally":{
        ref:"attr:ComboBoxItem.filterLocally",
        flags:"IRA",
        description:"If <code>filterLocally</code> is set for this item, and this item is showing options \n from a dataSource, fetch the entire set of options from the server, and use these values\n to map the item value to the appropriate display value. Also use <code>\"local\"</code>\n type filtering on drop down list of options.<br>\n This means data will only be fetched once from the server, and then filtered on the\n client.",
        name:"filterLocally",
        seeAlso:[
            {ref:"attr:FormItem.filterLocally", description:null}
        ],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:ComboBoxItem"
    },
    "method:TabSet.tabDeselected":{
        ref:"method:TabSet.tabDeselected",
        flags:"",
        description:"  Notification fired when a tab is deselected.        \n",
        name:"tabDeselected",
        seeAlso:[],
        params:[
            {description:"number of the tab", optional:false, name:"tabNum", defaultValue:null, 
             type:"number"},
            {description:"pane for this tab", optional:false, name:"tabPane", defaultValue:null, 
             type:"Canvas"},
            {description:"id of the tab", optional:false, name:"ID", defaultValue:null, type:"id"},
            {description:"the tab object (not tab button instance)", optional:false, name:"tab", 
             defaultValue:null,type:"tab"}
        ],
        type:"method",
        definingClass:"class:TabSet"
    },
    "attr:EdgedCanvas.edgeOffsetBottom":{
        ref:"attr:EdgedCanvas.edgeOffsetBottom",
        flags:"IRA",
        description:"Amount the contained Canvas should be offset from the bottom.  Defaults to the size for\n the bottom edge.  Set smaller to allow the contained Canvas to overlap the edge and\n corner media.",
        name:"edgeOffsetBottom",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:EdgedCanvas",
        groups:["imageEdges"]
    },
    "classMethod:ClassFactory.getClass":{
        ref:"classMethod:ClassFactory.getClass",
        flags:"",
        description:"\n	Given a class name, return a pointer to the Class object for that class\n\n",
        name:"getClass",
        seeAlso:[],
        params:[
            {description:"name of a class", optional:false, name:"className", defaultValue:null, 
             type:"string"}
        ],
        returns:{description:"Class object, or null if not found", type:"Class"},
        type:"classMethod",
        definingClass:"object:ClassFactory"
    },
    "attr:PickList.displayField":{
        ref:"attr:PickList.displayField",
        flags:"IRW",
        getter:["FormItem.getDisplayFieldName"],
        description:"Specifies an alternative field from which display values should be retrieved for this\n item.<br>\n If this item is not databound (${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} is unset), or bound \n to the same dataSource as the form as a whole, this is implemented by picking up the\n value of the specified field from the Form's values object.<br>\n Otherwise this item will attempt to map its underlying value to a display value\n by retrieving a record from the ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')} where the \n ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} matches this item's value, and displaying the \n <code>displayField</code> value from that record.<br>\n This essentially enables the specified <code>optionDataSource</code> to be used as\n a server based ${isc.DocUtils.linkForRef('group:valueMap')}.",
        name:"displayField",
        seeAlso:[],
        valueType:"string",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList",
        groups:["display_values"]
    },
    "attr:Window.autoSize":{
        flags:"IRW",
        type:"attr",
        ref:"attr:Window.autoSize",
        description:"If true, the window is resize automatically to accommodate the contents\n			of the body, if they would otherwise require scrolling.",
        name:"autoSize",
        setter:["setAutoSize"],
        valueType:"boolean",
        seeAlso:[],
        examples:["${isc.DocUtils.linkForExampleId('windowAutosize')}"],
        defaultValue:"false",
        groups:["appearance"],
        definingClass:"class:Window"
    },
    "method:CubeGrid.setFacetTitle":{
        ref:"method:CubeGrid.setFacetTitle",
        flags:"",
        description:"\n      set the title of a facet (appears in facet label)\n\n      <br><i>methodType</i> setter\n",
        name:"setFacetTitle",
        seeAlso:[],
        params:[
            {description:"facet to update", optional:false, name:"facetId", defaultValue:null, type:"id"},
            {description:"title for the facet", optional:false, name:"newTitle", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["data_and_metadata"]
    },
    "attr:Img.imageType":{
        ref:"attr:Img.imageType",
        flags:"IRW",
        description:"Indicates whether the image should be tiled/cropped, stretched, or centered when the\n          size of this widget does not match the size of the image. See ImageStyle for\n          details",
        name:"imageType",
        setter:["setImageType"],
        seeAlso:[],
        valueType:"ImageStyle",
        defaultValue:"Img.STRETCH",
        type:"attr",
        definingClass:"class:Img",
        groups:["appearance"]
    },
    "classMethod:Page.isLoaded":{
        ref:"classMethod:Page.isLoaded",
        flags:"",
        description:"		Has the page finished loading?\n\n",
        name:"isLoaded",
        seeAlso:[],
        returns:{description:"true == page is done loading", type:"boolean"},
        type:"classMethod",
        definingClass:"class:Page"
    },
    "classMethod:Class.addClassProperties":{
        ref:"classMethod:Class.addClassProperties",
        flags:"",
        description:"\n	Add static (Class-level) properties and methods to this object<br><br>\n\n	These properties can then be accessed as MyClass.property, or for functions, called as\n  MyClass.methodName()\n\n",
        name:"addClassProperties",
        seeAlso:[],
        params:[
            {description:"objects with properties to add (think named parameters).										all the properties of each argument will be applied\n										as class-level properties.", 
             optional:true,name:"arguments 0-N", defaultValue:null, type:"object"}
        ],
        returns:{description:"the class after properties have been added to it", type:"object"},
        type:"classMethod",
        definingClass:"class:Class"
    },
    "attr:FacetValue.parentId":{
        ref:"attr:FacetValue.parentId",
        flags:"IRA",
        description:"For tree facets (${isc.DocUtils.linkForRef('attr:Facet.isTree','facet.isTree')}), id of this facetValue's\n parent facetValue.",
        name:"parentId",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:FacetValue"
    },
    "class:SectionStack":{
        methods:["method:SectionStack.addItem", "method:SectionStack.removeItem", 
         "method:SectionStack.addSection","method:SectionStack.removeSection", "method:SectionStack.getSections", 
         "method:SectionStack.reorderSection","method:SectionStack.moveSection", "method:SectionStack.showSection", 
         "method:SectionStack.expandSection","method:SectionStack.hideSection", "method:SectionStack.collapseSection", 
         "method:SectionStack.sectionIsVisible","method:SectionStack.getVisibleSections", "method:SectionStack.sectionIsExpanded", 
         "method:SectionStack.getExpandedSections","method:SectionStack.setSectionTitle", "method:SectionStack.getSectionHeader", 
         "method:SectionStack.getSectionNumber","method:SectionStack.sectionHeaderClick"],
        ref:"class:SectionStack",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:SectionStack.overflow", "attr:SectionStack.sectionHeaderClass", 
         "attr:SectionStack.headerHeight","attr:SectionStack.sections", "attr:SectionStack.canResizeSections", 
         "attr:SectionStack.canTabToHeaders","attr:SectionStack.scrollSectionIntoView", "attr:SectionStack.animateSections", 
         "attr:SectionStack.visibilityMode"],
        description:"A container that manages a list of sections of widgets, each with a header.  Sometimes called\n an \"Accordion\".\n <P>\n SectionStack can be configured so that only one section is visible at a time (similar to MS Outlook's\n left-hand Nav), or to allow multiple sections to be visible and share the available space.",
        name:"SectionStack",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('sectionsExpandCollapse')}"]
    },
    "method:WebService.getInputDS":{
        ref:"method:WebService.getInputDS",
        flags:"",
        description:" Get a DataSource representing the input message to a web service operation.\n <P>\n This DataSource is suitable for use as\n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','form.dataSource')} for a form that the user fills out\n when providing inputs to call this web service operation.\n\n",
        name:"getInputDS",
        seeAlso:[],
        params:[
            {description:"name of the web service operation whose inputs the                               returned DataSource will represent", 
             optional:false,name:"operationName", defaultValue:null, type:"String"}
        ],
        returns:{description:"DataSource representing the input message of a web service                      operation", 
         type:"DataSource"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('wsdlBinding')}"],
        definingClass:"class:WebService"
    },
    "classMethod:Page.checkBrowserAndRedirect":{
        ref:"classMethod:Page.checkBrowserAndRedirect",
        flags:"",
        description:"		Check that the browser is supported by the Isomorphic SmartClient system.\n      If not, redirect to specified URL. <br>\n      If no URL is passed in we will use <code>Page.defaultUnsupportedBrowserURL</code> as\n      a default.\n\n",
        name:"checkBrowserAndRedirect",
        seeAlso:[
            {ref:"classAttr:Page.defaultUnsupportedBrowserURL", description:null}
        ],
        params:[
            {description:"URL of redirect page. May include Isomorphic special directories such as [SKIN].", 
             optional:true,name:"URL", defaultValue:null, type:"string"}
        ],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "attr:Window.bodyColor":{
        ref:"attr:Window.bodyColor",
        flags:"IRW",
        description:"Color of the Window body. Overrides the background color specified in the style.",
        name:"bodyColor",
        seeAlso:[
            {ref:"method:Window.flash", description:null}
        ],
        valueType:"string",
        defaultValue:"\"#FFFFFF\"",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "type:treeGridOpenState":{
        ref:"type:treeGridOpenState",
        description:"An object containing the open state for a treeGrid.\n Note that this object is not intended to be interrogated directly, but may be stored \n (for example) as a blob on the server for state persistence across sessions.",
        name:"treeGridOpenState",
        seeAlso:[],
        type:"type",
        groups:["viewState"]
    },
    "method:DynamicForm.setValue":{
        ref:"method:DynamicForm.setValue",
        flags:"",
        description:"   Sets the value for some field\n",
        name:"setValue",
        seeAlso:[],
        params:[
            {description:"Name of the field being updated", optional:false, name:"fieldName", 
             defaultValue:null,type:"string"},
            {description:"New value.", optional:false, name:"value", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "classAttr:Validator.mustBeLessThan":{
        ref:"classAttr:Validator.mustBeLessThan",
        flags:"IRA",
        description:"Default error message to display when standard <code>integerRange</code> type validator\n  returns false because the value passed in is greater than the specified maximum.\n This is a dynamic string - text within <code>\\${...}</code> will be evaluated as JS code\n when the message is displayed, with <code>max</code> and <code>min</code> available as\n variables mapped to <code>validator.max</code> and <code>validator.min</code>.",
        name:"mustBeLessThan",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Must be no more than ${max}\"",
        type:"classAttr",
        definingClass:"class:Validator",
        groups:["i18nMessages"]
    },
    "method:FormItem.iconKeyPress":{
        ref:"method:FormItem.iconKeyPress",
        flags:"",
        description:"      StringMethod.\n      Default action to fire when an icon has keyboard focus and the user types a key.\n      May be overridden by setting <code>keyPress</code> on the form item icon directly.\n",
        name:"iconKeyPress",
        seeAlso:[],
        params:[
            {description:"name of the key pressed", optional:false, name:"keyName", defaultValue:null, 
             type:"string"},
            {description:"character produced by the keypress", optional:false, name:"character", 
             defaultValue:null,type:"character"},
            {description:"a pointer to this item's form", optional:false, name:"form", 
             defaultValue:null,type:"DynamicForm"},
            {description:"a pointer to this form item", optional:false, name:"item", defaultValue:null, 
             type:"FormItem"},
            {description:"a pointer to the icon that recieved the click event.", optional:false, 
             name:"icon",defaultValue:null, type:"FormItemIcon"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "method:ListGrid.willAcceptDrop":{
        ref:"method:ListGrid.willAcceptDrop",
        flags:"A",
        description:"\n This method overrides ${isc.DocUtils.linkForRef('method:Canvas.willAcceptDrop')} and works as follows:<br>\n <ul>\n <li>If ${isc.DocUtils.linkForRef('method:Canvas.willAcceptDrop')} (the superclass definition) returns false, this \n     method always returns false.</li>\n <li>If the dragTarget and dropTarget are the same, the user is dragging a record within\n     this list - this is an attempted drag-reorder. If ${isc.DocUtils.linkForRef('attr:ListGrid.canReorderRecords')} is \n     false, this method returns false.</li>\n <li>If the dragTarget is some other widget, and ${isc.DocUtils.linkForRef('attr:ListGrid.canAcceptDroppedRecords')} is \n     not <code>true</code> this method returns false.</li>\n <li>If a call to ${isc.DocUtils.linkForRef('method:ListGrid.getDragData')} on the <code>dragTarget</code> fails to return\n     an record object or an array of records, this method returns false.</li> \n <li>If a the drop target record is disabled or has ${isc.DocUtils.linkForRef('attr:ListGridRecord.canAcceptDrop')} \n     set to false, return false.</li>\n </ul>\n Note that this method may be called repeatedly during a drag-drop interaction to update the\n UI and notify the user as to when they may validly drop data.\n\n",
        name:"willAcceptDrop",
        seeAlso:[
            {ref:"attr:ListGridRecord.canAcceptDrop", description:null},
            {ref:"method:ListGrid.getDragData", description:null}
        ],
        returns:{description:"true if this component will accept a drop of the dragData", type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events", "dragging"]
    },
    "attr:Label.iconHeight":{
        ref:"attr:Label.iconHeight",
        flags:"IR",
        description:"Height in pixels of the icon image.\n <P>\n If unset, defaults to <code>iconSize</code>",
        name:"iconHeight",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "classMethod:XMLTools.loadXMLSchema":{
        ref:"classMethod:XMLTools.loadXMLSchema",
        flags:"A",
        description:" Load an XML file containing XML schema definitions and create DataSource and SimpleType\n objects to represent the schema.  You can use to loaded schema to bind ISC components,\n perform validation, create editing interfaces, and build other metadata-driven interfaces.\n <p>\n All &lt;xsd:complexType&gt; declarations become ISC DataSources, and all\n &lt;xsd:simpleType&gt; definitions become ISC atomic type definitions.  \n <p>\n By default, named complexType definitions and named element definitions containing\n complexTypes become global DataSources, that is, they can be fetched with\n ${isc.DocUtils.linkForRef('classMethod:DataSource.getDataSource')}.  Inline complexType definitions get\n automatically generated names.\n <p>\n Named simpleType declarations become global ISC atomic types, that is, subsequently defined\n DataSources can use them for ${isc.DocUtils.linkForRef('attr:DataSourceField.type')}.  XML schema \"restrictions\"\n for simple types are automatically translated to ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')} or\n ${isc.DocUtils.linkForRef('attr:DataSourceField.validators')} as appropriate.\n <P>\n The created SchemaSet object is available in the callback as the single parameter\n \"schemaSet\", or can retrieved via <code>SchemaSet.get(schemaNamespace)</code>.\n <P>\n NOTE: required fields: the XML concept of \"required\" for an attribute or subelement, \n expressed via use=\"required\" (for an attribute) or minOccurs > 0 (for a subelement), is\n that the attribute or element must be present in the XML document <i>but can have any\n value</i>, including being empty or null.  The SmartClient notion of required means\n non-null.  You can express the SmartClient notion of required in XML Schema with the\n combination of maxOccurs>0 and a minLength or length \"restriction\", and SmartClient \n will recognize the field as SmartClient-required, with all of the behaviors that implies\n (eg, specially styled form titles, automatic validation, etc).\n\n",
        name:"loadXMLSchema",
        seeAlso:[],
        params:[
            {description:"URL to load the schema from", optional:false, name:"schemaURL", 
             defaultValue:null,type:"URL"},
            {description:"signature is callback(schemaSet)", optional:false, name:"callback", 
             defaultValue:null,type:"Callback"}
        ],
        type:"classMethod",
        examples:["${isc.DocUtils.linkForExampleId('xmlSchemaImport')}"],
        definingClass:"class:XMLTools",
        groups:["xmlSchema"]
    },
    "attr:Menu.submenuDirection":{
        ref:"attr:Menu.submenuDirection",
        flags:"IRW",
        description:"Should submenus show up on our left or right. Can validly be set to <code>\"left\"</code>\n  or <code>\"right\"</code>",
        name:"submenuDirection",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"right\"",
        type:"attr",
        definingClass:"class:Menu"
    },
    "method:Tree.getChildren":{
        ref:"method:Tree.getChildren",
        flags:"",
        description:"\n Returns all children of a node.  If the node is a leaf, this method returns null.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getChildren",
        seeAlso:[],
        params:[
            {description:"The node whose children you want to fetch.", optional:false, name:"node", 
             defaultValue:null,type:"TreeNode"}
        ],
        returns:{description:"List of children for the node (empty List if node is a leaf                      or has no children)", 
         type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:ListGrid.neverValidate":{
        ref:"attr:ListGrid.neverValidate",
        flags:"IRWA",
        description:"If true, validation will not occur as a result of cell editing for this grid.",
        name:"neverValidate",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridValidation"]
    },
    "attr:CubeGrid.valueTitle":{
        ref:"attr:CubeGrid.valueTitle",
        flags:"IR",
        description:"A label for the data values shown in cells, such as \"Sales in Thousands\", typically used\n when the CubeGrid must generate a description for a cell value or set of cell values.\n <P>\n For example, in a CubeGrid showing \"Revenue\" by region and product, a cell with a\n CellRecord like:\n <pre> \n {product:\"chairs\", region:\"northwest\", _value:\"$5k\"}\n </pre>\n Should be described as \"Revenue for Charts for Northwest Region\", not \"Chairs for\n Revenue for Northwest Region\".\n <P>\n For CubeGrids that show multiple types of values at once (eg both \"Revenue\" and\n \"Income\") see ${isc.DocUtils.linkForRef('attr:CubeGrid.metricFacetId')}.",
        name:"valueTitle",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid"
    },
    "attr:DateChooser.showDoubleYearIcon":{
        ref:"attr:DateChooser.showDoubleYearIcon",
        flags:"IRW",
        description:"If this property is set to true the previous and next year buttons will render out the \n previous and next month button icons twice rather than using the\n ${isc.DocUtils.linkForRef('attr:DateChooser.prevYearIcon')} and ${isc.DocUtils.linkForRef('attr:DateChooser.nextYearIcon')}.\n <P>\n Set to <code>true</code> by default as not all skins contain media for the year icons.",
        name:"showDoubleYearIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:DateChooser"
    },
    "attr:Flashlet.codeBase":{
        ref:"attr:Flashlet.codeBase",
        flags:"IR",
        description:"This attribute specifies the minimum version of the flash player required to show this\n  flashlet.\n  <p>\n  The default codeBase is: \"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0\"\n  <p>",
        name:"codeBase",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:Flashlet"
    },
    "classMethod:isA.Date":{
        ref:"classMethod:isA.Date",
        flags:"",
        description:"\n	Is <code>object</code> a Date object?\n\n",
        name:"Date",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a Date", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "classMethod:Page.getScrollWidth":{
        ref:"classMethod:Page.getScrollWidth",
        flags:"",
        description:"		Get the width of the window contents as they have been drawn.\n		If the page scrolls, this may be larger than the page.getWidth().\n",
        name:"getScrollWidth",
        seeAlso:[],
        returns:{description:"width of the page as drawn", type:"number"},
        type:"classMethod",
        definingClass:"class:Page",
        groups:["sizing"]
    },
    "attr:DynamicForm.itemHoverWidth":{
        ref:"attr:DynamicForm.itemHoverWidth",
        flags:"IRW",
        description:"A default width for hovers shown for items",
        name:"itemHoverWidth",
        seeAlso:[
            {ref:"attr:FormItem.hoverWidth", description:null}
        ],
        valueType:"measure",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('itemHoverHTML')}"],
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "method:Array.addListAt":{
        ref:"method:Array.addListAt",
        flags:"",
        description:" Add list of items list to this array at item pos.  All items after array[pos] will slide down to\n fit new items.\n\n",
        name:"addListAt",
        seeAlso:[],
        params:[
            {description:"new array of items", optional:false, name:"list", defaultValue:null, 
             type:"array"},
            {description:"position in this list to put the new items", optional:false, name:"pos", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"the list of items that was added", type:"array"},
        type:"method",
        definingClass:"object:Array",
        groups:["modification"]
    },
    "attr:Button.hiliteAccessKey":{
        ref:"attr:Button.hiliteAccessKey",
        flags:"IRW",
        description:"If set to true, if the ${isc.DocUtils.linkForRef('attr:StatefulCanvas.title','title')} of this button contains the\n specified ${isc.DocUtils.linkForRef('attr:Canvas.accessKey','accessKey')}, when the title is displayed to the user\n it will be modified to include HTML to underline the accessKey.<br>\n Note that this property may cause titles that include HTML (rather than simple strings)\n to be inappropriately modified, so should be disabled if your title string includes\n HTML characters.",
        name:"hiliteAccessKey",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Button"
    },
    "method:Canvas.getHeight":{
        ref:"method:Canvas.getHeight",
        flags:"",
        description:" Return the height of this object, in pixels.\n",
        name:"getHeight",
        seeAlso:[],
        returns:{description:"height", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:DynamicForm.valuesHaveChanged":{
        ref:"method:DynamicForm.valuesHaveChanged",
        flags:"",
        description:"          Compares the current set of values with the values stored by the call to the\n          <code>rememberValues()</code> method. Returns true if the values have changed, and false\n          otherwise.\n",
        name:"valuesHaveChanged",
        seeAlso:[],
        returns:{description:"true if current values do not match remembered values", type:"boolean"},
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["formValues"]
    },
    "attr:ButtonItem.startRow":{
        ref:"attr:ButtonItem.startRow",
        flags:"IRW",
        description:"These items are in a row by themselves by default",
        name:"startRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ButtonItem",
        groups:["formLayout"]
    },
    "attr:ResultSet.allRows":{
        ref:"attr:ResultSet.allRows",
        flags:"IA",
        description:"If the complete set of records for a resultSet is available when the resultSet is created,\n it can be made available to the resultSet via this property at initialization time.\n This data will then be considered cached meaning sorting and filtering can occur on\n the client (no need for server fetch).\n This cached data can be dropped via a call to ${isc.DocUtils.linkForRef('method:ResultSet.invalidateCache')}.",
        name:"allRows",
        seeAlso:[],
        valueType:"Array of records",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ResultSet",
        groups:["fetching", "cacheSync"]
    },
    "object:SectionStackSection":{
        methods:[],
        ref:"object:SectionStackSection",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/SectionStack"],
        attrs:["attr:SectionStackSection.ID", "attr:SectionStackSection.title", 
         "attr:SectionStackSection.items","attr:SectionStackSection.showHeader", "attr:SectionStackSection.resizeable", 
         "attr:SectionStackSection.expanded","attr:SectionStackSection.hidden", "attr:SectionStackSection.canCollapse"],
        description:"Section descriptor used by a SectionStack to describe a section of items which are shown\n or hidden together, and their associated header.",
        name:"SectionStackSection",
        seeAlso:[],
        type:"object"
    },
    "method:ListGrid.editorEnter":{
        ref:"method:ListGrid.editorEnter",
        flags:"A",
        description:" Callback fired when the user starts editing a new cell.\n <P>\n This callback is typically used to establish dynamic default values via\n ${isc.DocUtils.linkForRef('method:ListGrid.setEditValue')} or ${isc.DocUtils.linkForRef('method:ListGrid.setEditValues')}.\n <P>\n Can also be overriden on a per-field basis by setting <code>field.editorEnter</code>.\n\n",
        name:"editorEnter",
        seeAlso:[
            {ref:"method:ListGridField.editorEnter", description:null}
        ],
        params:[
            {description:"record for the cell being edited", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"value for the cell being edited", optional:false, name:"value", 
             defaultValue:null,type:"any"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:CubeGrid.editByCell":{
        ref:"attr:CubeGrid.editByCell",
        flags:"R",
        description:"CubeGrids only support editing by cell",
        name:"editByCell",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["cellEditing"]
    },
    "group:layoutMargin":{
        ref:"group:layoutMargin",
        refs:["method:Layout.setLayoutMargin", "attr:Layout.paddingAsLayoutMargin", 
         "attr:Layout.layoutMargin","attr:Layout.layoutLeftMargin", "attr:Layout.layoutRightMargin", 
         "attr:Layout.layoutTopMargin","attr:Layout.layoutBottomMargin", "attr:Layout.membersMargin"],
        name:"layoutMargin",
        seeAlso:[],
        type:"group"
    },
    "attr:SVG.pluginsPage":{
        ref:"attr:SVG.pluginsPage",
        flags:"IR",
        description:"This attribute specifies the page the user should go to to get the plugin required to view\n  this SVG.\n  <p>\n  The default pluginsPage is: \"http://www.adobe.com/svg/viewer/install/\"\n  <p>",
        name:"pluginsPage",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"see below",
        type:"attr",
        definingClass:"class:SVG"
    },
    "method:Canvas.removePeer":{
        ref:"method:Canvas.removePeer",
        flags:"",
        description:" Remove a peer from this Canvas\n",
        name:"removePeer",
        seeAlso:[],
        params:[
            {description:"Peer to be removed from this canvas", optional:false, name:"peer", 
             defaultValue:null,type:"Canvas instance"},
            {description:"If this peer was assigned a name it should be passed in here to ensure                      canvas[name] is cleared out", 
             optional:true,name:"name", defaultValue:null, type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["containment"]
    },
    "method:CubeGrid.getCellRow":{
        ref:"method:CubeGrid.getCellRow",
        flags:"",
        description:" Given a record in this grid, this method returns the rowNum on which the record is displayed.\n",
        name:"getCellRow",
        seeAlso:[],
        params:[
            {description:"record to find coordinates for", optional:false, name:"cellRecord", 
             defaultValue:null,type:"record"}
        ],
        returns:{description:"Row number for the record. Returns -1 if the record is not found.", 
         type:"integer"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "group:arrayMath":{
        ref:"group:arrayMath",
        title:"Array Math",
        refs:["method:List.intersect", "method:Array.intersect", "method:Array.max", "method:Array.min", 
         "method:Array.sum","method:Array.and", "method:Array.or"],
        description:"Math operations on entire Arrays at once",
        name:"arrayMath",
        seeAlso:[],
        type:"group"
    },
    "method:GridRenderer.getBaseStyle":{
        ref:"method:GridRenderer.getBaseStyle",
        flags:"A",
        description:" Return the base stylename for this cell.  Default implementation just returns this.baseStyle.\n See getCellStyle for a general discussion of how to style cells.\n\n",
        name:"getBaseStyle",
        seeAlso:[
            {ref:"method:GridRenderer.getCellStyle", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS class for this cell", type:"CSSStyleName"},
        type:"method",
        definingClass:"class:GridRenderer"
    },
    "method:ListGrid.getEditorValueIcons":{
        ref:"method:ListGrid.getEditorValueIcons",
        flags:"",
        description:" Returns the valueIcons for a field when it is displayed in the editor while editing some\n record. Default implementation will return ${isc.DocUtils.linkForRef('attr:ListGridField.editorValueIcons')} if specified\n otherwise ${isc.DocUtils.linkForRef('attr:ListGridField.valueIcons')}\n",
        name:"getEditorValueIcons",
        seeAlso:[],
        params:[
            {description:"field definition", optional:false, name:"field", defaultValue:null, 
             type:"object"},
            {description:"current edit values for the record", optional:false, name:"vaules", 
             defaultValue:null,type:"object"}
        ],
        returns:{description:"valueIcons for the editor", type:"object"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:MenuBar.menus":{
        ref:"attr:MenuBar.menus",
        flags:"IRW",
        description:"An array of menu object initializers or instantiated menu objects. Buttons for each\n menu item will automatically be created. See the Menu Widget Class for fundamental\n menu properties and other properties.  Titles for the buttons are derived from the \n <code>title</code> property of each menu.",
        name:"menus",
        setter:["setMenus"],
        seeAlso:[
            {ref:"class:Menu", description:null}
        ],
        valueType:"Array of Menu",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MenuBar"
    },
    "attr:Chart.stacked":{
        ref:"attr:Chart.stacked",
        flags:"IR",
        description:"Whether to use stacking for charts that support this (eg bar and column charts).\n If stacked is not set and two facets are supplied, clustering is assumed.",
        name:"stacked",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"interface:Chart"
    },
    "attr:Label.iconSpacing":{
        ref:"attr:Label.iconSpacing",
        flags:"IR",
        description:"Pixels between icon and title text.",
        name:"iconSpacing",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"6",
        type:"attr",
        definingClass:"class:Label",
        groups:["buttonIcon"]
    },
    "attr:Window.showTitle":{
        ref:"attr:Window.showTitle",
        flags:"IRW",
        description:"Show a title (typically just text) on the header for this window.",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "headerLabel"]
    },
    "method:Layout.getMemberNumber":{
        ref:"method:Layout.getMemberNumber",
        flags:"",
        description:"\n Given a member Canvas or member ID, return the index of that member within this\n layout's members array\n <p>\n If passed a number, just returns it.\n\n",
        name:"getMemberNumber",
        seeAlso:[
            {ref:"method:Layout.getMember", description:null}
        ],
        params:[
            {description:"identifier for the required member", optional:false, name:"memberID", 
             defaultValue:null,type:"string | Canvas | number"}
        ],
        returns:{description:"index of the member canvas (or -1 if not found)", type:"number"},
        type:"method",
        definingClass:"class:Layout"
    },
    "classMethod:Page.scrollTo":{
        ref:"classMethod:Page.scrollTo",
        flags:"",
        description:"		Scroll the window to a specified top and left coordinate.\n\n",
        name:"scrollTo",
        seeAlso:[],
        params:[
            {description:"new left coordinate for window", optional:false, name:"left", 
             defaultValue:null,type:"number"},
            {description:"new top coordinate for window", optional:false, name:"top", defaultValue:null, 
             type:"number"}
        ],
        type:"classMethod",
        definingClass:"class:Page"
    },
    "method:ValuesManager.removeMembers":{
        ref:"method:ValuesManager.removeMembers",
        flags:"",
        description:"  Remove multiple member forms from this valuesManager.\n",
        name:"removeMembers",
        seeAlso:[
            {ref:"method:ValuesManager.removeMember", description:null}
        ],
        params:[
            {description:"array of forms to remove", optional:false, name:"members", defaultValue:null, 
             type:"array"}
        ],
        type:"method",
        definingClass:"class:ValuesManager",
        groups:["members"]
    },
    "method:Canvas.getScrollBottom":{
        ref:"method:Canvas.getScrollBottom",
        flags:"",
        description:" Returns the scrollTop required to scroll vertically to the end of this widget's content.\n",
        name:"getScrollBottom",
        seeAlso:[],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "method:Canvas.scrollBy":{
        ref:"method:Canvas.scrollBy",
        flags:"",
        description:"  Scroll this widget by some pixel increment in either (or both) direction(s).\n\n",
        name:"scrollBy",
        seeAlso:[],
        params:[
            {description:"Number of pixels to scroll horizontally", optional:false, name:"dX", 
             defaultValue:null,type:"number"},
            {description:"Number of pixels to scroll vertically", optional:false, name:"dY", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["scrolling"]
    },
    "attr:GridHilite.htmlBefore":{
        ref:"attr:GridHilite.htmlBefore",
        flags:"IR",
        description:"HTML to prepend to cell values where this hilite is applied.",
        name:"htmlBefore",
        seeAlso:[],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:GridHilite"
    },
    "attr:FormItem.iconHeight":{
        ref:"attr:FormItem.iconHeight",
        flags:"IRWA",
        getter:["getIconHeight"],
        description:"Default height for form item icons",
        name:"iconHeight",
        seeAlso:[],
        valueType:"number",
        defaultValue:"20",
        type:"attr",
        definingClass:"class:FormItem",
        groups:["formIcons"]
    },
    "method:Layout.getMemberDefaultBreadth":{
        ref:"method:Layout.getMemberDefaultBreadth",
        flags:"A",
        description:" Return the breadth for a member of this layout which either didn't specify a breadth or\n specified a percent breadth with ${isc.DocUtils.linkForRef('attr:Layout.managePercentBreadth')}:true.\n <P>\n Called only for Layouts which have a ${isc.DocUtils.linkForRef('type:LayoutPolicy','layout policy')} for the breadth\n axis of \"fill\", since Layouts with a breadth policy of \"none\" leave all member breadths alone.\n\n",
        name:"getMemberDefaultBreadth",
        seeAlso:[],
        params:[
            {description:"Component to be sized", optional:false, name:"member", defaultValue:null, 
             type:"Canvas"},
            {description:"Value of the currently calculated member breadth. This      may be returned verbatim or manipulated in this method.", 
             optional:false,name:"defaultBreadth", defaultValue:null, type:"Number"}
        ],
        type:"method",
        definingClass:"class:Layout",
        groups:["layoutMember"]
    },
    "method:Layout.removeMembers":{
        ref:"method:Layout.removeMembers",
        flags:"",
        description:"\n  Removes the specified members from the layout. If any of the removed members have resize\n  bars, the bars will be destroyed.\n\n",
        name:"removeMembers",
        seeAlso:[],
        params:[
            {description:"array of members to be removed, or reference to single 	                                    member.", 
             optional:false,name:"members", defaultValue:null, type:"Array or canvas"}
        ],
        type:"method",
        definingClass:"class:Layout"
    },
    "attr:SVG.src":{
        ref:"attr:SVG.src",
        flags:"IR",
        description:"Location from which to load the SVG.\n  <p>\n  Note: if you do not specify a src value, ISC will load the special svg 'svgCanvas.svg' from\n  the helpers directory.  This SVG is simply an empty root element - essentially a blank\n  canvas.  You can use this feature to write components that programmatically manipulate the\n  SVG DOM without needing to ship placeholder SVG files.\n  <p>",
        name:"src",
        seeAlso:[],
        valueType:"URL",
        defaultValue:"[HELPERS]svgCanvas.svg",
        type:"attr",
        definingClass:"class:SVG"
    },
    "class:ImgSectionHeader":{
        methods:[],
        ref:"class:ImgSectionHeader",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout/SectionStack"],
        attrs:["attr:ImgSectionHeader.background"],
        description:"SectionHeader class based on an HLayout with ${isc.DocUtils.linkForRef('class:StretchImg')} background.",
        name:"ImgSectionHeader",
        seeAlso:[],
        type:"class"
    },
    "method:ListGrid.cellHasChanges":{
        ref:"method:ListGrid.cellHasChanges",
        flags:"",
        description:" If this listGrid can be edited, this method will return true if the cell passed in has been\n edited, but the edits have not yet been saved to the ListGrid's data object.\n",
        name:"cellHasChanges",
        seeAlso:[],
        params:[
            {description:"index of row to check for changes", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"},
            {description:"index of the col to check for changes", optional:false, name:"colNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["editing"]
    },
    "attr:CubeGrid.styleName":{
        ref:"attr:CubeGrid.styleName",
        flags:"IRW",
        description:"CSS class for the CubeGrid as a whole",
        name:"styleName",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"normal\"",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["appearance"]
    },
    "classMethod:Log.getDefaultLogPriority":{
        ref:"classMethod:Log.getDefaultLogPriority",
        flags:"",
        description:" Retrieves the default priority of messages for this class or instance.\n",
        name:"getDefaultLogPriority",
        seeAlso:[],
        returns:{description:"default priority for logging messages on this object.", type:"LogPriority"},
        type:"classMethod",
        definingClass:"class:Log"
    },
    "group:formTitles":{
        ref:"group:formTitles",
        title:"Form Titles",
        refs:["attr:DynamicForm.titleOrientation", "attr:DynamicForm.titlePrefix", 
         "attr:DynamicForm.rightTitlePrefix","attr:DynamicForm.titleSuffix", "attr:DynamicForm.rightTitleSuffix", 
         "attr:DynamicForm.titleWidth","attr:DynamicForm.wrapItemTitles", "attr:DynamicForm.hiliteRequiredFields", 
         "attr:DynamicForm.requiredTitlePrefix","attr:DynamicForm.requiredRightTitlePrefix", "attr:DynamicForm.requiredTitleSuffix", 
         "attr:DynamicForm.requiredRightTitleSuffix","type:TitleOrientation"],
        description:"Properties that affect form item title placement and styling.",
        name:"formTitles",
        seeAlso:[],
        type:"group"
    },
    "attr:PickTreeItem.valueTree":{
        ref:"attr:PickTreeItem.valueTree",
        flags:"IR",
        description:"A ${isc.DocUtils.linkForRef('class:Tree')} of options from which the user can select.",
        name:"valueTree",
        seeAlso:[],
        valueType:"tree",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('pickTree')}"],
        definingClass:"class:PickTreeItem"
    },
    "method:List.findNextIndex":{
        ref:"method:List.findNextIndex",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}, but inspects a range from startIndex to endIndex.\n\n",
        name:"findNextIndex",
        seeAlso:[],
        params:[
            {description:"first index to consider", optional:false, name:"startIndex", 
             defaultValue:null,type:"int"},
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"},
            {description:"last index to consider", optional:true, name:"endIndex", defaultValue:null, 
             type:"int"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"interface:List",
        groups:["access", "find"]
    },
    "attr:Tab.pane":{
        ref:"attr:Tab.pane",
        flags:"IRW",
        description:"Specifies the pane associated with this tab.  You have two options for the value of\n the pane attribute:\n <ul>\n <li><b>ID</b> - The global ID of an already created Canvas (or subclass).\n <li><b>Canvas</b> - A live instance of a Canvas (or subclass).\n </ul>\n You can change the pane associated with a given tab after the TabSet has been created by\n calling ${isc.DocUtils.linkForRef('method:TabSet.updateTab')}.",
        name:"pane",
        seeAlso:[
            {ref:"method:TabSet.updateTab", description:null}
        ],
        valueType:"ID or Canvas",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:Tab"
    },
    "classMethod:Time.toShortTime":{
        ref:"classMethod:Time.toShortTime",
        flags:"",
        description:" Given a date object, return the time associated with the date as a short string.\n If no formatter is passed, use the standard formatter set up via ${isc.DocUtils.linkForRef('classMethod:Time.setShortDisplayFormat')}\n",
        name:"toShortTime",
        seeAlso:[],
        params:[
            {description:"Date to convert to a time string.", optional:false, name:"date", 
             defaultValue:null,type:"Date"},
            {description:"Optional custom formatter to use. Will accept  a function (which will be passed a pointer to the Date to format), or\n  a string designating a standard formatter", 
             optional:true,name:"formatter", defaultValue:null, type:"timeFormatter|function"}
        ],
        type:"classMethod",
        definingClass:"class:Time"
    },
    "method:Progressbar.percentChanged":{
        ref:"method:Progressbar.percentChanged",
        flags:"A",
        description:" This method is called when the percentDone value changes. Observe this method to be notified upon\n a change to the percentDone value.\n\n",
        name:"percentChanged",
        seeAlso:[
            {ref:"method:Class.observe", description:null}
        ],
        type:"method",
        definingClass:"class:Progressbar"
    },
    "attr:DynamicForm.titleSuffix":{
        ref:"attr:DynamicForm.titleSuffix",
        flags:"IRW",
        description:"The string appended to the title of every item in this form.",
        name:"titleSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"&nbsp;:\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "method:DynamicForm.editRecord":{
        ref:"method:DynamicForm.editRecord",
        flags:"",
        description:"\n Edit an existing record.  Updates this editors values to match the values of the record \n passed in.\n <P>\n Subsequent calls to <code>saveData()</code> will use an <code>update</code> rather than\n an <code>add</code> operation.\n\n",
        name:"editRecord",
        seeAlso:[
            {ref:"method:DynamicForm.saveData", description:null}
        ],
        params:[
            {description:"the record to be edited as a map of field names to their corresponding values", 
             optional:false,name:"record", defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:DynamicForm",
        groups:["dataBoundComponentMethods"]
    },
    "group:events":{
        ref:"group:events",
        refs:["method:GridRenderer.getEventRow", "method:GridRenderer.getEventColumn", 
         "method:GridRenderer.getNearestRowToEvent","method:GridRenderer.getNearestColToEvent", "method:GridRenderer.cellOut", 
         "method:GridRenderer.cellOver","method:GridRenderer.rowOut", "method:GridRenderer.rowOver", 
         "method:GridRenderer.cellContextClick","method:GridRenderer.rowContextClick", "method:GridRenderer.cellMouseDown", 
         "method:GridRenderer.rowMouseDown","method:GridRenderer.cellMouseUp", "method:GridRenderer.rowMouseUp", 
         "method:GridRenderer.cellClick","method:GridRenderer.cellDoubleClick", "method:GridRenderer.rowClick", 
         "method:GridRenderer.rowDoubleClick","method:GridRenderer.cellHover", "method:GridRenderer.rowHover", 
         "method:GridRenderer.cellHoverHTML","method:ListGrid.cellOver", "method:ListGrid.rowOver", "method:ListGrid.cellOut", 
         "method:ListGrid.rowOut","method:ListGrid.cellHover", "method:ListGrid.rowHover", "method:ListGrid.cellHoverHTML", 
         "method:ListGrid.cellContextClick","method:ListGrid.rowContextClick", "method:ListGrid.cellMouseDown", 
         "method:ListGrid.rowMouseDown","method:ListGrid.cellMouseUp", "method:ListGrid.rowMouseUp", "method:ListGrid.cellClick", 
         "method:ListGrid.cellDoubleClick","method:ListGridField.recordClick", "method:ListGridField.recordDoubleClick", 
         "method:ListGrid.rowClick","method:ListGrid.rowDoubleClick", "method:ListGrid.recordClick", 
         "method:ListGrid.recordDoubleClick","method:ListGrid.willAcceptDrop", "method:ListGrid.getEventRow", 
         "method:ListGrid.getEventColumn","method:TreeGrid.getEventRow", "method:TreeGrid.getDropFolder", 
         "method:CubeGrid.getEventRow","method:CubeGrid.getEventColumn", "method:CubeGrid.facetValueOver", 
         "method:CubeGrid.facetValueOut","method:CubeGrid.facetValueHover", "method:CubeGrid.facetValueContextClick", 
         "method:CubeGrid.facetLabelOver","method:CubeGrid.facetLabelOut", "method:CubeGrid.facetLabelHover", 
         "method:Canvas.containsEvent","method:Canvas.getOffsetX", "method:Canvas.getOffsetY", "method:Canvas.shouldDragScroll", 
         "attr:GridRenderer.canSelectOnRightMouse","attr:GridRenderer.canHover", "attr:GridRenderer.showHover", 
         "attr:ListGrid.arrowKeyAction","attr:Canvas.canSelectText", "attr:Canvas.canFocus", 
         "attr:Canvas.mouseStillDownInitialDelay","attr:Canvas.mouseStillDownDelay", "attr:Canvas.doubleClickDelay", 
         "attr:Canvas.noDoubleClicks"],
        description:"Handling mouse and keyboard events generated by the user",
        name:"events",
        seeAlso:[],
        type:"group"
    },
    "attr:DataBoundComponent.fields":{
        ref:"attr:DataBoundComponent.fields",
        flags:"IRW",
        description:"A DataBoundComponent manipulates records with one or more fields, and\n <code>component.fields</code> tells the DataBoundComponent which fields to present, in what\n order, and how to present each field.\n <p>\n When both <code>component.fields</code> and \n <code>${isc.DocUtils.linkForRef('attr:DataBoundComponent.dataSource','component.dataSource')}</code> are set,\n any fields in <code>component.fields</code> with the same name as a DataSource field\n inherit properties of the DataSource field.  This allows you to centralize data model\n information in the DataSource, but customize presentation of DataSource fields on a\n per-component basic.  For example, in a ListGrid, a shorter title or format for a field\n might be chosen to save space.\n <p>\n By default, only fields specified on the component are shown, in the order specified on\n the component.  The ${isc.DocUtils.linkForRef('attr:DataBoundComponent.useAllDataSourceFields')} flag can be set to show all fields\n from the DataSource, with <code>component.fields</code> acting as field-by-field\n overrides and/or additional fields.\n <p>\n If a DataBoundComponent is given a DataSource, but no <code>component.fields</code>, the\n \"default binding\" is used: fields are shown in DataSource order, according\n to the properties <code>${isc.DocUtils.linkForRef('attr:DataBoundComponent.showHiddenFields')}</code> and \n <code>${isc.DocUtils.linkForRef('attr:DataBoundComponent.showDetailFields')}</code>.",
        name:"fields",
        seeAlso:[],
        valueType:"Array of Field",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('mergedFields')}", 
         "${isc.DocUtils.linkForExampleId('validationFieldBinding')}"],
        definingClass:"interface:DataBoundComponent",
        groups:["databinding"]
    },
    "group:dragging":{
        ref:"group:dragging",
        refs:["method:ListGrid.willAcceptDrop", "method:ListGrid.transferSelectedData", 
         "method:ListGrid.getDragData","method:TreeGrid.transferSelectedData", "method:Canvas.shouldDragScroll", 
         "attr:ListGrid.canDragRecordsOut","attr:ListGrid.canAcceptDroppedRecords", "attr:ListGrid.canReorderRecords", 
         "attr:ListGrid.canReorderFields","attr:ListGrid.canResizeFields", "attr:ListGrid.resizeFieldsInRealTime", 
         "attr:ListGrid.dragDataAction","attr:Canvas.canDragScroll", "attr:Canvas.dragScrollDelay", 
         "attr:Window.canDragReposition","attr:Window.canDragResize", "attr:Window.showResizer"],
        description:null,
        name:"dragging",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.imageSize":{
        ref:"attr:ListGrid.imageSize",
        flags:"IRW",
        description:"Default size of thumbnails shown for fieldTypes image and imageFile.  Overrideable on a\n per-field basis via ${isc.DocUtils.linkForRef('attr:ListGridField.imageSize')} or\n ${isc.DocUtils.linkForRef('attr:ListGridField.imageWidth')}/${isc.DocUtils.linkForRef('attr:ListGridField.imageHeight')}",
        name:"imageSize",
        seeAlso:[],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["imageColumns"]
    },
    "attr:Canvas.edgeImage":{
        ref:"attr:Canvas.edgeImage",
        flags:"IR",
        description:"Base name of images for edges.  Extensions for each corner or edge piece will be added\n to this image URL, before the extension.  For example, with the default base name of\n \"edge.gif\", the top-left corner image will be \"edge_TL.gif\".\n <P>\n The full list of extensions is: \"_TL\", \"_TR\", \"_BL\", \"_BR\", \"_T\", \"_L\", \"_B\", \"_R\",\n \"_center\".",
        name:"edgeImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]edge.gif\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('edges')}"],
        definingClass:"class:Canvas",
        groups:["imageEdges"]
    },
    "method:Array.findAll":{
        ref:"method:Array.findAll",
        flags:"",
        description:" Find all objects where property == value in the object.\n <P>\n Pass an Object as the <code>propertyName</code> argument to match multiple properties.\n\n",
        name:"findAll",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"all matching Objects or null if none found", type:"Array"},
        type:"method",
        definingClass:"object:Array",
        groups:["access", "find"]
    },
    "classMethod:isc.getIconTop":{
        ref:"classMethod:isc.getIconTop",
        flags:"A",
        description:"  Returns the (offset) top-coordinate of an icon within its containing widget.\n",
        name:"getIconTop",
        seeAlso:[],
        params:[
            {description:"icon definition", optional:false, name:"icon", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"icon top position in px", type:"number"},
        type:"method",
        definingClass:"class:isc"
    },
    "type:Cursor":{
        ref:"type:Cursor",
        values:[
            {description:"Use the default arrow cursor for this browser/OS.", value:"Canvas.DEFAULT"},
            {description:"Use the default cursor for this element type in this browser/OS", 
             value:"Canvas.AUTO"},
            {description:"Use the wait cursor.", value:"Canvas.WAIT"},
            {description:"Use the hand cursor.", value:"Canvas.HAND"},
            {description:"Use the \"move\" (crosshairs) cursor.", value:"Canvas.MOVE"},
            {description:"Use the 'help' cursor.", value:"Canvas.HELP"},
            {description:"Use the 'text' (i-beam) cursor.", value:"Canvas.TEXT"},
            {description:"Use the 'crosshair' ( + ) cursor.", value:"Canvas.CROSSHAIR"},
            {description:"Use the column resize cursor (horizontal double-tipped arrow)", 
             value:"\"col-resize\""},
            {description:"Use the row resize cursor (vertical double-tipped arrow)", 
             value:"\"row-resize\""},
            {description:"Use the \"east resize\" cursor.", value:"\"e-resize\""},
            {description:"Use the \"west resize\" cursor.", value:"\"w-resize\""},
            {description:"Use the \"north resize\" cursor.", value:"\"n-resize\""},
            {description:"Use the \"south resize\" cursor.", value:"\"s-resize\""},
            {description:"Use the \"south-east resize\" cursor.", value:"\"se-resize\""},
            {description:"Use the \"north-east resize\" cursor.", value:"\"ne-resize\""},
            {description:"Use the \"north-west resize\" cursor.", value:"\"nw-resize\""},
            {description:"Use the \"south-west resize\" cursor.", value:"\"sw-resize\""},
            {description:"Use the \"not-allowed\" cursor.", value:"\"not-allowed\""}
        ],
        description:"You can use whatever cursors are valid for your deployment platforms, but keep in mind that\n visual representation may vary by browser and OS.",
        name:"Cursor",
        seeAlso:[
            {ref:"attr:Canvas.cursor", description:null}
        ],
        type:"type",
        examples:["${isc.DocUtils.linkForExampleId('cursors')}"],
        groups:["cues"]
    },
    "type:Alignment":{
        ref:"type:Alignment",
        values:[
            {description:"Center within container.", value:"Canvas.CENTER"},
            {description:"Stick to left side of container.", value:"Canvas.LEFT"},
            {description:"Stick to right side of container.", value:"Canvas.RIGHT"}
        ],
        description:null,
        name:"Alignment",
        seeAlso:[],
        type:"type",
        groups:["appearance"]
    },
    "attr:TabSet.tabBarControls":{
        ref:"attr:TabSet.tabBarControls",
        flags:"IRA",
        description:"This property determines what controls should show up after the tabBar for this tabSet.\n Standard controls can be included using the strings <code>\"tabScroller\"</code> and \n <code>\"tabPicker\"</code>. These show the standard controls to scroll to clipped tabs, \n or pick them directly from a menu, and show up only if ${isc.DocUtils.linkForRef('attr:TabSet.showTabScroller')} or\n  ${isc.DocUtils.linkForRef('attr:TabSet.showTabPicker')} is true and there is not enough space available to show all \n the tabs in the tab-bar.<br>\n Additional controls can be included by adding any widget to this array.\n Controls will show up in the order in which they are specified.",
        name:"tabBarControls",
        seeAlso:[],
        valueType:"Array",
        defaultValue:"[\"tabScroller\", \"tabPicker\"]",
        type:"attr",
        definingClass:"class:TabSet",
        groups:["tabBarControls"]
    },
    "method:List.sortByProperty":{
        ref:"method:List.sortByProperty",
        flags:"",
        description:" Sort a list of objects by a given property of each item.\n <P>\n The optional normalizer, if passed as a function, is called for each item in the List, and\n should return whatever value should be used for sorting, which does not have to agree with\n the property value. By passing a normalizer function you can achieve any kind of sorting\n you'd like, including sorting by multiple properties.\n <P>\n NOTE: string sort is case INsensitive by default\n\n",
        name:"sortByProperty",
        seeAlso:[],
        params:[
            {description:"name of the property to sort by", optional:false, name:"property", 
             defaultValue:null,type:"string"},
            {description:"true == sort ascending, false == sort descending", optional:false, name:"up", 
             defaultValue:null,type:"boolean"},
            {description:"May be specified as a function, with signature \n              <code>normalize(item, propertyName, context)</code>, where <code>item</code> is\n              a pointer to the item in the array, <code>propertyName</code> is the \n              property by which the array is being sorted, and <code>context</code> is the\n              arbitrary context passed into this method. Normalizer function should return\n              the value normalized for sorting.<br>\n              May also be specified as a ValueMap which maps property values to sortable values.", 
             optional:true,name:"normalizer", defaultValue:null, type:"function or ValueMap"},
            {description:"Callers may pass an arbitrary context into the sort method, which                          will then be made available to the normalizer function", 
             optional:true,name:"context", defaultValue:null, type:"any"}
        ],
        returns:{description:"the list itself", type:"List"},
        type:"method",
        definingClass:"interface:List",
        groups:["sorting"]
    },
    "method:Layout.getMemberOffset":{
        ref:"method:Layout.getMemberOffset",
        flags:"A",
        description:" An optional method that, if it exists, allows the manipulation of the calculated\n offset for members of this layout.  Returns the offset for the specified\n member.\n",
        name:"getMemberOffset",
        seeAlso:[],
        params:[
            {description:"Component to be positioned", optional:false, name:"member", defaultValue:null, 
             type:"Canvas"},
            {description:"Value of the currently calculated member offset. This      may be returned verbatim or manupulated in this method.", 
             optional:false,name:"defaultOffset", defaultValue:null, type:"Number"},
            {description:"alignment of the enclosing layout", optional:false, name:"alignment", 
             defaultValue:null,type:"String"}
        ],
        type:"method",
        definingClass:"class:Layout",
        groups:["layoutMember"]
    },
    "attr:Canvas.animateShowAcceleration":{
        ref:"attr:Canvas.animateShowAcceleration",
        flags:"IRWA",
        description:"Default acceleration function for performing an animated show.  If unset, \n <code>this.animateAcceleration</code> will be used by default instead",
        name:"animateShowAcceleration",
        seeAlso:[],
        valueType:"AnimationAcceleration",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "method:ListGridField.sortNormalizer":{
        ref:"method:ListGridField.sortNormalizer",
        flags:"A",
        description:" Optional function to return the value that should be used when sorting this field.\n <P>\n Note that, if the dataset exceeds ${isc.DocUtils.linkForRef('attr:ListGrid.dataPageSize')} and hence paging is\n introduced, the grid relies on the server to provide sorting, and the sortNormalizer\n will no longer be called.\n\n",
        name:"sortNormalizer",
        seeAlso:[],
        params:[
            {description:"record to normalize", optional:false, name:"recordObject", defaultValue:null, 
             type:"object"},
            {description:"name of the field on which sorting occurred", optional:false, 
             name:"fieldName",defaultValue:null, type:"string"},
            {description:"A pointer back to the list grid displaying this field will   be available as the <code>context</code> argument. Note that you can also get a pointer\n   to the field definition object by calling <code>context.getField(fieldName)</code>", 
             optional:false,name:"context", defaultValue:null, type:"ListGrid"}
        ],
        returns:{description:"normalized value for sorting", type:"any"},
        type:"method",
        examples:["${isc.DocUtils.linkForExampleId('dataTypes')}"],
        definingClass:"object:ListGridField",
        groups:["sorting"]
    },
    "method:ListGrid.anySelected":{
        ref:"method:ListGrid.anySelected",
        flags:"",
        description:" Whether at least one item is selected\n",
        name:"anySelected",
        seeAlso:[],
        returns:{description:"true == at least one item is selected								false == nothing at all is selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "classMethod:Hover.hide":{
        ref:"classMethod:Hover.hide",
        flags:"",
        description:" Hide hover hover Canvas shown via ${isc.DocUtils.linkForRef('classMethod:Hover.show')}\n",
        name:"hide",
        seeAlso:[],
        type:"classMethod",
        definingClass:"class:Hover"
    },
    "attr:DSRequest.oldValues":{
        ref:"attr:DSRequest.oldValues",
        flags:"IR",
        description:"For an <code>update</code> or <code>remove</code> operation, the original values of the\n record to be updated or removed.  <code>oldValues</code> is automatically added to\n DSRequests submitted by DataBound Components.  Available on the server via\n <code>DSRequest.getOldValues()</code>.\n <P>\n The server can compare the <code>oldValues</code> to the most recent stored values in order\n to detect that the user was looking at stale values when the user submitted changes (NOTE:\n this means of detecting concurrent edit is sometimes called \"long transactions\").  \n <P>\n In applications where a policy of \"last update wins\" is not appropriate when updating\n certain fields, special UI can be shown for this case.  For example, on detecting concurrent\n edit, the server may send back a special <code>dsResponse.status</code> code that the client\n application detects, offering the user a choice of proceeding with the operation,\n discarding edits, or reconciling new and old values in a special interface.",
        name:"oldValues",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "attr:Canvas.animateMoveTime":{
        ref:"attr:Canvas.animateMoveTime",
        flags:"IRWA",
        description:"Default time for performing an animated move.  If unset, <code>this.animateTime</code>\n will be used by default instead",
        name:"animateMoveTime",
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["animation"]
    },
    "attr:Window.minimized":{
        ref:"attr:Window.minimized",
        flags:"IRW",
        description:"Is this window minimized. If true at init time, the window will be drawn minimized.\n To set this property at runtime use ${isc.DocUtils.linkForRef('method:Window.minimize')} or ${isc.DocUtils.linkForRef('method:Window.restore')}.",
        name:"minimized",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "header"]
    },
    "method:CubeGrid.setFacetValueTitleAlign":{
        ref:"method:CubeGrid.setFacetValueTitleAlign",
        flags:"",
        description:"\n      set the align for the title for a facet value\n\n      <br><i>methodType</i> setter\n",
        name:"setFacetValueTitleAlign",
        seeAlso:[],
        params:[
            {description:"facet to update", optional:false, name:"facetId", defaultValue:null, type:"id"},
            {description:"facetValue to update", optional:false, name:"facetValueId", defaultValue:null, 
             type:"id"},
            {description:"new alignment for facet value title", optional:false, name:"align", 
             defaultValue:null,type:"alignEnum"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["gridLayout"]
    },
    "attr:ListGridField.imageSize":{
        ref:"attr:ListGridField.imageSize",
        flags:"IRW",
        description:"Size of images shown for fieldTypes image and imageFile in this field.\n This setting overrides the global ListGrid default ${isc.DocUtils.linkForRef('attr:ListGrid.imageSize')}.\n <P>\n If set to a String, assumed to be a property on each record that specifies the image\n height.  For example, if <code>field.imageSize</code> is \"logoSize\",\n <code>record.logoSize</code> will control the size of the image.",
        name:"imageSize",
        seeAlso:[
            {ref:"attr:ListGridField.imageWidth", description:null},
            {ref:"attr:ListGridField.imageHeight", description:null}
        ],
        valueType:"number",
        defaultValue:"16",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["imageColumns"]
    },
    "class:String":{
        methods:["method:String.contains", "method:String.startsWith", "method:String.endsWith"],
        ref:"class:String",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/System"],
        attrs:[],
        description:"Generic extensions to JavaScript Strings.  You can call these on any String.",
        name:"String",
        seeAlso:[],
        type:"class"
    },
    "attr:TabSet.tabProperties":{
        ref:"attr:TabSet.tabProperties",
        flags:"IR",
        description:"Properties to apply to all Tabs created by this TabSet.",
        name:"tabProperties",
        seeAlso:[],
        valueType:"Tab Properties",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "attr:Scrollbar.thumbOverlap":{
        ref:"attr:Scrollbar.thumbOverlap",
        flags:"IRWA",
        description:"Number of pixels the thumb is allowed to overlap the buttons at each end of the track.\n Default prevents doubling of 1px borders.  Set higher to allow media that shows curved\n joins between the track button and ScrollThumb.",
        name:"thumbOverlap",
        seeAlso:[],
        valueType:"number",
        defaultValue:"1",
        type:"attr",
        definingClass:"class:Scrollbar"
    },
    "classMethod:FileLoader.loadModules":{
        ref:"classMethod:FileLoader.loadModules",
        flags:"",
        description:"\n Loads the specified SmartClient modules into the context of the current page.\n\n",
        name:"loadModules",
        seeAlso:[],
        params:[
            {description:"List of SmartClient modules to load.  This can either be a                                  string with comma separated module names or an Array of module\n                                  names.", 
             optional:false,name:"modules", defaultValue:null, type:"String or Array"},
            {description:"Optional code to execute when the last of the specified                                      modules has completed loading.", 
             optional:true,name:"onload", defaultValue:null, type:"String or Function"}
        ],
        type:"classMethod",
        definingClass:"class:FileLoader"
    },
    "attr:DataSource.serviceNamespace":{
        ref:"attr:DataSource.serviceNamespace",
        flags:"IR",
        description:"For an XML DataSource, URN of the WebService to use to invoke operations.  This URN\n comes from the \"targetNamespace\" attribute of the &lt;wsdl:definitions&gt; element in a\n WSDL (Web Service Description Language) document, and serves as the unique identifier of\n the service.\n <P>\n Having loaded a WebService using ${isc.DocUtils.linkForRef('classMethod:XMLTools.loadWSDL')}, setting\n <code>serviceNamespace</code> combined with specifying \n ${isc.DocUtils.linkForRef('class:OperationBinding','operationBindings')}\n that set ${isc.DocUtils.linkForRef('attr:OperationBinding.wsOperation')} will cause a DataSource to invoke web\n service operations to fulfill DataSource requests (${isc.DocUtils.linkForRef('class:DSRequest','DSRequests')}).\n <P>\n Setting <code>serviceNamespace</code> also defaults\n ${isc.DocUtils.linkForRef('attr:DataSource.dataURL','dataURL')} to the service's location,\n ${isc.DocUtils.linkForRef('attr:DataSource.dataFormat','dataFormat')} to \"xml\" and\n ${isc.DocUtils.linkForRef('attr:OperationBinding.dataProtocol','dataProtocol')} to \"soap\".",
        name:"serviceNamespace",
        seeAlso:[],
        valueType:"URN",
        defaultValue:"null",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('wsdlBinding')}"],
        definingClass:"class:DataSource",
        groups:["wsdlBinding", "clientDataIntegration"]
    },
    "method:ResultSet.filterLocalData":{
        ref:"method:ResultSet.filterLocalData",
        flags:"A",
        description:" Derive the current filtered set of data from the cache of all matching rows.\n <P>\n This method is automatically called by ${isc.DocUtils.linkForRef('method:ResultSet.setCriteria')} when criteria have actually\n changed, as well as in various other situations.  You could only need to call this method\n directly if:\n <ul>\n <li> you know that client-side filtering is enabled (${isc.DocUtils.linkForRef('attr:ResultSet.useClientFiltering')}:true) and\n active ${isc.DocUtils.linkForRef('method:ResultSet.allMatchingRowsCached')}.\n <li> you have directly, programmatically modified data within the ResultSet such that it no\n longer matches the filter criteria\n <li> you want your modified records to disappear from the list of visible records (that is,\n those accesible via ${isc.DocUtils.linkForRef('method:ResultSet.get')})\n </ul>\n \n",
        name:"filterLocalData",
        seeAlso:[],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "method:Log.setLogPriority":{
        ref:"method:Log.setLogPriority",
        flags:"",
        description:" Set the priority of messages that will be visible for some log category, when logged on\n this Class or Instance object.<br>\n If called with no category, this priority will be applied to every logged message on this\n object<br>\n To set the visible log priority for some category across the entire page, use\n <code>isc.Log.setPriority()</code> instead.\n",
        name:"setLogPriority",
        seeAlso:[
            {ref:"classMethod:Log.setPriority", description:null}
        ],
        params:[
            {description:"Category for which the log priority will be updated. If not                          all logs on this canvas will be logged at the priority passed in.", 
             optional:false,name:"category", defaultValue:null, type:"string"},
            {description:"priority level", optional:false, name:"priority", defaultValue:null, 
             type:"LogPriority"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "attr:ListGridField.iconHeight":{
        ref:"attr:ListGridField.iconHeight",
        flags:"IR",
        description:"If ${isc.DocUtils.linkForRef('attr:ListGridField.icon')} is specified, this property can be used to specify the \n height of the icon to be displayed in the ListGrid header button. \n (See ${isc.DocUtils.linkForRef('attr:StatefulCanvas.iconHeight')})<br>\n If this field is editable, and ${isc.DocUtils.linkForRef('attr:ListGridField.editorIconHeight')} is unset, this \n property will be passed onto the editors for this field as ${isc.DocUtils.linkForRef('attr:FormItem.iconWidth')}, \n which will effect the default size for ${isc.DocUtils.linkForRef('attr:ListGridField.icons','icons')} displayed \n in the editor.",
        name:"iconHeight",
        seeAlso:[
            {ref:"attr:ListGridField.icon", description:null},
            {ref:"attr:ListGridField.icons", description:null}
        ],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:ListGridField"
    },
    "method:ListGrid.selectAllRecords":{
        ref:"method:ListGrid.selectAllRecords",
        flags:"",
        description:"\n  select all records\n\n      <br><i>methodType</i> action\n",
        name:"selectAllRecords",
        seeAlso:[],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "method:Array.getItems":{
        ref:"method:Array.getItems",
        flags:"",
        description:" Return the items at a list of specified positions.\n\n",
        name:"getItems",
        seeAlso:[],
        params:[
            {description:"array of positions", optional:false, name:"itemList", defaultValue:null, 
             type:"List of Number"}
        ],
        returns:{description:"subset of the array, in the same order as itemList", type:"array"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "group:smartArchitecture":{
        ref:"group:smartArchitecture",
        title:"SmartClient Architecture",
        treeLocation:["Concepts"],
        refs:[],
        description:"SmartClient can add interactivity and performance benefits to any web application with a\n variety of integration approaches.  This topic discusses the optimal architecture for a\n SmartClient application, which can be adopted in whole or in part.\n <p>\n In a typical HTML-based web application, every time a new view is shown to a user, a round\n trip to the server is required to retrieve new presentation information, such as a search\n screen.  However in an ISC-based application, showing a new view can be accomplished by\n simply hiding some components and showing others.\n <p>\n Because ISC components are expressed in a concise declarative form, and because ISC\n components have essentially no runtime performance impact until used, dozens of application\n views can be downloaded to the browser using the same bandwidth that would have been\n required to render just the initial view in plain HTML.  \n <p> \n This architectural pattern of \"preloading views\" has tremendous benefits.  View transitions\n which do not require new data from the server can be performed near-instantaneously and\n without server involvement, boosting both interactivity and scalability.\n <p>\n Showing a dialog containing a \"wizard\" is a straightforward example of showing a \"preloaded\n view\".  For example:\n <pre>\n    function showNewUserWizard() {\n        Window.create({\n            items:[\n                DynamicForm.create({ ... })\n            ]\n        });\n    }\n    Button.create({\n        title:\"New User..\",\n        click:\"showNewUserWizard()\"\n    });\n </pre>\n In this example, none of the components involved in a potentially multi-pane wizard are \n created until they are needed.  Showing the wizard has near-instantaneous response and\n causes no server load.\n <p>\n However, let's say that the first pane of the wizard is going to incorporate some dynamic\n user-specific data, such as the current user's name.  To load the username, we'll use an RPC\n operation targetting a .jsp called \"getUserName.jsp\" and show the wizard when it completes\n (see ${isc.DocUtils.linkForRef('class:RPCManager')} for information on RPCs and how to construct a .jsp that can\n send an RPC response).\n <pre>\n    function showNewUserWizard() {\n        RPCManager.sendRequest({\n            actionURL:\"getUserName.jsp\",\n            callback:\"doShow(rpcResponse)\"\n        });\n    }\n    function doShow(rpcResponse) {\n        Window.create({\n            items:[\n                Canvas.create({contents:\"Hello, \" + rpcResponse.userName}),\n                DynamicForm.create({ ... })\n            ]\n        });\n    }\n    Button.create({\n        title:\"New User..\",\n        click:\"showNewUserWizard()\"\n    });\n </pre>\n In this example, we've simply incorporated a user name into the first pane of a wizard.\n However, this pattern allows us to arbitrarily change user interactions based on data from\n the server.  For example, the RPCResponse might have contained a flag indicating that the\n wizard should skip the first two steps, or an arbitrary warning message for the user, or\n even JavaScript code to be evaluated on the client.\n <P>\n This architecture has several key advantages:\n <dl>\n\n <dt><b>Performance: Cacheable UI</b></dt>\n <dd>\n A dynamic, data-driven UI can be expressed completely in <i>cacheable</i> JavaScript.\n This is in contrast to any architecture based on server-side HTML generation, where static\n parts of the presentation are mixed in with dynamic data, preventing cacheability so that\n bandwidth and server time are wasted repeatedly delivering the same static presentation\n data.\n <br>\n Even generated JavaScript is cacheable.  For example, a SmartClient View expressed in XML\n and contained within a JSP is still a separately cacheable resource when loaded via a\n &lt;SCRIPT SRC&gt; tag and advertised as a cacheable resource via HTTP headers, because it\n is ultimately delivered to the browser as simple JavaScript.  Hence standard \n ${isc.DocUtils.linkForRef('group:i18n','internationalization')} techniques such as using JSTL tags in a JSP remain\n applicable.\n <br>\n The SmartClient Architecture even allows you to capture all the gradations of cacheability\n from completely static (changes once per application rollout) to completely dynamic\n (timestamp).  In the example above, the user name wouldn't actually change for the lifetime\n of the page, so could be loaded once only.\n <br>&nbsp;</dd>\n\n <dt><b>Performance: Minimal Server State</b></dt>\n <dd>\n Any architecture that relies on component descriptions being generated by the server\n must track a great deal of state, which, in the SmartClient Architecture, is either\n completely eliminated or greatly reduced.\n <br>&nbsp;</dd>\n\n <dt><b>True Presentation / Business Logic separation</b></dt>\n <dd>\n The RPCResponse object represents the client's exact, minimal needs for server data.\n This is much easier to understand and to audit than a slew of .jsp files which access and\n update miscellaneous state.  It is also far easier to spot reusable patterns of data access,\n which in server-side HTML generation systems often end up as duplicated code.\n <br>&nbsp;</dd>\n\n <dt><b>Parallel Development and Testability</b></dt>\n <dd>\n Using the SmartClient architecture allows you to build a complete, working application\n that can run without a server, based on sample data.  In the example above, it would be \n straightforward to create a testing mode that returned a faked RPC response consisting of\n simply <code>{ userName : \"Bob\" }</code>.\n <br>\n This allows better parallel development by enabling the client side of the system to be\n tested in isolation, and creates clearer communication between client and server-side\n developers since creation of test data tends to develop into data requirements\n specifications.\n <br>\n For more info on creating applications that support client-only testing, see\n ${isc.DocUtils.linkForRef('group:clientOnlyDataSources','Client Only DataSources')}.\n <br>&nbsp;</dd>\n </dl>\n <br>\n <h3>Refinements</h3>\n <br>\n <b>Creating vs Showing a View</b>\n <br>\n Many views will be shown to the user repeatedly, for example, the user may repeatedly switch\n back and forth between two panes of a TabSet.  In that usage it makes sense to make a\n distinction between <i>creating</i> a view and <i>showing</i> an existing view.  When\n showing an existing view, the same components and/or data may be able to be reused.\n <br>\n In the following variant on the original example, we only create the Window object and\n do the RPC to retrieve the user name the first time <code>showNewUserWizard()</code> is\n called.  Subsequently we reuse the existing window, and we assume the user name has not\n changed, so we need not do the RPC again. (<i>Note: \"New User\" button omitted for brevity\n from here on</i>)\n <pre>\n    function showNewUserWizard() {\n        if (!window.myWindow) {\n            Window.create({\n                ID:\"myWindow\",\n                autoDraw:false,\n                items:[\n                    Canvas.create({ ID: \"welcomeCanvas\" }),\n                    DynamicForm.create({ ... })\n                ]\n            });\n            RPCManager.sendRequest({\n                actionURL:\"getUserName.jsp\",\n                callback:\"doShow(rpcResponse)\"\n            });\n        } else {\n            myWindow.show();\n        }\n    }\n    function doShow(rpcResponse) {\n        welcomeCanvas.setContents(\"Hello, \" + rpcResponse.userName);\n        myWindow.show();\n    }\n </pre>\n \n <b>Batching Operations</b>\n <br>\n A view may incorporate multiple components, each of which requires data.  In the following\n example, a DataBound ListGrid has been incorporated into the wizard, and we'd like to fetch\n the user's name and the beginning dataset for the grid in the same batch.  We use \n ${isc.DocUtils.linkForRef('classMethod:RPCManager.startQueue')} to do so.\n <pre>\n    function showNewUserWizard() {\n        if (!window.myWindow) {\n            Window.create({\n                ID:\"myWindow\",\n                autoDraw:false,\n                items:[\n                    Canvas.create({ ID: \"welcomeCanvas\" }),\n                    <b>ListGrid.create({ \n                        ID: \"myGrid\",\n                        dataSource:\"myDataSource\"\n                    }),</b>\n                    DynamicForm.create({ ... })\n                ]\n            });\n            <b>RPCManager.startQueue();\n            myGrid.fetchData();</b>\n            RPCManager.sendRequest({\n                actionURL:\"getUserName.jsp\",\n                callback:\"doShow(rpcResponse)\"\n            });\n            <b>RPCManager.sendQueue();</b>\n        } else {\n            myWindow.show();\n        }\n    }\n    function doShow(rpcResponse) {\n        welcomeCanvas.setContents(\"Hello, \" + rpcResponse.userName);\n        myWindow.show();\n    }\n </pre>\n\n <b>Segmenting very large Applications</b>\n <P>\n If an application has many hundreds of views, but only a handful of views are used by a\n given user in a typical session, for the fastest loading performance you should consider\n loading only the most commonly used views initially then loading further views on demand.\n <P>\n You can use ${isc.DocUtils.linkForRef('classMethod:FileLoader.loadJSFiles')} to load a set of JavaScript files\n compromising an application module that defines a set of related views.  The loaded\n JavaScript files may define new component classes and new DataSources in addition to\n defining new views and their associated logic.",
        name:"smartArchitecture",
        seeAlso:[],
        type:"group"
    },
    "attr:ListGrid.showHeader":{
        ref:"attr:ListGrid.showHeader",
        flags:"IRW",
        description:"Should we show the header for this ListGrid?",
        name:"showHeader",
        setter:["setShowHeader"],
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "method:Array.isEmpty":{
        ref:"method:Array.isEmpty",
        flags:"",
        description:" Return whether or not this array is empty\n\n",
        name:"isEmpty",
        seeAlso:[],
        returns:{description:"true == this array is empty, false == some items in the array", type:"boolean"},
        type:"method",
        definingClass:"object:Array",
        groups:["access"]
    },
    "attr:Menu.items":{
        ref:"attr:Menu.items",
        flags:"IRW",
        description:"Synonym for ${isc.DocUtils.linkForRef('attr:Menu.data')}",
        name:"items",
        setter:["setItems"],
        seeAlso:[],
        valueType:"Array of MenuItem",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Menu",
        groups:["data"]
    },
    "method:List.duplicate":{
        ref:"method:List.duplicate",
        flags:"A",
        description:" Return an Array that is a shallow copy of the list, that is, containing the same items.\n\n",
        name:"duplicate",
        seeAlso:[],
        returns:{description:"new array, pointing to the same items", type:"Array"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "method:ComboBoxItem.getValueFieldName":{
        ref:"method:ComboBoxItem.getValueFieldName",
        flags:"",
        description:" Getter method to retrieve the ${isc.DocUtils.linkForRef('attr:FormItem.valueField')} for this item.\n If unset, default behavior will return the ${isc.DocUtils.linkForRef('attr:FormItem.name')} of this field.\n",
        name:"getValueFieldName",
        seeAlso:[],
        returns:{description:"fieldName to use a \"value field\" in records from this items               ${isc.DocUtils.linkForRef('attr:FormItem.optionDataSource')}", 
         type:"string"},
        type:"method",
        definingClass:"class:ComboBoxItem",
        groups:["display_values"]
    },
    "attr:Button.showFocusedIcon":{
        ref:"attr:Button.showFocusedIcon",
        flags:"IR",
        description:"If using an icon for this button, whether to switch the icon image when the button\n recieves focus.\n <P>\n If ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is true, the <code>\"Over\"</code> icon will be\n displayed when the canvas has focus, otherwise a seperate <code>\"Focused\"</code> icon\n will be displayed",
        name:"showFocusedIcon",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Button",
        groups:["buttonIcon"]
    },
    "attr:ListGrid.sortFieldDescendingText":{
        ref:"attr:ListGrid.sortFieldDescendingText",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, this\n attribute will be shown as the menu item title to sort a field in descending order.",
        name:"sortFieldDescendingText",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Sort Descending\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "attr:Window.showResizer":{
        ref:"attr:Window.showResizer",
        flags:"IRW",
        description:"If true, show a button in the lower right corner that allows users to resize the Window.\n Note that the resizer will only be displayed if the footer is showing for the window\n (${isc.DocUtils.linkForRef('attr:Window.showFooter')}) and ${isc.DocUtils.linkForRef('attr:Window.canDragResize')} is true.",
        name:"showResizer",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "dragging"]
    },
    "group:serialization":{
        ref:"group:serialization",
        refs:["classMethod:isc.clone"],
        name:"serialization",
        seeAlso:[],
        type:"group"
    },
    "attr:DateChooser.firstDayOfWeek":{
        ref:"attr:DateChooser.firstDayOfWeek",
        flags:"IR",
        description:"Day of the week to show in the first column.  0=Sunday, 1=Monday, ..., 6=Saturday.",
        name:"firstDayOfWeek",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"0",
        type:"attr",
        definingClass:"class:DateChooser",
        groups:["appearance"]
    },
    "method:Class.setProperty":{
        ref:"method:Class.setProperty",
        flags:"",
        description:" Set a property on this object, calling the setter method if it exists.\n <p>\n Whenever you set a property on an ISC component, you should call either the specific setter\n for that property, or <code>setProperty()/setProperties()</code> if it doesn't have one.\n This future-proofs your code against the later addition of required setters.  \n\n",
        name:"setProperty",
        seeAlso:[
            {ref:"method:Class.setProperties", description:null}
        ],
        params:[
            {description:"name of the property to set", optional:false, name:"propertyName", 
             defaultValue:null,type:"String"},
            {description:"new value for the property", optional:false, name:"newValue", 
             defaultValue:null,type:"any"}
        ],
        type:"method",
        definingClass:"class:Class"
    },
    "method:CubeGrid.addColumnFacet":{
        ref:"method:CubeGrid.addColumnFacet",
        flags:"",
        description:" Add a column facet to the view at index \"index\".  Handles the facet already being in the view\n (does a pivot).<br><br>\n\n The facet being added should currently have a fixed facet value (unless it's already part of the\n view), which will be removed from cubeGrid.fixedFacetValues.\n\n <br><i>methodType</i>  action\n",
        name:"addColumnFacet",
        seeAlso:[
            {ref:"method:CubeGrid.removeFacet", description:null},
            {ref:"attr:CubeGrid.fixedFacetValues", description:null}
        ],
        params:[
            {description:"facetId to add.  Definition must have been provided at init time.", 
             optional:false,name:"facetId", defaultValue:null, type:"id"},
            {description:"index to add the facet at.  0 = outermost (default innermost)", 
             optional:true,name:"index", defaultValue:null, type:"integer"}
        ],
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "attr:Tree.isFolderProperty":{
        ref:"attr:Tree.isFolderProperty",
        flags:"IRW",
        description:"Name of property that defines whether a node is a folder.  By default this is set to\n ${isc.DocUtils.linkForRef('attr:TreeNode.isFolder')}.",
        name:"isFolderProperty",
        seeAlso:[
            {ref:"attr:TreeNode.isFolder", description:null}
        ],
        valueType:"String",
        defaultValue:"\"isFolder\"",
        type:"attr",
        definingClass:"class:Tree"
    },
    "attr:DetailViewer.emptyCellValue":{
        ref:"attr:DetailViewer.emptyCellValue",
        flags:"IRWA",
        description:"Text to show for an empty cell",
        name:"emptyCellValue",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"&nbsp;\"",
        type:"attr",
        definingClass:"class:DetailViewer",
        groups:["appearance"]
    },
    "attr:CubeGrid.rowFacets":{
        ref:"attr:CubeGrid.rowFacets",
        flags:"IRW",
        description:"The list of facets that will appear to the left of the body",
        name:"rowFacets",
        seeAlso:[],
        valueType:"array",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["facetLayout"]
    },
    "type:Criteria":{
        ref:"type:Criteria",
        treeLocation:["Client Reference/Data Binding"],
        description:"Criteria for selecting only a matching set of records from a DataSource.  Criteria can\n be applied on the client and server.  Unless configured otherwise, criteria will generally\n be applied client-side by ${isc.DocUtils.linkForRef('class:ResultSet')}s via ${isc.DocUtils.linkForRef('method:ResultSet.applyFilter')}.  \n <P>\n The criteria format supported by the SmartClient Server built-in SQLDataSource and HibernateDataSource \n is a JavaScript Object where each\n property specifies the name and required value for a field.  Multiple legal values for a field\n can be provided as an Array.  For example:\n <pre>\n var criteria = {\n    field1 : \"value1\",\n    field2 : [\"value2\", \"value3\"]\n }\n </pre>\n Would select all records where field1 has value \"value1\" and where field2 has <i>either</i>\n \"value2\" or \"value3\".\n <P>\n For custom backends, criteria must be a JavaScript Object but its properties can contain\n whatever data you want.  When sent to the SmartClient server, the Java representation of the\n criteria is described ${isc.DocUtils.linkForRef('attr:RPCRequest.data','here')}.  When sent to other servers, the \n ${isc.DocUtils.linkForRef('type:DSProtocol','operationBinding.dataProtocol')} affects the format.",
        name:"Criteria",
        seeAlso:[
            {ref:"type:CriteriaPolicy", description:null}
        ],
        type:"type"
    },
    "method:Button.setWrap":{
        ref:"method:Button.setWrap",
        flags:"",
        description:" Set whether the title of this button should be allowed to wrap if too long for the button's\n specified width.\n\n",
        name:"setWrap",
        seeAlso:[],
        params:[
            {description:"whether to wrap the title", optional:false, name:"newWrap", defaultValue:null, 
             type:"boolean"}
        ],
        type:"method",
        definingClass:"class:Button"
    },
    "attr:CubeGrid.facetValueHoverStyle":{
        ref:"attr:CubeGrid.facetValueHoverStyle",
        flags:"IRWA",
        description:"Allows the developer to override the css class applied to  hover tips shown for\n facet values.  If unspecified, and <code>this.hoverStyle</code> is not null, that \n css class will be applied to facet value hovers instead.",
        name:"facetValueHoverStyle",
        seeAlso:[
            {ref:"attr:Canvas.hoverStyle", description:null}
        ],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:CubeGrid",
        groups:["hoverTips"]
    },
    "attr:ButtonItem.buttonProperties":{
        ref:"attr:ButtonItem.buttonProperties",
        flags:"IRA",
        description:"Custom Properties to apply to our button item.",
        name:"buttonProperties",
        seeAlso:[],
        valueType:"Object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ButtonItem"
    },
    "classAttr:Dialog.Prompt":{
        ref:"classAttr:Dialog.Prompt",
        flags:"A",
        description:"The \"Prompt\" object on the dialog class is a singleton Dialog instance.\n  The Prompt is used to show text to the user in a modal fashion - it will expand to show \n  all the text that you put into it.\n  By default this Dialog has no end-user controls and is expected to be programmatically\n  dismissed.<br>\n  Common use-case: During server-interactions, the Prompt will be used to display a suitable \n  wait message, and suppress user input.<br><br>\n\n Notes:<br>\n  Because this is a singleton object, properties set on the Prompt directly will persist each\n  time it is shown.<br>\n  Developers should use the <code>showPrompt()</code> and <code>clearPrompt()</code> methods\n  to show and hide the prompt rather than manipulating the prompt directly.",
        name:"Prompt",
        seeAlso:[
            {ref:"classMethod:isc.showPrompt", description:null},
            {ref:"classMethod:isc.clearPrompt", description:null}
        ],
        valueType:"object",
        defaultValue:"dialog instance properties",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["Prompting"]
    },
    "attr:GridRenderer.drawAheadRatio":{
        ref:"attr:GridRenderer.drawAheadRatio",
        flags:"IRWA",
        description:"How far should we render rows ahead of the currently visible area?  This is expressed as a\n ratio from viewport size to rendered area size.<br><br>\n \n Tweaking drawAheadRatio allows you to make tradeoffs between continuous scrolling speed vs\n initial render time and render time when scrolling by large amounts.<br><br>\n\n NOTE: Only applies when showAllRows is false.",
        name:"drawAheadRatio",
        seeAlso:[],
        valueType:"float",
        defaultValue:"1.3",
        type:"attr",
        definingClass:"class:GridRenderer",
        groups:["performance"]
    },
    "attr:ListGridField.enterKeyEditAction":{
        ref:"attr:ListGridField.enterKeyEditAction",
        flags:"IRW",
        description:"What to do when a user hits enter while editing this field?<br>\n Overrides the <code>enterKeyEditAction</code> as specified at the listGrid level while \n focus is in this field.",
        name:"enterKeyEditAction",
        seeAlso:[],
        valueType:"EnterKeyEditAction",
        defaultValue:"\"done\"",
        type:"attr",
        definingClass:"object:ListGridField",
        groups:["editing"]
    },
    "attr:DynamicForm.initialCriteria":{
        ref:"attr:DynamicForm.initialCriteria",
        flags:"IR",
        description:"Criteria to be used when ${isc.DocUtils.linkForRef('attr:DynamicForm.autoFetchData')} is set.",
        name:"initialCriteria",
        seeAlso:[],
        valueType:"Criteria",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm"
    },
    "attr:StretchImgButton.showTitle":{
        ref:"attr:StretchImgButton.showTitle",
        flags:"IRW",
        description:"Determines whether any specified ${isc.DocUtils.linkForRef('method:StatefulCanvas.getTitle','title')} will be \n displayed for this component.<br>\n Applies to Image-based components only, where the title will be rendered out in a label\n floating over the component",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:StretchImgButton"
    },
    "method:ImgButton.isSelected":{
        ref:"method:ImgButton.isSelected",
        flags:"",
        description:" Find out if this object is selected\n",
        name:"isSelected",
        seeAlso:[],
        returns:{description:null, type:"boolean"},
        type:"method",
        definingClass:"class:ImgButton",
        groups:["state"]
    },
    "class:RadioGroupItem":{
        methods:[],
        exampleConfig:"RadioGroupItem.xml",
        ref:"class:RadioGroupItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:RadioGroupItem.vertical"],
        description:"FormItem that shows a set of mutually exclusive options as a group of radio buttons.",
        name:"RadioGroupItem",
        seeAlso:[],
        type:"class"
    },
    "attr:Label.wrap":{
        ref:"attr:Label.wrap",
        flags:"IRW",
        description:"If false, the label text will not be wrapped to the next line.",
        name:"wrap",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Label",
        groups:["sizing"]
    },
    "attr:RPCRequest.data":{
        ref:"attr:RPCRequest.data",
        flags:"IRW",
        description:"This attribute specifies the payload of the RPCRequest.  When using the SmartClient server,\n any JavaScript simple type or arbitrarily nested set of Objects and Arrays can be sent\n to server and automatically translated to Java Objects.  Here are the \n mapping of JavaScript types to their corresponding server object types:<br><br>\n\n <table class='normal' border='1'>\n   <tr><td><b>JS Type</b></td>     <td><b>Java Type</b></td> <td><b>C# Type</b></td> <td><b>Perl Type</b></td></tr>\n\n   <tr><td>Object: {}</td>         <td>Map</td>              <td>IDictionary</td>      <td>Associative Array: {}</td></tr>\n   <tr><td>Array: []</td>          <td>List</td>             <td>IList</td>      <td>Array: []</td></tr>\n   <tr><td>String</td>             <td>String</td>           <td>string</td>         <td>string</td></tr>\n   <tr><td>Number</td>             <td>Long|Double</td>      <td>long|double</td>    <td>string</td></tr>\n   <tr><td>Boolean</td>            <td>Boolean</td>          <td>bool</td>           <td>string</td></tr>\n   <tr><td>Date</td>               <td>java.util.Date</td>   <td>DateTime</td>       <td>string</td></tr>\n \n </table>\n <br><br>\n Note that the order of keys/values in the Maps created on the server is not guaranteed\n because JavaScript Object literals do not guarantee order.\n <p>\n Server->client conversion follows the this table as well, with some extras.  See the toJS()\n method on JSTranslater in the server documentation for a description of additional\n behaviors.\n <P>\n When <b>not</b> communicating with the SmartClient server, <code>rpcRequest.data</code>\n becomes simple HTTP parameters or an HTTP request body - see ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')}\n for details.",
        name:"data",
        seeAlso:[],
        valueType:"any serializeable",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "method:FormItem.getFieldName":{
        ref:"method:FormItem.getFieldName",
        flags:"A",
        description:"			Return the name for the this formItem.\n",
        name:"getFieldName",
        seeAlso:[],
        returns:{description:"name for this form item", type:"string"},
        type:"method",
        definingClass:"class:FormItem",
        groups:["drawing"]
    },
    "attr:Button.valign":{
        ref:"attr:Button.valign",
        flags:"IRW",
        description:"Vertical alignment of this component's title.",
        name:"valign",
        setter:["setVAlign"],
        seeAlso:[],
        valueType:"VerticalAlignment",
        defaultValue:"Canvas.CENTER",
        type:"attr",
        definingClass:"class:Button",
        groups:["appearance"]
    },
    "method:ListGrid.deselectRecord":{
        ref:"method:ListGrid.deselectRecord",
        flags:"",
        description:"\n  Deselect a record passed in explicitly, or by index.  [Synonym for selectRecord(record, false)].\n\n      <br><i>methodType</i> action\n",
        name:"deselectRecord",
        seeAlso:[],
        params:[
            {description:"record (or row number) to deselect", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord | number"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["selection"]
    },
    "method:Selection.getSelectedRecord":{
        ref:"method:Selection.getSelectedRecord",
        flags:"",
        description:"			Return the first item in the list that is selected.<br><br>\n\n			Note that this should only be used if you know that one only one item\n			 may be selected, or you really don't care about items after the first one.<br><br>\n\n			To get all selected objects, use <code>${isc.DocUtils.linkForRef('method:Selection.getSelection')}</code>\n",
        name:"getSelectedRecord",
        seeAlso:[],
        returns:{description:"first selected record, or null if nothing selected", type:"object"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:TreeGrid.getOpenIcon":{
        ref:"method:TreeGrid.getOpenIcon",
        flags:"A",
        description:" Get the appropriate open/close opener icon for a node.\n\n",
        name:"getOpenIcon",
        seeAlso:[],
        params:[
            {description:"tree node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"URL for the icon to show the node's open state", type:"URL"},
        type:"method",
        definingClass:"class:TreeGrid"
    },
    "method:Dialog.applyClick":{
        ref:"method:Dialog.applyClick",
        flags:"",
        description:" Handle a click on the 'apply' button of this Dialog.  \n Default implementation is to call <code>saveData()</code>, but NOT close the Dialog.\n",
        name:"applyClick",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        type:"method",
        definingClass:"class:Dialog",
        groups:["buttons"]
    },
    "method:ListGrid.recordDoubleClick":{
        ref:"method:ListGrid.recordDoubleClick",
        flags:"",
        description:" Executed when the listGrid receives a 'doubleClick' event on an enabled, non-separator\n record. The default implementation does nothing -- override to perform\n some action when any record or field is double clicked.<br>\n A record event handler can be specified either as a function to execute, or as a string\n of script to evaluate. If the handler is defined as a string of script, all the\n parameters below will be available as variables for use in the script.<br>\n To do something specific if a particular field is double clicked, add a\n recordDoubleClick method or string of script to that field (same parameters) when you're\n setting up the list.<br>\n <b>Notes:</b><ul>\n <li>This will not be called if the click is below the last item of the list.</li>\n <li>This method is called from the default implementation of ${isc.DocUtils.linkForRef('method:ListGrid.rowDoubleClick')},\n so if that method is overridden this method may not be fired.</li></ul>\n",
        name:"recordDoubleClick",
        seeAlso:[
            {ref:"method:ListGrid.rowDoubleClick", description:null}
        ],
        params:[
            {description:"the listGrid that contains the doubleclick event", optional:false, 
             name:"viewer",defaultValue:null, type:"listGrid"},
            {description:"the record that was double-clicked", optional:false, name:"record", 
             defaultValue:null,type:"ListGridRecord"},
            {description:"number of the record clicked on in the current set of                                  displayed records (starts with 0)", 
             optional:false,name:"recordNum", defaultValue:null, type:"number"},
            {description:"the field that was clicked on (field definition)", optional:false, 
             name:"field",defaultValue:null, type:"ListGridField"},
            {description:"number of the field clicked on in the listGrid.fields                                  array", 
             optional:false,name:"fieldNum", defaultValue:null, type:"number"},
            {description:"value of the cell (after valueMap, etc. applied)", optional:false, 
             name:"value",defaultValue:null, type:"object"},
            {description:"raw value of the cell (before valueMap, etc applied)", optional:false, 
             name:"rawValue",defaultValue:null, type:"object"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["events"]
    },
    "classMethod:Date.compareDates":{
        ref:"classMethod:Date.compareDates",
        flags:"",
        description:" Compare two dates; returns 0 if equal, -1 if the first date is greater (later), or 1 if\n the second date is greater.\n",
        name:"compareDates",
        seeAlso:[],
        params:[
            {description:"first date to compare", optional:false, name:"date1", defaultValue:null, 
             type:"date"},
            {description:"second date to compare", optional:false, name:"date2", defaultValue:null, 
             type:"date"}
        ],
        returns:{description:"0 if equal, -1 if first date &gt; second date, 1 if second date &gt; first date", 
         type:"number"},
        type:"classMethod",
        definingClass:"class:Date"
    },
    "method:FormItem.setDisabled":{
        ref:"method:FormItem.setDisabled",
        flags:"A",
        description:"  Set this item to be enabled or disabled at runtime. \n",
        name:"setDisabled",
        seeAlso:[
            {ref:"attr:FormItem.disabled", description:null}
        ],
        params:[
            {description:"true if this item should be disabled", optional:false, name:"disabled", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:FormItem",
        groups:["enable"]
    },
    "method:StretchImgButton.setIcon":{
        ref:"method:StretchImgButton.setIcon",
        flags:"",
        description:" Change the icon being shown next to the title text.\n",
        name:"setIcon",
        seeAlso:[],
        params:[
            {description:"URL of new icon", optional:false, name:"icon", defaultValue:null, type:"URL"}
        ],
        type:"method",
        definingClass:"class:StretchImgButton",
        groups:["buttonIcon"]
    },
    "attr:PickList.pickListProperties":{
        ref:"attr:PickList.pickListProperties",
        flags:"IR",
        description:"If specified this properties block will be applied to the pickList created for this\n Form Item.",
        name:"pickListProperties",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"interface:PickList"
    },
    "method:List.removeAt":{
        ref:"method:List.removeAt",
        flags:"",
        description:" Remove the item at the specified position, rearranging all subsequent items to fill the gap\n\n",
        name:"removeAt",
        seeAlso:[],
        params:[
            {description:"position to remove", optional:false, name:"pos", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"item that was removed", type:"any"},
        type:"method",
        definingClass:"interface:List",
        groups:["modification"]
    },
    "attr:SimpleType.valueMap":{
        ref:"attr:SimpleType.valueMap",
        flags:"IR",
        description:"List of legal values for this type, like ${isc.DocUtils.linkForRef('attr:DataSourceField.valueMap')}.",
        name:"valueMap",
        seeAlso:[],
        valueType:"ValueMap",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:SimpleType",
        groups:["dataType"]
    },
    "attr:DataSource.tagName":{
        ref:"attr:DataSource.tagName",
        flags:"IRA",
        description:"Tag name to use when serializing to XML.  If unspecified, the <code>dataSource.ID</code>\n will be used.",
        name:"tagName",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DataSource",
        groups:["clientDataIntegration"]
    },
    "attr:DSRequest.operationId":{
        ref:"attr:DSRequest.operationId",
        flags:"I",
        description:"When a ${isc.DocUtils.linkForRef('interface:DataBoundComponent')} sends a DSRequest, the\n <code>dsRequest.operationId</code> will be automatically picked up from the\n <code>fetchOperation</code>, <code>addOperation</code>, etc properties of the\n DataBoundComponent.  On the server, <code>operationId</code> can be accessed via\n dsRequest.getOperationId().\n <P>\n The <code>operationId</code> serves as an identifier you can use to create\n variations on the basic DataSource operations that are used by different components in\n different parts of your application.\n <P>\n For example, you may be using a standard <code>fetch</code> operation in one part of your\n application, however on another screen you want to perform a <code>fetch</code> operation on\n the same DataSource but interpret search criteria differently (eg full text search).  You\n could set a ListGrid's <code>fetchOperation</code> property to a name for the special\n search (eg \"booksFullTextSearch\"), and on the server, use dsRequest.getOperationId() to\n detect the passed operationId and invoke the correct server code.\n <P>\n Note that if you ${isc.DocUtils.linkForRef('method:DataSource.fetchData','manually invoke')} a DataSource operation, you can\n also specify operationId via the <code>requestProperties</code> parameter.",
        name:"operationId",
        seeAlso:[],
        valueType:"String",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DSRequest",
        groups:["operations"]
    },
    "attr:StatefulCanvas.showFocus":{
        ref:"attr:StatefulCanvas.showFocus",
        deprecated:"as of SmartClient version 6.1 in favor of ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')}",
        flags:"IRW",
        description:"Should we visibly change state when the canvas recieves focus?  Note that by default the\n <code>over</code> state is used to indicate focus.",
        name:"showFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:StatefulCanvas",
        groups:["state"]
    },
    "attr:RichTextItem.endRow":{
        ref:"attr:RichTextItem.endRow",
        flags:"IRW",
        description:"By default RichTextItems take up an entire row",
        name:"endRow",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:RichTextItem"
    },
    "class:Button":{
        methods:["method:Button.getTitle", "method:Button.setTitle", "method:Button.setIconOrientation", 
         "method:Button.setIcon","method:Button.setAutoFit", "method:Button.setBaseStyle", "method:Button.select", 
         "method:Button.deselect","method:Button.isSelected", "method:Button.setSelected", "method:Button.addToRadioGroup", 
         "method:Button.removeFromRadioGroup","method:Button.setActionType", "method:Button.getActionType", "method:Button.setState", 
         "method:Button.setDisabled","method:Button.getState", "method:Button.action", "method:Button.setWrap", 
         "method:Button.setAlign","method:Button.setVAlign", "method:Button.iconClick"],
        ref:"class:Button",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:["attr:Button.title", "attr:Button.hiliteAccessKey", "attr:Button.icon", 
         "attr:Button.iconSize","attr:Button.iconWidth", "attr:Button.iconHeight", "attr:Button.iconOrientation", 
         "attr:Button.iconAlign","attr:Button.iconSpacing", "attr:Button.showDisabledIcon", "attr:Button.showRollOverIcon", 
         "attr:Button.showFocusedIcon","attr:Button.showDownIcon", "attr:Button.showSelectedIcon", "attr:Button.autoFit", 
         "attr:Button.baseStyle","attr:Button.selected", "attr:Button.radioGroup", "attr:Button.actionType", 
         "attr:Button.state","attr:Button.showDisabled", "attr:Button.showDown", "attr:Button.showFocused", 
         "attr:Button.showRollOver","attr:Button.align", "attr:Button.valign", "attr:Button.wrap"],
        description:"The Button widget class implements interactive, style-based button widgets.",
        name:"Button",
        seeAlso:[],
        type:"class"
    },
    "classMethod:isc.sortObjectByProperties":{
        ref:"classMethod:isc.sortObjectByProperties",
        flags:"",
        description:" Given a simple javascript object, return that object sorted by properties, such that when \n iterating through the properties of the object, values will show up in sorted order.<br>\n Usage example - may be used to sort a ${isc.DocUtils.linkForRef('attr:FormItem.valueMap','formItem valueMap')} defined\n as an object by display value.\n",
        name:"sortObjectByProperties",
        seeAlso:[],
        params:[
            {description:"Object to sort", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"Comparitor function to use when sorting the object properties", 
             optional:true,name:"comparitor", defaultValue:null, type:"function"}
        ],
        returns:{description:"sorted version of the object passed in.", type:"object"},
        type:"classMethod",
        definingClass:"class:isc"
    },
    "attr:ListGrid.loadingDataMessage":{
        ref:"attr:ListGrid.loadingDataMessage",
        flags:"IRW",
        description:"The string to display in the body of a listGrid while data is being loaded.",
        name:"loadingDataMessage",
        seeAlso:[
            {ref:"attr:ListGrid.loadingDataMessageStyle", description:null}
        ],
        valueType:"string",
        defaultValue:"\"Loading data...\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["loadingDataMessage", "i18nMessages"]
    },
    "attr:DSRequest.parentNode":{
        ref:"attr:DSRequest.parentNode",
        flags:"R",
        description:"For advanced use in integrating trees that \n ${isc.DocUtils.linkForRef('attr:ResultTree.loadDataOnDemand','load data on demand')} with web services,\n <code>parentNode</code> is automatically set in \"fetch\" DSRequests issued by a\n ${isc.DocUtils.linkForRef('class:ResultTree')} that is loading children for that <code>parentNode</code>.\n <P>\n This is sometimes needed if a web service requires that additional properties beyond the\n ID of the parentNode must be passed in order to accomplished level-by-level loading.\n A custom implementation of ${isc.DocUtils.linkForRef('method:DataSource.transformRequest')} can access\n dsRequest.parentNode and add any such properties to ${isc.DocUtils.linkForRef('attr:DSRequest.data')}.\n <P>\n This property can only be read.  There is no meaning to setting this property\n yourself.",
        name:"parentNode",
        seeAlso:[],
        valueType:"TreeNode",
        defaultValue:"{}",
        type:"attr",
        definingClass:"class:DSRequest"
    },
    "method:Canvas.getInnerWidth":{
        ref:"method:Canvas.getInnerWidth",
        flags:"A",
        description:"  Returns the amount of space available for (an) absolutely positioned child widget(s) or \n  HTML content, without introducing clipping, scrolling or overflow.<br>\n  This is the space within the viewport of the widget (including padding, but excluding \n  margins, borders or scrollbars) rendered at its specified size.\n\n",
        name:"getInnerWidth",
        seeAlso:[
            {ref:"method:Canvas.getInnerHeight", description:null},
            {ref:"method:Canvas.getInnerContentHeight", description:null},
            {ref:"method:Canvas.getInnerContentWidth", description:null}
        ],
        returns:{description:"inner width of the widget in pixels", type:"number"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:ListGrid.sortAscendingImage":{
        ref:"attr:ListGrid.sortAscendingImage",
        flags:"IRWA",
        description:"Image to show when sorting ascending. See ${isc.DocUtils.linkForRef('object:ImgProperties')} for format.",
        name:"sortAscendingImage",
        seeAlso:[],
        valueType:"ImgProperties",
        defaultValue:"{...}",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "attr:ListGridField.emptyCellValue":{
        ref:"attr:ListGridField.emptyCellValue",
        flags:"IRW",
        description:"The value to display for a cell whose value is null or the empty\n string after applying formatCellValue and valueMap (if any).\n <p>\n This is the field-specific attribute.  You may also set the emptyCellValue at the grid\n level to define the emptyCellValue for all empty fields in the grid.",
        name:"emptyCellValue",
        seeAlso:[
            {ref:"attr:ListGrid.emptyCellValue", description:null}
        ],
        valueType:"string",
        defaultValue:"\"&amp;nbsp;\"",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('emptyValues')}"],
        definingClass:"object:ListGridField",
        groups:["display_values"]
    },
    "attr:DynamicForm.titleWidth":{
        ref:"attr:DynamicForm.titleWidth",
        flags:"IRW",
        description:"The width in pixels allocated to the title of every item in this form.  If you\n          don't specify explicit ${isc.DocUtils.linkForRef('attr:DynamicForm.colWidths')}, you can set this\n          value to the string \"*\" to divide the usable space evenly between titles and\n          fields.",
        name:"titleWidth",
        seeAlso:[],
        valueType:"number or \"*\"",
        defaultValue:"100",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "attr:Validator.type":{
        ref:"attr:Validator.type",
        flags:"IR",
        description:"Type of the validator.\n <p>\n This can be one of the built-in ${isc.DocUtils.linkForRef('class:ValidatorTypes')}, or the string \"custom\" to define\n a custom validator.",
        name:"type",
        seeAlso:[],
        valueType:"ValidatorTypes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Validator"
    },
    "attr:Applet.params":{
        ref:"attr:Applet.params",
        flags:"IR",
        description:"A map of key/value pairs to pass to the applet as parameters.  These are typically\n  accessible within the Java applet code.",
        name:"params",
        seeAlso:[],
        valueType:"object",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Applet"
    },
    "attr:Canvas.snapOffsetTop":{
        ref:"attr:Canvas.snapOffsetTop",
        flags:"IRW",
        description:"If ${isc.DocUtils.linkForRef('attr:Canvas.snapTo','snapTo')} is defined for this widget, this property can be used to\n specify an offset in px for the top coordinate of this widget.\n <P>\n For example if <code>snapTo</code> is specifed as <code>\"T\"</code> and \n <code>snapOffsetTop</code> is set to 6, this widget will be rendered 6px below the top\n edge of its parent or master element.",
        name:"snapOffsetTop",
        seeAlso:[
            {ref:"attr:Canvas.snapTo", description:null}
        ],
        valueType:"integer",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "attr:SpacerItem.showTitle":{
        ref:"attr:SpacerItem.showTitle",
        flags:"IRW",
        description:"we never show a separate title cell for spacers",
        name:"showTitle",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:SpacerItem",
        groups:["appearance"]
    },
    "attr:Img.activeAreaHTML":{
        ref:"attr:Img.activeAreaHTML",
        flags:"IRWA",
        description:"Setting this attribute configures an image map for this image.  The value is expected as a\n sequence of &lg;AREA&gt tags - e.g:\n <pre>\n Img.create({ \n     src: \"myChart.gif\",\n     activeAreaHTML:\n         \"&lt;AREA shape='rect' coords='10,50,30,200' title='30' href='javascript:alert(\\\"30 units\\\")'&gt;\" +\n         \"&lt;AREA shape='rect' coords='50,90,80,200' title='22' href='javascript:alert(\\\"22 units\\\")'&gt;\"\n });\n </pre>\n <u>Implementation notes:</u>\n <ul>\n <li>Quotes in the activeAreaHTML must be escaped or alternated appropriately.</li>\n <li>Image maps do not stretch to fit scaled images. You must ensure that the dimensions of\n your Img component match the anticipated width and height of your image map (which will typically\n match the native dimensions of your image). </li>\n <li>To change the image map of an existing Img component, first set yourImg.activeAreaHTML,\n then call yourImg.markForRedraw(). Calls to yourImg.setSrc() will not automatically update the\n image map. </li>\n <li>activeAreaHTML is not supported on tiled Img components (imageType:\"tile\").</li> \n <li>Native browser support for image map focus/blur, keyboard events, and certain AREA tag\n attributes (eg NOHREF, DEFAULT...) varies by platform. If your image map HTML uses attributes\n beyond the basics (shape, coords, href, title), you should test on all supported browsers to\n ensure that it functions as expected.</li>\n </ul>",
        name:"activeAreaHTML",
        seeAlso:[],
        valueType:"String of HTML AREA tags",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Img",
        groups:["appearance"]
    },
    "classMethod:isA.String":{
        ref:"classMethod:isA.String",
        flags:"",
        description:"\n	Is <code>object</code> a String object?\n\n",
        name:"String",
        seeAlso:[],
        params:[
            {description:"object to test", optional:false, name:"object", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == <code>object</code> is a String", type:"boolean"},
        type:"classMethod",
        definingClass:"object:isA"
    },
    "method:ComboBoxItem.getSelectedRecord":{
        ref:"method:ComboBoxItem.getSelectedRecord",
        flags:"",
        description:" Returns the entire record object associated with the current value for this item\n (or null if no matching record exists in the PickList data).<br>\n Most commonly used for databound pickListItems to retrieve the values of other fields\n in the record\n\n",
        name:"getSelectedRecord",
        seeAlso:[],
        returns:{description:"record object", type:"object"},
        type:"method",
        definingClass:"class:ComboBoxItem"
    },
    "method:Tree.getLeaves":{
        ref:"method:Tree.getLeaves",
        flags:"",
        description:"\n Return all the first-level leaves of a node.\n <br><br>\n For load on demand trees (those that only have a partial representation client-side), this\n method will return only nodes that have already been loaded from the server.  Furthermore,\n for databound trees the return value will be a ${isc.DocUtils.linkForRef('class:ResultSet')},\n so it's important to access the return value using the ${isc.DocUtils.linkForRef('interface:List')} interface\n instead of as a native Javascript Array.\n\n",
        name:"getLeaves",
        seeAlso:[],
        params:[
            {description:"node in question", optional:false, name:"node", defaultValue:null, 
             type:"TreeNode"}
        ],
        returns:{description:"List of immediate children that are leaves.", type:"List"},
        type:"method",
        definingClass:"class:Tree"
    },
    "attr:ListGrid.canReorderFields":{
        ref:"attr:ListGrid.canReorderFields",
        flags:"IRW",
        description:"Indicates whether fields in this listGrid can be reordered by dragging and\n          dropping header fields.",
        name:"canReorderFields",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('columnOrder')}"],
        definingClass:"class:ListGrid",
        groups:["dragging"]
    },
    "attr:HeaderItem.colSpan":{
        ref:"attr:HeaderItem.colSpan",
        flags:"IRW",
        description:"by default, headers span all remaining columns",
        name:"colSpan",
        seeAlso:[],
        valueType:"measure",
        defaultValue:"\"*\"",
        type:"attr",
        definingClass:"class:HeaderItem",
        groups:["appearance"]
    },
    "classAttr:Dialog.CANCEL_BUTTON_TITLE":{
        ref:"classAttr:Dialog.CANCEL_BUTTON_TITLE",
        flags:"IRW",
        description:"Title for the <code>\"Cancel\"</code> button.",
        name:"CANCEL_BUTTON_TITLE",
        seeAlso:[
            {ref:"type:DialogButtons", description:null}
        ],
        valueType:"HTML",
        defaultValue:"\"Cancel\"",
        type:"classAttr",
        definingClass:"class:Dialog",
        groups:["i18nMessages"]
    },
    "method:Selection.setSelected":{
        ref:"method:Selection.setSelected",
        flags:"A",
        description:" Select or deselect a particular item.<br><br>\n All other selection routines go through this one, so by observing this routine you can\n monitor all selection changes.\n",
        name:"setSelected",
        seeAlso:[],
        params:[
            {description:"object to select", optional:false, name:"item", defaultValue:null, 
             type:"object"},
            {description:"turn selection on or off", optional:false, name:"newState", defaultValue:null, 
             type:"boolean"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "attr:DynamicForm.selectOnFocus":{
        ref:"attr:DynamicForm.selectOnFocus",
        flags:"IRW",
        description:"If this property is set to true, whenever a text based field in this form \n (${isc.DocUtils.linkForRef('class:TextItem')}, ${isc.DocUtils.linkForRef('class:TextAreaItem')}) is given focus programmatically \n (see ${isc.DocUtils.linkForRef('method:DynamicForm.focusInItem')}), all text within the item will be selected.<br>\n May be overridden at the form item level.",
        name:"selectOnFocus",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["focus"]
    },
    "attr:DynamicForm.itemHoverAlign":{
        ref:"attr:DynamicForm.itemHoverAlign",
        flags:"IRW",
        description:"Text alignment  for hovers shown for items",
        name:"itemHoverAlign",
        seeAlso:[
            {ref:"attr:FormItem.hoverAlign", description:null}
        ],
        valueType:"Alignment",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["Hovers"]
    },
    "attr:Canvas.margin":{
        ref:"attr:Canvas.margin",
        flags:"IRW",
        description:"Set the CSS Margin, in pixels, for this component.  Margin provides blank space outside\n of the border.\n <P>\n This property sets the same thickness of margin on every side.  Differing per-side\n margins can be set in a CSS style and applied via ${isc.DocUtils.linkForRef('attr:Canvas.styleName')}.\n <P>\n Note that the specified size of the widget will be the size <b>including</b> the margin\n thickness on each side.",
        name:"margin",
        setter:["setMargin"],
        seeAlso:[],
        valueType:"number",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Canvas",
        groups:["appearance"]
    },
    "classAttr:ValidatorTypes.regexp":{
        ref:"classAttr:ValidatorTypes.regexp",
        flags:"IR",
        description:"<code>regexp</code> type validators will determine whether the value specified \n  matches a given regular expression.  The expression should be specified on the\n  <code>validator</code> object as the <code>expression</code> property.",
        name:"regexp",
        seeAlso:[],
        valueType:"validatorDefinition",
        defaultValue:"object",
        type:"classAttr",
        examples:["${isc.DocUtils.linkForExampleId('regularExpression')}"],
        definingClass:"class:ValidatorTypes"
    },
    "method:Chart.getFacet":{
        ref:"method:Chart.getFacet",
        flags:"",
        description:" Get a facet definition by facetId.\n",
        name:"getFacet",
        seeAlso:[
            {ref:"class:Facet", description:null}
        ],
        params:[
            {description:"the id of the facet to retrieve", optional:false, name:"facetId", 
             defaultValue:null,type:"String"}
        ],
        returns:{description:"the Facet if found, or null", type:"Facet"},
        type:"method",
        definingClass:"interface:Chart"
    },
    "attr:DynamicForm.requiredRightTitleSuffix":{
        ref:"attr:DynamicForm.requiredRightTitleSuffix",
        flags:"IRW",
        description:"The string appended to the title of every required item in this form if\n highlightRequiredFields is true and the titleOrientation property is set to \"right\".",
        name:"requiredRightTitleSuffix",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"</B>\"",
        type:"attr",
        definingClass:"class:DynamicForm",
        groups:["formTitles"]
    },
    "method:Canvas.setSnapEdge":{
        ref:"method:Canvas.setSnapEdge",
        flags:"",
        description:" Set the snapEdge property of this canvas, and handle repositioning.\n\n",
        name:"setSnapEdge",
        seeAlso:[],
        params:[
            {description:"new snapEdge value", optional:false, name:"snapEdge", defaultValue:null, 
             type:"string"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["positioning"]
    },
    "group:xml serialization":{
        ref:"group:xml serialization",
        refs:[],
        name:"xml serialization",
        seeAlso:[],
        type:"group"
    },
    "attr:Facet.synchColumnLayout":{
        ref:"attr:Facet.synchColumnLayout",
        flags:"IR",
        description:"if true, treat all values in this facet as a facetValueGroup - causes\n synched header reorder and resize.\n  Note: only supported when all of a facets values are used.",
        name:"synchColumnLayout",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Facet"
    },
    "group:Prompting":{
        ref:"group:Prompting",
        treeLocation:["Client Reference/Control"],
        refs:["classAttr:Dialog.Prompt", "classAttr:Dialog.Warn", "classMethod:isc.showPrompt", 
         "classMethod:isc.clearPrompt","classMethod:isc.warn", "classMethod:isc.say", "classMethod:isc.ask", 
         "classMethod:isc.confirm","classMethod:isc.askForValue", "classMethod:isc.showLoginDialog"],
        description:"Objects / methods used for displaying prompts and warnings to the user via (possibly modal)\n  isc Dialog objects.",
        name:"Prompting",
        seeAlso:[],
        type:"group"
    },
    "method:SectionStack.moveSection":{
        ref:"method:SectionStack.moveSection",
        flags:"",
        description:"\n Moves the specified section(s) to a new position in the SectionStack order.  If you pass\n in multiple sections, then each section will be moved to <code>newPosition</code> in the\n order specified by the <code>sections</code> argument.\n\n",
        name:"moveSection",
        seeAlso:[],
        params:[
            {description:"Section(s) to move.  For this                  parameter, you can pass the position of the section in the\n                  SectionStack, the ID of the section, or a List of sectionIDs", 
             optional:false,name:"sections", defaultValue:null, 
             type:"position|sectionId|list of sectionIDs"},
            {description:"new position index for the section(s).", optional:false, name:"position", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:SectionStack"
    },
    "attr:RPCRequest.paramsOnly":{
        ref:"attr:RPCRequest.paramsOnly",
        deprecated:"As of SmartClient 5.6, use ${isc.DocUtils.linkForRef('attr:RPCRequest.useSimpleHttp')} instead.",
        flags:"IRWA",
        description:"When set to true, assume the request is not going to the SmartClient server, and hence send\n a simple HTTP request.  Values specified in ${isc.DocUtils.linkForRef('attr:RPCRequest.params')} are sent to to the\n server as HTTP request parameters.  If ${isc.DocUtils.linkForRef('attr:RPCRequest.httpMethod')} method is POST and\n ${isc.DocUtils.linkForRef('attr:RPCRequest.data')} is supplied, it is assumed to be a string to post as the HTTP\n requestBody.\n <p>\n Setting this to true automatically defaults ${isc.DocUtils.linkForRef('attr:RPCRequest.serverOutputAsString')} to true\n as well.",
        name:"paramsOnly",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:RPCRequest"
    },
    "attr:Window.statusBar":{
        ref:"attr:Window.statusBar",
        flags:"R",
        description:"Simple Canvas-based status bar, shown in the footer.  ${isc.DocUtils.linkForRef('method:Window.setStatus')} can be used to\n show text here.",
        name:"statusBar",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "attr:Layout.reverseOrder":{
        ref:"attr:Layout.reverseOrder",
        flags:"IRW",
        description:"Reverse the order of stacking for this Layout, so that the last member is shown first.\n <P>\n Requires a manual call to <code>reflow()</code> if changed on the fly.\n <P>\n In RTL mode, for horizontal Layouts the value of this flag will be flipped during\n initialization.",
        name:"reverseOrder",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"false",
        type:"attr",
        definingClass:"class:Layout",
        groups:["layoutPolicy"]
    },
    "method:Canvas.keyDown":{
        ref:"method:Canvas.keyDown",
        flags:"A",
        description:"\n Executed when a key is pressed on a focusable widget (${isc.DocUtils.linkForRef('attr:Canvas.canFocus')}: true). \n <P>\n Use ${isc.DocUtils.linkForRef('classMethod:EventHandler.getKey')} to find out the ${isc.DocUtils.linkForRef('type:KeyName','keyName')} of the key that\n was pressed, and use ${isc.DocUtils.linkForRef('classMethod:EventHandler.shiftKeyDown')} and related functions to determine\n whether modifier keys were down.\n\n",
        name:"keyDown",
        seeAlso:[
            {ref:"attr:Canvas.canFocus", description:null}
        ],
        returns:{description:"false to prevent this event from bubbling to this widget's parent, true or undefined to bubble.", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "attr:DynamicForm.fields":{
        flags:"IRW",
        getter:["getFields"],
        type:"attr",
        ref:"attr:DynamicForm.fields",
        description:"An array of field objects, specifying the order, layout, and types of each field in the\n DynamicForm.\n <p>\n When both <code>dynamicForm.fields</code> and <code>dynamicForm.dataSource</code> are\n set, <code>dynamicForm.fields</code> acts as a set of overrides as explained in\n ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields')}.\n <P>\n See ${isc.DocUtils.linkForRef('group:formLayout','Form Layout')} for information about how flags specified on\n the FormItems control how the form is laid out.",
        name:"fields",
        setter:["setFields"],
        valueType:"Array of FormItem Properties",
        seeAlso:[
            {ref:"class:FormItem", description:null}
        ],
        defaultValue:"null",
        groups:["items"],
        definingClass:"class:DynamicForm"
    },
    "method:ListGrid.setShowHeader":{
        ref:"method:ListGrid.setShowHeader",
        flags:"",
        description:" Show or hide the ListGrid header.\n",
        name:"setShowHeader",
        seeAlso:[],
        params:[
            {description:"true to show the header, false to hide it.", optional:false, name:"show", 
             defaultValue:null,type:"boolean"}
        ],
        type:"method",
        definingClass:"class:ListGrid",
        groups:["gridHeader"]
    },
    "classMethod:Date.setInputFormat":{
        ref:"classMethod:Date.setInputFormat",
        flags:"",
        description:" Sets up the default format for strings being parsed into dates via <code>Date.parseInput()</code>\n",
        name:"setInputFormat",
        seeAlso:[
            {ref:"classMethod:Date.parseInput", description:null}
        ],
        params:[
            {description:"Default format for strings to be parsed into Dates", optional:false, 
             name:"format",defaultValue:null, type:"DateInputFormat"}
        ],
        type:"classMethod",
        definingClass:"class:Date"
    },
    "group:errorhandling":{
        ref:"group:errorhandling",
        refs:[],
        name:"errorhandling",
        seeAlso:[],
        type:"group"
    },
    "type:SelectionType":{
        ref:"type:SelectionType",
        values:[
            {description:"object moves to \"down\" state temporarily (normal button)", 
             value:"StatefulCanvas.BUTTON"},
            {description:"object remains in \"down\" state until clicked again (checkbox)", 
             value:"StatefulCanvas.CHECKBOX"},
            {description:"object moves to \"down\" state, causing another object to go up (radio)", 
             value:"StatefulCanvas.RADIO"}
        ],
        description:"Controls how an object changes state when clicked",
        name:"SelectionType",
        seeAlso:[],
        type:"type",
        groups:["state", "event handling"]
    },
    "attr:DateItem.invalidDateStringMessage":{
        ref:"attr:DateItem.invalidDateStringMessage",
        flags:"IRW",
        description:"Validation error message to display if the user enters an invalid date",
        name:"invalidDateStringMessage",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Invalid date\"",
        type:"attr",
        definingClass:"class:DateItem"
    },
    "method:ListGrid.getField":{
        ref:"method:ListGrid.getField",
        flags:"",
        description:" Given a column number or field name, return the field definition.\n <P>\n When using ${isc.DocUtils.linkForRef('attr:DataBoundComponent.fields','DataBinding')}, the field definition may be\n a mix of information derived from ${isc.DocUtils.linkForRef('attr:ListGrid.fields')} and ${isc.DocUtils.linkForRef('attr:ListGrid.dataSource')}.\n\n",
        name:"getField",
        seeAlso:[],
        params:[
            {description:"number or id of the field.", optional:false, name:"colNum", defaultValue:null, 
             type:"number or ID"}
        ],
        returns:{description:"field definition", type:"ListGridField"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:CubeGrid.getBaseStyle":{
        ref:"method:CubeGrid.getBaseStyle",
        flags:"",
        description:" Return the base stylename for this cell.  Default implementation just returns this.baseStyle.\n See getCellStyle for a general discussion of how to style cells.\n\n",
        name:"getBaseStyle",
        seeAlso:[
            {ref:"method:CubeGrid.getCellStyle", description:null}
        ],
        params:[
            {description:"cell record as returned by getCellRecord", optional:false, name:"record", 
             defaultValue:null,type:"object"},
            {description:"row number for the cell", optional:false, name:"rowNum", defaultValue:null, 
             type:"number"},
            {description:"column number of the cell", optional:false, name:"colNum", defaultValue:null, 
             type:"number"}
        ],
        returns:{description:"CSS class for this cell", type:"CSSStyleName"},
        type:"method",
        definingClass:"class:CubeGrid"
    },
    "attr:TreeNode.title":{
        ref:"attr:TreeNode.title",
        flags:"IR",
        description:"The title of the node as it should appear next to the node icon in the ${isc.DocUtils.linkForRef('class:Tree')}.  If left\n unset, the value of ${isc.DocUtils.linkForRef('attr:TreeNode.name')} is used by default.  See the description in\n ${isc.DocUtils.linkForRef('method:Tree.getTitle')} for full details.\n <p>\n Note: the name of this property can be changed by setting ${isc.DocUtils.linkForRef('attr:Tree.titleProperty')}.",
        name:"title",
        seeAlso:[
            {ref:"attr:Tree.titleProperty", description:null},
            {ref:"method:Tree.getTitle", description:null}
        ],
        valueType:"HTML",
        defaultValue:"null",
        type:"attr",
        definingClass:"object:TreeNode"
    },
    "attr:ListGrid.sortFieldAscendingText":{
        ref:"attr:ListGrid.sortFieldAscendingText",
        flags:"IRW",
        description:"If we're showing a ${isc.DocUtils.linkForRef('attr:ListGrid.showHeaderContextMenu','headerContextMenu')} for this grid, this\n attribute will be shown as the menu item title to sort a field in ascending order.",
        name:"sortFieldAscendingText",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"Sort Ascending\"",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["i18nMessages"]
    },
    "attr:MenuItem.keyTitle":{
        ref:"attr:MenuItem.keyTitle",
        flags:"IR",
        description:"A string to display in the shortcut-key column for this item. If not\n specified, the first KeyName value in ${isc.DocUtils.linkForRef('attr:MenuItem.keys')} will be used by default.",
        name:"keyTitle",
        seeAlso:[],
        valueType:"string",
        defaultValue:"see below",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('fullMenu')}"],
        definingClass:"object:MenuItem",
        groups:["menuKeys"]
    },
    "attr:TabSet.topEdgeOffsets":{
        ref:"attr:TabSet.topEdgeOffsets",
        flags:"IR",
        description:"If this tabSet will ${isc.DocUtils.linkForRef('attr:TabSet.showPaneContainerEdges','show edges')} for the paneContainer,\n and ${isc.DocUtils.linkForRef('attr:TabSet.symmetricEdges')} is set to false, the <code>leftEdgeOffsets</code>, \n <code>rightEdgeOffsets</code>, <code>topEdgeOffsets</code> and <code>bottomEdgeOffsets</code> \n propertes allow the offsets of edges for the paneContainer to be customized depending on\n the ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.\n <P>\n The attribute should be specified an ${isc.DocUtils.linkForRef('type:EdgeSizes','edgeSizes map')}, specifying the\n desired edge offsets where for the appropriate ${isc.DocUtils.linkForRef('attr:TabSet.tabBarPosition')}.",
        name:"topEdgeOffsets",
        seeAlso:[],
        valueType:"EdgeSizes",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:TabSet"
    },
    "method:GridRenderer.refreshRow":{
        ref:"method:GridRenderer.refreshRow",
        flags:"A",
        description:" Refresh an entire row of cells without redrawing the grid.\n <P>\n The cells' values, CSS classes, and CSS text will be refreshed, to the current values\n returned by getCellValue(), getCellStyle() and getCellCSSText() respectively.\n\n",
        name:"refreshRow",
        seeAlso:[
            {ref:"method:GridRenderer.refreshCellStyle", description:"to update just styling"},
            {ref:"method:GridRenderer.refreshCell", description:null}
        ],
        params:[
            {description:"row number of cell to refresh", optional:false, name:"rowNum", 
             defaultValue:null,type:"number"}
        ],
        type:"method",
        definingClass:"class:GridRenderer",
        groups:["appearance"]
    },
    "attr:DOMGrid.rootElement":{
        ref:"attr:DOMGrid.rootElement",
        flags:"IRW",
        description:"Root element (or document) to view in the tree.",
        name:"rootElement",
        setter:["setRootElement"],
        seeAlso:[],
        valueType:"DOMElement",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:DOMGrid"
    },
    "attr:ImgButton.baseStyle":{
        ref:"attr:ImgButton.baseStyle",
        flags:"IRW",
        description:"Base CSS style.  As the component changes state and/or is selected, suffixes will be\n added to the base style.\n <P>\n When the component changes state (eg becomes disabled), a suffix will be appended to this\n style name, reflecting the following states: \"Over\", \"Down\", or \"Disabled\".\n <P>\n If the widget is selected, the suffixes will be \"Selected\", \"SelectedOver\", etc.\n <P>\n If the widget has focus and ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocused')} is true, and\n ${isc.DocUtils.linkForRef('attr:StatefulCanvas.showFocusedAsOver')} is false, the suffixes will be \"Focused\",\n \"FocusedOver\", etc, or if the widget is both selected and focused, \"SelectedFocused\",\n \"SelectedFocusedOver\", etc.\n <P>\n For example, if <code>baseStyle</code> is set to \"button\", this component is\n ${isc.DocUtils.linkForRef('method:ImgButton.isSelected','selected')} and the mouse cursor is over this component, the style\n \"buttonSelectedOver\" will be used.",
        name:"baseStyle",
        setter:["setBaseStyle"],
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"\"imgButton\"",
        type:"attr",
        definingClass:"class:ImgButton"
    },
    "attr:TreeGrid.manyItemsImage":{
        ref:"attr:TreeGrid.manyItemsImage",
        flags:"IRW",
        description:"The filename of the icon displayed use as the default drag tracker when for multiple\n files and/or folders are being dragged.",
        name:"manyItemsImage",
        seeAlso:[],
        valueType:"SCImgURL",
        defaultValue:"\"[SKIN]folder_file.gif\"",
        type:"attr",
        definingClass:"class:TreeGrid",
        groups:["dragdrop"]
    },
    "attr:Slider.animateThumbTime":{
        ref:"attr:Slider.animateThumbTime",
        flags:"IRW",
        description:"Duration of thumb animation, in milliseconds.",
        name:"animateThumbTime",
        seeAlso:[],
        valueType:"integer",
        defaultValue:"250",
        type:"attr",
        definingClass:"class:Slider",
        groups:["animation"]
    },
    "method:Log.logWarn":{
        ref:"method:Log.logWarn",
        flags:"",
        description:" Log a message at \"warn\" priority\n \n",
        name:"logWarn",
        seeAlso:[
            {ref:"method:Log.logDebug", description:"for usage info"}
        ],
        params:[
            {description:"message to log", optional:false, name:"message", defaultValue:null, 
             type:"String"},
            {description:"category to log in", optional:true, name:"category", defaultValue:null, 
             type:"String"}
        ],
        type:"method",
        definingClass:"class:Log"
    },
    "method:Canvas.dragRepositionStart":{
        ref:"method:Canvas.dragRepositionStart",
        flags:"A",
        description:"\n Executed when dragging first starts. No default implementation.  Create this handler to set\n things up for the drag reposition.\n\n",
        name:"dragRepositionStart",
        seeAlso:[
            {ref:"method:Canvas.getOffsetX", description:null},
            {ref:"method:Canvas.getOffsetY", description:null}
        ],
        returns:{description:"false to cancel the drag reposition action", type:"boolean"},
        type:"method",
        definingClass:"class:Canvas",
        groups:["widgetEvents"]
    },
    "classMethod:EventHandler.getDragTarget":{
        ref:"classMethod:EventHandler.getDragTarget",
        flags:"A",
        description:"\n Returns the current dragTarget.  This is the component on which the drag and drop\n interaction was initiated.  This only returns something meaningful during a drag and drop\n interaction.\n\n",
        name:"getDragTarget",
        seeAlso:[
            {ref:"attr:Canvas.dragTarget", description:null}
        ],
        returns:{description:"The dragTarget.", type:"Canvas"},
        type:"classMethod",
        definingClass:"class:EventHandler",
        groups:["mouseEvents"]
    },
    "method:ListGrid.chartRow":{
        ref:"method:ListGrid.chartRow",
        flags:"",
        description:" Chart a single row of data, with each cell value labelled by the column header.\n\n",
        name:"chartRow",
        seeAlso:[],
        params:[
            {description:"row to chart", optional:false, name:"rowNum", defaultValue:null, type:"Number"},
            {description:"optional list of fields to use as labels.  By      default, all fields are used.", 
             optional:true,name:"dataFields", defaultValue:null, type:"Array of String"},
            {description:"properties to pass to the created chart", optional:true, 
             name:"chartProperties",defaultValue:null, type:"Chart Properties"}
        ],
        returns:{description:"created Chart instance", type:"Chart"},
        type:"method",
        definingClass:"class:ListGrid"
    },
    "method:Canvas.setHeight":{
        ref:"method:Canvas.setHeight",
        flags:"",
        description:" Resizes the widget vertically to the specified height (moves the bottom side of the\n widget). The height parameter can be expressed as a percentage of viewport size or as\n the number of pixels.\n <P>\n NOTE: if you're setting multiple coordinates, use resizeTo() or setRect() instead\n\n",
        name:"setHeight",
        seeAlso:[],
        params:[
            {description:"new height", optional:false, name:"height", defaultValue:null, type:"number"}
        ],
        type:"method",
        definingClass:"class:Canvas",
        groups:["sizing"]
    },
    "method:ResultSet.findIndex":{
        ref:"method:ResultSet.findIndex",
        flags:"",
        description:" Like ${isc.DocUtils.linkForRef('method:List.findIndex')}.  Checks only loaded rows and will not trigger a fetch.\n",
        name:"findIndex",
        seeAlso:[],
        params:[
            {description:"property to match, or if an Object is passed, set of                                        properties and values to match", 
             optional:false,name:"propertyName", defaultValue:null, type:"String or Object"},
            {description:"value to compare against (if propertyName is a string)", optional:true, 
             name:"value",defaultValue:null, type:"any"}
        ],
        returns:{description:"index of the first matching Object or -1 if not found", type:"int"},
        type:"method",
        definingClass:"class:ResultSet",
        groups:["access", "find"]
    },
    "attr:Window.showBody":{
        ref:"attr:Window.showBody",
        flags:"IRWA",
        description:"If true, draw the body contents when this Window is drawn.",
        name:"showBody",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:Window",
        groups:["appearance", "body"]
    },
    "method:Selection.isSelected":{
        ref:"method:Selection.isSelected",
        flags:"",
        description:"			Return true if a particular item is selected\n",
        name:"isSelected",
        seeAlso:[],
        params:[
            {description:"object to check", optional:false, name:"item", defaultValue:null, 
             type:"object"}
        ],
        returns:{description:"true == object is selected								false == object is not selected", 
         type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:Selection.selectItem":{
        ref:"method:Selection.selectItem",
        flags:"",
        description:" Select a particular item by its position in the list\n\n",
        name:"selectItem",
        seeAlso:[],
        params:[
            {description:"index of the item to be selected", optional:false, name:"position", 
             defaultValue:null,type:"number"}
        ],
        returns:{description:"true == selection actually changed, false == no change", type:"boolean"},
        type:"method",
        definingClass:"class:Selection",
        groups:["selection"]
    },
    "method:Class.isObserving":{
        ref:"method:Class.isObserving",
        flags:"A",
        description:null,
        name:"isObserving",
        seeAlso:[],
        params:[
            {description:"object we may be observing", optional:false, name:"object", defaultValue:null, 
             type:"object"},
            {description:"name of the method to observed", optional:false, name:"methodName", 
             defaultValue:null,type:"string"}
        ],
        returns:{description:"true == already observing that method", type:"boolean"},
        type:"method",
        definingClass:"class:Class",
        groups:["observation"]
    },
    "method:List.get":{
        ref:"method:List.get",
        flags:"",
        description:" Return the item at a particular position\n",
        name:"get",
        seeAlso:[],
        params:[
            {description:"position of the element to get", optional:false, name:"pos", 
             defaultValue:null,type:"Number"}
        ],
        returns:{description:"whatever's at that position, undef if not found", type:"object"},
        type:"method",
        definingClass:"interface:List",
        groups:["access"]
    },
    "group:htmlElement":{
        ref:"group:htmlElement",
        refs:["method:Canvas.setHtmlElement", "method:Canvas.setHtmlPosition", "attr:Canvas.htmlElement", 
         "attr:Canvas.htmlPosition"],
        name:"htmlElement",
        seeAlso:[],
        type:"group"
    },
    "attr:MultiFileItem.editButton":{
        ref:"attr:MultiFileItem.editButton",
        flags:"IR",
        description:"Button for launching a picker to add new files for upload.  Supports the properties of a\n ${isc.DocUtils.linkForRef('object:FormItemIcon')}.",
        name:"editButton",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:MultiFileItem"
    },
    "method:HTMLFlow.loadingContent":{
        ref:"method:HTMLFlow.loadingContent",
        flags:"A",
        description:" Returns true if this htmlFlow is currently loading content from the server.<br>\n Note: Does not apply to htmlFlows with ${isc.DocUtils.linkForRef('attr:HTMLFlow.contentsType','contentsType')} set to \n <code>\"page\"</code>\n\n",
        name:"loadingContent",
        seeAlso:[
            {ref:"method:HTMLFlow.contentLoaded", description:null}
        ],
        type:"method",
        definingClass:"class:HTMLFlow",
        groups:["contentLoading"]
    },
    "attr:Slider.minValue":{
        ref:"attr:Slider.minValue",
        flags:"IRW",
        description:"The minimum slider value. The slider value is equal to minValue when the thumb is at the\n bottom or left of the slider (unless flipValues is true, in which case the minimum value\n is at the top/right of the slider)",
        name:"minValue",
        seeAlso:[
            {ref:"attr:Slider.flipValues", description:null}
        ],
        valueType:"float",
        defaultValue:"1",
        type:"attr",
        examples:["${isc.DocUtils.linkForExampleId('slider')}"],
        definingClass:"class:Slider"
    },
    "method:ListGrid.getCellValue":{
        ref:"method:ListGrid.getCellValue",
        flags:"A",
        description:"          Obtains the display value for a specific cell according to the given input \n          parameters.<br>\n          To format the value displayed in the cell, make use of the \n          <code>formatCellValue</code> methods rather than overriding this method directly.\n",
        name:"getCellValue",
        seeAlso:[
            {ref:"method:ListGrid.formatCellValue", description:null}
        ],
        params:[
            {description:"the current record object", optional:false, name:"record", defaultValue:null, 
             type:"object"},
            {description:"number of the record in the current set of displayed                                       record (e.g. 0 for the first displayed record)", 
             optional:false,name:"recordNum", defaultValue:null, type:"number"},
            {description:"number of the field in the listGrid.fields array", optional:false, 
             name:"fieldNum",defaultValue:null, type:"number"}
        ],
        returns:{description:"display value for this cell", type:"string"},
        type:"method",
        definingClass:"class:ListGrid",
        groups:["data"]
    },
    "attr:ListGrid.showRollOver":{
        ref:"attr:ListGrid.showRollOver",
        flags:"IRW",
        description:"Should we show different styling for the cell the mouse is over?\n <br>\n If true, the cell style will have the suffix \"Over\" appended.",
        name:"showRollOver",
        seeAlso:[],
        valueType:"boolean",
        defaultValue:"true",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["appearance"]
    },
    "classMethod:Log.getDefaultPriority":{
        ref:"classMethod:Log.getDefaultPriority",
        flags:"",
        description:" Retrieves the default priority of messages that will be visible.\n\n",
        name:"getDefaultPriority",
        seeAlso:[],
        params:[
            {description:"Optional ISC class or instance - if passed the returns the default priority for \n     the class or instance only.", 
             optional:true,name:"object", defaultValue:null, type:"Class or Instance object"}
        ],
        returns:{description:"default priority for which messages will be logged.", type:"LogPriority"},
        type:"classMethod",
        definingClass:"class:Log"
    },
    "method:ResultSet.setCriteria":{
        ref:"method:ResultSet.setCriteria",
        flags:"",
        description:" Set the filter criteria to use when fetching rows.\n <P>\n Setting new criteria will invalidate the current cache, if any.\n\n",
        name:"setCriteria",
        seeAlso:[],
        params:[
            {description:"the filter criteria", optional:false, name:"newCriteria", defaultValue:null, 
             type:"Criteria"}
        ],
        type:"method",
        definingClass:"class:ResultSet"
    },
    "attr:DetailViewer.fieldIdProperty":{
        ref:"attr:DetailViewer.fieldIdProperty",
        flags:"IRWA",
        description:"Name of the field in the DetailViewerRecord which specifies the data property for that record.",
        name:"fieldIdProperty",
        seeAlso:[],
        valueType:"string",
        defaultValue:"\"name\"",
        type:"attr",
        definingClass:"class:DetailViewer"
    },
    "attr:ListGrid.headerBaseStyle":{
        ref:"attr:ListGrid.headerBaseStyle",
        flags:"IR",
        description:"${isc.DocUtils.linkForRef('attr:Button.baseStyle')} to apply to the buttons in the header, and the sorter, for \n this ListGrid.\n Note that depending on the ${isc.DocUtils.linkForRef('attr:ListGrid.headerButtonConstructor','Class')} of the header\n buttons you may also need to set ${isc.DocUtils.linkForRef('attr:ListGrid.headerTitleStyle')}.",
        name:"headerBaseStyle",
        seeAlso:[],
        valueType:"CSSStyleName",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:ListGrid",
        groups:["gridHeader", "appearance"]
    },
    "group:inlineFormItems":{
        ref:"group:inlineFormItems",
        refs:[],
        name:"inlineFormItems",
        seeAlso:[],
        type:"group"
    },
    "attr:Window.body":{
        ref:"attr:Window.body",
        flags:"R",
        description:"Body of the Window, where ${isc.DocUtils.linkForRef('group:Items','contained components')} or ${isc.DocUtils.linkForRef('attr:Window.src','loaded content')}\n is shown.",
        name:"body",
        seeAlso:[],
        valueType:"AutoChild",
        defaultValue:"null",
        type:"attr",
        definingClass:"class:Window"
    },
    "method:CubeGrid.getEventColumn":{
        ref:"method:CubeGrid.getEventColumn",
        flags:"",
        description:" Returns the column number of the most recent mouse event.\n",
        name:"getEventColumn",
        seeAlso:[],
        params:[
            {description:"optional x-coordinate to obtain column number for, in lieue of the x                        coordinate of the last mouse event", 
             optional:false,name:"x", defaultValue:null, type:"number"}
        ],
        returns:{description:"column number, or -2 if beyond last drawn column", type:"number"},
        type:"method",
        definingClass:"class:CubeGrid",
        groups:["events", "selection"]
    },
    "class:IButton":{
        methods:[],
        ref:"class:IButton",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Control"],
        attrs:[],
        description:"The IButton widget class is a class that implements the same APIs as the \n ${isc.DocUtils.linkForRef('class:Button')} class.  Depending on the current skin, <code>IButton</code>s may be\n on the ${isc.DocUtils.linkForRef('class:StretchImgButton')} component, which renders via images, or may be based on the\n ${isc.DocUtils.linkForRef('class:Button')} component, which renders via CSS styles.",
        name:"IButton",
        seeAlso:[],
        type:"class"
    },
    "class:Snapbar":{
        methods:[],
        ref:"class:Snapbar",
        classAttrs:[],
        classMethods:[],
        treeLocation:["Client Reference/Layout"],
        attrs:["attr:Snapbar.showRollOver", "attr:Snapbar.showDown", "attr:Snapbar.showGrip", 
         "attr:Snapbar.showDownGrip","attr:Snapbar.showRollOverGrip", "attr:Snapbar.showClosedGrip", 
         "attr:Snapbar.gripImgSuffix"],
        description:"Subclass of the ${isc.DocUtils.linkForRef('class:Splitbar')} class that uses the <code>grip</code> functionality\n to show a stateful open / close indicator.",
        name:"Snapbar",
        seeAlso:[
            {ref:"class:Splitbar", description:null},
            {ref:"class:Layout", description:null}
        ],
        type:"class"
    },
    "class:TextAreaItem":{
        methods:[],
        exampleConfig:"TextAreaItem.xml",
        ref:"class:TextAreaItem",
        classAttrs:[],
        classMethods:[],
        attrs:["attr:TextAreaItem.wrap", "attr:TextAreaItem.width", "attr:TextAreaItem.height", 
         "attr:TextAreaItem.textBoxStyle","attr:TextAreaItem.iconVAlign", "attr:TextAreaItem.selectOnFocus"],
        description:"Class for editable multi-line text areas (uses HTML <code>&lt;TEXTAREA&gt;</code> object)",
        name:"TextAreaItem",
        seeAlso:[],
        type:"class",
        examples:["${isc.DocUtils.linkForExampleId('textAreaItem')}"]
    }
};

/*
 Isomorphic SmartClient web presentation layer
 Online documentation data
 Copyright 2000-2008 Isomorphic Software, Inc. All rights reserved.
*/

